<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>学习笔记：学点docker</title>
    <url>/2021/05/28/Docker%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><img src="https://blog.adacore.com/uploads/_2400x1200_crop_center-center_none/iStock-1144628524.jpg" alt="git"></p>
<span id="more"></span>

<h3 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h3><h4 id="Docker应用"><a href="#Docker应用" class="headerlink" title="Docker应用"></a>Docker应用</h4><ul>
<li>部署环境复杂，非常费时费力</li>
<li>环境不能跨平台</li>
<li>docker可以把环境打包成镜像，直接运行即可</li>
<li>docker通过隔离机制，可以将服务器利用到极致</li>
</ul>
<h4 id="Docker的功能"><a href="#Docker的功能" class="headerlink" title="Docker的功能"></a>Docker的功能</h4><ul>
<li><p>虚拟机技术</p>
</li>
<li><p>容器化技术</p>
</li>
<li><p>DevOps（开发 + 运维）</p>
</li>
<li><p>应用更加快速的交付和部署</p>
</li>
<li><p>更便捷的升级和扩缩容</p>
</li>
<li><p>更加简单的系统运维</p>
</li>
<li><p>更加高效的计算资源利用</p>
</li>
</ul>
<h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><h4 id="1-Docker基本组成"><a href="#1-Docker基本组成" class="headerlink" title="1.Docker基本组成"></a>1.Docker基本组成</h4><ul>
<li><p>仓库：仓库就是存放镜像的地方</p>
</li>
<li><p>镜像：docker镜像就像一个模板，通过镜像可以创建多个容器</p>
</li>
<li><p>容器：容器可以独立运行一个或者多组应用（启动，停止，删除）</p>
</li>
</ul>
<h4 id="2-run工作流程"><a href="#2-run工作流程" class="headerlink" title="2.run工作流程"></a>2.run工作流程</h4><p><img src="https://img-blog.csdnimg.cn/20200707143715125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhcHB5X1N1bnNoaW5lX0JveQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="3-Docker工作原理"><a href="#3-Docker工作原理" class="headerlink" title="3.Docker工作原理"></a>3.Docker工作原理</h4><p><img src="https://i.loli.net/2019/06/15/5d04a77399fcc37849.png" alt="Docker 工作原理"></p>
<h4 id="4-Docker与VM的区别"><a href="#4-Docker与VM的区别" class="headerlink" title="4.Docker与VM的区别"></a>4.Docker与VM的区别</h4><p><img src="https://images.contentstack.io/v3/assets/blt300387d93dabf50e/bltb6200bc085503718/5e1f209a63d1b6503160c6d5/containers-vs-virtual-machines.jpg" alt="containers-vs-virtual-machines.jpg"></p>
<ul>
<li>Docker的抽象层比虚拟机少</li>
<li>docker利用的是宿主机的内核，vm需要的是Guest OS（vm每次都要加载操作系统的内核）</li>
</ul>
<h3 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h3><p><img src="https://maichong.io/help/images/docker-induction.jpg" alt="img"></p>
<h4 id="1-帮助命令"><a href="#1-帮助命令" class="headerlink" title="1.帮助命令"></a>1.帮助命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker info</span><br><span class="line">docker --help</span><br></pre></td></tr></table></figure>



<h4 id="2-镜像命令"><a href="#2-镜像命令" class="headerlink" title="2.镜像命令"></a>2.镜像命令</h4><p>（1）docker images查看本地主机上的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<ul>
<li>REPOSITORY :镜像的仓库源</li>
<li>TAG：镜像的标签</li>
<li>IMAGE ID：镜像的id</li>
<li>CREATED：镜像的创建时间    </li>
<li>SIZE：镜像大小</li>
</ul>
<p>可选项：</p>
<ul>
<li>-a : 列出所有镜像</li>
<li>-q：只显示镜像id</li>
</ul>
<p>（2）docker search 搜索镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NAME  DESCRIPTION   STARS  OFFICIAL   AUTOMATED</span><br></pre></td></tr></table></figure>

<p>可选项，可以过滤搜索结果：</p>
<p>–filter=STARS=3000 ：搜索stars大于3000的镜像</p>
<p>（3）docker pull 拉取镜像:tag ，默认拉取最新版</p>
<p>（4）docker rmi 删除镜像名称/id   </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除mysql镜像</span></span><br><span class="line">docker rmi -f mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 递归删除所有镜像</span></span><br><span class="line">docker -f $(docker images -aq)</span><br></pre></td></tr></table></figure>



<h4 id="3-容器命令"><a href="#3-容器命令" class="headerlink" title="3.容器命令"></a>3.容器命令</h4><p>有了镜像我们才能创建容器</p>
<p>（1）新建镜像并启动：dokcer run [可选参数] image</p>
<p>容器内相当于一个新的虚拟环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure>

<p>相关参数：</p>
<ul>
<li>–name = “Name” ：容器名字，用于区分容器</li>
<li>-d ：后台方式运行</li>
<li>-it : 使用交互方式运行，可进入容器查看内容（开启容器终端）</li>
<li>-p：指定容器端口</li>
</ul>
<p>（2）查看容器：docker ps</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps  	  #查看运行中的容器</span><br></pre></td></tr></table></figure>

<p>相关参数：</p>
<ul>
<li>-a  ：查看所有容器（包括已终止的容器）</li>
<li>-n = ? :显示最近创建的容器</li>
<li>-q ： 只显示容器的编号</li>
</ul>
<p>（3）退出容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit # 容器停止并退出</span><br><span class="line">ctrl + P + Q # 容器不停止退出(按P,Q这个设计多少有点反人类)</span><br></pre></td></tr></table></figure>



<p>（4）删除容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id	# 删除指定的容器(不能删除运行中的容器，加-f强制删除)</span><br><span class="line">docker rm -f $(docker ps -aq) 	 # 删除所有容器</span><br></pre></td></tr></table></figure>



<p>（5）启动和停止容器的操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id # 启动容器</span><br><span class="line">docker restart 容器id # 重启容器</span><br><span class="line">docker stop 容器id # 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id # 强制停止当前容器</span><br></pre></td></tr></table></figure>



<h4 id="4-操作命令"><a href="#4-操作命令" class="headerlink" title="4.操作命令"></a>4.操作命令</h4><p>（1）后台启动命令</p>
<p>docker容器使用后台运行时（<code>docker run -d centos</code>），必须要有一个前台进程，如果docker发现自己没有应用了，就会自动停止</p>
<p>（2）查看日志命令</p>
<p>查看容器运行的日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f -t --tail 容器</span><br></pre></td></tr></table></figure>



<p>（3）查看容器进程信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker top 容器id</span><br></pre></td></tr></table></figure>



<p>（4）查看镜像元数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure>



<p>（5）进入当前正在运行的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令1:进入容器后开启一个新的终端（相当于开启了另一个进程）</span></span><br><span class="line">docker exec -it 容器id bashShell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令2：进入容器正在执行的终端中，不会启动新的进程</span></span><br><span class="line">docker attach 容器id</span><br></pre></td></tr></table></figure>



<p>（6）从容器中拷贝文件到主机上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 2e18c3e0375a:/home/test.py /home/autovy/桌面</span><br></pre></td></tr></table></figure>

<p>拷贝是一个手动过程，从封闭的容器中拿到需要留存的数据，而使用数据卷</p>
<p>则可以实现自动同步</p>
<h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>推荐文章：<a href="http://linyishui.top/2019101101.html">docker镜像讲解</a></p>
<h4 id="1-Portainer可视化工具"><a href="#1-Portainer可视化工具" class="headerlink" title="1.Portainer可视化工具"></a>1.Portainer可视化工具</h4><h4 id="2-镜像简介"><a href="#2-镜像简介" class="headerlink" title="2.镜像简介"></a>2.镜像简介</h4><ul>
<li>镜像就是一种轻量级，可执行的独立软件包，用来打包软件运行环境和基于环境开会的软件（包括代码，运行时，库，环境变量，配置文件）</li>
<li>镜像来源：<ul>
<li>从远程仓库下载</li>
<li>自己制作的镜像DockerFile</li>
</ul>
</li>
</ul>
<h4 id="3-镜像加载原理"><a href="#3-镜像加载原理" class="headerlink" title="3.镜像加载原理"></a>3.镜像加载原理</h4><p>（1）联合文件系统（UnionFS）</p>
<p>镜像和容器不同，容器是彼此独立的，而容器是分层叠加的，可以共享相同的底层文件和目录</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3548638-6967b650574b7f0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/353/format/webp" alt="img"></p>
<p>（2）镜像加载原理</p>
<p>共享底层资源</p>
<p><img src="https://img2020.cnblogs.com/blog/1740019/202105/1740019-20210507114140385-1486581159.png" alt="docker文件系统分层存储原理"></p>
<h4 id="4-分层理解"><a href="#4-分层理解" class="headerlink" title="4.分层理解"></a>4.分层理解</h4><p>基于Ubuntu Linux 16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。该镜像当前已经包含3个镜像层</p>
<p><img src="https://pic-1258215793.cos.ap-shanghai.myqcloud.com/content/20191001/201910010121.png" alt="基于Ubuntu Linux 16.04创建镜像"></p>
<p>docker镜像默认只读，当容器启动时，一个新的可写层被加载到镜像顶部</p>
<p>这一层即为容器层，容器之下称为镜像层</p>
<h4 id="5-commit镜像"><a href="#5-commit镜像" class="headerlink" title="5.commit镜像"></a>5.commit镜像</h4><p>提交一个新的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的副本</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令和git原理相似</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</span><br></pre></td></tr></table></figure>



<h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><h4 id="1-数据卷原理"><a href="#1-数据卷原理" class="headerlink" title="1.数据卷原理"></a>1.数据卷原理</h4><p>容器之间有一个数据共享技术，Docker容器中产生的数据，同步到本地（从而实现数据可持久化，数据同步操作，数据存储在本地不会随着容器删除而丢失）</p>
<p>其本质是将容器内的目录挂载到主机上</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Jicy5pdGhlaW1hLmNvbS9kYXRhL2F0dGFjaG1lbnQvZm9ydW0vMjAxOTA2LzA1LzE5NDgzMG1nbXp1anY2ZXV5YWVqbGIucG5nLnRodW1iLmpwZw?x-oss-process=image/format,png" alt="数据卷容器实践_heima201907的博客-CSDN博客"></p>
<h4 id="2-数据卷使用"><a href="#2-数据卷使用" class="headerlink" title="2.数据卷使用"></a>2.数据卷使用</h4><p>（1）使用命令挂载 -v</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v 主机目录地址:容器目录地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试：将容器的目录挂载到主机目录</span></span><br><span class="line">docker run -it -v /home/test:/home centos /bin/bash</span><br></pre></td></tr></table></figure>

<ul>
<li>主机和容器没有对应目录时会自动创建目录</li>
<li>通过docker inspect 可以查看到挂载信息</li>
<li>挂载双方是双向同步关系，他们的文件内容无论哪一方更改，都会保持同步</li>
<li>修改文件时，只需要在本地修改即可，不需要进入容器</li>
</ul>
<p>（2）具名挂载和匿名挂载</p>
<p>除了上文中的指定路径挂载，我们也可以使用具名挂载和匿名挂载</p>
<p>匿名挂载：<code>-v :容器目录地址</code></p>
<p>具名挂载：<code>-v 卷名:容器目录地址</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">docker run -d -P --name test1 -v /home/new centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载</span></span><br><span class="line">docker run -d -P --name test1 -v mycentos:/home/new centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有卷(可以看到存在匿名卷)</span></span><br><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>

<p>所有的docker容器内的卷默认放在本地主机的<code>/var/lib/docker/volumes下</code></p>
<p>（3）挂载权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以通过 -v 容器路径：ro,rw改变读写权限</span></span><br><span class="line">ro # 只读，只能通过宿主机来操作，容器内部无法进行操作</span><br><span class="line">rw # 可读可写，默认为可读可写</span><br></pre></td></tr></table></figure>





<h4 id="3-数据卷容器"><a href="#3-数据卷容器" class="headerlink" title="3.数据卷容器"></a>3.数据卷容器</h4><p><img src="https://img-blog.csdnimg.cn/20190113103219766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dlbmdsaTIwMTc=,size_16,color_FFFFFF,t_70" alt="Docker学习过程（5-数据卷）_gengli2017的博客-CSDN博客"></p>
<p>容器间也可以进行挂载从而实现数据同步，多个子容器的数据可以挂载到一个父容器中，这个父容器就是数据卷容器</p>
<p>–volumes-from即可以让docker3挂载到docker1上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name docker3 --volumes-from docker1 5ce91af318b3 /bin/bash</span><br></pre></td></tr></table></figure>

<p>容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止</p>
<h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><p>参考文章：<a href="https://blog.52itstyle.vip/archives/2839/">DokcerFile命令详解</a></p>
<h4 id="1-DockerFile简介"><a href="#1-DockerFile简介" class="headerlink" title="1.DockerFile简介"></a>1.DockerFile简介</h4><p>DockerFile是构建docker镜像的构建文件，即命令脚本。通过这个脚本我们可以生成一个镜像。</p>
<p><img src="https://img-blog.csdnimg.cn/2021032416514251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTU3Mzc3MQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="2-DockerFile构建流程"><a href="#2-DockerFile构建流程" class="headerlink" title="2.DockerFile构建流程"></a>2.DockerFile构建流程</h4><p>（1）DockerFile内容示例</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在构建镜像形成两个数据卷，因为没有指定的挂载卷会自动进行匿名挂载</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----end------&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>



<p>（2）通过DockerFile文件构建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f dockerfile -t test/centos .</span><br></pre></td></tr></table></figure>

<p>build命令， -f  打开dockerfile文件的路径，-t  test/centos命名容器，.即为生成路径</p>
<p>（3）用自己的镜像创建容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it 5ce91af318b3 /bin/bash</span><br></pre></td></tr></table></figure>



<p>（4）docker push 发布镜像（开源进行）</p>
<h4 id="3-DockerFile指令详解"><a href="#3-DockerFile指令详解" class="headerlink" title="3.DockerFile指令详解"></a>3.DockerFile指令详解</h4><p><img src="https://img2018.cnblogs.com/i-beta/631711/201912/631711-20191220153130957-348455400.png" alt="img"></p>
<p>（图中最后一项应为CMD指令此处更正）</p>
<p>补充项：</p>
<ul>
<li><p>CMD：指定这个容器启动时要运行的命令，只有最后一个会生效，可被替代</p>
</li>
<li><p>ENTRYPOINT：指定这个容器启动时要运行的命令，可以追加命令</p>
</li>
<li><p>COPY：类似于ADD，将我们文件拷贝到镜像中</p>
</li>
<li><p>ENV：构建的时候设置环境变量</p>
</li>
</ul>
<h4 id="4-创建自己的DockerFile"><a href="#4-创建自己的DockerFile" class="headerlink" title="4.创建自己的DockerFile"></a>4.创建自己的DockerFile</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> Autovy&lt;autovys@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录为/usr/local</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装相关依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开放端口80</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----end------&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>

<p> 通过<code>docker history mycentos:0.1</code>  命令可以查看构建镜像的过程</p>
]]></content>
      <categories>
        <category>docker</category>
        <category>学习笔记</category>
        <category>入门级</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>学习笔记</tag>
        <tag>入门教程</tag>
      </tags>
  </entry>
  <entry>
    <title>开发笔记：自动化脚本实战手册</title>
    <url>/2021/03/28/python%20%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E6%88%98%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p><img src="https:cdn.jsdelivr.net/gh/Autovy/Image/img/202109040841155.jpg" alt="python"></p>
<span id="more"></span>

<h2 id="Python-自动化实战手册"><a href="#Python-自动化实战手册" class="headerlink" title="Python 自动化实战手册"></a>Python 自动化实战手册</h2><h4 id="调用系统终端（cmd）"><a href="#调用系统终端（cmd）" class="headerlink" title="调用系统终端（cmd）"></a>调用系统终端（cmd）</h4><h5 id="1-运用场景"><a href="#1-运用场景" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>有一些工具是使用命令行来执行的，这时可以调用系统终端来实现自动化</p>
<p>如：</p>
<p>swftool：<a href="http://www.swftools.org/">http://www.swftools.org/</a>     （swf转换工具）</p>
<p>ffmpeg：<a href="https://ffmpeg.org/">https://ffmpeg.org/</a>    （视频转码工具）</p>
<h5 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pdf转swf</span></span><br><span class="line">os.system(<span class="string">&#x27;E:\swftools\pdf2swf.exe -b E:\swftools\pdf\%s.pdf -o E:\swftools\swf\%s.swf&#x27;</span> % (name, name))</span><br></pre></td></tr></table></figure>



<h5 id="3-语法解释"><a href="#3-语法解释" class="headerlink" title="3.语法解释"></a>3.语法解释</h5><ul>
<li><p><code>import os</code>引入os模块，该模块主要提供与操作系统相关的功能的便捷式途径</p>
</li>
<li><p><code>os.system</code>可以在系统的子shell中执行命令，在windows上即相当于在cmd运行命令行，其返回值为命令退出的状态</p>
</li>
<li><p><code>os.system</code>运行命令行时无法实时显示运行过程，只能最终返回运行结果，这是和在cmd运行时的差别</p>
</li>
<li><p>使用<code>system</code>函数，会创建一个子进程，但是子进程无法影响父进程中的环境变量。简单来说，就是使用第一个<code>system</code>函数用cd切换目录，第二个<code>system</code>函数的环境变量仍然继承父进程的环境变量。所以第二个子进程的目录位置没有被第一条语句改变</p>
</li>
<li><p>关于新进程的生成和跟踪执行结果，往往用<code>subprocess</code>模块代替<code>system</code></p>
</li>
<li><p>在<code>system</code>函数执行多条语句的方法，可以使用复合语句，如：<code>os.system(&#39;cd path-to-repo &amp;&amp; svn ci&#39;)</code>，即都在一个子进程中运行命令</p>
</li>
<li><p>或者使用<code>os.chdir</code>切换父进程的目录，再执行子进程</p>
</li>
</ul>
<h4 id="文件遍历筛选"><a href="#文件遍历筛选" class="headerlink" title="文件遍历筛选"></a>文件遍历筛选</h4><h5 id="1-运用场景-1"><a href="#1-运用场景-1" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>在自动化批量操作文件时，一定少不了文件遍历，并且可以筛选出需要的文件</p>
<h5 id="2-实例-1"><a href="#2-实例-1" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入python的标准库os库</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 遍历文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="comment"># 初始化一个空列表存储文件</span></span><br><span class="line">    list_all = []</span><br><span class="line">    <span class="comment"># 搜索一个目录下的所有文件夹和所有文件内的指定类型文件</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&#x27;E:\swftools\%s&#x27;</span> % name):</span><br><span class="line">        <span class="comment"># 获得文件名</span></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            <span class="comment"># 加上文件路径</span></span><br><span class="line">            dir_path = os.path.join(root, name)</span><br><span class="line">            <span class="comment"># 切割出文件名</span></span><br><span class="line">            dir_name = os.path.split(dir_path)[-<span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 筛选文件</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;.pdf&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;.swf&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">                list_all.append(dir_name)</span><br><span class="line">        <span class="keyword">return</span> list_all</span><br></pre></td></tr></table></figure>



<h5 id="3-语法解释-1"><a href="#3-语法解释-1" class="headerlink" title="3.语法解释"></a>3.语法解释</h5><ul>
<li><code>os.walk(根目录)</code>可返回3元组 (dirpath, dirnames, filenames)【文件夹相对路径, 文件夹名字, 文件名】</li>
<li><code>os.path.join</code>拼接路径</li>
<li><code>os.path.split(path)</code>拆分路径为<code>(head, tail)</code></li>
</ul>
<h4 id="服务器操作"><a href="#服务器操作" class="headerlink" title="服务器操作"></a>服务器操作</h4><h5 id="1-运用场景-2"><a href="#1-运用场景-2" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>可以运用在将本地文件上传到服务器或者操作服务器上的文件，还可以调用服务器的终端（可用于在服务器上制作视频流）</p>
<h5 id="2-实例-2"><a href="#2-实例-2" class="headerlink" title="2.实例"></a>2.实例</h5><p>参考博客：</p>
<p><a href="https://www.jianshu.com/p/486dd9993125">https://www.jianshu.com/p/486dd9993125</a></p>
<p><a href="https://juejin.cn/post/6844904078057668615">https://juejin.cn/post/6844904078057668615</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="comment"># 建立ssh连接的同时，建立一个加密的文件传输通道</span></span><br><span class="line"><span class="comment"># 设置连接服务器信息</span></span><br><span class="line">t = paramiko.Transport((<span class="string">&quot;host（主机号）&quot;</span>, 端口（一般为<span class="number">22</span>）))</span><br><span class="line">t.connect(username=<span class="string">&quot;用户名&quot;</span>, password=<span class="string">&quot;密码&quot;</span>)</span><br><span class="line"><span class="comment"># 将sshclient的对象的transport指定为以上的t，即进行ssh连接</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh._transport = t</span><br><span class="line"><span class="comment"># ssh连接后在服务器终端运行命令，此处为复合语句</span></span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">&#x27;cd /../var/www/;pwd;&#x27;</span>)</span><br><span class="line"><span class="comment"># 开启sftp通道，传输文件</span></span><br><span class="line">sftp = ssh.open_sftp()</span><br><span class="line"><span class="comment"># 文件传输</span></span><br><span class="line">sftp.put(localpath=<span class="string">&#x27;本地路径&#x27;</span>, remotepath=<span class="string">&#x27;远程路径’)</span></span><br><span class="line"><span class="string"># 关闭通道</span></span><br><span class="line"><span class="string">sftp.close</span></span><br></pre></td></tr></table></figure>



<h5 id="3-语法解释-2"><a href="#3-语法解释-2" class="headerlink" title="3. 语法解释"></a>3. 语法解释</h5><ul>
<li><p>paramiko模块主要用于远程操作服务器，利用该模块，可以方便的进行ssh连接和sftp协议进行sftp文件传输</p>
</li>
<li><p><code>pip install paramiko</code>下载安装paramiko模块</p>
</li>
<li><p>使用paramiko模块有两种连接方式，一种是通过<code>paramiko.SSHClient()</code>函数，另外一种是通过<code>paramiko.Transport()</code>函数</p>
</li>
<li><p><code>exec_command</code>函数调用会返回3个变量，其中stdout为标准输出，在输出内容比较少时，可以通过直接使用read读取出所有的输出</p>
</li>
<li><p>sftp用get函数即下载远程文件，put函数即上传本地文件</p>
</li>
</ul>
<h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><h5 id="1-运用场景-3"><a href="#1-运用场景-3" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>筛选统计数据库，或者可以利用数据库批量快捷发布网站内容（如基于wordpress的站点）</p>
<h5 id="2-实例-3"><a href="#2-实例-3" class="headerlink" title="2.实例"></a>2.实例</h5><p>参考文章：<a href="https://www.runoob.com/python3/python3-mysql.html">https://www.runoob.com/python3/python3-mysql.html</a></p>
<p>（1）引入所需库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> sshtunnel <span class="keyword">import</span> SSHTunnelForwarder</span><br></pre></td></tr></table></figure>



<p>（2）连接一般数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link</span>():</span></span><br><span class="line">	data = pymysql.connect(host=<span class="string">&#x27;数据库主机号&#x27;</span>, port=端口, user=<span class="string">&#x27;用户名&#x27;</span>, passwd=<span class="string">&#x27;密码&#x27;</span>, db=<span class="string">&#x27;数据库名&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>



<p>（3）连接需要跳板机的数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link_base</span>():</span></span><br><span class="line">    server = SSHTunnelForwarder(</span><br><span class="line">            (<span class="string">&#x27;跳板机主机号&#x27;</span>, <span class="number">22</span>),  <span class="comment"># B机器的配置</span></span><br><span class="line">            ssh_password=<span class="string">&quot;跳板机密码&quot;</span>,</span><br><span class="line">            ssh_username=<span class="string">&quot;跳板机用户名&quot;</span>,</span><br><span class="line">            remote_bind_address=(<span class="string">&#x27;数据库主机号&#x27;</span>, 数据库端口))</span><br><span class="line">	</span><br><span class="line">    server.start()</span><br><span class="line"></span><br><span class="line">    data = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,  <span class="comment"># 此处必须是是127.0.0.1</span></span><br><span class="line">                               port=server.local_bind_port,</span><br><span class="line">                               user=<span class="string">&#x27;数据库用户名&#x27;</span>,</span><br><span class="line">                               passwd=<span class="string">&#x27;数据库密码&#x27;</span>,</span><br><span class="line">                               db=<span class="string">&#x27;数据库名&#x27;</span></span><br><span class="line">                               )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>



<p>（4） 利用sql语句操作数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取目标id</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mysql</span>():</span></span><br><span class="line">    <span class="comment"># 获得连接后的数据库</span></span><br><span class="line">    data = link()</span><br><span class="line">    <span class="comment"># 使用 cursor() 方法创建一个游标对象 cursor</span></span><br><span class="line">    cursor = data.cursor()</span><br><span class="line">    <span class="comment"># 用execute执行sql语句操作数据库</span></span><br><span class="line">    sql = <span class="string">&quot;sql语句&quot;</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果为查询操作</span></span><br><span class="line">    <span class="comment"># 获取指针指向的数据</span></span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    <span class="comment"># 输出获取的元组数据</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 如果为增删改操作</span></span><br><span class="line">	<span class="comment"># 提交到数据库执行</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       <span class="comment"># 执行sql语句</span></span><br><span class="line">       cursor.execute(sql)</span><br><span class="line">       <span class="comment"># 提交到数据库执行</span></span><br><span class="line">       db.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">       <span class="comment"># 如果发生错误则回滚</span></span><br><span class="line">       db.rollback()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">	db.close()    </span><br></pre></td></tr></table></figure>



<h5 id="3-语法解释-3"><a href="#3-语法解释-3" class="headerlink" title="3.语法解释"></a>3.语法解释</h5><ul>
<li>连接数据库的核心模块为pymysql,可以通过<code>pip install PyMySQL</code>安装</li>
<li>当需要跳板机连接服务器对象时（可以说数据库服务器也可以是文件服务器），要用到sshtunnel模块，可以通过<code>pip install sshtunnel</code>安装</li>
<li>数据库由多张关系表构成，往往需要查询多个表才能得到自己需要的批量数据</li>
<li>通过cursor可以不断指定执行新的sql语句</li>
<li>sql语句可以善用where筛选语句，应选择查询对象是某个字段，而不是*（全表）</li>
</ul>
<h4 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h4><h5 id="1-运用场景-4"><a href="#1-运用场景-4" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>自动化操作往往会涉及到字符串的筛选和修改，这时候就要用到python的字符串操作和正则匹配</p>
<h5 id="2-实例-4"><a href="#2-实例-4" class="headerlink" title="2.实例"></a>2.实例</h5><p>（1）python字符串处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单筛选出含有指定子字符串的字符串</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;.pdf&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;.swf&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">	print(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单字符串切片，利用find找到切点，再用字符串索引取出所需的字符串</span></span><br><span class="line">num = <span class="built_in">str</span>(i).find(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">title = <span class="built_in">str</span>(i)[:num]</span><br></pre></td></tr></table></figure>



<p>（2）正则表达式处理字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用正则匹配筛选字符串，并修改取代字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="comment"># 正则匹配</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;embed&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> pattern.search(content):</span><br><span class="line">      content = <span class="built_in">str</span>(content).replace(<span class="string">&#x27;.pdf&#x27;</span>, <span class="string">&#x27;.swf&#x27;</span>).replace(<span class="string">&#x27;pdf&#x27;</span>, <span class="string">&#x27;x-shockwave-flash&#x27;</span>).replace(<span class="string">&#x27;height=&quot;100%&quot;&#x27;</span>, <span class="string">&#x27;height=&quot;400&quot;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则匹配的两种方法</span></span><br><span class="line">prog = re.<span class="built_in">compile</span>(pattern)</span><br><span class="line">result = prog.match(string)</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">result = re.match(pattern, string)</span><br></pre></td></tr></table></figure>



<h5 id="3-语法解释-4"><a href="#3-语法解释-4" class="headerlink" title="3.语法解释"></a>3.语法解释</h5><ul>
<li>正则表达式往往是用大于看，看是很难看懂的，比较有用的正则工具：<a href="https://regex101.com/">https://regex101.com/</a></li>
<li>正则查找有match和search两种方式</li>
<li><code>re.match()</code> 从第一个字符开始找, 如果第一个字符就不匹配就返回None, 不继续匹配. 用于判断字符串开头或整个字符串是否匹配,速度快</li>
<li><code>re.search()</code> 会整个字符串查找,直到找到一个匹配</li>
<li><code>re.compile()</code>将正则表达式的样式编译为一个正则对象，如果需要多次使用这个正则表达式的话，使用 <code>re.compile()</code>和保存这个正则对象以便复用，可以让程序更加高效</li>
</ul>
<h4 id="Word文档操作"><a href="#Word文档操作" class="headerlink" title="Word文档操作"></a>Word文档操作</h4><h5 id="1-运用场景-5"><a href="#1-运用场景-5" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>在办公中可以批量生成只有日期和名字改动的模板，可以读取一篇word文档生成计算机可以处理的数据</p>
<h5 id="2-实例-5"><a href="#2-实例-5" class="headerlink" title="2.实例"></a>2.实例</h5><p>（1）引入基本模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 负责新建文档</span></span><br><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="comment"># 对齐</span></span><br><span class="line"><span class="keyword">from</span> docx.enum.text <span class="keyword">import</span> WD_ALIGN_PARAGRAPH</span><br><span class="line"><span class="comment"># 磅数</span></span><br><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> Pt</span><br><span class="line"><span class="comment"># 中文格式</span></span><br><span class="line"><span class="keyword">from</span> docx.oxml.ns <span class="keyword">import</span> qn</span><br></pre></td></tr></table></figure>



<p>（2）文档基础设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个文档</span></span><br><span class="line">document = Document()</span><br><span class="line"><span class="comment"># 设置文档基础字体,注意该处的styles有个s</span></span><br><span class="line">document.styles[<span class="string">&#x27;Normal&#x27;</span>].font.name = <span class="string">u&#x27;微软雅黑&#x27;</span></span><br><span class="line">document.styles[<span class="string">&#x27;Normal&#x27;</span>].font.size = Pt(<span class="number">14</span>)</span><br><span class="line"><span class="comment"># 设置文档基础中文字体</span></span><br><span class="line">document.styles[<span class="string">&#x27;Normal&#x27;</span>].element.rPr.rFonts.<span class="built_in">set</span>(qn(<span class="string">&#x27;w:eastAsia&#x27;</span>), <span class="string">u&#x27;微软雅黑&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>（3）创建纯文字模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_context</span>(<span class="params">context</span>):</span></span><br><span class="line">	<span class="comment"># 创建自然段</span></span><br><span class="line">	p = document.add_paragraph()</span><br><span class="line">	<span class="comment"># 设置该自然段对齐方式</span></span><br><span class="line">	p.alignment = WD_ALIGN_PARAGRAPH.LEFT</span><br><span class="line">	<span class="comment"># 在该自然段添加文字</span></span><br><span class="line">	r = p.add_run(<span class="built_in">str</span>(context))</span><br><span class="line">	<span class="comment"># 设置字体格式</span></span><br><span class="line">	r.font.size = Pt(<span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 段后距离5磅</span></span><br><span class="line">    p1.space_after = Pt(<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 段前距离5磅</span></span><br><span class="line">    p1.space_after = Pt(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>



<p>（4）创建表格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">height = <span class="built_in">len</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="comment"># 文档插入表格</span></span><br><span class="line">table = document.add_table(rows=height, cols=<span class="number">5</span>, style=<span class="string">&#x27;Table Grid&#x27;</span>)</span><br><span class="line"><span class="comment"># 填写字段</span></span><br><span class="line">table.cell(<span class="number">0</span>, <span class="number">0</span>).text = <span class="string">&#x27;序号&#x27;</span></span><br><span class="line">table.cell(<span class="number">0</span>, <span class="number">1</span>).text = <span class="string">&#x27;网址名称&#x27;</span></span><br><span class="line">table.cell(<span class="number">0</span>, <span class="number">2</span>).text = <span class="string">&#x27;网址&#x27;</span></span><br><span class="line">table.cell(<span class="number">0</span>, <span class="number">3</span>).text = <span class="string">&#x27;责任部门&#x27;</span></span><br><span class="line">table.cell(<span class="number">0</span>, <span class="number">4</span>).text = <span class="string">&#x27;负责人姓名&#x27;</span></span><br></pre></td></tr></table></figure>



<p>（5）存储文档</p>
<p>注意要标注后缀为docx，否则打不开文件，储存位置为程序根目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">document.save(<span class="string">&#x27;test.docx&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>（6）读取文档</p>
<p>可用于将记录题目的word文档转换为计算机可以处理的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="comment"># 打开一个文档</span></span><br><span class="line">document = Document(<span class="string">&quot;C语言.docx&quot;</span>)</span><br><span class="line"><span class="comment"># 获取所有段落</span></span><br><span class="line">all_paragraphs = document.paragraphs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建二维数组存储一道题</span></span><br><span class="line">passage = [[]]</span><br><span class="line">sent = []</span><br><span class="line"><span class="comment"># 逐个读取段落,一般不读取run中的，因为会出现文字割裂的问题</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(all_paragraphs)):</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^\d&#x27;</span>)</span><br><span class="line">    matching = pattern.findall(all_paragraphs[i].text)</span><br><span class="line">    <span class="keyword">if</span> matching:</span><br><span class="line">        <span class="comment"># 重置单个题目的列表</span></span><br><span class="line">        passage.append(sent)</span><br><span class="line">        sent = []</span><br><span class="line">        sent.append(all_paragraphs[i].text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sent.append(all_paragraphs[i].text)</span><br></pre></td></tr></table></figure>



<p>（7）修改文档</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取word文件</span></span><br><span class="line">document = Document(<span class="string">&quot;资料2.0.docx&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_text</span>(<span class="params">old_text, new_text</span>):</span></span><br><span class="line">    <span class="comment"># 修改纯文本</span></span><br><span class="line">    <span class="comment"># 复制粘贴word文档内容包括格式</span></span><br><span class="line">    all_paragraphs = document.paragraphs</span><br><span class="line">    <span class="keyword">for</span> paragraphs <span class="keyword">in</span> all_paragraphs:</span><br><span class="line">        <span class="keyword">for</span> run <span class="keyword">in</span> paragraphs.runs:</span><br><span class="line">            <span class="comment"># 修改文字</span></span><br><span class="line">            run_text = run.text.replace(old_text, new_text)</span><br><span class="line">            run.text = run_text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改表格</span></span><br><span class="line">    all_tables = document.tables</span><br><span class="line">    <span class="keyword">for</span> table <span class="keyword">in</span> all_tables:</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> table.rows:</span><br><span class="line">           <span class="keyword">for</span> cell <span class="keyword">in</span> row.cells:</span><br><span class="line">                cell_text = cell.text.replace(old_text, new_text)</span><br><span class="line">                cell.text = cell_text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换字符串</span></span><br><span class="line">change_text(<span class="string">&#x27;社团&#x27;</span>, <span class="string">&#x27;协会&#x27;</span>)</span><br><span class="line"><span class="comment"># 可以覆盖保存，但注意要将打开程序关闭</span></span><br><span class="line">document.save(<span class="string">&quot;资料2.0.docx&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>8.word转pdf</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用win32模板的功能</span></span><br><span class="line"><span class="keyword">from</span> win32com.client <span class="keyword">import</span> Dispatch, constants, gencache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定读取docx的路径，保存pdf路径</span></span><br><span class="line">docx_path = <span class="string">&#x27;资料2.0.docx&#x27;</span></span><br><span class="line">pdf_path = <span class="string">&#x27;资料.pdf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指向offic的功能并调用</span></span><br><span class="line">gencache.EnsureModule(<span class="string">&#x27;&#123;00020905-0000-0000-C000-000000000046&#125;&#x27;</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用word服务，开始转换</span></span><br><span class="line">wd = Dispatch(<span class="string">&quot;Word.Application&quot;</span>)</span><br><span class="line">doc = wd.Documents.Open(docx_path, ReadOnly=<span class="number">1</span>)</span><br><span class="line">doc.ExportAsFixedFormat(pdf_path, constants.wdExportFormatPDF, Item=constants.wdExportDocumentWithMarkup,CreateBookmarks=constants.wdExportCreateHeadingBookmarks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出并保存</span></span><br><span class="line">wd.Quit(constants.wdDoNotSaveChanges)</span><br></pre></td></tr></table></figure>



<h5 id="3-语法解释-5"><a href="#3-语法解释-5" class="headerlink" title="3.语法解释"></a>3.语法解释</h5><ul>
<li>安装docx模块，<code>pip install python-docx</code></li>
<li>读取文档时要注意，<code>document.paragraphs</code>返回的数组的每一个元素即一行的内容</li>
<li>一维数组的增加可以直接使用append不断扩展数组<code>sent.append(&#39;str&#39;)</code></li>
<li>二维数组的二维增加，可以直接填入数组<code>passage.append(array)</code>，一维增加的前提的二维存在，否则会报错超出范围<code>passage[1].append(&#39;str&#39;)</code></li>
</ul>
<h4 id="Excel文档操作"><a href="#Excel文档操作" class="headerlink" title="Excel文档操作"></a>Excel文档操作</h4><h5 id="1-运用场景-6"><a href="#1-运用场景-6" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>办公中经常会用到excel表格来整理统计数据，利用python可以批量读取和写入表格，提高工作效率</p>
<h5 id="2-实例-6"><a href="#2-实例-6" class="headerlink" title="2.实例"></a>2.实例</h5><p>（1）xlrd库读取execl内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd  <span class="comment"># 引入xlrd库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入工作簿路径</span></span><br><span class="line">xlsx = xlrd.open_workbook(<span class="string">&#x27;E://考勤表.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定读取的工作表，也可以用工作表名字来索引</span></span><br><span class="line"><span class="comment"># table = xlsx.sheet_by_name(&quot;表名&quot;)</span></span><br><span class="line">table = xlsx.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定单元格的坐标值，并打印，注意不要超过单元格所有的内容否则会报错,以下三种形式是一致的</span></span><br><span class="line">print(table.cell_value(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(table.cell(<span class="number">1</span>, <span class="number">2</span>).value)</span><br><span class="line">print(table.row(<span class="number">1</span>)[<span class="number">2</span>].value)</span><br></pre></td></tr></table></figure>



<p>（2）xlwt库写入execl工作表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入xlwt库</span></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个工作簿</span></span><br><span class="line">new_workbook = xlwt.Workbook()</span><br><span class="line"><span class="comment"># 新建一个工作表</span></span><br><span class="line">worksheet = new_workbook.add_sheet(<span class="string">&#x27;sheet1&#x27;</span>)</span><br><span class="line"><span class="comment"># 在工作表指定坐标写入值</span></span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="comment"># 保存工作簿</span></span><br><span class="line">new_workbook.save(<span class="string">&#x27;test.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="Pandas分析数据"><a href="#Pandas分析数据" class="headerlink" title="Pandas分析数据"></a>Pandas分析数据</h4><h5 id="1-运用场景-7"><a href="#1-运用场景-7" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>Pandas是一个强大的分析结构化数据的工具集；用于数据挖掘和数据分析，同时也提供数据清洗功能。</p>
<h5 id="2-案例"><a href="#2-案例" class="headerlink" title="2.案例"></a>2.案例</h5><p>参考文档：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></p>
<p>读取excel数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用pandas打开excel</span></span><br><span class="line">file = pd.ExcelFile(<span class="string">&#x27;test.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># 指定表名，excel的数据以数组的形式返回</span></span><br><span class="line">data = file.parse(<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>开发实战</tag>
        <tag>脚本学习</tag>
      </tags>
  </entry>
  <entry>
    <title>开发笔记：基于python开发学生管理系统</title>
    <url>/2020/05/28/python%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<img src="https://developer-tech.com/wp-content/uploads/sites/3/2020/12/python-right-business-programming-language-software-development-enterprise-2048x1318.jpg" height="300" alt="git" align="center">



<span id="more"></span>

<h3 id="模拟数据库"><a href="#模拟数据库" class="headerlink" title="模拟数据库"></a>模拟数据库</h3><p>用列表为主体储存全部学生信息，方便读取。用字典这种数据类型放置一个学生信息。方便对列表操作时整块操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [   <span class="comment">#列表</span></span><br><span class="line">		   <span class="comment">#字典	</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>:<span class="string">&quot;佛山&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Mary&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;女&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>: <span class="string">&quot;广州&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;,  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Jhon&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>: <span class="string">&quot;厦门&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h3 id="操作框架"><a href="#操作框架" class="headerlink" title="操作框架"></a>操作框架</h3><p>写代码优先规划好主框架，然后再补充功能函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(</span><br><span class="line">            <span class="string">&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            欢迎使用【学生管理系统】</span></span><br><span class="line"><span class="string">            0.退出系统</span></span><br><span class="line"><span class="string">            1.显示所有学生信息</span></span><br><span class="line"><span class="string">            2.新建学生信息</span></span><br><span class="line"><span class="string">            3.查询学生信息</span></span><br><span class="line"><span class="string">            4.修改学生信息</span></span><br><span class="line"><span class="string">            5.删除学生信息                            </span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">          )</span><br><span class="line"></span><br><span class="line">    op = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的操作：&quot;</span>)) <span class="comment">#转化输入的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> op==<span class="number">1</span> :</span><br><span class="line">        print(<span class="string">&quot;显示所有学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">2</span> :</span><br><span class="line">        print(<span class="string">&quot;新建学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">3</span> :</span><br><span class="line">        print(<span class="string">&quot;查询学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">4</span> :</span><br><span class="line">        print(<span class="string">&quot;修改学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">5</span> :</span><br><span class="line">        print(<span class="string">&quot;删除学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">0</span> :</span><br><span class="line">        <span class="keyword">break</span>  						<span class="comment">#退出循环</span></span><br></pre></td></tr></table></figure>





<h3 id="显示信息"><a href="#显示信息" class="headerlink" title="显示信息"></a>显示信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showall</span>() :</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas :</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;学生信息：&quot;</span>, data)</span><br></pre></td></tr></table></figure>

<p>1.Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串，相当于用data逐个存储列表datas的信息</p>
<p>2.值得注意的是，python的函数必须写在调用函数之前（毕竟没有声明嘛）</p>
<h3 id="新增学生"><a href="#新增学生" class="headerlink" title="新增学生"></a>新增学生</h3><p>用字典存储学生信息，用赋值的方法修改（添加）信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">creat</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;新增学生名字：&quot;</span>)</span><br><span class="line">    sex = <span class="built_in">input</span>(<span class="string">&quot;新增学生性别：&quot;</span>)</span><br><span class="line">    adress = <span class="built_in">input</span>(<span class="string">&quot;新增学生地址：&quot;</span>) <span class="comment">#变量储存</span></span><br><span class="line">    student = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: sex,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>: adress</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    datas.append(student) <span class="comment">#新增列表的项</span></span><br></pre></td></tr></table></figure>



<h3 id="查询学生"><a href="#查询学生" class="headerlink" title="查询学生"></a>查询学生</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">req</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;查询学生姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  datas:</span><br><span class="line">        <span class="keyword">if</span>  data[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            print(data)</span><br></pre></td></tr></table></figure>

<p>列表+字典的信息储存形式用循环遍历字典内容，data就是字典名</p>
<h3 id="修改学生信息"><a href="#修改学生信息" class="headerlink" title="修改学生信息"></a>修改学生信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;修改学生的姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  datas:</span><br><span class="line">        <span class="keyword">if</span>  data[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            print(<span class="string">&quot;修改前学生信息：&quot;</span>,data)</span><br><span class="line">            data[<span class="string">&quot;name&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;修改的名字：&quot;</span>)</span><br><span class="line">            data[<span class="string">&quot;sex&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;修改性别：&quot;</span>)</span><br><span class="line">            data[<span class="string">&quot;adress&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;修改地址：&quot;</span>)</span><br><span class="line">            print(<span class="string">&quot;修改后学生信息：&quot;</span>,data)</span><br></pre></td></tr></table></figure>

<p>循环遍历字典内容，赋值修改信息</p>
<h3 id="删除学生信息"><a href="#删除学生信息" class="headerlink" title="删除学生信息"></a>删除学生信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;删除学生的姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  datas:</span><br><span class="line">        <span class="keyword">if</span>  data[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            datas.remove(data)</span><br></pre></td></tr></table></figure>

<p>data中相当于存储了整个字典，把他一整个删去即可</p>
]]></content>
      <categories>
        <category>python</category>
        <category>学习笔记</category>
        <category>入门级</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>开发实战</tag>
      </tags>
  </entry>
</search>
