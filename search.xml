<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言|最简管理系统</title>
    <url>/2020/06/15/C%E8%AF%AD%E8%A8%80-%E6%9C%80%E7%AE%80%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>C语言结课作业：编写一个小型工资管理系统，用来管理职工的个人基本信息及工资薪酬等数据。在技术要求方面仅仅是要求了使用结构体数据类型，但基于我们的学习进度，考察的应该是用数组来储存。</p>
<span id="more"></span>



<h3 id="作业要求"><a href="#作业要求" class="headerlink" title="作业要求"></a>作业要求</h3><ol>
<li><p>每个职工的数据应包括：<strong>工号、姓名、性别、部门、基本工资、绩效工资、奖金、应发工资</strong>（应发工资=基本工资+绩效工资+奖金）。职工数据要求采用结构体数据类型。</p>
</li>
<li><p><strong>菜单显示：</strong>显示系统的一级功能菜单（数据输入、数据修改、数据处理、数据输出、退出）。</p>
</li>
<li><p><strong>数据输入</strong>：至少输入10个职工的各项数据（应发工资由系统自动计算，不需要输入）。<strong>录入的第一条记录用自已的真实姓名，部门为自己的真实班级。</strong>并将有自己真实姓名、班级的输出结果截屏保存到大作业总结报告中。</p>
</li>
<li><p><strong>数据修改</strong>：输入工号,修改指定工号的各项数据。输出修改完成后的全部职工数据。</p>
</li>
<li><p><strong>数据处理</strong>：处理方式包括：排序、查询。可提供子菜单让用户选择。其中：</p>
<p>1)<strong>排序</strong>：按工号排序，显示所有职工的全部数据。</p>
<p>2)<strong>查询</strong>：按工号查询，显示指定工号的全部数据。</p>
</li>
<li><p><strong>数据输出</strong>：输出全部职工的各项数据。</p>
</li>
<li><p><strong>退出</strong>：退出整个工资管理系统。</p>
</li>
</ol>
<h3 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h3><h5 id="1-数据存储"><a href="#1-数据存储" class="headerlink" title="1.数据存储"></a>1.数据存储</h5><p>我使用的是结构体数组来自建一个数据库，放在全局环境下，将数据库设为一个全局变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自建数据库</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">staff</span> &#123;</span></span><br><span class="line"> 	</span><br><span class="line">	<span class="keyword">int</span>  id;</span><br><span class="line"> 	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"> 	<span class="keyword">char</span> sex[<span class="number">20</span>];</span><br><span class="line"> 	<span class="keyword">char</span> belong[<span class="number">20</span>];</span><br><span class="line"> 	<span class="keyword">int</span>  basic_pay;</span><br><span class="line">	<span class="keyword">int</span>  add_pay;</span><br><span class="line">	<span class="keyword">int</span>  reward_pay;</span><br><span class="line">	<span class="keyword">int</span>  all_pay;</span><br><span class="line"></span><br><span class="line"> &#125;data[<span class="number">999</span>] = &#123;</span><br><span class="line"> 	</span><br><span class="line">	&#123;<span class="number">44</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;技术部&quot;</span>, <span class="number">5000</span>, <span class="number">1000</span>, <span class="number">200</span>, <span class="number">6200</span> &#125;,</span><br><span class="line">	</span><br><span class="line">	&#123;<span class="number">14</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;运维部&quot;</span>, <span class="number">4000</span>, <span class="number">1000</span>, <span class="number">200</span>, <span class="number">5200</span> &#125;,</span><br><span class="line">	</span><br><span class="line">	&#123;<span class="number">56</span>, <span class="string">&quot;小红&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="string">&quot;网安部&quot;</span>, <span class="number">3000</span>, <span class="number">1000</span>, <span class="number">200</span>, <span class="number">4200</span> &#125;,</span><br><span class="line"> 		</span><br><span class="line"> &#125;; </span><br></pre></td></tr></table></figure>



<p>另外还需要定义一个全局的数据库长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int lenth &#x3D; 3;</span><br></pre></td></tr></table></figure>

<p>之所以直接定义为一个常量，而不是用sizeof这种方式来计算数组长度，因为我发现结构体数组用这种方式来计算数组长度会是一个大坑！所以还不如手动添加常量</p>
<h5 id="2-函数功能结构"><a href="#2-函数功能结构" class="headerlink" title="2.函数功能结构"></a>2.函数功能结构</h5><p>（1）函数声明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;函数声明</span><br><span class="line">int create();    &#x2F;&#x2F;增</span><br><span class="line">int del();  	&#x2F;&#x2F;删</span><br><span class="line">int edit();    &#x2F;&#x2F;改</span><br><span class="line"></span><br><span class="line">int process();     &#x2F;&#x2F;处理 </span><br><span class="line">int req();     &#x2F;&#x2F;查</span><br><span class="line">int line();     &#x2F;&#x2F;排 </span><br><span class="line"></span><br><span class="line">int showall(); &#x2F;&#x2F;查询全部</span><br></pre></td></tr></table></figure>



<p>（2）函数定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//菜单系统 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> order;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;****************************\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;主菜单：\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;1.输入员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;2.删除员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;3.修改员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;4.处理员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;5.显示所有员工信息\n&quot;</span>); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;6.退出\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;****************************\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;---请输入菜单项：---\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;order); </span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(order==<span class="number">6</span>)&#123;		</span><br><span class="line">			</span><br><span class="line">			system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;		</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">switch</span>(order)&#123;</span><br><span class="line">				</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>: 	create();<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>: 	del();<span class="keyword">break</span>;	</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>: 	edit();<span class="keyword">break</span>;	</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>: 	process();<span class="keyword">break</span>;	</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>: 	showall(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:    <span class="built_in">printf</span>(<span class="string">&quot;\n404 NOT FOUND!&quot;</span>); getchar(); getchar(); system(<span class="string">&quot;cls&quot;</span>);	</span><br><span class="line">			</span><br><span class="line">			&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//增添信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除信息 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">edit</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//员工信息排序输出 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">line</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询员工信息 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">req</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询全部数据 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">showall</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>



<p>函数结构如下</p>
<p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20200615101249209.png" alt="image-20200615101249209"> </p>
<p>这些函数都会对全局中的数据库进行操作。</p>
<h3 id="菜单系统"><a href="#菜单系统" class="headerlink" title="菜单系统"></a>菜单系统</h3><p>main函数这里，就构建整体的函数调用框架，即本管理系统的菜单系统</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//菜单系统 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">   	</span><br><span class="line">   <span class="keyword">int</span> order;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;****************************\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;主菜单：\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;1.输入员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;2.删除员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;3.修改员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;4.处理员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;5.显示所有员工信息\n&quot;</span>); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;6.退出\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;****************************\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;---请输入菜单项：---\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;order); </span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(order==<span class="number">6</span>)&#123;		</span><br><span class="line">			</span><br><span class="line">			system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;		</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">switch</span>(order)&#123;</span><br><span class="line">				</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>: 	create();<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>: 	del();<span class="keyword">break</span>;	</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>: 	edit();<span class="keyword">break</span>;	</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>: 	process();<span class="keyword">break</span>;	</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>: 	showall(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:    <span class="built_in">printf</span>(<span class="string">&quot;\n404 NOT FOUND!&quot;</span>); getchar(); getchar(); system(<span class="string">&quot;cls&quot;</span>);	</span><br><span class="line">			</span><br><span class="line">			&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>菜单系统常用switch语句来调用各个函数，另外为了整个管理系统的输出整洁一点，我还用了</p>
<p>“stdlib.h”库中的清屏函数system(“cls”)</p>
<h3 id="增添员工信息"><a href="#增添员工信息" class="headerlink" title="增添员工信息"></a>增添员工信息</h3><p> 增添员工信息的基本设计思路：将新的信息填入到下一个数组空的位置。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	i = lenth;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新增员工工号：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i].id); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新增员工姓名：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[i].name); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新增员工性别：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[i].sex); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新增员工所属部门：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[i].belong);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);	 </span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新增员工基本工资：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i].basic_pay); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新增员工绩效工资：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i].add_pay); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);		</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新增员工奖金：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i].reward_pay); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	data[i].all_pay = data[i].basic_pay + data[i].add_pay + data[i].reward_pay;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;创建成功！\n&quot;</span>);	</span><br><span class="line">	lenth++;</span><br><span class="line">	getchar();</span><br><span class="line">	getchar();</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);	</span><br><span class="line">		</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p> 用在全局定义的lenth（突然发现自己记错了长度的英语单词2333）来确定新数据的填写地址，创建成功后要注意用<code>lenth++</code>，拓展数据的长度。</p>
<h3 id="删除员工信息"><a href="#删除员工信息" class="headerlink" title="删除员工信息"></a>删除员工信息</h3><p>删除员工信息的基本设计思路是：通过遍历所有的数据查询到指定的员工工号，然后将后面的数据依次向上填补被“删除”的空白</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除信息 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i = lenth;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入删除员工工号：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i+<span class="number">1</span>; j++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(num==data[j].id)&#123;</span><br><span class="line">			<span class="keyword">for</span>( ;j&lt;=i-j; j++)&#123;</span><br><span class="line">				</span><br><span class="line">				data[j] = data[j+<span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			lenth--;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n删除成功!\n&quot;</span>); </span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(j==i+<span class="number">1</span>)&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n查无此人!\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	getchar();</span><br><span class="line">	getchar();</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 在遍历中用到了两个if语句，if(num==data[j].id)来寻找符合条件的员工号，而<code>if(j==i+1)</code>则是遍历所有的数据后未找到匹配条件。</p>
<p>说是删除实践上只是删除的数组元素的地位（下标）和财产（数据）被下一个数组元素给继承了，而下一个的数据元素的下标和数据又被下下个数据元素继承，以此类推。这里同样要注意用<code>lenth--</code>缩短数据长度。</p>
<h3 id="修改员工信息"><a href="#修改员工信息" class="headerlink" title="修改员工信息"></a>修改员工信息</h3><p>修改员工信息的思路和删除员工信息的思路相差无几：都需要查询定位对应的员工信息，不同的是定位后，这个还要修改员工的信息</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">edit</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i = lenth;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入需要修改的员工工号：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);  </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i+<span class="number">1</span>; j++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(num==data[j].id)&#123;</span><br><span class="line">					</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;修改姓名：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[j].name); </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;修改性别：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[j].sex); </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);	</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;修改所属部门：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[j].belong);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);	 </span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;修改基本工资：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[j].basic_pay); </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);	</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;修改绩效工资：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[j].add_pay); </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);		</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;修改奖金：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[j].reward_pay); </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			</span><br><span class="line">			data[j].all_pay = data[j].basic_pay + data[j].add_pay + data[j].reward_pay;</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;修改成功！\n&quot;</span>);				</span><br><span class="line">			showall(); </span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(j==i+<span class="number">1</span>)&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n查无此人!\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">				</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	getchar();</span><br><span class="line">	getchar();</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所谓修改，无非是重新赋值罢了。</p>
<h3 id="处理信息"><a href="#处理信息" class="headerlink" title="处理信息"></a>处理信息</h3><p>处理信息分成了排序信息和查询信息两部分，所有采用菜单系统同样的方式来设计</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> order;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1.员工信息排序     2.员工信息查询\n&quot;</span>); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请选择处理方式:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;order); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">switch</span>(order)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>: line(); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>: req();  <span class="keyword">break</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h5 id="1-信息排序"><a href="#1-信息排序" class="headerlink" title="1.信息排序"></a>1.信息排序</h5><p>说实话这个函数的设计是该项目唯一卡到我的地方，因为我一直把它理解成了“排序处理”，但我了解实际上的需求应该是“排序输出”，那问题就简单很多了，我的设计思路如下</p>
<p>将每个数组元素的地址看作是它们的住址，而员工工号信息就是它们的门牌号，把它们的门牌号记录下来，然后排列大小顺序，按顺序去拜访它们，期间它们的住处时是没有发生改变的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//员工信息排序输出 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">line</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">int</span> id_data[<span class="number">100</span>];</span><br><span class="line">	i = lenth;</span><br><span class="line">	<span class="keyword">char</span>* str[<span class="number">8</span>] = &#123;<span class="string">&quot;工号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;部门&quot;</span>, <span class="string">&quot;基本工资&quot;</span>, <span class="string">&quot;绩效工资&quot;</span>, <span class="string">&quot;奖金&quot;</span>, <span class="string">&quot;应发工资&quot;</span>&#125;; </span><br><span class="line">	</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;i; j++)&#123;</span><br><span class="line">		</span><br><span class="line">		id_data[j] = data[j].id;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	qsort(id_data, i, <span class="keyword">sizeof</span>(id_data[<span class="number">0</span>]) , cmp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n排序成功！\n\n&quot;</span>) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据表的字段输出	</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">8</span>; n++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-12s&quot;</span> , str[n]);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据排序输出	</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> n1 = <span class="number">0</span>; n1&lt;i; n1++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> n2 = <span class="number">0</span>; n2&lt;i; n2++ )&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(id_data[n1] == data[n2].id)&#123;</span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot; %-10d&quot;</span>,    data[n2].id); </span><br><span class="line">		</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot; %-10s&quot;</span>,    data[n2].name); </span><br><span class="line">			</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;   %-10s&quot;</span>,  data[n2].sex); </span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>,     data[n2].belong); </span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;    %-10d&quot;</span>, data[n2].basic_pay); </span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[n2].add_pay); 	</span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[n2].reward_pay); </span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[n2].all_pay ); </span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">						</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line"> 	getchar();</span><br><span class="line"> 	getchar();</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 依据代码，我的思路对应关系如下</p>
<ul>
<li>住址 ==&gt; 数组元素下标，即<code>data</code>数组的下标</li>
<li>门牌号 ==&gt;  <code>data[j].id</code></li>
<li>记录门牌号 ==&gt; 用了另一个数组：<code>id_data[j]</code> 来储存</li>
<li>排列门牌号大小 ==&gt; 将<code>id_data[j]</code> 存储的门牌号排序，这里使用了C语言内置的排序函数：qsort()</li>
<li>依次拜访 ==&gt; 两层循环，外层循环：<code>for(int n1 = 0; n1&lt;i; n1++)</code>循环名单上排列好的门牌号，内层循环：<code>for(int n2 = 0; n2&lt;i; n2++ )</code>，一个个去找符合名单上第一位的门牌号，然后输出</li>
</ul>
<p>另外注意，作为一个大学生的作业，使用内置的qsort()排序函数应该是非法的（狗头），应该使用冒泡排序或选择排序！</p>
<p>好，我摊牌啦，我就是想偷一下懒……</p>
<h5 id="2-查询员工信息"><a href="#2-查询员工信息" class="headerlink" title="2.查询员工信息"></a>2.查询员工信息</h5><p>查询的思路和删除信息，修改信息相似，没什么特别的地方</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询员工信息 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">req</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i = lenth;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">char</span>* str[<span class="number">8</span>] = &#123;<span class="string">&quot;工号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;部门&quot;</span>, <span class="string">&quot;基本工资&quot;</span>, <span class="string">&quot;绩效工资&quot;</span>, <span class="string">&quot;奖金&quot;</span>, <span class="string">&quot;应发工资&quot;</span>&#125;; </span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入需要查询员工工号：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);  </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">8</span>; n++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-12s&quot;</span> , str[n]);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i+<span class="number">1</span>; j++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(num==data[j].id)&#123;</span><br><span class="line">	</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; %-10d&quot;</span>,    data[j].id); </span><br><span class="line">		</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; %-10s&quot;</span>,    data[j].name); </span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;   %-10s&quot;</span>,  data[j].sex); </span><br><span class="line">				</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>,     data[j].belong); </span><br><span class="line">				</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;    %-10d&quot;</span>, data[j].basic_pay); </span><br><span class="line">				</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].add_pay); 	</span><br><span class="line">				</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].reward_pay); </span><br><span class="line">				</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].all_pay ); </span><br><span class="line">				</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n查询成功！\n\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(j==i+<span class="number">1</span>)&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; 无\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n查无此人!\n&quot;</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">	getchar();</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 这里输出数据表的表头，用了数组来存储字符串，要注意加<em>号：    `char</em> str[8]`</p>
<h3 id="查询全部数据"><a href="#查询全部数据" class="headerlink" title="查询全部数据"></a>查询全部数据</h3><p>无脑遍历输出即可，就是输出格式上要有调整，一般可以用<code>printf(&quot;%-9d&quot;)</code>占9个空格，左对齐的方式来调整输出格式，输出那里我也是为了美观才一个个去加空格调整格式，就不要吐槽我代码格式不整洁了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询全部数据 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">showall</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span>* str[<span class="number">8</span>] = &#123;<span class="string">&quot;工号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;部门&quot;</span>, <span class="string">&quot;基本工资&quot;</span>, <span class="string">&quot;绩效工资&quot;</span>, <span class="string">&quot;奖金&quot;</span>, <span class="string">&quot;应发工资&quot;</span>&#125;; </span><br><span class="line">	i = lenth - <span class="number">1</span>;</span><br><span class="line">	 </span><br><span class="line">	data[i].all_pay = 	data[i].basic_pay + data[i].add_pay + data[i].reward_pay;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;查询成功！\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">8</span>; n++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-12s&quot;</span> , str[n]);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i; j++)&#123;</span><br><span class="line">			</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; %-10d&quot;</span>,    data[j].id); </span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; %-10s&quot;</span>,    data[j].name); </span><br><span class="line">	</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;   %-10s&quot;</span>,  data[j].sex); </span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>,     data[j].belong); </span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;    %-10d&quot;</span>, data[j].basic_pay); </span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].add_pay); 	</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].reward_pay); </span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].all_pay ); </span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> 	getchar();</span><br><span class="line"> 	getchar();</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整体来说，这个结课作业并不难，只用用课堂上的知识完全是可以完成了（我一个下午不到就写好）。</p>
<p>但事实上无论用哪门语言，增删改查的实现永远是入门重要的第一课，本项目和之前的python学生管理系统，都仅仅是在内部实现的数据增删改查，一旦退出程序，缓存就被清除了，无法保留。所以我们还应考虑——如何把这样的操作在文本中实现，如何连接mysql数据库实现同样增删改查的操作。</p>
<p>所以呀，流水的编程语言，铁打的管理系统，入门从管理系统开始！</p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>开发实战</tag>
        <tag>管理系统</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言|数据结构入门指南</title>
    <url>/2021/03/10/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040908422.png" alt="image-20210205093243144"></p>
<span id="more"></span>

<h3 id="数据结构入门指南（C语言版）"><a href="#数据结构入门指南（C语言版）" class="headerlink" title="数据结构入门指南（C语言版）"></a>数据结构入门指南（C语言版）</h3><p>（图片来源于《计算机是怎么跑起来的》一书和GeeksforGeeks网站）</p>
<h4 id="初识数据结构"><a href="#初识数据结构" class="headerlink" title="初识数据结构"></a>初识数据结构</h4><h5 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h5><p>数组是数据结构的基础。</p>
<p>数组在程序中往往是从内存整体中分配出一块连续的空间，数组反映了内存的物理结构</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040908422.png" alt="image-20210205093243144"></p>
<h5 id="2-数组的应用"><a href="#2-数组的应用" class="headerlink" title="2.数组的应用"></a>2.数组的应用</h5><p>以数组为基础的数据结构，可供各种各样的算法处理大量数据</p>
<h5 id="3-数据结构概念"><a href="#3-数据结构概念" class="headerlink" title="3.数据结构概念"></a>3.数据结构概念</h5><p>内存的物理结构无法改变，而数据结构可以通过程序在逻辑上改变内存的物理结构，使数据按照自己的相反分布</p>
<p>典型的数据结构如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909890.png" alt="image-20210205094134834"></p>
<h4 id="栈的实现方法（stack）"><a href="#栈的实现方法（stack）" class="headerlink" title="栈的实现方法（stack）"></a>栈的实现方法（stack）</h4><h5 id="1-栈的特点"><a href="#1-栈的特点" class="headerlink" title="1.栈的特点"></a>1.栈的特点</h5><p>栈中数据的使用顺序和堆积顺序是相反的，堆积顺序是从下到上，而使用顺序是从上到上，就好像干草堆一样</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909864.png" alt="image-20210205095057769"></p>
<p>这种数据存取方式称为LIFO（last in first out，后进先出），即最后存入的数据最先被处理</p>
<h5 id="2-栈的实现"><a href="#2-栈的实现" class="headerlink" title="2.栈的实现"></a>2.栈的实现</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 构建数组作为栈的本体 </span></span><br><span class="line"><span class="keyword">char</span> Stack[<span class="number">100</span>];</span><br><span class="line"><span class="comment">// 栈顶指针，始终指向栈数据的最顶端 </span></span><br><span class="line"><span class="keyword">char</span> StackPointer = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈函数，存储数据 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">char</span> Data)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 数据存储在栈顶指针指向位置 </span></span><br><span class="line">	Stack[StackPointer] = Data;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 更新栈顶指针的值 </span></span><br><span class="line">	StackPointer++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈函数，读取数据 </span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 更新栈顶指针的值 </span></span><br><span class="line">	StackPointer--;</span><br><span class="line">	<span class="comment">// 在栈顶指针处取出数据 </span></span><br><span class="line">	<span class="keyword">return</span> Stack[StackPointer];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 运行实例 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="comment">//存储数据 </span></span><br><span class="line">	Push(<span class="number">1</span>);</span><br><span class="line">	Push(<span class="number">2</span>);</span><br><span class="line">	Push(<span class="number">3</span>);</span><br><span class="line">	Push(<span class="number">4</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//读取数据 </span></span><br><span class="line">	<span class="keyword">while</span> (StackPointer !=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">char</span> result = Pop();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-原理图"><a href="#3-原理图" class="headerlink" title="3.原理图"></a>3.原理图</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909584.png" alt="image-20210205104130629"></p>
<p>注意此图的栈底放在上面，最底部才是栈顶</p>
<h5 id="4-语法解释"><a href="#4-语法解释" class="headerlink" title="4.语法解释"></a>4.语法解释</h5><ul>
<li>最终实现效果是：存入顺序是1，2，3，4；取出顺序是4，3，2，1</li>
<li>栈的成分：数组，栈顶指针，入栈函数，出栈函数</li>
<li>入栈函数将数据压入栈中</li>
<li>出栈函数将数据从栈中弹出</li>
<li>存储5个数据，最后栈顶指针指向5的地址（地址4为最后一个数据），所以在出栈函数中，栈顶指针需要减1，才能取得第一个数据</li>
</ul>
<h4 id="队列的实现方法（queue）"><a href="#队列的实现方法（queue）" class="headerlink" title="队列的实现方法（queue）"></a>队列的实现方法（queue）</h4><h5 id="1-队列的特点"><a href="#1-队列的特点" class="headerlink" title="1.队列的特点"></a>1.队列的特点</h5><p>队列中最先存入的数据是被最先处理的，这种方式被称为FIFO（first in first out, 先进先出）。就像排队上车一样，先到的人就能先上车</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909768.png" alt="image-20210205154955234"></p>
<h5 id="2-队列的实现"><a href="#2-队列的实现" class="headerlink" title="2.队列的实现"></a>2.队列的实现</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建作为队列本质的数组 </span></span><br><span class="line"><span class="keyword">char</span>  Queue[<span class="number">100</span>];</span><br><span class="line"><span class="comment">// 标识数据存储位置的索引 </span></span><br><span class="line"><span class="keyword">char</span> SetIndex = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 标识数据读取位置的索引 </span></span><br><span class="line"><span class="keyword">char</span> GetIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 存储数据函数 </span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">char</span> Data)</span></span>&#123;</span><br><span class="line"> 	<span class="comment">// 存入数据</span></span><br><span class="line">	 Queue [SetIndex] = Data;</span><br><span class="line">	 </span><br><span class="line">	 <span class="comment">// 更新存储索引 </span></span><br><span class="line">	 SetIndex++;</span><br><span class="line">	  </span><br><span class="line">	 <span class="comment">// 到达数组末尾则折回开头 </span></span><br><span class="line">	 <span class="keyword">if</span>(SetIndex&gt;=<span class="number">100</span>)&#123;</span><br><span class="line">	 	SetIndex = <span class="number">0</span>;</span><br><span class="line">	 &#125; </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 读取数据函数 </span></span><br><span class="line"> <span class="function"><span class="keyword">char</span> <span class="title">Get</span><span class="params">()</span></span>&#123;</span><br><span class="line"> 	<span class="keyword">char</span> Data;</span><br><span class="line"> 	</span><br><span class="line">	 <span class="comment">// 读取数据 </span></span><br><span class="line"> 	Data = Queue[GetIndex];</span><br><span class="line"> 	</span><br><span class="line"> 	<span class="comment">// 更新读取索引 </span></span><br><span class="line"> 	GetIndex++;</span><br><span class="line"> 	</span><br><span class="line"> 	<span class="comment">//  到达数组末尾则折回开头 </span></span><br><span class="line"> 	<span class="keyword">if</span>(GetIndex&gt;=<span class="number">100</span>)&#123;</span><br><span class="line"> 		GetIndex = <span class="number">0</span>;</span><br><span class="line">	 &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 返回读出数据 </span></span><br><span class="line">	<span class="keyword">return</span> Data;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 运行实例 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="comment">//存储数据 </span></span><br><span class="line">	Set(<span class="number">1</span>);</span><br><span class="line">	Set(<span class="number">2</span>);</span><br><span class="line">	Set(<span class="number">3</span>);</span><br><span class="line">	Set(<span class="number">4</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//读取数据 </span></span><br><span class="line">	<span class="keyword">while</span> (GetIndex != SetIndex) &#123;</span><br><span class="line">		<span class="keyword">char</span> result = Get();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-原理图-1"><a href="#3-原理图-1" class="headerlink" title="3.原理图"></a>3.原理图</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909593.png" alt="image-20210205161354653"></p>
<h5 id="4-语法解释-1"><a href="#4-语法解释-1" class="headerlink" title="4.语法解释"></a>4.语法解释</h5><ul>
<li>最终实现效果是：存入顺序是1，2，3，4；取出顺序是1，2，3，4</li>
<li>栈的成分：数组，数据存储指针，数据读取指针，存储函数，读取函数</li>
<li>队列的逻辑结构实际上是圆环，数据存满后又会回到开头开始存数据</li>
<li>数据读取指针和数据存储指针是一样的，走向一样，最终值（指存完数据和读完数据的最后值的值）也要相等</li>
</ul>
<h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><h5 id="1-组成"><a href="#1-组成" class="headerlink" title="1.组成"></a>1.组成</h5><p>结构体即把若干个数据项汇集到一起并赋予其名字的一个整体</p>
<p>定义完结构体后，我们可以把结构体当作一个数据类型，可以用它来声明变量</p>
<p>每一个被汇集到结构体的每一个数据项叫做结构体的成员</p>
<h5 id="2-运用"><a href="#2-运用" class="headerlink" title="2.运用"></a>2.运用</h5><p>我们需要用到结构体数组来实现链表和二叉树</p>
<h5 id="3-内存分布"><a href="#3-内存分布" class="headerlink" title="3.内存分布"></a>3.内存分布</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909289.png" alt="image-20210205182952994"></p>
<h4 id="链表的实现方法（Linked-list）"><a href="#链表的实现方法（Linked-list）" class="headerlink" title="链表的实现方法（Linked list）"></a>链表的实现方法（Linked list）</h4><h5 id="1-链表的特点"><a href="#1-链表的特点" class="headerlink" title="1.链表的特点"></a>1.链表的特点</h5><p>链表容易实现数据的插入和删除，任意改变数据的排列方式。就像人手拉手排成一排，要改变顺序，只需要改变牵手对象即可实现</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909642.png" alt="image-20210205183938605"></p>
<h5 id="2-链表的实现"><a href="#2-链表的实现" class="headerlink" title="2.链表的实现"></a>2.链表的实现</h5><p>参考文章：<a href="https://www.geeksforgeeks.org/linked-list-set-1-introduction/等系列文章">https://www.geeksforgeeks.org/linked-list-set-1-introduction/等系列文章</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//链表操作函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(struct Node* n)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertAfter</span><span class="params">(struct Node* prev_node, <span class="keyword">int</span> new_data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(struct Node** head_ref, <span class="keyword">int</span> new_data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">append</span> <span class="params">(struct Node**head_ref, <span class="keyword">int</span> new_data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(struct Node**head, <span class="keyword">int</span> key)</span> </span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链表节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="comment">// 存储该节点内容 </span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//  存储下一个节点的地址 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序简单创建一个三节点链表</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// 声明节点 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">second</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">third</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 为三个节点分配空间</span></span><br><span class="line">	head = (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node)); </span><br><span class="line">	second = (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node)); </span><br><span class="line">	third = (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node)); </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 在节点内存入数据（内容+下个节点的地址）构成链表</span></span><br><span class="line">	head -&gt; data = <span class="number">1</span>;</span><br><span class="line">	head -&gt; next = second; </span><br><span class="line">	</span><br><span class="line">	second -&gt; data = <span class="number">2</span>;</span><br><span class="line">	second -&gt; next = third;</span><br><span class="line">	</span><br><span class="line">	third -&gt; data = <span class="number">3</span>;</span><br><span class="line">	third -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 最末端插入6，则链表为 1-&gt;2-&gt; 3-&gt;6-&gt;NULL</span></span><br><span class="line">	append(&amp;head,<span class="number">6</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 在最前端插入7， 则链表为 7-&gt;1-&gt;2-&gt; 3-&gt;6-&gt;NULL</span></span><br><span class="line">	push(&amp;head,<span class="number">7</span>);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 在指定位置（第三个节点的下个节点后面）插入8， 则链表为 7-&gt;1-&gt;8-&gt;2-&gt;3-&gt;6-&gt;NULL</span></span><br><span class="line">	insertAfter(head-&gt;next,<span class="number">8</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 删除2</span></span><br><span class="line">	deleteNode(&amp;head, <span class="number">2</span>); </span><br><span class="line">	 </span><br><span class="line">	printList(head); </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从指定位置开始遍历链表函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(struct Node* n)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 链表的末尾一定指向NULL </span></span><br><span class="line">	<span class="keyword">while</span>(n != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n-&gt;data);</span><br><span class="line">		n = n-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 链表插入有三种形式：1. 在最前面插入 2.指定位置插入  3. 在最末尾插入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.在最前面插入</span></span><br><span class="line"><span class="comment">// 两个参数分别的含义是： 给定头的引用（指向指针的指针），插入的数据 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(struct Node** head_ref, <span class="keyword">int</span> new_data)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// （1）为新节点分配空间 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">new_node</span> =</span> (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// （2）放入数据</span></span><br><span class="line">	new_node-&gt;data = new_data; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// （3） 新节点存储原头部的地址</span></span><br><span class="line">	new_node-&gt;next = (*head_ref);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (4) 移动头部指向新节点，新节点成为新头部</span></span><br><span class="line">	(*head_ref) = new_node; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.在指定节点后面插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertAfter</span><span class="params">(struct Node* prev_node, <span class="keyword">int</span> new_data)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// （1）检查给定节点是否为空</span></span><br><span class="line">	<span class="keyword">if</span>(prev_node==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (2)为新节点分配空间 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">new_node</span> =</span> (struct Node*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (3)放入数据</span></span><br><span class="line">	new_node-&gt;data = new_data;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (4)新节点存储插入节点存储的下个节点的地址</span></span><br><span class="line">	new_node-&gt;next = prev_node-&gt;next;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 插入节点存储新节点的地址</span></span><br><span class="line">	prev_node-&gt;next = new_node; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 3.在最末尾插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">append</span> <span class="params">(struct Node**head_ref, <span class="keyword">int</span> new_data)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//	(1) 为新节点分配空间 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">new_node</span> =</span> (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">	<span class="comment">// 第5步中使用 ,让第五步的找尾部从头部开始 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">last</span> =</span> *head_ref;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (2) 放入数据</span></span><br><span class="line">	new_node-&gt;data = new_data;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (3)  新节点要放到最后，所以存储地址为NULL</span></span><br><span class="line">	new_node-&gt;next = <span class="literal">NULL</span>; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (4) 如果链表为空，则新节点成为头部</span></span><br><span class="line">	<span class="keyword">if</span>(*head_ref == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		</span><br><span class="line">		*head_ref = new_node;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (5) 链表不为空，一直摸到链表末端</span></span><br><span class="line">	<span class="keyword">while</span>(last-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		last = last-&gt;next;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (6) 原末端节点存储的地址改为新节点</span></span><br><span class="line">	last-&gt;next = new_node;</span><br><span class="line">	<span class="keyword">return</span>; </span><br><span class="line">	 </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除给定值所在节点 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(struct Node**head_ref, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 存储头部节点</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">temp</span> =</span> *head_ref, *prev;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 如果头部节点含有给定值，需要删除头部</span></span><br><span class="line"><span class="keyword">if</span>(temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;data == key)&#123;</span><br><span class="line">	<span class="comment">// 改变头部</span></span><br><span class="line">	*head_ref = temp-&gt;next; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 释放旧头部</span></span><br><span class="line">	<span class="built_in">free</span>(temp);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历节点，搜索给定值的位置  </span></span><br><span class="line"><span class="keyword">while</span>(temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;data !=key)&#123;</span><br><span class="line">	prev = temp;</span><br><span class="line">	temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果给定值不存在</span></span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">NULL</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到位置后，开始删除操作</span></span><br><span class="line"><span class="comment">// 移动删除节点前一个节点的链接到删除节点的下一个节点</span></span><br><span class="line">prev-&gt;next = temp-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放需要删除的节点</span></span><br><span class="line"><span class="built_in">free</span>(temp); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-原理图-2"><a href="#3-原理图-2" class="headerlink" title="3.原理图"></a>3.原理图</h5><p>（1）链表结构图</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909831.png" alt="image-20210208081719442"></p>
<p>（2）头部插入示意图</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909591.png" alt="image-20210208081851924"></p>
<p>（3）指定位置插入示意图</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909857.png" alt="image-20210208081923801"></p>
<p>（4）末端插入示意图</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909257.png" alt="image-20210208082016685"></p>
<p>（5）删除示意图</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909080.png" alt="image-20210208082128253"></p>
<h5 id="4-语法解释-2"><a href="#4-语法解释-2" class="headerlink" title="4.语法解释"></a>4.语法解释</h5><ul>
<li><p><code>struct Node* next</code>声明后，next存储地址，*next是地址中的值（自我引用结构体）</p>
</li>
<li><p>声明节点中，<code>struct Node* head = NULL</code>，则head内为地址</p>
</li>
<li><p>malloc()函数的声明方法为：<code>void *malloc(size_t size)</code>，其作用是分配所需的内存空间，返回值即为指向被分配内存的指针（地址）</p>
</li>
<li><p>则有head，second，third存储的是指向该节点的指针（地址），要使指向该节点的指针访问到节点的成员，那就用<code>-&gt;</code>运算符</p>
</li>
<li><p><code>struct Node** head_ref</code>相当于指向该结构体的指针的指针，即该指针存放的位置，相当于head（头部指针）取址即&amp;head；* head_ref则为该结构的指针（即head，但是*head_ref这种方式才能动态移动指针）</p>
</li>
</ul>
<h4 id="二叉树的实现方法（Binary-tree）"><a href="#二叉树的实现方法（Binary-tree）" class="headerlink" title="二叉树的实现方法（Binary tree）"></a>二叉树的实现方法（Binary tree）</h4><h5 id="1-二叉树的特点"><a href="#1-二叉树的特点" class="headerlink" title="1.二叉树的特点"></a>1.二叉树的特点</h5><p>  二叉树是基于链表的，用到的还是自我引用的结构体，但是会带有两个连接信息（即指向其他元素的指针）</p>
<p>  二叉树多用于实现用于搜索数据的算法（如：二分查找法）</p>
<p>  二叉树结构在搜索数据时，不是沿着一条线搜索，而是循着二叉树的分叉不断向下搜索</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909207.png" alt="image-20210208095901708"></p>
<h5 id="2-二叉树的实现"><a href="#2-二叉树的实现" class="headerlink" title="2.二叉树的实现"></a>2.二叉树的实现</h5>  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">  	<span class="keyword">int</span> data;</span><br><span class="line">  	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">left</span>;</span></span><br><span class="line">  	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">right</span>;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 声明操作二叉树的函数</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printPostorder</span><span class="params">(struct node* node)</span></span>; </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printInorder</span><span class="params">(struct node* node)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printPreorder</span><span class="params">(struct node* node)</span></span>;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建一个新节点函数</span></span><br><span class="line">  <span class="comment">// 返回值为该节点的地址 </span></span><br><span class="line">  <span class="function">struct node* <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">// 分配空间给新节点 </span></span><br><span class="line">  	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">node</span> =</span> (struct node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">// 分配数据给该节点</span></span><br><span class="line">  	node-&gt;data = data;</span><br><span class="line">  	 </span><br><span class="line">  	<span class="comment">// 初始左右分叉的指向</span></span><br><span class="line">  	node-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">  	node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">  	</span><br><span class="line">  	<span class="keyword">return</span> (node);   </span><br><span class="line">  		</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">// 创建二叉树的首节点（root）</span></span><br><span class="line">  	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">root</span> =</span> newNode(<span class="number">1</span>);</span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">// 从首节点出发分叉出两页 </span></span><br><span class="line">  	root-&gt;left = newNode(<span class="number">2</span>);</span><br><span class="line">  	root-&gt;right = newNode(<span class="number">3</span>); </span><br><span class="line">  	</span><br><span class="line">  	root-&gt;left-&gt;left = newNode(<span class="number">4</span>);</span><br><span class="line">  	root-&gt;left-&gt;right = newNode(<span class="number">5</span>);</span><br><span class="line">  	</span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;后序顺序打印\n&quot;</span>);</span><br><span class="line">  	printPostorder(root); </span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>) ;</span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;中序顺序打印\n&quot;</span>);</span><br><span class="line">  	printInorder(root); </span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>) ;</span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;前序顺序打印\n&quot;</span>);</span><br><span class="line">  	printPreorder(root); </span><br><span class="line">  	</span><br><span class="line">  	</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3种遍历方法 </span></span><br><span class="line">  <span class="comment">// 1.后序遍历 （左-&gt;右-&gt;根） </span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printPostorder</span><span class="params">(struct node* node)</span></span>&#123;</span><br><span class="line">  	</span><br><span class="line">  	<span class="keyword">if</span>(node==<span class="literal">NULL</span>)&#123;</span><br><span class="line">  		<span class="keyword">return</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">  	</span><br><span class="line">  	printPostorder(node-&gt;left);</span><br><span class="line">  	printPostorder(node-&gt;right); </span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">// 打印出该节点的数据 </span></span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, node-&gt;data); </span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2.中序遍历（左-&gt;根-&gt;右）</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printInorder</span><span class="params">(struct node* node)</span></span>&#123;</span><br><span class="line">  	</span><br><span class="line">  	<span class="keyword">if</span>(node==<span class="literal">NULL</span>)&#123;</span><br><span class="line">  		<span class="keyword">return</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">  	</span><br><span class="line">  	printInorder(node-&gt;left);</span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, node-&gt;data);</span><br><span class="line">  	printInorder(node-&gt;right);</span><br><span class="line">  	</span><br><span class="line">  	</span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//  3. 前序遍历 (根-&gt;左-&gt;右)</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">printPreorder</span><span class="params">(struct node* node)</span></span>&#123;</span><br><span class="line">   	</span><br><span class="line">  	<span class="keyword">if</span>(node == <span class="literal">NULL</span>)&#123;</span><br><span class="line">   		<span class="keyword">return</span>;</span><br><span class="line">  	 &#125;</span><br><span class="line">  	 </span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, node-&gt;data);</span><br><span class="line">  	printPreorder(node-&gt;left);</span><br><span class="line">  	printPreorder(node-&gt;right);</span><br><span class="line">   	</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>



<h5 id="3-二叉树原理图"><a href="#3-二叉树原理图" class="headerlink" title="3.二叉树原理图"></a>3.二叉树原理图</h5><p>  （1）遍历方法示意图</p>
<p>  <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909994.png" alt="image-20210208150838184"></p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>入门教程</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言|算法入门指南</title>
    <url>/2021/02/03/C%E8%AF%AD%E8%A8%80-%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904904.png" alt="image-20210210110218935"></p>
<span id="more"></span>



<h2 id="时间复杂度（Time-complexity）"><a href="#时间复杂度（Time-complexity）" class="headerlink" title="时间复杂度（Time complexity）"></a>时间复杂度（Time complexity）</h2><h3 id="1-一个例子"><a href="#1-一个例子" class="headerlink" title="1.一个例子"></a>1.一个例子</h3><p>情景：在一个有100个学生的教室里，仅有一名学生没过英语四级，我们要找到这名学生</p>
<ul>
<li>方法一：问每一个学生是否有过四级，时间复杂度为<strong>O(n)</strong></li>
<li>方法二：问每一个学生两个问题：1.是否有过四级 2.其他99个人过四级的情况，时间复杂度为<strong>O(n2)</strong></li>
<li>方法三：将100人分成两组，然后问没过四级的是在第一组还是在第二组，然后将该小组又分成两部分，再次询问，以此类推，直到最后找到没过四级的那个学生，时间复杂度为<strong>O(log n)</strong></li>
</ul>
<p>如果只有一个学生知道笔隐藏在哪个学生上，我可能需要进行O（n2）搜索。如果一个学生拿着笔，只有他们自己知道，我会使用O（n）。如果所有学生都知道，我会使用O（log n）搜索，但是只会告诉我是否猜对了。</p>
<h3 id="2-时间复杂度的含义"><a href="#2-时间复杂度的含义" class="headerlink" title="2.时间复杂度的含义"></a>2.时间复杂度的含义</h3><p>时间复杂度并不等于程序执行时间，我们没有考虑执行代码中每个语句所需的实际时间，而是考虑每个语句执行多少次</p>
<h3 id="3-时间复杂度图示"><a href="#3-时间复杂度图示" class="headerlink" title="3.时间复杂度图示"></a>3.时间复杂度图示</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040903611.png" alt="image-20210210104634026"></p>
<h3 id="4-时间复杂度计算方法"><a href="#4-时间复杂度计算方法" class="headerlink" title="4.时间复杂度计算方法"></a>4.时间复杂度计算方法</h3><ul>
<li>将算法/功能分解为单独的操作</li>
<li>计算每个操作的复杂度</li>
<li>将每个操作的复杂度加起来</li>
<li>删除常量</li>
<li>找到最高阶项-这就是我们认为算法/函数的复杂度</li>
</ul>
<h2 id="经典算法一览"><a href="#经典算法一览" class="headerlink" title="经典算法一览"></a>经典算法一览</h2><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904904.png" alt="image-20210210110218935"></p>
<h2 id="辗转相除法（Euclidean-algorithm）"><a href="#辗转相除法（Euclidean-algorithm）" class="headerlink" title="辗转相除法（Euclidean algorithm）"></a>辗转相除法（Euclidean algorithm）</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><ul>
<li>辗转相除法又称为欧几里得算法，常用于求解最大公约数</li>
<li>算法原理：若a除以b的余数为r , 则有 gcd(a , b) = gcd( b ,r )</li>
<li>算法思路：大数除于小数得余数，该余数再与小数重复上面步骤，直到最后得小数为0，这时大数即为最大公约数</li>
</ul>
<h3 id="2-基本案例"><a href="#2-基本案例" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用递归函数辗转相除返回最大公约数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(a == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> b;		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> gcd(b%a, a);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果展示 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>; </span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">15</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;GCD(%d, %d)=%d\n&quot;</span>, a, b, gcd(a,b));</span><br><span class="line">	</span><br><span class="line">	a = <span class="number">35</span>; </span><br><span class="line">	b = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;GCD(%d, %d)=%d\n&quot;</span>, a, b, gcd(a,b));</span><br><span class="line">	</span><br><span class="line">	a = <span class="number">31</span>; </span><br><span class="line">	b = <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;GCD(%d, %d)=%d\n&quot;</span>, a, b, gcd(a,b));	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>语法解析：</p>
<ul>
<li><code>b%a</code>即b除以a后的余数，当b&lt;a时，返回b，所以在以上程序中，我们不需要比较a，b大小，比如gcd(35,10) ,经过<code>b%a</code>会变成gcd(10,35)</li>
<li>递归是一种特殊的循环，其停止的信号是<code>return</code>语句</li>
<li>以上程序的时间复杂度是：O(Log min(a, b))  </li>
</ul>
<h3 id="3-扩展案例"><a href="#3-扩展案例" class="headerlink" title="3.扩展案例"></a>3.扩展案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// gcd扩展版，不仅可以得到最大公约数，还可以找到整数系数x和y</span></span><br><span class="line"><span class="comment">// ax + by = gcd(a, b) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcdExtended</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line">		*x = <span class="number">0</span>;</span><br><span class="line">		*y = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> b;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// x1,y1存储递归调用的结果</span></span><br><span class="line">	<span class="keyword">int</span> x1,y1;</span><br><span class="line">	<span class="keyword">int</span> gcd = gcdExtended(b%a, a, &amp;x1, &amp;y1);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 更新x,y值 </span></span><br><span class="line">	*x = y1 - (b/a) * x1;</span><br><span class="line">	*y = x1;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> gcd; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示结果</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> x, y;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">35</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">15</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> g = gcdExtended(a, b, &amp;x, &amp;y);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a*%d + b*%d = %d &quot;</span>, x, y, g);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>语法解析：</p>
<ul>
<li>以上程序目的是为了计算：  <code>ax + by = gcd(a, b)</code> 中的x，y</li>
<li>本程序使用了指针，可以在另一个函数中修改主函数的值，避免变量作用域的问题。在主函数内，可以通过<code>&amp;x,&amp;y</code>将x，y的地址传给其他函数，其他函数定义指针<code>int *x, int *y</code>存储地址，然后再用<code>*x,*y</code>读取地址中存的值即可修改主函数中的变量</li>
<li><code>int gcd = gcdExtended(b%a, a, &amp;x1, &amp;y1);</code>使程序反复执行其上面的语句，直至a==0,这时可以得到gcd,和x1=0，y1=1的初始值。然后再开始与以上执行方向相反执行其下面的语句。最后<code>return gcd</code>实际上在第二部分的循环中，值不变</li>
<li>主函数执行时，<code>gcdExtended</code>中的地址是主函数<code>x，y</code>的地址，而递归函数中的地址是<code>x1，y1</code>的地址;<code>x1,y1</code>存储的是上一个循环中的<code>*x，*y</code></li>
</ul>
<h2 id="埃拉托斯特尼筛法（sieve-of-Eratosthenes）"><a href="#埃拉托斯特尼筛法（sieve-of-Eratosthenes）" class="headerlink" title="埃拉托斯特尼筛法（sieve of Eratosthenes）"></a>埃拉托斯特尼筛法（sieve of Eratosthenes）</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>埃拉托斯特尼筛法是一种常用的素数筛法，可以筛选一定范围自然数内的质数（Prime numbers），时间复杂度：O(<em>n</em> log log <em>n</em>)</p>
<p>埃拉托斯特尼筛法演示动画（摘自维基百科）</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif" alt="img"></p>
<h3 id="2-实现步骤"><a href="#2-实现步骤" class="headerlink" title="2.实现步骤"></a>2.实现步骤</h3><p>该筛法的基本步骤案例，筛选2-50范围内的素数</p>
<p>（1）创建2-50所有数字的列表</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904338.png" alt="image-20210214200912413"></p>
<p>（2）标记所有<strong>2的倍数</strong>且<strong>大于或等于其平方（即4）</strong>的数字</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904399.png" alt="image-20210214200920690"></p>
<p>（3）标记所有<strong>3的倍数</strong>且<strong>大于或等于其平方（即9）</strong>的数字</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904633.png" alt="image-20210214202117142"></p>
<p>（4）标记所有<strong>5的倍数</strong>且<strong>大于或等于其平方（即25）</strong>的数字</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904951.png" alt="image-20210214202159136"></p>
<p>（5）标记所有<strong>7的倍数</strong>且<strong>大于或等于其平方（即49）</strong>的数字</p>
<p>​    查无数字，则跳过这一步</p>
<p>（6）去掉列表中标记的数字，剩下的未被标记数字即为素数：2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47.</p>
<h3 id="3-基本案例"><a href="#3-基本案例" class="headerlink" title="3.基本案例"></a>3.基本案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 筛选素数函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">SieveOfEratosthenes</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 创建标识数组</span></span><br><span class="line">	<span class="keyword">bool</span> primes[n+<span class="number">1</span>]; </span><br><span class="line">	<span class="comment">// 标识数组默认填入true,用索引当作自然数 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i&lt;=n; i++) &#123;</span><br><span class="line">		</span><br><span class="line">		primes[i] = <span class="literal">true</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 开始标记非质数（即标记p的倍数且大于或等于其平方的数字） </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">2</span>; p*p&lt;=n; p++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(primes[p] == <span class="literal">true</span>)&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=p*p; i&lt;=n; i+=p)&#123;</span><br><span class="line">				primes[i] = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 打印出所有素数</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">2</span>; p&lt;=n; p++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(primes[p])&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入筛选范围:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	SieveOfEratosthenes(n); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">	</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h2 id="线性查找（Linear-search）"><a href="#线性查找（Linear-search）" class="headerlink" title="线性查找（Linear search）"></a>线性查找（Linear search）</h2><h3 id="1-基本概念-2"><a href="#1-基本概念-2" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>线性查找时间复杂度为：O(n)</p>
<p>线性查找的步骤如下：</p>
<ul>
<li>从arr []的最左边元素开始，然后将x与arr []的每个元素一一比较</li>
<li>如果x与元素匹配，则返回索引。</li>
<li>如果x与任何元素都不匹配，则返回-1。</li>
</ul>
<p>线性查找示意图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904177.gif" alt="img"></p>
<h3 id="2-基本案例-1"><a href="#2-基本案例-1" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线性查找函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 逐个遍历查找，n为数组长度 ，x为查找对象 </span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(arr[i]==x)&#123;</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 目标数组 </span></span><br><span class="line">	<span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 查找目标</span></span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 测量数组大小</span></span><br><span class="line">	<span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 查找过程</span></span><br><span class="line">	<span class="keyword">int</span> result = search(arr, n, x);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	(result==<span class="number">-1</span>)? <span class="built_in">printf</span>(<span class="string">&quot;目标不存在&quot;</span>):<span class="built_in">printf</span>(<span class="string">&quot;目标所在索引为%d&quot;</span>, result);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>





<h2 id="二分查找（Binary-Search）"><a href="#二分查找（Binary-Search）" class="headerlink" title="二分查找（Binary Search）"></a>二分查找（Binary Search）</h2><h3 id="1-基本概念-3"><a href="#1-基本概念-3" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>二分查找的对象是从小到大的数组，其时间复杂度可以写作：O(Log n)</p>
<p>二分查找步骤：</p>
<ul>
<li>将x与中间元素比较</li>
<li>如果x与中间元素匹配，则返回中间索引</li>
<li>否则如果x大于中间元素则取中间元素后右半边数组重复操作</li>
<li>否则如果x小于中间元素则取中间元素后左半边数组重复操作</li>
</ul>
<p>二分查找示意图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040905289.gif" alt="“Binary Search”"></p>
<h3 id="2-基本案例-2"><a href="#2-基本案例-2" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="comment">// 递归法二分查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(r &gt;= l)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 求中间元素</span></span><br><span class="line">		<span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>; </span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 情况1：如果目标与中间元素匹配 </span></span><br><span class="line">		<span class="keyword">if</span>(arr[mid] == x)&#123;</span><br><span class="line">			<span class="keyword">return</span> mid;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 情况2:如果目标小于中间元素</span></span><br><span class="line">		<span class="keyword">if</span>(arr[mid] &gt; x)&#123;</span><br><span class="line">			<span class="comment">// 返回以中间-1为右的递归 </span></span><br><span class="line">			<span class="keyword">return</span> binarySearch(arr, l, mid<span class="number">-1</span>, x);</span><br><span class="line">		&#125; </span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 情况3：如果目标大于中间元素</span></span><br><span class="line">		<span class="comment">// 返回以中间+1为左的递归 </span></span><br><span class="line">		<span class="keyword">return</span> binarySearch(arr, mid + <span class="number">1</span>, r, x);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 查无结果</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 目标数组 </span></span><br><span class="line">	<span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 查找目标</span></span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 测量数组大小</span></span><br><span class="line">	<span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 查找过程,定左右 </span></span><br><span class="line">	<span class="keyword">int</span> result =  binarySearch(arr, <span class="number">0</span>, n - <span class="number">1</span>, x);</span><br><span class="line">	</span><br><span class="line">	(result==<span class="number">-1</span>) ? <span class="built_in">printf</span>(<span class="string">&quot;目标不存在&quot;</span>) : <span class="built_in">printf</span>(<span class="string">&quot;目标所在索引为%d&quot;</span>, result);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">		</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h2 id="哈希表（Hash-table）"><a href="#哈希表（Hash-table）" class="headerlink" title="哈希表（Hash table）"></a>哈希表（Hash table）</h2><h3 id="1-基本概念-4"><a href="#1-基本概念-4" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>哈希表是一种<strong>数据结构</strong>，其以键值对的形式表示数据。每一个键都映射哈希表中的一个值（与关联数组类似）</p>
<p>在哈希表中，对键进行处理以生成映射到所需元素的新索引。此过程称为hashing。</p>
<p>哈希表是存储和检索元素的有效方法，所以其也是一种有效的<strong>查找算法</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040905182.png" alt="“hashing”示意图"></p>
<h3 id="2-实现步骤-1"><a href="#2-实现步骤-1" class="headerlink" title="2.实现步骤"></a>2.实现步骤</h3><p>（1）哈希表初始化</p>
<p>​    在将元素插入数组前，将数组默认值设为-1（-1表示元素不存    在或特定的索引可以插入）</p>
<p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040905313.png" alt="image-20210215110519122"></p>
<p>（2）插入元素</p>
<p>​    哈希表插入元素的经典算法是：<code>key =  element % size</code> （key即数据插入位置，element即元素，size即数组大小）</p>
<p>​    如插入数字24</p>
<p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040905850.png" alt="image-20210215111157606"></p>
<p>（3）搜索元素</p>
<p>搜索元素和插入元素使用同一算法获得索引（key），再按索引查找对应元素</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906618.png" alt="image-20210215111443960"></p>
<p>（4）删除元素</p>
<p>在哈希表中删除元素并不是指将数组中的元素移除，而是将元素的值初始化为-1</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906635.png" alt="image-20210215111738024"></p>
<h3 id="3-基本案例-1"><a href="#3-基本案例-1" class="headerlink" title="3.基本案例"></a>3.基本案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> size 7 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建数组作为基本结构</span></span><br><span class="line"><span class="keyword">int</span> arr[size]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表初始化，将所有元素赋值为-1 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">		arr[i] = <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> key = value % size;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(arr[key] == <span class="number">-1</span>)&#123;	</span><br><span class="line">		arr[key] = value;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d 插入到 arr[%d]\n&quot;</span>, value, key);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;该位置存在冲突&quot;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> key = value % size;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(arr[key] == value)&#123;</span><br><span class="line">		arr[key] = <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;该值不存在&quot;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span> <span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> key = value % size;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(arr[key] == value)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;查有此项&quot;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;查无此项&quot;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印出所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;arr[%d] = %d\n&quot;</span>, i, arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// 初始化哈希表 </span></span><br><span class="line">	init();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 填充哈希表  </span></span><br><span class="line">	insert(<span class="number">10</span>);</span><br><span class="line">	insert(<span class="number">4</span>);</span><br><span class="line">	insert(<span class="number">2</span>);</span><br><span class="line">	insert(<span class="number">5</span>); </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 打印哈希表</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	print(); </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 删除测试</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	del(<span class="number">5</span>); </span><br><span class="line">	print();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 查询测试</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	search(<span class="number">4</span>); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h3 id="4-哈希冲突（collision）"><a href="#4-哈希冲突（collision）" class="headerlink" title="4.哈希冲突（collision）"></a>4.哈希冲突（collision）</h3><p>如果存在插入元素算法得到得索引相同，会出现哈希冲突的情况</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906057.png" alt="image-20210215151206845"></p>
<p>以下介绍几种避免哈希冲突的方法</p>
<h3 id="5-线性探测-Linear-Probing"><a href="#5-线性探测-Linear-Probing" class="headerlink" title="5.线性探测(Linear Probing)"></a>5.线性探测(Linear Probing)</h3><p>（1）方法简介：通过<code>key = element % size</code>计算索引，如果该索引为空则直接填入，如果产生了冲突就检查下一个索引即<code>key = (key+1) % size</code>，重复执行该过程直到找到空间</p>
<p>（2）方法示意图</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906001.png" alt="image-20210215153740661"></p>
<p>空间不足的情况：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906542.png" alt="image-20210215154203024"></p>
<h3 id="6-单独链表法（separate-chaining）"><a href="#6-单独链表法（separate-chaining）" class="headerlink" title="6.单独链表法（separate chaining）"></a>6.单独链表法（separate chaining）</h3><p>（1）方法简介</p>
<p>单独链表法又被称为开放式哈希表（Open hashing），它采用数据结构中的链表（linked list）来解决哈希冲突的问题，这样的哈希表永远也不会被填满</p>
<p>这种方法使哈希表的每个单元指向具有相同索引值的链表</p>
<p>（2）方法示意图</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906224.png" alt="image-20210215160449318"></p>
<p>（3）使用案例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> size 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链表节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	<span class="comment">// 存储该节点内容 </span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//  存储下一个节点的地址 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建单独链表（每一个哈希表的索引一条链表）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">chain</span>[<span class="title">size</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表初始化，每一列填入NULL </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">		chain[i] = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表中插入元素 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 创造新节点存储数据</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">newNode</span> =</span> (struct node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">	newNode-&gt;data = value;</span><br><span class="line">	newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 计算索引（hash key）</span></span><br><span class="line">	<span class="keyword">int</span> key = value % size;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 检查单独链表是否为空</span></span><br><span class="line">	<span class="comment">// 为空则填入新节点 </span></span><br><span class="line">	<span class="keyword">if</span>(chain[key] == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		chain[key] = newNode;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="comment">// 不为空即产生了哈希冲突 </span></span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">// 需要在已有的末端节点后添加新节点</span></span><br><span class="line">		<span class="comment">// 获得指定索引的链表 </span></span><br><span class="line">		struct node *temp = chain[key];</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 遍历链表得到末端节点 </span></span><br><span class="line">		<span class="keyword">while</span>(temp-&gt;next)&#123;</span><br><span class="line">			temp = temp-&gt;next; </span><br><span class="line">		&#125; </span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 在末尾连接上新节点 </span></span><br><span class="line">		temp-&gt;next = newNode; </span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表中搜索元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> key = value % size;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> chain[key];</span><br><span class="line">	<span class="comment">// 遍历链表寻找元素 </span></span><br><span class="line">	<span class="keyword">while</span>(temp)&#123;</span><br><span class="line">		<span class="keyword">if</span>(temp-&gt;data == value)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表中删除元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> key = value % size;</span><br><span class="line">	<span class="comment">// 存储头部节点 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> chain[key],*dealloc;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(temp != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="comment">// 如果需要删除的元素在头部 </span></span><br><span class="line">		<span class="keyword">if</span>(temp-&gt;data == value)&#123;</span><br><span class="line">			dealloc = temp;</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">			<span class="built_in">free</span>(dealloc);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// 遍历链表寻找需要删除的元素 </span></span><br><span class="line">			<span class="keyword">while</span>(temp-&gt;next)&#123;</span><br><span class="line">				<span class="keyword">if</span>(temp-&gt;next-&gt;data == value)&#123;</span><br><span class="line">					dealloc = temp-&gt;next;</span><br><span class="line">					temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">					<span class="built_in">free</span>(dealloc);</span><br><span class="line">					<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">				&#125;</span><br><span class="line">				temp = temp-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印哈希表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> chain[i];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;chain[%d]--&gt;&quot;</span>,i);</span><br><span class="line">			</span><br><span class="line">		<span class="comment">// 打印链表	</span></span><br><span class="line">		<span class="keyword">while</span>(temp)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d--&gt;&quot;</span>, temp-&gt;data);</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> 	<span class="comment">// 初始化哈希表</span></span><br><span class="line">	init();</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 填充数据</span></span><br><span class="line">    insert(<span class="number">7</span>);</span><br><span class="line">    insert(<span class="number">0</span>);</span><br><span class="line">    insert(<span class="number">3</span>);</span><br><span class="line">    insert(<span class="number">10</span>);</span><br><span class="line">    insert(<span class="number">4</span>);</span><br><span class="line">    insert(<span class="number">5</span>);  </span><br><span class="line"> 	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> 	print(); </span><br><span class="line"> 	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 删除测试</span></span><br><span class="line">	<span class="keyword">if</span>(del(<span class="number">10</span>))&#123;</span><br><span class="line">		print(); </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;删除项不存在&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> 	</span><br><span class="line"> 	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><h3 id="1-基本概念-5"><a href="#1-基本概念-5" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>（1）冒泡排序通过重复交换错误顺序的两个数来工作</p>
<p>（2）冒泡排序步骤：</p>
<ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ul>
<p>（3）冒泡排序示意图:</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906428.gif" alt="“Bubble Sort gif”的图片搜索结果"></p>
<h3 id="2-基本案例-3"><a href="#2-基本案例-3" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换数字函数(此处的参数为地址，可以直接修改主函数中的值)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *xp, <span class="keyword">int</span> *yp)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *xp;</span><br><span class="line">	*xp = *yp;</span><br><span class="line">	*yp = temp;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒泡函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j;</span><br><span class="line">	<span class="comment">// 从头开始的次数 </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123; </span><br><span class="line">	    <span class="comment">// 移动读取数组相邻两个数 </span></span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n-i<span class="number">-1</span>; j++)&#123;</span><br><span class="line">			<span class="comment">// 符合条件，交换数值 </span></span><br><span class="line">			<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">				swap(&amp;arr[j], &amp;arr[j+<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印数组函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAarry</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> arr[] = &#123;<span class="number">64</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">90</span>&#125;; </span><br><span class="line">	<span class="comment">// 计算数组大小 </span></span><br><span class="line">	<span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">	<span class="comment">// 冒泡处理 </span></span><br><span class="line">	bubbleSort(arr, n);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;排序后的数组：\n&quot;</span>);</span><br><span class="line">	printAarry(arr, n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h2 id="快速排序（Quick-sort）"><a href="#快速排序（Quick-sort）" class="headerlink" title="快速排序（Quick sort）"></a>快速排序（Quick sort）</h2><p>参考文章：<a href="https://juejin.cn/post/6844904122538278920">https://juejin.cn/post/6844904122538278920</a></p>
<h3 id="1-基本概念-6"><a href="#1-基本概念-6" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>（1）快速排序是一种分而治之的算法，它会一个元素为枢纽键对数组进行分区，枢纽有以下几种选择，本文以最简单的最后一个元素为枢纽为例</p>
<ul>
<li>始终选择第一个元素作为枢轴</li>
<li>始终选择最后一个元素作为枢轴</li>
<li>选择一个随机元素作为枢轴。</li>
<li>选择中位数作为枢轴</li>
</ul>
<p>（2）实现步骤</p>
<ul>
<li>在给定数组中确定一个元素x作为枢纽</li>
<li>将x放在排序数组中的正确位置</li>
<li>将小于x的元素放在x之前</li>
<li>将大于x的元素放在x之后</li>
<li>去掉枢纽分成两组后重复以上操作</li>
</ul>
<p>以末尾元素为枢纽排序示意图</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906440.png" alt="image-20210226194704522"></p>
<p>​    （3）将小于x的元素放在x之前，将大于x的元素放在x之后这一步是将一个数组分成两个数组，其运用到了分而治之的思想</p>
<ul>
<li><p>将一个数组分成两个数组的方法为：<br>先从数组右边找到一个比枢轴元素小的元素，将数组的第一个位置赋值为该元素；</p>
</li>
<li><p>再从数组的左边找到一个比枢轴元素大的元素，将从上面取元素的位置赋值为该值；</p>
</li>
<li><p>依次进行，直到左右相遇，把枢轴元素赋值到相遇位置。</p>
<p>示意图如下：</p>
</li>
</ul>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/13/17171276e5f8bb49?imageslim" alt="第一轮排序动态过程"></p>
<h3 id="2-基本案例-4"><a href="#2-基本案例-4" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><p>基本案例中也运用了分而治之的方法，当操作步骤与上面步骤相异但是效果相同</p>
<ul>
<li>选择最后一个元素作为枢纽</li>
<li>从数组左端开始遍历一个数组，先设最左端元素为待交换元素。当遇到比枢纽值小的元素，就将其与待交换元素值相交换，并把下个元素设为待交换元素</li>
<li>完成遍历后，最后交换末尾元素与待交换元素，并返回待交换元素的索引</li>
<li>依据返回的索引将数组分成了两组：左边比枢纽元素小，右边比枢纽元素大</li>
<li>最后再递归分开处理左边数组和右边数组</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>*, <span class="keyword">int</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组大小\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arr[n];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;填入数组数据\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line"></span><br><span class="line">    quickSort(arr,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;快速排序后的数组\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &lt; end)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pIndex = partition(arr, start, end);</span><br><span class="line">        quickSort(arr, start, pIndex<span class="number">-1</span>);</span><br><span class="line">        quickSort(arr, pIndex+<span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pIndex = start;</span><br><span class="line">    <span class="keyword">int</span> pivot = arr[end];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = start; i &lt; end; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; pivot)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(&amp;arr[i], &amp;arr[pIndex]);</span><br><span class="line">            pIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(&amp;arr[end], &amp;arr[pIndex]);</span><br><span class="line">    <span class="keyword">return</span> pIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>入门教程</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|基于python开发学生管理系统</title>
    <url>/2020/05/28/Python-%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<img src="https://developer-tech.com/wp-content/uploads/sites/3/2020/12/python-right-business-programming-language-software-development-enterprise-2048x1318.jpg" height="300" alt="git" align="center">



<span id="more"></span>

<h3 id="模拟数据库"><a href="#模拟数据库" class="headerlink" title="模拟数据库"></a>模拟数据库</h3><p>用列表为主体储存全部学生信息，方便读取。用字典这种数据类型放置一个学生信息。方便对列表操作时整块操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [   <span class="comment">#列表</span></span><br><span class="line">		   <span class="comment">#字典	</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>:<span class="string">&quot;佛山&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Mary&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;女&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>: <span class="string">&quot;广州&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;,  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Jhon&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>: <span class="string">&quot;厦门&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h3 id="操作框架"><a href="#操作框架" class="headerlink" title="操作框架"></a>操作框架</h3><p>写代码优先规划好主框架，然后再补充功能函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(</span><br><span class="line">            <span class="string">&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            欢迎使用【学生管理系统】</span></span><br><span class="line"><span class="string">            0.退出系统</span></span><br><span class="line"><span class="string">            1.显示所有学生信息</span></span><br><span class="line"><span class="string">            2.新建学生信息</span></span><br><span class="line"><span class="string">            3.查询学生信息</span></span><br><span class="line"><span class="string">            4.修改学生信息</span></span><br><span class="line"><span class="string">            5.删除学生信息                            </span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">          )</span><br><span class="line"></span><br><span class="line">    op = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的操作：&quot;</span>)) <span class="comment">#转化输入的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> op==<span class="number">1</span> :</span><br><span class="line">        print(<span class="string">&quot;显示所有学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">2</span> :</span><br><span class="line">        print(<span class="string">&quot;新建学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">3</span> :</span><br><span class="line">        print(<span class="string">&quot;查询学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">4</span> :</span><br><span class="line">        print(<span class="string">&quot;修改学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">5</span> :</span><br><span class="line">        print(<span class="string">&quot;删除学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">0</span> :</span><br><span class="line">        <span class="keyword">break</span>  						<span class="comment">#退出循环</span></span><br></pre></td></tr></table></figure>





<h3 id="显示信息"><a href="#显示信息" class="headerlink" title="显示信息"></a>显示信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showall</span>() :</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas :</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;学生信息：&quot;</span>, data)</span><br></pre></td></tr></table></figure>

<p>1.Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串，相当于用data逐个存储列表datas的信息</p>
<p>2.值得注意的是，python的函数必须写在调用函数之前（毕竟没有声明嘛）</p>
<h3 id="新增学生"><a href="#新增学生" class="headerlink" title="新增学生"></a>新增学生</h3><p>用字典存储学生信息，用赋值的方法修改（添加）信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">creat</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;新增学生名字：&quot;</span>)</span><br><span class="line">    sex = <span class="built_in">input</span>(<span class="string">&quot;新增学生性别：&quot;</span>)</span><br><span class="line">    adress = <span class="built_in">input</span>(<span class="string">&quot;新增学生地址：&quot;</span>) <span class="comment">#变量储存</span></span><br><span class="line">    student = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: sex,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>: adress</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    datas.append(student) <span class="comment">#新增列表的项</span></span><br></pre></td></tr></table></figure>



<h3 id="查询学生"><a href="#查询学生" class="headerlink" title="查询学生"></a>查询学生</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">req</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;查询学生姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  datas:</span><br><span class="line">        <span class="keyword">if</span>  data[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            print(data)</span><br></pre></td></tr></table></figure>

<p>列表+字典的信息储存形式用循环遍历字典内容，data就是字典名</p>
<h3 id="修改学生信息"><a href="#修改学生信息" class="headerlink" title="修改学生信息"></a>修改学生信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;修改学生的姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  datas:</span><br><span class="line">        <span class="keyword">if</span>  data[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            print(<span class="string">&quot;修改前学生信息：&quot;</span>,data)</span><br><span class="line">            data[<span class="string">&quot;name&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;修改的名字：&quot;</span>)</span><br><span class="line">            data[<span class="string">&quot;sex&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;修改性别：&quot;</span>)</span><br><span class="line">            data[<span class="string">&quot;adress&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;修改地址：&quot;</span>)</span><br><span class="line">            print(<span class="string">&quot;修改后学生信息：&quot;</span>,data)</span><br></pre></td></tr></table></figure>

<p>循环遍历字典内容，赋值修改信息</p>
<h3 id="删除学生信息"><a href="#删除学生信息" class="headerlink" title="删除学生信息"></a>删除学生信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;删除学生的姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  datas:</span><br><span class="line">        <span class="keyword">if</span>  data[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            datas.remove(data)</span><br></pre></td></tr></table></figure>

<p>data中相当于存储了整个字典，把他一整个删去即可</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
        <tag>管理系统</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工具|学点docker</title>
    <url>/2021/05/28/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Docker%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040845042.jpeg" alt="git"></p>
<span id="more"></span>

<h3 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h3><h4 id="Docker应用"><a href="#Docker应用" class="headerlink" title="Docker应用"></a>Docker应用</h4><ul>
<li>部署环境复杂，非常费时费力</li>
<li>环境不能跨平台</li>
<li>docker可以把环境打包成镜像，直接运行即可</li>
<li>docker通过隔离机制，可以将服务器利用到极致</li>
</ul>
<h4 id="Docker的功能"><a href="#Docker的功能" class="headerlink" title="Docker的功能"></a>Docker的功能</h4><ul>
<li><p>虚拟机技术</p>
</li>
<li><p>容器化技术</p>
</li>
<li><p>DevOps（开发 + 运维）</p>
</li>
<li><p>应用更加快速的交付和部署</p>
</li>
<li><p>更便捷的升级和扩缩容</p>
</li>
<li><p>更加简单的系统运维</p>
</li>
<li><p>更加高效的计算资源利用</p>
</li>
</ul>
<h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><h4 id="1-Docker基本组成"><a href="#1-Docker基本组成" class="headerlink" title="1.Docker基本组成"></a>1.Docker基本组成</h4><ul>
<li><p>仓库：仓库就是存放镜像的地方</p>
</li>
<li><p>镜像：docker镜像就像一个模板，通过镜像可以创建多个容器</p>
</li>
<li><p>容器：容器可以独立运行一个或者多组应用（启动，停止，删除）</p>
</li>
</ul>
<h4 id="2-run工作流程"><a href="#2-run工作流程" class="headerlink" title="2.run工作流程"></a>2.run工作流程</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846845.png" alt="在这里插入图片描述"></p>
<h4 id="3-Docker工作原理"><a href="#3-Docker工作原理" class="headerlink" title="3.Docker工作原理"></a>3.Docker工作原理</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846904.png" alt="Docker 工作原理"></p>
<h4 id="4-Docker与VM的区别"><a href="#4-Docker与VM的区别" class="headerlink" title="4.Docker与VM的区别"></a>4.Docker与VM的区别</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846873.jpeg" alt="containers-vs-virtual-machines.jpg"></p>
<ul>
<li>Docker的抽象层比虚拟机少</li>
<li>docker利用的是宿主机的内核，vm需要的是Guest OS（vm每次都要加载操作系统的内核）</li>
</ul>
<h3 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846335.jpeg" alt="img"></p>
<h4 id="1-帮助命令"><a href="#1-帮助命令" class="headerlink" title="1.帮助命令"></a>1.帮助命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker info</span><br><span class="line">docker --help</span><br></pre></td></tr></table></figure>



<h4 id="2-镜像命令"><a href="#2-镜像命令" class="headerlink" title="2.镜像命令"></a>2.镜像命令</h4><p>（1）docker images查看本地主机上的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<ul>
<li>REPOSITORY :镜像的仓库源</li>
<li>TAG：镜像的标签</li>
<li>IMAGE ID：镜像的id</li>
<li>CREATED：镜像的创建时间    </li>
<li>SIZE：镜像大小</li>
</ul>
<p>可选项：</p>
<ul>
<li>-a : 列出所有镜像</li>
<li>-q：只显示镜像id</li>
</ul>
<p>（2）docker search 搜索镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NAME  DESCRIPTION   STARS  OFFICIAL   AUTOMATED</span><br></pre></td></tr></table></figure>

<p>可选项，可以过滤搜索结果：</p>
<p>–filter=STARS=3000 ：搜索stars大于3000的镜像</p>
<p>（3）docker pull 拉取镜像:tag ，默认拉取最新版</p>
<p>（4）docker rmi 删除镜像名称/id   </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除mysql镜像</span></span><br><span class="line">docker rmi -f mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 递归删除所有镜像</span></span><br><span class="line">docker -f $(docker images -aq)</span><br></pre></td></tr></table></figure>



<h4 id="3-容器命令"><a href="#3-容器命令" class="headerlink" title="3.容器命令"></a>3.容器命令</h4><p>有了镜像我们才能创建容器</p>
<p>（1）新建镜像并启动：dokcer run [可选参数] image</p>
<p>容器内相当于一个新的虚拟环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure>

<p>相关参数：</p>
<ul>
<li>–name = “Name” ：容器名字，用于区分容器</li>
<li>-d ：后台方式运行</li>
<li>-it : 使用交互方式运行，可进入容器查看内容（开启容器终端）</li>
<li>-p：指定容器端口</li>
</ul>
<p>（2）查看容器：docker ps</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps  	  #查看运行中的容器</span><br></pre></td></tr></table></figure>

<p>相关参数：</p>
<ul>
<li>-a  ：查看所有容器（包括已终止的容器）</li>
<li>-n = ? :显示最近创建的容器</li>
<li>-q ： 只显示容器的编号</li>
</ul>
<p>（3）退出容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit # 容器停止并退出</span><br><span class="line">ctrl + P + Q # 容器不停止退出(按P,Q这个设计多少有点反人类)</span><br></pre></td></tr></table></figure>



<p>（4）删除容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id	# 删除指定的容器(不能删除运行中的容器，加-f强制删除)</span><br><span class="line">docker rm -f $(docker ps -aq) 	 # 删除所有容器</span><br></pre></td></tr></table></figure>



<p>（5）启动和停止容器的操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id # 启动容器</span><br><span class="line">docker restart 容器id # 重启容器</span><br><span class="line">docker stop 容器id # 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id # 强制停止当前容器</span><br></pre></td></tr></table></figure>



<h4 id="4-操作命令"><a href="#4-操作命令" class="headerlink" title="4.操作命令"></a>4.操作命令</h4><p>（1）后台启动命令</p>
<p>docker容器使用后台运行时（<code>docker run -d centos</code>），必须要有一个前台进程，如果docker发现自己没有应用了，就会自动停止</p>
<p>（2）查看日志命令</p>
<p>查看容器运行的日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f -t --tail 容器</span><br></pre></td></tr></table></figure>



<p>（3）查看容器进程信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker top 容器id</span><br></pre></td></tr></table></figure>



<p>（4）查看镜像元数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure>



<p>（5）进入当前正在运行的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令1:进入容器后开启一个新的终端（相当于开启了另一个进程）</span></span><br><span class="line">docker exec -it 容器id bashShell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令2：进入容器正在执行的终端中，不会启动新的进程</span></span><br><span class="line">docker attach 容器id</span><br></pre></td></tr></table></figure>



<p>（6）从容器中拷贝文件到主机上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 2e18c3e0375a:/home/test.py /home/autovy/桌面</span><br></pre></td></tr></table></figure>

<p>拷贝是一个手动过程，从封闭的容器中拿到需要留存的数据，而使用数据卷</p>
<p>则可以实现自动同步</p>
<h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>推荐文章：<a href="http://linyishui.top/2019101101.html">docker镜像讲解</a></p>
<h4 id="1-Portainer可视化工具"><a href="#1-Portainer可视化工具" class="headerlink" title="1.Portainer可视化工具"></a>1.Portainer可视化工具</h4><h4 id="2-镜像简介"><a href="#2-镜像简介" class="headerlink" title="2.镜像简介"></a>2.镜像简介</h4><ul>
<li>镜像就是一种轻量级，可执行的独立软件包，用来打包软件运行环境和基于环境开会的软件（包括代码，运行时，库，环境变量，配置文件）</li>
<li>镜像来源：<ul>
<li>从远程仓库下载</li>
<li>自己制作的镜像DockerFile</li>
</ul>
</li>
</ul>
<h4 id="3-镜像加载原理"><a href="#3-镜像加载原理" class="headerlink" title="3.镜像加载原理"></a>3.镜像加载原理</h4><p>（1）联合文件系统（UnionFS）</p>
<p>镜像和容器不同，容器是彼此独立的，而容器是分层叠加的，可以共享相同的底层文件和目录</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846837.webp" alt="img"></p>
<p>（2）镜像加载原理</p>
<p>共享底层资源</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846524.png" alt="docker文件系统分层存储原理"></p>
<h4 id="4-分层理解"><a href="#4-分层理解" class="headerlink" title="4.分层理解"></a>4.分层理解</h4><p>基于Ubuntu Linux 16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。该镜像当前已经包含3个镜像层</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846403.png" alt="基于Ubuntu Linux 16.04创建镜像"></p>
<p>docker镜像默认只读，当容器启动时，一个新的可写层被加载到镜像顶部</p>
<p>这一层即为容器层，容器之下称为镜像层</p>
<h4 id="5-commit镜像"><a href="#5-commit镜像" class="headerlink" title="5.commit镜像"></a>5.commit镜像</h4><p>提交一个新的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的副本</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令和git原理相似</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</span><br></pre></td></tr></table></figure>



<h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><h4 id="1-数据卷原理"><a href="#1-数据卷原理" class="headerlink" title="1.数据卷原理"></a>1.数据卷原理</h4><p>容器之间有一个数据共享技术，Docker容器中产生的数据，同步到本地（从而实现数据可持久化，数据同步操作，数据存储在本地不会随着容器删除而丢失）</p>
<p>其本质是将容器内的目录挂载到主机上</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846330.png" alt="数据卷容器实践_heima201907的博客-CSDN博客"></p>
<h4 id="2-数据卷使用"><a href="#2-数据卷使用" class="headerlink" title="2.数据卷使用"></a>2.数据卷使用</h4><p>（1）使用命令挂载 -v</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v 主机目录地址:容器目录地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试：将容器的目录挂载到主机目录</span></span><br><span class="line">docker run -it -v /home/test:/home centos /bin/bash</span><br></pre></td></tr></table></figure>

<ul>
<li>主机和容器没有对应目录时会自动创建目录</li>
<li>通过docker inspect 可以查看到挂载信息</li>
<li>挂载双方是双向同步关系，他们的文件内容无论哪一方更改，都会保持同步</li>
<li>修改文件时，只需要在本地修改即可，不需要进入容器</li>
</ul>
<p>（2）具名挂载和匿名挂载</p>
<p>除了上文中的指定路径挂载，我们也可以使用具名挂载和匿名挂载</p>
<p>匿名挂载：<code>-v :容器目录地址</code></p>
<p>具名挂载：<code>-v 卷名:容器目录地址</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">docker run -d -P --name test1 -v /home/new centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载</span></span><br><span class="line">docker run -d -P --name test1 -v mycentos:/home/new centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有卷(可以看到存在匿名卷)</span></span><br><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>

<p>所有的docker容器内的卷默认放在本地主机的<code>/var/lib/docker/volumes下</code></p>
<p>（3）挂载权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以通过 -v 容器路径：ro,rw改变读写权限</span></span><br><span class="line">ro # 只读，只能通过宿主机来操作，容器内部无法进行操作</span><br><span class="line">rw # 可读可写，默认为可读可写</span><br></pre></td></tr></table></figure>





<h4 id="3-数据卷容器"><a href="#3-数据卷容器" class="headerlink" title="3.数据卷容器"></a>3.数据卷容器</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846812.png" alt="Docker学习过程（5-数据卷）_gengli2017的博客-CSDN博客"></p>
<p>容器间也可以进行挂载从而实现数据同步，多个子容器的数据可以挂载到一个父容器中，这个父容器就是数据卷容器</p>
<p>–volumes-from即可以让docker3挂载到docker1上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name docker3 --volumes-from docker1 5ce91af318b3 /bin/bash</span><br></pre></td></tr></table></figure>

<p>容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止</p>
<h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><p>参考文章：<a href="https://blog.52itstyle.vip/archives/2839/">DokcerFile命令详解</a></p>
<h4 id="1-DockerFile简介"><a href="#1-DockerFile简介" class="headerlink" title="1.DockerFile简介"></a>1.DockerFile简介</h4><p>DockerFile是构建docker镜像的构建文件，即命令脚本。通过这个脚本我们可以生成一个镜像。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846366.png" alt="在这里插入图片描述"></p>
<h4 id="2-DockerFile构建流程"><a href="#2-DockerFile构建流程" class="headerlink" title="2.DockerFile构建流程"></a>2.DockerFile构建流程</h4><p>（1）DockerFile内容示例</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在构建镜像形成两个数据卷，因为没有指定的挂载卷会自动进行匿名挂载</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----end------&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>



<p>（2）通过DockerFile文件构建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f dockerfile -t test/centos .</span><br></pre></td></tr></table></figure>

<p>build命令， -f  打开dockerfile文件的路径，-t  test/centos命名容器，.即为生成路径</p>
<p>（3）用自己的镜像创建容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it 5ce91af318b3 /bin/bash</span><br></pre></td></tr></table></figure>



<p>（4）docker push 发布镜像（开源进行）</p>
<h4 id="3-DockerFile指令详解"><a href="#3-DockerFile指令详解" class="headerlink" title="3.DockerFile指令详解"></a>3.DockerFile指令详解</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846106.png" alt="img"></p>
<p>（图中最后一项应为CMD指令此处更正）</p>
<p>补充项：</p>
<ul>
<li><p>CMD：指定这个容器启动时要运行的命令，只有最后一个会生效，可被替代</p>
</li>
<li><p>ENTRYPOINT：指定这个容器启动时要运行的命令，可以追加命令</p>
</li>
<li><p>COPY：类似于ADD，将我们文件拷贝到镜像中</p>
</li>
<li><p>ENV：构建的时候设置环境变量</p>
</li>
</ul>
<h4 id="4-创建自己的DockerFile"><a href="#4-创建自己的DockerFile" class="headerlink" title="4.创建自己的DockerFile"></a>4.创建自己的DockerFile</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> Autovy&lt;autovys@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录为/usr/local</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装相关依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开放端口80</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----end------&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>

<p> 通过<code>docker history mycentos:0.1</code>  命令可以查看构建镜像的过程</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>docker</tag>
        <tag>入门教程</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工具|Docker搭建LNMP</title>
    <url>/2021/06/06/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Docker%E6%90%AD%E5%BB%BALNMP/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040845042.jpeg" alt="git"></p>
<span id="more"></span>

<h2 id="命令行搭建"><a href="#命令行搭建" class="headerlink" title="命令行搭建"></a>命令行搭建</h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><h4 id="1-mysql镜像拉取"><a href="#1-mysql镜像拉取" class="headerlink" title="1.mysql镜像拉取"></a>1.mysql镜像拉取</h4><p>从仓库中拉取对应的mysql镜像，注意如果不标注tag（版本号等），会默认使用lastest（最新版）这个版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docekr pull mysql:5.6</span><br></pre></td></tr></table></figure>



<h4 id="2-创建mysql容器"><a href="#2-创建mysql容器" class="headerlink" title="2.创建mysql容器"></a>2.创建mysql容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=xy123456 --name xy_mysql mysql:5.6</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>-d 让容器在后台运行，如果没有这个条件，会在终端展示mysql加载过程，而且无法进行操作（在另一个终端查看，会发现mysql的容器正在运行中，关闭原来的终端，该容器并不会随之关闭）</li>
<li>-p 添加主机到容器的端口映射，3306是容器内mysql默认使用的端口号</li>
<li>-e 设置环境变量，这里是设置mysql的root用户的初始密码，这个必须设置，如果没有设置容器会被自动关停</li>
<li>–name 容器的名字，容器名必须唯一</li>
</ul>
<h4 id="3-进入mysql容器"><a href="#3-进入mysql容器" class="headerlink" title="3.进入mysql容器"></a>3.进入mysql容器</h4><p>容器启动后，我们可以进入运行中的容器查看mysql的相关文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -ti xy_mysql /bin/bash</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>-t 在容器里生产一个伪终端</li>
<li>-i 对容器内的标准输入 (STDIN) 进行交互</li>
<li>exit命令是离开并关闭容器，但是由于容器还有任务所以不会关停</li>
</ul>
<h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><h4 id="1-PHP镜像拉取"><a href="#1-PHP镜像拉取" class="headerlink" title="1.PHP镜像拉取"></a>1.PHP镜像拉取</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull php:7.0-fpm</span><br></pre></td></tr></table></figure>



<h4 id="2-创建PHP容器"><a href="#2-创建PHP容器" class="headerlink" title="2.创建PHP容器"></a>2.创建PHP容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -v /var/nginx/www/html:/var/www/html -p 9000:9000 --link xy_mysql:mysql --name xy_phpfpm php:fpm </span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>-p 添加主机到容器的端口映射，设定php使用9000端口</li>
<li>-v 添加目录映射，即主机上的/var/nginx/www/html和容器中/var/www/html目录是同步的，主机上的路径如果不存在，也会自动生成</li>
<li>–link 与另外一个容器建立起联系，这样我们就可以在当前容器中去使用另一个容器里的服务</li>
</ul>
<h4 id="3-创建文件"><a href="#3-创建文件" class="headerlink" title="3.创建文件"></a>3.创建文件</h4><p>这时我们可以不进入容器内增加文件，而是可以在主机的挂载目录下添加文件</p>
<p>在/var/nginx/www/html目录下新建index.php文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim index.php</span><br></pre></td></tr></table></figure>



<p>写入内容作为测试</p>
<p>因为docker需要在最高权限下运行，所有在主机上创建的目录需要最高权限访问</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo() <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="安装nignx"><a href="#安装nignx" class="headerlink" title="安装nignx"></a>安装nignx</h3><h4 id="1-nginx镜像拉取"><a href="#1-nginx镜像拉取" class="headerlink" title="1.nginx镜像拉取"></a>1.nginx镜像拉取</h4><p>这里拉取的就是最新版</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>



<h4 id="2-创建nginx工具人容器"><a href="#2-创建nginx工具人容器" class="headerlink" title="2.创建nginx工具人容器"></a>2.创建nginx工具人容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 \</span><br><span class="line">--link xy_phpfpm:phpfpm --name xy_nginx nginx</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<p>创建一个无挂载的容器，方便下一步提取出配置文件（如果挂载了，会导致复制配置文件时，一直与容器同步）</p>
<h4 id="3-复制配置文件"><a href="#3-复制配置文件" class="headerlink" title="3.复制配置文件"></a>3.复制配置文件</h4><p>容器的挂载只限于目录，如果直接挂载文件，其仍作为目录被处理</p>
<p>要实现文件同步，我们必须要先从容器中复制出一份配置文件（如果是直接新建一个，挂载时主机上的空白文件会同步到容器中）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp xy_nginx:/etc/nginx/nginx.conf /var/nginx/nginx.conf</span><br><span class="line">docker cp xy_nginx:/etc/nginx/conf.d/default.conf /var/nginx/conf.d/</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>docker cp  原路径:转移路径</li>
<li>容器的路径用： <code>容器名:容器内文件路径</code>表示</li>
<li>cp时路径上的目录必须存在（而挂载时，主机会自动创建不存在的目录）</li>
</ul>
<h4 id="4-创建nginx挂载容器"><a href="#4-创建nginx挂载容器" class="headerlink" title="4.创建nginx挂载容器"></a>4.创建nginx挂载容器</h4><p>先把充当工具人的nginx容器删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm -f xy_nginx</span><br></pre></td></tr></table></figure>

<p>重新创建一个带挂载的nginx容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 \</span><br><span class="line">-v /var/nginx/nginx.conf:/ect/nginx/nginx.conf\</span><br><span class="line">-v /var/nginx/conf.d/default.conf:/ect/nginx/conf.d/default.conf\</span><br><span class="line">-v /var/nginx/www/html:/var/www/html\</span><br><span class="line">--link xy_phpfpm:phpfpm --name xy_nginx nginx</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>-p 添加主机到容器的端口映射，nginx默认使用80端口，也是网页范围默认使用的端口</li>
<li>-v 挂载了三个文件到本地，其中<code>/var/nginx/nginx.conf</code>和<code>/var/nginx/conf.d/default.conf</code>在本地同步了nginx两个重要的配置文件，<code>/var/www/html</code>则同步了nginx网页展示文件</li>
<li>挂载时应该要保持最后一个文件相同</li>
</ul>
<h4 id="5-修改配置文件"><a href="#5-修改配置文件" class="headerlink" title="5.修改配置文件"></a>5.修改配置文件</h4><p>修改nginx的配置文件让其监听php，这里可以直接在主机修改配置文件</p>
<p>主机：<code>/var/nginx/conf.d/default.conf</code>    容器：<code>/ect/nginx/conf.d/default.conf</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root           /<span class="keyword">var</span>/www/html;</span><br><span class="line">    fastcgi_pass   <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9000</span>;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document</span>_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    <span class="keyword">include</span>        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内容解析：</p>
<ul>
<li>root为文件php根目录，所以修改为 <code>/var/www/html</code></li>
<li>fastcgi_pass 修改为<code>本地ip地址:php端口</code>，注意使用回环地址也是不允许的</li>
<li>fastcgi_index为默认访问的页面</li>
<li>fastcgi_param应该改为 $document_root$fastcgi_script_name才能准确找到位置</li>
</ul>
<h4 id="6-配置出错处理方法"><a href="#6-配置出错处理方法" class="headerlink" title="6.配置出错处理方法"></a>6.配置出错处理方法</h4><p>当配置文件出错时，容器将无法运行</p>
<ul>
<li>先查看日志，查找出错的地方</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs xy_nginx</span><br></pre></td></tr></table></figure>

<ul>
<li>由于容器没有启动，我们无法直接进入容器修改，所以需要用docker cp下载出问题的文件，然后再通过cp覆盖问题文件</li>
<li>如果该出错文件有挂载，在本地修改即可</li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>docker</tag>
        <tag>入门教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|SSM框架学习</title>
    <url>/2021/05/08/Java-ssm%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040933389.png" alt="image-20210604151457606"></p>
<span id="more"></span>

<h2 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h2><h3 id="1-SSM功能"><a href="#1-SSM功能" class="headerlink" title="1.SSM功能"></a>1.SSM功能</h3><p>SSM即Spring + Spring MVC + MyBatis</p>
<ul>
<li>Spring MVC 负责实现MCV设计模式，MyBatis负责数据持久层，Spring负责管理Spring MVC和MyBatis相关的创建和依赖注入</li>
<li>Spring MCV处理的是客户端与Java应用的关系，MyBatis处理的是Java应用与数据库的关系</li>
</ul>
<h3 id="2-SSM整合配置"><a href="#2-SSM整合配置" class="headerlink" title="2.SSM整合配置"></a>2.SSM整合配置</h3><h4 id="（1）Maven添加所需依赖"><a href="#（1）Maven添加所需依赖" class="headerlink" title="（1）Maven添加所需依赖"></a>（1）Maven添加所需依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring JDBC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring AOP --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MyBatis --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MyBatis整合Spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- C3P0 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- JSTL --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="（2）web-xml配置"><a href="#（2）web-xml配置" class="headerlink" title="（2）web.xml配置"></a>（2）web.xml配置</h4><p>当我们启动一个web项目容器时，首先非去读取web.xml内的配置</p>
<p>容器加载web.xml的过程</p>
<ul>
<li>首先读取配置文件中<code>&lt;listener&gt; &lt;/listener&gt;</code>和<code>&lt;context-param&gt; &lt;/context-param&gt;</code>两个节点</li>
<li>紧接着，容器创建一个ServletContext(application),这个web项目的所有部分都将共享这个上下文</li>
<li>容器以<code>&lt;context-param&gt;&lt;/context-param&gt;</code>的name作为键，value作为值，将其转化为键值对，存入ServletContext</li>
<li>容器创建<code>&lt;listener&gt;&lt;/listener&gt;</code>中的类实例，根据配置的class类路径<code>&lt;listener-class&gt;</code>来创建监听，在监听中会有初始化方法</li>
</ul>
<p>web.xml中配置SpringMCV，Spring，字符编码过滤器，加载静态资源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 启动Spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring MVC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 字符编码过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 加载静态资源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="（3）spring-xml配置"><a href="#（3）spring-xml配置" class="headerlink" title="（3）spring.xml配置"></a>（3）spring.xml配置</h4><p>spring.xml配置MyBatis和Spring的整合</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 整合MyBatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置MyBatis SqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/southwind/repository/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:config.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描自定义的Mapper接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.southwind.repository&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="（4）config-xml-配置"><a href="#（4）config-xml-配置" class="headerlink" title="（4）config.xml 配置"></a>（4）config.xml 配置</h4><p>config.xml 配置一些 MyBatis 辅助信息，比如打印 SQL 等</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打印SQL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定一个包名，MyBatis会在包名下搜索需要的JavaBean--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.southwind.entity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="（5）springmvc-xml配置"><a href="#（5）springmvc-xml配置" class="headerlink" title="（5）springmvc.xml配置"></a>（5）springmvc.xml配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描业务代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.southwind&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-SSM实现步骤"><a href="#3-SSM实现步骤" class="headerlink" title="3.SSM实现步骤"></a>3.SSM实现步骤</h3><h4 id="（1）创建实体类（Entity）"><a href="#（1）创建实体类（Entity）" class="headerlink" title="（1）创建实体类（Entity）"></a>（1）创建实体类（Entity）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="（2）创建数据访问层（Repository）"><a href="#（2）创建数据访问层（Repository）" class="headerlink" title="（2）创建数据访问层（Repository）"></a>（2）创建数据访问层（Repository）</h4><p>实现dao访问</p>
<ul>
<li><p>UserRepository访问数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li>UserRepository.xml配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.southwind.repository.UserRepository&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="（3）创建服务接口（Service）"><a href="#（3）创建服务接口（Service）" class="headerlink" title="（3）创建服务接口（Service）"></a>（3）创建服务接口（Service）</h4><p>服务层，注入dao主要用来进行业务的逻辑处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="（4）实现服务接口（ServiceImpl）"><a href="#（4）实现服务接口（ServiceImpl）" class="headerlink" title="（4）实现服务接口（ServiceImpl）"></a>（4）实现服务接口（ServiceImpl）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> com.southwind.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="（4）实现控制器（Controller）"><a href="#（4）实现控制器（Controller）" class="headerlink" title="（4）实现控制器（Controller）"></a>（4）实现控制器（Controller）</h4><p>注入服务，映射url</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;list&quot;</span>,userService.findAll());</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h3 id="1-初识MyBatis"><a href="#1-初识MyBatis" class="headerlink" title="1.初识MyBatis"></a>1.初识MyBatis</h3><h4 id="（1）MyBatis简介"><a href="#（1）MyBatis简介" class="headerlink" title="（1）MyBatis简介"></a>（1）MyBatis简介</h4><ul>
<li>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射</li>
<li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作</li>
<li>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO为数据库中的记录</li>
</ul>
<h4 id="（2）如果获取MyBatis"><a href="#（2）如果获取MyBatis" class="headerlink" title="（2）如果获取MyBatis"></a>（2）如果获取MyBatis</h4><ul>
<li><p>maven添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>github下载源码</p>
</li>
<li><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
</li>
</ul>
<h4 id="（3）持久层"><a href="#（3）持久层" class="headerlink" title="（3）持久层"></a>（3）持久层</h4><ul>
<li>数据持久化：持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li>
<li>数据持久化的方法有：数据库（jdbc）,io文件持久化</li>
<li>持久层即完成持久化工作的代码块</li>
</ul>
<h4 id="（4）为什么需要Mybatis"><a href="#（4）为什么需要Mybatis" class="headerlink" title="（4）为什么需要Mybatis"></a>（4）为什么需要Mybatis</h4><ul>
<li><p>帮助程序将数据存入数据库中</p>
</li>
<li><p>方便</p>
</li>
<li><p>传统的JDBC代码太复杂，而Mybatis简化，自动化</p>
</li>
<li><p>优点：</p>
<ul>
<li>简单易学</li>
<li>灵活</li>
<li>sql和代码的分离，提高了可维护性,支持对象与数据库字段的关系映射</li>
<li>提供映射标签</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>通过xml标签，支持编写动态sql</li>
</ul>
</li>
</ul>
<h3 id="2-MyBatis使用流程"><a href="#2-MyBatis使用流程" class="headerlink" title="2.MyBatis使用流程"></a>2.MyBatis使用流程</h3><h4 id="（1）环境搭建"><a href="#（1）环境搭建" class="headerlink" title="（1）环境搭建"></a>（1）环境搭建</h4><ul>
<li><p>新建数据库</p>
</li>
<li><p>新建项目</p>
<ul>
<li><p>新建一个普通maven项目</p>
</li>
<li><p>删除src文件</p>
</li>
<li><p>导入相关依赖：mysql驱动，mybatis，junit等</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h4 id="（2）创建一个模块"><a href="#（2）创建一个模块" class="headerlink" title="（2）创建一个模块"></a>（2）创建一个模块</h4><ul>
<li>编写mybatis核心配置文件，该配置文件包含对MyBatis系统的核心设置，包含获取数据库连接实例的数据源（DataSource）和决定事务范围和控制方式的事务管理器（TransactionManager）</li>
</ul>
<ul>
<li><p>mybatis配置文件示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--数据库连接的配置信息 驱动 URL 用户名 密码 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 将写好的sql映射文件组成到该处（见代码编写部分） --&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>构建 SqlSessionFactory对象</p>
<ul>
<li>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。</li>
<li>SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得</li>
<li>而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出    SqlSessionFactory 实例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String resource = <span class="string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>获取 SqlSession实例、</p>
<ul>
<li><p>从 SqlSessionFactory 中可以获取 SqlSession实例</p>
</li>
<li><p>SqlSession 提供了在数据库执行 SQL 命令所需的所有方法</p>
</li>
<li><p>我们可以通过SqlSession实例来直接执行已映射的 SQL 语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">  Blog blog = mapper.selectBlog(<span class="number">101</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h4 id="（3）代码编写"><a href="#（3）代码编写" class="headerlink" title="（3）代码编写"></a>（3）代码编写</h4><ul>
<li><p>实体类</p>
<p>程序中的实体类对应着数据库中的字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String ame;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = Name;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>Dao接口</p>
<p>Dao接口用于操作数据库对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dao</span></span>&#123;</span><br><span class="line">	<span class="function">List&lt;test&gt; <span class="title">getList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>编写sql映射文件</p>
<ul>
<li>实现类由原来的Daolmpl（Dao接口实现类）转变为一个Mapper配置文件</li>
<li>namespace：名称空间 ，绑定一个对应的Dao或Mapper接口</li>
<li>id：sql的唯一标识 </li>
<li>resultType：返回值类型 </li>
<li>#{id}：从传递过来的参数中取出id值     <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.mybatis.example.BlogMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlog&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">select * from Blog where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>每个mapper.xml文件都要在Mybatis核心配置文件中注册</p>
<p>​       </p>
<h4 id="（4）执行代码"><a href="#（4）执行代码" class="headerlink" title="（4）执行代码"></a>（4）执行代码</h4><p>Test测试编写：</p>
<ul>
<li>获取SqlSession对象</li>
<li>执行sql（getMapper）</li>
<li>关闭SqlSession</li>
</ul>
<p>可能出现的问题：</p>
<ul>
<li>sql映射配置文件没注册</li>
<li>绑定接口错误</li>
<li>方法名不对</li>
<li>返回类型不对</li>
<li>Maven导出资源问题</li>
</ul>
<h3 id="3-CRUD"><a href="#3-CRUD" class="headerlink" title="3.CRUD"></a>3.CRUD</h3><p>在sql映射文件中编写CRUD</p>
<h4 id="（1）实现步骤"><a href="#（1）实现步骤" class="headerlink" title="（1）实现步骤"></a>（1）实现步骤</h4><ul>
<li>编写接口（Dao/Mapper）</li>
<li>编写对应接口的sql语句</li>
<li>测试</li>
</ul>
<h4 id="（2）namespace"><a href="#（2）namespace" class="headerlink" title="（2）namespace"></a>（2）namespace</h4><p>namespace中的包名要与Dao/mapper接口的包名一致</p>
<h4 id="（3）select"><a href="#（3）select" class="headerlink" title="（3）select"></a>（3）select</h4><ul>
<li>id：对应namespace接口文件中的方法名</li>
<li>resultType：sql语句执行的返回值</li>
<li>parameterType：参数类型</li>
</ul>
<h4 id="（4）insert-update-delete"><a href="#（4）insert-update-delete" class="headerlink" title="（4）insert update delete"></a>（4）insert update delete</h4><p>增删改标签在映射文件中编写sql语句，调用时都需要提交事物</p>
<h4 id="（5）错误分析"><a href="#（5）错误分析" class="headerlink" title="（5）错误分析"></a>（5）错误分析</h4><ul>
<li>sql映射文件的标签和sql语句要对应</li>
<li>resource绑定mapper需要使用路径</li>
<li>程序配置文件必须符合规范</li>
<li>NullPointerException，没有注册到资源</li>
</ul>
<h4 id="（6）Map参数类型"><a href="#（6）Map参数类型" class="headerlink" title="（6）Map参数类型"></a>（6）Map参数类型</h4><ul>
<li>假设实体类或者数据库中的字段过多，我们可以使用Map作为parameterType的值</li>
<li>Map可以自动填充null</li>
<li>Map传递参数，直接在sql中取出key（多个参数用Map，或者注解）</li>
<li>对象传递参数，在sql中取对象的属性（只有一个基本类型参数下使用）</li>
</ul>
<h4 id="（7）模糊查询"><a href="#（7）模糊查询" class="headerlink" title="（7）模糊查询"></a>（7）模糊查询</h4><ul>
<li>Java代码执行时，传递通配符</li>
<li>也可以在在sql拼接中使用通配符</li>
</ul>
<h3 id="4-配置解析"><a href="#4-配置解析" class="headerlink" title="4.配置解析"></a>4.配置解析</h3><h4 id="（1）核心配置文件"><a href="#（1）核心配置文件" class="headerlink" title="（1）核心配置文件"></a>（1）核心配置文件</h4><ul>
<li><p>mybatis-config.xml</p>
</li>
<li><p>MyBaits的配置文件包含了会深深影响MyBatis行为的设置和属性信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="（2）环境配置（environments）"><a href="#（2）环境配置（environments）" class="headerlink" title="（2）环境配置（environments）"></a>（2）环境配置（environments）</h4><ul>
<li>尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境</li>
<li>MyBatis默认事务管理器时JDBC，连接池POOLED</li>
</ul>
<h4 id="（3）属性（properties）"><a href="#（3）属性（properties）" class="headerlink" title="（3）属性（properties）"></a>（3）属性（properties）</h4><ul>
<li>我们可以通过properties属性来实现引用外部配置文件，可以在其中增加一些属性配置（如果有同一字段，优先录取外部配置文件的）</li>
<li>这些属性都是可外部配置且动态替换的，既可以在典型的Java属性文件中配置，也可以通过properties的子元素传递</li>
<li>外部配置文件写入数据库连接相关属性</li>
</ul>
<h4 id="（4）类型别名（ypeAliases）"><a href="#（4）类型别名（ypeAliases）" class="headerlink" title="（4）类型别名（ypeAliases）"></a>（4）类型别名（ypeAliases）</h4><ul>
<li>类型别名可为 Java 类型设置一个缩写名字</li>
<li>它仅用于 XML 配置，意在降低冗余的全限定类名书写</li>
<li>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，默认使用 Bean 的首字母小写的非限定类名来作为它的别名</li>
</ul>
<h4 id="（5）设置"><a href="#（5）设置" class="headerlink" title="（5）设置"></a>（5）设置</h4><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为</p>
<p>一个配置完整的 settings 元素的示例如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="（6）映射器"><a href="#（6）映射器" class="headerlink" title="（6）映射器"></a>（6）映射器</h4><p>MapperRegistry：注册绑定我们的Mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="（7）生命周期与作用域"><a href="#（7）生命周期与作用域" class="headerlink" title="（7）生命周期与作用域"></a>（7）生命周期与作用域</h4><p>作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题</p>
<p>SqlSessionFactoryBuilder：</p>
<ul>
<li>一旦创建了SqlSessionFactory，就不需要它了</li>
<li>局部变量</li>
</ul>
<p>SqlSessionFactory：</p>
<ul>
<li>数据库连接池</li>
<li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例</li>
<li>SqlSessionFactory最佳作用域是应用作用域</li>
<li>最简单的就是使用单例模式或者静态单例模式 （保证全局只有一个SqlSessionFactory）</li>
</ul>
<p>SqlSession：</p>
<ul>
<li>连接到连接池的一个请求</li>
<li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</li>
<li>用完之后需要赶紧关闭</li>
</ul>
<h3 id="5-ResultMap结果集映射"><a href="#5-ResultMap结果集映射" class="headerlink" title="5.ResultMap结果集映射"></a>5.ResultMap结果集映射</h3><p>当实体类中属性名和数据库中字段名不一致时会找不到对应字段</p>
<p>解决方案：</p>
<ul>
<li>在sql映射中为字段起别名，达到与实体类中属性名一致的目的</li>
<li>通过resultMap结果集映射，让数据库中的字段映射到实体类的属性</li>
</ul>
<h3 id="6-日志"><a href="#6-日志" class="headerlink" title="6.日志"></a>6.日志</h3><h4 id="（1）日志工厂"><a href="#（1）日志工厂" class="headerlink" title="（1）日志工厂"></a>（1）日志工厂</h4><p>如果一个数据库操作出现了异常，我们需要排错，这时候往往要用到日志。MyBatis可以开启日志工厂，具体使用哪个日志实现，在设置中设定</p>
<h4 id="（2）Log4j"><a href="#（2）Log4j" class="headerlink" title="（2）Log4j"></a>（2）Log4j</h4><ul>
<li><p>log4j简介</p>
<ul>
<li>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件……</li>
<li>可以控制每一条日志的输出格式</li>
<li>通过一个配置文件进行灵活配置，而不需要修改应用代码</li>
</ul>
</li>
<li><p>log4j使用</p>
<ul>
<li>导入log4j依赖</li>
</ul>
</li>
<li><p>写log4j.properties配置文件</p>
<ul>
<li>使用log4j类格式化输出</li>
</ul>
</li>
</ul>
<h3 id="7-分页"><a href="#7-分页" class="headerlink" title="7.分页"></a>7.分页</h3><p>分页可以减少数据处理量</p>
<h4 id="（1）使用Limit分页"><a href="#（1）使用Limit分页" class="headerlink" title="（1）使用Limit分页"></a>（1）使用Limit分页</h4><h4 id="（2）使用Mybatis实现分页"><a href="#（2）使用Mybatis实现分页" class="headerlink" title="（2）使用Mybatis实现分页"></a>（2）使用Mybatis实现分页</h4><ul>
<li>接口</li>
<li>Mapper.xml（sql映射配置文件）</li>
<li>测试</li>
</ul>
<h4 id="（3）RowBounds分页"><a href="#（3）RowBounds分页" class="headerlink" title="（3）RowBounds分页"></a>（3）RowBounds分页</h4><p>不建议在开发中使用</p>
<ul>
<li>接口</li>
<li>mapper.xml</li>
<li>测试</li>
</ul>
<h4 id="（4）分页插件"><a href="#（4）分页插件" class="headerlink" title="（4）分页插件"></a>（4）分页插件</h4><h3 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8.使用注解开发"></a>8.使用注解开发</h3><h4 id="（1）面向接口编程"><a href="#（1）面向接口编程" class="headerlink" title="（1）面向接口编程"></a>（1）面向接口编程</h4><p>面向接口编程：解耦，可拓展，提高复用，分层开发中，上层不用管具体实现</p>
<p>关于接口的理解：</p>
<ul>
<li>接口时定义域实现的分离</li>
<li>接口可以反映系统设计人员对系统的抽象理解</li>
</ul>
<p>三个面向区别：</p>
<ul>
<li>面向对象：考虑问题时，以对象为单位，考虑它属性及方法</li>
<li>面向过程：考虑问题时，以一个事务流程为单位，考虑它的实现</li>
<li>面向接口：体现对系统整体的架构</li>
</ul>
<h4 id="（2）注解开发"><a href="#（2）注解开发" class="headerlink" title="（2）注解开发"></a>（2）注解开发</h4><p>本质：反射机制实现</p>
<p>底层：动态代理</p>
<ul>
<li>注解在接口实现，取代了sql映射配置文件的功能</li>
<li>需要在核心配置我文件中绑定接口</li>
<li>测试</li>
</ul>
<h4 id="（3）CRUD"><a href="#（3）CRUD" class="headerlink" title="（3）CRUD"></a>（3）CRUD</h4><ul>
<li><p>多个参数时，所有的参数前面必须加上@Param(“id”)的注解</p>
</li>
<li><p>工具类创建时实现自动提交事务</p>
</li>
<li><p>关于@Param()注解</p>
<ul>
<li><p>基本数据类型或String类型的参数需要加上</p>
</li>
<li><p>引用类型不需要加</p>
</li>
</ul>
</li>
<li><p>#{}相较于${}可以更有效防止注解</p>
</li>
</ul>
<h3 id="9-Lombok"><a href="#9-Lombok" class="headerlink" title="9.Lombok"></a>9.Lombok</h3><p> Lombok是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，通过使用对应的注解，可以在编译源码的时候生成对应的方法</p>
<p>​    </p>
<h3 id="10-多对一处理"><a href="#10-多对一处理" class="headerlink" title="10.多对一处理"></a>10.多对一处理</h3><p>找到一名学生对应的老师（有多个学生是同一个老师）</p>
<h4 id="（1）按照查询嵌套处理"><a href="#（1）按照查询嵌套处理" class="headerlink" title="（1）按照查询嵌套处理"></a>（1）按照查询嵌套处理</h4><p>类似于sql的子查询</p>
<ul>
<li>查询所有学生信息</li>
<li>根据学生的tid寻找对应老师</li>
</ul>
<h4 id="（2）按照结果嵌套处理"><a href="#（2）按照结果嵌套处理" class="headerlink" title="（2）按照结果嵌套处理"></a>（2）按照结果嵌套处理</h4><h3 id="11-一对多处理"><a href="#11-一对多处理" class="headerlink" title="11.一对多处理"></a>11.一对多处理</h3><p>找到一名老师对应的多个学生</p>
<h4 id="（1）按照结果嵌套查询"><a href="#（1）按照结果嵌套查询" class="headerlink" title="（1）按照结果嵌套查询"></a>（1）按照结果嵌套查询</h4><h4 id="（2）按照查询嵌套查询"><a href="#（2）按照查询嵌套查询" class="headerlink" title="（2）按照查询嵌套查询"></a>（2）按照查询嵌套查询</h4><h3 id="12-动态SQL"><a href="#12-动态SQL" class="headerlink" title="12.动态SQL"></a>12.动态SQL</h3><p>动态sql就是根据不同条件生成不同的sql语句</p>
<p>所谓动态sql，本质上还是sql语句，只是我们可以在sql层面，去执行一个逻辑代码</p>
<p>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL格式排列组合即可</p>
<h4 id="（1）if"><a href="#（1）if" class="headerlink" title="（1）if"></a>（1）if</h4><p>根据条件拼接出不同的sql语句</p>
<h4 id="（2）choose-when-otherwise"><a href="#（2）choose-when-otherwise" class="headerlink" title="（2）choose (when, otherwise )"></a>（2）choose (when, otherwise )</h4><p>类似于switch语句，匹配符合条件的标签拼接成新的sql语句</p>
<h4 id="（3）trim-where-set"><a href="#（3）trim-where-set" class="headerlink" title="（3）trim (where, set)"></a>（3）trim (where, set)</h4><ul>
<li><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除</li>
<li><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）</li>
</ul>
<h4 id="（4）foreach"><a href="#（4）foreach" class="headerlink" title="（4）foreach"></a>（4）foreach</h4><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）</p>
<h3 id="13-缓存"><a href="#13-缓存" class="headerlink" title="13.缓存"></a>13.缓存</h3><h4 id="（1）缓存简介"><a href="#（1）缓存简介" class="headerlink" title="（1）缓存简介"></a>（1）缓存简介</h4><ul>
<li>存在内存中的临时数据</li>
<li>将用户经常查询的数据放在缓存中，用户去查询数据可以直接在缓存中查询，提高了查询效率，解决了高并发系统的性能问题</li>
<li>使用缓存可以减少与数据库交互次数，减少系统开销，提高系统效率</li>
<li>经常查询而且不经常改变的数据使用缓存</li>
</ul>
<h4 id="（2）Mybaiis缓存"><a href="#（2）Mybaiis缓存" class="headerlink" title="（2）Mybaiis缓存"></a>（2）Mybaiis缓存</h4><ul>
<li>MyBatis包含一个非常强大的查询缓存特性，非常方便定制和配置缓存，极大提高查询效率</li>
<li>MyBatis系统中默认定义两级缓存<ul>
<li>默认情况下，MyBatis开启了一级缓存（SqlSession本地缓存）</li>
<li>二级缓存需要手动开启和配置（基于namespace级别的缓存，我们可以通过Cache接口自定义二级缓存）</li>
</ul>
</li>
</ul>
<h4 id="（3）一级缓存"><a href="#（3）一级缓存" class="headerlink" title="（3）一级缓存"></a>（3）一级缓存</h4><ul>
<li>与数据库同异常会话期间查询到的数据会放到本地缓存中</li>
<li>以后需要获取相同数据就可以直接在缓存中拿，而不必查询数据库</li>
</ul>
<p>缓存失效的情况：</p>
<ul>
<li>查询不同的东西</li>
<li>增删改操作会导致刷新缓存</li>
<li>手动清理缓存</li>
</ul>
<h4 id="（4）二级缓存"><a href="#（4）二级缓存" class="headerlink" title="（4）二级缓存"></a>（4）二级缓存</h4><p>二级缓存又叫全局缓存，一个命名空间对应一个二级缓存</p>
<p>二级缓存工作机制：</p>
<ul>
<li>一个会话查询的数据会被放在当前会话的一级缓存中</li>
<li>如果会话关闭，这个会话对应的一级缓存就被清除了</li>
<li>但是如果开启了二级缓存，会话关闭后，缓存的数据可以被保存在二级缓存中</li>
<li>新的会话查询就可以从二级缓存中获取内容</li>
</ul>
<h4 id="（5）自定义缓存（ehcache）"><a href="#（5）自定义缓存（ehcache）" class="headerlink" title="（5）自定义缓存（ehcache）"></a>（5）自定义缓存（ehcache）</h4><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="1-初识Spring"><a href="#1-初识Spring" class="headerlink" title="1.初识Spring"></a>1.初识Spring</h3><h4 id="（1）Spring简介"><a href="#（1）Spring简介" class="headerlink" title="（1）Spring简介"></a>（1）Spring简介</h4><p>Spring是针对企业级开发的框架，是技术使用更将方便，整合了现有的技术框架</p>
<ul>
<li>SSH：Struct2 + Spring + Hibernate</li>
<li>SSM：SpringMCV + Spring + Mybatis</li>
</ul>
<h4 id="（2）-Spring优点"><a href="#（2）-Spring优点" class="headerlink" title="（2） Spring优点"></a>（2） Spring优点</h4><ul>
<li>轻量级，非入侵式</li>
<li>开源的免费框架</li>
<li>控制反转（IOC），面向切面（AOP）编程</li>
<li>支持事物处理，对框架整合的支持</li>
</ul>
<h4 id="（3）Spring组成"><a href="#（3）Spring组成" class="headerlink" title="（3）Spring组成"></a>（3）Spring组成</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040933389.png" alt="image-20210604151457606"></p>
<h4 id="（4）扩展"><a href="#（4）扩展" class="headerlink" title="（4）扩展"></a>（4）扩展</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040933978.png" alt="image-20210604151952837"></p>
<p><strong>Spring Boot</strong></p>
<ul>
<li>一个快速开发的脚手架</li>
<li>基于SpringBoot可以快速的开发单个微服务。</li>
<li>约定大于配置</li>
</ul>
<p><strong>Spring Cloud</strong></p>
<ul>
<li>SpringCloud是基于SpringBoot实现的</li>
</ul>
<h3 id="2-IOC理论推导"><a href="#2-IOC理论推导" class="headerlink" title="2.IOC理论推导"></a>2.IOC理论推导</h3><h4 id="（1）经典Java应用分层"><a href="#（1）经典Java应用分层" class="headerlink" title="（1）经典Java应用分层"></a>（1）经典Java应用分层</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040933172.png" alt="image-20210604153048214"></p>
<h4 id="（2）控制反转的思想"><a href="#（2）控制反转的思想" class="headerlink" title="（2）控制反转的思想"></a>（2）控制反转的思想</h4><p>程序不在主动创建对象，而是被动的接受对象（控制权从程序转移到用户）。反转了，我们不负责创建对象，我们只被动处理对象</p>
<p><strong>反转前：</strong>用户只能使用我们准备好的对象，有其他需求我们要额外新增修改</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934924.png" alt="image-20210604154725356"></p>
<p><strong>反转后：</strong>用户可以任意创建对象，我们只负责去处理这些类</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934307.png" alt="image-20210604154631248"></p>
<h4 id="（3）IOC本质"><a href="#（3）IOC本质" class="headerlink" title="（3）IOC本质"></a>（3）IOC本质</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934274.png" alt="image-20210604155144289"></p>
<p>IOC就是为了解耦，让各个对象的依赖关系减弱</p>
<p>控制反转是一种通过描述（xml或注解）并通过第三方去生产或获取特定对象的方式。在Spring中，实现控制反转的loC容器，其实现方法就是依赖注入（DI）</p>
<h3 id="3-Spring初体验"><a href="#3-Spring初体验" class="headerlink" title="3.Spring初体验"></a>3.Spring初体验</h3><h4 id="（1）xml法"><a href="#（1）xml法" class="headerlink" title="（1）xml法"></a>（1）xml法</h4><ul>
<li>配置元数据：使用Spring创建对象，在Spring中称为bean </li>
<li>bean相当于new了一个对象</li>
<li>获取spring的上下文对象，从xml提取出对象</li>
<li>IOC变成实现：由主动编程变为被动接收</li>
<li>所谓IOC就是对象由Spring来创建，管理，装配</li>
</ul>
<h4 id="（2）IOC创建对象的方式"><a href="#（2）IOC创建对象的方式" class="headerlink" title="（2）IOC创建对象的方式"></a>（2）IOC创建对象的方式</h4><ul>
<li>无参构造（默认方法）</li>
<li>有参构造：<ul>
<li>下标赋值</li>
<li>类型赋值（不建议使用）</li>
<li>参数名赋值</li>
</ul>
</li>
<li>在配置XML文件加载的时候，容器中管理的对象就已经初始化了，即使在没有getbean这个对象，但是其已经在Spring容器中创建</li>
</ul>
<h3 id="4-Spring配置"><a href="#4-Spring配置" class="headerlink" title="4.Spring配置"></a>4.Spring配置</h3><h4 id="（1）别名"><a href="#（1）别名" class="headerlink" title="（1）别名"></a>（1）别名</h4><p>​    除了对象名，我们也可以起小名来找到这个对象</p>
<h4 id="（2）Bean的配置"><a href="#（2）Bean的配置" class="headerlink" title="（2）Bean的配置"></a>（2）Bean的配置</h4><ul>
<li>id：bean的唯一标识符，也就是相当于我们学的对象名 </li>
<li>class：bean对象所对应的全限定名：包名+类名    </li>
<li>name：也是别名，而且name可以同时取多个别名</li>
</ul>
<h4 id="（3）import"><a href="#（3）import" class="headerlink" title="（3）import"></a>（3）import</h4><p>​    用于不同人开发的bean.xml文件合并在一起</p>
<h4 id="（4）Bean与Spring容器的关系"><a href="#（4）Bean与Spring容器的关系" class="headerlink" title="（4）Bean与Spring容器的关系"></a>（4）Bean与Spring容器的关系</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934089.png" alt="image-20210604163430319"></p>
<h3 id="5-依赖注入"><a href="#5-依赖注入" class="headerlink" title="5.依赖注入"></a>5.依赖注入</h3><h4 id="（1）-构造器注入"><a href="#（1）-构造器注入" class="headerlink" title="（1） 构造器注入"></a>（1） 构造器注入</h4><p>当实体对象有有参构造方法的时候，需要使用构造器注入construct-args</p>
<h4 id="（2）Set方式注入"><a href="#（2）Set方式注入" class="headerlink" title="（2）Set方式注入"></a>（2）Set方式注入</h4><ul>
<li><p>依赖：bean对象的创建依赖于容器</p>
</li>
<li><p>注入：bean对象中的所有属性，由容器来注入</p>
</li>
<li><p>普通型注入：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种：普通值注入，value        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黑心白莲&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Bean注入（注入另一对象实体，其也需要在bean中注册）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种：--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>数组型注入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数组        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>List型注入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>打篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Map型注入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456789987456321&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;359419496419481649&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Set型注入</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Set        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>NULL型注入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--NULL        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Properties型注入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Properties        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>20191029<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>102.0913.524.4585<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;user&quot;</span>&gt;</span>黑心白莲<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="（3）其他注入方式"><a href="#（3）其他注入方式" class="headerlink" title="（3）其他注入方式"></a>（3）其他注入方式</h4><p>可以使用p命名空间和c命名空间进行注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--p命名空间注入，可以直接注入属性的值：property--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;黑心白莲&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--c命名空间注入，通过构造器注入：constructor-args--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;狂神&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;22&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="6-Bean解析"><a href="#6-Bean解析" class="headerlink" title="6.Bean解析"></a>6.Bean解析</h3><h4 id="（1）Bean的作用域"><a href="#（1）Bean的作用域" class="headerlink" title="（1）Bean的作用域"></a>（1）Bean的作用域</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934289.png" alt="image-20210605114941989"></p>
<p>Spring默认使用单例模式（singleton）</p>
<h4 id="（2）Bean的自动装配"><a href="#（2）Bean的自动装配" class="headerlink" title="（2）Bean的自动装配"></a>（2）Bean的自动装配</h4><ul>
<li>手动装配：每一个属性都要自己去设置</li>
<li>自动装配是Spring满足bean依赖一种方式</li>
<li>Spring会在上下文中自动寻找，并自动给bean装配属性（）</li>
</ul>
<p><strong>自动装配类型：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934247.png" alt="image-20210605115608244"></p>
<ul>
<li>byName:   会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id；</li>
<li>byType：会自动在容器上下文中查找，和自己对象属性类型相同的bean；</li>
</ul>
<h3 id="7-使用注解开发"><a href="#7-使用注解开发" class="headerlink" title="7.使用注解开发"></a>7.使用注解开发</h3><h4 id="（1）注解配置"><a href="#（1）注解配置" class="headerlink" title="（1）注解配置"></a>（1）注解配置</h4><ul>
<li>导入约束</li>
<li>配置注解的支持： <code>&lt;context:annotation-config/&gt;</code></li>
</ul>
<h4 id="（2）-Autowired注解"><a href="#（2）-Autowired注解" class="headerlink" title="（2）@Autowired注解"></a>（2）@Autowired注解</h4><ul>
<li>可以在属性或者set方法上使用</li>
<li>使用Autowired方法就可以不用编写set方法（但是需要使用自动装配，且符合命名ByName）</li>
</ul>
<p><strong>不使用注解：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p><strong>使用注解：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果显式定义了Autowired的required属性为false，说明这个对象可以为null，否则不允许为空</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// set的方法都被省略掉了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="（3）-Qualifier注解"><a href="#（3）-Qualifier注解" class="headerlink" title="（3）@Qualifier注解"></a>（3）@Qualifier注解</h4><ul>
<li><p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解【@Autowired】完成的时候，我们可以使用@Qualifier(value = “xxx”)去配置@Autowired的使用，指定一个唯一的bean对象注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;cat111&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;dog222&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="（4）-Resource注解"><a href="#（4）-Resource注解" class="headerlink" title="（4）@Resource注解"></a>（4）@Resource注解</h4><p>@Resource和@Autowired的区别：</p>
<ul>
<li>都是用来自动装配的，都可以放在属性字段上</li>
<li>@Autowired通过byType的方式实现，而且必须要求这个对象存</li>
<li>@Resource默认通过byName的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错</li>
<li>执行顺序不同：@Autowired通过byType的方式实现。</li>
</ul>
<h4 id="（5）使用注解开发"><a href="#（5）使用注解开发" class="headerlink" title="（5）使用注解开发"></a>（5）使用注解开发</h4><p><strong>属性注入：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//等价于&lt;bean id=&quot;user&quot;class=&quot;com.kuang.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="comment">//@Component 组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于  &lt;property name=&quot;name&quot; value=&quot;白莲&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;白莲&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>衍生的注解：</strong></p>
<p>@Component有几个衍生的注解，按照mvc三层架构分层</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dao 【@Repository】</span><br><span class="line">service 【@Service】</span><br><span class="line">controller 【@Controller】</span><br></pre></td></tr></table></figure>



<p><strong>自动装配：</strong></p>
<ul>
<li>@Autowired：自动装配通过类型，名字。如果Autowired不能唯一自动装配上属性，则需要通过@Qualifier(value = “xxx”)去配置。 </li>
<li>@Nullable 字段标记了了这个注解，说明这个字段可以为null; </li>
<li>@Resource：自动装配通过名字，类型</li>
</ul>
<h4 id="（6）注解与xml"><a href="#（6）注解与xml" class="headerlink" title="（6）注解与xml"></a>（6）注解与xml</h4><ul>
<li>xml更加万能，适用于任何场合，维护简单方便</li>
<li>注解不是自己类使用不了，维护相对复杂</li>
<li>最佳的实践是：注解只负责完成属性的注入，xml用来管理bean</li>
</ul>
<h3 id="8-Java配置Spring"><a href="#8-Java配置Spring" class="headerlink" title="8.Java配置Spring"></a>8.Java配置Spring</h3><p>完全抛弃xml配置，采用JavaConfig来配置Spring</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个也会Spring容器托管，注册到容器中，因为它本来就是一个@Component</span></span><br><span class="line"><span class="comment">// @Configuration代表这是一个配置类，就和我们之前看的beans.xml</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.autovy.pojo&quot;)</span></span><br><span class="line"><span class="meta">@Import(AutovyConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutovyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册一个bean，就相当于我们之前写的一个bean标签</span></span><br><span class="line">    <span class="comment">// 这个方法的名字，就相当于bean标签中id属性</span></span><br><span class="line">    <span class="comment">// 这个方法的返回值，就相当于bean标签中的class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> user(); <span class="comment">// 就是返回要注入到bean的对象！</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="9-代理模式"><a href="#9-代理模式" class="headerlink" title="9.代理模式"></a>9.代理模式</h3><p>真实角色通过他们的替身——代理对象进行交流</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934761.png" alt="image-20210605150430423"></p>
<h4 id="（1）静态代理"><a href="#（1）静态代理" class="headerlink" title="（1）静态代理"></a>（1）静态代理</h4><p><strong>角色分析：</strong></p>
<ul>
<li>抽象角色：一般会使用接口或者抽象类来解决</li>
<li>真实角色：被代理的角色</li>
<li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作</li>
<li>客户：访问代理对象的人！</li>
</ul>
<p><strong>实现过程：</strong></p>
<ul>
<li>代理对象组合目标对象，并帮忙为目标对象实现接口的附加方法</li>
<li>客户只需要访问代理对象即可</li>
</ul>
<p><strong>代理模式好处：</strong></p>
<ul>
<li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li>
<li>公共角色就交给代理角色！实现了业务的分工</li>
<li>公共业务发生扩展的时候，方便集中管理！</li>
<li>一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低</li>
</ul>
<h4 id="（2）动态代理"><a href="#（2）动态代理" class="headerlink" title="（2）动态代理"></a>（2）动态代理</h4><p>动态代理的代理类是自动生成的，可以分为：基于接口的动态代理（JDK动态代理），基于类的动态代理（cglib）两种</p>
<h4 id><a href="#" class="headerlink" title></a></h4><p><strong>动态代理的好处：</strong></p>
<ul>
<li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li>
<li>公共角色就交给代理角色！实现了业务的分工！</li>
<li>公共业务发生扩展的时候，方便集中管理！</li>
<li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li>
<li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可</li>
</ul>
<h3 id="10-AOP详解"><a href="#10-AOP详解" class="headerlink" title="10.AOP详解"></a>10.AOP详解</h3><h4 id="（1）AOP实现机制"><a href="#（1）AOP实现机制" class="headerlink" title="（1）AOP实现机制"></a>（1）AOP实现机制</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934449.png" alt="image-20210605153837739"></p>
<h4 id="（2）AOP简介"><a href="#（2）AOP简介" class="headerlink" title="（2）AOP简介"></a>（2）AOP简介</h4><ul>
<li>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术</li>
<li>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934769.png" alt="image-20210605153954045"></p>
<h4 id="（3）AOP在Spring中"><a href="#（3）AOP在Spring中" class="headerlink" title="（3）AOP在Spring中"></a>（3）AOP在Spring中</h4><p>AOP在不改变原有代码的情况下，增加新的功能</p>
<p>有三种实现方法：</p>
<ul>
<li>Spring的API接口实现</li>
<li>自定义类来实现AOP</li>
<li>使用注解实现</li>
</ul>
<h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><h3 id="1-MCV解析"><a href="#1-MCV解析" class="headerlink" title="1.MCV解析"></a>1.MCV解析</h3><h4 id="（1）MCV简介"><a href="#（1）MCV简介" class="headerlink" title="（1）MCV简介"></a>（1）MCV简介</h4><ul>
<li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范</li>
<li>最典型的MVC就是JSP（视图） + servlet（控制器） + javabean（模型）的模式</li>
<li>Model：提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务</li>
<li>View：负责进行模型的展示，即用户界面</li>
<li>Controller：接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示</li>
</ul>
<h4 id="（2）MCV架构图"><a href="#（2）MCV架构图" class="headerlink" title="（2）MCV架构图"></a>（2）MCV架构图</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934521.png" alt="image-20210605210445145"></p>
<p><strong>Model1时代：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934842.png" alt="image-20210605210725858"></p>
<p><strong>Model2时代：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934260.png" alt="image-20210605210745980"></p>
<h4 id="（3）MVC框架的工作"><a href="#（3）MVC框架的工作" class="headerlink" title="（3）MVC框架的工作"></a>（3）MVC框架的工作</h4><ul>
<li>将url映射到java类或java类的方法 .</li>
<li>封装用户提交的数据 .</li>
<li>处理请求–调用相关的业务处理–封装响应数据 .</li>
<li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li>
</ul>
<h3 id="2-初识Spring-MCV"><a href="#2-初识Spring-MCV" class="headerlink" title="2.初识Spring MCV"></a>2.初识Spring MCV</h3><h4 id="（1）Spring-MCV简介"><a href="#（1）Spring-MCV简介" class="headerlink" title="（1）Spring MCV简介"></a>（1）Spring MCV简介</h4><p>spring mcv特点：</p>
<ul>
<li>轻量级，简单易学</li>
<li>高效 , 基于请求响应的MVC框架</li>
<li>与Spring兼容性好，无缝结合</li>
<li>约定优于配置</li>
<li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li>
<li>简洁灵活</li>
</ul>
<h4 id="（2）Spring-MCV中心控制器"><a href="#（2）Spring-MCV中心控制器" class="headerlink" title="（2）Spring MCV中心控制器"></a>（2）Spring MCV中心控制器</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934228.png" alt="image-20210605211539442"></p>
<p>Spring MCV  以请求为驱动 , 围绕一个中心Servlet分派请求及提供其他功能，而这个中心就是<strong>DispatcherServlet</strong>(它是继承自HttpServlet 基类)</p>
<h3 id="3-Spring-MCV处理流程"><a href="#3-Spring-MCV处理流程" class="headerlink" title="3.Spring MCV处理流程"></a>3.Spring MCV处理流程</h3><h4 id="（1）Spring-MCV处理流程"><a href="#（1）Spring-MCV处理流程" class="headerlink" title="（1）Spring MCV处理流程"></a>（1）Spring MCV处理流程</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934444.png" alt="image-20210605212007518"></p>
<p>更加详细的展示如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934219.png" alt="image-20210606152658001"></p>
<p>图上的连线表示SpringMVC框架已提供的技术，而需要进行开发的部分有：</p>
<ul>
<li>Handler处理器到数据库的部分</li>
<li>Handler处理器到模型的部分</li>
<li>视图到模型的部分</li>
<li>视图解析器到视图的部分</li>
</ul>
<h4 id="（2）Spring-MCV处理流程代码实现（配置版）"><a href="#（2）Spring-MCV处理流程代码实现（配置版）" class="headerlink" title="（2）Spring MCV处理流程代码实现（配置版）"></a>（2）Spring MCV处理流程代码实现（配置版）</h4><ul>
<li>编写配置文件</li>
<li>注册DispatcherServlet</li>
<li>添加处理映射器</li>
<li>添加处理适配器</li>
<li>添加视图解析器</li>
<li>编写业务Controller，返回ModelAndView（装数据，封视图）</li>
<li>将Controllor类注册到bean，形成映射</li>
<li>视图渲染显示ModellandView存放的数据</li>
</ul>
<h4 id="（3）Spring-MCV处理流程代码实现（注解版）"><a href="#（3）Spring-MCV处理流程代码实现（注解版）" class="headerlink" title="（3）Spring MCV处理流程代码实现（注解版）"></a>（3）Spring MCV处理流程代码实现（注解版）</h4><ul>
<li><p>实现步骤：</p>
<ul>
<li>新建一个web项目</li>
<li>导入相关jar包</li>
<li>编写web.xml , 注册DispatcherServlet</li>
<li>编写springmvc配置文件</li>
<li>接下来就是去创建对应的控制类 , controller</li>
<li>最后完善前端视图和controller之间的对应</li>
<li>测试运行调试.</li>
</ul>
</li>
<li><p>配置相关：使用springMVC必须配置的三大件：处理器映射器、处理器适配器、视图解析器</p>
</li>
<li><p>通常，我们只需要手动配置视图解析器，而处理器映射器和处理器适配器只需要开启注解驱动即可，而省去了大段的xml配置</p>
</li>
<li><p>解决Maven资源过滤的问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>在pom.xml文件引入相关的依赖</p>
<p>主要有Spring框架核心库、Spring MVC、servlet , JSTL等</p>
</li>
</ul>
<ul>
<li>配置web.xml<ul>
<li>注意web.xml版本问题，要最新版！</li>
<li>注册DispatcherServlet</li>
<li>关联SpringMVC的配置文件</li>
<li>启动级别为1</li>
<li>映射路径为 / 【不要用/*，会404】</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>添加Spring MVC配置文件<ul>
<li>让IOC的注解生效</li>
<li>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …..</li>
<li>MVC的注解驱动</li>
<li>配置视图解析器</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让Spring MVC不处理静态资源 过滤掉一些静态资源，如.css  .js  .html .mp3--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">支持mvc注解驱动</span></span><br><span class="line"><span class="comment">    在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">    要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">    必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">    和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">    这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">    而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问</p>
<ul>
<li><p>创建Controller</p>
<p>使用注解编写控制类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span><span class="comment">//多添加一级访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//真实访问地址 : 项目名/HelloController/hello</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span><span class="comment">//请求路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello,SpringMVC，我是成博&quot;</span>);</span><br><span class="line">        <span class="comment">//会被视图解析器处理，web-inf/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li>
<li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li>
<li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li>
<li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp</li>
</ul>
</li>
</ul>
<ul>
<li><p>创建视图层</p>
<p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="4-Controller的定义"><a href="#4-Controller的定义" class="headerlink" title="4.Controller的定义"></a>4.Controller的定义</h3><h4 id="（1）实现接口Controller定义控制器法"><a href="#（1）实现接口Controller定义控制器法" class="headerlink" title="（1）实现接口Controller定义控制器法"></a>（1）实现接口Controller定义控制器法</h4><p>该方法是较老的方法，而且定义方式比较麻烦，已不再广泛使用</p>
<h4 id="（2）使用注解-Controller法"><a href="#（2）使用注解-Controller法" class="headerlink" title="（2）使用注解@Controller法"></a>（2）使用注解@Controller法</h4><p>@Controller注解类型用于声明Spring类的实例是一个控制器</p>
<p>为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-RestFul-风格"><a href="#5-RestFul-风格" class="headerlink" title="5.RestFul 风格"></a>5.RestFul 风格</h3><h4 id="（1）功能介绍"><a href="#（1）功能介绍" class="headerlink" title="（1）功能介绍"></a>（1）功能介绍</h4><ul>
<li>资源：互联网所有的事物都可以被抽象为资源</li>
<li>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</li>
<li>分别对应 添加、 删除、修改、查询</li>
</ul>
<p>（2）@PathVariable 注解</p>
<p>@PathVariable 注解，可以让方法参数的值对应绑定到一个URL模板变量上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//原来的 :  http://localhost: 8080/add?a=1&amp;b=2</span></span><br><span class="line">    <span class="comment">//RestFul :  http://localhost : 8080/add/1/2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//映射访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> p1, <span class="meta">@PathVariable</span> <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">        <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">        <span class="comment">//返回视图位置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="（2）指定请求类型"><a href="#（2）指定请求类型" class="headerlink" title="（2）指定请求类型"></a>（2）指定请求类型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们还可以使用组合注解指定请求类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@PatchMapping</span></span><br></pre></td></tr></table></figure>



<h3 id="6-SpringMVC的结果跳转"><a href="#6-SpringMVC的结果跳转" class="headerlink" title="6.SpringMVC的结果跳转"></a>6.SpringMVC的结果跳转</h3><h4 id="（1）ModelAndView"><a href="#（1）ModelAndView" class="headerlink" title="（1）ModelAndView"></a>（1）ModelAndView</h4><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p>
<p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p>
<h4 id="（2）ServletAPI"><a href="#（2）ServletAPI" class="headerlink" title="（2）ServletAPI"></a>（2）ServletAPI</h4><p>通过设置ServletAPI , 不需要视图解析器 .</p>
<ul>
<li>通过HttpServletResponse进行输出</li>
<li>通过HttpServletResponse实现重定向</li>
<li>通过HttpServletResponse实现转发</li>
</ul>
<h4 id="（3）SpringMVC"><a href="#（3）SpringMVC" class="headerlink" title="（3）SpringMVC"></a>（3）SpringMVC</h4><ul>
<li>通过SpringMVC来实现转发和重定向 - 无需视图解析器</li>
<li>通过SpringMVC来实现转发和重定向 - 有视图解析器</li>
</ul>
<h3 id="7-数据处理"><a href="#7-数据处理" class="headerlink" title="7.数据处理"></a>7.数据处理</h3><h4 id="（1）处理提交的数据"><a href="#（1）处理提交的数据" class="headerlink" title="（1）处理提交的数据"></a>（1）处理提交的数据</h4><ul>
<li><p>提交的域名称和处理方法的参数名一致</p>
<p>提交数据 : <code>[http://localhost](http://localhost/):8080/hello?name=test</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>提交的域名称和处理方法的参数名不一致</p>
<p>提交数据：<code>[http://localhost](http://localhost/):8080/hello?username=test</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交的是一个对象</p>
<p>如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null</p>
<p>提交数据：<code>http://localhost:8080/user?name=test&amp;id=1&amp;age=15</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="（2）数据显示到前端"><a href="#（2）数据显示到前端" class="headerlink" title="（2）数据显示到前端"></a>（2）数据显示到前端</h4><ul>
<li>通过ModelAndView：可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转</li>
<li>通过ModelMap：继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性</li>
<li>通过Model：只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解</li>
<li>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>Java</tag>
        <tag>框架学习</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|面向对象学习</title>
    <url>/2021/01/31/Java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040939004.png" alt="image-20210904093908758"></p>
<span id="more"></span>

<h4 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h4><h5 id="1-class和instance"><a href="#1-class和instance" class="headerlink" title="1.class和instance"></a>1.class和instance</h5><p>class即类，instance即实例。</p>
<p>class是一种对象模版，它定义了如何创建实例，因此，class本身就是一种数据类型；</p>
<p>而instance是对象实例，instance是根据class创建的实例，可以创建多个instance，每个instance类型相同，但各自属性可能不相同。</p>
<h5 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个city类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建类的字段即属性</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> lattitude;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> longitude;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">oop1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建实例frist</span></span><br><span class="line">        City frist = <span class="keyword">new</span> City();</span><br><span class="line">        <span class="comment">// 对实例的属性赋值</span></span><br><span class="line">        frist.name = <span class="string">&quot;shanghai&quot;</span>;</span><br><span class="line">        frist.lattitude = <span class="number">11</span>;</span><br><span class="line">        frist.longitude = <span class="number">111</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问实例属性并打印</span></span><br><span class="line">        System.out.println(frist.name);</span><br><span class="line">        System.out.println(frist.lattitude);</span><br><span class="line">        System.out.println(frist.longitude);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-实例讲解"><a href="#3-实例讲解" class="headerlink" title="3. 实例讲解"></a>3. 实例讲解</h5><ul>
<li>City类中包含了3个字段（field，有些语言叫做属性），通过class我们实现了数据的封装</li>
<li>public可以用来修饰方法和字段，表示其可以被外部访问</li>
<li>创建实例用new，用Class名作为实例的数据类型</li>
<li>访问实例属性时可以用<code>变量.字段</code>的形式，但是如果用private修饰了该属性则会报错</li>
</ul>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="1-方法的引入"><a href="#1-方法的引入" class="headerlink" title="1.方法的引入"></a>1.方法的引入</h5><p>上一级中，我们直接把属性用<code>public</code>修饰，把属性暴露给外部可能会破坏封装性。所以我们往往采用<code>private</code>修饰属性，然后通过<strong>方法</strong>来读取属性赋值</p>
<h5 id="2-参数绑定"><a href="#2-参数绑定" class="headerlink" title="2.参数绑定"></a>2.参数绑定</h5><p>基本类型参数的传递，是调用方值的复制。双方各自的后续修改，互不影响</p>
<h5 id="3-实例"><a href="#3-实例" class="headerlink" title="3.实例"></a>3.实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">opp2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person Jhon = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">// 调用实例的方法</span></span><br><span class="line">        Jhon.setBirth(<span class="number">2000</span>);</span><br><span class="line">        System.out.println(Jhon.getage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义私有属性，外部不可调用</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> birth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this永远指向当前实例，从而达到赋值的目的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(<span class="keyword">int</span> birth)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 调用类内部私有的方法</span></span><br><span class="line">        <span class="keyword">return</span> calcAge(<span class="number">2020</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法，仅允许类内部调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calcAge</span><span class="params">(<span class="keyword">int</span> currentYear)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentYear - <span class="keyword">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="4-实例讲解"><a href="#4-实例讲解" class="headerlink" title="4.实例讲解"></a>4.实例讲解</h5><ul>
<li><code>public int getage()</code>该语句中，<code>public</code>用于修饰方法是否供外部调用，<code>int</code>则是该方法的返回数据类型</li>
<li>通过<code>this.field</code>就可以访问当前实例的字段，如果命名没有冲突实际上可以省略<code>this</code></li>
<li><code>this.birth = birth</code>前一个<code>birth</code>指向实例的一个属性，后一个<code>birth</code>则是外部传入的参数，因为命名重复，所以要用this修饰</li>
</ul>
<h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h5 id="1-构造方法应用"><a href="#1-构造方法应用" class="headerlink" title="1.构造方法应用"></a>1.构造方法应用</h5><p>创建对象实例时，我们可以使用构造方法让内部字段初始化，其相当于类内部一个和类同名的特殊的方法。</p>
<h5 id="2-默认构造方法"><a href="#2-默认构造方法" class="headerlink" title="2.默认构造方法"></a>2.默认构造方法</h5><p>如果一个类没有定义构造方法，编译器会为我们生成一个默认的构造方法，因而我们可以在<code>new Person()</code>调用</p>
<p>如果我们自定义了一个构造方法，那么默认的构造方法将不会被创建</p>
<h5 id="3-实例-1"><a href="#3-实例-1" class="headerlink" title="3.实例"></a>3.实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">opp3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用构造方法</span></span><br><span class="line">        Person2 ming = <span class="keyword">new</span> Person2(<span class="string">&quot;小明&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        System.out.println(ming.getAge());</span><br><span class="line">        System.out.println(ming.getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 创建构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person2</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><h5 id="1-方法重载介绍"><a href="#1-方法重载介绍" class="headerlink" title="1.方法重载介绍"></a>1.方法重载介绍</h5><p>在一个类中，如果存在一系列的方法功能方法名一样，但是参数不同。这种方法名相同，但各自的参数不同，称为方法重载（Overload）</p>
<p>方法重载参数不同，但是返回值类型通常相同</p>
<h5 id="2-实例-1"><a href="#2-实例-1" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">opp4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person4 ming = <span class="keyword">new</span> Person4();</span><br><span class="line">        ming.setName(<span class="string">&quot;xiao&quot;</span>, <span class="string">&quot;ming&quot;</span>);</span><br><span class="line">        System.out.println(ming.getname());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person4</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getname</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setname</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String fname, String lname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = fname + lname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="1-继承的应用"><a href="#1-继承的应用" class="headerlink" title="1.继承的应用"></a>1.继承的应用</h5><p>通过继承子类可以获得父类的所有功能，还可以在父类基础上编写额外的功能。</p>
<p>类自动获得了父类的所有字段，严禁定义与父类重名的字段</p>
<p>父类又可以称为超类，基类</p>
<p>子类又可以称为扩展类</p>
<h5 id="2-继承树"><a href="#2-继承树" class="headerlink" title="2.继承树"></a>2.继承树</h5><p>除了object外，任何类都会继承于某个类，一个子类只能有一个父类，一个父类允许存在多个子类</p>
<h5 id="3-protected与private"><a href="#3-protected与private" class="headerlink" title="3.protected与private"></a>3.protected与private</h5><p>如果父类中的属性或方法是<code>private</code>修饰，子类同样也是无法访问到的，这时我们可以使用protected修饰，可以把属性和方法的权限控制在继承树内部</p>
<h5 id="4-子类的构造方法"><a href="#4-子类的构造方法" class="headerlink" title="4.子类的构造方法"></a>4.子类的构造方法</h5><p>子类是无法继承父类的任何构造方法的，编译器会自动为我们添加<code>super()</code>来调用父类的构造方法，故若是父类存在带参数的构造方法，要手动在子类中调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="number">12</span>, <span class="number">89</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的构造方法Person(String, int)</span></span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="7-向上转型与向下转型"><a href="#7-向上转型与向下转型" class="headerlink" title="7.向上转型与向下转型"></a>7.向上转型与向下转型</h5><p>（1）向上转型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果一个引用变量的类型是Student，那么它可以指向一个Student类型的实例</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">// 一个引用类型为Person的变量同样可以指向Student类型的实例</span></span><br><span class="line">Person p = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure>

<p>这种把一个子类类型安全地变为父类类型的赋值，被称为向上转型（upcasting）</p>
<p>注意到继承树是<code>Student &gt; Person &gt; Object</code>，所以，可以把<code>Student</code>类型转型为<code>Person</code>，或者更高层次的<code>Object</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Student s &#x3D; new Student();</span><br><span class="line">Person p &#x3D; s; </span><br><span class="line">Object o1 &#x3D; p;</span><br><span class="line">Object o2 &#x3D; s;</span><br></pre></td></tr></table></figure>



<p>（2）向下转型</p>
<p>如果把一个父类类型强制转型为子类类型，就是向下转型（downcasting）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Student();</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 向下转型成功，因为p1虽然变量类型是Person，实际内容是子类，故能转型成功</span></span><br><span class="line">Student s1 = (Student) p1; </span><br><span class="line"><span class="comment">// 向下转型失败，实际内容是父类，不能由父类转向子类</span></span><br><span class="line">Student s2 = (Student) p2; </span><br></pre></td></tr></table></figure>



<h5 id="6-实例"><a href="#6-实例" class="headerlink" title="6.实例"></a>6.实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;小红&quot;</span>, <span class="number">20</span>, <span class="number">99</span>);</span><br><span class="line">        <span class="comment">// 定义PrimaryStudent，从Student继承，新增grade字段:</span></span><br><span class="line">        Student ps = <span class="keyword">new</span> PrimaryStudent(<span class="string">&quot;小军&quot;</span>, <span class="number">9</span>, <span class="number">100</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(ps.getScore());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> score; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimaryStudent</span> <span class="keyword">extends</span> <span class="title">Student</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> grade;</span><br><span class="line">   	<span class="function"><span class="keyword">public</span> <span class="title">PrimaryStudent</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score, <span class="keyword">int</span> grade)</span></span>&#123;</span><br><span class="line">       <span class="comment">// 调用Student的构造函数 </span></span><br><span class="line">       <span class="keyword">super</span>(name, age, score);</span><br><span class="line">       <span class="keyword">this</span>.grade = grade;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><h5 id="1-覆写"><a href="#1-覆写" class="headerlink" title="1.覆写"></a>1.覆写</h5><p>子类中不能存在与父类重名的属性，但子类可以覆写父类的方法，覆写方法时方法名和返回类型要相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">   	<span class="comment">// 加上@Override 可以让编译器帮助检查是否正确覆写</span></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String s)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-多态"><a href="#2-多态" class="headerlink" title="2.多态"></a>2.多态</h5><p>Java的实例方法调用是基于运行时的实际类型的动态调用（<code>new Student()</code>），而非变量的声明类型（<code>Person</code>）</p>
<p>多态是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法</p>
<p>多态具有一个强大的功能——允许添加更多类型的子类实现功能扩展，却不需要修改基于父类的代码</p>
<h5 id="3-实例-2"><a href="#3-实例-2" class="headerlink" title="3.实例"></a>3.实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数组存储两部分的税收</span></span><br><span class="line">        Income[] incomes = <span class="keyword">new</span> Income[] &#123;</span><br><span class="line">            <span class="keyword">new</span> Income(<span class="number">3000</span>),</span><br><span class="line">            <span class="keyword">new</span> Salary(<span class="number">7500</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(totalTax(incomes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">totalTax</span><span class="params">(Income... incomes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 此处的循环中income的实际指向可以动态改变（Income/Salary）</span></span><br><span class="line">        <span class="comment">// getTax由于子类的多态实际上调用的方法不同</span></span><br><span class="line">        <span class="keyword">for</span> (Income income: incomes) &#123;</span><br><span class="line">            total = total + income.getTax();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> income;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Income</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.income = income;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> income * <span class="number">0.1</span>; <span class="comment">// 税率10%</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Salary</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(income);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 重写父类的得税方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (income &lt;= <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (income - <span class="number">5000</span>) * <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-多态补充"><a href="#4-多态补充" class="headerlink" title="4.多态补充"></a>4.多态补充</h5><p>（1）调用父类中被覆写的方法用<code>super</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student extends Person &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的hello()方法:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hello() + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（2）final修饰可以防止方法被子类覆写如：<code>public final String hello()</code></p>
<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><h5 id="1-面向抽象编程"><a href="#1-面向抽象编程" class="headerlink" title="1.面向抽象编程"></a>1.面向抽象编程</h5><p>抽象类和其中的抽象方法本身是无法执行的，其强制了子类必须实现其定义的抽象方法，即相当于定义了一个规范</p>
<p>这种引用高层类型，避免引用子类型的方式，称为面向抽象编程</p>
<p>有以下优点：</p>
<ul>
<li>上层代码只定义规范（例如：<code>abstract class Person</code>）；</li>
<li>不需要子类就可以实现业务逻辑（正常编译）；</li>
<li>具体的业务逻辑由不同的子类实现，调用者并不关心</li>
</ul>
<h5 id="2-实例-2"><a href="#2-实例-2" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        p.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student.run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><h5 id="1-接口介绍"><a href="#1-接口介绍" class="headerlink" title="1.接口介绍"></a>1.接口介绍</h5><p>接口（interface）中没有字段，接口中定义的所有方法默认为<code>public abstract</code></p>
<h5 id="2-接口实现"><a href="#2-接口实现" class="headerlink" title="2.接口实现"></a>2.接口实现</h5><p>当用一个具体的class实现一个interface时，需要用到implements关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类实现接口，一个类只能继承一个类，但是可以实现多个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">&quot; run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-接口继承"><a href="#3-接口继承" class="headerlink" title="3.接口继承"></a>3.接口继承</h5><p>接口也可以通过继承扩展</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h4><h5 id="1-静态字段"><a href="#1-静态字段" class="headerlink" title="1.静态字段"></a>1.静态字段</h5><p>class中定义的字段我们称为实例字段，其一般有着独立性，各个实例间互不影响</p>
<p>但是如果我们用<code>static</code>一个静态修饰一个字段，那么所有的实例都会共享这个字段的空间</p>
<p>对于静态字段，我们无论修改哪个实例，所有实例的静态字段都会改动</p>
<p>我们往往采用<code>类名.静态字段</code>访问静态对象，如:<code>Person.number = 99;</code></p>
<h5 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2.静态方法"></a>2.静态方法</h5><p>静态方法可以通过类名直接调用，不需要一个实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person.setNumber(<span class="number">99</span>);</span><br><span class="line">        System.out.println(Person.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个静态方法，因为静态方法不存在实例，所以无法访问this变量（不能用this）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        number = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-接口的静态字段"><a href="#3-接口的静态字段" class="headerlink" title="3.接口的静态字段"></a>3.接口的静态字段</h5><p>因为接口是一个纯抽象类，所以它不能定义实例字段，但是可以有静态字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 编译器会自动加上public statc final:</span></span><br><span class="line">    <span class="keyword">int</span> MALE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> FEMALE = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><p>位于同一个包的类，可以访问包作用域的字段和方法。不用<code>public</code>、<code>protected</code>、<code>private</code>修饰的字段和方法就是包作用域</p>
<p>可以用import语句导入其他包的class</p>
<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>可参考：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260466215676512">https://www.liaoxuefeng.com/wiki/1252599548343744/1260466215676512</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>Java</tag>
        <tag>面向对象</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|网络爬虫项目</title>
    <url>/2021/04/26/Java-%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040942707.jpeg" alt="logo"></p>
<span id="more"></span>

<h3 id="idea基本设置"><a href="#idea基本设置" class="headerlink" title="idea基本设置"></a>idea基本设置</h3><p>File&gt;Setting打开idea基本设置，可以更改字体主题，安装插件等</p>
<p>建议安装中文翻译插件和Codota插件</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040940118.png" alt="image-20210507095023736"></p>
<h3 id="idea创建项目"><a href="#idea创建项目" class="headerlink" title="idea创建项目"></a>idea创建项目</h3><h4 id="1-参考文章"><a href="#1-参考文章" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://www.jianshu.com/p/e2c17c3460de">IDEA新建一般Java项目</a></p>
<p><a href="https://blog.csdn.net/shaxu123/article/details/97097296">语言版本和环境版本不一致导致错误</a>：Error:java: 无效的源发行版</p>
<h4 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）配置"><a href="#（1）配置" class="headerlink" title="（1）配置"></a>（1）配置</h5><p>新建一般Java项目时，一般选择默认配置进行</p>
<h5 id="（2）打开项目"><a href="#（2）打开项目" class="headerlink" title="（2）打开项目"></a>（2）打开项目</h5><p>打开的项目文件时，文件结构如下，文件路径多出一层或少一层文件，idea都不能识别出该项目（程序文件都要放到src文件中）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941220.png" alt="image-20210507092554533"></p>
<h5 id="（3）配置修改"><a href="#（3）配置修改" class="headerlink" title="（3）配置修改"></a>（3）配置修改</h5><p>项目结构（文件 &gt; 项目结构）中可以修改项目的一些配置（可设置项目，模块的语言级别）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941155.png" alt="image-20210507095156216"></p>
<h5 id="（4）标记目录"><a href="#（4）标记目录" class="headerlink" title="（4）标记目录"></a>（4）标记目录</h5><p>标记目录可以自定义源根目录等，一般不改动，默认src为源根目录</p>
<h5 id="（5）添加Maven框架"><a href="#（5）添加Maven框架" class="headerlink" title="（5）添加Maven框架"></a>（5）添加Maven框架</h5><p>在Java一般项目中没有meavn的选项，可以在后期加上Maven框架支持</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941147.png" alt="image-20210507101055813"></p>
<p>添加了Maven框架后，还需要重新加载Maven项目即可完成框架添加</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941626.png" alt="image-20210507101357206"></p>
<h3 id="配置meavn"><a href="#配置meavn" class="headerlink" title="配置meavn"></a>配置meavn</h3><h4 id="1-参考文章-1"><a href="#1-参考文章-1" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://zhuanlan.zhihu.com/p/122429605">Meavn配置过程</a></p>
<p><a href="https://blog.csdn.net/stone_fall/article/details/108140716">依赖添加错误</a></p>
<p><a href="https://blog.csdn.net/qq_34412985/article/details/104410574">手动添加jar包</a></p>
<h4 id="2-注意事项-1"><a href="#2-注意事项-1" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）maven配置"><a href="#（1）maven配置" class="headerlink" title="（1）maven配置"></a>（1）maven配置</h5><p>idea有自己自带的maven，如果想自定义到自己下载的maven文件，可以在设置中修改（这样的修改只是针对该项目，新建的项目还是使用默认的maven）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941483.png" alt="image-20210507100212095"></p>
<ul>
<li>设置主目录</li>
<li>用户设置文件指向maven的setting文件</li>
<li>可以新建一个文件用于存储本地库</li>
</ul>
<h5 id="（2）Meavn创建项目"><a href="#（2）Meavn创建项目" class="headerlink" title="（2）Meavn创建项目"></a>（2）Meavn创建项目</h5><p>除了在一般项目创建后再添加Maven框架，我们也可以直接使用Meavn框架创建项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941163.png" alt="image-20210507101919573"></p>
<p>区别于一般的Java项目，使用Meavn框架创建的会在src新建两个文件夹：main（放主程序）和test（放测试程序）</p>
<h5 id="（3）meavn添加包"><a href="#（3）meavn添加包" class="headerlink" title="（3）meavn添加包"></a>（3）meavn添加包</h5><ul>
<li>通过pom.xml添加依赖</li>
</ul>
<p>在pom.xml文件中添加<code>&lt;dependency&gt;&lt;/dependency&gt;</code>标签，如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>要注意要是在<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>内添加依赖</p>
<p>我们可以通过<a href="https://mvnrepository.com/artifact/org.eclipse.ditto/ditto-base-api/2.0.0">Maven Repositor</a>查找对应包的依赖项xml文本</p>
<p>最后加载Maven包变更完成依赖项的添加</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941753.png" alt="image-20210507103208170"></p>
<ul>
<li>手动添加jar包</li>
</ul>
<p>meavn找不到相关包时，可以直接下载jar文件到本地包，放在刚刚设置Maven本地库存储文件中，然后使用maven导入</p>
<h3 id="爬虫配置"><a href="#爬虫配置" class="headerlink" title="爬虫配置"></a>爬虫配置</h3><h4 id="1-参考文章-2"><a href="#1-参考文章-2" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="http://webmagic.io/docs/zh/">WebMagic 文档</a></p>
<p><a href="https://www.cnblogs.com/justcooooode/p/7913365.html#_label0">出现log4j警告解决方法</a></p>
<p><a href="https://www.cnblogs.com/justlove/p/7637681.html">出现了SLF4J的报错解决方法</a>：添加依赖即解决</p>
<p><a href="http://webmagic.io/docs/zh/posts/ch4-basic-page-processor/">文档中爬虫基本使用介绍</a></p>
<h4 id="2-注意事项-2"><a href="#2-注意事项-2" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）爬虫框架添加"><a href="#（1）爬虫框架添加" class="headerlink" title="（1）爬虫框架添加"></a>（1）爬虫框架添加</h5><p>爬虫框架采用了易于上手的WebMagic框架，在pom.xml文件中添加相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="（2）无法爬取网页"><a href="#（2）无法爬取网页" class="headerlink" title="（2）无法爬取网页"></a>（2）无法爬取网页</h5><p>无法爬取TLS1.2协议站点的问题</p>
<p>在依赖中把WebMagica改成最新版本（0.7.4以上）即可解决</p>
<h5 id="（3）SLF4J报错"><a href="#（3）SLF4J报错" class="headerlink" title="（3）SLF4J报错"></a>（3）SLF4J报错</h5><p>出现了SLF4J报错可以添加以下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="（4）爬取方法"><a href="#（4）爬取方法" class="headerlink" title="（4）爬取方法"></a>（4）爬取方法</h5><ul>
<li>实现实现PageProcessor接口，设置爬虫相关配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Site site = Site.me()</span><br><span class="line">        .setCharset(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">        .setRetryTimes(<span class="number">3</span>)</span><br><span class="line">        .setSleepTime(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>



<ul>
<li>process编写抽取逻辑，可以定义爬取页面的规则</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">// 爬取title放入父类私有属性中</span></span><br><span class="line">    List title = page.getHtml()</span><br><span class="line">        .css(<span class="string">&quot;li &gt; div &gt; div.details &gt; span.link.h-cite.u-repost-of &gt; a&quot;</span>)</span><br><span class="line">        .regex(<span class="string">&quot;&gt;(.+)&lt;/a&gt;&quot;</span>,<span class="number">1</span>)</span><br><span class="line">        .all();</span><br><span class="line">        </span><br><span class="line">    	set_title(title);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>Spider类执行爬虫</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Spider.create(obj)</span><br><span class="line">      .addUrl(url)</span><br><span class="line">      <span class="comment">//开启4个线程抓取</span></span><br><span class="line">      .thread(<span class="number">4</span>)</span><br><span class="line">      <span class="comment">//启动爬虫</span></span><br><span class="line">      .run();</span><br></pre></td></tr></table></figure>



<h5 id="（5）正则匹配问题"><a href="#（5）正则匹配问题" class="headerlink" title="（5）正则匹配问题"></a>（5）正则匹配问题</h5><p>WebMagic链式抽取元素中使用的正则是不区分大小写的</p>
<h3 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h3><h4 id="1-参考文章-3"><a href="#1-参考文章-3" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://blog.csdn.net/XJ0927/article/details/108229970">IDEA单元测试设置过程</a></p>
<p><a href="http://www.justdojava.com/2019/07/20/debug-in-idea/">深入学习 Intellij IDEA 调试技巧</a></p>
<h4 id="2-单元测试"><a href="#2-单元测试" class="headerlink" title="2.单元测试"></a>2.单元测试</h4><h5 id="（1）单元测试理解"><a href="#（1）单元测试理解" class="headerlink" title="（1）单元测试理解"></a>（1）单元测试理解</h5><p>单元测试实质上是在主运行程序之外，为某个方法创建单独的测试程序，而不必只有一个执行入口进入程序</p>
<h5 id="（2）单元测试特殊情况"><a href="#（2）单元测试特殊情况" class="headerlink" title="（2）单元测试特殊情况"></a>（2）单元测试特殊情况</h5><p>抽象方法在单元测试时不能被调用，因为抽象类不能有实例不能直接调用</p>
<h5 id="（3）单元测试使用案例"><a href="#（3）单元测试使用案例" class="headerlink" title="（3）单元测试使用案例"></a>（3）单元测试使用案例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 爬取工具类测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">spider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Tool().spider(<span class="keyword">new</span> Lobsters() ,<span class="string">&quot;https://lobste.rs/&quot;</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h5 id="（4）单元测试生成"><a href="#（4）单元测试生成" class="headerlink" title="（4）单元测试生成"></a>（4）单元测试生成</h5><p>idea可以快捷为类生成一个测试类，并可以勾选生成测试方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941641.png" alt="image-20210508081411414"></p>
<h4 id="3-单步调试"><a href="#3-单步调试" class="headerlink" title="3.单步调试"></a>3.单步调试</h4><h5 id="（1）断点设置"><a href="#（1）断点设置" class="headerlink" title="（1）断点设置"></a>（1）断点设置</h5><p>设置断点可以让程序在调试时从入口开始执行到断点所在代码</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941178.png" alt="image-20210508083551638"></p>
<p>不设断点调试，程序会执行完全部代码，无法实现单步调试</p>
<h5 id="（2）调试显示"><a href="#（2）调试显示" class="headerlink" title="（2）调试显示"></a>（2）调试显示</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941715.png" alt="image-20210508084409131"></p>
<ul>
<li>重新调试：当单步调试进入加载类等奇怪的地方时，可以重新调试，直到断点出现勾号，说明调试成功</li>
<li>调试过程中，步过（<strong>Setp Over</strong>）使用频率最高，当碰到方法时，不会进入方法内，而是直接调用方法，然后进入下一行</li>
<li>步进（ <strong>Step Into</strong>）则会进入方法内</li>
</ul>
<h3 id="构造子类"><a href="#构造子类" class="headerlink" title="构造子类"></a>构造子类</h3><h4 id="1-参考文章-4"><a href="#1-参考文章-4" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://blog.csdn.net/HD243608836/article/details/89155433">java中父类与子类有相同属性调谁？取决于左边</a></p>
<p><a href="https://blog.csdn.net/dxtianlei/article/details/99299051">父类私有属性和私有方法的继承</a></p>
<p><a href="https://blog.csdn.net/ccpat/article/details/44515335">Java this 关键字用法</a></p>
<h4 id="2-注意事项-3"><a href="#2-注意事项-3" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）子类属性继承问题"><a href="#（1）子类属性继承问题" class="headerlink" title="（1）子类属性继承问题"></a>（1）子类属性继承问题</h5><ul>
<li><p>子类是继承了父类的私有属性和私有方法，只是子类没有权限直接访问父类的私有属性和私有方法。但是我们可以通过继承父类get和set方法访问到父类的私有属性</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改私有属性方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set_title</span><span class="params">(List title)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问私有属性方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">show_title</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>父类属性不可被重写,只会被调用,父类方法可以被重写,也可以被调用</p>
</li>
<li><p>当子类中存在和父类同名属性,父类属性会隐藏起来,在多态的情况下属性被调用时会激活父类属性子类属性隐藏起来,而方法不会隐藏,一旦被重写,只能使用super来在子类调用</p>
</li>
</ul>
<h5 id="（2）继承中this指向问题"><a href="#（2）继承中this指向问题" class="headerlink" title="（2）继承中this指向问题"></a>（2）继承中this指向问题</h5><ul>
<li>对于方法的覆盖，new的谁就调谁，这就是多态。</li>
<li>对于成员变量的覆盖，this在哪个类就指向哪个类的成员变量，没有多态。</li>
<li>无论子类是否覆盖成员变量，this始终访问父类的成员变量</li>
<li>静态方法中，无法使用this引用上下文内容（属性，方法）</li>
</ul>
<h5 id="（3）抽象方法使用问题"><a href="#（3）抽象方法使用问题" class="headerlink" title="（3）抽象方法使用问题"></a>（3）抽象方法使用问题</h5><ul>
<li>抽象类是作为一个模板存在的，不能创建抽象类对象，需要用子类实现所有其抽象方法后变为非抽象类才能间接实例化</li>
<li>抽象方法只有声明没有实现（对于不知道该怎么实现的方法，我们可以声明为抽象方法），强制子类必须重写抽象方法</li>
</ul>
<h3 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h3><h4 id="1-参考文章-5"><a href="#1-参考文章-5" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://www.geeksforgeeks.org/md5-hash-in-java/">Java实现md5加密</a></p>
<p><a href="https://blog.csdn.net/Littleflowers/article/details/113955196">Java内部类实现http请求</a></p>
<p><a href="https://www.cnblogs.com/liaohuiqiang/p/7627022.html">http请求与多线程</a></p>
<p><a href="https://blog.csdn.net/foxpeter/article/details/23475293">URL中关于空格的编码</a></p>
<h4 id="2-注意事项-4"><a href="#2-注意事项-4" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）Http请求实现"><a href="#（1）Http请求实现" class="headerlink" title="（1）Http请求实现"></a>（1）Http请求实现</h5><ul>
<li><p>get请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String urlNameString = url + <span class="string">&#x27;?&#x27;</span> + param;</span><br><span class="line">URL realUrl = <span class="keyword">new</span> URL(urlNameString);</span><br><span class="line"><span class="comment">// 打开链接，强转换为httpURLConnection类</span></span><br><span class="line">URLConnection connection = realUrl.openConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置通用请求属性</span></span><br><span class="line">connection.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">connection.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">connection.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>,<span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span>);</span><br><span class="line"><span class="comment">// 建立实际链接</span></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求成功获得输入流</span></span><br><span class="line">BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(connection.getInputStream()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得返回结果</span></span><br><span class="line">String res = in.readLine();</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>post请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URL realUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line"><span class="comment">// 打开和URL之间的连接</span></span><br><span class="line">URLConnection conn = realUrl.openConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置通用的请求属性</span></span><br><span class="line">conn.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">conn.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">conn.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>,</span><br><span class="line"><span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送POST请求必须设置如下两行</span></span><br><span class="line">conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取URLConnection对象对应的输出流</span></span><br><span class="line">out = <span class="keyword">new</span> PrintWriter(conn.getOutputStream());</span><br><span class="line"><span class="comment">// 发送请求参数</span></span><br><span class="line">out.print(param);</span><br><span class="line"><span class="comment">// flush输出流的缓冲</span></span><br><span class="line">out.flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义BufferedReader输入流来读取URL的响应</span></span><br><span class="line">in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得返回结果 </span></span><br><span class="line">String res = in.readLine();</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li>Java发起http请求后，返回值为String类型</li>
<li>注意请求api的QPS（每秒请求量），我们可以通过<code>Thread.currentThread().sleep(1000);//毫秒</code> 简单实现延时</li>
<li>链接编码问题，有时候链接请求失败是因为空格没有编码为%20,而导致请求失败</li>
</ul>
<h5 id="（2）Java加密问题"><a href="#（2）Java加密问题" class="headerlink" title="（2）Java加密问题"></a>（2）Java加密问题</h5><p>​    实现md5加密</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// md5加密工具</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMd5</span><span class="params">(String input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用哈希MD5调用静态getInstance方法</span></span><br><span class="line">        MessageDigest md = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// digest() 方法调用来计算消息摘要</span></span><br><span class="line">        <span class="comment">//  of an input digest() return array of byte</span></span><br><span class="line">        <span class="keyword">byte</span>[] messageDigest = md.digest(input.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字节数组转换为符号表示</span></span><br><span class="line">        BigInteger no = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, messageDigest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将消息摘要转换为十六进制值</span></span><br><span class="line">        String hashtext = no.toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">while</span> (hashtext.length() &lt; <span class="number">32</span>) &#123;</span><br><span class="line">            hashtext = <span class="string">&quot;0&quot;</span> + hashtext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hashtext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于指定错误的消息摘要算法</span></span><br><span class="line">    <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="Java数据处理"><a href="#Java数据处理" class="headerlink" title="Java数据处理"></a>Java数据处理</h4><h4 id="1-参考文章-6"><a href="#1-参考文章-6" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://blog.csdn.net/chenkaibsw/article/details/78989459">Java数组遍历方法</a></p>
<p><a href="https://blog.csdn.net/WZH577/article/details/90453762">java遍历List方法</a></p>
<p><a href="https://www.cnblogs.com/goloving/p/7740100.html">List和Array相互转换 </a></p>
<h4 id="2-注意事项-5"><a href="#2-注意事项-5" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）字符串与数组转换"><a href="#（1）字符串与数组转换" class="headerlink" title="（1）字符串与数组转换"></a>（1）字符串与数组转换</h5><ul>
<li><p>字符串转换成数组</p>
<p>String.split() 方法，Java 中通常用 split() 分割字符串，返回的是一个数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;123abc&quot;</span>;</span><br><span class="line">String[] arr = str.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; <span class="comment">// String数组</span></span><br><span class="line">    System.out.print(arr[i]); <span class="comment">// 输出 1 2 3 a b c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组转换为字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr = &#123; <span class="string">&quot;123&quot;</span>, <span class="string">&quot;abc&quot;</span> &#125;;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    sb.append(arr[i]); <span class="comment">// String并不拥有append方法，所以借助 StringBuffer</span></span><br><span class="line">&#125;</span><br><span class="line">String sb1 = sb.toString();</span><br><span class="line">System.out.println(sb1); <span class="comment">// 输出123abc</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="（2）数组遍历方法"><a href="#（2）数组遍历方法" class="headerlink" title="（2）数组遍历方法"></a>（2）数组遍历方法</h5><ul>
<li><p>传统for循环方法</p>
</li>
<li><p>for each循环（foreach只能用于普通数组）</p>
</li>
<li><p>利用Array类中的toString方法（不能直接打印数组，<code>System.out.println(array)</code>这样打印是的是数组的首地址）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(array))</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="（3）List遍历方法"><a href="#（3）List遍历方法" class="headerlink" title="（3）List遍历方法"></a>（3）List遍历方法</h5><ul>
<li>迭代器遍历（hasNext和next方法）</li>
<li>for each遍历（从List中获得的元素是对象）</li>
<li>传统for循环遍历（使用size方法获得List长度）</li>
<li>Lambda表达式</li>
</ul>
<h5 id="（3）Java中的正则表达式"><a href="#（3）Java中的正则表达式" class="headerlink" title="（3）Java中的正则表达式"></a>（3）Java中的正则表达式</h5><ul>
<li>注意该正则方法，一定是先find后group，group()方法通过前一个成功的find()方法调用返回找到的字符串</li>
</ul>
<h5 id="（5）List与Array的转换"><a href="#（5）List与Array的转换" class="headerlink" title="（5）List与Array的转换"></a>（5）List与Array的转换</h5><ul>
<li><p>List to Array</p>
<p>使用List 提供的toArray的接口对List进行转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定类型转换</span></span><br><span class="line">String[] array=list.toArray(<span class="keyword">new</span> String[list.size()]);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Array to List</p>
<p>使用ArrayList的构造方法进行转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(array));</span><br></pre></td></tr></table></figure>





</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
        <tag>Java</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|知识框架</title>
    <url>/2021/04/11/Java-%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040947723.png" alt="image-20210904094723369"></p>
<span id="more"></span>

<h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><h3 id="计算机硬件介绍"><a href="#计算机硬件介绍" class="headerlink" title="计算机硬件介绍"></a>计算机硬件介绍</h3><h4 id="1-CPU"><a href="#1-CPU" class="headerlink" title="1.CPU"></a>1.CPU</h4><p>中央处理器从内存获取指令，然后执行这些指令</p>
<p>每台计算机都有一个内部时钟，以固定速度发射电子脉冲，时钟速度越快，在给定的时间段内可以执行更多的指令（计量单位为HZ）</p>
<h4 id="2-计算机发展规律"><a href="#2-计算机发展规律" class="headerlink" title="2.计算机发展规律"></a>2.计算机发展规律</h4><ul>
<li>摩尔定律</li>
<li>安迪-比尔定律</li>
<li>反摩尔定律</li>
</ul>
<h4 id="3-存储设备"><a href="#3-存储设备" class="headerlink" title="3.存储设备"></a>3.存储设备</h4><p>内存中的信息在断电后丢失，所有我们要将程序和数据永久保存在存储设备上</p>
<p>存储设备有下面三种</p>
<ul>
<li><p>磁盘驱动器</p>
</li>
<li><p>光盘驱动器</p>
</li>
<li><p>USB闪存驱动器</p>
</li>
</ul>
<h4 id="4-内存"><a href="#4-内存" class="headerlink" title="4.内存"></a>4.内存</h4><p>计算机最基本的存储单元是字节（byte），每个字节有8个比特（bit）构成</p>
<p>内存（RAM）用于存储程序及程序所需要的数据</p>
<p>一个程序和它的数据在被CPU执行前必须移到计算机内存中</p>
<h4 id="5-通信设备"><a href="#5-通信设备" class="headerlink" title="5.通信设备"></a>5.通信设备</h4><p>电脑可以通过通信设备</p>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>操作系统是运行在计算机上最重要的程序，管理和控制计算机的活动</p>
<h3 id="万维网"><a href="#万维网" class="headerlink" title="万维网"></a>万维网</h3><p>万维网即world wide web，简称web</p>
<p>web客户端可以访问浏览web服务器上的页面</p>
<p>web通过一个全局统一资源标识符（URL）标识</p>
<p>web通过超文本传输协议（http）传输给用户</p>
<h2 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h2><h3 id="Java语言应用场景"><a href="#Java语言应用场景" class="headerlink" title="Java语言应用场景"></a>Java语言应用场景</h3><h4 id="1-JavaEE（spring）"><a href="#1-JavaEE（spring）" class="headerlink" title="1.JavaEE（spring）"></a>1.JavaEE（spring）</h4><h4 id="2-大数据（spark）"><a href="#2-大数据（spark）" class="headerlink" title="2.大数据（spark）"></a>2.大数据（spark）</h4><h4 id="3-安卓开发"><a href="#3-安卓开发" class="headerlink" title="3.安卓开发"></a>3.安卓开发</h4><h3 id="Java开发介绍"><a href="#Java开发介绍" class="headerlink" title="Java开发介绍"></a>Java开发介绍</h3><h4 id="1-软件开发介绍"><a href="#1-软件开发介绍" class="headerlink" title="1.软件开发介绍"></a>1.软件开发介绍</h4><p>（1）软件开发</p>
<p>软件集一系列按照特定顺序组织的计算机数据和指令的集合。有系统软件和应用软件之分</p>
<p>（2）人机交互方式</p>
<ul>
<li>图形化界面：GUI</li>
<li>命令行方式：CLI</li>
</ul>
<h4 id="2-Java技术体系平台"><a href="#2-Java技术体系平台" class="headerlink" title="2.Java技术体系平台"></a>2.Java技术体系平台</h4><ul>
<li>Java SE：面向桌面级应用的Java平台</li>
<li>Java EE：面向web应用程序</li>
<li>Java ME：面向移动终端</li>
</ul>
<h4 id="3-Java语言特点"><a href="#3-Java语言特点" class="headerlink" title="3.Java语言特点"></a>3.Java语言特点</h4><ul>
<li>面向对象：类与对象</li>
<li>健壮性：提供一个相对安全的内存管理和访问机制</li>
<li>跨平台性：java语言编写的应用程序可以运行在不同的系统平台上（通过jvm实现）</li>
</ul>
<h4 id="4-Java两种核心机制"><a href="#4-Java两种核心机制" class="headerlink" title="4.Java两种核心机制"></a>4.Java两种核心机制</h4><ul>
<li>Java虚拟机（JVM）：JVM是一个虚拟计算机，具有指令集使用不同的存储区域，负责执行指令，管理数据，内存，寄存器（屏蔽底层运行平台的差别，实现“”一次编译，处处运行“）</li>
<li>垃圾收集机制：java系统级线性跟踪存储空间的分配情况，并在JVM空闲时，检测并释放可被释放的存储空间</li>
</ul>
<h4 id="5-Java环境"><a href="#5-Java环境" class="headerlink" title="5.Java环境"></a>5.Java环境</h4><ul>
<li>JDK：Java开发工具包，其中包含了JRE，其中包含了编译工具（javac）和打包工具（jar）</li>
<li>JRE：java运行环境，包括了JVM和java的核心类库</li>
<li>使用JDK开发java程序，交给JRE运行</li>
<li>JDK &gt; JRE &gt; JVM</li>
</ul>
<h2 id="Java基本语法"><a href="#Java基本语法" class="headerlink" title="Java基本语法"></a>Java基本语法</h2><h3 id="关键字与保留字"><a href="#关键字与保留字" class="headerlink" title="关键字与保留字"></a>关键字与保留字</h3><h4 id="1-关键字"><a href="#1-关键字" class="headerlink" title="1.关键字"></a>1.关键字</h4><p>定义：在java语言中用作专门用途的字符串（单词）</p>
<p>特点：关键字所有字母为小写</p>
<p>功能：定影数据类型，定义流程控制，定义访问权限修饰，定义类函数变量修饰符，定义类与类之间关系，定义建立引用判断实例，异常处理，包</p>
<h4 id="2-保留字"><a href="#2-保留字" class="headerlink" title="2.保留字"></a>2.保留字</h4><p>现有Java版本尚未使用，但后续版本可能作为关键字使用，命名标识符时避免使用这些保留字</p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>对变量，方法和类的命名使用的字符序列，称为标识符</p>
<p>合法标识符规则，命名规范</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量即内存中一个存储区域，该区域的数据可以在同一类型范围内不断变化</p>
<p>变量时程序最基础的存储单元，包含变量类型，变量名和存储的值</p>
<p>Java的每个变量必须先声明后使用</p>
<ul>
<li></li>
</ul>
<h4 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h4><p>（1）基本数据类型</p>
<ul>
<li><p>数值型：整数类型（byte,short,int,long），浮点类型（float,double）</p>
</li>
<li><p>字符型（char）</p>
</li>
<li><p>布尔型（boolean）</p>
</li>
</ul>
<p>（2）引用数据类型</p>
<ul>
<li><p>类（class）（字符串变量的声明就是用类来声明）</p>
</li>
<li><p>接口（interface）</p>
</li>
<li><p>数组（array）</p>
</li>
</ul>
<p>（3）声明位置分类变量</p>
<ul>
<li>成员变量：方法体外，类体内声明的变量</li>
<li>局部变量：方法体内部声明的变量</li>
</ul>
<h4 id="2-整型类型"><a href="#2-整型类型" class="headerlink" title="2.整型类型"></a>2.整型类型</h4><p>整型默认使用int型，当遇到不足以表达较大的数，才使用long，声明long类型常量，需要后加”L”</p>
<h4 id="3-浮点数类型"><a href="#3-浮点数类型" class="headerlink" title="3.浮点数类型"></a>3.浮点数类型</h4><p>浮点数类型常量默认使用double型，声明float型常量，需要后加”F”</p>
<h4 id="4-基本数据类型转换"><a href="#4-基本数据类型转换" class="headerlink" title="4.基本数据类型转换"></a>4.基本数据类型转换</h4><ul>
<li>自动转换类型：容量小的类型自动转换为容量大的数据类型</li>
<li>byte,short,char -&gt; int -&gt; long -&gt; float -&gt; double</li>
<li>在多种类型数据混合运算时，系统首先自动间=将所有数据转换成容量最大的数据类型，然后进行计算</li>
<li>强类型转换：自动类型转换的逆过程，可以将容量大的数据类型转换成容量小的数据类型（如将字符串转换为int类）</li>
</ul>
<h4 id="5-引用数据类型"><a href="#5-引用数据类型" class="headerlink" title="5.引用数据类型"></a>5.引用数据类型</h4><p>引用数据类型包括：类（如String类）,接口，数组</p>
<p>​    String类：</p>
<ul>
<li>String属于引用数据类型</li>
<li>声明String类型变量使用一对””</li>
<li>String可以和8种基本数据类型做运行（字符串连接运算）</li>
</ul>
<h4 id="6-变量赋值"><a href="#6-变量赋值" class="headerlink" title="6.变量赋值"></a>6.变量赋值</h4><ul>
<li>如果变量是基本数据类型，此时赋值的变量是所保存的数据值</li>
<li>如果变量是引用数据类型，此时赋值的变量所保存的数据的地址值</li>
</ul>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h4><p>加减乘除，取余，自增，自减，字符串连接</p>
<h4 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2.赋值运算符"></a>2.赋值运算符</h4><ul>
<li>当”=“号两侧数据类型不一致时，可以使用自动类型转换或者使用强制类型转换原则进行处理</li>
<li>支持连续赋值</li>
<li>可以使用扩展赋值运算符：+=，-=，*=，/=，%=</li>
</ul>
<h4 id="3-比较运算符"><a href="#3-比较运算符" class="headerlink" title="3.比较运算符"></a>3.比较运算符</h4><ul>
<li><p>比较运算符的结果都是Boolean型</p>
</li>
<li><p>Java有个特殊的比较运算符：instanceof，可以检查是否为类的对象</p>
</li>
</ul>
<h4 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h4><ul>
<li>与或非等等</li>
<li>逻辑运算符操作的都是boolean类型的变量</li>
</ul>
<h4 id="5-位运算符"><a href="#5-位运算符" class="headerlink" title="5.位运算符"></a>5.位运算符</h4><p>类型：</p>
<ul>
<li>左移右移</li>
<li>与运算</li>
<li>或运算</li>
<li>取反</li>
</ul>
<p>交换两数的方法：</p>
<ul>
<li>定义临时变量法</li>
<li>相加法</li>
<li>位运算符法</li>
</ul>
<h4 id="6-三元运算符"><a href="#6-三元运算符" class="headerlink" title="6.三元运算符"></a>6.三元运算符</h4><ul>
<li>结构：(条件表达式)? 表达式1 : 表达式2</li>
<li>返回结果为Boolean类型</li>
<li>凡是可以使用三元运算符的地方，都可以转换为if-else，但是优先使用三元运算符</li>
</ul>
<h3 id="程序流程控制"><a href="#程序流程控制" class="headerlink" title="程序流程控制"></a>程序流程控制</h3><h4 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1.顺序结构"></a>1.顺序结构</h4><p>程序从上到下逐条执行，中间没有任何判断和跳转</p>
<h4 id="2-分支结构"><a href="#2-分支结构" class="headerlink" title="2.分支结构"></a>2.分支结构</h4><p>（1）根据条件，选择性执行某段代码</p>
<ul>
<li>if-elseif-else</li>
<li>switch-case</li>
<li>switch-case可以转换为if-elseif-else</li>
</ul>
<p>，优先使用switch-case</p>
<p>（2）switch-case-default:</p>
<ul>
<li>根据switch表达式中的值，依次匹配各个case中的常量，一旦匹配成功跳转到相应的case语句中</li>
<li>一旦执行到break，跳出switch-case结构</li>
<li>switch的表达式中，只能是如下的6种数据类型之一：byte，short，char，int，String类型</li>
</ul>
<h4 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3.循环结构"></a>3.循环结构</h4><p>（1）根据循环条件，重复性执行某段代码</p>
<ul>
<li>for循环</li>
<li>while循环</li>
<li>do-while循环</li>
</ul>
<p>（2）循环语句四个组成部分：</p>
<ul>
<li>初始化部分</li>
<li>循环条件部分</li>
<li>循环体部分</li>
<li>迭代部分</li>
</ul>
<p>​    执行过程:初始化 -&gt;  循环条件 -&gt; 循环体 -&gt; 迭代 -&gt;  循环-&gt;条件 -&gt; 循环体 -&gt; 迭代 -&gt; …… -&gt;  循环条件</p>
<p>（3）for循环结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(初始化; 循环条件; 迭代) &#123;循环体&#125;</span><br></pre></td></tr></table></figure>

<p>​    不在循环条件内限制次数的结构：for( ; ; )</p>
<p>（4）while循环结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始化</span><br><span class="line">while(循环条件)&#123;循环体;迭代&#125;</span><br></pre></td></tr></table></figure>

<p>​    不在循环条件内限制次数的结构：while(true)</p>
<p>（5）do-while循环结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始化</span><br><span class="line">do&#123; 循环体;迭代;&#125;while(循环条件)</span><br></pre></td></tr></table></figure>



<p>​    do-while的执行过程与for，while不同，会至少执行一次循环体</p>
<p>​    执行过程: 初始化 -&gt;  循环体 -&gt; 迭代-&gt;  循环条件-&gt;  循环体 -&gt; 迭代-&gt;  ……</p>
<p>（6）结束循环方式</p>
<ul>
<li>循环条件中返回false</li>
<li>循环体中执行break：结束当前循环</li>
<li>循环体中执行continue：结束当次循环</li>
<li>break和coninue在多重循环中，可以通过指定标识结束循环（默认跳出包裹关键字的最近一层循环）</li>
</ul>
<h4 id="4-Scanner输入"><a href="#4-Scanner输入" class="headerlink" title="4.Scanner输入"></a>4.Scanner输入</h4><p>从用户输入处获得不同类型的变量，需要用到Scanner类</p>
<ul>
<li>导入Scanner的包</li>
<li>Scanner实例化</li>
<li>调用Scanner类相关方法来获取指定类型的变量</li>
</ul>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="1-数组概述"><a href="#1-数组概述" class="headerlink" title="1.数组概述"></a>1.数组概述</h4><p>（1）数组是多个相同类型数据按照一定顺序排列的集合，并使用一个名字命名，通过编号的方式对数据进行统一管理</p>
<p>（2）数组相关概念：数组名，元素，索引，数组长度</p>
<p>（3）数组特点：</p>
<ul>
<li>数组本身是引用数据类型，数组中的元素可以是任意数据类型</li>
<li>创建数据对象会在内存中开辟一整块连续的空间，而数组名中引用的是这块连续空间的首地址</li>
<li>数组的长度一旦确定，就不能修改</li>
</ul>
<h4 id="2-一维数组的使用"><a href="#2-一维数组的使用" class="headerlink" title="2.一维数组的使用"></a>2.一维数组的使用</h4><p>（1）数组的声明与初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">int</span> [] ids</span><br><span class="line"><span class="comment">// 静态初始化</span></span><br><span class="line">ids = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>&#125;</span><br><span class="line"><span class="comment">// 动态初始化：初始化与赋值分离</span></span><br><span class="line">String[] names = <span class="keyword">new</span> String[<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>（2）调用数组指定位置元素</p>
<p>（3）获取数组长度</p>
<p>（4）数组遍历</p>
<p>（5）数组元素默认初始化值</p>
<p>（6）数组的内存解析</p>
<p>​    内存结构：</p>
<ul>
<li>栈（局部变量）</li>
<li>堆（对象，数组）</li>
<li>方法区（常量池，静态域）</li>
</ul>
<h4 id="3-多维数据的使用"><a href="#3-多维数据的使用" class="headerlink" title="3.多维数据的使用"></a>3.多维数据的使用</h4><p>Java语言里提供多维数组的语法</p>
<p>从数组底层运行机制来看，其实没有多维数组</p>
<p>（1）二维数组的声明与初始化</p>
<p>（2）调用数组指定位置的元素</p>
<p>（3）获取数组长度</p>
<p>（4）遍历二维数组</p>
<p>（5）数组元素默认初始化</p>
<p>​    外层数组初始化为地址值</p>
<p>​    内存元素初始化与一维数组初始化情况相同</p>
<p>（6）二维数组内存解析</p>
<h4 id="4-数组算法"><a href="#4-数组算法" class="headerlink" title="4.数组算法"></a>4.数组算法</h4><p>（1）数组元素赋值</p>
<p>​    二维数组打印杨辉三角</p>
<p>（2）数组元素计算</p>
<ul>
<li>求最值</li>
<li>求和</li>
<li>求平均值</li>
</ul>
<p>（3）数组复制，反转，查找</p>
<ul>
<li>​    java的数组间可以直接赋值，相当于把原数组地址备份了。这两个数组地址值相同，都指向了堆空间唯一的数组实体，这样不能称作数组的复制</li>
<li>数组的赋值，备份数组应当申请出与原数组相同大小的空间后，一一赋值</li>
<li>数组反转，使正数n的数与倒数n的数交换</li>
<li>查找：线性查找，二分查找（必须有序）</li>
</ul>
<p>（4）数组排序</p>
<p>​    排序算法分类：</p>
<ul>
<li>内部排序：排序过程都在内存中完成</li>
<li>外部排序：数据量巨大，必须借助外部存储器完成排序</li>
</ul>
<h4 id="5-数组工具类"><a href="#5-数组工具类" class="headerlink" title="5.数组工具类"></a>5.数组工具类</h4><p>Arrays即操作数组的工具类，包含了用来操作数组的各种方法</p>
<ul>
<li>判断数组相等</li>
<li>输出数组</li>
<li>指定值填充到数组中</li>
<li>对数组进行排序</li>
<li>二分查找数组</li>
</ul>
<h4 id="6-数组常见异常"><a href="#6-数组常见异常" class="headerlink" title="6.数组常见异常"></a>6.数组常见异常</h4><ul>
<li>数组角标越界异常</li>
<li>空指针异常</li>
</ul>
<h2 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h2><p>Java面向对象学习的三条主线：</p>
<ul>
<li>Java类及类的成员：属性，方法，构造器，代码块，内部类</li>
<li>面向对象三大特征：封装性，继承性，多态性（抽象性）</li>
<li>关键字</li>
</ul>
<h3 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h3><h4 id="1-面向过程与面向对象"><a href="#1-面向过程与面向对象" class="headerlink" title="1.面向过程与面向对象"></a>1.面向过程与面向对象</h4><p>面向过程：强调功能行为以函数为最小单位，考虑怎么做</p>
<p>面向对象：将功能封装到对象中，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做</p>
<p>面向过程中为执行者，面向对象中为指挥者</p>
<h4 id="2-类与对象"><a href="#2-类与对象" class="headerlink" title="2.类与对象"></a>2.类与对象</h4><p>（1）概念</p>
<ul>
<li>类是对一类事物的描述，是抽象的，概念上的定义</li>
<li>对象是事情存在的该类事物的个体，因而被称为实例(instance)</li>
</ul>
<p>（2）类的设计</p>
<p>​    设计类其实就是设计类的成员</p>
<p>​    类的基本成员：</p>
<ul>
<li>属性（field）：对应类中成语变量</li>
<li>行为（method）：对应类中的成员方法</li>
<li>除了上面两个常用的外，还有构造器，代码块，内部类</li>
</ul>
<p>（3）对象</p>
<ul>
<li>创建类的对象即类的实例化（new）</li>
<li>调用对象的属性，方法( 对象.属性 对象.方法 )</li>
<li>一个类的多个对象，每个对象都独立拥有一套类的属性。</li>
<li>将对象赋值给另一个对象，它们存有相同的对象地址值指向堆空间同一对象实体</li>
</ul>
<p>（4）对象内存解析</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944597.png" alt="image-20210418093314518"></p>
<ul>
<li>堆：存放对象实例</li>
<li>栈：指虚拟机栈，用于储存局部变量</li>
<li>方法区：用于存储已被虚拟机加载的类的信息，常量，静态变量（即编译器编译后的代码等数据）</li>
</ul>
<p>（5）成员变量与局部变量</p>
<ul>
<li><p>成员变量（属性）定义在类中</p>
</li>
<li><p>局部变量是声明在方法内，方法形参，代码块内，构造器形参，构造器内部的变量</p>
</li>
<li><p>成员变量（属性）可以在声明时使用权限修饰符指明其权限（封装性）</p>
</li>
<li><p>局部变量不可以使用权限修饰符</p>
</li>
<li><p>成员变量（属性）根据其类型都有默认初始化值</p>
</li>
<li><p>局部变量没有初始化值，所以在调用之前，一定要显式赋值</p>
</li>
<li><p>成员变量（属性）加载到堆空间（非static时）</p>
</li>
<li><p>局部变量加载到栈空间</p>
</li>
</ul>
<p>（6）对象数组（数组中存储对象的地址）</p>
<p>（7）匿名对象的使用</p>
<ul>
<li>创建的对象，没有显式赋给一个变量名，即为匿名对象</li>
<li>特征：匿名对象只能使用一次</li>
<li>使用：可以把一个对象当作一个对象方法的形参，从而达到对象的匿名</li>
</ul>
<p>​    </p>
<h4 id="3-类与方法"><a href="#3-类与方法" class="headerlink" title="3.类与方法"></a>3.类与方法</h4><p>（1）方法：描述类应该有的功能（java内部类中提供了很多方法）</p>
<p>（2）方法声明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 权限修饰符 返回值类型 方法名(形参列表)&#123;方法体&#125;</span></span><br></pre></td></tr></table></figure>

<p>（3）权限修饰符</p>
<p>（4）返回值类型：return后返回指定的数据类型</p>
<p>（5）形参列表：方法可以申请多个形参</p>
<p>（6）方法的使用中，可以调用当前类的属性和方法，也可以实现递归调用</p>
<h4 id="4-方法进阶"><a href="#4-方法进阶" class="headerlink" title="4.方法进阶"></a>4.方法进阶</h4><p>（1）方法重载</p>
<ul>
<li>重载的概念：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或参数类型不同即可</li>
<li>重载的特定：与返回值类型无关，只看参数列表</li>
<li>两同一不同：1.同一个类，相同方法名 2.参数列表个数不同，参数类型不同</li>
<li>可变个数形参：允许直接定义和多个实参相匹配的形参，使用格式：<code>数据类型... 变量名</code>，形参会以数组的形式传入</li>
<li>可变个数形参必须声明在末尾，而且只能声明一个 </li>
</ul>
<p>（2）方法参数的值的传递机制</p>
<p>​    形参：方法定义时，声明的小括号内的参数</p>
<p>​    实参：方法调用时，实际传递给形参的数据</p>
<p>​    值传递机制：</p>
<ul>
<li>参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值（实参和形参都在栈中，都是数据本身）</li>
<li>参数是引用数据类型，此时实参赋给形参的是变量所保存数据的地址值（实参和形参都在栈中，存储的是数据的地址，数据在堆中）</li>
</ul>
<p>（3）递归方法</p>
<p>递归方法：一个方法体内调用它自身</p>
<ul>
<li>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制</li>
<li>递归一定要向已知方向递归，否则会变成无穷递归，类似于死循环</li>
</ul>
<h4 id="5-封装与隐藏"><a href="#5-封装与隐藏" class="headerlink" title="5.封装与隐藏"></a>5.封装与隐藏</h4><p>（1）封装的引出</p>
<p>程序设计追求：“高内聚，低耦合”：</p>
<p>高内聚：类的内部数据操作细节自己完成，不允许外部干涉（相同方法高度集中在一个类中）</p>
<p>低耦合：仅对外暴露少量方法用于使用（类与类之间的依赖关系降低）</p>
<p>（2）封装设计思想</p>
<p>​    隐藏该隐藏的，暴露该暴露的</p>
<ul>
<li>对于类内某个属性使用private修改符，类外对该属性的操作，只能通过类内设置的方法（隐藏私有属性，暴露公共方法）</li>
<li>不对外暴露私有方法，单例模式</li>
</ul>
<p>（3）访问权限修饰符</p>
<p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944324.png" alt="image-20210418131340405"></p>
<p>以上四种权限都可以用来修饰类的内部结构，属性，方法，构造器，内部类</p>
<p>修饰类只能使用：缺省，public</p>
<h4 id="6-构造器"><a href="#6-构造器" class="headerlink" title="6.构造器"></a>6.构造器</h4><p>构造器（constructor）又称构造方法</p>
<p>（1）构造器作用</p>
<ul>
<li>创建对象</li>
<li>初始化对象信息（属性方法）</li>
</ul>
<p>（2）构造器说明</p>
<ul>
<li>如果没有显示定义的构造器，系统默认提供一个空参构造器。一旦定义了构造器，系统不再提供空参构造器</li>
<li>定义构造器格式：权限修饰符 类名(形参列表){}，无返回值</li>
<li>一个类中定义多个构造器，彼此构成重载</li>
<li>一个类中，至少会有一个构造器</li>
</ul>
<h4 id="7-JavaBean"><a href="#7-JavaBean" class="headerlink" title="7.JavaBean"></a>7.JavaBean</h4><p>JavaBean是可重用组件：</p>
<ul>
<li><p>类是公共的</p>
</li>
<li><p>有个无参的公共构造器</p>
</li>
<li><p>有属性，且有对应的get，set方法</p>
</li>
</ul>
<h4 id="8-this"><a href="#8-this" class="headerlink" title="8.this"></a>8.this</h4><p>this表示当前对象，可以调用类的属性，方法，构造器</p>
<p>（1）this含义</p>
<ul>
<li>this在方法内部使用，即这个方法所属对象的引用</li>
<li>this在构造器内部使用，表示该构造器正在初始化的对象</li>
</ul>
<p>（2）this修饰属性和方法</p>
<ul>
<li>照类的方法中，可以使用this调用当前对象属性或方法</li>
<li>可以用this来区分局部变量和属性</li>
</ul>
<p>（3）this调用构造器</p>
<ul>
<li>在类的构造器中，可以显式使用<code>this(形参列表)</code>的方式，调用本类中指定的其他构造器</li>
<li>构造器不能调用自己</li>
</ul>
<h4 id="9-package与import的使用"><a href="#9-package与import的使用" class="headerlink" title="9.package与import的使用"></a>9.package与import的使用</h4><p>（1）package</p>
<ul>
<li>为了更好实现项目中类的管理，提供包的概念</li>
<li>使用packae声明类或接口所属的包，声明在源文件的首行</li>
<li>同一个包下，不能命名同名接口和类</li>
<li>JDK提供了包，其中包含常用的类和接口</li>
</ul>
<p>（2）MVC设计模式 </p>
<ul>
<li><p>模型层model：主要用于处理数据</p>
</li>
<li><p>控制层controller：处理业务逻辑</p>
</li>
<li><p>视图层view：显示数据</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944267.png" alt="image-20210418190748964"></p>
</li>
</ul>
<p>（3）import关键字</p>
<ul>
<li>在源文件中使用import可以导入指定包下的类，接口</li>
<li>声明在包声明和类声明之间</li>
<li>如果类和接口是在java.lang或本包下定义的，则可以省略import结构</li>
</ul>
<p>​    </p>
<h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><h4 id="1-继承性概念"><a href="#1-继承性概念" class="headerlink" title="1.继承性概念"></a>1.继承性概念</h4><p>（1）继承性的优点：</p>
<ul>
<li>减少代码冗余，提高代码复用性</li>
<li>便于功能扩展</li>
<li>是多态性的继承</li>
</ul>
<p>（2）继承性格式  class A extends B {}：</p>
<ul>
<li><p>A：子类，派生类</p>
</li>
<li><p>B：父类，基类</p>
</li>
<li><p>子类继承父类后，就可以获得父类中声明的结构，属性，方法</p>
</li>
<li><p>子类可以在父类的基础上声明自己的属性或方法，实现功能的拓展</p>
</li>
</ul>
<p>（3）继承规则</p>
<ul>
<li>子类继承父类后，仍然获得了父类中私有的属性和方法，但是由于封装性，子类不能直接调用父类的结构</li>
<li>子类对象“拥有”父类对象的私有属性，但无法直接操作，不属于“继承“</li>
<li>支持单继承和多继承：一个子类只要一个父类，一个父类可以派生多个子类</li>
<li>子父类是相对的概念</li>
<li>如果没有显式声明一个类的父类，则此类继承于java.lang.Object类</li>
</ul>
<h4 id="2-方法的重写"><a href="#2-方法的重写" class="headerlink" title="2.方法的重写"></a>2.方法的重写</h4><p>子类根据要求对父类中继承来的方法进行改造，子类方法覆盖父类方法这个过程称为方法的重写</p>
<p>（1）重写：子类继承父类后，可以对父类中同名同参数的方法，进行覆盖操作</p>
<p>（2）重载与重写的区别</p>
<p>（3）重写规则</p>
<ul>
<li><p>方法的声明：权限修饰符 返回值类型 方法名(形参列表){方法体}</p>
</li>
<li><p>子类重写的方法的方法名和形参列表要与父类被重写的方法相同</p>
</li>
<li><p>子类重写的方法的权限修饰符要不小于父类被重写的方法修饰符</p>
</li>
<li><p>子类不能重写父类中声明为private权限的方法</p>
</li>
<li><p>子类重写的方法返回值要与父类被重写的返回值相同</p>
</li>
</ul>
<h4 id="3-spuer"><a href="#3-spuer" class="headerlink" title="3.spuer"></a>3.spuer</h4><p>与super对应的是this，this代指本对象，super则代指本对象的父类</p>
<p>super的使用：</p>
<ul>
<li>super理解为：父类的</li>
<li>super可以调用：属性，方法，构造器</li>
<li>在子类的方法或构造器中，可以通过super调用父类中声明的属性或方法</li>
<li>super调用构造器，必须在子类构造器首行进行声明</li>
<li>在类的构造器中，this和super只能二选一（默认情况下调用的是父类中的空参构造器，即super()）</li>
</ul>
<h4 id="4-子类对象实例化过程"><a href="#4-子类对象实例化过程" class="headerlink" title="4.子类对象实例化过程"></a>4.子类对象实例化过程</h4><ul>
<li>创建子类对象，在堆空间，就会加载所有父类中声明的属性</li>
<li>通过子类构造器构造子类对象时，就会直接或间接调用了其父类的构造器，直至调用到java.lang.Object的空参构造器</li>
<li>虽然创建子类对象时调用了父类的构造器，但是自始至终就创建了一个对象，即new出来的子类实例</li>
</ul>
<h4 id="5-多态性"><a href="#5-多态性" class="headerlink" title="5.多态性"></a>5.多态性</h4><p>对象的多态性：父类的引用指向子类的对象（子类的对象赋给父类引用），可以直接应用到抽象类和接口上。方便传参时，可根据new的对象的不同传入不同的对象</p>
<p>多态就是同一个接口，使用不同的实例而执行不同操作</p>
<p>（1）多态的使用</p>
<ul>
<li>有了对象多太性以后，我们在编译期，只能调用父类中的声明的方法，但在运行期，我们实际执行了子类重写父类的方法</li>
<li>编译看左（父类），运行看右（子类）</li>
<li>多态性使用前提：类的继承关系，方法重写</li>
<li>多态性主要用于方法，不适用于属性</li>
</ul>
<p>（2）虚拟方法的调用</p>
<ul>
<li>​    在多态的情况下，子类定义了父类同名同参数的方法，此时父类的方法被称为虚拟方法。</li>
<li>父类根据赋给它的不同子类对象，动态调用属于子类的该方法</li>
<li>这样的方法时无法在编译期确定的，只有到方法调用那一刻，解释运行器才会确定所要调用的具体方法（”动态绑定“）</li>
</ul>
<h4 id="6-向下转型"><a href="#6-向下转型" class="headerlink" title="6.向下转型"></a>6.向下转型</h4><p>​    在多态中可知，虽然内存加载了子类的方法，但是由于类型是父类，所以编译时无法调用子类的属性和方法，只能调用父类中声明的属性和方法</p>
<p>为了调用子类特有的属性和方法，我们需要用到强制类型转换符，向下转型</p>
<p>（1）instanceof操作符</p>
<ul>
<li>检验对象是否为某类的对象，返回值为Boolean</li>
<li>为了避免在向下转型时出现ClassCastException的异常，在向下转型前进行instanceof判断，为true才能进行向下转型  </li>
</ul>
<p>（2）向下转型规则</p>
<p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944489.png" alt="image-20210419073037475"></p>
<h3 id="Object类的使用"><a href="#Object类的使用" class="headerlink" title="Object类的使用"></a>Object类的使用</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944251.png" alt="image-20210419073502990"></p>
<h4 id="1-和equals的区别"><a href="#1-和equals的区别" class="headerlink" title="1.==和equals的区别"></a>1.==和equals的区别</h4><p>（1）==运算符</p>
<ul>
<li>可以使用在基本数据类型和引用数据类型中</li>
<li>如果比较的是基本数据类型，比较两个变量保存的数据是否相等（不一定类型相同）</li>
<li>如果比较的是引用数据类型，比较两个对象的地址值是否相同（两个引用是否指向同一个对象实体）</li>
</ul>
<p>（2）equals()方法</p>
<ul>
<li>是一个方法而非运算符</li>
<li>只适用于引用数据类型</li>
<li>Object类中定义的equals()和==的作用是一样的，即比较比较两个对象的地址值是否相同</li>
<li>但是String，Date，File等类重写了Object类中的equals()方法，重写以后就是比较两个对象的“实体内容”是否相同了</li>
</ul>
<h4 id="2-toString-方法"><a href="#2-toString-方法" class="headerlink" title="2.toString()方法"></a>2.toString()方法</h4><ul>
<li>当我们输出一个对象的引用时，实际上就是调用当前对象的toString()</li>
<li>String，Date，File等类重写了Object类中的toString()方法。使得在调用对象的toString时，返回“实体内容”信息</li>
</ul>
<h3 id="包装类的使用"><a href="#包装类的使用" class="headerlink" title="包装类的使用"></a>包装类的使用</h3><h4 id="1-包装类介绍"><a href="#1-包装类介绍" class="headerlink" title="1.包装类介绍"></a>1.包装类介绍</h4><p>针对八种基本数据类型有相应的引用类型——包装类（封装类）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944665.png" alt="image-20210419081234938"></p>
<p>基本数据类型，包装类，String三者的相互转换：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945274.png" alt="image-20210419082428442"></p>
<h4 id="2-数据类型转换"><a href="#2-数据类型转换" class="headerlink" title="2.数据类型转换"></a>2.数据类型转换</h4><ul>
<li>基本数据类型 &gt; 包装类：调用包装类的构造器</li>
<li>包装类 &gt; 基本数据类型：调用包装类的xxxValue()</li>
<li>基本数据类型，包装类 &gt; String类型：1.使用字符串的连接运算 2.调用String的ValueOf()方法</li>
<li>String类型 &gt; 基本数据类型，包装类 ：调用包装类的parseXxx(String s)方法</li>
<li>在JDK5.0后，基本数据类型和包装类已经可以实现自动拆箱与自动装箱</li>
</ul>
<h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><p>static让类的实例共享一个属性或方法，无论新建多少个对象都会有这个静态的属性或方法</p>
<h4 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1.使用方法"></a>1.使用方法</h4><ul>
<li>static:静态的</li>
<li>static可以用来修饰：属性，方法，代码块，内部类</li>
</ul>
<h4 id="2-修饰属性"><a href="#2-修饰属性" class="headerlink" title="2.修饰属性"></a>2.修饰属性</h4><ul>
<li><p>实例变量：每个对象都独立拥有一套类中的非静态属性，当修改其中一个对象的非静态属性时，不会导致其他对象相同属性值修改</p>
</li>
<li><p>静态变量：多个对象共享同一个静态变量，，当修改其中一个对象的静态属性时，其他对象的静态变量也随之改变</p>
</li>
<li><p>静态变量随着类的加载而加载，静态变量的加载要早于对象的创建</p>
</li>
<li><p>因为类只会加载一次，所以静态变量在内存中只会存在一份（方法区的静态域中）</p>
</li>
<li><p>实例变量与类变量的内存解析</p>
</li>
</ul>
<h4 id="3-修饰方法"><a href="#3-修饰方法" class="headerlink" title="3.修饰方法"></a>3.修饰方法</h4><ul>
<li>静态方法，只能调用静态的方法或属性；非静态方法既可以调用非静态的方法或属性，也可以调用静态的方法或属性</li>
<li>静态方法随着类的加载而加载</li>
</ul>
<h4 id="4-静态的使用"><a href="#4-静态的使用" class="headerlink" title="4.静态的使用"></a>4.静态的使用</h4><ul>
<li>确定一个属性用静态：属性可以被多个对象共享，不会随对象不同而不同</li>
<li>确定一个方法用静态：1.操作静态属性的方法用静态 2.工具类的方法，习惯上声明为静态</li>
<li>单例设计模式：对某个类只能存在一个对象实例（使用静态让其可以永久驻留内存），减少了系统性能开销</li>
</ul>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h4 id="1-代码块概念"><a href="#1-代码块概念" class="headerlink" title="1.代码块概念"></a>1.代码块概念</h4><ul>
<li>代码块的作用：用来初始化类，对象</li>
<li>代码块只能用static修饰</li>
</ul>
<h4 id="2-静态代码块"><a href="#2-静态代码块" class="headerlink" title="2.静态代码块"></a>2.静态代码块</h4><ul>
<li>内部可以有输出语句</li>
<li>随着类的加载而执行，而且只执行一次</li>
<li>作用：初始化类的信息</li>
<li>一个类可以定义多个静态代码块，而且按声明先后顺序执行</li>
<li>静态代码块的执行要优先于非静态  </li>
<li>静态代码块内只能调用静态的属性，静态的方法，不能调用非静态结构</li>
</ul>
<h4 id="3-非静态代码块"><a href="#3-非静态代码块" class="headerlink" title="3.非静态代码块"></a>3.非静态代码块</h4><ul>
<li>内部可以有输出语句 </li>
<li>随着对象的创建而执行</li>
<li>每创建一个对象，就执行一次非静态代码块</li>
<li>作用：可以在创建对象时，对对象属性等进行初始化</li>
<li>一个类可以定义多个非静态代码块，而且按声明先后顺序执行</li>
<li>非静态代码块内可以调用静态的属性，静态的方法或非静态的属性，非静态的方法</li>
</ul>
<h4 id="2-属性赋值总结"><a href="#2-属性赋值总结" class="headerlink" title="2.属性赋值总结"></a>2.属性赋值总结</h4><ul>
<li>默认初始化</li>
<li>显式初始化</li>
<li>在代码块中赋值</li>
<li>构造器初始化</li>
<li>通过<code>对象.属性</code>的方式赋值</li>
</ul>
<p>按照由上到下的顺序先后执行</p>
<h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><h4 id="1-final概念"><a href="#1-final概念" class="headerlink" title="1.final概念"></a>1.final概念</h4><ul>
<li><p>final意为最终的，可以禁止对修饰对象进一步的更改修饰</p>
</li>
<li><p>final可以用来修饰类，方法，变量</p>
</li>
</ul>
<h4 id="2-final修饰"><a href="#2-final修饰" class="headerlink" title="2.final修饰"></a>2.final修饰</h4><ul>
<li>被修饰的类不能被其他类所继承</li>
<li>被修饰的方法不能被重写</li>
<li>被修饰的变量被称为常量</li>
<li>被修饰的变量为属性：其可以被赋值的位置有：显式初始化，代码块中初始化，构造器中初始化</li>
<li>被修饰的变量为局部变量：尤其是修饰形参时，表名此时形参是一个常量。当我们调用此方法时，给常量形参赋一个实参，一旦赋值以后，就只能在方法体内使用此形参，但不能重新赋值</li>
<li>static final 修饰属性：全局常量</li>
</ul>
<h3 id="抽象类与抽象方法"><a href="#抽象类与抽象方法" class="headerlink" title="抽象类与抽象方法"></a>抽象类与抽象方法</h3><p>父类在设计中要求更一般，更通用。但一个父类设计得非常抽象时，以至于它没有任何具体实例，这样得类称为抽象类</p>
<h4 id="1-abstract的使用"><a href="#1-abstract的使用" class="headerlink" title="1.abstract的使用"></a>1.abstract的使用</h4><ul>
<li>abstract意为抽象的</li>
<li>abstract可以修饰的结构：类，方法</li>
<li>abstract不能修饰私有方法，静态方法，final的方法，final的类</li>
</ul>
<h4 id="2-抽象类特点"><a href="#2-抽象类特点" class="headerlink" title="2.抽象类特点"></a>2.抽象类特点</h4><ul>
<li>abstract修饰的类不能实例化</li>
<li>抽象类中一定有构造器，便于子类实例化时调用</li>
<li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关操作</li>
<li>抽象类的匿名子类</li>
</ul>
<h4 id="3-抽象方法特点"><a href="#3-抽象方法特点" class="headerlink" title="3.抽象方法特点"></a>3.抽象方法特点</h4><ul>
<li>抽象方法只有方法声明，没有方法体</li>
<li>包含抽象方法的类，一定是一个抽象类</li>
<li>只有子类重写了父类所有的抽象方法后，此子类才能实例化（否则子类也是个抽象类）</li>
</ul>
<h4 id="4-抽象类应用"><a href="#4-抽象类应用" class="headerlink" title="4.抽象类应用"></a>4.抽象类应用</h4><ul>
<li>模板方法设计模式：抽象类作为多个子类的通用模板，子类在抽象类基础上进行拓展，改造</li>
<li>模板方法设计可以让固定通用的步骤在父类中写好，然后将易变的部分抽象出来，供不同的子类实现</li>
</ul>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="1-接口概述"><a href="#1-接口概述" class="headerlink" title="1.接口概述"></a>1.接口概述</h4><ul>
<li>有时必须从几个类中派生出一个子类，让子类继承它们所以的属性和方法，但是Java是不支持多重继承的（继承中子类只能有一个父类），这时候就需要用到接口</li>
<li>有时必须从几个类中抽取一些共同的行为特征。，而它们之间不存在继承关系，这时候也要用到接口</li>
<li>继承是一个“是不是”的关系，而接口则是“能不能”的关系（体现了如果你是/要……则必须能……）</li>
<li>接口的本质是契约，标准，规范</li>
</ul>
<h4 id="2-接口的使用"><a href="#2-接口的使用" class="headerlink" title="2.接口的使用"></a>2.接口的使用</h4><ul>
<li>类和接口时并列的两个结构</li>
<li>接口使用interface来定义</li>
<li>接口中可以定义全局变量，抽象方法，静态方法，默认方法</li>
<li>接口中不能定义构造器，这意味着接口不能实例化</li>
<li>接口中定义的静态方法只能通过接口调用</li>
<li>通过实现类的对象，可以调用接口中的默认方法（而不是像抽象方法那样要先重写抽象类才能实例化，实现类也可以重写接口的默认方法）</li>
<li>接口可以通过让类去实现（implements）的方式来使用，如果实现类覆盖了接口所有抽象方法，则实现类可以实例化，如果没有则仍为一个抽象类</li>
<li>Java可以实现多个接口，弥补了Java单继承性的局限性，格式：<code>class AA extends BB implements CC,DD,EE</code></li>
<li>接口与接口之间也可以继承，而且是多继承</li>
</ul>
<h4 id="3-接口的优点"><a href="#3-接口的优点" class="headerlink" title="3.接口的优点"></a>3.接口的优点</h4><ul>
<li>接口的具体使用，体现多态性  </li>
<li>接口实际上可以看作是一种规范，实现其接口的类必须按步骤（规范）实现相关的方法才能运行</li>
<li>接口的主要用途就是被实现类实现</li>
</ul>
<h4 id="4-接口应用"><a href="#4-接口应用" class="headerlink" title="4.接口应用"></a>4.接口应用</h4><p>（1）代理模式：</p>
<ul>
<li><p>为其他对象提供一种代理以控制对这个对象的访问</p>
</li>
<li><p>安全代理：可以屏蔽真实对象的直接访问</p>
</li>
<li><p>远程代理：通过代理类处理远程方法调用</p>
</li>
<li><p>延迟加载：先加载轻量级的代理对象，真正需要再加载真实的对象</p>
</li>
</ul>
<p>（2）工厂设计模式</p>
<ul>
<li>实现创建者与调用者的分离，即将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的</li>
<li>简单工厂模式：用来生产同一等级结构中任意产品（对于增加新产品，需要修改已有代码）</li>
<li>工厂方法模式：用来生成同一等级结构中的固定产品（支持增加任意产品）</li>
<li>抽象工厂模式：用来生产不同产品族的全部产品（对于增加新的产品，无能为力，支持增加产品族）</li>
</ul>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>在A类中定义了另一个类B，则A为外部类，B为内部类</p>
<p>内部类有两种：成员内部类和局部内部类（此类在开发中很少被使用）</p>
<h4 id="1-成员内部类"><a href="#1-成员内部类" class="headerlink" title="1.成员内部类"></a>1.成员内部类</h4><p>（1）作为外部类的成员</p>
<ul>
<li>调用外部类的结构</li>
<li>可以被static修饰</li>
<li>可以被4种不同的权限修饰</li>
</ul>
<p>（2）作为一个类</p>
<ul>
<li>可以在类内定义属性，方法，构造器</li>
<li>可以被final修饰，表示此类不能被继承</li>
<li>可以被abstract修饰</li>
</ul>
<p>（3）调用</p>
<ul>
<li>实例化成员内部类的对象：（通过点运算符：<code>Person.Dog dog = new Person.Dog()</code> ）</li>
<li>在成员内部类种区分调用外部类的结构（属性方法）：通过this</li>
</ul>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h3><p>异常：程序执行中发生的不正常情况被称为“异常”（开发过程中的语法错误和逻辑错误不是异常）</p>
<h4 id="1-异常分类"><a href="#1-异常分类" class="headerlink" title="1.异常分类"></a>1.异常分类</h4><p>（1）Error型：Java虚拟机无法解决的严重问题，一般不编写针对性代码进行处理</p>
<ul>
<li>JVM系统内部错误</li>
<li>资源耗尽</li>
</ul>
<p>（2）Exception型：其他因编程原因或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理</p>
<ul>
<li>空指针访问</li>
<li>试图读取不存在的文件</li>
<li>网络连接中断</li>
<li>数组角标越界</li>
</ul>
<p>Exception分类：编译异常，运行异常</p>
<h4 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h4><ul>
<li>遇到错误终止程序运行</li>
<li>编写程序时，错误检测，错误消息的提示，以及错误的处理</li>
<li>捕获异常最理想的是在编译期间，但是有的错误只有在运行时才能发生（Exception分类：编译异常，运行异常）</li>
<li>异常处理中，要在可能出现错误的地方加上检测代码</li>
<li>过多的if-else封装会导致代码臃肿，可读性差，因此采用异常处理机制</li>
<li>在开发中运行异常比较常见，所以我们往往针对编译时的异常编写异常捕捉代码</li>
<li>手动生成一个异常对象，并用throw方法抛出</li>
</ul>
<h4 id="3-异常处理"><a href="#3-异常处理" class="headerlink" title="3.异常处理"></a>3.异常处理</h4><p>（1）try-catch-finally</p>
<ul>
<li>try{可能出现异常的代码}catch{异常类型 变量名}finally{一定会执行的代码}</li>
<li>finally是可选的</li>
<li>try中的代码执行过程中一旦出现异常就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配</li>
<li>一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常处理，一旦处理完成就跳出当前try-catch结构，有finally则进入finally中</li>
<li>常用的异常对象处理方式（放在catch中）：1.String getMessage()：打印出异常信息   2.printStackTrace()：打印整个错误对象信息（比较常用）</li>
<li>在try中声明的变量，再出了try结构后，就不能再被调用</li>
</ul>
<p>try-catch相当于将一个编译时可能出现的异常，延迟到运行时出现</p>
<p>（2）finally解析</p>
<ul>
<li>finally声明的是一定会被执行的代码，无论有没有捕捉到异常都会执行</li>
<li>先数据库连接，输入输出流，网络编程Socket等资源，JVM是不能自动的回收，所以我们需要手动的进行资源的释放。此时的资源释放就要声明到finally中</li>
</ul>
<p>（3）throws + 异常处理</p>
<ul>
<li>throws + 异常处理写在方法声明处，指明此方法执行时，可能会抛出的异常类型，一旦当方法体执行时，出现异常，仍然会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出</li>
<li>try-catch-finally是真正的将异常处理掉了，throws的方式只是将异常抛出</li>
</ul>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h3><h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><p>（1）程序与进程</p>
<ul>
<li>程序是为了完成特定任务，用某种语言编写的一组指令的集合，即指一段静态代码，静态对象</li>
<li>进程是程序的一次执行过程，是一个动态的过程：有自身的产生，存在和消亡的过程</li>
<li>程序是静态的，进程是动态的。进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</li>
</ul>
<p>（2）线程与进程</p>
<ul>
<li>进程可以细化为线程，是一个程序内部的一条执行路径</li>
<li>一个Java应用程序至少有三个线程：main()主线程，gc()垃圾回收线程, 异常处理线程</li>
<li>线程作为调度和执行的单位，每个线程都拥有独立的运行栈和程序计数器，线程切换的开销小</li>
<li>一个进程中的多个线程共享相同的内存单元/内存地址空间（从同一堆中分配对象，可以访问相同变量和对象），这使线程间通信更加简洁，高效，但是也带来了安全隐患</li>
</ul>
<p>（3）并发与并行</p>
<ul>
<li>并行：多个CPU同时执行多个任务</li>
<li>并发：一个CPU同时执行多个任务</li>
</ul>
<h4 id="2-多线程的应用"><a href="#2-多线程的应用" class="headerlink" title="2.多线程的应用"></a>2.多线程的应用</h4><p>（1）多线程的优点</p>
<ul>
<li>提高应用程序的响应，对图形化界面更有意义</li>
<li>提高计算机相同CPU的利用率</li>
<li>改善程序结构，将长而复杂的进程分为多个线程独立运行，利于理解和修改</li>
</ul>
<p>（2）多线程使用场景</p>
<ul>
<li>程序需要同时执行多个任务</li>
<li>程序需要实现一些需要等待的任务（用户输入，文件读写操作，网络操作，搜索）</li>
<li>需要一些后台运行的程序</li>
</ul>
<h4 id="3-线程的创建与使用"><a href="#3-线程的创建与使用" class="headerlink" title="3.线程的创建与使用"></a>3.线程的创建与使用</h4><p>（1）多线程的创建（继承Thread类）</p>
<ul>
<li><p>创建一个继承于Tread类的子类</p>
</li>
<li><p>重写Thread类的run()：声明此线程执行的操作</p>
</li>
<li><p>创建Thread类的子类对象</p>
</li>
<li><p>通过此对象调用start()：启动当前线程；调用当前线程的run() </p>
</li>
<li><p>不能直接调用run()的方式启动线程</p>
</li>
</ul>
<h4 id="4-线程常用方法"><a href="#4-线程常用方法" class="headerlink" title="4.线程常用方法"></a>4.线程常用方法</h4><ul>
<li><p>start()：启动线程，调用当前线程的run()</p>
</li>
<li><p>run()：线程被调度时执行的操作</p>
<p>getName()：返回线程名称</p>
</li>
<li><p>setName(String name) ：设置线程名称</p>
</li>
<li><p>yield()：释放当前CPU的执行权</p>
</li>
<li><p>join()：在线程a中调用线程b的jion()，线程a进入阻塞状态直到线程b执行完</p>
</li>
<li><p>sleep(long millitime)：让当前线程睡眠，当前线程是阻塞状态</p>
</li>
<li><p>isAlive()：判断当前线程是否存活</p>
</li>
<li><p>stactic Thread currentThread()：返回当前线程</p>
</li>
</ul>
<h4 id="5-线程优先级设置"><a href="#5-线程优先级设置" class="headerlink" title="5.线程优先级设置"></a>5.线程优先级设置</h4><p>（1）线程的调度</p>
<ul>
<li>调度策略：抢占式，高优先级的线程抢占CPU</li>
<li>调度方法：对同优先级线程组成先进先出队列，使用时间片策略; 对高优先级，使用优先调度的抢占式策略</li>
</ul>
<p>（2）线程优先级</p>
<ul>
<li>线程优先级等级：MAX_PRIORITY(10)，MIN_PRIORITY(1)，NORM_PRIORITY(5)</li>
<li>涉及的方法：getPriority()：返回线程优先级；setPriority(int newPriority)：改变线程优先级</li>
<li>线程创建时继承父线程的优先级</li>
<li>低优先级只是获得调度的概率低，并非一定是高优先级线程后才被调用</li>
</ul>
<h4 id="6-创建多线程方式"><a href="#6-创建多线程方式" class="headerlink" title="6.创建多线程方式"></a>6.创建多线程方式</h4><p>（1）继承Thread方式</p>
<ul>
<li>多线程时可用静态变量，让每个线程处理的数据都是在同一个地方，而不是又重新创建一个数据对象</li>
</ul>
<p>（2）创建多线程的方式二：实现Runnable接口</p>
<ul>
<li>创建一个实现Runnable接口的类（该实现类定义的变量也是线程公用的）</li>
<li>实现类去实现Runnable中的抽象方法：run()</li>
<li>创建实现类的对象</li>
<li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li>
<li>通过Thread类的对象调用start()</li>
</ul>
<p>（3）创建多线程的新方法：实现Callable接口</p>
<ul>
<li>call()可以有返回值</li>
<li>call()可以抛出异常，被外面的操作捕获，获得异常的信息</li>
<li>Callable支持泛型</li>
</ul>
<p>（4）创建多线程的新方法：使用线程池</p>
<ul>
<li>经常创建销毁，使用量特别大的资源，对性能影响很大</li>
<li>提前创建多个线程，放入线程池中，使用时直接获取，使用完放回池中，可以避免频繁创建销毁，实现重复利用</li>
<li>好处：提高了响应速度; 降低资源消耗; 便于线程管理;</li>
</ul>
<p>  （5）比较两种创建多线程的方式</p>
<ul>
<li>开发中优先现在实现Runnable接口的方式</li>
<li>原因：1.实现方式没有类的单继承性的局限性  2.实现的方式更适合来处理多个线程有共享数据的情况</li>
<li>联系：两种方式都需要重写run()，将线程要执行的逻辑声明在run()中</li>
</ul>
<h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><h4 id="1-线程的生命周期"><a href="#1-线程的生命周期" class="headerlink" title="1.线程的生命周期"></a>1.线程的生命周期</h4><p>（1）线程状态</p>
<ul>
<li>新建：当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</li>
<li>就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它具备运行的条件，只是没有分配到CPU资源</li>
<li>运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run()方法定义了线程的操作和功能</li>
<li>阻塞：线程被人为挂起或执行输入输出操作时，让出CPU并临时中止执行的执行进入阻塞状态</li>
<li>死亡：线程完成了全部工作或线程被提前强制性中止或出现异常导致结束</li>
</ul>
<p>（2）线程状态转换</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945714.png" alt="image-20210423073620432"></p>
<h4 id="2-线程同步"><a href="#2-线程同步" class="headerlink" title="2.线程同步"></a>2.线程同步</h4><p>（1）多线程存在问题</p>
<ul>
<li><p>多个线程执行的不确定性引起执行结构的不稳定</p>
</li>
<li><p>多个线程对数据的共享，会造成操作的不完整性，会破坏数据</p>
</li>
<li><p>线程的安全问题：（数据重复，数据错误）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945201.png" alt="image-20210423074125257"></p>
</li>
<li><p>线程安全问题出现的原因：当某个线程在操作数据时，尚未完成操作，其他线程就参与进来，也操作了车票</p>
</li>
</ul>
<p>（2）线程安全问题的解决</p>
<ul>
<li><p>当一个线程在操作共享数据时，其他线程不能参与进来，直到该线程完成操作（即时出现了阻塞也不能改变）</p>
</li>
<li><p>通过同步机制解决线程安全问题：1.同步代码块; 2.同步方法；</p>
</li>
<li><p>同步代码块：synchroized(同步监视器){需要同步的代码}，操作共享数据的代码，即为需要同步的代码</p>
</li>
<li><p>同步监视器就是我们所熟悉的锁（任何一个类的对象都可以充当锁），多个线程必须共用一把锁</p>
</li>
<li><p>同步方法：在方法中使用synchroized修饰方法，然后再调用</p>
</li>
<li><p>同步方法：1.同步方法仍涉及到同步监视器，只是不需要显式声明; 2.非静态的同步方法监视器是this; 3.静态的同步方法监视器是当前类本身 </p>
</li>
<li><p>操作同步代码时实质上是单线程过程，效率低（一个线程操作，其他线程等待）</p>
</li>
</ul>
<h4 id="3-线程死锁问题"><a href="#3-线程死锁问题" class="headerlink" title="3.线程死锁问题"></a>3.线程死锁问题</h4><p>（1）死锁原理</p>
<ul>
<li>不同线程分别占用了对方需要的同步资源，都在等待对方放弃自己需要的同步资源，就会形成线程的死锁</li>
<li>出现死锁后，不会出现异常或错误提示，只是所有线程都处在阻塞状态，无法继续</li>
</ul>
<p>（2）解决方法</p>
<ul>
<li>专门的算法，原则</li>
<li>尽量减少同步资源的定义</li>
<li>尽量避免嵌套同步</li>
</ul>
<h4 id="4-Lock-锁"><a href="#4-Lock-锁" class="headerlink" title="4.Lock(锁)"></a>4.Lock(锁)</h4><p>Java提供了更加强大的线程同步机制——通过显式定义同步锁对象来实现同步，其同样可以解决线程安全问题</p>
<p>（1）Lock与synchroized的异同</p>
<ul>
<li>同：两者都可以解决线程问题</li>
<li>异：synchroized执行同步代码后，自动释放同步监视器; Lock需要手动启动同步（lock()），手动结束同步（unlock()）</li>
<li>Lock只有代码块锁，synchroized有代码块锁和方法锁</li>
<li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好，并具有更好的扩展性</li>
</ul>
<p>（2）使用顺序</p>
<p>Lock -&gt; 同步代码块-&gt; 同步方法</p>
<h4 id="5-线程通信"><a href="#5-线程通信" class="headerlink" title="5.线程通信"></a>5.线程通信</h4><p>（1）常用方法</p>
<ul>
<li>wait()：一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器</li>
<li>notify()：一旦执行此方法，就会唤醒被wait的一个线程，如果有多个线程被wait，就唤醒优先级高的线程</li>
<li>notifyAll()：一旦执行此方法，就会唤醒所有被wait的线程</li>
</ul>
<p>以上三个方法必须用在同步代码块或同步方法中</p>
<p>（2）sleep()和wait()的异同</p>
<ul>
<li>同：一旦执行方法，都可以使得当前得线程进入阻塞状态</li>
<li>异：1.声明位置不同   2.调用要求不同 3.是否释放同步监视器</li>
</ul>
<h2 id="Java常用类"><a href="#Java常用类" class="headerlink" title="Java常用类"></a>Java常用类</h2><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><h4 id="1-String概述"><a href="#1-String概述" class="headerlink" title="1.String概述"></a>1.String概述</h4><ul>
<li>String类代表字符串</li>
<li>Stirng是一个final类（ 不可被继承），代表不可变的字符串序列</li>
<li>字符串是常量，值在创建后不能更改</li>
<li>String对象的字符内容是存储在一个字符数组value[]中的</li>
<li>通过字面量的方式（区别于new）给一个字符串赋值，此时字符串声明在字符串常量池中（方法区）</li>
<li>字符串常量池不会存储相同内容的字符串，故栈中不同的局部变量如果赋相同字面量，实际指向方法区同一位置（地址相同）</li>
</ul>
<h4 id="2-String实现接口"><a href="#2-String实现接口" class="headerlink" title="2.String实现接口"></a>2.String实现接口</h4><ul>
<li>Serializable接口：表示字符串支持序列化</li>
<li>Comparable接口：表示字符串可以比较大小</li>
</ul>
<h4 id="3-不可变性体现"><a href="#3-不可变性体现" class="headerlink" title="3.不可变性体现"></a>3.不可变性体现</h4><ul>
<li>当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值</li>
<li>对现有的字符串进行连接操作、修改操作时，也需要重新指定内存区域赋值</li>
</ul>
<h4 id="4-String实例化"><a href="#4-String实例化" class="headerlink" title="4.String实例化"></a>4.String实例化</h4><p>（1）String实例化方式：</p>
<ul>
<li>通过字面量定义（数据存储在在方法区字符串常量池中，字符串作为常量，各变量共享一个数据空间）：<code>String s1 = &quot;2333&quot;</code></li>
<li>通过new  + 构造器（字符串数据仍然存储在常量池中，但是字符串的引用值存储在堆中，每创建一个字符串都会在堆中开辟新的空间存储字符串的引用值）：<code>String s3  = new String(&quot;javaEE&quot;)</code></li>
</ul>
<p>（2）String s3  = new String(“test”)对象个数</p>
<ul>
<li>两个对象：一个是堆空间中的new结构，另一个char[]对应变量池中的数据</li>
</ul>
<p>（3）字符串的拼接</p>
<ul>
<li><p>常量与常量的拼接结果在常量池，且常量池中不会存在相同内容的变量</p>
</li>
<li><p>只要拼接的两个对象中其中一个为变量，结果位于堆中</p>
</li>
<li><p>拼接结果调用intern方法，返回值就在常量中</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945850.png" alt="image-20210423113251323"></p>
</li>
</ul>
<h4 id="5-String常用方法"><a href="#5-String常用方法" class="headerlink" title="5.String常用方法"></a>5.String常用方法</h4><ul>
<li>length()：返回字符串长度</li>
<li>charAt()：返回某索引处的字符</li>
<li>isEmpty()：判断是否为空字符串</li>
<li>toLowerCase()：转换为小写</li>
<li>toUpperCase()：转换为大写</li>
<li>trim()：返回字符串副本，忽略空白处</li>
<li>equals()：比较字符串内容是否相同</li>
<li>concat()：将指定字符串连接到此字符串结尾</li>
<li>compareTo：比较两个字符串大小</li>
<li>substring()：截取出新的字符串</li>
<li>endsWith：测试字符串是否以指定的后缀结束</li>
<li>startsWith：测试此字符串是否以指定的前缀开始</li>
<li>contains：字符串是否包含指定char值序列</li>
<li>indexOf：返回指定子字符串第一次出现处的索引</li>
<li>rplace(): 替换掉字符串中指定的子字符串</li>
<li>replaceAll()：替换掉字符串所匹配正则表达式的子字符串</li>
<li>matches()：判断字符串是否匹配给定的正则表达式</li>
<li>split()：根据给定的正则表达式的匹配拆分此字符串</li>
</ul>
<h4 id="6-String数据类型转换"><a href="#6-String数据类型转换" class="headerlink" title="6.String数据类型转换"></a>6.String数据类型转换</h4><p>（1）String与基本数据类型，包装类的转换</p>
<ul>
<li>String –&gt; 基本数据类型，包装类：调用包装类的静态方法：parseXxx(str)</li>
<li>基本数据类型，包装类 –&gt; String：调用String重载的valueOf(xxx)</li>
</ul>
<p>（2）String与char[]的转换</p>
<ul>
<li>String –&gt; char[]：调用String的toCharArray()</li>
<li>char[] –&gt; String：调用String的构造器</li>
</ul>
<h4 id="7-String，StringBuffer，StringBuilder"><a href="#7-String，StringBuffer，StringBuilder" class="headerlink" title="7.String，StringBuffer，StringBuilder"></a>7.String，StringBuffer，StringBuilder</h4><p>（1）比较</p>
<ul>
<li>String:不可变的字符序列，底层使用char[]存储</li>
<li>StringBuffer：可变的字符序列，线程安全，效率低，底层使用char[]存储</li>
<li>StringBuffer：可变的字符序列，线程不安全，效率高，底层使用char[]存储</li>
<li>执行效率：StringBuilder &gt; StringBuffer &gt; String，开发中推荐使用StringBuffer</li>
</ul>
<p>（2）StringBuffer常用方法</p>
<ul>
<li>append()：提供很多append()方法，用于进行字符串拼接</li>
<li>delete()：删除指定位置的内容</li>
<li>replace()：替换指定索引位置的内容</li>
<li>insert()：在指定位置插入xxx</li>
<li>reverse()：把当前字符序列逆转</li>
</ul>
<h3 id="Java比较器"><a href="#Java比较器" class="headerlink" title="Java比较器"></a>Java比较器</h3><p>Java中的对象，正常情况下只能进行比较：==  或 != ，不能使用 &gt; 或 &lt; 的。但是在开发场景中我们需要对多个对象进行排序，就要用到两个接口：Comparable 或  Comparator</p>
<h4 id="1-Comparable接口"><a href="#1-Comparable接口" class="headerlink" title="1.Comparable接口"></a>1.Comparable接口</h4><p>（1）Comparable接口使用</p>
<ul>
<li>像String，包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出比较两个对象大小的方式</li>
<li>可以重写compareTo(obj)的规则</li>
</ul>
<p>（2）自定义类实现Comparable自然排序</p>
<ul>
<li>对于自定义类，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法，在其中指明如何排序</li>
<li>可以重写compareTo(obj)的规则：<ol>
<li>​    如果当前对象大于obj,返回正整数</li>
<li>​    如果当前对象小于obj,返回负整数</li>
<li>​    如果当前对象大于obj,返回零</li>
</ol>
</li>
</ul>
<h4 id="2-Comparator接口"><a href="#2-Comparator接口" class="headerlink" title="2.Comparator接口"></a>2.Comparator接口</h4><ul>
<li>重写compare(Object o1，Object o2)方法，比较o1和o2大小<ol>
<li>​    方法返回正整数，则表示o1大于o2</li>
<li>​    返回0，表示相等</li>
<li>​    返回负整数，表示o1小于o2</li>
</ol>
</li>
<li>Comparable接口的实现类的对象在任何位置都可以比较大小</li>
<li>Comparator接口属于临时性的比较</li>
</ul>
<h3 id="其他常用类"><a href="#其他常用类" class="headerlink" title="其他常用类"></a>其他常用类</h3><h4 id="1-时间类"><a href="#1-时间类" class="headerlink" title="1.时间类"></a>1.时间类</h4><h4 id="2-System类"><a href="#2-System类" class="headerlink" title="2.System类"></a>2.System类</h4><h4 id="3-Math类"><a href="#3-Math类" class="headerlink" title="3.Math类"></a>3.Math类</h4><h4 id="4-BigInteger和BigDecimal"><a href="#4-BigInteger和BigDecimal" class="headerlink" title="4.BigInteger和BigDecimal"></a>4.BigInteger和BigDecimal</h4><h2 id="枚举类与注解"><a href="#枚举类与注解" class="headerlink" title="枚举类与注解"></a>枚举类与注解</h2><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><h4 id="1-枚举类的使用"><a href="#1-枚举类的使用" class="headerlink" title="1.枚举类的使用"></a>1.枚举类的使用</h4><ul>
<li>类的对象只能是有限个，确定的，我们称此类为枚举类</li>
<li>当需要定义一组常量时，强烈建议使用枚举类</li>
<li>如果枚举类只有一个对象，则可以作为单例模式实现</li>
</ul>
<h4 id="2-枚举类的定义"><a href="#2-枚举类的定义" class="headerlink" title="2.枚举类的定义"></a>2.枚举类的定义</h4><ul>
<li><p>方式一：jdk5之前，自定义枚举类</p>
<ol>
<li>声明对象属性（private final修饰）</li>
<li>私有化类的构造器</li>
<li>提供当前多个枚举类的多个对象</li>
<li>其他诉求：获得枚举类对象的属性，提供toString()</li>
</ol>
</li>
</ul>
<ul>
<li><p>方式二：jdk5，可以使用enum关键字定义枚举类</p>
<ol>
<li><p>创建当前枚举类的对象，多个对象用“,”隔开，末尾对象”;”结束</p>
</li>
<li><p>声明对象属性（private final修饰）</p>
</li>
<li><p>提供当前多个枚举类的多个对象</p>
</li>
<li><p>其他诉求：获得枚举类对象的属性</p>
</li>
</ol>
</li>
</ul>
<h4 id="3-Enum类中常用方法"><a href="#3-Enum类中常用方法" class="headerlink" title="3.Enum类中常用方法"></a>3.Enum类中常用方法</h4><ul>
<li><p>values：返回枚举类型的对象数组</p>
</li>
<li><p>valueOf(String str)：可以把一个字符串转为对应枚举类对象</p>
</li>
<li><p>toString()：返回当前枚举类对象常量名称</p>
</li>
</ul>
<h4 id="4-枚举类实现接口"><a href="#4-枚举类实现接口" class="headerlink" title="4.枚举类实现接口"></a>4.枚举类实现接口</h4><ul>
<li>实现接口，在enum类中实现抽象方法</li>
<li>让枚举类的对象分别实现接口中的抽象方法</li>
</ul>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="1-注解说明"><a href="#1-注解说明" class="headerlink" title="1.注解说明"></a>1.注解说明</h4><ul>
<li>注解是代码里的特殊标记，这些标记可以在编译，类加载，运行时被读取，并执行响应操作。</li>
<li>利用注解，我们可以在不改变原有逻辑的情况下，在源文件嵌入一些补充信息。框架 = 注解 + 反射 + 设计模式</li>
</ul>
<h4 id="2-注解示例"><a href="#2-注解示例" class="headerlink" title="2.注解示例"></a>2.注解示例</h4><ul>
<li>生成文档的相关注解</li>
<li>在编译时进行格式检查</li>
<li>跟踪代码依赖性，实现替代配置文件功能</li>
<li>spring框架中关于“事务”的管理</li>
<li>Junit单元测试中也有大量注解的使用</li>
</ul>
<h4 id="3-JDK内置基本注解"><a href="#3-JDK内置基本注解" class="headerlink" title="3.JDK内置基本注解"></a>3.JDK内置基本注解</h4><ul>
<li>@Override：限定重写父类方法，在编译前校验该方法是否是重写父类的</li>
<li>@Deprecated：用于表示所修饰的元素（已过时）。通常是因为所修饰的结构危险或者存在更好的选择</li>
<li>@SuppressWarnings：抑制编译器警告</li>
</ul>
<h4 id="4-自定义注解"><a href="#4-自定义注解" class="headerlink" title="4.自定义注解"></a>4.自定义注解</h4><ul>
<li>注解声明为@interface</li>
<li>内部定义成员，通常用value表示</li>
<li>可以指定成员的默认值，使用default定义</li>
<li>如果自定义注解没有成员，表明是一个标识作用</li>
<li>如果注解有成员，在使用注解时，需要指明成员的类</li>
<li>自定义注解必须配送注解的信息处理流程（使用反射）才用意义</li>
<li>自定义注解通过都非指明两个元注解：Retention，Target</li>
</ul>
<h4 id="5-基本元注解"><a href="#5-基本元注解" class="headerlink" title="5.基本元注解"></a>5.基本元注解</h4><p>元注解：对现有的注解进行解释说明的注解</p>
<ul>
<li>Rentention：指定所修饰的Annotation的生命周期，只有生命为RUNTIME生命周期的注解才能通过反射获取</li>
<li>Target：用于指定被修饰的Annotation能用于修饰哪些程序元素</li>
<li>Documented：表示所修饰的注解被javadoc解析时，保留下来</li>
<li>Inherited：被它修饰的Annotation将具有继承性</li>
</ul>
<p>通过反射可以获取注解信息</p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合，数组都是对多个数据进行存储操作的结构，简称Java容器（这里的存储主要是指内存层面的存储。不涉及到持久化的存储）</p>
<p>Java集合就像一种容器，可以动态地把多个对象的引用放入容器中</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945892.png" alt="image-20210424101354876"></p>
<h3 id="数组简介"><a href="#数组简介" class="headerlink" title="数组简介"></a>数组简介</h3><h4 id="1-数组存储缺点"><a href="#1-数组存储缺点" class="headerlink" title="1.数组存储缺点"></a>1.数组存储缺点</h4><ul>
<li>一旦初始化以后，其长度就不可修改了</li>
<li>数组中提供的方法非常有限，对于添加，删除，插入数据等操作，非常不便，效率不高</li>
<li>获取数据实际元素个数没有现成的属性和方法</li>
<li>数组存储数据特点：有序，可重复。对于无序，不可重复的需求，不能满足</li>
</ul>
<h3 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h3><p>单列数据，定义了存储一组对象的方法集合</p>
<h4 id="1-Collection接口继承树"><a href="#1-Collection接口继承树" class="headerlink" title="1.Collection接口继承树"></a>1.Collection接口继承树</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945760.png" alt="image-20210424101922654"></p>
<h4 id="2-Collection接口常用方法"><a href="#2-Collection接口常用方法" class="headerlink" title="2.Collection接口常用方法"></a>2.Collection接口常用方法</h4><ul>
<li>add(Object e)：将元素e添加到集合coll中</li>
<li>size()：获得添加的元素个数</li>
<li>addAll(Collection coll1)：将coll1集合中的元素添加到当前的集合中</li>
<li>isEmpty()：判断当前集合是否为空</li>
<li>clear()：清空集合元素</li>
<li>contains(Object obj)：判断当前集合是否包含obj </li>
<li>containsAll(Collecion coll1)：判断colls中的所有元素是否都存在于当前集合中</li>
<li>remove(Object obj)：从当前集合中移除obj元素</li>
<li>remove(Collecion coll1)：从当前集合中移除coll1中所有元素（移除差集）</li>
<li>retain(Collecion coll1)：获取当前集合与coll1集合的交集，并返回给当前集合</li>
<li>equals(Object obj)：要想返回true，需要当前集合和形参集合的元素都相同</li>
<li>hasCode()：返回当前对象的哈希值</li>
<li>toArray()：集合—-&gt;数组（数组—&gt;集合：调用Araays类的静态方法asList()）</li>
</ul>
<h4 id="3-集合遍历"><a href="#3-集合遍历" class="headerlink" title="3.集合遍历"></a>3.集合遍历</h4><p>（1）迭代器Iterator接口</p>
<ul>
<li>Iterator对象称为迭代器（设计模式的一种），主要用于遍历Collection集合的元素</li>
<li>迭代器模式：提供一种方法访问一个容器对象中各个元素，而又不需要暴露该对象的内部细节（迭代器，为容器而生）</li>
<li>迭代器Iterator内部方法：hasNext()和next()</li>
<li>迭代器执行原理：hasNext()判断是否还有下个元素; next()让指针下移</li>
<li>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都集合在第一个元素之前</li>
<li>remove()可以在遍历时，删除集合中的元素（区别于Collection接口的remove方法，这个要先调用next() ）</li>
</ul>
<p>（2）foreach循环遍历集合元素</p>
<ul>
<li>其内部仍然调用了迭代器</li>
<li>for(集合元素的类型 局部变量:集合对象)</li>
<li>foreach可以遍历数组和集合</li>
</ul>
<h4 id="4-List接口"><a href="#4-List接口" class="headerlink" title="4.List接口"></a>4.List接口</h4><p>存储有序的，可重复的数据（“动态”数组）</p>
<p>（1）List三个实现类ArrayList，LinkedList，Vector的异同</p>
<ul>
<li>同：都实现了List接口，存储数据特点相同：存储有序的，可重复的数据</li>
<li>异：<ol>
<li>ArrayList：底层使用Object[] elementData存储；作为List接口主要实现类，线程不安全，效率高；</li>
<li>LinkList：底层使用双向链表存储；对于频繁的插入，删除操作，使用此类效率比ArrayList高；</li>
<li>Vector：List接口古老实现类;线程安全，效率低；底层使用Object[] elementData存储</li>
</ol>
</li>
</ul>
<p>（2）List常用方法</p>
<ul>
<li>增：add(Object obj)</li>
<li>删：remove(int index)</li>
<li>改：set(int index, Object ele)</li>
<li>查：get(int inedx)</li>
<li>插：add(int index, Object ele)</li>
<li>长度：size()</li>
<li>遍历方法：<ol>
<li>Iterator迭代器方法</li>
<li>增强for循环</li>
<li>普通循环</li>
</ol>
</li>
</ul>
<h4 id="5-Set接口"><a href="#5-Set接口" class="headerlink" title="5.Set接口"></a>5.Set接口</h4><p>存储无序的（set的底层也是数组，但是存储的物理顺序是在申请空间的随机位置），不可重复的数据（数学概念的“集合”）</p>
<p>Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法</p>
<p>（1）Set接口的实现类</p>
<ul>
<li>HashSet：作为Set接口的主要实现类，线程不安全，可以存储null值</li>
<li>LinkedHashSet：作为HashSet的子类，遍历其内部数据时，可以按照添加顺序遍历</li>
<li>TreeSet：可以按照添加对象的指定属性进行排序（底层为红黑树）</li>
</ul>
<p>（2）Set解析</p>
<ul>
<li>无序性：不等同于随机性，存储的数据在底层数组中并发按照数组索引的顺序添加，而是根据数据的哈希值决定的</li>
<li>不可重复性：相同的元素只能添加一个</li>
</ul>
<p>（3）HashSet元素插入过程</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945099.png" alt="image-20210424182729653"></p>
<h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><p>双列数据，保存具有映射关系“key-value”的集合（ y=f(x) ）</p>
<h4 id="1-Map实现"><a href="#1-Map实现" class="headerlink" title="1.Map实现"></a>1.Map实现</h4><p>有两种实现类：HashMap（主要）和Hashtable（古老）</p>
<ul>
<li>HashMap：Map的主要实现类，线程不安全，效率高，可以存储null的key和value（底层为：数组+链表+红黑树）<ol>
<li>LinkedHashMap：保证在遍历map元素时，可以按照添加的顺序实现遍历（有一对指向前和指向后节点的指针，对频繁的遍历操作，执行效率高于HashMap）</li>
</ol>
</li>
<li>TreeMap：保证按照添加的key-value对进行排序，实现排序遍历（key自然排序或自定义排序，底层为红黑树 ）</li>
<li>Hashtable：作为古老的实现类，线程安全，效率低，不能存储null的key和value<ol>
<li>Properties：常用于处理配置文件，key 和 value都是String类型</li>
</ol>
</li>
</ul>
<h4 id="2-Map接口继承树"><a href="#2-Map接口继承树" class="headerlink" title="2.Map接口继承树"></a>2.Map接口继承树</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945354.png" alt="image-20210424102038816"></p>
<h4 id="3-Map结构理解"><a href="#3-Map结构理解" class="headerlink" title="3.Map结构理解"></a>3.Map结构理解</h4><ul>
<li>Map中的key：无序的，不可重复的，使用Set存储所有的key ———–&gt;key所在的类要重写equals()和hashCode()</li>
<li>Map中的value:无序的，可重复的，使用Collection存储所有的value————&gt; value所在类要重写equals()</li>
<li>一个键值对：key-value构成一个Entry对象</li>
<li>Map中的entry：无序的，不可重复的，使用Set存储所有的entry</li>
</ul>
<h4 id="4-HashMap底层实现原理"><a href="#4-HashMap底层实现原理" class="headerlink" title="4.HashMap底层实现原理"></a>4.HashMap底层实现原理</h4><p>（1）jdk7</p>
<ul>
<li><code>HashMap map = new HashMap()</code>：实例化后，底层创建了长度为16的一维数组Entry[] table</li>
<li><code>map.put(key1,value1)</code>：首先调用key所在；类的hasCode计算key哈希值，得到在Entry数组的存放位置</li>
<li>如果此位置上的数据为空，则添加成功</li>
<li>如果此位置上的数据不为空，比较key和已存在的数据的哈希值<ol>
<li>如果key的哈希值与已存在的数据哈希值都不相同，则添加成功</li>
<li>如果与其中一个数据哈希值相同，继续比较其value值：如果返回false，则添加成功，如果返回true，则使用替换相同key的value值</li>
</ol>
</li>
</ul>
<p>（2）jdk8</p>
<p>数组+链表+红黑树</p>
<h4 id="5-Map常用方法"><a href="#5-Map常用方法" class="headerlink" title="5.Map常用方法"></a>5.Map常用方法</h4><p>（1）添加，删除，修改操作</p>
<ul>
<li>Object put(Object key, Object value)：将指定的key-value添加到当前map对象中</li>
<li>void putAll(Map m)：将m中所有的key-value放到当前map中</li>
<li>Object remove(Object key)：移除指定key-value对，并返回value</li>
<li>void clear()：清空当前map中所有数据</li>
</ul>
<p>（2）元素查询操作</p>
<ul>
<li>Object get(Object key)：获取指定key对应的value</li>
<li>boolean containsKey(Object key)：是否包含指定key</li>
<li>boolean containsValue(Object Value)：是否包含指定Value</li>
<li>int size()：返回map中key-value个数</li>
<li>boolean isEmpty()：判断当前map是否为空</li>
<li>boolean equals(Object obj)：判断当前map和参数对象obj是否相等</li>
</ul>
<p>（3）元视图操作的方法</p>
<ul>
<li>Set keySet()：返回所有key构成的Set集合</li>
<li>Collection values()：返回所有value构成的Collection集合</li>
<li>Set entrySet()：返回所有key-value对构成的Set集合</li>
</ul>
<h4 id="6-TreeMap"><a href="#6-TreeMap" class="headerlink" title="6.TreeMap"></a>6.TreeMap</h4><p>用于需要排列的key-value，可以定制排序</p>
<h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><p>Collections是一个操作Set，List和Map等集合的工具类</p>
<h4 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a>1.常用方法</h4><p>（1）排序操作（抽象方法）</p>
<ul>
<li>reverse(List)：反转List中元素的顺序</li>
<li>shuffle(List)：对List集合元素进行随机排序</li>
<li>sort(List)：根据元素的自然顺序对指定List集合元素按升序排序</li>
<li>sort(List, Comparator)：根据指定的Comparator产生的顺序对List集合进行排序</li>
<li>swap(List, int i, int j )：将指定list集合的i和j处元素进行交换</li>
</ul>
<p>（2）查找替换</p>
<ul>
<li>Object max(Collection)：根据自然顺序返回最大元素</li>
<li>Object max(Collection, Comparator)：根据Comparator指定顺序，返回最大元素</li>
<li>Object min(Collection)</li>
<li>Object min(Collection, Comparator)</li>
<li>int frequency(Collection, Object)：返回指定集合元素出现次数</li>
<li>void copy(List dest, List src)：将src中的内容复制到dest中</li>
<li>boolean replaceAll(List list, Object oldVal, Object newVal)：使用新值替换List对象的所有旧值</li>
</ul>
<p>（3）同步控制</p>
<p>Collections类提供多个synchromizedXxx()方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发范围集合时的线程安全问题</p>
<p>将线程不安全的集合类型转换为线程安全的类型</p>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p>（1）数据间的逻辑关系：</p>
<ul>
<li>集合</li>
<li>线性关系（对应Java中的顺序表，链表，栈，队列）</li>
<li>树形结构（对应java中的二叉树）</li>
<li>网状结构（对应java中的图）</li>
</ul>
<h4 id="2-真实结构"><a href="#2-真实结构" class="headerlink" title="2.真实结构"></a>2.真实结构</h4><ul>
<li>顺序表（静态数据结构）：Array，ArrayList</li>
<li>链表（动态数据结构）：LinkedList</li>
</ul>
<h4 id="3-抽象结构"><a href="#3-抽象结构" class="headerlink" title="3.抽象结构"></a>3.抽象结构</h4><ul>
<li>栈</li>
<li>队列</li>
<li>树</li>
<li>图</li>
</ul>
<h2 id="泛型与File"><a href="#泛型与File" class="headerlink" title="泛型与File"></a>泛型与File</h2><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="1-泛型概述"><a href="#1-泛型概述" class="headerlink" title="1.泛型概述"></a>1.泛型概述</h4><p>（1）泛型的出现</p>
<ul>
<li>泛型相当于标签，来确定一个容器实际存放什么类型的对象</li>
<li>把元素的类型设计为一个参数，这个类型参数叫做泛型</li>
</ul>
<p>（2）泛型说明</p>
<ul>
<li>泛型允许在定义类，接口时通过一个标识表示类中某个属性的类型或者某个方法的返回值及参数类型</li>
<li>List<String>表明List只能存放字符串类型对象</String></li>
</ul>
<p>（3）泛型相对Object</p>
<ul>
<li>解决元素储存的安全性问题</li>
<li>解决获取数据元素时，需要类型强制转换的问题</li>
</ul>
<h4 id="2-泛型的使用"><a href="#2-泛型的使用" class="headerlink" title="2.泛型的使用"></a>2.泛型的使用</h4><p>（1）在集合中使用泛型</p>
<ul>
<li>ArrayList <Integer> list =  new ArrayList <Integer>()</Integer></Integer></li>
<li>编译时就会进行类型检查，保证数据安全</li>
<li>避免强转操作</li>
</ul>
<p>（2）泛型使用总结</p>
<ul>
<li><p>在实例化集合类时，可以指明具体的泛型类型</p>
</li>
<li><p>指明完以后，在集合类或接口中函数定义类或接口时，内部结构使用到类的泛型的位置，都指定为实例化时的泛型类型</p>
</li>
<li><p>泛型的类型必须是类，不能是基本数据类型，需要用到基本数据类型的位置用包装类代替</p>
</li>
</ul>
<h4 id="3-泛型结构"><a href="#3-泛型结构" class="headerlink" title="3.泛型结构"></a>3.泛型结构</h4><p>（1）泛型类</p>
<ul>
<li>类的内部结构就可以使用类的泛型</li>
<li>如果定义了泛型类，实例化时没有指明类的泛型，默认为Object类型</li>
<li>如果定义的类带泛型，建议在实例化时指明类的泛型</li>
<li>子类在继承泛型的父类时指明了泛型类型，则实例子类对象时，不在需要指明泛型</li>
<li>泛型不同的引用不能互相赋值</li>
<li>静态方法中不能使用类的泛型</li>
<li>子类除了指定后保留父类的泛型，也可以增加自己的泛型</li>
</ul>
<p>（2）泛型方法</p>
<ul>
<li>在该方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系（泛型方法所属的类是不是泛型类都没有关系）</li>
<li>泛型方法在调用时，指明泛型参数的类型</li>
<li>泛型方法，可以声明为静态</li>
</ul>
<p>（3）通配符</p>
<h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><p>File类属于IO流的内容，可以新建，删除，重命名文件和目录，但是File列不能访问文件本身，访问文件内容需要输入\输出流</p>
<h4 id="1-常用方法-1"><a href="#1-常用方法-1" class="headerlink" title="1.常用方法"></a>1.常用方法</h4><p>（1）获取功能</p>
<p>（2）重命名功能</p>
<p>（3）判断功能</p>
<p>（4）创建，删除方法</p>
<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="IO流原理与分类"><a href="#IO流原理与分类" class="headerlink" title="IO流原理与分类"></a>IO流原理与分类</h3><h4 id="1-IO原理"><a href="#1-IO原理" class="headerlink" title="1.IO原理"></a>1.IO原理</h4><ul>
<li>I/O技术用于处理设备之间的数据传输，如读写文件，网络通讯</li>
<li>在 Java中，数据的输入输出以流（stream）的方式进行</li>
<li>java.io包下提供各种“流”类和接口，以获得不同种类的数据，并通过标准的方法输入或输出数据</li>
</ul>
<h4 id="2-流的分类"><a href="#2-流的分类" class="headerlink" title="2.流的分类"></a>2.流的分类</h4><ul>
<li><p>操作数据单位分类：字节流（InputStream/OutputStream），字符流（Reader/Writer）</p>
</li>
<li><p>流向分类：输入流，输出流</p>
</li>
<li><p>流的角色分类：节点流，处理流（应用上为缓冲流）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945866.png" alt="image-20210505075809772"></p>
</li>
</ul>
<h3 id="文件流操作"><a href="#文件流操作" class="headerlink" title="文件流操作"></a>文件流操作</h3><h4 id="1-读取文件"><a href="#1-读取文件" class="headerlink" title="1.读取文件"></a>1.读取文件</h4><p>从硬盘文件读入数据到内存</p>
<ul>
<li><p>实例化File类对象，指明操作文件</p>
</li>
<li><p>提供具体流</p>
</li>
<li><p>数据的读入方法与结束判断</p>
<p>​    1. read()：返回读入的一个字符，如果达到文件末尾，返回-1）</p>
<p>​    2. read(char[] cbuf )：read()方法的重载，返回每次读入cbuf数组的字符个数，如果达到文件末尾返回-1</p>
</li>
<li><p>流的关闭（往往要通过异常处理保证流资源一定可以执行关闭操作）</p>
</li>
<li><p>读入的文件一定要存在，否则会报出异常</p>
</li>
</ul>
<h4 id="2-写出文件"><a href="#2-写出文件" class="headerlink" title="2.写出文件"></a>2.写出文件</h4><p>从内存中写出数据到硬盘文件</p>
<ul>
<li>提供File类对象，指明写出到的文件<ol>
<li>如果File对应文件不存在，则自动创建此文件</li>
<li>如果File对应文件存在，则有覆盖和追加两种形式的操作</li>
</ol>
</li>
<li>提供FileWriter的对象，用于数据写出<ol>
<li>流的构造器为：FileWriter(file,false) / FileWriter(file)，则对原有文件进行覆盖</li>
<li>流的构造器为：FileWriter(file, ture),则在源文件上追加内容</li>
</ol>
</li>
<li>写出操作</li>
<li>流资源关闭</li>
</ul>
<h4 id="3-字符流与字节流"><a href="#3-字符流与字节流" class="headerlink" title="3.字符流与字节流"></a>3.字符流与字节流</h4><ul>
<li>操作数据单位分类：字节流（InputStream/OutputStream），字符流（Reader/Writer）</li>
<li>字符流不能处理非文本文件，对于文本文件使用字符流处理</li>
<li>字节流不能处理文本文件，对于非文本文件使用字节流处理</li>
</ul>
<h4 id="4-缓冲流"><a href="#4-缓冲流" class="headerlink" title="4.缓冲流"></a>4.缓冲流</h4><ul>
<li>缓冲流比于节点流，提供了流的读取，写入的速度</li>
<li>使用缓冲流要比使用节点流，多一步造缓冲流的操作（在节点的基础上制造缓冲流）</li>
<li>资源关闭上，先关闭外层的流，再关闭内层的流（关闭外层流的同时，内层流可以自动关闭，内层流的关闭程序可以省略）</li>
<li>缓冲流可以提高文件读入写出速度，因为内部提供了一个缓冲区</li>
</ul>
<h4 id="5-随机存取文件流"><a href="#5-随机存取文件流" class="headerlink" title="5.随机存取文件流"></a>5.随机存取文件流</h4><ul>
<li>RandomAceessFile类实现了DataInput、DataOutput两个接口，该类既可以读也可以写</li>
<li>RandomAceessFile类支持随机访问的形式，程序可以直接跳到文件任意地方来读写文件</li>
<li>RandomAceessFile对象包含一个记录指针，用于标识当前读写位置</li>
</ul>
<h4 id="6-NIO2中文件读写"><a href="#6-NIO2中文件读写" class="headerlink" title="6.NIO2中文件读写"></a>6.NIO2中文件读写</h4><ul>
<li>NIO2是对Java原有IO流的升级，可以以更加高效的方式进行文件读写操作</li>
<li>Java API提供了两套NIO，一套是针对标准输入输出的NIO，另一套是网络编程NIO</li>
<li>File类访问文件功能比较有限，后来又引入类Path接口对File类进行了升级</li>
<li>在NIO.2中还提供了Files、Paths工具类</li>
</ul>
<h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><h4 id="1-转换流概述"><a href="#1-转换流概述" class="headerlink" title="1.转换流概述"></a>1.转换流概述</h4><ul>
<li>转换流为处理流的一种，提供了在字节流和字符流之间的转换</li>
<li>Java API提供了两个转换流：<ol>
<li>InputStreamReader：将InputStream转换为Reader</li>
<li>OutputStreamWriter：将Writer转换为OutputStream</li>
</ol>
</li>
<li>字节流中的数据都是字符时，转换成字符流操作更高效</li>
<li>转换流常用来处理文件乱码问题，实现编码和解码的功能</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945369.png" alt="image-20210505100444727"></p>
<h4 id="2-转换流的使用"><a href="#2-转换流的使用" class="headerlink" title="2.转换流的使用"></a>2.转换流的使用</h4><ul>
<li>InputStreamReader：将一个字节的输入流转换为字符的输入流</li>
<li>OutputStreamWriter：将一个字符的输出流转换为字节的输出流</li>
<li>提供了在字节流和字符流之间的转换，用于解码、编码</li>
</ul>
<h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><h4 id="1-对象流概述"><a href="#1-对象流概述" class="headerlink" title="1.对象流概述"></a>1.对象流概述</h4><ul>
<li><p>ObjectinputStream和ObjectOutputSteam</p>
</li>
<li><p>用于存储和读取基本数据类型数据或对象的处理流，可以把Java的对象写入数据源中，也能把对象从数据源中还原回来</p>
</li>
<li><p>序列化：ObjectinputStream保存基本数据类型或对象的机制</p>
</li>
<li><p>反序列化：ObjectOutputSteam读取基本数据类型或对象的机制</p>
</li>
<li><p>ObjectinputStream和ObjectOutputSteam不能序列化static和transient修饰的成员变量</p>
</li>
</ul>
<h4 id="2-对象的序列化"><a href="#2-对象的序列化" class="headerlink" title="2.对象的序列化"></a>2.对象的序列化</h4><ul>
<li>对象序列化机制把内存中的Java对象转换成平台无关的二进制流，从而允许把二进制流保存在磁盘上或通过网络传输</li>
<li>程序获取二进制流，可以反序列化恢复为Java对象</li>
<li>序列化的好处在于可以将任何实现了Serializable接口的对象转换为字节数据，保证其保存和传输时可被还原</li>
</ul>
<h3 id="其他基本流"><a href="#其他基本流" class="headerlink" title="其他基本流"></a>其他基本流</h3><h4 id="1-标准输入输出流"><a href="#1-标准输入输出流" class="headerlink" title="1.标准输入输出流"></a>1.标准输入输出流</h4><ul>
<li>System.in：标准的输入流，默认从键盘输入</li>
<li>System.out：标准的输出流，默认从控制台输出</li>
<li>可以通过setIn(InputStream is) / setOut(PrintStream ps)方式重新指定输出和输入的默认设备</li>
</ul>
<h4 id="2-打印流"><a href="#2-打印流" class="headerlink" title="2.打印流"></a>2.打印流</h4><ul>
<li>实现将基本数据类型转化成字符串输出</li>
<li>打印流PrintStream和PrintWriter</li>
<li>提供了一系列重载的print()和println()方法，用于多种数据类型输出</li>
</ul>
<h4 id="3-数据流"><a href="#3-数据流" class="headerlink" title="3.数据流"></a>3.数据流</h4><ul>
<li><p>方便操作（读取和写出）Java语言的基本类型和 String的数据</p>
</li>
<li><p>DataInputStream 和 DataOutputStream分别套接在InputStream和OutputStream子类的流上</p>
</li>
</ul>
<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="基础内容"><a href="#基础内容" class="headerlink" title="基础内容"></a>基础内容</h3><h4 id="1-网络编程定义"><a href="#1-网络编程定义" class="headerlink" title="1.网络编程定义"></a>1.网络编程定义</h4><ul>
<li>网络编程的目的：直接或间接通过网络协议与其他计算机实现数据交换，进行通讯</li>
<li>定位主机上特定的应用（IP和端口号）</li>
<li>可靠高效数据运输（通过网络通信协议TCP/IP）</li>
</ul>
<h3 id="TCP网络编程"><a href="#TCP网络编程" class="headerlink" title="TCP网络编程"></a>TCP网络编程</h3><h3 id="UDP网络编程"><a href="#UDP网络编程" class="headerlink" title="UDP网络编程"></a>UDP网络编程</h3><h3 id="URL网络编程"><a href="#URL网络编程" class="headerlink" title="URL网络编程"></a>URL网络编程</h3><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><h3 id="反射机制概述"><a href="#反射机制概述" class="headerlink" title="反射机制概述"></a>反射机制概述</h3><h4 id="1-反射的含义"><a href="#1-反射的含义" class="headerlink" title="1.反射的含义"></a>1.反射的含义</h4><p>（1）含义</p>
<ul>
<li>反射是动态语言的关键，反射机制允许程序在执行期间借助Reflection API 取得任何类的内部信息，并能直接操作任意对象的内部属性及方法</li>
<li>加载完类后，堆内存的方法区中就会产生一个Class类型的对象，通过该对象我们可以看到类的结构信息，则就是反射机制的本质</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945603.png" alt="image-20210505220053207"></p>
<p>（2）动态语言与静态语言</p>
<ul>
<li>动态语言在运行时可以根据条件改变自身结构（PHP，Python）</li>
<li>静态语言运行时结构不可变（Java，C, C++）</li>
<li>Java是准动态语言，我们可以利用反射机制，字节码操作获得类似动态语言的特性，让编程更加灵活</li>
</ul>
<h4 id="2-反射功能"><a href="#2-反射功能" class="headerlink" title="2.反射功能"></a>2.反射功能</h4><p>通过反射可以调用类的私有结构，反射常常用于对象不确定的情况下（反射的动态性）</p>
<ul>
<li>运行时判断任意对象所属类</li>
<li>运行时构造任意一个类的对象</li>
<li>运行时判断一个类所具有的成员变量和方法</li>
<li>运行时获取泛型信息</li>
<li>运行时任意调用对象的成员变量和方法</li>
<li>运行时处理注解</li>
<li>生成动态代理</li>
</ul>
<h4 id="3-反射主要API"><a href="#3-反射主要API" class="headerlink" title="3.反射主要API"></a>3.反射主要API</h4><ul>
<li>java.lang.Class：代表一个类</li>
<li>java.lang.reflect.Method：代表类的方法</li>
<li>java.lang.reflect.Field：代表类的成员变量</li>
<li>java.lang.reflect.Constructor：代表类的构造器</li>
</ul>
<h3 id="Class类的理解"><a href="#Class类的理解" class="headerlink" title="Class类的理解"></a>Class类的理解</h3><h4 id="1-类的加载过程"><a href="#1-类的加载过程" class="headerlink" title="1.类的加载过程"></a>1.类的加载过程</h4><ul>
<li>程序经过javac.exe命令后，会生成一个或多个字节码文件（.class结尾）接着我们使用java.exe命令对某个字节码文件进行解释运行，相当于将某个字节码文件加载到内存中，此过程就被称为类的加载</li>
<li>加载到内存中的类，我们称为运行时类，此运行时类就作为Class的一个实例（类是Class的对象）</li>
<li>Class的实例对应着一个运行时类</li>
</ul>
<h4 id="2-获得Class实例的方法"><a href="#2-获得Class实例的方法" class="headerlink" title="2.获得Class实例的方法"></a>2.获得Class实例的方法</h4><ul>
<li><p>调用运行类时的属性：.class</p>
</li>
<li><p>通过运行时类的对象，调用getClass</p>
</li>
<li><p>调用Class静态方法：forName(String classPath)（常用）</p>
</li>
<li><p>使用类的加载器：ClassLoader</p>
</li>
</ul>
<h4 id="3-Class实例对应结构"><a href="#3-Class实例对应结构" class="headerlink" title="3.Class实例对应结构"></a>3.Class实例对应结构</h4><p>有哪些类型有Class对象</p>
<ul>
<li>class：外部类，成员，局部内部类，匿名内部类</li>
<li>interface：接口</li>
<li>[]：数组</li>
<li>enum：枚举</li>
<li>annotation：注解</li>
<li>primitive type：基本数据类型</li>
<li>void</li>
</ul>
<h3 id="类的加载的理解"><a href="#类的加载的理解" class="headerlink" title="类的加载的理解"></a>类的加载的理解</h3><h4 id="1-类的加载过程-1"><a href="#1-类的加载过程-1" class="headerlink" title="1.类的加载过程"></a>1.类的加载过程</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945557.png" alt="image-20210506074346998"></p>
<h4 id="2-ClassLoader的理解"><a href="#2-ClassLoader的理解" class="headerlink" title="2.ClassLoader的理解"></a>2.ClassLoader的理解</h4><p>（1）类的加载器流程位置</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945002.png" alt="image-20210506074558379"></p>
<p>（2）类的加载器的作用</p>
<ul>
<li>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后再堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口</li>
<li>类缓存：一旦某个类被加载到类加载器中，它会维持（缓存）一段时间，不够JVM垃圾回收机制可以回收这些Class对象</li>
</ul>
<p>（3）Java定义的类的加载器类型</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945770.png" alt="image-20210506075638645"></p>
<p>（4）ClassLoader加载配置文件</p>
<p>​    读取配置文件的方法：</p>
<ul>
<li>使用properties集合+IO流读取</li>
<li>使用ClassLoader读取</li>
</ul>
<h3 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h3><p>平常我们一般使用类的构造器（new）创建类的对象，我们也可以通过反射创建对应的运行时类的对象</p>
<h4 id="1-创建流程"><a href="#1-创建流程" class="headerlink" title="1.创建流程"></a>1.创建流程</h4><ul>
<li>调用newInstance()方法，创建对应的运行时类的对象</li>
<li>内部调用了运行时类的空参构造器</li>
</ul>
<h4 id="2-创建要求"><a href="#2-创建要求" class="headerlink" title="2.创建要求"></a>2.创建要求</h4><ul>
<li>运行时类必须提供空参的构造器</li>
<li>空参过的构造器的访问权限通常设置为public</li>
<li>便于通过反射，创建运行时类的对象</li>
<li>便于子类继承此运行类时，默认调用super()时，保证父类有此构造器</li>
</ul>
<h3 id="获得运行时类的结构"><a href="#获得运行时类的结构" class="headerlink" title="获得运行时类的结构"></a>获得运行时类的结构</h3><h4 id="1-获得属性结构"><a href="#1-获得属性结构" class="headerlink" title="1.获得属性结构"></a>1.获得属性结构</h4><ul>
<li>getFields()：获取当前运行时类及其父类中声明public访问权限的属性</li>
<li>getDeclaredFields()：获取当前运行时类中声明的所有属性（不包含父类中声明的属性）</li>
</ul>
<h4 id="2-获取方法结构"><a href="#2-获取方法结构" class="headerlink" title="2.获取方法结构"></a>2.获取方法结构</h4><ul>
<li>getMethods()：获取当前运行时类及其所有父类中声明为public权限的方法</li>
<li>getDeclaredMethods()：获取当前运行时类中声明的所有方法（不包含父类中声明的方法）</li>
</ul>
<h4 id="3-获取方法的内部结构"><a href="#3-获取方法的内部结构" class="headerlink" title="3.获取方法的内部结构"></a>3.获取方法的内部结构</h4><ul>
<li>获取方法声明的注解</li>
<li>权限修饰符</li>
<li>返回值类型</li>
<li>方法名</li>
<li>形参列表</li>
</ul>
<h4 id="4-获取构造器结构"><a href="#4-获取构造器结构" class="headerlink" title="4.获取构造器结构"></a>4.获取构造器结构</h4><ul>
<li>getConstructors()：获取当前运行时类中声明为public的构造器</li>
<li>getDeclaredConstructors()：获取当前运行时类中声明的所有构造器</li>
</ul>
<h4 id="5-其他获取内容"><a href="#5-其他获取内容" class="headerlink" title="5.其他获取内容"></a>5.其他获取内容</h4><ul>
<li>获得运行时类的父类及父类泛型</li>
<li>获得运行类的实现的接口，所在包，注解</li>
</ul>
<h3 id="调用运行时类的结构"><a href="#调用运行时类的结构" class="headerlink" title="调用运行时类的结构"></a>调用运行时类的结构</h3><h4 id="1-调用指定属性"><a href="#1-调用指定属性" class="headerlink" title="1.调用指定属性"></a>1.调用指定属性</h4><ul>
<li>创建运行时类的对象</li>
<li>获得指定的属性（通常用getDeclaredFields()，因为可以获得私有属性）</li>
<li>保证当前属性是可访问的（setAccessible方法）</li>
<li>设置当前属性的值（set方法）</li>
<li>获取当前属性的值（get方法）</li>
<li>获取当前属性的值</li>
</ul>
<h4 id="2-调用指定方法"><a href="#2-调用指定方法" class="headerlink" title="2.调用指定方法"></a>2.调用指定方法</h4><ul>
<li>创建运行时类的对象</li>
<li>获取指定的某个方法</li>
<li>保证当前方法是可访问的（setAccessible方法）</li>
<li>调用invoke方法执行</li>
</ul>
<h4 id="3-调用指定构造器"><a href="#3-调用指定构造器" class="headerlink" title="3.调用指定构造器"></a>3.调用指定构造器</h4><ul>
<li>获得指定构造器</li>
<li>保证此构造器可访问</li>
<li>调用此构造器创建运行时类的对象</li>
</ul>
<h3 id="反射应用：动态代理"><a href="#反射应用：动态代理" class="headerlink" title="反射应用：动态代理"></a>反射应用：动态代理</h3><h4 id="1-代理设计模式原理"><a href="#1-代理设计模式原理" class="headerlink" title="1.代理设计模式原理"></a>1.代理设计模式原理</h4><ul>
<li><p>使用一个代理将对象包装起来，然后用该代理对象取代原始对象，任何对原始对象的调用都要通过代理</p>
</li>
<li><p>最好可以通过一个代理类完成全部的代理功能</p>
</li>
</ul>
<h4 id="2-动态代理概述"><a href="#2-动态代理概述" class="headerlink" title="2.动态代理概述"></a>2.动态代理概述</h4><ul>
<li><p>动态代理是指用户通过代理类来调用其他对象的方法，并且是在程序运行时更加动态创建 目标类的代理对象</p>
</li>
<li><p>动态代理使用场合：</p>
<ol>
<li>调试</li>
<li>远程方法调用</li>
</ol>
</li>
<li><p>动态代理相比静态代理的优点：抽象角色中接口声明的所有方法都被转移到调用处理器一个集中的方法中处理（可以更加灵活和统一的处理众多的方法）</p>
</li>
</ul>
<h4 id="3-动态代理与AOP"><a href="#3-动态代理与AOP" class="headerlink" title="3.动态代理与AOP"></a>3.动态代理与AOP</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945546.png" alt="image-20210506141800436"></p>
<h2 id="Java8的其他特性"><a href="#Java8的其他特性" class="headerlink" title="Java8的其他特性"></a>Java8的其他特性</h2><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>Lambda表达式是一个 ，可以将其理解为一段可以传递的代码，其本质是作为函数式接口的实例</p>
<h4 id="1-Lambda表达式的使用"><a href="#1-Lambda表达式的使用" class="headerlink" title="1.Lambda表达式的使用"></a>1.Lambda表达式的使用</h4><ul>
<li>-&gt; :lambda操作符或箭头操作符</li>
<li>-&gt; 左边：lambda形参列表（即接口中的抽象方法的形参列表）</li>
<li>-&gt; 右边：lambda体（即重写抽象方法的方法体）</li>
<li>如果lamba形参列表只有一个参数，其一对()也可以省略</li>
<li>lambda体应该使用一对{}包裹，如果lambda只有一条执行语句，可以省略{}和return</li>
</ul>
<h4 id="2-lambda使用分类"><a href="#2-lambda使用分类" class="headerlink" title="2.lambda使用分类"></a>2.lambda使用分类</h4><ul>
<li>无参，无返回值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runnable r1 = ()-&gt; &#123;System.out.println(<span class="string">&quot;Hello,Lambda&quot;</span>);&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>需要一个参数，无返回值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = (String str)-&gt;&#123;System.out.println(str);&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>数据类型可以省略，可由编译器推断得出（类型推断）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = (str)-&gt;&#123;System.out.println(str);&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>只需要一个参数时，参数的小括号可以省略</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = str-&gt;&#123;System.out.println(str);&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>需要两个或两个以上的参数，多条执行语句，并且可以有返回值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com = (x,y)-&gt;&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;实现函数式接口方法&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> Integer.compare(x,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>当Lambda只有一条语句时，return与大括号可以省略</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com = (x,y)-&gt;Integer.compare(x,y);</span><br></pre></td></tr></table></figure>



<h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><h4 id="1-函数式接口含义"><a href="#1-函数式接口含义" class="headerlink" title="1.函数式接口含义"></a>1.函数式接口含义</h4><ul>
<li><p>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口</p>
</li>
<li><p>我们可以通过Lambda表达式创建该接口的对象</p>
</li>
<li><p>使用@Functionallnterface注解，可以检测是否为函数式接口</p>
</li>
</ul>
<h4 id="2-Java内置函数式接口"><a href="#2-Java内置函数式接口" class="headerlink" title="2.Java内置函数式接口"></a>2.Java内置函数式接口</h4><ul>
<li><p>Consumer<T>：消费型接口</T></p>
</li>
<li><p>Supplier<T>：供给型接口</T></p>
</li>
<li><p>Function&lt;T,R&gt;：函数型接口</p>
</li>
<li><p>Predicate<T>：断定型接口</T></p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945212.png" alt="image-20210506192031648"></p>
</li>
</ul>
<h3 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h3><h4 id="1-方法引用介绍"><a href="#1-方法引用介绍" class="headerlink" title="1.方法引用介绍"></a>1.方法引用介绍</h4><ul>
<li>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用</li>
<li>方法引用就是Lambada表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法</li>
<li>实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致</li>
<li>有以下三种主要使用情况<ol>
<li>对象::实例方法名</li>
<li>类::静态方法名</li>
<li>类::实例方法名</li>
</ol>
</li>
</ul>
<h4 id="2-构造器引用"><a href="#2-构造器引用" class="headerlink" title="2.构造器引用"></a>2.构造器引用</h4><ul>
<li>与方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致</li>
<li>抽象方法的返回值类型即构造器所属的类的类型</li>
</ul>
<h3 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h3><h4 id="1-Stream概述"><a href="#1-Stream概述" class="headerlink" title="1.Stream概述"></a>1.Stream概述</h4><ul>
<li>Stream是Java中处理集合的关键抽象概念，它可以对集合进行复杂的查找，过滤，映射数据等操作（类似于SQL之于数据库）</li>
<li>NoSQL的数据（MongDB,Radis等）需要在Java层面处理，所有需要Stream API</li>
<li>Stream 与 Collection集合的区别：Collection是一种静态的内存数据结构，其面向内存用于数据存储;Stream有关计算，其面向CPU通过CPU实现计算</li>
</ul>
<h4 id="2-Stream须知事项"><a href="#2-Stream须知事项" class="headerlink" title="2.Stream须知事项"></a>2.Stream须知事项</h4><ul>
<li>Stream自己不会存储元素</li>
<li>Stream不会改变源对象，相反，它们会返回一个持有结果的新Stream</li>
<li>Stream操作时延迟执行的，他们会等到需要结果时才执行</li>
</ul>
<h4 id="3-Stream操作过程"><a href="#3-Stream操作过程" class="headerlink" title="3.Stream操作过程"></a>3.Stream操作过程</h4><ul>
<li><p>创建Stream：一个数据源（如：集合，数组）获取一个流</p>
</li>
<li><p>中间操作：一个中间操作链，对数据源的数据进行处理</p>
</li>
<li><p>终止操作：一旦执行终止操作，就执行中间操作链，并产生结果，后面不会再被使用</p>
</li>
</ul>
<h4 id="4-Stream实例化"><a href="#4-Stream实例化" class="headerlink" title="4.Stream实例化"></a>4.Stream实例化</h4><p>（1）创建Stream</p>
<ul>
<li>通过集合创建</li>
<li>通过数组创建</li>
<li>通过Stream的of()创建</li>
<li>创建无限流</li>
</ul>
<p>（2）中间操作</p>
<ul>
<li>筛选与切片</li>
<li>映射</li>
<li>排序</li>
</ul>
<p>（3）Stream的终止操作</p>
<ul>
<li>匹配与查找</li>
<li>归约</li>
<li>收集</li>
</ul>
<h3 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h3><h4 id="1-Optional类概述"><a href="#1-Optional类概述" class="headerlink" title="1.Optional类概述"></a>1.Optional类概述</h4><ul>
<li><p>Optional<T>类是一个容器类，可以保存类型T的值，代表这个值存在（或者仅仅保存null，表示这个值不存在）</T></p>
</li>
<li><p>Optional可以更好表达这个概念，并且可以避免空指针异常</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>Java</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工具|Linux学习手册</title>
    <url>/2021/06/27/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Linux%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040952867.png" alt="image-20210904095248687"></p>
<span id="more"></span>

<h3 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h3><h4 id="1-Linux发行版"><a href="#1-Linux发行版" class="headerlink" title="1.Linux发行版"></a>1.Linux发行版</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949495.jpeg" alt="img"></p>
<p>Linux发行版 = Liunx核心 +应用软件</p>
<h4 id="2-Liunx内核架构"><a href="#2-Liunx内核架构" class="headerlink" title="2.Liunx内核架构"></a>2.Liunx内核架构</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949098.jpeg" alt="img"></p>
<p>Liunx内核有5个子系统：</p>
<ul>
<li>Process Scheduler，进程管理、进程调度。负责管理 CPU 资源，以便让各个进程可以以尽量公平的方式访问 CPU。</li>
<li>Memory Manager，内存管理。负责管理 Memory（内存）资源，以便让各个进程可以安全的共享机器的内存资源。</li>
<li>VFS（Virtual File System），虚拟文件系统。Linux 内核将不同功能的外部设备抽象为可以通过统一的文件操作接口（open、close、read、write 等）来访问。这就是 Linux系统“一切皆是文件”的体现</li>
<li>设备驱动，负责管理第三方设备接入/终端</li>
<li>Network，网络子系统。负责管理系统的网络设备，并实现多种多样的网络标准</li>
</ul>
<h3 id="Linux基本操作"><a href="#Linux基本操作" class="headerlink" title="Linux基本操作"></a>Linux基本操作</h3><h4 id="1-开机关机"><a href="#1-开机关机" class="headerlink" title="1.开机关机"></a>1.开机关机</h4><p>开启会启动许多程序，在windows叫做“服务“（service），在Linux叫做“守护进程”（daemon）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949420.png" alt="Linux开机启动脚本 - 转1"></p>
<p>同步数据命令：sync（常常用于强制关机前）</p>
<p>关机命令：shutdown</p>
<p>重启命令：reboot</p>
<h4 id="2-基本目录结构"><a href="#2-基本目录结构" class="headerlink" title="2.基本目录结构"></a>2.基本目录结构</h4><p>基本知识：</p>
<ul>
<li>Liunx一切皆文件</li>
<li>根目录/，所有文件都挂载在这个节点下</li>
<li>ls 查看当前目录下所有文件</li>
</ul>
<p>Liunx目录结构：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949471.png" alt="img"></p>
<p>比较常用的如下：</p>
<ul>
<li>/etc ： 该目录可用来存放所有系统管理需要的配置文件和子目录</li>
<li>/home：用户主目录（在liunx，每个用户都有一个自己的目录）</li>
<li>/opt : 主机额外安装软件存放的位置</li>
<li>/root : 系统管理员用户主目录</li>
<li>/usr：用户的应用程序和文件都放在这个目录，类似于Windows的program files目录</li>
<li>/tmp ：存放临时文件，用完即丢的文件如安装包</li>
<li>/var : 存放不断扩充的东西，习惯于放那些经常被修改的目录</li>
</ul>
<h3 id="Liunx目录管理"><a href="#Liunx目录管理" class="headerlink" title="Liunx目录管理"></a>Liunx目录管理</h3><h4 id="1-文件管理基本命令"><a href="#1-文件管理基本命令" class="headerlink" title="1.文件管理基本命令"></a>1.文件管理基本命令</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949194.png" alt="img"></p>
<p>比较常用的如下：</p>
<ul>
<li>ls: 列出目录</li>
<li>cd：切换目录</li>
<li>pwd：显示目前的目录</li>
<li>mkdir：创建一个新的目录</li>
<li>rmdir：删除一个空的目录</li>
<li>cp：复制文件或目录</li>
<li>rm：移除文件或目录</li>
<li>mv：移动文件与目录，或修改文件与目录的名称</li>
<li>touch：创建文件</li>
</ul>
<h4 id="2-ls命令"><a href="#2-ls命令" class="headerlink" title="2.ls命令"></a>2.ls命令</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949481.png" alt="这里写图片描述"></p>
<h4 id="3-mkdir命令"><a href="#3-mkdir命令" class="headerlink" title="3.mkdir命令"></a>3.mkdir命令</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949299.png" alt="img"></p>
<h4 id="4-rm命令"><a href="#4-rm命令" class="headerlink" title="4.rm命令"></a>4.rm命令</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949353.png" alt="img"></p>
<h3 id="Linux文件管理"><a href="#Linux文件管理" class="headerlink" title="Linux文件管理"></a>Linux文件管理</h3><h4 id="1-文件属性"><a href="#1-文件属性" class="headerlink" title="1.文件属性"></a>1.文件属性</h4><p>文件属性字符串:<br><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949841.png" alt="img"></p>
<p>文件权限字符串：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949192.png" alt="363003_1227493859FdXT"></p>
<p>文件类型：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949930.png" alt="linux文件类型和权限- xd_xumaomao - 博客园"></p>
<p>常用的如下：</p>
<ul>
<li><code>-</code>：普通文件</li>
<li><code>d</code>：目录文件</li>
<li><code>l</code>：连接文件（相当于Windows的快捷方式）</li>
</ul>
<p>文件权限：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949379.png" alt="img"></p>
<p>在文件属性中每组权限按<code>rwx</code>这样的顺序显示，而<code>-</code>表示没有该权限</p>
<h4 id="2-chgrp-amp-chown命令"><a href="#2-chgrp-amp-chown命令" class="headerlink" title="2.chgrp&amp;chown命令"></a>2.chgrp&amp;chown命令</h4><p>更改文件属组（文件所属用户组）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">charg -R 属组名 文件名</span><br></pre></td></tr></table></figure>

<p>更改文件属主（文件所有者）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R 属主名 文件名</span><br></pre></td></tr></table></figure>

<p>同时修改文件的属组和属主</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown -R 属主名:属组名 文件名</span><br></pre></td></tr></table></figure>



<h4 id="3-chmod命令"><a href="#3-chmod命令" class="headerlink" title="3.chmod命令"></a>3.chmod命令</h4><p>chmod可以设置文件访问权限，有两种设置方法：数字（常用）和符号</p>
<p>Linux文件的基本权限有9个，分别是owner/group/others 三种身份分别的rwx权限（9个权限三个三个为一组）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949807.png" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用格式</span></span><br><span class="line">chmod 权限数字组 文件名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开放所有权限给所有人</span></span><br><span class="line">chmod 777 root</span><br></pre></td></tr></table></figure>



<h4 id="4-文件内容查看"><a href="#4-文件内容查看" class="headerlink" title="4.文件内容查看"></a>4.文件内容查看</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949445.png" alt="夺命雷公狗---linux NO:11 linux的文本文件查看命令- 夺命雷公狗- 博客园"></p>
<ul>
<li>nl：显示文件中的时候标注行号</li>
<li>less与more类似，有分页的功能，但是可以往前翻页（空格下翻页，pageDown，pageUp代表翻动页面）</li>
<li>在less查看模式下：q命令退出，<code>/</code>命令向下查询字符串，<code>?</code>向下查询字符串，<code>n</code>继续搜寻下一个，<code>N</code>向上寻找</li>
</ul>
<h3 id="Linux链接"><a href="#Linux链接" class="headerlink" title="Linux链接"></a>Linux链接</h3><h4 id="1-链接类型"><a href="#1-链接类型" class="headerlink" title="1.链接类型"></a>1.链接类型</h4><p>Linux的链接分为两种：  </p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949118.png" alt="linux之软连接硬链接- osc_3uvms8cw的个人空间- OSCHINA - 中文开源技术交流社区"></p>
<ul>
<li>软链接：类似与windows下的快捷方式，删除了源文件，快捷方式也访问不了</li>
<li>硬链接：允许一个文件有多个路径，用户可以通过这种机制建立硬链接到一些重要文件上，防止误删</li>
</ul>
<h4 id="2-创建链接"><a href="#2-创建链接" class="headerlink" title="2.创建链接"></a>2.创建链接</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 为f1文件创建一个硬链接f2</span></span><br><span class="line">ln f1 f2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为f1文件创建一个软链接（符号链接）f3</span></span><br><span class="line">ln -s f1 f3</span><br></pre></td></tr></table></figure>



<h4 id="3-链接相关测试"><a href="#3-链接相关测试" class="headerlink" title="3.链接相关测试"></a>3.链接相关测试</h4><p>文件内容修改：</p>
<p>原文件的内容，其硬链接的内容，其软连接访问的内容都是保持一致的，修改其中之一其他两项访问的内容也会相应变化</p>
<p>文件删除：</p>
<p>删除原文件后，硬链接依旧可以访问，而软链接无法打开（快捷方式失效）</p>
<h3 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h3><h4 id="1-Vim简介"><a href="#1-Vim简介" class="headerlink" title="1.Vim简介"></a>1.Vim简介</h4><ul>
<li>Vim是一种文本编辑器，有代码补全，编译及错误跳转等方便编程的功能</li>
<li>Vim可以通过参加实现IDE一样的功能</li>
<li>Vim基本使用：查看内容，编辑内容，保存内容</li>
</ul>
<h4 id="2-Vim三模式"><a href="#2-Vim三模式" class="headerlink" title="2.Vim三模式"></a>2.Vim三模式</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949256.jpeg" alt="Linux 之Vim 命令使用（详细总结） - 知乎"></p>
<ul>
<li>命令模式只能查看文本，可以通过键盘输入切换到输入模式和底部命令行模式</li>
<li>输入模式可以编辑文件</li>
<li>末行模式即命令行模式可以执行退出，保存文件等操作</li>
</ul>
<h4 id="3-命令模式"><a href="#3-命令模式" class="headerlink" title="3.命令模式"></a>3.命令模式</h4><ul>
<li><code>数字+空格</code> ：横向移动光标，向右移动n个字</li>
<li><code>数字+回车</code>：纵向移动光标，向下移动n行</li>
<li><code>/word</code>：向光标下寻找名为word的字符串</li>
<li><code>?word</code>：向光标下寻找名为word的字符串</li>
<li><code>n/N</code>:进行下翻页和下翻页（n表示重复上一个搜寻动作，N则是反向于上一个搜寻动作）</li>
<li><code>u</code>：重复上一个操作</li>
</ul>
<h4 id="4-输入模式"><a href="#4-输入模式" class="headerlink" title="4.输入模式"></a>4.输入模式</h4><p>输入模式常用按键：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949252.svg+xml" alt="[公式]"></p>
<h4 id="5-命令行模式"><a href="#5-命令行模式" class="headerlink" title="5.命令行模式"></a>5.命令行模式</h4><p>常用命令：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949551.svg+xml" alt="[公式]"></p>
<p><code>:ZZ</code>：不存储直接离开（ctrl + z）</p>
<p><code>:set nu</code>：设置行号，打开文本每一行都显示行号</p>
<p>注意如果输入的命令不存在会返回127错误，而且会回到vim界面</p>
<h3 id="Linux账号管理"><a href="#Linux账号管理" class="headerlink" title="Linux账号管理"></a>Linux账号管理</h3><p>账号管理实质是对<code>/etc/passwd</code>文件的更新</p>
<h4 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="1.添加用户"></a>1.添加用户</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -选项 用户名</span><br></pre></td></tr></table></figure>

<p>useradd 相关选项：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950318.png" alt="op"></p>
<p>常用<code>-m</code>自动为用户在home下创建目录</p>
<p>可以在/etc/passwd文件夹下查看用户相关的配置信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure>



<h4 id="2-删除用户"><a href="#2-删除用户" class="headerlink" title="2.删除用户"></a>2.删除用户</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userdel -选项 用户名</span><br></pre></td></tr></table></figure>

<p>常用<code>-r</code>选项自动删除用户在home下的用户目录</p>
<h4 id="3-修改用户"><a href="#3-修改用户" class="headerlink" title="3.修改用户"></a>3.修改用户</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usermod -选项 修改内容 用户名</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950615.png" alt="选项"></p>
<h4 id="4-切换用户"><a href="#4-切换用户" class="headerlink" title="4.切换用户"></a>4.切换用户</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su + 用户名</span><br></pre></td></tr></table></figure>

<p>切换到root用户：<code>sudo su</code></p>
<p>修改主机名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostname 修改的名称</span><br></pre></td></tr></table></figure>



<h4 id="5-用户口令管理命令"><a href="#5-用户口令管理命令" class="headerlink" title="5.用户口令管理命令"></a>5.用户口令管理命令</h4><p>创建/修改用户的密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950354.png" alt="选项"></p>
<h3 id="Linux用户组管理"><a href="#Linux用户组管理" class="headerlink" title="Linux用户组管理"></a>Linux用户组管理</h3><p>组的增加，删除和修改实际上就是对<code>/etc/group</code>文件的更新</p>
<h4 id="1-创建用户组"><a href="#1-创建用户组" class="headerlink" title="1.创建用户组"></a>1.创建用户组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用户组组的id自增1</span></span><br><span class="line">groupadd 组名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定id创建用户组</span></span><br><span class="line">groupadd -g 233 组名</span><br></pre></td></tr></table></figure>



<h4 id="2-删除用户组"><a href="#2-删除用户组" class="headerlink" title="2.删除用户组"></a>2.删除用户组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除用户组</span></span><br><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure>



<h4 id="3-修改用户组"><a href="#3-修改用户组" class="headerlink" title="3.修改用户组"></a>3.修改用户组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 基本样式</span></span><br><span class="line">groupmod 选项 修改内容 组名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 案例</span></span><br><span class="line">groupmod -g 666 -n newname 组名</span><br></pre></td></tr></table></figure>



<h4 id="4-切换用户组"><a href="#4-切换用户组" class="headerlink" title="4.切换用户组"></a>4.切换用户组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录的当前用户切换到root组</span></span><br><span class="line">newgrp root</span><br></pre></td></tr></table></figure>



<h4 id="5-用户管理相关文件"><a href="#5-用户管理相关文件" class="headerlink" title="5.用户管理相关文件"></a>5.用户管理相关文件</h4><p><code>/etc/passwd</code>文件：</p>
<p><strong>具体格式</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">用户名:口令（不可见一般显示为x）:用户标识号:组标识号:注释性描述:主目录:登录Shell</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950861.jpeg" alt="详解Linux中/etc/passwd文件详解Linux中/etc/passwd文件"></p>
<p>该文件的每一行都代表一个用户，可以查看用户主目录位置，并查看属于哪一个组</p>
<p><code>/etc/shadow</code>文件：</p>
<p>用户密码加密后存放在/etc/shadow文件，与passwd文件一一对应</p>
<p><strong>具体格式</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950761.jpeg" alt="img"></p>
<p><code>/etc/group</code>文件：</p>
<p><strong>具体格式</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">组名:口令:组ID:组内用户列表</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950338.jpeg" alt="img"></p>
<h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h4 id="1-df命令"><a href="#1-df命令" class="headerlink" title="1.df命令"></a>1.df命令</h4><p>列出文件系统整体的磁盘使用量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 普通查看</span></span><br><span class="line">df</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 内存转换为M</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041103972.png" alt="img"></p>
<h4 id="2-du命令"><a href="#2-du命令" class="headerlink" title="2.du命令"></a>2.du命令</h4><p>检查磁盘空间使用量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前目录内存占用</span></span><br><span class="line">du </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查根目录每个目录所占用的容量</span></span><br><span class="line">du -sm /*</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950313.png" alt="img"></p>
<h4 id="3-mount-amp-umount命令"><a href="#3-mount-amp-umount命令" class="headerlink" title="3.mount&amp;umount命令"></a>3.mount&amp;umount命令</h4><p>可类比于U盘的使用</p>
<p>mount：挂载设备</p>
<p>umount：卸载设备</p>
<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="1-进程介绍"><a href="#1-进程介绍" class="headerlink" title="1.进程介绍"></a>1.进程介绍</h4><ul>
<li>在Liunx中，每个程序都是有自己的一个进程，每一个进程都有一个id号</li>
<li>每一个进程都有一个父进程</li>
<li>进程有两种存在方式：前台运行（程序），后台运行（服务）</li>
</ul>
<h4 id="2-进程与线程"><a href="#2-进程与线程" class="headerlink" title="2.进程与线程"></a>2.进程与线程</h4><ul>
<li>进程就是应用程序的启动实例，而线程从属于进程，是程序的实际执行者</li>
<li>一个进程至少包含一个主线程，也可以有更多的子线程</li>
<li>对操作系统来说，线程是最小的执行单元，进程是最小的资源管理单元</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950452.webp" alt="img"></p>
<h4 id="3-任务执行方式"><a href="#3-任务执行方式" class="headerlink" title="3.任务执行方式"></a>3.任务执行方式</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950096.png" alt="img"></p>
<ul>
<li>串行是指多个任务时，各个任务按顺序执行，完成一个之后才能进行下一个</li>
<li>并行指的是多个任务可以同时执行，异步是多个任务并行的前提条件</li>
<li>并发是指两个或多个事件在同一时间间隔内发生，常用于多线程编程中</li>
</ul>
<h4 id="4-同步异步阻塞"><a href="#4-同步异步阻塞" class="headerlink" title="4.同步异步阻塞"></a>4.同步异步阻塞</h4><p>同步与异步关注的是<strong>消息通信机制</strong>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950691.png" alt="img"></p>
<ul>
<li>由调用方盲目主动问询的方式是同步调用</li>
<li>由被调用方主动通知调用方任务已完成的方式是异步调用</li>
<li>同步异步是对系统内核而言（是否主动通知应用层）</li>
</ul>
<p>阻塞和非阻塞关注的是<strong>程序在等待调用结果</strong>时的状态：</p>
<p><img src="https://pic3.zhimg.com/80/v2-6507ab3517814b1b84fbff9a3eb31842_720w.png" alt="img"></p>
<ul>
<li>被挂起无法执行其他操作的则是阻塞型</li>
<li>被立即「抽离」去完成其他「任务」的则是非阻塞型的</li>
<li>阻塞和非阻塞对应用层而言（应用是否去做其他事情）</li>
</ul>
<h4 id="5-ps命令"><a href="#5-ps命令" class="headerlink" title="5.ps命令"></a>5.ps命令</h4><p><code>ps</code>查看当前系统中正在执行的各种进程</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950813.png" alt="Linux学习之路(三) —— Linux高级系统管理命令"></p>
<p>常用案例：</p>
<p>查看mysql的所有进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -aux|grep mysql</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ps -aux</code> ：查看所有进程信息</li>
<li><code>|</code> ：Linux管道符，过滤上一条命令输出的信息</li>
<li><code>grep</code> ：查找文件中符合条件的字符串</li>
</ul>
<p>查看父进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep mysql</span><br></pre></td></tr></table></figure>



<p>显示进程树</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -p显示父id，-u显示用户组</span></span><br><span class="line">pstree -pu</span><br></pre></td></tr></table></figure>



<h4 id="6-kill命令"><a href="#6-kill命令" class="headerlink" title="6.kill命令"></a>6.kill命令</h4><p>强制结束该进程，类似与windows结束任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 进程id</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>入门教程</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP|基于PHP开发论坛</title>
    <url>/2020/09/12/PHP-PHP%E8%AE%BA%E5%9D%9B%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041004045.png" alt="image-20210904100404823"></p>
<span id="more"></span>

<h4 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h4><p>本项目的前端都是通过Bootstrap来实现，我们只需要在页面头部加载Bootstrap的层级样式表，即可非常快捷地使用Bootstrap的组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Bootstrap官方文档：<a href="https://v3.bootcss.com/">https://v3.bootcss.com/</a></p>
<h4 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h4><p>我实现图片上传的思路如下：</p>
<ul>
<li><p>前端打开文件，获取文件信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;inpfile&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/gif, image/jpeg, image/png&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default btn-lg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-picture&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过ajax技术将图片发给后端</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$( <span class="built_in">document</span> ).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          $(<span class="string">&#x27;#inpfile&#x27;</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">          </span><br><span class="line">            <span class="keyword">var</span> file_data = $(<span class="string">&#x27;#inpfile&#x27;</span>).prop(<span class="string">&#x27;files&#x27;</span>)[<span class="number">0</span>];   </span><br><span class="line">            <span class="keyword">var</span> form_data = <span class="keyword">new</span> FormData();                  </span><br><span class="line">            form_data.append(<span class="string">&#x27;file&#x27;</span>, file_data);</span><br><span class="line">          </span><br><span class="line">              $.ajax(&#123;</span><br><span class="line">              url:<span class="string">&#x27;pic.php&#x27;</span>,</span><br><span class="line">              type:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">              dataType: <span class="string">&#x27;text&#x27;</span>,  </span><br><span class="line">              cache: <span class="literal">false</span>,</span><br><span class="line">              contentType: <span class="literal">false</span>,</span><br><span class="line">              processData: <span class="literal">false</span>,</span><br><span class="line">              data:form_data,</span><br><span class="line"></span><br><span class="line">      success:<span class="function"><span class="keyword">function</span>(<span class="params">data1</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">var</span> pic = <span class="string">&quot;&lt;br&gt;&lt;img src =&quot;</span>+data1+<span class="string">&quot; /&gt;&lt;br&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="built_in">document</span>.execCommand(<span class="string">&quot;insertHTML&quot;</span>,<span class="string">&quot;false&quot;</span>,pic);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>后端处理并存储图像（放在服务器或本地的某个文件夹）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$imgname</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]; <span class="comment">//获取上传的文件名称</span></span><br><span class="line"><span class="variable">$filetype</span> = pathinfo(<span class="variable">$imgname</span>, PATHINFO_EXTENSION);<span class="comment">//获取后缀</span></span><br><span class="line"><span class="variable">$newname</span> = date(<span class="string">&quot;Ymdhis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$filetype</span>; </span><br><span class="line"><span class="comment">//构建新名称</span></span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$newname</span>;</span><br><span class="line"><span class="comment">// 构建传输路径</span></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;img/&#x27;</span>.iconv(<span class="string">&#x27;UTF-8&#x27;</span>,<span class="string">&#x27;gbk&#x27;</span>,basename(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])); </span><br><span class="line"><span class="comment">// 将路径存入数据库</span></span><br><span class="line"><span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="string">&quot;UPDATE  users SET tx = &#x27;<span class="subst">&#123;$dir&#125;</span>&#x27; WHERE id = &#x27;<span class="subst">&#123;$id&#125;</span>&#x27;&quot;</span>);</span><br><span class="line"><span class="comment">// 移动文件到指定路径</span></span><br><span class="line">move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>],<span class="variable">$dir</span>);        </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h4 id="表单与后端"><a href="#表单与后端" class="headerlink" title="表单与后端"></a>表单与后端</h4><h5 id="1-构建表单"><a href="#1-构建表单" class="headerlink" title="1.构建表单"></a>1.构建表单</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;君の名は？&quot;</span> <span class="attr">aria-describedby</span>=<span class="string">&quot;basic-addon1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">aria-describedby</span>=<span class="string">&quot;basic-addon1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>from标签</strong>：表单标签，action属于填发送信息的后端文件（login.php），空白则发给自己；method属性确定发送信息的方式，一般表单都用”POST”</li>
<li><strong>input标签</strong>：设置一个表单域，type属性为表单填写的数据类型（甚至有密码和日期等内置的类型），placeholder属性即表单域提示文字，name属性为该表单域数据起名方便后端识别</li>
<li><strong>button标签</strong>：当button放在from标签内，且type属性为“submit”，可以起到提交表单信息到后端的功能</li>
</ul>
<h5 id="2-后端接收表单信息"><a href="#2-后端接收表单信息" class="headerlink" title="2.后端接收表单信息"></a>2.后端接收表单信息</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;name&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br></pre></td></tr></table></figure>



<h5 id="3-表单重复提交问题"><a href="#3-表单重复提交问题" class="headerlink" title="3.表单重复提交问题"></a>3.表单重复提交问题</h5><p>表单与后端交互时会出现一个经典的问题：当页面刷新是，表单会重复提交用户输入的数据，导致出现插入重复的数据或者发出空白数据这样的问题</p>
<p>这个问题的解决方案有很多，这里提供两种简单的解决方案</p>
<ul>
<li><p><strong>页面重定向</strong></p>
<p>最简单最有效的解决方法，在用户提交表单后，立刻重定向到新页面或者到本页面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">&quot;refresh:1; url=login.php&quot;</span>); </span><br></pre></td></tr></table></figure>

<p>问题：一个页面不能有多个重定向，否则会报错</p>
</li>
<li><p><strong>js代码禁止页面刷新</strong></p>
<p>一种比较奇葩的思路，但是某些时候会十分有效</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.history.replaceState ) &#123;</span><br><span class="line">        <span class="built_in">window</span>.history.replaceState( <span class="literal">null</span>, <span class="literal">null</span>, <span class="built_in">window</span>.location.href );</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><strong>参考文章（更多解决方案）</strong></p>
<p>一些大佬们的讨论：<a href="https://stackoverflow.com/questions/6320113/how-to-prevent-form-resubmission-when-page-is-refreshed-f5-ctrlr">https://stackoverflow.com/questions/6320113/how-to-prevent-form-resubmission-when-page-is-refreshed-f5-ctrlr</a></p>
<p>总结得比较好的文章：<a href="https://makitweb.com/prevent-page-from-submit-on-refresh-in-php/#conclusion">https://makitweb.com/prevent-page-from-submit-on-refresh-in-php/#conclusion</a></p>
</li>
</ul>
<h4 id="前端发送信息的其他方式"><a href="#前端发送信息的其他方式" class="headerlink" title="前端发送信息的其他方式"></a>前端发送信息的其他方式</h4><p>表单提交信息到后端有个致命的问题，那就是每一次提交都需要刷新一次页面，这种现象叫同步请求。</p>
<p>但是很多时候我们只需要局部刷新页面，这时候就需要用到异步请求了。</p>
<p>JavaScript中的Ajax技术就可以实现这样的异步请求，其相当于在表单与后端之间加入一个干活更加利索的信息搬运工</p>
<h5 id="1-js实现Ajax"><a href="#1-js实现Ajax" class="headerlink" title="1.js实现Ajax"></a>1.js实现Ajax</h5><p>js实现Ajax技术需要用到<code>XMLHttpRequest()</code>对象</p>
<p>ajax的工作过程：</p>
<ul>
<li>创建XMLHTTPRequest对象</li>
<li>设置请求的url等参数</li>
<li>发送请求</li>
<li>注册事件</li>
<li>在注册事件中获取返回的内容，并修改页面显示，实现局部刷新</li>
</ul>
<p>我们一般用post的方式，前端send发送，后端$_POST，最后一个echo返回数据，前端ajax.responseText接收返回数据</p>
<p><strong>前端</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>post方式发送数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册名字<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btnName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;tishi&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//绑定失去焦点事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btnName&#x27;</span>).onblur=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送ajax请求到服务器</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//1.创建异步对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> ajax = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      <span class="comment">//2.设置请求的url等参数</span></span></span><br><span class="line"><span class="javascript">      ajax.open(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;example.php&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">/*如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：*/</span></span></span><br><span class="line"><span class="javascript">      ajax.setRequestHeader(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 3.发送请求</span></span></span><br><span class="line"><span class="javascript">      ajax.send(<span class="string">&#x27;Name=&#x27;</span>+<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btnName&#x27;</span>).value);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 4.注册事件</span></span></span><br><span class="line"><span class="javascript">      ajax.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        if (ajax.readyState ==4&amp;&amp;ajax.status==200) &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 5.在注册事件中接收返回的内容并修改数据</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(ajax.responseText);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> show = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#tishi&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                show.style.display=<span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (ajax.responseText ==<span class="string">&quot;exist&quot;</span>) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                show.innerHTML=<span class="string">&#x27;该用户已经注册了！&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                show.innerHTML=<span class="string">&#x27;你可以使用该名字！&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>后端：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">     header(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">     <span class="variable">$name</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;Name&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 准备一个数据 模拟已经存在的用户</span></span><br><span class="line">     <span class="variable">$nameArray</span> = <span class="keyword">array</span>(<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;kong&#x27;</span>,<span class="string">&#x27;rose&#x27;</span>,<span class="string">&#x27;ice&#x27;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 检验是否存在，并且接受返回值</span></span><br><span class="line">     <span class="variable">$result</span>=in_array(<span class="variable">$name</span>, <span class="variable">$nameArray</span>);</span><br><span class="line">     <span class="comment">// 通过if else返回不同的值给浏览器</span></span><br><span class="line">     <span class="keyword">if</span>(<span class="variable">$result</span>)&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;exist&quot;</span>;</span><br><span class="line">     &#125; </span><br><span class="line">	 <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;not exist&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考文章：<a href="https://blog.csdn.net/diligentkong/article/details/72833577">https://blog.csdn.net/diligentkong/article/details/72833577</a></p>
<h5 id="2-jquery实现Ajax"><a href="#2-jquery实现Ajax" class="headerlink" title="2.jquery实现Ajax"></a>2.jquery实现Ajax</h5><p>相对于原生的js，jq实现Ajax的方法无疑简单很多，也是本项目主要使用的方法</p>
<ul>
<li><p>首先使用jq需要引入jq的文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后使用jq构造Ajax</p>
<p><strong>前端</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="comment">// 请求的后端文件</span></span><br><span class="line">	url:<span class="string">&#x27;love.php&#x27;</span>,</span><br><span class="line">    <span class="comment">// 请求方式</span></span><br><span class="line">    type:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="comment">// 发送的数据</span></span><br><span class="line">    data:&#123;<span class="attr">id</span>:id, <span class="attr">choose</span>:tj_count&#125;,</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 成功发送后触发的函数，data2为后端返回的数据</span></span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">data2</span>)</span>&#123;</span><br><span class="line">    	<span class="comment">//修改文本不能用直接等于</span></span><br><span class="line">    	$(e).find(<span class="string">&#x27;.badge&#x27;</span>).text(data2)</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>后端</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收前端ajax发来的数据</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&quot;id&quot;</span>];</span><br><span class="line"><span class="variable">$choose</span> = <span class="variable">$_POST</span>[<span class="string">&quot;choose&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(id==<span class="number">1</span> &amp;&amp; choose==<span class="number">1</span>)&#123;	</span><br><span class="line">	<span class="variable">$num</span> = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回数据</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;</span><br></pre></td></tr></table></figure>






</li>
</ul>
<h4 id="后端获取信息的其他方式"><a href="#后端获取信息的其他方式" class="headerlink" title="后端获取信息的其他方式"></a>后端获取信息的其他方式</h4><p>除了从前端的表单中获取，后端还可以从url,cookie和session中获取信息，当然还有存储信息更为强大的数据库（这里先不讲，后面单独会有专题）</p>
<h5 id="1-以GET的形式获取url中的信息"><a href="#1-以GET的形式获取url中的信息" class="headerlink" title="1.以GET的形式获取url中的信息"></a>1.以GET的形式获取url中的信息</h5><p>通过这种方法可以渲染出数据不同的页面，如文章页，个人主页。</p>
<ul>
<li><p><strong>前端构造url</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;passage.php?id=&#x27;.$passage_row[&quot;</span><span class="attr">id</span>&quot;]<span class="attr">.</span>&#x27;&amp;<span class="attr">method</span>=<span class="string">2</span>&quot; /&gt;</span></span><br></pre></td></tr></table></figure>

<p>‘?’后面是数据，如method的值为’2’</p>
</li>
<li><p><strong>后端获取数据</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>]; </span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="2-把信息存在cookie中"><a href="#2-把信息存在cookie中" class="headerlink" title="2.把信息存在cookie中"></a>2.把信息存在cookie中</h5><p>cookie是将用户信息储存在客户端即浏览器中，供各个页面使用这些在cookie中存储的数据</p>
<p>cookie具备有效期，当有效期结束之后，Cookie会自动的从客户端删除</p>
<p>cookie的数据极易被修改，所以一般来说不会把敏感信息和重要信息存在cookie中</p>
<ul>
<li><p><strong>创建cookie</strong></p>
<p>设置一个名叫”userid”的数据，值为$row[“id”]</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">setcookie(<span class="string">&quot;userid&quot;</span>, <span class="variable">$row</span>[<span class="string">&quot;id&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>也可以通过header来设置cookie</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">&quot;Set-Cookie:cookie_name=value&quot;</span>);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><strong>读取cookie</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$belong_id</span> = <span class="variable">$_COOKIE</span>[<span class="string">&quot;userid&quot;</span>];</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="3-把信息存在session中"><a href="#3-把信息存在session中" class="headerlink" title="3.把信息存在session中"></a>3.把信息存在session中</h5><p>如果说cookie相当于存折，可以看到里面的信息。那么session就像银行卡，你只能用而不能看到被加密的信息，所以信息安全性会更高</p>
<ul>
<li><p><strong>创建session</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;sessionName&#x27;</span>] = <span class="string">&#x27;sessionValue&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;session_id:&quot;</span>.session_id(); <span class="comment">// 显示当前的session_id</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>读取session</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$session</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;sessionName&#x27;</span>];</span><br></pre></td></tr></table></figure>




</li>
</ul>
<h4 id="PHP请求API"><a href="#PHP请求API" class="headerlink" title="PHP请求API"></a>PHP请求API</h4><h5 id="1-file-get-contents请求API"><a href="#1-file-get-contents请求API" class="headerlink" title="1.file_get_contents请求API"></a>1.file_get_contents请求API</h5><p>file_get_contents请求api的方法相对简单，适合请求相对简单的api和网页页面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求api</span></span><br><span class="line"><span class="variable">$api</span> = file_get_contents(<span class="string">&quot;http://api.bilibili.com/x/emote/user/panel/web?business=reply&quot;</span>);</span><br><span class="line"><span class="comment">// 将api返回的数据转换为json数据处理</span></span><br><span class="line"><span class="variable">$data</span> =json_decode(<span class="variable">$api</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 索引json中的数据</span></span><br><span class="line"><span class="variable">$str</span> =  <span class="variable">$data</span> [<span class="string">&quot;data&quot;</span>][<span class="string">&quot;packages&quot;</span>][<span class="variable">$num</span>][<span class="string">&quot;emote&quot;</span>];</span><br></pre></td></tr></table></figure>

<h5 id="2-curl请求API"><a href="#2-curl请求API" class="headerlink" title="2.curl请求API"></a>2.curl请求API</h5><p>curl来请求api才是主流的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个curl的会话</span></span><br><span class="line"><span class="variable">$ch</span> = curl_init();</span><br><span class="line"><span class="comment">// 设置请求的URL</span></span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="string">&quot;http://api.gochati.cn/htapi.phpq=&#x27;<span class="subst">&#123;$str&#125;</span>&#x27;&amp;token=test123&quot;</span>);</span><br><span class="line"><span class="comment">// 设置否将响应结果存入变量，1是存入，0是直接echo出</span></span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 得到响应结果存入变量中</span></span><br><span class="line"><span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>;</span><br><span class="line"><span class="comment">// 关闭这个curl会话</span></span><br><span class="line">curl_close(<span class="variable">$ch</span>);    </span><br></pre></td></tr></table></figure>



<h4 id="把信息存在数据库"><a href="#把信息存在数据库" class="headerlink" title="把信息存在数据库"></a>把信息存在数据库</h4><p>终于来到本文的重头戏了——数据库，后端处理完数据后就可以将数据存在数据表中，方便下一次去使用，更重要的在于可以构建数据间的关系。</p>
<p>本项目用了面向过程的方法，其实和面向对象差别不大</p>
<h5 id="1-连接数据库"><a href="#1-连接数据库" class="headerlink" title="1.连接数据库"></a>1.连接数据库</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;127.0.0.1&quot;</span>;<span class="comment">//以下四行为数据库信息</span></span><br><span class="line"><span class="variable">$user</span> = <span class="string">&quot;user&quot;</span>;<span class="comment">//用户名</span></span><br><span class="line"><span class="variable">$password_all</span> = <span class="string">&quot;123456&quot;</span>;<span class="comment">//密码</span></span><br><span class="line"><span class="variable">$data</span> = <span class="string">&quot;acg&quot;</span>;<span class="comment">//要使用的数据库名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="variable">$servername</span>, <span class="variable">$user</span>, <span class="variable">$password_all</span>, <span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . mysqli_connect_error());</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;连接成功&quot;</span>;</span><br><span class="line"><span class="comment">// 修改字符集的编码方式，现在不推荐使用</span></span><br><span class="line">mysqli_query(<span class="variable">$conn</span>,<span class="string">&quot;set names &#x27;utf8&#x27;;&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="2-创建数据表"><a href="#2-创建数据表" class="headerlink" title="2.创建数据表"></a>2.创建数据表</h5><p>一般的数据表可以提前建好，不用代码来形成。可以使用如Navicat等可视化mysql工具</p>
<p>建表注意事项：</p>
<ul>
<li>表的字段名不要与语言的关键字重复</li>
<li>主键只能设一个，一般设id为主键</li>
<li>注意数据类型和长度，一般的整型数据长度用1，短的字符串用varchar类型，如果要存储文章之类的则需要text类型，长度设为0</li>
<li>字符串的字符集一般是utf8，排序规则一般utf8_general_ci</li>
<li>设置能否为null是特别容易出错的地方，如果设置为不是null即该数据不能为空，在插入数据时如果该数据不插入则会出现数据无法插入的错误（但是是不会报错的（：）</li>
</ul>
<h5 id="3-插入数据"><a href="#3-插入数据" class="headerlink" title="3.插入数据"></a>3.插入数据</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = mysqli_query(<span class="variable">$conn</span>,<span class="string">&quot;INSERT INTO wz (sj, ht, ms, zz, pl, tj) VALUES ( &#x27;<span class="subst">$time</span>&#x27; ,&#x27;<span class="subst">&#123;$topic&#125;</span>&#x27;,&#x27;<span class="subst">&#123;$passage&#125;</span>&#x27;, &#x27;<span class="subst">&#123;$name&#125;</span>&#x27;, 0, 0);&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>mysqli_query</code>是对连接的数据库执行sql语句</li>
<li>sql语句，<code>INSERT INTO</code>即执行插入命令</li>
<li>wz指插入的对象表格，(sj, ht, ms, zz, pl, tj)则是表格的字段，注意如果构建表时设置了某字段为不为null，则该字段一定要填入其中，否则所有的数据都无法插入</li>
<li>VALUES 后面即字段对应的值</li>
</ul>
<h5 id="4-读取数据"><a href="#4-读取数据" class="headerlink" title="4.读取数据"></a>4.读取数据</h5><p>本项目用的最频繁的一定是读取mysql数据了，而且还非常频繁地使用了禁术<code>SELECT *</code>  （：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$passage_result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="string">&#x27;SELECT * FROM wz;&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>( <span class="variable">$passage_row</span> = mysqli_fetch_assoc(<span class="variable">$passage_result</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$passage_row</span>[<span class="string">&quot;id&quot;</span>] == <span class="variable">$id</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$choose</span> == <span class="number">0</span>)&#123;   </span><br><span class="line">            <span class="variable">$num</span> =  ++<span class="variable">$passage_row</span>[<span class="string">&#x27;tj&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;   </span><br><span class="line">             <span class="variable">$num</span> =  --<span class="variable">$passage_row</span>[<span class="string">&#x27;tj&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>SELECT * FROM</code>搜索整个表格的所有字段，但里面填写了字段名，则只搜索该表的该字段。最终整合成一堆关联数组</li>
<li>from后面接数据表名</li>
<li><code>mysqli_fetch_assoc</code>提取出一条关联数组</li>
<li><code>while( $passage_row = mysqli_fetch_assoc($passage_result))</code>逐个遍历之前生成一堆关联数组</li>
<li><code>$passage_row[&quot;id&quot;]</code>索引一条关联数组的id</li>
</ul>
<h5 id="5-整合数据"><a href="#5-整合数据" class="headerlink" title="5.整合数据"></a>5.整合数据</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$result</span>  = mysqli_query(<span class="variable">$conn</span>, <span class="string">&quot;select * from comment where passage_id = &#x27;<span class="subst">&#123;$id&#125;</span>&#x27;&quot;</span>);</span><br><span class="line"><span class="variable">$all</span> = mysqli_num_rows(<span class="variable">$result</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$all</span>;</span><br></pre></td></tr></table></figure>

<p><code>where</code>可以达到批量操作同一个数据表的多个数据的操作，也常常用于统计数据表的相同数据</p>
<h5 id="6-更新数据"><a href="#6-更新数据" class="headerlink" title="6.更新数据"></a>6.更新数据</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询插入即更新已有数据</span></span><br><span class="line"><span class="variable">$comment_add</span> = mysqli_query(<span class="variable">$conn</span>, <span class="string">&quot;UPDATE wz SET pl = &#x27;<span class="subst">&#123;$all&#125;</span>&#x27; WHERE id = &#x27;<span class="subst">&#123;$id&#125;</span>&#x27; &quot;</span>);</span><br></pre></td></tr></table></figure>

<p>update比较简单，值得一提的是，它可以和where结合更新指定数据（相当于if的作用，还不用遍历）</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
        <tag>后端</tag>
        <tag>Bootstrap</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工具|matlab查询文档</title>
    <url>/2020/12/20/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-matlab%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040959763.png" alt="image-20210904095937186"></p>
<span id="more"></span>

<h4 id="matlab算数运算"><a href="#matlab算数运算" class="headerlink" title="matlab算数运算"></a>matlab算数运算</h4><p>快速查询：<a href="https://ww2.mathworks.cn/help/matlab/arithmetic.html?searchHighlight=算术&s_tid=srchtitle">算术运算 - MATLAB &amp; Simulink - MathWorks 中国</a></p>
<h5 id="1-基本运算"><a href="#1-基本运算" class="headerlink" title="1.基本运算"></a>1.基本运算</h5><table>
<thead>
<tr>
<th>符号</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>.*</td>
<td>乘法</td>
</tr>
<tr>
<td>*</td>
<td>矩阵乘法</td>
</tr>
<tr>
<td>./</td>
<td>数组右除</td>
</tr>
<tr>
<td>.\</td>
<td>数组左除</td>
</tr>
<tr>
<td>x = B/A</td>
<td>对线性方程组 xA = B 求解 x（矩阵适用）</td>
</tr>
<tr>
<td>x=A\B</td>
<td>对线性方程组 Ax = B 求解 x（矩阵适用）</td>
</tr>
<tr>
<td>b = mod(<a href="https://ww2.mathworks.cn/help/matlab/ref/mod.html#btvg3sl-1-a"><code>a</code></a>,<a href="https://ww2.mathworks.cn/help/matlab/ref/mod.html#btvg3sl-1-m"><code>m</code></a>)</td>
<td>返回 <code>a</code> 除以 <code>m</code> 后的余数，其中 <code>a</code> 是被除数，<code>m</code> 是除数</td>
</tr>
</tbody></table>
<h5 id="2-基本数数学函数"><a href="#2-基本数数学函数" class="headerlink" title="2.基本数数学函数"></a>2.基本数数学函数</h5><p>快速查询：<a href="https://blog.csdn.net/cc198877/article/details/8106016">Matlab常用数学函数和数学运算符_cc198877的专栏-CSDN博客_matlab数学运算符</a></p>
<h4 id="matlab数组与矩阵运算"><a href="#matlab数组与矩阵运算" class="headerlink" title="matlab数组与矩阵运算"></a>matlab数组与矩阵运算</h4><p>矩阵运算遵循线性代数的法则。与之不同，数组运算则是执行逐元素运算并支持多维数组</p>
<p>快速查询：<a href="https://ww2.mathworks.cn/help/matlab/matlab_prog/array-vs-matrix-operations.html?searchHighlight=矩阵运算&s_tid=srchtitle">数组与矩阵运算 - MATLAB &amp; Simulink - MathWorks 中国</a></p>
<h5 id="1-矩阵加法"><a href="#1-矩阵加法" class="headerlink" title="1.矩阵加法"></a>1.矩阵加法</h5><p>由于矩阵运算和数组运算在加法和减法的运算上相同，因此没有必要使用字符组合 <code>.+</code> 和 <code>.-</code>。</p>
<h5 id="2-矩阵数乘"><a href="#2-矩阵数乘" class="headerlink" title="2.矩阵数乘"></a>2.矩阵数乘</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040958630.png" alt="image-20201201103241881"></p>
<h5 id="3-矩阵乘法"><a href="#3-矩阵乘法" class="headerlink" title="3.矩阵乘法"></a>3.矩阵乘法</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040958737.png" alt="image-20201201103558855"></p>
<h5 id="4-数组运算"><a href="#4-数组运算" class="headerlink" title="4.数组运算"></a>4.数组运算</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040958930.png" alt="image-20201201103711838"></p>
<h5 id="5-矩阵运算"><a href="#5-矩阵运算" class="headerlink" title="5.矩阵运算"></a>5.矩阵运算</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040958852.png" alt="image-20201201103757776"></p>
<h4 id="矩阵简单操作"><a href="#矩阵简单操作" class="headerlink" title="矩阵简单操作"></a>矩阵简单操作</h4><p>快速查询：<a href="https://ww2.mathworks.cn/help/matlab/matrices-and-arrays.html?searchHighlight=矩阵&s_tid=srchtitle">矩阵和数组 - MATLAB &amp; Simulink - MathWorks 中国</a></p>
<p>详细总结：<a href="https://www.cnblogs.com/ran_ran/archive/2010/12/11/1903070.html">matlab矩阵的表示和简单操作 - Hello_Word - 博客园 (cnblogs.com)</a></p>
<h5 id="1-矩阵创建"><a href="#1-矩阵创建" class="headerlink" title="1.矩阵创建"></a>1.矩阵创建</h5><p>（1）直接输入法</p>
<p>（2）利用MATLAB函数创建矩阵</p>
<p>​          常用的如下</p>
<ul>
<li>ones()函数：产生全为1的矩阵，ones(n)：产生n<em>n维的全1矩阵，ones(m,n)：产生m</em>n维的全1矩阵；</li>
<li>zeros()函数：产生全为0的矩阵；</li>
<li>rand()函数：产生在（0，1）区间均匀分布的随机阵；</li>
<li>eye()函数：产生单位阵；</li>
<li>randn()函数：产生均值为0，方差为1的标准正态分布随机矩阵。</li>
</ul>
<p>（3）利用运算确定范围</p>
<p>如：产生一个均匀分布在（-5，5）之间的随即矩阵（10×2）</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span> = <span class="title">my</span><span class="params">()</span></span></span><br><span class="line">    A = <span class="number">-5</span> + <span class="number">10</span> * <span class="built_in">rand</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">    A = roundn(A,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="2-矩阵索引"><a href="#2-矩阵索引" class="headerlink" title="2.矩阵索引"></a>2.矩阵索引</h5><p>（1）索引矩阵中一个元素</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># 表示索引A矩阵第i行、第j列的元素</span><br><span class="line">A(<span class="built_in">i</span>,<span class="built_in">j</span>)</span><br></pre></td></tr></table></figure>

<p>（2）遍历一个矩阵中所有元素</p>
<p>一般用例：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = <span class="built_in">randn</span>(<span class="number">3</span>,<span class="number">4</span>)     <span class="comment">% 创建3行4列随机矩阵</span></span><br><span class="line">[r,c] = <span class="built_in">size</span>(A)    <span class="comment">% 读取行r、列c</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:r        <span class="comment">% 建立for循环嵌套</span></span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>:c</span><br><span class="line">        A(<span class="built_in">i</span>,k)     <span class="comment">% 读取矩阵每个位置数据，先行后列</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>find方法（查找非零元素的索引和值）：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># k = find(X) 返回一个包含数组 X 中每个非零元素的线性索引的向量，用length可以统计个数</span><br><span class="line">X = [<span class="number">18</span> <span class="number">3</span> <span class="number">1</span> <span class="number">11</span>; <span class="number">8</span> <span class="number">10</span> <span class="number">11</span> <span class="number">3</span>; <span class="number">9</span> <span class="number">14</span> <span class="number">6</span> <span class="number">1</span>; <span class="number">4</span> <span class="number">3</span> <span class="number">15</span> <span class="number">21</span>]</span><br><span class="line"># 通过find查找矩阵中的所有符合条件的元素，并把其索引组成数组</span><br><span class="line">[row,col] = <span class="built_in">find</span>(X&gt;<span class="number">0</span> &amp; X&lt;<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>实用案例：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># 需要用到两个循环来遍历元素</span><br><span class="line">a = [</span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">-2</span>, <span class="number">8</span>;</span><br><span class="line"><span class="number">3</span>, <span class="number">-4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">-8</span>;</span><br><span class="line"><span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">-1</span>;</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">55</span>, <span class="number">1</span>, <span class="number">-2</span>;</span><br><span class="line">];</span><br><span class="line"># 创建一个空矩阵存储符合条件的元素</span><br><span class="line">b  = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="number">5</span></span><br><span class="line">        <span class="keyword">if</span> a(<span class="built_in">i</span>,<span class="built_in">j</span>) &gt; <span class="number">1</span></span><br><span class="line">        # 矩阵添加元素（子矩阵）的方法</span><br><span class="line">            b = [b a(<span class="built_in">i</span>,<span class="built_in">j</span>)];</span><br><span class="line">        <span class="keyword">end</span>    </span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="built_in">disp</span>(b);</span><br></pre></td></tr></table></figure>



<h5 id="3-矩阵拆分和组合"><a href="#3-矩阵拆分和组合" class="headerlink" title="3.矩阵拆分和组合"></a>3.矩阵拆分和组合</h5><p>（1）组合（串联）</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># 将两个行向量串联起来，形成一个更长的行向量</span><br><span class="line">A = <span class="built_in">ones</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">B = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">C = [A B]</span><br></pre></td></tr></table></figure>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># 将 A 和 B 排列为一个矩阵的两行</span><br><span class="line">D = [A;B]</span><br></pre></td></tr></table></figure>

<p>（2）拆分（取出一个子矩阵）</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">A(:,j) # 表示取A矩阵的第j列全部元素</span><br><span class="line">A(i,:) # 表示A矩阵第i行的全部元素</span><br><span class="line">A(i:i+m,:) # 表示取A矩阵第i~i+m行的全部元素</span><br><span class="line">A(i:i+m,k:k+m) # 表示取A矩阵第i~i+m行内，并在第k~k+m列中的所有元素</span><br></pre></td></tr></table></figure>



<h5 id="4-矩阵的相关计算"><a href="#4-矩阵的相关计算" class="headerlink" title="4.矩阵的相关计算"></a>4.矩阵的相关计算</h5><p>v为矩阵的特征值，d为特征向量</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0.5</span>; <span class="number">1</span>,<span class="number">1</span>,<span class="number">0.25</span>; <span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">2</span>;];</span><br><span class="line">[v,d] = eig(a);</span><br><span class="line"><span class="built_in">disp</span>(v);</span><br><span class="line"><span class="built_in">disp</span>(d);</span><br></pre></td></tr></table></figure>



<h4 id="MATLAB的图形绘制"><a href="#MATLAB的图形绘制" class="headerlink" title="MATLAB的图形绘制"></a>MATLAB的图形绘制</h4><p>快速查询：<a href="https://ww2.mathworks.cn/help/matlab/learn_matlab/basic-plotting-functions.html#responsive_offcanvas">https://ww2.mathworks.cn/help/matlab/learn_matlab/basic-plotting-functions.html#responsive_offcanvas</a></p>
<h5 id="一-绘制一般曲线（二维线图）"><a href="#一-绘制一般曲线（二维线图）" class="headerlink" title="一.绘制一般曲线（二维线图）"></a>一.绘制一般曲线（二维线图）</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># x定周期，通过加减表示无意义点</span><br><span class="line">x = [<span class="number">0</span>:<span class="number">0.01</span>:<span class="built_in">pi</span>/<span class="number">2</span><span class="number">-0.01</span>, <span class="built_in">pi</span>/<span class="number">2</span>+<span class="number">0.01</span>:<span class="number">0.01</span>:(<span class="number">3</span>*<span class="built_in">pi</span>/<span class="number">2</span>)<span class="number">-0.01</span>, (<span class="number">3</span>*<span class="built_in">pi</span>/<span class="number">2</span>)+<span class="number">0.01</span>:<span class="number">0.01</span>:<span class="number">2</span>*<span class="built_in">pi</span>];</span><br><span class="line"># 定义y的函数（此处分别为正割和余割）</span><br><span class="line">y1 = <span class="built_in">sec</span>(x);</span><br><span class="line">y2 = <span class="built_in">csc</span>(x);</span><br><span class="line"></span><br><span class="line"># subplot 命令用于在同一窗口中显示多个绘图，此处表示的意思是将窗口划分为2*1（即上下两幅图），并选择第一处</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"># 绘制图形，r-表示绘制红色点划线</span><br><span class="line"><span class="built_in">plot</span>(x,y1,<span class="string">&#x27;r-.&#x27;</span>)</span><br><span class="line"># 注意要绘制完图形后，才能加上标注</span><br><span class="line">xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;正割公式&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># 选定第二处绘图</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,y2,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;余割公式&#x27;</span>)</span><br><span class="line"># axis设置坐标轴范围，x为0-3，y为0-12</span><br><span class="line">axis([<span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">12</span>]);</span><br></pre></td></tr></table></figure>



<h5 id="二-绘制极坐标曲线"><a href="#二-绘制极坐标曲线" class="headerlink" title="二.绘制极坐标曲线"></a>二.绘制极坐标曲线</h5><p>快速查询：<a href="https://ww2.mathworks.cn/help/matlab/ref/polarplot.html#d122e940353">https://ww2.mathworks.cn/help/matlab/ref/polarplot.html#d122e940353</a></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># theta参数为极坐标曲线的角度值，此处表示从0-2pi</span><br><span class="line">theta = <span class="number">0</span>:<span class="number">0.01</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line"># input输入数据</span><br><span class="line">a = input(<span class="string">&#x27;a=&#x27;</span>);</span><br><span class="line">b = input(<span class="string">&#x27;b=&#x27;</span>);</span><br><span class="line">n = input(<span class="string">&#x27;n=&#x27;</span>);</span><br><span class="line"># rho参数为半径值，即极坐标曲线的ρ</span><br><span class="line">rho = a*<span class="built_in">sin</span>(b+n*theta);</span><br><span class="line"># 生成曲线图，r设定曲线为红色</span><br><span class="line">polarplot(theta,rho,<span class="string">&#x27;r&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h5 id="三-绘制曲面图"><a href="#三-绘制曲面图" class="headerlink" title="三.绘制曲面图"></a>三.绘制曲面图</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># meshgrid(x,y)基于向量 x 和 y 中包含的坐标返回二维网格坐标</span><br><span class="line">[x, y] = <span class="built_in">meshgrid</span>(<span class="number">0</span>: <span class="number">0.1</span>:<span class="number">100</span>);</span><br><span class="line"># 注意在绘图对象函数中，运算一般用点乘，点幂</span><br><span class="line">z = x.^<span class="number">2</span> + y.^<span class="number">2</span> + <span class="built_in">sin</span>(x.*y);</span><br><span class="line"># 绘制等高线</span><br><span class="line">contour(z,<span class="number">2</span>)</span><br><span class="line"># 创建一个三维曲面图</span><br><span class="line">surf(x, y, z)</span><br><span class="line"></span><br><span class="line">[x,y]=<span class="built_in">meshgrid</span>(<span class="number">-4</span>:<span class="number">0.1</span>:<span class="number">4</span>);</span><br><span class="line">z = x.^<span class="number">2</span> + y.^<span class="number">2</span>;</span><br><span class="line"># 创建一个网格图，该网格图为三维曲面</span><br><span class="line">mesh(x, y, z);</span><br><span class="line"># 设置当前颜色图（有一些预设的方案提供）</span><br><span class="line">colormap(hot)</span><br></pre></td></tr></table></figure>



<h4 id="matlab程序设计"><a href="#matlab程序设计" class="headerlink" title="matlab程序设计"></a>matlab程序设计</h4><h5 id="1-if-else"><a href="#1-if-else" class="headerlink" title="1.if-else"></a>1.if-else</h5><p>编写求解方程根的函数</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a = input(<span class="string">&#x27;a值：&#x27;</span>);</span><br><span class="line">b = input(<span class="string">&#x27;b值：&#x27;</span>);</span><br><span class="line">c = input(<span class="string">&#x27;c值：&#x27;</span>);</span><br><span class="line">t = b^<span class="number">2</span> - <span class="number">4</span>*a*c;</span><br><span class="line"></span><br><span class="line"># 通过条件判断分流</span><br><span class="line"># 每个if要用一个end结束</span><br><span class="line"><span class="keyword">if</span> a==<span class="number">0</span> &amp;&amp; b==<span class="number">0</span></span><br><span class="line">       <span class="built_in">disp</span>(<span class="string">&#x27;为恒不等式&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elseif</span> a==<span class="number">0</span></span><br><span class="line">       x = -c/b;</span><br><span class="line">       <span class="built_in">disp</span>(x)    </span><br><span class="line"><span class="keyword">else</span>        </span><br><span class="line">    <span class="keyword">if</span> t&lt;<span class="number">0</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;该方程无解&#x27;</span>)</span><br><span class="line">    <span class="keyword">elseif</span> t==<span class="number">0</span></span><br><span class="line">        x = -b/<span class="number">2</span>*a;</span><br><span class="line">        fprintf(<span class="string">&#x27;x1=x2=%d&#x27;</span>,x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        x1 = (-b+<span class="built_in">sqrt</span>(t))/<span class="number">2</span>*a;</span><br><span class="line">        x2 = (-b-<span class="built_in">sqrt</span>(t))/<span class="number">2</span>*a;</span><br><span class="line">        fprintf(<span class="string">&#x27;x1=%d\nx2=%d&#x27;</span>,x1,x2);</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line">       </span><br><span class="line"><span class="keyword">end</span> </span><br></pre></td></tr></table></figure>



<h5 id="2-switch"><a href="#2-switch" class="headerlink" title="2.switch"></a>2.switch</h5><p>输入一个百分制成绩，要求输出成绩等级</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 取整分级</span></span><br><span class="line">sorce = input(<span class="string">&#x27;请输入你的成绩：&#x27;</span>);</span><br><span class="line">level = <span class="built_in">floor</span>(sorce/<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sorce&gt;<span class="number">100</span> || sorce &lt;<span class="number">0</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span>    </span><br><span class="line"></span><br><span class="line"># matlab的switch不用break结束</span><br><span class="line"><span class="keyword">switch</span> level</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;A+&#x27;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;B&#x27;</span>)    </span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;C&#x27;</span>) </span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">    <span class="keyword">otherwise</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span>        </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a>3.for循环</h5><p>利用for循环语句编写计算n!的函数程序</p>
<p>累加法时定义初始数为0</p>
<p>累积法时定义初始数为1</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[res]</span> = <span class="title">work43</span><span class="params">(n)</span></span></span><br><span class="line">    res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> n&lt;<span class="number">0</span></span><br><span class="line">        res=<span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">    <span class="keyword">elseif</span> n == <span class="number">0</span></span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">        res = res*<span class="built_in">i</span>; </span><br><span class="line">        <span class="keyword">end</span>   </span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<h5 id="4-构建Fibonacci数组"><a href="#4-构建Fibonacci数组" class="headerlink" title="4.构建Fibonacci数组"></a>4.构建Fibonacci数组</h5><p>matlab的数组可以自动拓宽</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a(<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">a(<span class="number">2</span>) = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> a(k) &lt; <span class="number">10000</span></span><br><span class="line">    a(k+<span class="number">2</span>) = a(k) + a(k+<span class="number">1</span>);</span><br><span class="line">    k = k + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(a(k))</span><br></pre></td></tr></table></figure>



<h4 id="SIMULINK仿真"><a href="#SIMULINK仿真" class="headerlink" title="SIMULINK仿真"></a>SIMULINK仿真</h4><p>快速入门：<a href="https://ww2.mathworks.cn/help/simulink/getting-started-with-simulink.html">https://ww2.mathworks.cn/help/simulink/getting-started-with-simulink.html</a></p>
<p>快速查询常用模块：<a href="https://www.cnblogs.com/dingdangsunny/p/12235689.html#_label1_2">https://www.cnblogs.com/dingdangsunny/p/12235689.html#_label1_2</a></p>
<p>一.simulink表示微分方程</p>
<p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20201214215652329.png" alt="image-20201214215652329"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040958323.png" alt="image-20201214221002667"></p>
<ul>
<li>Step：跃迁信号</li>
<li>Gain：支持标量、向量或矩阵形式的增益。（可以看作是高级的乘法）</li>
<li>Add：加法模块（sum模块也很常用）</li>
<li>Integrator：积分模块</li>
<li>Scope：示波器</li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>入门教程</tag>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP|wordpress仿站</title>
    <url>/2020/06/02/PHP-wordpress%E4%BB%BF%E7%AB%99%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>最近接了一个用wordpress仿站的项目，本以为很简单，但实际上手后才发现了一些“小”问题，而且中文网上关于wordpress的教程不仅少，而且老，很多都已经不适用于5.x后的版本，现在就把我在开发过程中遇到问题整理成该文</p>
<span id="more"></span>



<h3 id="循环块"><a href="#循环块" class="headerlink" title="循环块"></a>循环块</h3><p>这大概是wordpress最实用的功能了，在把静态网页改成动态网页中发挥极大的作用，使用方法如下：</p>
<h5 id="（1）静态代码"><a href="#（1）静态代码" class="headerlink" title="（1）静态代码"></a>（1）静态代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;jj2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;kiz_zyzx&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/zyzx/zyzx01/201807/t20180709_5038706.html&quot;</span>&gt;</span>中心简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/zyzx/zyzx05/&quot;</span>&gt;</span>科研进展<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/zyzx/zyzx01/zyzx03/&quot;</span>&gt;</span>骨干人才<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/zyzx/zyzx07/&quot;</span>&gt;</span>新闻动态<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/zyzx/zyzx07/zyzx72/&quot;</span>&gt;</span>通知公告<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.yunzhan365.com/bookcase/jvpq/&quot;</span>&gt;</span>中心简报<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    观察静态代码循环的地方，确定循环块</p>
<h5 id="（2）动态代码"><a href="#（2）动态代码" class="headerlink" title="（2）动态代码"></a>（2）动态代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;jj2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;kiz_zyzx&quot;</span>&gt;</span></span><br><span class="line">     &lt;?php query_posts(&#x27;cat=10 &amp; posts_per_page=6&#x27;);</span><br><span class="line">     while (have_posts()) : the_post(); ?&gt;</span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;?php lxtx_post_link(); ?&gt;&quot;</span>&gt;</span>&lt;?php the_title(); ?&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">     &lt;?php endwhile;wp_reset_query(); ?&gt;</span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用   <code>&lt;?php query_posts(&#39;cat=10 &amp; posts_per_page=6&#39;); while (have_posts()) : the_post(); ?&gt;</code>与  <code>&lt;?php endwhile;wp_reset_query(); ?&gt;</code> 夹住要循环的块</li>
<li>cat属性对应后台分类目录id（鼠标悬浮在目录上可在左下角查看），posts_per_page属性对应循环次数</li>
<li>再修改循环块内部的静态内容为动态内容，如<code>&lt;?php the_title(); ?&gt;</code></li>
</ul>
<h3 id="循环分栏"><a href="#循环分栏" class="headerlink" title="循环分栏"></a>循环分栏</h3><p>上面提到了循环块的使用，那有些时候会碰到循环过程中样式的规律性变化，如下图</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041010927.png" alt="在这里插入图片描述"></p>
<p>这时就要用到php输出html元素</p>
<h5 id="（1）静态代码-1"><a href="#（1）静态代码-1" class="headerlink" title="（1）静态代码"></a>（1）静态代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;28&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;kiz_zyzx&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./gkjj/jgjj/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>机构简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;28&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;kiz_zyzx&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./gkjj/szzc/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>所长致辞<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;28&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;kiz_zyzx&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./gkjj/leadership/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>研究所领导<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;28&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;kiz_zyzx&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./gkjj/zzjg/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>组织机构<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>仔细观察静态代码的结构，和其循环有规律的地方，大致简化规律</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>   </span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>   </span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以我们可以想到，循环<td>标签的内容，每循环两次后，用php输出</td><tr>标签</tr></p>
<p>（2）动态代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">         &lt;?php query_posts(&#39;cat&#x3D;8 &amp; posts_per_page&#x3D;5&#39;);</span><br><span class="line">         while (have_posts()) : the_post();</span><br><span class="line">           $count++; ?&gt;</span><br><span class="line">           &lt;td width&#x3D;&quot;50%&quot; height&#x3D;&quot;28&quot; align&#x3D;&quot;left&quot;&gt;</span><br><span class="line">             &lt;table width&#x3D;&quot;100%&quot; border&#x3D;&quot;0&quot; cellpadding&#x3D;&quot;0&quot; cellspacing&#x3D;&quot;0&quot;&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                 &lt;td class&#x3D;&quot;kiz_zyzx&quot;&gt;</span><br><span class="line">                   &lt;a href&#x3D;&quot;&lt;?php the_permalink(); ?&gt;&quot; target&#x3D;&quot;_blank&quot;&gt;&lt;?php 								the_title(); ?&gt;&lt;&#x2F;a&gt;</span><br><span class="line">                 &lt;&#x2F;td&gt;</span><br><span class="line">               &lt;&#x2F;tr&gt;</span><br><span class="line">             &lt;&#x2F;table&gt;</span><br><span class="line">           &lt;&#x2F;td&gt;</span><br><span class="line"></span><br><span class="line">           &lt;?php if ($count &#x3D;&#x3D; 2) &#123;</span><br><span class="line">             echo &#39;&lt;tr&gt;&#39;;</span><br><span class="line">             $count &#x3D; 0;</span><br><span class="line">           &#125; ?&gt;</span><br><span class="line">         &lt;?php endwhile;</span><br><span class="line">         wp_reset_query(); ?&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br></pre></td></tr></table></figure>

<p>用$count记录循环次数，再用条件句<code>if ($count == 2)</code>循环输出tr标签</p>
<h3 id="获取文章首图"><a href="#获取文章首图" class="headerlink" title="获取文章首图"></a>获取文章首图</h3><p>在仿站过程中，往往有需要动态插入图片的地方，这时候往往通过获取文章首图的方法来插入图片</p>
<h5 id="（1）获取图片的函数"><a href="#（1）获取图片的函数" class="headerlink" title="（1）获取图片的函数"></a>（1）获取图片的函数</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">catch_that_image</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$post</span>, <span class="variable">$posts</span>;</span><br><span class="line">    <span class="variable">$first_img</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    ob_start();</span><br><span class="line">    ob_end_clean();</span><br><span class="line">    <span class="variable">$output</span> = preg_match_all(<span class="string">&#x27;/&lt;img.+src=[\&#x27;&quot;]([^\&#x27;&quot;]+)[\&#x27;&quot;].*&gt;/i&#x27;</span>, <span class="variable">$post</span>-&gt;post_content, <span class="variable">$matches</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文章中第一张图片的路径并输出</span></span><br><span class="line">    <span class="variable">$first_img</span> = <span class="variable">$matches</span> [<span class="number">1</span>] [<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//如果文章无图片，获取自定义图片</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$first_img</span>))&#123; </span><br><span class="line">    <span class="variable">$first_img</span> = <span class="string">&quot;&quot;</span>.bloginfo(<span class="string">&#x27;template_url&#x27;</span>).<span class="string">&quot;/images/xx.jpg&quot;</span>;   <span class="comment">//设置默认图片</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$first_img</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把该函数放入function.php文件中</p>
<h5 id="（2）修改静态内容"><a href="#（2）修改静态内容" class="headerlink" title="（2）修改静态内容"></a>（2）修改静态内容</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;tile&quot; style&#x3D;&quot;margin-left:4px;&quot;&gt;</span><br><span class="line">                                                                                          &lt;div class&#x3D;&quot;text&quot;&gt;</span><br><span class="line">                                                                                            &lt;img src&#x3D;&quot;&lt;?php echo catch_that_image() ?&gt;&quot; width&#x3D;240 height&#x3D;160 border&#x3D;0 &#x2F;&gt;</span><br><span class="line">                                                                                            &lt;h2 class&#x3D;&quot;animate-text&quot;&gt; &lt;a href&#x3D;&quot;&lt;?php the_permalink(); ?&gt;&quot; target&#x3D;&quot;_blank&quot;&gt;&lt;?php the_title(); ?&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;</span><br><span class="line">                                                                                         &lt;&#x2F;div&gt;</span><br><span class="line">                                                                                        &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>将静态的图片链接改为<code>&lt;?php echo catch_that_image() ?&gt;</code>,获取文章的首图</p>
<h3 id="插入外部链接"><a href="#插入外部链接" class="headerlink" title="插入外部链接"></a>插入外部链接</h3><p>在仿站过程中，有些地方需要插入外部链接而不是跳转到默认的文章页，这时候需要一个插入外部链接的函数</p>
<h5 id="（1）获取外部链接函数"><a href="#（1）获取外部链接函数" class="headerlink" title="（1）获取外部链接函数"></a>（1）获取外部链接函数</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取外部链接，the_permalink() 替换为out_post_link()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">out_post_link</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$post</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$thePostID</span> = <span class="variable">$post</span>-&gt;ID;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$post_id</span> = get_post(<span class="variable">$thePostID</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$title</span> = <span class="variable">$post_id</span>-&gt;post_title;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$perm</span> = get_permalink(<span class="variable">$post_id</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$post_keys</span> = <span class="keyword">array</span>(); <span class="variable">$post_val</span> = <span class="keyword">array</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$post_keys</span> = get_post_custom_keys(<span class="variable">$thePostID</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$post_keys</span>)) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$post_keys</span> <span class="keyword">as</span> <span class="variable">$pkey</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$pkey</span>==<span class="string">&#x27;out_url&#x27;</span> || <span class="variable">$pkey</span>==<span class="string">&#x27;title_url&#x27;</span> || <span class="variable">$pkey</span>==<span class="string">&#x27;url_title&#x27;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$post_val</span> = get_post_custom_values(<span class="variable">$pkey</span>);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$post_val</span>)) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$link</span> = <span class="variable">$perm</span>;</span><br><span class="line">    </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$link</span> = <span class="variable">$post_val</span>[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$link</span> = <span class="variable">$perm</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$link</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>同样把该函数放在function.php文件</p>
<h5 id="（2）使用方法"><a href="#（2）使用方法" class="headerlink" title="（2）使用方法"></a>（2）使用方法</h5><ul>
<li><p>在需要跳转外部链接的地方插入<code>&lt;?php out_post_link() ?&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;?php lxtx_post_link()?&gt;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&lt;?php echo catch_that_image() ?&gt;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;202003&quot;</span> <span class="attr">border</span>=<span class="string">0</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在wordpress后台相应的文章中插入自定义字段：out_url / title_url / utl_title,内容就填写要跳转的外部链接</p>
</li>
</ul>
<h3 id="面包屑导航"><a href="#面包屑导航" class="headerlink" title="面包屑导航"></a>面包屑导航</h3><h5 id="（1）面包屑函数"><a href="#（1）面包屑函数" class="headerlink" title="（1）面包屑函数"></a>（1）面包屑函数</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cmp_breadcrumbs</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="variable">$delimiter</span> = <span class="string">&#x27;&amp;nbsp;&gt;&amp;nbsp;&#x27;</span>; <span class="comment">// 分隔符</span></span><br><span class="line">  <span class="variable">$before</span> = <span class="string">&#x27;&lt;span class=&quot;top_path&quot;&gt;&#x27;</span>; <span class="comment">// 在当前链接前插入</span></span><br><span class="line">  <span class="variable">$after</span> = <span class="string">&#x27;&lt;/span&gt;&#x27;</span>; <span class="comment">// 在当前链接后插入</span></span><br><span class="line">  <span class="keyword">if</span> (!is_home() &amp;&amp; !is_front_page() || is_paged()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is_category()) &#123; <span class="comment">// 分类 存档</span></span><br><span class="line">      <span class="keyword">global</span> <span class="variable">$wp_query</span>;</span><br><span class="line">      <span class="variable">$cat_obj</span> = <span class="variable">$wp_query</span>-&gt;get_queried_object();</span><br><span class="line">      <span class="variable">$thisCat</span> = <span class="variable">$cat_obj</span>-&gt;term_id;</span><br><span class="line">      <span class="variable">$thisCat</span> = get_category(<span class="variable">$thisCat</span>);</span><br><span class="line">      <span class="variable">$parentCat</span> = get_category(<span class="variable">$thisCat</span>-&gt;parent);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$thisCat</span>-&gt;parent != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable">$cat_code</span> = get_category_parents(<span class="variable">$parentCat</span>, <span class="literal">TRUE</span>, <span class="string">&#x27; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$cat_code</span> = str_replace(<span class="string">&#x27;&lt;a&#x27;</span>, <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot;&#x27;</span>, <span class="variable">$cat_code</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&quot;&gt;&#x27;</span> . single_cat_title(<span class="string">&#x27;&#x27;</span>, <span class="literal">false</span>) . <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_day()) &#123; <span class="comment">// 天 存档</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;a itemprop=&quot;breadcrumb&quot; href=&quot;&#x27;</span> . get_year_link(get_the_time(<span class="string">&#x27;Y&#x27;</span>)) . <span class="string">&#x27;&quot;&gt;&#x27;</span> . get_the_time(<span class="string">&#x27;Y&#x27;</span>) . <span class="string">&#x27;&lt;/a&gt; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;a itemprop=&quot;breadcrumb&quot;  href=&quot;&#x27;</span> . get_month_link(get_the_time(<span class="string">&#x27;Y&#x27;</span>), get_the_time(<span class="string">&#x27;m&#x27;</span>)) . <span class="string">&#x27;&quot;&gt;&#x27;</span> . get_the_time(<span class="string">&#x27;F&#x27;</span>) . <span class="string">&#x27;&lt;/a&gt; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span> . get_the_time(<span class="string">&#x27;d&#x27;</span>) . <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_month()) &#123; <span class="comment">// 月 存档</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;a itemprop=&quot;breadcrumb&quot; href=&quot;&#x27;</span> . get_year_link(get_the_time(<span class="string">&#x27;Y&#x27;</span>)) . <span class="string">&#x27;&quot;&gt;&#x27;</span> . get_the_time(<span class="string">&#x27;Y&#x27;</span>) . <span class="string">&#x27;&lt;/a&gt; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span> . get_the_time(<span class="string">&#x27;F&#x27;</span>) . <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_year()) &#123; <span class="comment">// 年 存档</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span> . get_the_time(<span class="string">&#x27;Y&#x27;</span>) . <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_single() &amp;&amp; !is_attachment()) &#123; <span class="comment">// 文章</span></span><br><span class="line">      <span class="keyword">if</span> (get_post_type() != <span class="string">&#x27;post&#x27;</span>) &#123; <span class="comment">// 自定义文章类型</span></span><br><span class="line">        <span class="variable">$post_type</span> = get_post_type_object(get_post_type());</span><br><span class="line">        <span class="variable">$slug</span> = <span class="variable">$post_type</span>-&gt;rewrite;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&#x27;</span> . <span class="variable">$homeLink</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$slug</span>[<span class="string">&#x27;slug&#x27;</span>] . <span class="string">&#x27;/&quot;&gt;&#x27;</span> . <span class="variable">$post_type</span>-&gt;labels-&gt;singular_name . <span class="string">&#x27;&lt;/a&gt; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&#x27;</span> . the_permalink()  . <span class="string">&#x27;&quot;&gt;&#x27;</span> .wp_trim_words( get_the_title(), <span class="number">6</span> ). <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 文章 post</span></span><br><span class="line">        <span class="variable">$cat</span> = get_the_category();</span><br><span class="line">        <span class="variable">$cat</span> = <span class="variable">$cat</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="variable">$cat_code</span> = get_category_parents(<span class="variable">$cat</span>, <span class="literal">TRUE</span>, <span class="string">&#x27; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$cat_code</span> = str_replace(<span class="string">&#x27;&lt;a&#x27;</span>, <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot;&#x27;</span>, <span class="variable">$cat_code</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&quot;&gt;&#x27;</span> . wp_trim_words( get_the_title(), <span class="number">5</span>) . <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (!is_single() &amp;&amp; !is_page() &amp;&amp; get_post_type() != <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable">$post_type</span> = get_post_type_object(get_post_type());</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span> . <span class="variable">$post_type</span>-&gt;labels-&gt;singular_name . <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_attachment()) &#123; <span class="comment">// 附件</span></span><br><span class="line">      <span class="variable">$parent</span> = get_post(<span class="variable">$post</span>-&gt;post_parent);</span><br><span class="line">      <span class="variable">$cat</span> = get_the_category(<span class="variable">$parent</span>-&gt;ID);</span><br><span class="line">      <span class="variable">$cat</span> = <span class="variable">$cat</span>[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&#x27;</span> . get_permalink(<span class="variable">$parent</span>) . <span class="string">&#x27;&quot;&gt;&#x27;</span> . <span class="variable">$parent</span>-&gt;post_title . <span class="string">&#x27;&lt;/a&gt; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span> .  wp_trim_words( get_the_title(), <span class="number">5</span>). <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_page() &amp;&amp; !<span class="variable">$post</span>-&gt;post_parent) &#123; <span class="comment">// 页面</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&#x27;</span> . the_permalink()  . <span class="string">&#x27;&quot;&gt;&#x27;</span> .wp_trim_words( get_the_title(), <span class="number">5</span> ). <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_page() &amp;&amp; <span class="variable">$post</span>-&gt;post_parent) &#123; <span class="comment">// 父级页面</span></span><br><span class="line">      <span class="variable">$parent_id</span>  = <span class="variable">$post</span>-&gt;post_parent;</span><br><span class="line">      <span class="variable">$breadcrumbs</span> = <span class="keyword">array</span>();</span><br><span class="line">      <span class="keyword">while</span> (<span class="variable">$parent_id</span>) &#123;</span><br><span class="line">        <span class="variable">$page</span> = get_page(<span class="variable">$parent_id</span>);</span><br><span class="line">        <span class="variable">$breadcrumbs</span>[] = <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&#x27;</span> . get_permalink(<span class="variable">$page</span>-&gt;ID) . <span class="string">&#x27;&quot;&gt;&#x27;</span> . wp_trim_words( get_the_title(), <span class="number">5</span> )(<span class="variable">$page</span>-&gt;ID) . <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$parent_id</span>  = <span class="variable">$page</span>-&gt;post_parent;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable">$breadcrumbs</span> = array_reverse(<span class="variable">$breadcrumbs</span>);</span><br><span class="line">      <span class="keyword">foreach</span> (<span class="variable">$breadcrumbs</span> <span class="keyword">as</span> <span class="variable">$crumb</span>) <span class="keyword">echo</span> <span class="variable">$crumb</span> . <span class="string">&#x27; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&quot;&gt;&#x27;</span> . get_the_title() . <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_search()) &#123; <span class="comment">// 搜索结果</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span>;</span><br><span class="line">      printf(__(<span class="string">&#x27;Search Results for: %s&#x27;</span>, <span class="string">&#x27;cmp&#x27;</span>),  get_search_query());</span><br><span class="line">      <span class="keyword">echo</span>  <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_tag()) &#123; <span class="comment">//标签 存档</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span>;</span><br><span class="line">      printf(__(<span class="string">&#x27;Tag Archives: %s&#x27;</span>, <span class="string">&#x27;cmp&#x27;</span>), single_tag_title(<span class="string">&#x27;&#x27;</span>, <span class="literal">false</span>));</span><br><span class="line">      <span class="keyword">echo</span>  <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_author()) &#123; <span class="comment">// 作者存档</span></span><br><span class="line">      <span class="keyword">global</span> <span class="variable">$author</span>;</span><br><span class="line">      <span class="variable">$userdata</span> = get_userdata(<span class="variable">$author</span>);</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span>;</span><br><span class="line">      printf(__(<span class="string">&#x27;Author Archives: %s&#x27;</span>, <span class="string">&#x27;cmp&#x27;</span>),  <span class="variable">$userdata</span>-&gt;display_name);</span><br><span class="line">      <span class="keyword">echo</span>  <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_404()) &#123; <span class="comment">// 404 页面</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span>;</span><br><span class="line">      _e(<span class="string">&#x27;Not Found&#x27;</span>, <span class="string">&#x27;cmp&#x27;</span>);</span><br><span class="line">      <span class="keyword">echo</span>  <span class="variable">$after</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将该函数加入function.php文件中</p>
<p>（2）引用面包屑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 面包屑开始 --&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;top_menu&quot;&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">		$category &#x3D; get_the_category();</span><br><span class="line">		echo $category[0]-&gt;cat_name;</span><br><span class="line">	?&gt;</span><br><span class="line">&lt;&#x2F;span&gt;</span><br><span class="line"></span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line"></span><br><span class="line">&lt;?php if (function_exists(&#39;cmp_breadcrumbs&#39;)) cmp_breadcrumbs(); ?&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- 面包屑结束 --&gt;</span><br></pre></td></tr></table></figure>



<h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3><p>轮播图同样使用到了循环的想法，但在仿站的过程中会遇到把图片链接放在css中的做法，php无法写入css中动态获取图片，这时就可以创建一张图片覆盖到原本要轮播的块上，继承其轮播的特效</p>
<h5 id="（1）静态代码-2"><a href="#（1）静态代码-2" class="headerlink" title="（1）静态代码"></a>（1）静态代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ps_box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pics_switch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pb&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic_box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;pic_banner_001&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic_box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;pic_banner_002&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic_box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;pic_banner_003&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic_box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;pic_banner_004&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;viewArrows prev&quot;</span>&gt;</span>上一张<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;viewArrows next&quot;</span>&gt;</span>下一张<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pics_switch_clients&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li_1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;list-style:none;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li_2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;list-style:none;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li_3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;list-style:none;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li_4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;list-style:none;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="（2）动态代码-1"><a href="#（2）动态代码-1" class="headerlink" title="（2）动态代码"></a>（2）动态代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;pics_switch&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;pb&quot;&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;?php query_posts(&#39;cat&#x3D;7 &amp; posts_per_page&#x3D;4&#39;);</span><br><span class="line">        while (have_posts()) : the_post();?&gt;</span><br><span class="line">  </span><br><span class="line"> &lt;div class&#x3D;&quot;pic_box&quot; &gt; &lt;img src&#x3D;&quot;&lt;?php echo catch_that_image() ?&gt;&quot; &gt;&lt;a class&#x3D;&quot;pic_banner001&quot; target&#x3D;&quot;_blank&quot; href&#x3D;&quot;http:&#x2F;&#x2F;www.kiz.cas.cn&#x2F;&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;?php endwhile;</span><br><span class="line">        wp_reset_query(); ?&gt;               </span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;viewArrows prev&quot;&gt;上一张&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;viewArrows next&quot;&gt;下一张&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;pics_switch_clients&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;li_1&quot; style&#x3D;&quot;list-style:none;&quot;&gt;&lt;span class&#x3D;&quot;current&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;li_2&quot; style&#x3D;&quot;list-style:none;&quot;&gt;&lt;span&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;li_3&quot; style&#x3D;&quot;list-style:none;&quot;&gt;&lt;span&gt;3&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;li_4&quot; style&#x3D;&quot;list-style:none;&quot;&gt;&lt;span&gt;4&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>



<h3 id="多级菜单"><a href="#多级菜单" class="headerlink" title="多级菜单"></a>多级菜单</h3><p>来了，一个非常重磅的知识点来了！在开发过程中耗费我最多时间去钻研的东西，再加上中文网上这方面的博客都已经很老而且不太实用了，而本文是基于5.4.1的内容实现三级菜单，我愿称其为中文网wordpress第一文[狗头]</p>
<h5 id="（1）静态内容观察"><a href="#（1）静态内容观察" class="headerlink" title="（1）静态内容观察"></a>（1）静态内容观察</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:1200px;text-align:left;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#14A73C;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/&quot;</span>&gt;</span>首<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/jgsz/&quot;</span>&gt;</span>机构设置<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;sub-nav&quot;</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/jgsz/kyxt/&quot;</span>&gt;</span>科研机构<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/jgsz/glxt/&quot;</span>&gt;</span>管理机构<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/jgsz/zcxt/&quot;</span>&gt;</span>支撑机构与技术平台<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/jgsz/gkxh/&quot;</span>&gt;</span>挂靠学会<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/kycg/&quot;</span>&gt;</span>科研成果<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;sub-nav&quot;</span>&gt;</span>	</span><br><span class="line">        	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/kycg/hjcg/&quot;</span>&gt;</span>获奖<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/kycg/lw/&quot;</span>&gt;</span>论文<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/kycg/zz/&quot;</span>&gt;</span>专著<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/kycg/zl/&quot;</span>&gt;</span>专利<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             </span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>





<h5 id="（2）注册菜单"><a href="#（2）注册菜单" class="headerlink" title="（2）注册菜单"></a>（2）注册菜单</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">register_nav_menus(<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;PrimaryMenu&#x27;</span>=&gt;<span class="string">&#x27;导航&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;friendlinks&#x27;</span>=&gt;<span class="string">&#x27;友情链接&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;footer_nav&#x27;</span>=&gt;<span class="string">&#x27;页脚导航&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line">    add_theme_support(<span class="string">&#x27;nav_menus&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在function.php文件中加入该代码，注册菜单的形式menu</p>
<h5 id="（3）动态修改"><a href="#（3）动态修改" class="headerlink" title="（3）动态修改"></a>（3）动态修改</h5><p>菜单的动态修改，实际上就是用php来取代相关块的类（class），由静态观察有最外层的ul为nav，最外层容器div为menu，因为此处的容器有内联css的形式，故不宜取代。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;menu&quot; style&#x3D;&quot;width:1200px;text-align:left;&quot;&gt;</span><br><span class="line"></span><br><span class="line">	&lt;?php</span><br><span class="line">			wp_nav_menu(array(</span><br><span class="line">						&#39;theme_location&#39; &#x3D;&gt; &#39;PrimaryMenu&#39;,</span><br><span class="line">						&#39;menu_class&#39;   &#x3D;&gt; &#39;nav&#39;,   &#x2F;&#x2F;ul节点class值</span><br><span class="line">						&#39;depth&#39; &#x3D;&gt; 0,</span><br><span class="line"></span><br><span class="line">					));</span><br><span class="line">	?&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>



<h5 id="（4）二级菜单"><a href="#（4）二级菜单" class="headerlink" title="（4）二级菜单"></a>（4）二级菜单</h5><p>二级菜单的即里面的<ul>标签带领的这些内容，而wordpress默认使用的类是“sub-menu”</ul></p>
<p>所以只需要把<ul>标签对应的css样式表的选择器（.sub-nav）改为“.sub-menu”即可</ul></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span> <span class="selector-class">.sub-menu</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#006E39</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-class">.sub-menu</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">clear</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#2E7A4A</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#005E31</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-class">.sub-menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="（5）三级菜单"><a href="#（5）三级菜单" class="headerlink" title="（5）三级菜单"></a>（5）三级菜单</h5><p>三级菜单这里我使用最简单的一种方法，修改wp-includes里的文件，默认第三级的类为“third-menu”</p>
<p>修改的文件路径：根目录/wp-includes/class-walker-nav-menu.php</p>
<p>（很多旧文章说的是修改nav-menu-template.php文件）</p>
<p>修改内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start_lvl</span>(<span class="params"> &amp;<span class="variable">$output</span>, <span class="variable">$depth</span> = <span class="number">0</span>, <span class="variable">$args</span> = <span class="literal">null</span> </span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ( <span class="keyword">isset</span>( <span class="variable">$args</span>-&gt;item_spacing ) &amp;&amp; <span class="string">&#x27;discard&#x27;</span> === <span class="variable">$args</span>-&gt;item_spacing ) &#123;</span><br><span class="line">			<span class="variable">$t</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			<span class="variable">$n</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="variable">$t</span> = <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">			<span class="variable">$n</span> = <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$indent</span> = str_repeat( <span class="variable">$t</span>, <span class="variable">$depth</span> );</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 此处添加了一个条件判断，确定菜单层级</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$depth</span> == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="variable">$classes</span> = <span class="keyword">array</span>( <span class="string">&#x27;sub-menu&#x27;</span> );&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$classes</span> = <span class="keyword">array</span>( <span class="string">&#x27;third-menu&#x27;</span> );</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>if($depth == 0)</code>条件句多加了一层third-menu的目录，然后再用修改第二级的方法修改第三级的css样式便大功告成啦！</p>
<h3 id="插件禁用"><a href="#插件禁用" class="headerlink" title="插件禁用"></a>插件禁用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_filter(&#39;site_option_active_sitewide_plugins&#39;, &#39;modify_sitewide_plugins&#39;);</span><br><span class="line"> </span><br><span class="line">function modify_sitewide_plugins($value) &#123;</span><br><span class="line">    global $current_blog;</span><br><span class="line"> </span><br><span class="line">    if( $current_blog-&gt;blog_id &#x3D;&#x3D; 141 ) &#123;</span><br><span class="line">      unset($value[&#39;advanced-custom-fields&#x2F;acf.php&#39;]);</span><br><span class="line">      unset($value[&#39;all-in-one-wp-security-and-firewall&#x2F;wp-security.php&#39;]);</span><br><span class="line">      unset($value[&#39;bulletproof-security&#x2F;bulletproof-security.php&#39;]);</span><br><span class="line">      unset($value[&#39;classic-editor&#x2F;classic-editor.php&#39;]);</span><br><span class="line">      unset($value[&#39;kindeditor-for-wordpress&#x2F;kindeditor.php&#39;]);</span><br><span class="line">      unset($value[&#39;loggedin&#x2F;loggedin.php&#39;]);</span><br><span class="line">      unset($value[&#39;user-role-editor&#x2F;user-role-editor.php&#39;]);</span><br><span class="line">      unset($value[&#39;wp-password-policy-manager&#x2F;wp-password-policy-manager.php&#39;]);</span><br><span class="line">      unset($value[&#39;wp-category-order&#x2F;WPCategoryOrder.php&#39;]);</span><br><span class="line">      unset($value[&#39;wp-statistics&#x2F;wp-statistics.php&#39;]);</span><br><span class="line">      unset($value[&#39;wp-super-cache&#x2F;advanced-cache.php&#39;]);</span><br><span class="line">      unset($value[&#39;taxonomy-terms-order&#x2F;taxonomy-terms-order.php&#39;]);</span><br><span class="line">      unset($value[&#39;ml-slider&#x2F;ml-slider.php&#39;]);</span><br><span class="line">      unset($value[&#39;update&#x2F;index.php&#39;]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<p>本文仿站对象：<a href="http://www.kiz.cas.cn/">http://www.kiz.cas.cn/</a></p>
<p>本文部分参考：<a href="https://wp.rollby.xin/">https://wp.rollby.xin/</a></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
        <tag>框架学习</tag>
        <tag>后端</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP|Thinkphp学习</title>
    <url>/2021/03/28/PHP-thinkphp5/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041014601.jpeg" alt="img"></p>
<span id="more"></span>

<h2 id="URL解析模式"><a href="#URL解析模式" class="headerlink" title="URL解析模式"></a>URL解析模式</h2><h3 id="1-URL解析"><a href="#1-URL解析" class="headerlink" title="1.URL解析"></a>1.URL解析</h3><p>（1）分析</p>
<p>tp应用入口：<code>https://severName/index.php/模块/控制器/操作/参数/值/</code></p>
<ul>
<li><strong>serverName：</strong>在本地为<code>localhost/tp5/public/</code>，部署后映射为域名</li>
<li><strong>模块：</strong>位于根目录下的application下，默认下有一个index目录，它就是一个模块   </li>
<li><strong>控制器：</strong>在上面index目录（index模块）下有一个controller控制器目录，其中的Index.php就是一个控制器</li>
<li><strong>操作：</strong>在控制器的类中的方法就是操作如上面Index.php中的两个方法：<code>index()，hello()</code></li>
<li><strong>参数 值</strong>：是对应上面操作的，如果操作有参数，则可以通过url传参</li>
</ul>
<p>（2）实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件位置：/tp5/appliction/test/controller/Abc.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 命名空间，索引到test模块的控制器文件</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">test</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="comment">// 类要与文件名相同，且首字母要大写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abc</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"><span class="variable">$name</span>=<span class="string">&#x27;world&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>.<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>访问案例：<a href="http://localhost/tp5/public/index.php/test/abc/hello/">http://localhost/tp5/public/index.php/test/abc/hello/</a></p>
</li>
<li><p>控制器名的首字母要大写如：Index，Abc。<strong>注意</strong>：如果控制器名初始化时首字母没有大写，之后改过来也无法生效了</p>
</li>
<li><p>如果方法的参数为$name，则url操作后面一定要加上<code>/参数/值/</code></p>
</li>
<li><p>注意url的最后要有/</p>
</li>
</ul>
<p>（3）关于环境</p>
<p>修改apache配置文件，开启伪静态，即可将index.php省略</p>
<h2 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h2><h3 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1.目录结构"></a>1.目录结构</h3><p>tp5默认为多模块结构</p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041015470.png" alt="image-20210330203720332"></p>
<ul>
<li><p>模块下的类库文件命名空间统一为：app\模块名：<code>namespace app\test\controller\Index</code>;</p>
</li>
<li><p>当只有一个模块时，可以绑定这个模块:从而省略<strong>模块名</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件位置：tp5/public/index.php</span></span><br><span class="line">Container::get(<span class="string">&#x27;app&#x27;</span>)-&gt;bind(<span class="string">&#x27;test&#x27;</span>)-&gt;run()-&gt;send();</span><br></pre></td></tr></table></figure>

<p>访问链接为：<a href="http://localhost/tp5/public/index.php/abc/hello">http://localhost/tp5/public/index.php/abc/hello</a></p>
</li>
</ul>
<ul>
<li><p>当只有一个模块，一个控制器时，可以绑定模块和控制器，从而省略<strong>模块/控制器</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件位置：tp5/public/index.php</span></span><br><span class="line"></span><br><span class="line">Container::get(<span class="string">&#x27;app&#x27;</span>)-&gt;bind(<span class="string">&#x27;test/abc&#x27;</span>)-&gt;run()-&gt;send();</span><br></pre></td></tr></table></figure>

<p>访问链接为：<a href="http://localhost/tp5/public/index.php/hello">http://localhost/tp5/public/index.php/hello</a></p>
</li>
</ul>
<h3 id="2-空模块"><a href="#2-空模块" class="headerlink" title="2.空模块"></a>2.空模块</h3><p>通过环境变量设置空模块，将不存在的目录统一指向指定目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件位置：tp5/config/app.php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的空模块名</span></span><br><span class="line"><span class="string">&#x27;empty_module&#x27;</span>           =&gt; <span class="string">&#x27;404&#x27;</span>,</span><br></pre></td></tr></table></figure>

<p>空模块只有在多模块开启，没有绑定模块情况下生效</p>
<h3 id="3-环境变量"><a href="#3-环境变量" class="headerlink" title="3.环境变量"></a>3.环境变量</h3><p>tp5提供了一个类库Env来获取环境变量，如：<code>return env(&#39;app_path&#39;)</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041015869.png" alt="image-20210330210525103"></p>
<h2 id="控制器定义"><a href="#控制器定义" class="headerlink" title="控制器定义"></a>控制器定义</h2><h3 id="1-控制器要点"><a href="#1-控制器要点" class="headerlink" title="1.控制器要点"></a>1.控制器要点</h3><ul>
<li>可以继承控制器基类，方便使用功能，但不是必要的</li>
<li>如果控制器名有两个大写字母，如：class HelloWorld用<code>public/hello_world</code>这样的方式访问</li>
<li>如果想改变根命名app，可以在根目录创建.env文件写上键值对，如：<code>app_namespace=application</code></li>
</ul>
<h3 id="2-渲染方式"><a href="#2-渲染方式" class="headerlink" title="2.渲染方式"></a>2.渲染方式</h3><p>（1）初始化渲染</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化渲染内容（无论有没有调用都会渲染出来）,必须是继承了Controller</span></span><br><span class="line"><span class="comment">// 初始化中不能返回，只能用echo来输出</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parent</span>::initialize(); <span class="comment">// <span class="doctag">TODO:</span> Change the autogenerated stub</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;https://www.baidu.com/img/flexible/logo/pc/result.png&quot;  /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（2）输出数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">arr</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 建立数组</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>=&gt;<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>=&gt;<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>=&gt;<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出数组，不能直接返回数组，需要转换为json格式</span></span><br><span class="line">    <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（3）输出html模板</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模板输出，输出的是该模块文件下视图文件中的html文件</span></span><br><span class="line"><span class="comment">// 控制器名和视图目录下放html文件的对应</span></span><br><span class="line"><span class="comment">// 方法名和html文件名对应</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="控制器操作"><a href="#控制器操作" class="headerlink" title="控制器操作"></a>控制器操作</h2><h3 id="1-前置操作"><a href="#1-前置操作" class="headerlink" title="1.前置操作"></a>1.前置操作</h3><p>可以灵活控制的页面初始化方法，需要继承至Controller类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">test</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="comment">// 前置操作，即页面初始化，可以灵活控制是否渲染指定的初始化方法</span></span><br><span class="line"><span class="comment">// ---------------------------------------------------</span></span><br><span class="line"><span class="comment">// 需要继承controller类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Before</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置$beforeActionList属性绑定前置方法</span></span><br><span class="line"><span class="comment">//-------------------------------------------</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$beforeActionList</span>=[</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>,                            <span class="comment">// 允许该控制器下所有的方法触发frist前置方法</span></span><br><span class="line">        <span class="string">&#x27;second&#x27;</span> =&gt; [<span class="string">&#x27;except&#x27;</span>=&gt;<span class="string">&#x27;one&#x27;</span>],      <span class="comment">// 除了one这个方法，其他方法都允许触发</span></span><br><span class="line">        <span class="string">&#x27;third&#x27;</span> =&gt; [<span class="string">&#x27;only&#x27;</span> =&gt; <span class="string">&#x27;one, two&#x27;</span>]   <span class="comment">// 仅允许one，two两个方法触发</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对应的前置方法（初始化方法）,这些方法是无法直接访问的</span></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;frist&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;second&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">third</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;third&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建可调用的方法（前置方法作用对象）</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-跳转和重定向"><a href="#2-跳转和重定向" class="headerlink" title="2.跳转和重定向"></a>2.跳转和重定向</h3><p>Controller类提供了两个跳转方法：success(msg,url)和error(msg)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">test</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Url</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转条件设置</span></span><br><span class="line"><span class="comment">// ------------------------------</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$flag</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转触发</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;flag)&#123;</span><br><span class="line">            <span class="comment">// 不指定url，默认返回上一层</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;success(<span class="string">&#x27;访问成功&#x27;</span>, <span class="string">&#x27;../test/before/one&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 自动后退到上一页</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;error(<span class="string">&#x27;访问失败了&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>成功和失败都有一个固定的页面模板：’thinkphp/tpl/dispatch_jump.tpl’；</li>
<li>在config/app.php配置文件中可修改跳转页面对应的模板</li>
</ul>
<h3 id="3-空方法和空控制器"><a href="#3-空方法和空控制器" class="headerlink" title="3.空方法和空控制器"></a>3.空方法和空控制器</h3><p>（1）空方法    </p>
<p>在控制器中使用_empty方法可以自动拦截不存在的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 空链接（空方法） 拦截</span></span><br><span class="line"><span class="comment">// ------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_empty</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$string</span> = <span class="string">&#x27;此方法不存在:&#x27;</span>.<span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;error(<span class="variable">$string</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>（2）空控制器</p>
<p>在控制器文件下创建Error.php控制器，则可以处理控制器不存在的异常</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">test</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制器不存在异常处理</span></span><br><span class="line"><span class="comment">// ----------------------------</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;当前控制器不存在&#x27;</span>.<span class="variable">$request</span>-&gt;controller();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="数据库与模型"><a href="#数据库与模型" class="headerlink" title="数据库与模型"></a>数据库与模型</h2><h3 id="1-连接数据库"><a href="#1-连接数据库" class="headerlink" title="1.连接数据库"></a>1.连接数据库</h3><ul>
<li><p>thinkphp 采用内置抽象层将不同的数据库进行封装处理</p>
</li>
<li><p>数据抽象层基于PDO模式，无需针对不同的数据库编写相应的代码</p>
</li>
<li><p>数据库的连接是在config的database.php配置文件下修改连接信息</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据库类型</span></span><br><span class="line"><span class="string">&#x27;type&#x27;</span>            =&gt; <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line"><span class="comment">// 服务器地址</span></span><br><span class="line"><span class="string">&#x27;hostname&#x27;</span>        =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="comment">// 数据库名</span></span><br><span class="line"><span class="string">&#x27;database&#x27;</span>        =&gt; <span class="string">&#x27;tp_data&#x27;</span>,</span><br><span class="line"><span class="comment">// 用户名</span></span><br><span class="line"><span class="string">&#x27;username&#x27;</span>        =&gt; <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="comment">// 密码</span></span><br><span class="line"><span class="string">&#x27;password&#x27;</span>        =&gt; <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line"><span class="comment">// 端口</span></span><br><span class="line"><span class="string">&#x27;hostport&#x27;</span>        =&gt; <span class="string">&#x27;&#x27;</span>,</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="2-控制器访问"><a href="#2-控制器访问" class="headerlink" title="2.控制器访问"></a>2.控制器访问</h3><p>在控制器中直接调用db类的方法查询数据库</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按表名查找数据库，必须加上前缀</span></span><br><span class="line"><span class="comment">// ------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getone</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = Db::table(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  自动加上索引内的前缀</span></span><br><span class="line"><span class="comment">// ----------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">gettwo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-模型访问"><a href="#3-模型访问" class="headerlink" title="3.模型访问"></a>3.模型访问</h3><p>Model就是用来处理和配置数据库的相关信息</p>
<p>在模块中创建model文件夹，然后创建与表名对应的类（首字母大写）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">data</span>\<span class="title">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模型名类名与数据库的表名保持一致</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">console</span>\<span class="title">command</span>\<span class="title">Make</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置好model与数据表的对应后，即可在控制器利用模型访问数据库</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用模型访问数据库</span></span><br><span class="line"><span class="comment">// ---------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getmod</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = User::select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><h3 id="1-查询一条数据"><a href="#1-查询一条数据" class="headerlink" title="1.查询一条数据"></a>1.查询一条数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询一条数据</span></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// find()默认查询第一条语句</span></span><br><span class="line">        <span class="variable">$data</span> = Db::table(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;find();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        <span class="comment">// 输出最近执行的sql语句</span></span><br><span class="line">        <span class="keyword">echo</span> Db::getLastSql();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// where返回特定条件数据</span></span><br><span class="line">        <span class="variable">$data2</span> = Db::table(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="number">3</span>)-&gt;find();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data2</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        <span class="comment">// 输出最近执行的sql语句</span></span><br><span class="line">        <span class="keyword">echo</span> Db::getLastSql();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-数据查询异常处理"><a href="#2-数据查询异常处理" class="headerlink" title="2.数据查询异常处理"></a>2.数据查询异常处理</h3><p>主要使用findOrFail()抛出一个错误，catch语句才能捕捉到异常</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据不存在时异常处理</span></span><br><span class="line"><span class="comment">// -----------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"><span class="variable">$id</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 异常捕捉</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="variable">$data</span> = Db::table(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$id</span>)-&gt;findOrFail();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (DataNotFoundException <span class="variable">$e</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;查询不到数据！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-查询多例数据"><a href="#3-查询多例数据" class="headerlink" title="3.查询多例数据"></a>3.查询多例数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询多列数据</span></span><br><span class="line"><span class="comment">// --------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = Db::table(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;select();</span><br><span class="line">    <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-返回指定数据"><a href="#4-返回指定数据" class="headerlink" title="4.返回指定数据"></a>4.返回指定数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定返回数据查询</span></span><br><span class="line"><span class="comment">// --------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">four</span>(<span class="params"><span class="variable">$id</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// value方法指定返回字段的值</span></span><br><span class="line">        <span class="variable">$data1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$id</span>)-&gt;value(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">        <span class="comment">// 字符串</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$data1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// column方法返回指定列，并指定某字段作为索引</span></span><br><span class="line">        <span class="variable">$data2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;column(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data2</span>);</span><br><span class="line">    </span><br><span class="line">    	<span class="comment">// field返回指定列，还可以继续通过where进一步筛选（ column不行）</span></span><br><span class="line">    	 <span class="variable">$data1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;field(<span class="string">&#x27;id&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="comment">// 字符串</span></span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$data1</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="链式查询"><a href="#链式查询" class="headerlink" title="链式查询"></a>链式查询</h2><h3 id="1-查询规则"><a href="#1-查询规则" class="headerlink" title="1.查询规则"></a>1.查询规则</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询规则</span></span><br><span class="line"><span class="comment">// ----------------------------------------------</span></span><br><span class="line">    <span class="comment">//只要还是数据库对象都可以继续使用链式查询</span></span><br><span class="line">    <span class="comment">// 用find()和select()方法时结果查询，输出不再是对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        print_r(Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="number">3</span>)-&gt;order(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-链式的应用"><a href="#2-链式的应用" class="headerlink" title="2.链式的应用"></a>2.链式的应用</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存实例避免资源浪费（链式查询的特点，可以保存对象）</span></span><br><span class="line"><span class="comment">// --------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 保存数据库对象</span></span><br><span class="line">        <span class="variable">$user</span> = Db::name(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过上面一个对象分别进行查询</span></span><br><span class="line">        <span class="comment">// 但是要清除针对这个对象所有的链式查询项，才能下次查询</span></span><br><span class="line">        <span class="variable">$data1</span> = <span class="variable">$user</span>-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="number">3</span>)-&gt;find();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data1</span>).<span class="string">&#x27;:&#x27;</span>.Db::getLastSql();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不清除链式查询项的情况</span></span><br><span class="line">        <span class="variable">$data2</span> = <span class="variable">$user</span>-&gt;select();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data2</span>).<span class="string">&#x27;:&#x27;</span>.Db::getLastSql();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清除链式查询项的情况</span></span><br><span class="line">        <span class="variable">$data3</span> = <span class="variable">$user</span>-&gt;removeOption(<span class="string">&#x27;where&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data3</span>).<span class="string">&#x27;:&#x27;</span>.Db::getLastSql();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="增删改数据库"><a href="#增删改数据库" class="headerlink" title="增删改数据库"></a>增删改数据库</h2><h3 id="1-单条插入操作"><a href="#1-单条插入操作" class="headerlink" title="1.单条插入操作"></a>1.单条插入操作</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单条插入操作</span></span><br><span class="line"><span class="comment">// ------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入的数据</span></span><br><span class="line">        <span class="variable">$data</span>=[</span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;鲸落&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行数据插入的两种方式</span></span><br><span class="line">        <span class="variable">$insert</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;insert(<span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$insert2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;data(<span class="variable">$data</span>)-&gt;insert();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入成功返回值为插入数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$insert</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-批量插入操作"><a href="#2-批量插入操作" class="headerlink" title="2.批量插入操作"></a>2.批量插入操作</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批量插入操作</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insertall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span>=[</span><br><span class="line"></span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;autovy&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;233&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$insert</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;insertAll(<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$insert</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-数据修改"><a href="#3-数据修改" class="headerlink" title="3.数据修改"></a>3.数据修改</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据修改</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = [</span><br><span class="line">          <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;李白&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">34</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="number">4</span>)-&gt;update(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-函数处理数据修改"><a href="#4-函数处理数据修改" class="headerlink" title="4.函数处理数据修改"></a>4.函数处理数据修改</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用mysql函数进行数据修改</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = [</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span> =&gt; Db::raw(<span class="string">&#x27;UPPER(username)&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span> =&gt; Db::raw(<span class="string">&#x27;id + 10&#x27;</span>)</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="number">3</span>)-&gt;update(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-删除数据"><a href="#5-删除数据" class="headerlink" title="5.删除数据"></a>5.删除数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认根据id进行删除，也可以用where方法指定字段删除</span></span><br><span class="line">        <span class="comment">// 删除一条</span></span><br><span class="line">        Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;delete(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除多条</span></span><br><span class="line">        Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;delete([<span class="number">1</span>,<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h2><h3 id="1-比较查询"><a href="#1-比较查询" class="headerlink" title="1.比较查询"></a>1.比较查询</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比较查询</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 输出id != 10的数据</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;&lt;&gt;&#x27;</span>,<span class="number">10</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-模糊查询"><a href="#2-模糊查询" class="headerlink" title="2.模糊查询"></a>2.模糊查询</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模糊查询（即模糊查询字符串）</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模糊查询，密码（password）以12345开头的数据</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;whereLike(<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;12345%&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-区间查询"><a href="#3-区间查询" class="headerlink" title="3.区间查询"></a>3.区间查询</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 区间查询</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询id为1-10之间的数据</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;whereBetween(<span class="string">&#x27;id&#x27;</span>,[<span class="number">1</span>,<span class="number">10</span>])-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-多条查询"><a href="#4-多条查询" class="headerlink" title="4.多条查询"></a>4.多条查询</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多条查询</span></span><br><span class="line"><span class="comment">// ------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">four</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询id为7,8,10的数据</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;whereIn(<span class="string">&#x27;id&#x27;</span>,[<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>])-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-自定义查询"><a href="#5-自定义查询" class="headerlink" title="5.自定义查询"></a>5.自定义查询</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义查询（可以自己构建sql查询语句）</span></span><br><span class="line"><span class="comment">// ----------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">five</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询id为7,8,10的数据</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;whereExp(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;In(7,8,9)&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><h3 id="1-数值计算查询"><a href="#1-数值计算查询" class="headerlink" title="1.数值计算查询"></a>1.数值计算查询</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 聚合查询</span></span><br><span class="line"><span class="comment">// -----------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算数值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 数量计算</span></span><br><span class="line">       <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;count();</span><br><span class="line">       <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 最值计算</span></span><br><span class="line">        <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;max(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result2</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 平均值计算</span></span><br><span class="line">        <span class="variable">$result3</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;avg(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result3</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据综合计算</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;sum(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-闭包查询"><a href="#2-闭包查询" class="headerlink" title="2.闭包查询"></a>2.闭包查询</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子查询</span></span><br><span class="line"><span class="comment">// ----------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fetchSql:不执行sql语句，返回sql语句</span></span><br><span class="line">        <span class="variable">$result1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;fetchSql(<span class="literal">true</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result1</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// buildSql:不执行sql语句，返回sql语句，相比fetchSql不需要写select()</span></span><br><span class="line">        <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;buildSql(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result2</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 利用子查询，闭包查询实现多表查询</span></span><br><span class="line">        <span class="comment">// sql实现：SELECT * FROM tp_user WHERE id in (SELECT id FROM tp_two WHERE gender = &#x27;男&#x27;);</span></span><br><span class="line">        <span class="variable">$result3</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$query</span>-&gt;name(<span class="string">&#x27;two&#x27;</span>)-&gt;field(<span class="string">&#x27;id&#x27;</span>)-&gt;where(<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">        &#125;)-&gt;select();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result3</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="常用链式方法"><a href="#常用链式方法" class="headerlink" title="常用链式方法"></a>常用链式方法</h2><h3 id="1-where-：条件输出"><a href="#1-where-：条件输出" class="headerlink" title="1.where()：条件输出"></a>1.where()：条件输出</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// where()链式方法</span></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关联数组设置多个查询条件</span></span><br><span class="line">        <span class="variable">$result1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where([</span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; <span class="number">123456</span>,</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span> =&gt; [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">        ])-&gt;select();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$result1</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 索引数组查询</span></span><br><span class="line">        <span class="comment">// 组装复杂数据，通过变量传递</span></span><br><span class="line">        <span class="variable">$map</span>[] = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;between&#x27;</span>, [<span class="number">7</span>,<span class="number">10</span>]];</span><br><span class="line">        <span class="variable">$map</span>[] = [<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;=&#x27;</span>, <span class="number">123456</span>];</span><br><span class="line">        <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="variable">$map</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$result2</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符串形式传递查询</span></span><br><span class="line">        <span class="variable">$result3</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id in (7,10) and password=123456 &#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">echo</span>  json_encode(<span class="variable">$result3</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-field-：指定字段输出"><a href="#2-field-：指定字段输出" class="headerlink" title="2.field() ：指定字段输出"></a>2.field() ：指定字段输出</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// field()链式方法</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------------------</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询指定字段</span></span><br><span class="line">            <span class="variable">$result1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;field(<span class="string">&#x27;id,username&#x27;</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result1</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// field()方法中设置mysql函数</span></span><br><span class="line">            <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;field(<span class="string">&#x27;sum(id)&#x27;</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result2</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 屏蔽掉指定字段</span></span><br><span class="line">            <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;field(<span class="string">&#x27;password&#x27;</span>,<span class="literal">true</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result2</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-limit-：限制输出条数"><a href="#3-limit-：限制输出条数" class="headerlink" title="3.limit()：限制输出条数"></a>3.limit()：限制输出条数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// limit()链式方法</span></span><br><span class="line"><span class="comment">// --------------------------------------------------------</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"><span class="variable">$num</span>=<span class="number">3</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 限制输出数据个数</span></span><br><span class="line">            <span class="variable">$result1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;limit(<span class="variable">$num</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result1</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分页模式输出数据，但要严格计算开始位置</span></span><br><span class="line">            <span class="comment">//如：limit(2,5)：从第3条开始显示5条数据</span></span><br><span class="line">            <span class="comment">// 第一页</span></span><br><span class="line">            <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;limit(<span class="number">0</span>,<span class="variable">$num</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result2</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">            <span class="comment">//第二页</span></span><br><span class="line">            <span class="variable">$result3</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;limit(<span class="variable">$num</span>,<span class="variable">$num</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result3</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-page-：输出分页"><a href="#4-page-：输出分页" class="headerlink" title="4.page()：输出分页"></a>4.page()：输出分页</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// page()链式方法</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------------------------</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">four</span>(<span class="params"><span class="variable">$page</span>=<span class="number">1</span>,<span class="variable">$num</span>=<span class="number">3</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环输出页面</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$page</span>; <span class="variable">$page</span>&lt;<span class="number">5</span>; <span class="variable">$page</span>++)&#123;</span><br><span class="line">                <span class="comment">// page()分页方法，优化了limit()方法，无需进行分页条数计算</span></span><br><span class="line">                <span class="variable">$result1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;page(<span class="variable">$page</span>, <span class="variable">$num</span>)-&gt;select();</span><br><span class="line">                <span class="comment">// 但数据为空，跳出循环</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$result1</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">echo</span> json_encode(<span class="variable">$result1</span>);</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-group-：数据分组"><a href="#5-group-：数据分组" class="headerlink" title="5.group()：数据分组"></a>5.group()：数据分组</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// group()链式方法</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">five</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对某字段进行分组然后统计（按性别分组统计id平均数）</span></span><br><span class="line">            <span class="variable">$result</span> = Db::name(<span class="string">&#x27;two&#x27;</span>)-&gt;group(<span class="string">&#x27;gender&#x27;</span>)-&gt;field(<span class="string">&#x27;gender, avg(id)&#x27;</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="6-having-：分组条件输出"><a href="#6-having-：分组条件输出" class="headerlink" title="6.having()：分组条件输出"></a>6.having()：分组条件输出</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// having()链式方法</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------------</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">six</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对分组后的数据进行筛选</span></span><br><span class="line">            <span class="variable">$result</span> = Db::name(<span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">                    -&gt;group(<span class="string">&#x27;gender&#x27;</span>)</span><br><span class="line">                    -&gt;field(<span class="string">&#x27;gender, avg(id) as avg&#x27;</span>)</span><br><span class="line">                    -&gt;having(<span class="string">&#x27;avg(id)&lt;10&#x27;</span>)</span><br><span class="line">                    -&gt;select();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h2 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h2><h3 id="1-模型设置"><a href="#1-模型设置" class="headerlink" title="1.模型设置"></a>1.模型设置</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果控制器中的类名和model的类名相同，就需要引入,设置别名</span></span><br><span class="line"><span class="comment">// 也可以加入后缀以示区分</span></span><br><span class="line"><span class="keyword">use</span> \<span class="title">app</span>\<span class="title">mod</span>\<span class="title">model</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">UseModel</span>;</span><br></pre></td></tr></table></figure>



<h3 id="2-模型操作"><a href="#2-模型操作" class="headerlink" title="2.模型操作"></a>2.模型操作</h3><p>（1）构建模型：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模型名会自动对应到数据表</span></span><br><span class="line"><span class="comment">// 模型类与表名的差别：1.去除前缀tp_，2.变成大驼峰式命名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置模型的方式</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改变主键</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$pk</span> = <span class="string">&#x27;username&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置其他表</span></span><br><span class="line">        <span class="comment">// User默认绑定了数据库中tp_user这张表，但是也可以让其指向其他表</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">&#x27;tp_two&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模型初始化，与控制器初始化类似，可以初始化渲染内容</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;hello,world&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（2）控制器调用模型进行操作：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  使用模型基本操作数据库</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$result</span> = UseModel::select();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改主键后删除</span></span><br><span class="line"><span class="comment">// -----------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 但主键为id时，可以生效</span></span><br><span class="line">        UseModel::destroy(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主键改为username后，做删除操作</span></span><br><span class="line">        UseModel::destroy(<span class="string">&#x27;李白&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以通过数据库类去操作数据库，但是这样无法使用模型的事件功能</p>
<h2 id="模型添加与删除"><a href="#模型添加与删除" class="headerlink" title="模型添加与删除"></a>模型添加与删除</h2><h3 id="1-插入一条数据"><a href="#1-插入一条数据" class="headerlink" title="1.插入一条数据"></a>1.插入一条数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用模型进行数据添加（一条）</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个模型实例</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入操作，返回布尔值</span></span><br><span class="line">        <span class="variable">$insert</span> = <span class="variable">$user</span>-&gt;save([</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Emiria&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;486&#x27;</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新增后，可输出主键</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$user</span>-&gt;id.<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$insert</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-批量插入数据"><a href="#2-批量插入数据" class="headerlink" title="2.批量插入数据"></a>2.批量插入数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用模型批量插入数据</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insertall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个模型实例</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置数据</span></span><br><span class="line">        <span class="variable">$dataAll</span> =[</span><br><span class="line"></span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Emiria&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;486&#x27;</span></span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Subaru&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;EMT&#x27;</span></span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Eem&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;486&#x27;</span></span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入全部数据，返回插入数据对象</span></span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$user</span>-&gt;saveAll(<span class="variable">$dataAll</span>);</span><br><span class="line">        print_r(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-delete-删除数据"><a href="#3-delete-删除数据" class="headerlink" title="3.delete()删除数据"></a>3.delete()删除数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据删除delete()方法</span></span><br><span class="line"><span class="comment">// -------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定主键值然后删除，返回布尔值</span></span><br><span class="line">        <span class="variable">$user</span> = UseModel::get(<span class="number">41</span>)-&gt;delete();</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$user</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-destroy-删除数据"><a href="#4-destroy-删除数据" class="headerlink" title="4.destroy()删除数据"></a>4.destroy()删除数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据删除destroy()方法</span></span><br><span class="line"><span class="comment">// -------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态方法调用destroy()方法，通过主键删除数据</span></span><br><span class="line">        UseModel::destroy(<span class="number">41</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 也可以进行批量删除</span></span><br><span class="line">        UseModel::destroy([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-条件删除"><a href="#5-条件删除" class="headerlink" title="5.条件删除"></a>5.条件删除</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件删除</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过数据库类的条件查询删除</span></span><br><span class="line">        UseModel::where(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="number">10</span>)-&gt;delete();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 闭包方式删除</span></span><br><span class="line">        UseModel::destroy(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>)</span>&#123;</span><br><span class="line">           <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="number">10</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="模型更新与查询"><a href="#模型更新与查询" class="headerlink" title="模型更新与查询"></a>模型更新与查询</h2><h3 id="1-数据修改"><a href="#1-数据修改" class="headerlink" title="1.数据修改"></a>1.数据修改</h3><p>（1）get方法获取然后修改</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get方法获取数据，然后修改</span></span><br><span class="line"><span class="comment">// 字段出错，没有报错 :(</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// get方法获取主键</span></span><br><span class="line">    <span class="variable">$user</span> = UseModel::get(<span class="number">8</span>);</span><br><span class="line">    <span class="variable">$user</span>-&gt;username = <span class="string">&#x27;鲨掉&#x27;</span>;</span><br><span class="line">    <span class="variable">$user</span>-&gt;password = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">    <span class="comment">// 最后通过save()方法保存修改</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$user</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（2）where()+find()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// where方法结合find()方法获得数据，然后修改</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$user</span> = UseModel::where(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;Eem&#x27;</span>)-&gt;find();</span><br><span class="line">    <span class="variable">$user</span>-&gt;password = <span class="string">&#x27;Subaru!&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$user</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（3）save批量修改数据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接利用save更新数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$user</span>-&gt;save([</span><br><span class="line">        <span class="comment">// 更新的数据</span></span><br><span class="line">        <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;1234&#x27;</span></span><br><span class="line"></span><br><span class="line">    ], [</span><br><span class="line">        <span class="comment">// 定位数据条件</span></span><br><span class="line">        <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用saveAll()方法批量修改数据</span></span><br><span class="line"><span class="comment">// saveAll方法只能通过主键（放在第一位）进行更新</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">four</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line">    <span class="variable">$user</span>-&gt;saveAll([</span><br><span class="line"></span><br><span class="line">        [<span class="string">&#x27;id&#x27;</span>=&gt; <span class="number">7</span>, <span class="string">&#x27;username&#x27;</span>=&gt; <span class="string">&#x27;test1&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;id&#x27;</span>=&gt; <span class="number">8</span>, <span class="string">&#x27;username&#x27;</span>=&gt; <span class="string">&#x27;test2&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;id&#x27;</span>=&gt; <span class="number">9</span>, <span class="string">&#x27;username&#x27;</span>=&gt; <span class="string">&#x27;test3&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（4）静态方法更新</p>
<p>​    </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用数据库类库的静态方法进行修改</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = [</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;李白&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">34</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    UseModel::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="number">4</span>)-&gt;update(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-数据查询"><a href="#2-数据查询" class="headerlink" title="2.数据查询"></a>2.数据查询</h3><p>模型：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模型名会自动对应到数据表</span></span><br><span class="line"><span class="comment">// 模型类与表名的差别：1.去除前缀tp_，2.变成大驼峰式命名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 从模型内部获取数据（即把在控制器进行的数据库操作移植到模型）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_password</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 返回某个字段</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::where(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="number">10</span>)-&gt;find()-&gt;getAttr(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>控制器：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据查询</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">five</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get()方法查询</span></span><br><span class="line">        <span class="variable">$user</span> = UseModel::get(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$user</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find()方法查询</span></span><br><span class="line">        <span class="variable">$user</span> = UseModel::where(<span class="string">&#x27;id&#x27;</span>,<span class="number">9</span>)-&gt;find();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$user</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从模型内部获取数据（即把在控制器进行的数据库操作移植到模型）</span></span><br><span class="line">        <span class="comment">// 控制器直接调用模型类的方法</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$user</span>-&gt;get_password();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态查询</span></span><br><span class="line">        <span class="variable">$user</span> = UseModel::getById(<span class="string">&#x27;40&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$user</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="模型获取器与修改器"><a href="#模型获取器与修改器" class="headerlink" title="模型获取器与修改器"></a>模型获取器与修改器</h2><h3 id="1-获取器"><a href="#1-获取器" class="headerlink" title="1.获取器"></a>1.获取器</h3><p>（1）模型获取器</p>
<p>在模型中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取器，修改返回字段的值（针对查询操作）</span></span><br><span class="line"><span class="comment">// -----------------------------------</span></span><br><span class="line">    <span class="comment">// 自动获取指定字段的值，get(字段名)Attr</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getStatusAttr</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 过滤器（必须包含该字段所有可能的内容）</span></span><br><span class="line">        <span class="variable">$myGet</span>=[<span class="number">1</span>=&gt;<span class="string">&#x27;正常&#x27;</span>, <span class="number">0</span>=&gt;<span class="string">&#x27;禁用&#x27;</span>, <span class="number">-1</span>=&gt;<span class="string">&#x27;删除&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$myGet</span>[<span class="variable">$value</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>在控制器中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 经过模型的获取器，返回数据</span></span><br><span class="line"><span class="comment">// -----------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$user</span> = UseModel::get(<span class="number">41</span>);</span><br><span class="line">        <span class="comment">// 输出原始值</span></span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$user</span>-&gt;getData());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出经过获取器过滤的值</span></span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$user</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>（2）动态获取器</p>
<p>​    </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动态获取器，直接在控制端过滤数据</span></span><br><span class="line"><span class="comment">// --------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// withAttr方法：指定字段，然后调用方法</span></span><br><span class="line">        <span class="variable">$result</span> = UseModel::withAttr(<span class="string">&#x27;password&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> md5(<span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line">        &#125;)-&gt;select();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>（3）获取器优先级比较</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取器优先级比较</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 模型获取器比动态获取器优先级高</span></span><br><span class="line">    <span class="comment">// 对同一字段过滤时，动态获取器返回值会覆盖模型获取器的返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// withAttr方法：指定字段，然后调用方法</span></span><br><span class="line">        <span class="variable">$result</span> = UseModel::withAttr(<span class="string">&#x27;status&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在模型里的正常，禁止等值会被这里的获取器a，b等值覆盖</span></span><br><span class="line">            <span class="variable">$myGet</span>=[<span class="number">1</span>=&gt;<span class="string">&#x27;a&#x27;</span>, <span class="number">0</span>=&gt;<span class="string">&#x27;b&#x27;</span>, <span class="number">-1</span>=&gt;<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$myGet</span>[<span class="variable">$value</span>];</span><br><span class="line"></span><br><span class="line">        &#125;)-&gt;select();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-修改器"><a href="#2-修改器" class="headerlink" title="2.修改器"></a>2.修改器</h3><p>在模型中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改器，修改插入的值（针对插入操作）</span></span><br><span class="line"><span class="comment">// ------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPasswordAttr</span>(<span class="params"><span class="variable">$vaule</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> md5(<span class="variable">$vaule</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在控制器中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 经过修改器，插入数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">four</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个模型实例</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入操作，返回布尔值</span></span><br><span class="line">        <span class="variable">$insert</span> = <span class="variable">$user</span>-&gt;save([</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Emiria&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;qweee&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="模型搜索器和数据集"><a href="#模型搜索器和数据集" class="headerlink" title="模型搜索器和数据集"></a>模型搜索器和数据集</h2><h3 id="1-模型搜索器"><a href="#1-模型搜索器" class="headerlink" title="1.模型搜索器"></a>1.模型搜索器</h3><p>模型搜索器用于封装字段（或搜索标识）的查询表达式</p>
<h3 id="2-模型数据集"><a href="#2-模型数据集" class="headerlink" title="2.模型数据集"></a>2.模型数据集</h3><p>模型数据集由all()和select()方法返回数据集对象</p>
<h2 id="模型自动时间戳和只读字段"><a href="#模型自动时间戳和只读字段" class="headerlink" title="模型自动时间戳和只读字段"></a>模型自动时间戳和只读字段</h2><h3 id="1-模型自动时间戳"><a href="#1-模型自动时间戳" class="headerlink" title="1.模型自动时间戳"></a>1.模型自动时间戳</h3><p>系统自动创建和更新时间</p>
<h3 id="2-模型只读字段"><a href="#2-模型只读字段" class="headerlink" title="2.模型只读字段"></a>2.模型只读字段</h3><p>设置只读字段，该字段无法被修改</p>
<h2 id="模型类型转换和数据完成"><a href="#模型类型转换和数据完成" class="headerlink" title="模型类型转换和数据完成"></a>模型类型转换和数据完成</h2><h3 id="1-模型类型转换"><a href="#1-模型类型转换" class="headerlink" title="1.模型类型转换"></a>1.模型类型转换</h3><p>通过在模型段设置写入或读取时字段类型进行转换</p>
<h3 id="2-模型数据完成"><a href="#2-模型数据完成" class="headerlink" title="2.模型数据完成"></a>2.模型数据完成</h3><p>模型中的数据可以通过auto，insert，update三种形式完成，设置自动填入默认值</p>
<h2 id="模型查询范围和输出"><a href="#模型查询范围和输出" class="headerlink" title="模型查询范围和输出"></a>模型查询范围和输出</h2><h3 id="1-模型查询范围"><a href="#1-模型查询范围" class="headerlink" title="1.模型查询范围"></a>1.模型查询范围</h3><p>在模型段创建一个封装的查询或写入方法，方便控制器端调用（自定义查询）</p>
<h3 id="2-模型输出方式"><a href="#2-模型输出方式" class="headerlink" title="2.模型输出方式"></a>2.模型输出方式</h3><p>包括：模板输出，数组输出，Json输出</p>
<h2 id="JSON字段"><a href="#JSON字段" class="headerlink" title="JSON字段"></a>JSON字段</h2><h3 id="1-数据库JSON"><a href="#1-数据库JSON" class="headerlink" title="1.数据库JSON"></a>1.数据库JSON</h3><p>在数据库的字段中，设数据类型为json类型，然后可以通过数组写入</p>
<h3 id="2-模型JSON"><a href="#2-模型JSON" class="headerlink" title="2.模型JSON"></a>2.模型JSON</h3><p>使用模型的方法新增包含json数据的字段</p>
<h2 id="软删除"><a href="#软删除" class="headerlink" title="软删除"></a>软删除</h2><p>软删除不是真正删除数据，而是给数据设置一个标记</p>
<h3 id="1-数据库软删除"><a href="#1-数据库软删除" class="headerlink" title="1.数据库软删除"></a>1.数据库软删除</h3><p>创建一个软删除时间的字段，填入时间标记</p>
<h3 id="2-模型软删除"><a href="#2-模型软删除" class="headerlink" title="2.模型软删除"></a>2.模型软删除</h3><p>一般推荐使用模型端进行软删除</p>
<h2 id="模板引擎和视图渲染"><a href="#模板引擎和视图渲染" class="headerlink" title="模板引擎和视图渲染"></a>模板引擎和视图渲染</h2><h3 id="1-模板引擎"><a href="#1-模板引擎" class="headerlink" title="1.模板引擎"></a>1.模板引擎</h3><p>模板引擎渲染视图</p>
<p>模板引擎分成两种，一种是内置的，一种外置作为插件引入的（我们使用内置即可）</p>
<h3 id="2-视图渲染"><a href="#2-视图渲染" class="headerlink" title="2.视图渲染"></a>2.视图渲染</h3><p>通过控制器，把模板引擎的模板页面（视图渲染）加载进来</p>
<h2 id="视图赋值和过滤"><a href="#视图赋值和过滤" class="headerlink" title="视图赋值和过滤"></a>视图赋值和过滤</h2><h3 id="1-视图赋值"><a href="#1-视图赋值" class="headerlink" title="1.视图赋值"></a>1.视图赋值</h3><p>在视图中给模板页面传递值</p>
<h3 id="2-视图过滤"><a href="#2-视图过滤" class="headerlink" title="2.视图过滤"></a>2.视图过滤</h3><p>对模板输入的变量进行过滤</p>
<h2 id="模板变量输出"><a href="#模板变量输出" class="headerlink" title="模板变量输出"></a>模板变量输出</h2><h3 id="1-变量输出"><a href="#1-变量输出" class="headerlink" title="1.变量输出"></a>1.变量输出</h3><p>当模板文件位置创建好后，输出控制器为变量赋值，然后通过<code>&#123;$name&#125;</code>这样的方式在模板输出变量值</p>
<h3 id="2-其他输出"><a href="#2-其他输出" class="headerlink" title="2.其他输出"></a>2.其他输出</h3><h2 id="模板中函数的使用和运算符"><a href="#模板中函数的使用和运算符" class="headerlink" title="模板中函数的使用和运算符"></a>模板中函数的使用和运算符</h2><p>在前端模板页面使用函数和运算符达到灵活地渲染出动态数据</p>
<h3 id="1-使用函数"><a href="#1-使用函数" class="headerlink" title="1.使用函数"></a>1.使用函数</h3><p>提供一些函数方法对数据进行过滤处理，使用管道符进行调用</p>
<h3 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2.运算符"></a>2.运算符</h3><p>在模板中可以对数据进行运算处理</p>
<h2 id="模板的循环标签"><a href="#模板的循环标签" class="headerlink" title="模板的循环标签"></a>模板的循环标签</h2><p>模板循环输出循环块，动态输出数据</p>
<h3 id="1-foreach循环"><a href="#1-foreach循环" class="headerlink" title="1.foreach循环"></a>1.foreach循环</h3><p>控制器通过模型把数据列表筛选出来，再传递到视图，然后再将其渲染出来</p>
<h3 id="2-volist循环"><a href="#2-volist循环" class="headerlink" title="2.volist循环"></a>2.volist循环</h3><p>volist也是将查询的到的数据集通过循环的方式进行输出</p>
<h3 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a>3.for循环</h3><p>for循环可以通过起始和终止值，结合步长实现循环</p>
<h2 id="模板的比较和定义"><a href="#模板的比较和定义" class="headerlink" title="模板的比较和定义"></a>模板的比较和定义</h2><h3 id="1-比较标签"><a href="#1-比较标签" class="headerlink" title="1.比较标签"></a>1.比较标签</h3><p>{eq}{/eq}标签，比较两个值是否相同，相同即输出包含内容</p>
<p>还存在其他不同的标签代替不同的关系运算符对变量进行比较</p>
<h3 id="2-定义标签"><a href="#2-定义标签" class="headerlink" title="2.定义标签"></a>2.定义标签</h3><p>在模板页面定义一个变量，可以使用{assgin}标签，</p>
<h2 id="模板的条件判断标签"><a href="#模板的条件判断标签" class="headerlink" title="模板的条件判断标签"></a>模板的条件判断标签</h2><h3 id="1-switch标签"><a href="#1-switch标签" class="headerlink" title="1.switch标签"></a>1.switch标签</h3><p>实现多个条件判断</p>
<h3 id="2-if标签"><a href="#2-if标签" class="headerlink" title="2.if标签"></a>2.if标签</h3><p>基本条件判断语句</p>
<h3 id="3-范围标签"><a href="#3-范围标签" class="headerlink" title="3.范围标签"></a>3.范围标签</h3><p>{in}和{notin}，判断值是否存在或不存在指定的数据列表中</p>
<h3 id="4-是否存在标签"><a href="#4-是否存在标签" class="headerlink" title="4.是否存在标签"></a>4.是否存在标签</h3><p>是否存在：{present}和{notpresent}判断变量是否已经定义赋值</p>
<p>是否为空：{empty}和{notempty}判断变量是否为空值;</p>
<h2 id="模板的加载包含输出"><a href="#模板的加载包含输出" class="headerlink" title="模板的加载包含输出"></a>模板的加载包含输出</h2><h3 id="1-包含文件"><a href="#1-包含文件" class="headerlink" title="1.包含文件"></a>1.包含文件</h3><p>使用{include}标签加载公用重复的文件，比如头部，尾部和导航部分</p>
<h3 id="2-输出替换"><a href="#2-输出替换" class="headerlink" title="2.输出替换"></a>2.输出替换</h3><p>在模板中常常需要调用一些静态文件，比如css/js。直接写完整的路径引入，比较冗长，所以需要把这些路径整理打包</p>
<h3 id="3-文件加载"><a href="#3-文件加载" class="headerlink" title="3.文件加载"></a>3.文件加载</h3><p>传统方式调用css或js文件时，采用link和script标签实现。tp5提供了{load}标签的方法加载css和js文件</p>
<h2 id="模板的布局和继承"><a href="#模板的布局和继承" class="headerlink" title="模板的布局和继承"></a>模板的布局和继承</h2><h3 id="1-模板布局"><a href="#1-模板布局" class="headerlink" title="1.模板布局"></a>1.模板布局</h3><p>默认不支持模板布局功能，需要在配置文件中开启</p>
<h3 id="2-模板继承"><a href="#2-模板继承" class="headerlink" title="2.模板继承"></a>2.模板继承</h3><p>模板继承的布局方法更加灵活，把内容和样式分离</p>
<h2 id="路由介绍和定义"><a href="#路由介绍和定义" class="headerlink" title="路由介绍和定义"></a>路由介绍和定义</h2><h3 id="1-路由简介"><a href="#1-路由简介" class="headerlink" title="1.路由简介"></a>1.路由简介</h3><p>路由的作用是让url地址更将规范优雅（tp的默认url确实有点过分了）</p>
<p>设置路由对url的检验，验证等一系列操作提供了极大的便利性</p>
<h3 id="2-路由定义"><a href="#2-路由定义" class="headerlink" title="2.路由定义"></a>2.路由定义</h3><p>为url自定义路由规则，让url访问更加简洁和优雅( •̀ ω •́ )✧</p>
<p>在route文件下定制自己专属的路由规则</p>
<h2 id="路由的变量规则和闭包"><a href="#路由的变量规则和闭包" class="headerlink" title="路由的变量规则和闭包"></a>路由的变量规则和闭包</h2><h3 id="1-变量规则"><a href="#1-变量规则" class="headerlink" title="1.变量规则"></a>1.变量规则</h3><p>用户可以通过自定义的路由进行传值，我们通过设置变量规则对输入的值进行过滤出来</p>
<h3 id="2-闭包支持"><a href="#2-闭包支持" class="headerlink" title="2.闭包支持"></a>2.闭包支持</h3><p>闭包支持可以让用户通过url直接执行语句，不需要通过控制器和方法</p>
<h2 id="路由的地址和缓存"><a href="#路由的地址和缓存" class="headerlink" title="路由的地址和缓存"></a>路由的地址和缓存</h2><h3 id="1-路由地址"><a href="#1-路由地址" class="headerlink" title="1.路由地址"></a>1.路由地址</h3><p>路由的地址一般为：控制器/方法，如果是多模块则为：模块/控制器/方法</p>
<h3 id="2-路由缓存"><a href="#2-路由缓存" class="headerlink" title="2.路由缓存"></a>2.路由缓存</h3><p>开启路由缓存可以极高提高性能，需要在部署环境下才有效果</p>
<h2 id="路由的参数和快捷路由"><a href="#路由的参数和快捷路由" class="headerlink" title="路由的参数和快捷路由"></a>路由的参数和快捷路由</h2><h3 id="1-路由参数"><a href="#1-路由参数" class="headerlink" title="1.路由参数"></a>1.路由参数</h3><p>设置路由时，可以设置第三个数组参数，主要实施匹配检测和行为执行（比如检测文件类型，绑定到模型）</p>
<h3 id="2-快捷路由"><a href="#2-快捷路由" class="headerlink" title="2.快捷路由"></a>2.快捷路由</h3><p>快捷路由可以快速给控制器注册路由，还可以更加不同的请求类型设置前缀</p>
<h2 id="路由分组和注解"><a href="#路由分组和注解" class="headerlink" title="路由分组和注解"></a>路由分组和注解</h2><h3 id="1-路由分组"><a href="#1-路由分组" class="headerlink" title="1.路由分组"></a>1.路由分组</h3><p>将相同前缀的路由合并分组，这样可以简化路由定义，提高匹配效率</p>
<p>使用group方法进行分组路由注册</p>
<h3 id="2-注解路由"><a href="#2-注解路由" class="headerlink" title="2.注解路由"></a>2.注解路由</h3><p>tp5提供了一个可以在注解中直接创建路由的方式（默认关闭），在控制器写入路由注解可以达到在router.php写路由同样的效果</p>
<h2 id="路由MISS和跨域请求"><a href="#路由MISS和跨域请求" class="headerlink" title="路由MISS和跨域请求"></a>路由MISS和跨域请求</h2><h3 id="1-MISS路由"><a href="#1-MISS路由" class="headerlink" title="1.MISS路由"></a>1.MISS路由</h3><p>开启强制路由功能，匹配不到相应规则时自动跳转到MISS（控制器中的miss方法）</p>
<h3 id="2-跨域请求"><a href="#2-跨域请求" class="headerlink" title="2.跨域请求"></a>2.跨域请求</h3><p>但不同域名进行跨域请求时，由于浏览器的安全限制，会被拦截</p>
<p>在路由中使用allowCrossDomain()方法可以解除跨域的限制（在restful api 这种前后端分离的架构上，这点尤为重要）</p>
<p>把域名限制添加到头部中可以限制访问的域名</p>
<h2 id="路由的绑定和别名"><a href="#路由的绑定和别名" class="headerlink" title="路由的绑定和别名"></a>路由的绑定和别名</h2><h3 id="1-路由绑定"><a href="#1-路由绑定" class="headerlink" title="1.路由绑定"></a>1.路由绑定</h3><p> 路由绑定可以简化URL和路由规则的定义，可以绑定到模块/控制器/操作</p>
<h3 id="2-路由别名"><a href="#2-路由别名" class="headerlink" title="2.路由别名"></a>2.路由别名</h3><p>给控制器起一个别名，可以通过别名自动生成一系列规则</p>
<h2 id="资源路由"><a href="#资源路由" class="headerlink" title="资源路由"></a>资源路由</h2><p>采用固定的常用方法来实现简化URL功能</p>
<p>系统提供一个命令，方便开发者快速生成一个资源控制器（自动生成包括显示，增删改查等多个操作方法）</p>
<h2 id="域名路由"><a href="#域名路由" class="headerlink" title="域名路由"></a>域名路由</h2><h3 id="1-域名路由"><a href="#1-域名路由" class="headerlink" title="1.域名路由"></a>1.域名路由</h3><p>在电脑host文件中，添加域名映射</p>
<h3 id="2-域名绑定"><a href="#2-域名绑定" class="headerlink" title="2.域名绑定"></a>2.域名绑定</h3><p>在配置文件app.php中可以设置根域名，如果实际域名不符，会解析失败（默认自动获取）</p>
<h2 id="路由的URL生成"><a href="#路由的URL生成" class="headerlink" title="路由的URL生成"></a>路由的URL生成</h2><p>之前的URL都是我们手动设置的，tp5提供了一套自动生成的方法（控制器的方法中写入）</p>
<h2 id="请求对象和信息"><a href="#请求对象和信息" class="headerlink" title="请求对象和信息"></a>请求对象和信息</h2><h3 id="1-请求对象的获取"><a href="#1-请求对象的获取" class="headerlink" title="1.请求对象的获取"></a>1.请求对象的获取</h3><p>（1）继承控制器基类时，会自动被注入Request请求对象的功能</p>
<p>（2）自行注入Request请求对象（依赖注入）</p>
<p>（3）facade方式：应用于没有进行依赖注入的场合</p>
<p>（4）使用助手函数request()方法</p>
<h2 id="请求变量"><a href="#请求变量" class="headerlink" title="请求变量"></a>请求变量</h2><h3 id="1-请求变量"><a href="#1-请求变量" class="headerlink" title="1.请求变量"></a>1.请求变量</h3><p>Request对象支持全局变量的检测，获取和安全过滤（主要作用对象是url）</p>
<h3 id="2-助手函数"><a href="#2-助手函数" class="headerlink" title="2.助手函数"></a>2.助手函数</h3><p>使用助手函数对Request对象提供的方法进行简化</p>
<h3 id="请求类型与请求头"><a href="#请求类型与请求头" class="headerlink" title="请求类型与请求头"></a>请求类型与请求头</h3><h3 id="1-请求类型"><a href="#1-请求类型" class="headerlink" title="1.请求类型"></a>1.请求类型</h3><p>我们用method()方法判断Request的请求类型</p>
<h3 id="2-Http头信息"><a href="#2-Http头信息" class="headerlink" title="2.Http头信息"></a>2.Http头信息</h3><p>使用header()方法输出http头信息，返回是数组类型</p>
<h2 id="伪静态-参数绑定-请求缓存"><a href="#伪静态-参数绑定-请求缓存" class="headerlink" title="伪静态-参数绑定-请求缓存"></a>伪静态-参数绑定-请求缓存</h2><h3 id="1-伪静态"><a href="#1-伪静态" class="headerlink" title="1.伪静态"></a>1.伪静态</h3><p>伪静态技术是指展示出来的是以html一类的静态页面形式，但其实是用动态脚本来处理的。</p>
<h3 id="2-参数绑定"><a href="#2-参数绑定" class="headerlink" title="2.参数绑定"></a>2.参数绑定</h3><p>参数绑定功能：即通过url进行数据传参</p>
<h3 id="3-请求缓存"><a href="#3-请求缓存" class="headerlink" title="3.请求缓存"></a>3.请求缓存</h3><p>请求缓存仅对GET请求有效，并设置有效期</p>
<h2 id="响应重定向和文件下载"><a href="#响应重定向和文件下载" class="headerlink" title="响应重定向和文件下载"></a>响应重定向和文件下载</h2><h3 id="1-响应操作"><a href="#1-响应操作" class="headerlink" title="1.响应操作"></a>1.响应操作</h3><p>（1）响应输出：return, json, view</p>
<p>（2）response方法可以设置第二参数：状态码，也可以调code()方法返回状态码</p>
<p>（3）通过header()设置头文件</p>
<h3 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2.重定向"></a>2.重定向</h3><p>使用redirect()方法可以实现页面重定向，需要return执行（即页面跳转）</p>
<h3 id="3-文件下载"><a href="#3-文件下载" class="headerlink" title="3.文件下载"></a>3.文件下载</h3><p>文件和图片下载都可以使用download()方法即可，路径为实际路径</p>
<h2 id="容器和依赖注入"><a href="#容器和依赖注入" class="headerlink" title="容器和依赖注入"></a>容器和依赖注入</h2><h3 id="1-依赖注入"><a href="#1-依赖注入" class="headerlink" title="1.依赖注入"></a>1.依赖注入</h3><p>依赖注入本质上是指对类的依赖通过构造器完成自动注入</p>
<p>依赖注入：即允许通过类的方法传递对象，并约束了对象类型,二传递的对象背后的那个类被自动绑定并且实例化了</p>
<p>由于控制器的参数都来自于URL请求，普通变量通过参数绑定自动获取，对象变量则是通过依赖注入生成</p>
<h3 id="2-容器"><a href="#2-容器" class="headerlink" title="2.容器"></a>2.容器</h3><p>依赖注入的类统一由容器管理的，大多数情况下是自动绑定和自动实例化</p>
<p>在容器中可以通过bind()和app()来实现手动的绑定和实例化</p>
<h2 id="Facade"><a href="#Facade" class="headerlink" title="Facade"></a>Facade</h2><h3 id="1-创建静态调用"><a href="#1-创建静态调用" class="headerlink" title="1.创建静态调用"></a>1.创建静态调用</h3><p>facade即门面设计模式，为容器的类提供了一种静态调用模式（比如之前使用的Request::，Route::，Db::等等）</p>
<p>在common文件创建容器，在facade文件创建静态调用方法对应common的方法</p>
<h3 id="2-facade核心类库"><a href="#2-facade核心类库" class="headerlink" title="2.facade核心类库"></a>2.facade核心类库</h3><p>上面仅仅是展示了facade运行的原理，在实际运用中我们使用系统提供的facade核心类库即可</p>
<h2 id="钩子和行为"><a href="#钩子和行为" class="headerlink" title="钩子和行为"></a>钩子和行为</h2><h3 id="1-概念理解"><a href="#1-概念理解" class="headerlink" title="1.概念理解"></a>1.概念理解</h3><p>行为：当执行到路由时，对路由的设置进行一系列的检测，这种就叫行为</p>
<p>钩子（事件）：行为执行的位置点，触发点</p>
<h3 id="2-实例展示"><a href="#2-实例展示" class="headerlink" title="2.实例展示"></a>2.实例展示</h3><p>在behavior文件夹下，存放行为类，行为类中设置一个入口方法run()，只要钩子被触发就会执行</p>
<p>钩子需要在配置文件中的tags.php设置，把行为注册到其中</p>
<p>我们也可以在tags.php自定义自己的钩子</p>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="1-定义中间件"><a href="#1-定义中间件" class="headerlink" title="1.定义中间件"></a>1.定义中间件</h3><p>中间件与钩子类似，主要用于拦截和过滤HTTP请求（如URL重定向，权限验证），并进行相应处理</p>
<p>通过命令行，在应用目录下生成一个中间件文件</p>
<p>在配置文件夹下设置中间件配置文件：middleware.php（默认说没有的）</p>
<h3 id="2-前-后置中间件"><a href="#2-前-后置中间件" class="headerlink" title="2.前/后置中间件"></a>2.前/后置中间件</h3><p>前置中间件就是请求阶段进行拦截验证，比如登录判断，跳转，权限等</p>
<p>后置中间件就是请求完毕后在进行验证，比如写入日志</p>
<h3 id="3-路由中间件"><a href="#3-路由中间件" class="headerlink" title="3.路由中间件"></a>3.路由中间件</h3><p>给路由使用的中间件，当检测到路由含指定条件，就触发这个中间件</p>
<h3 id="4-控制器中间件"><a href="#4-控制器中间件" class="headerlink" title="4.控制器中间件"></a>4.控制器中间件</h3><p>可以在控制器中注册中间件，控制器必须继承Controller基类</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="1-异常处理"><a href="#1-异常处理" class="headerlink" title="1.异常处理"></a>1.异常处理</h3><p>（1）使用Exception手动抛出异常</p>
<p>（2）try……cacth对异常捕捉并抛出</p>
<p>（3）用HttpException手动抛出http异常</p>
<p>（4）系统上线要关闭调试模式，进入部署环境下，可以在配置文件设置http错误页面    </p>
<h2 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h2><p>日志处理由Log类完成，记录所有程序中运行的错误记录</p>
<p>系统的报错会自动存入日志中，我们也可以手动添加日志</p>
<h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><h3 id="1-验证器"><a href="#1-验证器" class="headerlink" title="1.验证器"></a>1.验证器</h3><p>系统提供了一条命令直接生成验证器类</p>
<p>在类中我们可以设置规则，定义错误信息</p>
<p>默认情况下，一旦数据验证不符合规则，就会立即停止验证进行返回</p>
<h3 id="2-验证规则"><a href="#2-验证规则" class="headerlink" title="2.验证规则"></a>2.验证规则</h3><p>验证规则有字符串模式和数组模式两种</p>
<p>独立验证（手动调用验证类），直接在控制器中设置验证规则而无需通过验证器</p>
<p>独立验证支持闭包模式，部支持属性方式和多规则方式</p>
<h3 id="3-验证场景"><a href="#3-验证场景" class="headerlink" title="3.验证场景"></a>3.验证场景</h3><p>有时我们并不希望所有的字段都得到验证，这是可以设置一个$scene属性，用来限定场景验证</p>
<p>比如做插入操作时验证3个字段，而做修改操作时只验证两个字段</p>
<h3 id="4-路由验证"><a href="#4-路由验证" class="headerlink" title="4.路由验证"></a>4.路由验证</h3><p>在路由的参数来调用验证类进行验证，和字段验证一样</p>
<p>在路由中绑定验证器</p>
<p>也可以在路由中写入独立的验证器</p>
<h2 id="验证静态调用和令牌"><a href="#验证静态调用和令牌" class="headerlink" title="验证静态调用和令牌"></a>验证静态调用和令牌</h2><h3 id="1-静态调用"><a href="#1-静态调用" class="headerlink" title="1.静态调用"></a>1.静态调用</h3><p>使用facade模式进行调用验证，非常适合单个数据验证</p>
<h3 id="2-表单令牌"><a href="#2-表单令牌" class="headerlink" title="2.表单令牌"></a>2.表单令牌</h3><p>表单令牌就是在表单中增加一个隐藏字段，随机生成一串字符，确认提交的表单不是伪造</p>
<p>这种随机产生的字符和服务器的seesion进行对比，通过则是合法表单</p>
<h2 id="独立验证和内置规则"><a href="#独立验证和内置规则" class="headerlink" title="独立验证和内置规则"></a>独立验证和内置规则</h2><h3 id="1-独立验证"><a href="#1-独立验证" class="headerlink" title="1.独立验证"></a>1.独立验证</h3><p>除了之前提过的独立验证，系统还提供了make方法实现独立验证（tp6废弃）</p>
<h3 id="2-内置规则"><a href="#2-内置规则" class="headerlink" title="2.内置规则"></a>2.内置规则</h3><p>内置规则说系统准备的常用验证规则，而且严格区分大小写</p>
<h2 id="数据库与模型-1"><a href="#数据库与模型-1" class="headerlink" title="数据库与模型"></a>数据库与模型</h2><h2 id="Seesion"><a href="#Seesion" class="headerlink" title="Seesion"></a>Seesion</h2><p>session第一次调用时，会按照config/seesion.php进行初始化</p>
<p>也可以在控制器中设置初始化</p>
<p>使用::set()和::get()方法设置seesion的存取</p>
<p>助手函数也有对应的替代方法</p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>cookie在配置文件cookie.php中会自行初始化</p>
<p>::set()创建一个基本cookie</p>
<h2 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h2><p>数据库操作和模型操作，都使用paginate()方法来实现</p>
<h2 id="上传功能"><a href="#上传功能" class="headerlink" title="上传功能"></a>上传功能</h2><p>Request::file方法文件接收文件，然后调用move方法将文件移动到指定文件夹</p>
<p>可以设置验证器，用于验证文件大小类型等</p>
<p>默认情况下，上传文件是按时间生成命名的</p>
<h2 id="数据库和模型的事件"><a href="#数据库和模型的事件" class="headerlink" title="数据库和模型的事件"></a>数据库和模型的事件</h2><h3 id="1-数据库事件"><a href="#1-数据库事件" class="headerlink" title="1.数据库事件"></a>1.数据库事件</h3><p>当对数据库进行增删改查时，可以触发一些事件进行额外操作，它们可以部署在构造方法中等待激活执行</p>
<p>在控制器端，事件一般可以写在构造方法中，统一管理</p>
<h3 id="2-模型事件"><a href="#2-模型事件" class="headerlink" title="2.模型事件"></a>2.模型事件</h3><p>在模型端，创建init()方法，写入模型事件，可以使用event或快捷方式</p>
<h2 id="关联模型"><a href="#关联模型" class="headerlink" title="关联模型"></a>关联模型</h2><p>关联模型，就是将表与表之间进行关联和对象化，更高效的操作数据</p>
<h3 id="1-一对一关联"><a href="#1-一对一关联" class="headerlink" title="1.一对一关联"></a>1.一对一关联</h3><p>（1）hasOne模式</p>
<p>模型端使用hasone方法创建一对一关联关系，参数1为附表名，参数2为外键，参数3为主键</p>
<p>hasOmne模型适合主表关联附表</p>
<p>在关联表中，-&gt;profile属性方式可以修改数据，删除数据，-&gt;profile()方法方式可以新增数据</p>
<h3 id="2-一对多关联"><a href="#2-一对多关联" class="headerlink" title="2.一对多关联"></a>2.一对多关联</h3><p>hansMany适合主表关联附表，实现一对多查询，可以查多个重复外键的数据</p>
<p>使用-&gt;profile()方法模式加上where可以进一步筛选数据</p>
<p>也可以通过has()和haswhere()通过关联附表查询主表</p>
<h3 id="3-关联预载入"><a href="#3-关联预载入" class="headerlink" title="3.关联预载入"></a>3.关联预载入</h3><p>在关联查询中，当查询次数过大时，我们可以使用关联预载入进行封装，使多次查询变成一次查询</p>
<p>使用with方式进行关联</p>
<p>关联预载入减少查询次数提高了性能，但不支持多次调用</p>
<h3 id="4-关联统计和输出"><a href="#4-关联统计和输出" class="headerlink" title="4.关联统计和输出"></a>4.关联统计和输出</h3><p>关联统计：</p>
<ul>
<li>使用withCount()方法可以统计主表关联附表的个数</li>
<li>使用withMax()等统计主表关于附表的字段统计</li>
</ul>
<p>关联输出：</p>
<p>隐藏，显示，添加主表字段或附属表字段，然后输出</p>
<h3 id="5-多对多关联查询"><a href="#5-多对多关联查询" class="headerlink" title="5.多对多关联查询"></a>5.多对多关联查询</h3><p>一对一场景：一个用户对应一个档案资料（至少两张表）</p>
<p>一对多场景：一个用户可以有多条评论（至少两张表）</p>
<p>多对多场景：一个用户对应多个角色，而一个角色对应多个用户（至少三张表）</p>
<p>多对多关联使用belongsToMany方法，填入其他两个附表模型信息作为参数</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
        <tag>框架学习</tag>
        <tag>后端</tag>
        <tag>thinkphp</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP|php与mysql</title>
    <url>/2020/05/31/PHP-php%E4%B8%8Emysql/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041008686.png" alt="image-20210904100806527"></p>
<span id="more"></span>

<h3 id="使用PHP"><a href="#使用PHP" class="headerlink" title="使用PHP"></a>使用PHP</h3><h4 id="了解PHP"><a href="#了解PHP" class="headerlink" title="了解PHP"></a>了解PHP</h4><h5 id="1-php含义"><a href="#1-php含义" class="headerlink" title="1.php含义"></a>1.php含义</h5><p>PHP是一种服务器端脚本语言,它是专门为Web而设计的。在一个HTML页面中,你可以嵌入PHP代码,这些代码在每次页面被访问时执行。PHP代码将在Web服务器中被解释并且生成HTML或访问者看到的其他输出。</p>
<h5 id="2-php优点"><a href="#2-php优点" class="headerlink" title="2.php优点"></a>2.php优点</h5><p>■高性能</p>
<p>■可扩展性</p>
<p>■与许多不同数据库系统的接口</p>
<p>■内置许多常见Web任务所需的函数库</p>
<p>■低成本</p>
<p>■容易学习和使用</p>
<p>■对面向对象的高度支持</p>
<p>■可移植性</p>
<p>■开发方法的灵活性</p>
<p>■源代码可供使用</p>
<p>■技术支持和文档可供使用</p>
<h4 id="案例引入"><a href="#案例引入" class="headerlink" title="案例引入"></a>案例引入</h4><h5 id="1-html表单"><a href="#1-html表单" class="headerlink" title="1.html表单"></a>1.html表单</h5><p>（1）代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;test.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span> =<span class="string">&quot;#cccccc&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span> = <span class="string">&quot;150&quot;</span>&gt;</span>Item<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span> = <span class="string">&quot;15&quot;</span>&gt;</span>Quantity<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Tires<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span> &gt;</span></span><br><span class="line">                              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;tireqty&quot;</span> <span class="attr">size</span> = <span class="string">&quot;3&quot;</span> <span class="attr">maxlength</span> = <span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>oil<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span> &gt;</span></span><br><span class="line">                              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;oilqqty&quot;</span> <span class="attr">size</span> = <span class="string">&quot;3&quot;</span> <span class="attr">maxlength</span> = <span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          </span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Spark<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span> &gt;</span></span><br><span class="line">                              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;sparkqty&quot;</span> <span class="attr">size</span> = <span class="string">&quot;3&quot;</span> <span class="attr">maxlength</span> = <span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;Submit&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">          <span class="tag">&lt;/<span class="name">table</span>&gt;</span>          </span><br><span class="line">          <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）实现效果：</p>
<p>（3）代码解析：</p>
<ul>
<li><p>html表格由<table>标签定义，每个表格均有若干行（由 <tr> 标签定义），每行被分割为若干单元格（由 <td> 标签定义）。字母 td 指表格数据（table data），表格的表头使用 <th> 标签进行定义。</th></td></tr></table></p>
</li>
<li><p>html表单<form>,用于收集用户信息</form></p>
</li>
<li><p>表单元素<input>,根据type属性有不同类型，根据name定义表单域</p>
</li>
</ul>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>定义常规文本输入。</td>
</tr>
<tr>
<td>radio</td>
<td>定义单选按钮输入（选择多个选择之一）</td>
</tr>
<tr>
<td>submit</td>
<td>定义提交按钮（提交表单）</td>
</tr>
</tbody></table>
<ul>
<li>Action属性</li>
</ul>
<p><em>action 属性</em>定义在提交表单时执行的动作。向服务器提交表单的通常做法是使用提交按钮。通常，表单会被提交到 web 服务器上的网页。也可以指定某个服务器脚本来处理表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;test.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>html中表单域的名称可以沿用在php中，并反映输入该域的数据</p>
<ul>
<li>Method 属性</li>
</ul>
<p><em>method 属性<em>规定在提交表单时所用的 HTTP 方法（</em>GET</em> 或 <em>POST</em>）</p>
<h5 id="2-表单处理"><a href="#2-表单处理" class="headerlink" title="2.表单处理"></a>2.表单处理</h5><p>PHP脚本在web服务器上解释执行后，脚本输出代替了脚本本身，变成了纯html，用户的浏览器并不需要理解PHP</p>
<h5 id="3-在html中嵌入php"><a href="#3-在html中嵌入php" class="headerlink" title="3.在html中嵌入php"></a>3.在html中嵌入php</h5><p>（1）PHP标记</p>
<p>常用风格：<?php ?></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;hello world&lt;/p&gt;&#x27;</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>（2）php注释</p>
<p>多行注释：/*  */</p>
<p>单行注释：// 或 #</p>
<p>（3）注意php环境的搭建，如果是用phpstudy搭建，执行php文件应放在www文件中并且执行文件的url为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;文件名</span><br></pre></td></tr></table></figure>



<h5 id="4-添加动态内容"><a href="#4-添加动态内容" class="headerlink" title="4.添加动态内容"></a>4.添加动态内容</h5><p>使用服务器端脚本语言的主要原因就是能够为站点用户提供动态内容。这是一个非常重要的应用，因为根据用户需求或随着时间的推进而变化的内容可以使得用户不断地访问这个站点。</p>
<p>案例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">          &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;时间&quot;</span>;</span><br><span class="line">          <span class="keyword">echo</span> date(<span class="string">&#x27;H:i,jS F Y&#x27;</span>);</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">&lt;/h2&gt;       </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>（1）使用date()函数</p>
<ul>
<li>date()函数需要一个传递格式化字符串的变量,字符串的每一个字母都表示日期和时间的一部分</li>
<li>H是24小时格式的小时，i是分钟，如果小时数和分钟数是个位数，需要在前面补0</li>
<li>j是该月的日期，不需要前面的补0</li>
<li>而s表示顺序后缀（在这个例子中，是“th”）</li>
<li>F是月份的全称</li>
</ul>
<h5 id="5-访问表单变量"><a href="#5-访问表单变量" class="headerlink" title="5.访问表单变量"></a>5.访问表单变量</h5><p>（1）不同风格的表单变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$tireqty</span>						<span class="comment">// short style</span></span><br><span class="line"><span class="variable">$_POST</span>[<span class="string">&#x27;tireqty&#x27;</span>]				<span class="comment">//medium style</span></span><br><span class="line"><span class="variable">$HTTP_POST_VARSt</span>[<span class="string">&#x27;tireqty&#x27;</span>]	    <span class="comment">//1ong style</span></span><br></pre></td></tr></table></figure>

<p>注意：php变量一定要以$开头</p>
<p>（2）不同风格的比较：</p>
<ul>
<li><strong>简短风格：</strong>使用方便，但也容易造成安全问题，只推荐新手使用。脚本的变量名和表单域名是一样的，如同向一个函数传递参数，不需要再声明变量</li>
<li><strong>中等风格：</strong>开发中推荐使用，不会产生安全问题。中等风格涉及了从$_POST、$_GET或$_REQUEST数组之一检索变量。$_GET或$_POST数组之一都可以保存表单变量的细节。通过POST或GET方法及其组合方式提交的所有数据都可以通过$_REQUEST数组获得。这些数组被称为超级全局变量</li>
<li><strong>冗长风格：</strong>已经被弃用</li>
</ul>
<p>（3）案例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>     </span><br><span class="line">          <span class="variable">$tireqty</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;tireqty&#x27;</span>];</span><br><span class="line">          <span class="variable">$oilqty</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;oilqty&#x27;</span>];</span><br><span class="line">          <span class="variable">$sparkqty</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;sparkqty&#x27;</span>];</span><br><span class="line"></span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;show&lt;/p&gt;&#x27;</span>;</span><br><span class="line">          <span class="keyword">echo</span> <span class="variable">$tireqty</span>. <span class="string">&#x27;tires&lt;br /&gt;&#x27;</span>;</span><br><span class="line">          <span class="keyword">echo</span> <span class="variable">$oilqty</span>. <span class="string">&#x27;oil&lt;br /&gt;&#x27;</span>;</span><br><span class="line">          <span class="keyword">echo</span> <span class="variable">$sparkqty</span>. <span class="string">&#x27;spark plugs&lt;br /&gt;&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>把表单域传来的值赋值到新的变量上。</p>
<h4 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h4><h5 id="1-变量类型"><a href="#1-变量类型" class="headerlink" title="1.变量类型"></a>1.变量类型</h5><p>php的数据类型由赋给变量的值决定,当然我们也可以强制类型转换</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ test1 = <span class="number">1</span>;</span><br><span class="line">$ test2 = (<span class="keyword">float</span>)<span class="variable">$test2</span>;</span><br></pre></td></tr></table></figure>

<p>test1是整数型，而test2是浮点数型</p>
<h5 id="2-常量的使用"><a href="#2-常量的使用" class="headerlink" title="2.常量的使用"></a>2.常量的使用</h5><p>变量可变，常量固定不变，一般使用define函数定义常量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">define(<span class="string">&#x27;Test1&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">define(<span class="string">&#x27;Test2&#x27;</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure>

<p>引用常量时，不需要$号，所以常用大写来区分常量和变量</p>
<p>除了自定义的常量外，还有php预定义的许多常量，我们可以通过<code>phpinfo()</code>函数查看</p>
<h5 id="3-变量作用域"><a href="#3-变量作用域" class="headerlink" title="3.变量作用域"></a>3.变量作用域</h5><h4 id="php特供操作符"><a href="#php特供操作符" class="headerlink" title="php特供操作符"></a>php特供操作符</h4><h5 id="1-字符串操作符"><a href="#1-字符串操作符" class="headerlink" title="1.字符串操作符"></a>1.字符串操作符</h5><p>点操作符将两个字符串连在一起</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&quot;BOb&#x27;s&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&quot;home&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$a</span>.<span class="variable">$b</span>;</span><br></pre></td></tr></table></figure>



<h5 id="2-执行操作符"><a href="#2-执行操作符" class="headerlink" title="2.执行操作符"></a>2.执行操作符</h5><p>php将````之间的命令当作服务器端的命令行来执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$out</span> = `dir c:`;</span><br><span class="line"><span class="keyword">echo</span> `&lt;pre&gt; `.<span class="variable">$out</span>.` &lt;/pre&gt; `</span><br></pre></td></tr></table></figure>



<h5 id="3-数组操作符"><a href="#3-数组操作符" class="headerlink" title="3.数组操作符"></a>3.数组操作符</h5><p>php可以直接操作一整个数组，如比较联合比较等</p>
<h5 id="4-类型操作符"><a href="#4-类型操作符" class="headerlink" title="4.类型操作符"></a>4.类型操作符</h5><p><code>instanceof</code>操作符允许检查一个对象是否是特定类的实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">class test();</span><br><span class="line"><span class="variable">$mytest</span> = <span class="keyword">new</span> test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$mytest</span> <span class="keyword">instanceof</span> test)</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;yes&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h4 id="可变函数测试"><a href="#可变函数测试" class="headerlink" title="可变函数测试"></a>可变函数测试</h4><p>可变函数用于测试和操作变量，比较实用的用法是可以测试用户输入的表单数据是否正确</p>
<h5 id="1-测试和设置变量类型"><a href="#1-测试和设置变量类型" class="headerlink" title="1.测试和设置变量类型"></a>1.测试和设置变量类型</h5><p>（1）获取和设置变量类型</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">56</span>;</span><br><span class="line"><span class="keyword">echo</span> gettype(<span class="variable">$a</span>).<span class="string">&#x27;&lt;br/&gt;&#x27;</span>; <span class="comment">//获取a的变量类型</span></span><br><span class="line">settype(<span class="variable">$a</span>, <span class="string">&#x27;double&#x27;</span>);    <span class="comment">//将a的变量类型重置为double型</span></span><br></pre></td></tr></table></figure>



<p>（2）变量类型测试</p>
<table>
<thead>
<tr>
<th>测试函数名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>is_ array()</td>
<td>检查变量是否是数组</td>
</tr>
<tr>
<td>is_float()</td>
<td>检查变量是否为浮点数</td>
</tr>
<tr>
<td>is_int()</td>
<td>检查变量是否为整数</td>
</tr>
<tr>
<td>is_ string()</td>
<td>检查变量是否是字符串</td>
</tr>
<tr>
<td>is_ object()</td>
<td>检查变量是否是一个对象</td>
</tr>
<tr>
<td>is_null()</td>
<td>检查变量是否是为null</td>
</tr>
</tbody></table>
<p>（3）变量状态测试</p>
<ul>
<li>isset() : 测试一个变量是否存在</li>
<li>unset() :销毁一个变量</li>
<li>empty() : 测试一个变量是否存在，以及它的值是否为非空和非零</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;isset($test):&#x27;</span>.<span class="keyword">isset</span>(<span class="variable">$test</span>). <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;empty($test):&#x27;</span>.<span class="keyword">empty</span>(<span class="variable">$test</span>). <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>但$test存在时：</strong></p>
<p>isset()函数无论表单域填入什么或空白，都会返回1；</p>
<p>empty()函数但填入0或空值，返回0；</p>
<p><strong>但$test不存在时：</strong></p>
<p>isset()函数返回0；</p>
<p>empty()函数返回1；</p>
<h4 id="switch语句的使用"><a href="#switch语句的使用" class="headerlink" title="switch语句的使用"></a>switch语句的使用</h4><h5 id="1-html选择器"><a href="#1-html选择器" class="headerlink" title="1.html选择器"></a>1.html选择器</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span>选择一个项<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span> = <span class="string">&quot;find&quot;</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> = <span class="string">&quot;a&quot;</span>&gt;</span> 选项1 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> = <span class="string">&quot;b&quot;</span>&gt;</span> 选项2 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> = <span class="string">&quot;c&quot;</span>&gt;</span> 选项3 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> = <span class="string">&quot;d&quot;</span>&gt;</span> 选项4 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<p>select是一个html选择器表单标签，变量名为find，选项值有a，b，c，d，以下使用php的switch语句来处理这些数据（当然if语句也可）</p>
<h5 id="2-switch语句与选择器的交互"><a href="#2-switch语句与选择器的交互" class="headerlink" title="2.switch语句与选择器的交互"></a>2.switch语句与选择器的交互</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(<span class="variable">$find</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;a&quot;</span> :<span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;test1&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;b&quot;</span> :<span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;test2&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;c&quot;</span> :<span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;test3&quot;</span>; <span class="keyword">break</span>;    </span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;d&quot;</span> :<span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;test4&quot;</span>; <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>值得注意的是switch语句和if语句不同，switch语句实质是比较并跳转到符合条件的语句，并向下执行直到遇到break</p>
<h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><h5 id="1-php循环用法"><a href="#1-php循环用法" class="headerlink" title="1.php循环用法"></a>1.php循环用法</h5><p>（1）简化重复有规律的html代码，在wordpress主题开发中很常见的用法</p>
<p>（2）动态创建变量名称，依次访问每一个表单域</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$numnames</span>; <span class="variable">$i</span>++)(</span><br><span class="line"><span class="variable">$temp</span>=<span class="string">&quot;names<span class="subst">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$temp</span>.<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h4 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h4><h5 id="1-一般形式"><a href="#1-一般形式" class="headerlink" title="1.一般形式"></a>1.一般形式</h5><ul>
<li>break：终止一个循环</li>
<li>continue ：进行下一次循环</li>
<li>exit：结束php语句</li>
</ul>
<h5 id="2-可替换的控制结构语法"><a href="#2-可替换的控制结构语法" class="headerlink" title="2.可替换的控制结构语法"></a>2.可替换的控制结构语法</h5><p>如endif，endswitch， endwhile，endforeach</p>
<p>（1）一般写法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$test</span> == <span class="number">0</span>)&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（2）使用替代写法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$test</span> == <span class="number">0</span>):</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line"><span class="keyword">endif</span>;</span><br></pre></td></tr></table></figure>



<h3 id="数据存储和检索"><a href="#数据存储和检索" class="headerlink" title="数据存储和检索"></a>数据存储和检索</h3><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h4><p>（1）将数据写入一个文件,有以下3步操作</p>
<ul>
<li>打开这个文件。如果文件不存在,需要先创建它。</li>
<li>将数据写入这个文件。</li>
<li>关闭这个文件</li>
</ul>
<p>（2）从一个文件中读出数据,也有以下3步操作</p>
<ul>
<li>打开这个文件。如果这个文件不能打开(例如,文件不存在),就应该意识到这一点并且正确地退出。</li>
<li>从文件中读出数据</li>
<li>关闭这个文件。</li>
</ul>
<h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p>在php中打开一个文件，可以使用fopen()函数，打开一个文件时，还需要指定文件模式（如何使用它）</p>
<h5 id="1-选择文件模式"><a href="#1-选择文件模式" class="headerlink" title="1.选择文件模式"></a>1.选择文件模式</h5><p>所谓文件模式，即用于决定如何处理来自其他人或脚本的请求，以及一种用来检查是否有权访问特定文件的方法</p>
<p>当你打开一个文件，你可以对它有三种操作选择：</p>
<ul>
<li>打开文件只是为了读它的内容（只读） /  写些内容（只写）/又读又写（读和写）</li>
<li>写一个文件时，你可以选择覆盖所有文件内容 / 追加到文件末尾</li>
<li>如果在某些区分二进制和纯文本的系统上写文件，还需要指定采用方式</li>
</ul>
<h5 id="2-fopen-打开文件"><a href="#2-fopen-打开文件" class="headerlink" title="2.fopen()打开文件"></a>2.fopen()打开文件</h5><p>（1）案例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$DOCUMENT_ROOT</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;$DOCUMENT_ROOT&#x27;</span>];</span><br><span class="line"><span class="variable">$fp</span> = fopen(<span class="string">&quot;<span class="subst">$DOCUMENT_ROOT</span>/../orders/orders.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>以下对fopen()所需参数进行解析</p>
<p>（2）文件路径参数</p>
<ul>
<li><code>$_SERVER[&#39;$DOCUMENT_ROOT&#39;]</code>是php的内置函数，使路径指向web服务器文档树的根</li>
<li>..表示文档根目录的父目录，描述了一个相对文档根目录文件的文件系统位置，表示相对路径</li>
<li>完善父目录下的路径</li>
</ul>
<p>目录的间隔号在windows平台还可以使用反斜线，但这也意味着代码只能在windows上运行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$fp</span> = fopen(<span class="string">&quot;<span class="subst">$DOCUMENT_ROOT</span>\\..\\orders\\orders.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>（3）文件模式</p>
<p>之前也有介绍过文件模式基本内容，网上也有很多相关表格整理，这里不多写</p>
<p>该图截自PHP与MySQL开发一书</p>
<p>一般采用的文件模式，都是追加模式（以及推荐二进制模式）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$fp</span> = fopen(<span class="string">&quot;<span class="subst">$DOCUMENT_ROOT</span>\\..\\orders\\orders.txt&quot;</span>, <span class="string">&#x27;ab&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h5 id="3-通过FTP或HTTP打开文件"><a href="#3-通过FTP或HTTP打开文件" class="headerlink" title="3.通过FTP或HTTP打开文件"></a>3.通过FTP或HTTP打开文件</h5><p>php除了可以打开一个本地文件进行操作外，还可以通过fopen()函数通过FTP或HTTP协议打开文件</p>
<ul>
<li><p>在php.ini文件中,可以通过关闭allow_url_ fopen指令来禁用这个功能。如果在使用该函数打开一个远程文件时遇到问题,请检查php.ini文件</p>
</li>
<li><p>如果使用的文件名是以ftp://开始的， fopen()函数将建立一个连接到指定服务器的被动模式，并返回一个指向文件开始的指针</p>
</li>
<li><p>如果使用的文件名是以http://开始的fopen()函数将建立一个到指定服务器的HTTP连接，并返回一个指向HTTP响应的指针</p>
</li>
</ul>
<h5 id="4-文件打开错误处理"><a href="#4-文件打开错误处理" class="headerlink" title="4.文件打开错误处理"></a>4.文件打开错误处理</h5><p>文件打开错误，往往是因为用户权限不足，这时候就要抑制php本身的报错，构造让用户感到友好的错误信息</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@ <span class="variable">$fp</span> = fopen(<span class="string">&quot;<span class="subst">$DOCUMENT_ROOT</span>\\..\\orders\\orders.txt&quot;</span>, <span class="string">&#x27;ab&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$fp</span>)&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;&lt;strong&gt;略略略，就不给你看&lt;/p&gt;&lt;/strong&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><h5 id="1-fwrite的参数"><a href="#1-fwrite的参数" class="headerlink" title="1.fwrite的参数"></a>1.fwrite的参数</h5><p>php写文件相对简单，一般使用fwrite()函数，使用案例如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">fwrite(<span class="variable">$fp</span>, <span class="variable">$strings</span>);</span><br></pre></td></tr></table></figure>

<p>这个函数告诉php将<code>$strings</code>的字符串写入<code>$fp</code>指向的文件中。</p>
<p>此外还有一个可选的参数length是最大写入字符数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">fwrite(<span class="variable">$fp</span>, <span class="variable">$strings</span>, strlen(strings));</span><br></pre></td></tr></table></figure>

<p>php内置的strlen()函数可获得字符串长度，这里其实是多此一举的，一般情况写入字符串会一直写到字符串末尾</p>
<h4 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">fclose(<span class="variable">$fp</span>);</span><br></pre></td></tr></table></figure>

<p>如果该文件被成功关闭，函数就会返回一个true值，反之则返回false</p>
<h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><p>读文件这个操作实际上要实现：打开文件，读文件，关闭文件这些流程</p>
<ul>
<li>以只读模式打开文件<code>$fp = fopen(&quot;$DOCUMENT_ROOT/../orders/orders.txt&quot;, &#39;rb&#39;);</code></li>
<li>读取文件内容直到末尾，用<code>while(!feof($fp))</code>，feof函数表示文件末尾，但文件指针指向文件末尾时，它将返回true</li>
<li>每次读取一行数据，可以使用fgets()函数：<code>$order = fgets($fp, 999);</code>fgets()函数将一直读到\n符或结束符EOF；此外fgets()函数的一个变体fgetss()也非常实用，它可以过滤php和html标记，也可以在参数中额外添加其他任何特殊标记</li>
<li>读取整个文件，readfile(),fpassthru(),file()</li>
</ul>
<h4 id="更好的数据存储方式"><a href="#更好的数据存储方式" class="headerlink" title="更好的数据存储方式"></a>更好的数据存储方式</h4><p>相对于普通文件存储数据，更加有效主流的方式是使用数据库管理系统（DBMS),而比较常见的是MySql数据库（RDBMS）,其有以下优点</p>
<ul>
<li>RDBMS提供了比普通文件更快的数据访问</li>
<li>RDBMS可以很容易地查找并检索满足特定条件的数据集合</li>
<li>RDBMS具有内置的处理并发访问的机制</li>
<li>RDBMS可以随机访问数据</li>
<li>RDBMS具有内置的权限系统</li>
</ul>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="数字索引数组"><a href="#数字索引数组" class="headerlink" title="数字索引数组"></a>数字索引数组</h4><h5 id="1-数组初始化"><a href="#1-数组初始化" class="headerlink" title="1.数组初始化"></a>1.数组初始化</h5><p>实际上php的数组和其他变量一样，它并不需要预先初始和声明，第一次使用时就会自动创建，而且数组大小会根据元素多少而动态变化（这和其他编程语言有很大的区别）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$products</span> = <span class="keyword">array</span>(<span class="string">&#x27;Tires&#x27;</span>, <span class="string">&#x27;oil&#x27;</span>, <span class="string">&#x27;Spark&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>array()实际上是语言结构而不是函数</p>
<p>还有php内置的数字数组和字母数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$odds</span> = range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>); <span class="comment">//1~10，间隔为2</span></span><br><span class="line"><span class="variable">$letters</span> = range(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;z&#x27;</span>) <span class="comment">//a~z数组</span></span><br></pre></td></tr></table></figure>



<h5 id="2-访问数组内容"><a href="#2-访问数组内容" class="headerlink" title="2.访问数组内容"></a>2.访问数组内容</h5><p>（1）访问方法</p>
<p>非常经典地采用数字下标的索引法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span>  <span class="string">&quot;<span class="subst">$products</span>[0] <span class="subst">$products</span>[1] <span class="subst">$products</span>[2] <span class="subst">$products</span>[3] &quot;</span></span><br></pre></td></tr></table></figure>

<p>值得注意的是，php的变量和数组一般都要放在双引号外，即便php有很强的字符串解析能力</p>
<p>（2）循环访问</p>
<p>经典访问法：for循环</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">3</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$products</span>[<span class="variable">$i</span>].<span class="string">&quot;&quot;</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>php内置专门访问数组的方法：foreach</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$products</span> <span class="keyword">as</span> <span class="variable">$current</span>)&#123;</span><br><span class="line"></span><br><span class="line">	exho <span class="variable">$current</span>.<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h4><h5 id="1-数组初始化-1"><a href="#1-数组初始化-1" class="headerlink" title="1.数组初始化"></a>1.数组初始化</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$prices</span> = <span class="keyword">array</span>(<span class="string">&#x27;Tires&#x27;</span> =&gt; <span class="number">100</span>, <span class="string">&#x27;oil&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;Spark&#x27;</span> =&gt; <span class="number">4</span>);</span><br></pre></td></tr></table></figure>



<h5 id="2-访问数组元素"><a href="#2-访问数组元素" class="headerlink" title="2.访问数组元素"></a>2.访问数组元素</h5><p>（1）访问的下标，由默认的数字变成对应关联字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$prices</span>[<span class="string">&#x27;Tires&#x27;</span>] <span class="comment">//100</span></span><br></pre></td></tr></table></figure>



<p>（2）循环访问</p>
<p>由于关联数字的索引不是数字，当然是不能使用for循环的计算器来操作，但是我们可以用<code>foreach()</code>或<code>list()</code>或<code>each()</code></p>
<p><strong>foreach方法</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$prices</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$key</span>.<span class="string">&quot; - &quot;</span> .<span class="variable">$value</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$key指代了索引，$value指代了关联值</p>
<p><strong>each方法</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="variable">$element</span> = each(<span class="variable">$prices</span>))&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$element</span>[<span class="string">&#x27;key&#x27;</span>]. <span class="string">&quot;-&quot;</span>.<span class="variable">$element</span>[<span class="string">&#x27;value&#x27;</span>].<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>each函数会返回数组当前元素，并将下一个元素作为当前元素，直到达到数组末尾</p>
<p><strong>list方法</strong></p>
<p>list是比较常用的方法，因为它更容易阅读</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">reset(<span class="variable">$prices</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">list</span>(<span class="variable">$product</span>, <span class="variable">$price</span>) = each(<span class="variable">$prices</span>))&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$product</span> - <span class="subst">$price</span> &lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>reset()将元素设置到数组开始，允许再次遍历数组</li>
<li>each()将$prices数组中提出当前元素作为数组返回，并指向下一个元素</li>
<li>list()将从each()返回的数组变成名为$product，$price的新变量</li>
</ul>
<h4 id="数组操作符"><a href="#数组操作符" class="headerlink" title="数组操作符"></a>数组操作符</h4><p>php特供数组操作，依旧不予整理，直接贴书里的图</p>
<h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><h5 id="1-普通一维数组排序"><a href="#1-普通一维数组排序" class="headerlink" title="1.普通一维数组排序"></a>1.普通一维数组排序</h5><p>（1）按字母升序来排序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$products</span> = <span class="keyword">array</span>(<span class="string">&#x27;Tires&#x27;</span>, <span class="string">&#x27;oil&#x27;</span>, <span class="string">&#x27;Spark&#x27;</span>);</span><br><span class="line">sort(<span class="variable">$products</span>);</span><br></pre></td></tr></table></figure>

<p>值得注意的是，sort()函数的排序区分大小写</p>
<p>（2）按数字升序来排序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$prices</span> = <span class="keyword">array</span>(<span class="number">100</span>, <span class="number">10</span>, <span class="number">4</span>);</span><br><span class="line">sort(<span class="variable">$prices</span>);</span><br></pre></td></tr></table></figure>



<p>（3）指定排序类型</p>
<p>sort()函数还有一个可选参数用于指定排序类型</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">SORT_REGULAR  <span class="comment">//默认</span></span><br><span class="line">SORT_NUMERIC  <span class="comment">//数字类型</span></span><br><span class="line">SORT_STRING   <span class="comment">//字符串类型</span></span><br></pre></td></tr></table></figure>



<h5 id="2-关联数组排序"><a href="#2-关联数组排序" class="headerlink" title="2.关联数组排序"></a>2.关联数组排序</h5><p>（1）按值排序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$prices</span> = <span class="keyword">array</span>(<span class="string">&#x27;Tires&#x27;</span> =&gt; <span class="number">100</span>, <span class="string">&#x27;oil&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;Spark&#x27;</span> =&gt; <span class="number">4</span>);</span><br><span class="line">asort(<span class="variable">$prices</span>);</span><br></pre></td></tr></table></figure>



<p>（2）按关键字排序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$prices</span> = <span class="keyword">array</span>(<span class="string">&#x27;Tires&#x27;</span> =&gt; <span class="number">100</span>, <span class="string">&#x27;oil&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;Spark&#x27;</span> =&gt; <span class="number">4</span>);</span><br><span class="line">ksort(<span class="variable">$prices</span>);</span><br></pre></td></tr></table></figure>



<h5 id="3-反向排序"><a href="#3-反向排序" class="headerlink" title="3.反向排序"></a>3.反向排序</h5><p>在之前提到的函数中加个‘“r”：rsort(), arsort(), krsort()</p>
<h4 id="二维数组排序"><a href="#二维数组排序" class="headerlink" title="二维数组排序"></a>二维数组排序</h4><p>需要自定义一个排序函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="variable">$x</span>, <span class="variable">$y</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$x</span>[<span class="number">1</span>] == <span class="variable">$y</span>[<span class="number">1</span>])&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$x</span>[<span class="number">1</span>] &lt; <span class="variable">$y</span>[<span class="number">1</span>])&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usort(<span class="variable">$products</span>, <span class="string">&#x27;compare&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>索引为1，所以按字母排序</p>
<p>如果要反向排序时，就要交换+1，-1</p>
<h4 id="其他实用的数组函数"><a href="#其他实用的数组函数" class="headerlink" title="其他实用的数组函数"></a>其他实用的数组函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>shuffle()</td>
<td>使一个数组的元素随机排列</td>
</tr>
<tr>
<td>array_reverse()</td>
<td>返回一个顺序相反的数组</td>
</tr>
<tr>
<td>each(),current(),reset(),end(),next(),pos(),prev()</td>
<td>用于浏览数组的函数</td>
</tr>
<tr>
<td>array_walk()</td>
<td>以相同方式使用或修改数组中每一个元素</td>
</tr>
<tr>
<td>count(),sizeof()</td>
<td>统计数组元素的个数</td>
</tr>
<tr>
<td>array_count_values()</td>
<td>统计特定值在数组中出现的频率，返回一个以元素作为关键字，频率作为值得关联数组</td>
</tr>
<tr>
<td>extract()</td>
<td>将数组转换为标量变量，即让key = value</td>
</tr>
</tbody></table>
<h3 id="字符串操作与正则表达式"><a href="#字符串操作与正则表达式" class="headerlink" title="字符串操作与正则表达式"></a>字符串操作与正则表达式</h3><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><p>通常我们会对用户输入的字符串（来自于html的表单）进行整理</p>
<h5 id="1-字符串的整理"><a href="#1-字符串的整理" class="headerlink" title="1.字符串的整理"></a>1.字符串的整理</h5><p>实现目标：清理字符串多余的空格</p>
<p>实现方法：</p>
<p>（1）trim()函数去除字符串开始位置和结束位置空格，并返回结果字符串，默认去除字符\n, \r, \t,  \0, 和空格</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span> = trim(<span class="variable">$_post</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br></pre></td></tr></table></figure>



<p>（2）ltrim(), rtrim()函数类似于trim()函数，但是ltrim()只处理字符串左边，rtrim()函数只处理字符串右边</p>
<h5 id="2-格式化字符串以便显示"><a href="#2-格式化字符串以便显示" class="headerlink" title="2.格式化字符串以便显示"></a>2.格式化字符串以便显示</h5><p>（1）使用HTML格式化：n12br()函数</p>
<p>n12br()函数用<code>&lt;br/&gt;</code>标签代替字符串中的换行符，这对于一个长字符串在浏览器显示十分有用</p>
<p>html忽略空行，如果不使用n12br()，文本将成行显示</p>
<p>（2）为打印输出而格式化字符</p>
<p>php支持echo 和 print结构 打印字符串，print结构有返回值。除此之外php还有与C语言类似的打印函数printf() 和 sprintf(),实现一些更加复杂的格式</p>
<p>基本用法与C语言类似</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">printf(<span class="string">&quot;order is %s.&quot;</span>, <span class="variable">$total</span>);</span><br></pre></td></tr></table></figure>

<p> 和C语言一样，printf()函数还有一些实用的参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">%[<span class="string">&#x27;padding-character&#x27;</span>][-][width][.precision]type</span><br></pre></td></tr></table></figure>

<ul>
<li>“padding-character”,用于填充变量直到所指定的宽度，默认为空格</li>
<li>“-“用于指明该域的数据为左对齐</li>
<li>“width”，为被替换的变量留下多少字符空间</li>
<li>“.precision”指明小数点显示的位数</li>
</ul>
<p><strong>转换说明类型码</strong></p>
<h5 id="3-改变字符串的字母大小写"><a href="#3-改变字符串的字母大小写" class="headerlink" title="3.改变字符串的字母大小写"></a>3.改变字符串的字母大小写</h5><p>实际上应用的场合并不多</p>
<p>字符串大小写转换函数</p>
<h5 id="4-格式化字符串以便存储"><a href="#4-格式化字符串以便存储" class="headerlink" title="4.格式化字符串以便存储"></a>4.格式化字符串以便存储</h5><p>格式化字符，除了用于打印到html页面，还可以应用于存储到数据库。</p>
<p>（1）问题的出现</p>
<p>在数据库中，某些数据的引号字符，反斜杠和NULL字符会被解释为控制符，因此我们需要找到一种标记或转义它们的方法，以便数据库可以理解它们的意思</p>
<p>（2）解决问题的原理</p>
<p>要对这些字符进行转义处理，只需要在它们面前加一个反斜杠</p>
<p>（3）php的解决方法</p>
<p>php专门提供了两个用于转义字符串的函数，在将任何字符串存入数据库之前可以使用addslashes()将它们格式化（实际上就是为这些特殊字符加上反斜杠），而Stripslashes()会移除这些反斜杠</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$feedback</span> = addslashes(trim(<span class="variable">$_POST</span>[<span class="string">&#x27;feedback&#x27;</span>]));</span><br></pre></td></tr></table></figure>



<h4 id="连接分割字符串"><a href="#连接分割字符串" class="headerlink" title="连接分割字符串"></a>连接分割字符串</h4><p>通常我们想查看字符串的各个部分。例如，查看句子中的英文单词，或者将一个域名或电子邮件地址分割成一个个部分，这时候就要用到几个字符串函数或者正则表达式函数来实现</p>
<h5 id="1-一些常用连接字符串函数"><a href="#1-一些常用连接字符串函数" class="headerlink" title="1.一些常用连接字符串函数"></a>1.一些常用连接字符串函数</h5><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>explode()</td>
<td>指定分隔字符将字符串本身分割成小块，并返回到一个数组中</td>
<td><code>$email_array = explode(&#39;@&#39;, $email);</code></td>
</tr>
<tr>
<td>impldoe(),join()</td>
<td>功能和函数explode()相反，用字符将数组里的元素连接起来</td>
<td><code>$new_email = implode(&#39;@&#39;, $email_array);</code></td>
</tr>
<tr>
<td>strtok()</td>
<td>将字符串分割成子字符串，可规定多个分割字符</td>
<td><code>$token = strtok($string, &quot; &quot;);</code></td>
</tr>
<tr>
<td>substr()</td>
<td>访问一个字符串给定起点和终点的子字符串，注意第一个字符从0开始</td>
<td><code>substr($test, 5, -13);</code></td>
</tr>
</tbody></table>
<h4 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h4><p>php可以直接使用“==”来比较两个字符是否相等，但有些时候我们还需要更加复杂的比较</p>
<h5 id="1-常用的比较字符串函数"><a href="#1-常用的比较字符串函数" class="headerlink" title="1.常用的比较字符串函数"></a>1.常用的比较字符串函数</h5><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>strcmp()</td>
<td>对两个字符串进行比较，相等则返回0，按字典顺序大于则返回正数，小于则返回负数，区分大小写</td>
<td>无</td>
</tr>
<tr>
<td>strcasecmp()</td>
<td>功能与strcmp()基本一致，但是区分大小写</td>
<td>无</td>
</tr>
<tr>
<td>strnatcmp()</td>
<td>不是按照字典顺序来比较而是按自然顺序来比较</td>
<td>无</td>
</tr>
<tr>
<td>strlen()</td>
<td>检查字符串长度</td>
<td>echo strlen(“hello”);</td>
</tr>
</tbody></table>
<h4 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h4><p>很多情况下我们需要在字符串中提取子字符串关键字，这里我们就需要用一些特定的字符串函数对一个字符串进行搜索</p>
<h5 id="1-常用字符串匹配函数"><a href="#1-常用字符串匹配函数" class="headerlink" title="1.常用字符串匹配函数"></a>1.常用字符串匹配函数</h5><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>strstr()</td>
<td>在字符串中查找匹配的字符串或字符，并返回一个子字符串，如果出现不止一个目标关键字，则从第一个出现的开始返回</td>
<td><code>strstr($feedback, &#39;shop&#39;)</code></td>
</tr>
<tr>
<td>stropos()</td>
<td>在字符串中查找匹配的字符串或字符,默认返回第一个子字符串出现的位置，也可以指定查询位置</td>
<td><code>echo strpos($test, &quot;o&quot;, 5);</code></td>
</tr>
<tr>
<td>strrpos()</td>
<td>在字符串中查找匹配的字符串或字符,并返回最后子字符串出现的位置</td>
<td>无</td>
</tr>
<tr>
<td>str_replace()</td>
<td>可以通过数组的方式来传递所有参数，可以很好地完成字符串的替换</td>
<td><code>$feedback = str_replace($offcolor, &quot;%!@*&quot;, $feedback);</code>//$offcolor数组是屏蔽关键词，“”内的是屏蔽用语，$feedback是屏蔽的字符串对象</td>
</tr>
<tr>
<td>substr_replace()</td>
<td>在给定位置中查找和替换特定的子字符串,length表示php停止操作的位置</td>
<td><code>$test = substr_replace($test, &#39;X&#39;, -1);</code></td>
</tr>
</tbody></table>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>之前我们所使用的字符串函数只适用于精确匹配，如果希望完成一些更复杂的匹配模式，我们需要用到正则表达式来取代之前函数提到的功能，比如如果有多个匹配关键词，要使用多个字符串函数，而正则表达式可以一步到位</p>
<h5 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h5><p>正则表达式是一种描述一段文本模式的方法，匹配正则表达式更有点像 strstr（）匹配，而不像相等比较：例如，字符串“shop”匹配正则表达式“shop”。它也可以匹配正则表达式“h”，“ho”等。此外还可以指定表达式的元意。</p>
<h5 id="2-字符集和类"><a href="#2-字符集和类" class="headerlink" title="2.字符集和类"></a>2.字符集和类</h5><p>字符集可以用于匹配属特定类型的任何字符;事实上它们是一种通配符。</p>
<p>（1）我们可以用字符作为一个通配符来代替除换行符（\n）之外的任一个字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">.at <span class="comment">//可以匹配到cat，mat，#at</span></span><br><span class="line">[a-z]at <span class="comment">//限定了字符一定是字母，故无法匹配到#at   </span></span><br><span class="line">[aeiou]at <span class="comment">//限定前面只能是元音字母</span></span><br><span class="line">[a-zA-Z]at <span class="comment">//限定只允许大小写字母</span></span><br><span class="line">[^a-z]at   <span class="comment">//匹配任何字母以外的字符    </span></span><br></pre></td></tr></table></figure>

<p>任何一个方括号[]内的内容都是一个字符类—— 一个被匹配字符所属的字符集合，方括号表达式只匹配一个字符</p>
<p>（2）其他常用字符集</p>
<h5 id="3-重复"><a href="#3-重复" class="headerlink" title="3.重复"></a>3.重复</h5><p>当我们想指定某个字符串或字符类出现不止一次，可以用*表示重复了0-n次，用+表示重复了1-n次。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[[:alnum:]]+  <span class="comment">//表示至少有一个字母字符</span></span><br></pre></td></tr></table></figure>



<h5 id="4-子表达式"><a href="#4-子表达式" class="headerlink" title="4.子表达式"></a>4.子表达式</h5><p>通常，我们往往会将一个表达式分隔为几个表达式，用以表示至少这些字符串中有一个需要精准匹配。可以使用圆括号来表示</p>
<p>（1）一般形式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(very)*large <span class="comment">//可以匹配到large, very large, very very large</span></span><br></pre></td></tr></table></figure>

<p>（2）子表达式计数</p>
<p>可以用花括号的表达式指定内容允许重复的次数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(very)&#123;<span class="number">1</span>,<span class="number">3</span>&#125; <span class="comment">//允许重复1-3次</span></span><br><span class="line">(very)&#123;<span class="number">3</span>&#125;   <span class="comment">//重复三次</span></span><br><span class="line">(very)&#123;<span class="number">2</span>,&#125;  <span class="comment">//至少重复2次</span></span><br></pre></td></tr></table></figure>



<h5 id="5-定位字符串的开始或末尾"><a href="#5-定位字符串的开始或末尾" class="headerlink" title="5.定位字符串的开始或末尾"></a>5.定位字符串的开始或末尾</h5><p>脱字符号、（^）用于正则表达式的开始，表示子字符串必须出现在被搜索字符串的开始处，字符“s”用于正则表达式的末尾，表示子字符串必须出现在字符串的末尾</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">^bob  <span class="comment">//从字符串开始处匹配bob</span></span><br><span class="line">com$  <span class="comment">//匹配com出现在末尾的字符串</span></span><br><span class="line">^[a-z]$  <span class="comment">//匹配只包含a-z之间一个字符的字符串</span></span><br></pre></td></tr></table></figure>



<h5 id="6-分支"><a href="#6-分支" class="headerlink" title="6.分支"></a>6.分支</h5><p>正则表达式用一条竖线表示多种选择</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">com|edu|net <span class="comment">//表示匹配com或edu或net </span></span><br></pre></td></tr></table></figure>



<h5 id="7-匹配特殊字符"><a href="#7-匹配特殊字符" class="headerlink" title="7.匹配特殊字符"></a>7.匹配特殊字符</h5><p>（1）要匹配特殊字符需要对它们进行转义，即在它们前面加一个反斜杠（\）。</p>
<p>（2）php中应将正则表达式放在一个单引号字符串中，使用双引号会带来一些不必要的复杂性</p>
<h5 id="8-正则表达式特殊字符"><a href="#8-正则表达式特殊字符" class="headerlink" title="8.正则表达式特殊字符"></a>8.正则表达式特殊字符</h5><h5 id="9-使用正则表达式的php函数"><a href="#9-使用正则表达式的php函数" class="headerlink" title="9.使用正则表达式的php函数"></a>9.使用正则表达式的php函数</h5><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>ereg()</td>
<td>该函数搜索字符串 search，在 pattern中寻找与正则表达式相匹配的字符串，并将它们存储在数组 matches中</td>
<td><code>ereg(&#39;^[a-zA-z0-9_\-\.]+$&#39;,$email)</code></td>
</tr>
<tr>
<td>ereg_replace()</td>
<td>该函数在字符串 search中查找正则表达式 pattern的字符串，并且用字符串 replacement来替换</td>
<td><code>ereg_ replace(string pattern, string replacement, string search);</code></td>
</tr>
<tr>
<td>split()</td>
<td>该函数将字符search分割成符合正则表达式模式的子字符串,然后将子字符串返回到数组中</td>
<td>`$arr = split(‘.</td>
</tr>
</tbody></table>
<h3 id="代码重用与函数编写"><a href="#代码重用与函数编写" class="headerlink" title="代码重用与函数编写"></a>代码重用与函数编写</h3><h4 id="代码复用的好处"><a href="#代码复用的好处" class="headerlink" title="代码复用的好处"></a>代码复用的好处</h4><p><del>代码复用主要是程序员用于摸鱼偷懒（bushi）</del>，软件工程师的一个目标就是重复使用代码来避免编写新的代码，一个新的项目往往是这样创建的：将已有的可重新利用的组件进行组合，并将新的开发难度降低到最小。</p>
<p>主要优点如下：</p>
<ul>
<li>降低成本</li>
<li>更加可靠</li>
<li>保持一致</li>
</ul>
<h4 id="引用函数库"><a href="#引用函数库" class="headerlink" title="引用函数库"></a>引用函数库</h4><p>PHP有两个非常重要的语句，require()或include()语句可以将一个文件载入PHP脚本中，通常这个文件包含任何希望在一个脚本中输出的内容（PHP语句，文本，html标记，PHP函数或PHP类），实际上，它们的功能类似于C语言的#include语句</p>
<h5 id="1-文件拓展名和require-函数"><a href="#1-文件拓展名和require-函数" class="headerlink" title="1.文件拓展名和require()函数"></a>1.文件拓展名和require()函数</h5><p>require()可以载入文件，即将请求的文件替代内容后，继续执行脚本。我们约定载入文件的拓展名命名为“php”。在实际运用中，如果web页面具有一致的外观，可以在php中使用require()语句将模板加入页面。</p>
<h4 id="PHP中使用函数"><a href="#PHP中使用函数" class="headerlink" title="PHP中使用函数"></a>PHP中使用函数</h4><p>函数说一个给出了调用接口的自包含模板，它可以执行任务，还可以返回结果</p>
<h5 id="1-函数调用"><a href="#1-函数调用" class="headerlink" title="1.函数调用"></a>1.函数调用</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">phpinfo(); <span class="comment">//无参数，输出php版本</span></span><br><span class="line">function_name(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">function_name(<span class="string">&#x27;$num&#x27;</span>); <span class="comment">//有参数,参数的填写应注意函数原型</span></span><br></pre></td></tr></table></figure>

<p>一个具有多个可选值的函数，要按照从右到左顺序使用默认值</p>
<p>变量名区分大小写，函数名不区分大小写</p>
<h5 id="2-函数声明"><a href="#2-函数声明" class="headerlink" title="2.函数声明"></a>2.函数声明</h5><p>函数声明以关键字function开始，然后给出函数名称和必要的参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>内置函数在所有php脚本都可以用，但是如果声明了自己的函数，就只能在声明了它们的脚本使用。将经常用到的函数包含在一个文件中是一个很好的解决方案，然后再使用require()引用。</p>
<p>如果希望在一个函数退出php并输入html脚本，可以使用一个封闭的php标记再编写html脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_function</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">	my <span class="function"><span class="keyword">function</span> <span class="title">was</span> <span class="title">called</span></span></span><br><span class="line"><span class="function">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="function">	</span></span><br><span class="line">    $name;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可变函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span>(); <span class="comment">//以name变量的值作为函数名称</span></span><br></pre></td></tr></table></figure>



<h5 id="3-函数作用域"><a href="#3-函数作用域" class="headerlink" title="3.函数作用域"></a>3.函数作用域</h5><ul>
<li>函数内部声明的变量只能再在该函数内用，这是函数作用域或者说是局部变量</li>
<li>在函数外部声明的变量作用在从该语句开始的整个文档，这是全局作用域</li>
<li>require()和include()不影响作用域</li>
</ul>
<h4 id="使用参数"><a href="#使用参数" class="headerlink" title="使用参数"></a>使用参数</h4><h5 id="1-参数设置"><a href="#1-参数设置" class="headerlink" title="1.参数设置"></a>1.参数设置</h5><p>函数中可以设置参数默认值，变成可选项</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_table2</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$border</span>=<span class="number">1</span>; <span class="variable">$cellpadding</span>=<span class="number">4</span></span>)</span>&#123;</span><br><span class="line">	…</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">create_table2(<span class="variable">$my_array</span>);</span><br></pre></td></tr></table></figure>



<h5 id="2-参数帮助器"><a href="#2-参数帮助器" class="headerlink" title="2.参数帮助器"></a>2.参数帮助器</h5><p><code>func_num_arg()</code> ：返回参数的个数</p>
<p><code>func_get_args()</code> :返回参数组成的数组</p>
<h5 id="3-参数的引用传递和值传递"><a href="#3-参数的引用传递和值传递" class="headerlink" title="3.参数的引用传递和值传递"></a>3.参数的引用传递和值传递</h5><p>一般来说，函数参数的传递是值传递，当传递一个参数时，函数内会新建一个变量来存储原来变量的副本，无论怎么修改也不会影响原来的变量</p>
<p>所以我们可以使用引用传递（类似于C语言的指针），这时函数不会创建一个新的变量，而是获得了一个原来变量的引用指向原来的值，任何对该引用的修改都会影响原始变量值。</p>
<p>在参数面前加一个地址符’&amp;’，指定该参数为引用传递</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params">&amp;<span class="variable">$value</span>, <span class="variable">$amount</span> = <span class="number">1</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="variable">$value</span> = <span class="variable">$value</span> + <span class="variable">$amount</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Return关键字的运用"><a href="#Return关键字的运用" class="headerlink" title="Return关键字的运用"></a>Return关键字的运用</h4><h5 id="1-终止函数的执行"><a href="#1-终止函数的执行" class="headerlink" title="1.终止函数的执行"></a>1.终止函数的执行</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">larger</span>(<span class="params"><span class="variable">$x</span>, <span class="variable">$y</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>((!<span class="keyword">isset</span>(<span class="variable">$x</span>)) || (!<span class="keyword">isset</span>(<span class="variable">$y</span>)))&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$x</span>&gt;=<span class="variable">$y</span>)&#123;	</span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$x</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;			</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$y</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>isset语句可以判断一个变量是否被创建并赋值，如果没有则报错，并return结束函数执行</p>
<h5 id="2-从函数返回一个值"><a href="#2-从函数返回一个值" class="headerlink" title="2.从函数返回一个值"></a>2.从函数返回一个值</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">larger</span>(<span class="params"><span class="variable">$x</span>, <span class="variable">$y</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>((!<span class="keyword">isset</span>(<span class="variable">$x</span>)) || (!<span class="keyword">isset</span>(<span class="variable">$y</span>)))&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$x</span>&gt;=<span class="variable">$y</span>)&#123;	</span><br><span class="line">		 <span class="keyword">return</span> <span class="variable">$x</span>;			</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">		 <span class="keyword">return</span> <span class="variable">$y</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h4><p>递归 函数就是自己调用自己，适用于浏览动态数据结构（连接列表和树）,而且比循环慢也占用更多的内存，所以基本很少用（虽然递归的代码更简短，美观）</p>
<h3 id="PHP的面向对象"><a href="#PHP的面向对象" class="headerlink" title="PHP的面向对象"></a>PHP的面向对象</h3><h4 id="PHP创建类，属性和操作"><a href="#PHP创建类，属性和操作" class="headerlink" title="PHP创建类，属性和操作"></a>PHP创建类，属性和操作</h4><h5 id="1-类的结构"><a href="#1-类的结构" class="headerlink" title="1.类的结构"></a>1.类的结构</h5><p>我们用<code>class</code>声明类，声明属性变量时要用public, private, protected这些关键字，这与变量的作用域有关。声明类的操作则用声明函数的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2.构造函数"></a>2.构造函数</h5><p>大多数类都有一种称为构造函数的特殊操作。其作用为当创建一个对象时会自动调用构造函数，所以常常用于设置属性的初始值或创建该对象的其他对象</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">classname</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$param</span></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;hello&#x27;</span>.<span class="variable">$param</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造函数的函数名一定为<code>__construct</code></p>
<h5 id="3-析构函数"><a href="#3-析构函数" class="headerlink" title="3.析构函数"></a>3.析构函数</h5><p>与构造函数相对，其作用是在销毁一个类时执行的操作或完成的一些功能。析构函数的函数名称为<code>__destruct()</code>不能带任何参数</p>
<h4 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h4><p>创建一个对象即实例化了一个类。可以使用”new“来创建一个类，需要指定创建的对象属于哪一个类，并通过构造函数提供所需的参数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">classname</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$param</span></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;hello&#x27;</span>.<span class="variable">$param</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> classname(<span class="string">&quot;first&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> classname(<span class="string">&quot;second&quot;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="使用类的属性"><a href="#使用类的属性" class="headerlink" title="使用类的属性"></a>使用类的属性</h3><h5 id="1-内部访问类"><a href="#1-内部访问类" class="headerlink" title="1.内部访问类"></a>1.内部访问类</h5><p>如果一个类的操作需要设置或访问该类的某个变量，我们可以用一个特殊的指针——$this 来实现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">classname</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$attribute</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">operation</span>(<span class="params"><span class="variable">$param</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">$this</span>-&gt;attribute = <span class="variable">$param</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;attribute;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-外部访问类"><a href="#2-外部访问类" class="headerlink" title="2.外部访问类"></a>2.外部访问类</h5><p>（1）直接访问</p>
<p>通过访问修饰符直接范围属性</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> student();</span><br><span class="line"><span class="variable">$a</span>-&gt;name = <span class="string">&quot;hao&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>-&gt;name;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但通常来说，从类的外部直接访问类的属性是糟糕的想法</p>
<p>（2）推荐方案</p>
<p>我们可以通过<code>__get()</code>和<code>__set()</code>来实现对属性的访问，其案例如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$att</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;<span class="variable">$name</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">    	</span><br><span class="line">        <span class="keyword">$this</span>-&gt;<span class="variable">$name</span> = <span class="variable">$value</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> student();</span><br><span class="line"><span class="variable">$a</span>-&gt;att = <span class="number">5</span>;    <span class="comment">//间接调用了__set()函数将name的参数值设为att，并将$value的值设为5</span></span><br></pre></td></tr></table></figure>

<p>之所以这样设置一个访问入口，就是要实现对保存的数据进行检查，确保数据是有意义的，可以修改一下<code>__set()</code>函数的条件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>((<span class="variable">$name</span> = <span class="string">&quot;att&quot;</span>) &amp;&amp; (<span class="variable">$value</span> &gt;= <span class="number">0</span>))</span><br><span class="line">    	<span class="keyword">$this</span>-&gt;<span class="variable">$name</span> = <span class="variable">$value</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="控制访问"><a href="#控制访问" class="headerlink" title="控制访问"></a>控制访问</h4><p>访问修饰符用于控制属性和方法的可见性</p>
<ul>
<li>默认选项是public()，公有的属性或方法可以在类的内部和外部进行访问</li>
<li>private访问修饰符意味着被标记的属性或方法只能在类的内部进行访问，也可以选择使得部分方法成为私有的,例如,如果某些方法只是在类内部使用的工具性函数。私有的属性和方法将不会被继承</li>
<li>protected访问修饰符意味着被标记的属性或方法只能在类内部进行访问。它也存在于任何子类</li>
</ul>
<h4 id="类操作的调用"><a href="#类操作的调用" class="headerlink" title="类操作的调用"></a>类操作的调用</h4><p>与属性的调用类似</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">classname</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">oper1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">oper2</span>(<span class="params"><span class="variable">$param1</span>, <span class="variable">$param2</span></span>)</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> classname();</span><br><span class="line"><span class="variable">$a</span>-&gt;oper1();</span><br><span class="line"><span class="variable">$a</span>-&gt;oper2(<span class="number">12</span>, <span class="string">&quot;test&quot;</span>);  <span class="comment">//先指定对象才能调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$a</span>-&gt;oper1();</span><br><span class="line"><span class="variable">$y</span> = <span class="variable">$a</span>-&gt;oper2(<span class="number">12</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//捕获返回值</span></span><br></pre></td></tr></table></figure>



<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="1-继承基本操作"><a href="#1-继承基本操作" class="headerlink" title="1.继承基本操作"></a>1.继承基本操作</h5><p>我们用<code>extends</code>来表明继承关系。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$attribute2</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">operation2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$attribute1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">operation1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>B类具有A类所有的属性和操作,另外还有自己的一个属性和一个操作。注意继承是单向的！</p>
<h5 id="2-选择性继承"><a href="#2-选择性继承" class="headerlink" title="2.选择性继承"></a>2.选择性继承</h5><p>我们可以使用private和protected访问修饰符控制需要继承的内容。</p>
<p>private：外部不可见，且不能继承</p>
<p>protected：外部不可见，但是可以继承</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">operational</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">operationa2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operationa3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">$this</span>-&gt;operation1();  <span class="comment">//该操作为A类私有，无法调用，会报错</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;operation2();  <span class="comment">//只允许内部调用该操作		</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;operation3();	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-重载"><a href="#3-重载" class="headerlink" title="3.重载"></a>3.重载</h5><p>子类中可以声明新的属性和操作，我们也可以重复声明父类中有的属性和操作。一般用于子类属性赋予一个与父类不同的默认值，或修改父类中的操作。这种操作叫重载。</p>
<p>子类重载的属性和操作不会影响到父类</p>
<p>重载后，我们仍然可以用<code>parent</code>关键字调用父类操作的初始版本，但是使用的是当前类的属性值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parent</span>::operation();</span><br></pre></td></tr></table></figure>



<h5 id="4-禁止继承和重载"><a href="#4-禁止继承和重载" class="headerlink" title="4.禁止继承和重载"></a>4.禁止继承和重载</h5><p>我们可以使用<code>final</code>禁止一个类中的某个操作或属性的重载，也可以直接禁止一个类的重载</p>
<h5 id="5-多重继承"><a href="#5-多重继承" class="headerlink" title="5.多重继承"></a>5.多重继承</h5><p>大多数的面向对象语言都不支持多重继承，php也一样（C++是支持多重继承的典型）。不支持多重继承即每一个类只能继承一个父类，一个只能有一个爸爸，一个爸爸却能有多个儿子</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>后端</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|django-rest-framework入门</title>
    <url>/2020/04/13/Python-django-rest-framework/</url>
    <content><![CDATA[<p>官方快速入门教程有坑，一直找不到关于django rest framework好的书籍和好的博文，本文都是基于网上收集整理的资料</p>
<span id="more"></span>

<h4 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h4><p>Django REST framework（以下简称 DRF）是一个开源的 Django 扩展，提供了便捷的 REST API 开发框架，是实现前后端分离的典型案例。所谓前后端分类，即前端负责页面展示和与用户的交互，后端则负责API接口</p>
<h5 id="1-功能介绍"><a href="#1-功能介绍" class="headerlink" title="1.功能介绍"></a>1.功能介绍</h5><ul>
<li>支持 OAuth 认证</li>
<li>支持对 ORM 和非 ORM 数据源的序列化</li>
<li>丰富的定制层级：函数视图、类视图、视图集合</li>
<li>内置Mixins，可以用于快速组装</li>
</ul>
<h5 id="2-特性"><a href="#2-特性" class="headerlink" title="2.特性"></a>2.特性</h5><ul>
<li>直观的 API web 界面。</li>
<li>多种身份认证和权限认证方式的支持。</li>
<li>内置了 OAuth1 和 OAuth2 的支持。</li>
<li>内置了限流系统。</li>
<li>根据 Django ORM 或者其它库自动序列化。</li>
<li>丰富的定制层级：函数视图、类视图、视图集合到自动生成 API，满足各种需要。</li>
<li>可扩展性，插件丰富。</li>
<li>广泛使用，文档丰富。</li>
</ul>
<h4 id="RESTful-架构"><a href="#RESTful-架构" class="headerlink" title="RESTful 架构"></a>RESTful 架构</h4><p>RESTful架构，就是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用</p>
<p>那什么是RESTful架构呢？</p>
<p>　　（1）<strong>每一个URI代表一种资源；</strong>简单理解就是url指向网络上的一个信息如文本，图片，音频等，要获取这个资源只需访问这个url即可</p>
<p>　　（2）<strong>客户端和服务器之间，传递这种资源的某种表现层；</strong>所谓表现层即指把“资源”呈现出来的的形式，如文本（资源）可以用txt格式，html格式，json格式（表现层）来呈现。访问一个网站，客户端和服务端会传递这种表现层，以实现下一个步骤：状态转化</p>
<p>　　（3）<strong>客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</strong>因为http协议是无状态协议，所有状态都保存在服务端，客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</p>
<p>参考文章：<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></p>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="1-Serializer序列化"><a href="#1-Serializer序列化" class="headerlink" title="1.Serializer序列化"></a>1.Serializer序列化</h5><p>序列化器用于处理前端发来的json数据,因为前端发送给后端的是json数据,但是后端要向数据库存储数据,json数据是不被允许的.反序列化则反过来理解。</p>
<p>简单来说就是通过映射，把数据结构转换符合前端/后端的数据，就是充当一个翻译官的作用</p>
<p>（1）序列化</p>
<p>模板：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line">data = serializers.serialize(<span class="string">&quot;xml&quot;</span>, SomeModel.objects.<span class="built_in">all</span>())</span><br></pre></td></tr></table></figure>

<p>从djang.core导入它，然后调用它的serialize方法。</p>
<p>这个方法至少接收两个参数，第一个是你要序列化成为的数据格式，这里是‘xml’，第二个是要序列化的数据对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YourSerializer</span>(<span class="params">Serializer</span>):</span></span><br><span class="line">    field1 = Field()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        <span class="comment"># save your data here</span></span><br><span class="line">        <span class="keyword">return</span> saved_data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        <span class="comment"># update your instance</span></span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure>

<p>序列化之后的数据保存在 <code>serializer.data</code> 中的，可以使用 <code>SomeRenderer().render(serializer.data)</code> 将其序列化为字符串对象作为 Response body 返回。</p>
<p>（2）反序列化</p>
<p>模板：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = SomeParser().parse(incoming_stream)</span><br><span class="line">serializer = YourSerializer(data=data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> serializer.is_valid():     <span class="comment"># 这里会根据 Serialzier 的 Field 和自定义验证工具进行数据校验</span></span><br><span class="line">    logging.info(serializer. validated_data)</span><br><span class="line">    serializer.update()        <span class="comment"># 或者 serializer.create()</span></span><br></pre></td></tr></table></figure>

<p>对于自定义 Serializer，你需要自己实现 <code>create</code> 和 <code>update</code> 方法。</p>
<p>你也可以使用 <code>serializer.save(**data)</code>，<code>save</code> 方法的行为取决于初始化的方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .save() 会创建一个新实例</span></span><br><span class="line">serializer = CommentSerializer(data=data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># .save() 会更新 `comment` 实例</span></span><br><span class="line">serializer = CommentSerializer(comment, data=data)</span><br></pre></td></tr></table></figure>

<p>反序列化时应该先运行 <code>serializer.is_valid()</code> 判断数据是否合法，<code>serializer.is_valid(raise_exception=True)</code> 会直接返回 400 信息。</p>
<h5 id="2-ViewSet视图"><a href="#2-ViewSet视图" class="headerlink" title="2.ViewSet视图"></a>2.ViewSet视图</h5><p>DRF 通过 View 提供 API 接口，一个 View 可以对应多个 Renderer，针对不同的渲染条件提供不同的输出格式（HTML／XML／JSON）</p>
<p>ViewSet 则是 View 的一个封装，一个 ViewSet 可以为同一个 URL 根据请求方法提供不同的接口。尤其是 ModelViewSet 会自动根据 Model 的定义生成 REST 接口和 URL，能够快速生成网站的一整套 API。</p>
<p>定义一个 ViewSet 需要为其声明 <code>queryset</code> 和 <code>serializer</code> 属性</p>
<p>模板：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    API endpoint that allows users to be viewed or edited.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;-date_joined&#x27;</span>)</span><br><span class="line">    serializer_class = UserSerializer</span><br></pre></td></tr></table></figure>



<p>Meta 继承：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountSerializer</span>(<span class="params">MyBaseSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>(<span class="params">MyBaseSerializer.Meta</span>):</span></span><br><span class="line">        model = Account</span><br></pre></td></tr></table></figure>



<h5 id="3-Request对象"><a href="#3-Request对象" class="headerlink" title="3.Request对象"></a>3.Request对象</h5><p>DRF使用Requests对象扩展了原生的HttpRequest，并提供了更灵活的请求处理。Requests对象的核心属性就是request.data，可以处理任意数据，接受POST、PUT和PATCH方法。</p>
<h4 id="DRF处理流程"><a href="#DRF处理流程" class="headerlink" title="DRF处理流程"></a>DRF处理流程</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041025355.png" alt="img"></p>
<h4 id="实战应用"><a href="#实战应用" class="headerlink" title="实战应用"></a>实战应用</h4><p>DRF的使用主要分为三步：定义资源 - 实现HTTP方法 - 配置URL</p>
<h5 id="1-安装配置"><a href="#1-安装配置" class="headerlink" title="1.安装配置"></a>1.安装配置</h5><p>确保自己的虚拟环境安装好了djangorestframework</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure>

<p>在项目的setting中编写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;demo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>, <span class="comment">#添加djangorestframework框架</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="2-序列化"><a href="#2-序列化" class="headerlink" title="2.序列化"></a>2.序列化</h5><p>（1）定义模型资源</p>
<p>在app中的models.py，定义模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(<span class="string">u&#x27;名称&#x27;</span>, default=<span class="string">&quot;&quot;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    price = models.FloatField(<span class="string">u&quot;单价&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>（2）实现序列化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers  <span class="comment">#在框架中导入</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Fruit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span>             <span class="comment">#模型的元数据</span></span><br><span class="line">        model = Fruit       <span class="comment">#选中模型</span></span><br><span class="line">        fields = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;price&#x27;</span>)  <span class="comment">#选择转换的字段</span></span><br></pre></td></tr></table></figure>

<ul>
<li>模型的元数据，指的是“除了字段外的所有内容”，例如排序方式、数据库表名、人类可读的单数或者复数名，<strong>每个模型都可以有自己的元数据类，每个元数据类也只对自己所在模型起作用。</strong></li>
<li>fields属性设置成’<strong>all</strong>‘来表明使用模型中的所有字段。</li>
<li><code>HyperlinkedModelSerializer</code>类类似于<code>ModelSerializer</code>类，不同之处在于它使用超链接来表示关联关系而不是主键。</li>
</ul>
<p>（3）ModelSerializer，HyperlinkedModelSerializer与Serializer</p>
<p>`</p>
<p>ModelSerializer<code>类能够让你自动创建一个具有模型中相应字段的</code>Serializer`类。</p>
<p><strong>这个<code>ModelSerializer</code>类和常规的<code>Serializer</code>类一样，不同的是</strong>：</p>
<ul>
<li>它根据模型自动生成一组字段。</li>
<li>它自动生成序列化器的验证器，比如unique_together验证器。</li>
<li>它默认简单实现了<code>.create()</code>方法和<code>.update()</code>方法。</li>
</ul>
<p><code>HyperlinkedModelSerializer</code>基本与<code>ModelSerializer</code>一样，不同之处：</p>
<ul>
<li>ModelSerializer，所有的模型的字段都将映射到序列化器上相应的字段即主键</li>
<li>HyperlinkedModelSerializer，序列化器将包含一个url字段而不是主键字段。</li>
</ul>
<h5 id="3-写ViewSet视图"><a href="#3-写ViewSet视图" class="headerlink" title="3.写ViewSet视图"></a>3.写ViewSet视图</h5><p>在views.py中编写，用提供默认行为的现有基类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet  <span class="comment">#引入默认视图集</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Fruit</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> FruitSerializer           <span class="comment">#引入序列化文件</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用于查看和编辑用户实例的视图集。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitViewSet</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    queryset = Fruit.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = FruitSerializer</span><br></pre></td></tr></table></figure>

<p>FruitViewSet直接继承ModelViewSet，ModelViewSet继承了一系列Mixins类的HTTP方法。如果需要自定义HTTP方法，可以继承APIView类，或者Mixins类，还可以完全自定义</p>
<h5 id="4-配置URL"><a href="#4-配置URL" class="headerlink" title="4.配置URL"></a>4.配置URL</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers   <span class="comment">#引入自动URL路由模板</span></span><br><span class="line"><span class="keyword">from</span> demo.views <span class="keyword">import</span> FruitViewSet</span><br><span class="line"></span><br><span class="line">router = routers.DefaultRouter()  <span class="comment">#API 向导</span></span><br><span class="line">router.register(<span class="string">r&#x27;fruit&#x27;</span>, FruitViewSet)  <span class="comment">#指定路由，处理请求的类</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;api/v1/&#x27;</span>, include(router.urls)),  <span class="comment">#确定url</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li></li>
<li>register()方法有两个强制参数：（1）<code>prefix</code> - 用于此组路由的URL前缀 （2）<code>viewset</code> - 处理请求的viewset类</li>
<li>DefaultRouter路由器包括标准集合<code>list</code>, <code>create</code>, <code>retrieve</code>, <code>update</code>, <code>partial_update</code> 和 <code>destroy</code>动作的路由，还包括一个默认返回所有列表视图的超链接的API根视图</li>
<li>django的url有path和url两种方法</li>
</ul>
<p>至此一个简单的API便实现了</p>
<p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20200413103713150.png" alt="image-20200413103713150"></p>
<h4 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h4><h5 id="1-权限"><a href="#1-权限" class="headerlink" title="1.权限"></a>1.权限</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_PERMISSION_CLASSES&#39;: [</span><br><span class="line">        &#39;rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly&#39;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认权限策略可以使用<code>DEFAULT_PERMISSION_CLASSES</code>设置进行全局设置</p>
<h5 id="2-分页控制"><a href="#2-分页控制" class="headerlink" title="2.分页控制"></a>2.分页控制</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YourView</span>(<span class="params">BaseView</span>):</span></span><br><span class="line">    paginate_by = <span class="number">10</span>                 <span class="comment"># 覆盖 settings 中的默认分页</span></span><br><span class="line">    max_paginate_by = <span class="number">100</span>             <span class="comment"># 限制最大分页大小</span></span><br></pre></td></tr></table></figure>

<p>也可以动态地去判断最大分页大小：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YouView</span>(<span class="params">BaseView</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paginate_queryset</span>(<span class="params">self, queryset</span>):</span></span><br><span class="line">        self.paginator.max_page_size = YOUR_PAGE_SIZE_LIMIT</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(YouView, self).paginate_queryset(queryset)</span><br></pre></td></tr></table></figure>



<h5 id="3-外键处理"><a href="#3-外键处理" class="headerlink" title="3.外键处理"></a>3.外键处理</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="comment">#对应主键</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HospitalSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Hospital </span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#对应外键        </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HospitalPicSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    hospital = HospitalSerializer()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = HospitalPic</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure>



<h5 id="4-流量限制"><a href="#4-流量限制" class="headerlink" title="4.流量限制"></a>4.流量限制</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;100/day&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;1000/day&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    throttle_classes = (UserRateThrottle,)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;request was permitted&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure>

<p>限制API查询的频率，可以根据用户不同，精确到每天、每小时、每分钟</p>
<h4 id="接口组合"><a href="#接口组合" class="headerlink" title="接口组合"></a>接口组合</h4><p>Django-rest-framework为我们提供了许多现成的mixins，可以用于快速组合接口</p>
<ul>
<li>GenericAPIView提供了view核心的功能</li>
<li>ListModelMixin提供了.list()方法</li>
<li>CreateModelMixin提供了.create()方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Fruit</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> FruitSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitList</span>(<span class="params">mixins.ListModelMixin, mixins.CreateModelMixin, generics.GenericAPIView</span>):</span></span><br><span class="line">    queryset = Fruit.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = FruitSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span>(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>框架学习</tag>
        <tag>django</tag>
        <tag>rest framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|django框架入门1</title>
    <url>/2020/03/11/Python-django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A81/</url>
    <content><![CDATA[<p>django学习第一弹，原理，配置及URL规则！！！</p>
<span id="more"></span>

<h3 id="Django建站基础"><a href="#Django建站基础" class="headerlink" title="Django建站基础"></a>Django建站基础</h3><h4 id="网站组成"><a href="#网站组成" class="headerlink" title="网站组成"></a>网站组成</h4><p>一个完整的网站大概包含域名、网站应用和服务器</p>
<p><strong>域名：</strong>域名可理解为网站的链接，用于标识一个或多个IP地址（门牌号）</p>
<p><strong>网站应用：</strong>网站应用是指这个网站有哪些页面，这些页面有什么功能并且如何实现这些功能（房子内部装饰）</p>
<p><strong>服务器：</strong>服务器是连接到互联网的计算机算机，用于网站应用的部署和上线</p>
<p><strong>虚拟主机：</strong>虚拟主机是在网络服务器上划分出一定的磁盘空间供用户放置站占和应用组件，提供必要的站点功能、数据存放和传输功能（供租用的房子）</p>
<h4 id="网站运行原理"><a href="#网站运行原理" class="headerlink" title="网站运行原理"></a>网站运行原理</h4><p><strong>客户端:</strong>在计算机上运行并连接到互联网的应用程序，简称浏览器</p>
<p><strong>服务器:</strong>能连接到互联网且具有IP地址的计算机，服务器主要接收和处理用户的请求信息。</p>
<p>用户在客户端操作网页时，实质是向网站发送一个HTTP请求，网站的服务器接收到请求后今步行相应的处理，最后将处理结果返回到客户端并生成相应的网页信息</p>
<p><strong>IP地址：</strong>互联网上的每台计算机都有一个IP地址，用于识别和通信，即为逻辑地址。在定位设备中则转换为MAC地址，即物理地址</p>
<p><strong>DNS:</strong>域名系统，用于跟踪计算机的域名及共在互联网上相应的IP地址</p>
<p><strong>TCP/IP:</strong>传输控制协议/互联网协议，是广泛使用的通信协议</p>
<p><strong>HTTP:</strong>超文本传输协议，是浏览器和服务器通过互联网进行通信的协议</p>
<p>了解了网站运行的原理后，感觉豁然开朗呀！多看一些理论也是非常有用的</p>
<h4 id="走进Django"><a href="#走进Django" class="headerlink" title="走进Django"></a>走进Django</h4><p>Django采用了MTV的框架模式，即模型( Model)、模板(Template )和视图(Views)，三者之间各自负责不同的职责。这些也是学习的重点板块</p>
<p>Django的主要目的是简便、快速地开发数据库驱动的网站，有许多功能强大的第三方插件，强调代码复用性——so，快速开发和DRY ( Do Not Repeat Yourself)是Django的处事原则</p>
<p><strong>Django有什么：</strong></p>
<table>
<thead>
<tr>
<th>组成</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>对象关系映射</td>
<td>将模型与关系数据库连接起来</td>
</tr>
<tr>
<td>URL设计</td>
<td>开发者可以设计任意的URL 网站地址</td>
</tr>
<tr>
<td>模板系统</td>
<td>模板之间具有可继承性</td>
</tr>
<tr>
<td>Cache系统</td>
<td>完善的缓存系统，可支持多种缓存方式</td>
</tr>
<tr>
<td>用户管理系统</td>
<td>提供用户认证、权限设置和用户组功能</td>
</tr>
<tr>
<td>admin管理系统</td>
<td>内置admin管理系统，系统扩展性强</td>
</tr>
</tbody></table>
<p>感觉在为Django打广告（尴尬……）</p>
<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><h5 id="1-创建项目主体"><a href="#1-创建项目主体" class="headerlink" title="1.创建项目主体"></a>1.创建项目主体</h5><p>在目标文件通过cmd输入该命令，即可创建一个名叫“MyDjang”的主文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django-admin startproject MyDjang</span><br></pre></td></tr></table></figure>



<h5 id="2-创建项目应用"><a href="#2-创建项目应用" class="headerlink" title="2.创建项目应用"></a>2.创建项目应用</h5><p>项目应用简称为App,相当于网站的功能。每个App代表网站的一个或多个网页</p>
<p>在新建项目主体下输入命令：分别创建了index和user两个网页</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.Py startapp</span><br><span class="line">index</span><br><span class="line"></span><br><span class="line">python manage.Py startapp user</span><br></pre></td></tr></table></figure>



<p>对各个文件的功能的解释</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>manage.py</td>
<td>命令行工具</td>
</tr>
<tr>
<td><em>init</em>.py</td>
<td>初始化文件，不需要修改</td>
</tr>
<tr>
<td>settings.py</td>
<td>项目的配置文件，经常要修改</td>
</tr>
<tr>
<td>urls.py</td>
<td>项目的URL设置，网站的地址信息</td>
</tr>
<tr>
<td>wsgi.py</td>
<td>Python应用与Web服务器之间的接口，用于Django项目在服务器上的部署和上线，一般不需要修改</td>
</tr>
<tr>
<td>admin.py</td>
<td>后台管理系统</td>
</tr>
<tr>
<td>apps.py</td>
<td>当前应用的配置，无需修改</td>
</tr>
<tr>
<td>mdoels.py</td>
<td>实现数据库和表单的地方</td>
</tr>
<tr>
<td>views.py</td>
<td>视图，生成页面处理信息，是django主要写代码的地方</td>
</tr>
</tbody></table>
<h5 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h5><p>在项目下输入命令行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>







<h5 id="4-PyCharm"><a href="#4-PyCharm" class="headerlink" title="4.PyCharm"></a>4.PyCharm</h5><p>另外也可以在PyCharm（要钱的开发者版）搭建开发环境，它会自动生成一些重要的文件夹。</p>
<p>用社区版的PyCharm则需要用上述的命令行操作，也要自己添加重要文件如：templates（存放html文件）</p>
<h3 id="Django配置信息"><a href="#Django配置信息" class="headerlink" title="Django配置信息"></a>Django配置信息</h3><p>配置信息存放在setting.py，在此处修改相关配置信息</p>
<h4 id="基本配置信息"><a href="#基本配置信息" class="headerlink" title="基本配置信息"></a>基本配置信息</h4><h5 id="1-调试模式"><a href="#1-调试模式" class="headerlink" title="1.调试模式"></a>1.调试模式</h5><p>开发阶段时是True，上线部署时一定要改成False，否则会泄露信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#调试模式</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br></pre></td></tr></table></figure>



<h5 id="2-App列表"><a href="#2-App列表" class="headerlink" title="2.App列表"></a>2.App列表</h5><p>把自己创建的App添加到App列表 ,否则这些app是无法被运行的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h4 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h4><p>存放网页的css和js，图片音频等</p>
<p>存放位置，在setting.py中设置，此处设置的是在App目录下的static文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Static files (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/3.0/howto/static-files/</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br></pre></td></tr></table></figure>



<p>在app文件下新建static文件来存放js和css文件</p>
<h4 id="模板路径"><a href="#模板路径" class="headerlink" title="模板路径"></a>模板路径</h4><p>模板在web开发中是指一种特殊的HTML文档，其中嵌入了一些可以被python识别的指令。</p>
<p>模板配置信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [], <span class="comment">#此处可以配置模板路径，留空则默认在templates文件下存放</span></span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>templates文件可放于根目录下（共用模板文件）和app文件下</p>
<p>配置模板代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>),</span><br><span class="line"><span class="comment">#配置存放于根目录下的templates                    os.path.join(BASE_DIR, &#x27;index/templates&#x27;)],</span></span><br><span class="line"><span class="comment">#配置存放于app下的templates</span></span><br></pre></td></tr></table></figure>



<h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><p>django有四种数据库引擎</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;django.db.backends.postgresql&#x27;</span></span><br><span class="line"><span class="string">&#x27;django.db.backends.mysql&#x27;</span></span><br><span class="line"><span class="string">&#x27;django.db.backends.sqlite3&#x27;</span></span><br><span class="line"><span class="string">&#x27;django.db.backends.oracle&#x27;</span></span><br></pre></td></tr></table></figure>



<p>项目默认使用轻型数据库——Sqlite3，其常用于嵌入式开发，其配置信息如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>但是比较常用的是MySQL数据库，配置连接的数据库为MySQL数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line"><span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django . db.backends .mysql&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django_db&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;USER&#x27;</span> : <span class="string">&#x27; root&#x27;</span> ,</span><br><span class="line"><span class="string">&#x27;PASSWORD&#x27;</span> : <span class="string">&#x27;1234&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;HOST&#x27;</span> : <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PORT&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处只连接了MySQL中一个名叫django_db</p>
<p>的数据库，实际开发中要连接多个数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="comment">#第一个数据库</span></span><br><span class="line"><span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line"><span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django . db.backends .mysql&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django_db&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;USER&#x27;</span> : <span class="string">&#x27; root&#x27;</span> ,</span><br><span class="line"><span class="string">&#x27;PASSWORD&#x27;</span> : <span class="string">&#x27;1234&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;HOST&#x27;</span> : <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PORT&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#第二个数据库</span></span><br><span class="line"><span class="string">&#x27;MyDjango&#x27;</span>: &#123;</span><br><span class="line"><span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django . db.backends .mysql&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django_db&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;USER&#x27;</span> : <span class="string">&#x27; root&#x27;</span> ,</span><br><span class="line"><span class="string">&#x27;PASSWORD&#x27;</span> : <span class="string">&#x27;1234&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;HOST&#x27;</span> : <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PORT&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">&#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上就是python中的两个字典</p>
<h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>中间件是处理Django的request和response对象的钩子。</p>
<p><strong>请求（request）：</strong>如用户在网站点击了某个按钮就会发送请求</p>
<p><strong>处理( response)：</strong>网页会根据用户的操作返回相关的网页内容，即为响应处理</p>
<p>而中间件就是处理请求信息的中枢点</p>
<p>开发者可以自定义中间件，但一般来说，django默认的中间件已满足了大部分需求</p>
<h3 id="编写URL"><a href="#编写URL" class="headerlink" title="编写URL"></a>编写URL</h3><p>url简单来说就是网址，每个地址代表不同的网页</p>
<h4 id="URL规则"><a href="#URL规则" class="headerlink" title="URL规则"></a>URL规则</h4><h5 id="1-目录调整"><a href="#1-目录调整" class="headerlink" title="1.目录调整"></a>1.目录调整</h5><p>每一个app都添加独立的静态资源（static文件）和模板文件夹（templates文件），以及urls.py文件。app中的urls.py文件管理属于该app的url，而项目根目录的urls.py统一管理每一个app的urls.py。</p>
<h5 id="2-运行原理"><a href="#2-运行原理" class="headerlink" title="2.运行原理"></a>2.运行原理</h5><p>程序收到用户请求时，根目录uels.py查找URL属于哪个app，然后在app的urls.py里找到具体urls.py信息</p>
<h5 id="3-案例"><a href="#3-案例" class="headerlink" title="3.案例"></a>3.案例</h5><p><strong>根目录下的urls.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin        <span class="comment">#导入admin功能模板</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include    <span class="comment">#导入URL编写模板</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),    <span class="comment">#admin站点管理地址</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,include(<span class="string">&#x27;index.urls&#x27;</span>)),      <span class="comment">#首页地址</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>URL为空即为网站域名，include是将该URL交给index的urls.py处理</p>
<p><strong>index的urls.py</strong></p>
<p>编写URL信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .<span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,views.index), <span class="comment">#导入同目录下的views.py文件，并应用其中的index方法</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p><strong>views.py的编写</strong></p>
<p>views.py用于编写视图函数（功能函数），处理URL请求的信息返回网页内容给用户（所以可以和html联系起来）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span> (<span class="params">request</span>) :</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello world&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>（1）index函数内必须设置request代表当前用户的请求对象（包含用户名，请求内容，请求方式）</p>
<p>（2）视图函数执行完后，必须要用return返回处理结果，否则报错</p>
<h4 id="带变量的URL"><a href="#带变量的URL" class="headerlink" title="带变量的URL"></a>带变量的URL</h4><p>想要一个URL代表多个不同页面，这时候就要用到带变量的URL了</p>
<h5 id="1-变量类型"><a href="#1-变量类型" class="headerlink" title="1.变量类型"></a>1.变量类型</h5><table>
<thead>
<tr>
<th align="center">变量类型</th>
<th align="center">简介</th>
</tr>
</thead>
<tbody><tr>
<td align="center">字符类型</td>
<td align="center">匹配任何非空字符串，默认类型</td>
</tr>
<tr>
<td align="center">整型</td>
<td align="center">匹配0和正整数。</td>
</tr>
<tr>
<td align="center">slug</td>
<td align="center">理解为注释、后缀，用作URL解释性字符</td>
</tr>
<tr>
<td align="center">uuid</td>
<td align="center">匹配一个uid格式的对象</td>
</tr>
</tbody></table>
<h5 id="2-案例"><a href="#2-案例" class="headerlink" title="2.案例"></a>2.案例</h5><p><strong>在index的urls.py中编写</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .<span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,views.index),</span><br><span class="line">    <span class="comment">##添加带有字符类型、整型和slug的URL</span></span><br><span class="line">    path(<span class="string">&#x27;&lt;year&gt;/&lt;int:month&gt;/&lt;slug:day&gt; &#x27;</span>,views.mydate)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>URL用符号”&lt;&gt;”设置变量，如上</p>
<ul>
<li><year> ：字符类型变量year</year></li>
<li><a href="int:month">int:month</a> : 整型变量month</li>
</ul>
<p><strong>在views.py中编写</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取URL中的参数year，month，day</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mydate</span>(<span class="params">request,year,month,day</span>) :</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="built_in">str</span> (year) +<span class="string">&#x27;/&#x27;</span>+ <span class="built_in">str</span> (month) +<span class="string">&#x27;/&#x27;</span>+ <span class="built_in">str</span> (day) )</span><br></pre></td></tr></table></figure>

<p>URL的变量要与视图函数的函数一一对应（一个空格都要对应）</p>
<h5 id="3-url中的正则表达式"><a href="#3-url中的正则表达式" class="headerlink" title="3.url中的正则表达式"></a>3.url中的正则表达式</h5><p>正则表达式的作用是对URL的变量进行截取和判断</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path <span class="comment">#引入re_path功能模板</span></span><br><span class="line"><span class="keyword">from</span> .<span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,views.index),</span><br><span class="line">    <span class="comment">#添加带有字符类型、整型和slug的URL</span></span><br><span class="line">    re_path(<span class="string">&#x27;(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9] &#123;2&#125;)/(?P&lt;day&gt;[0-9]&#123;2&#125;).html&#x27;</span>,views.mydate)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>以(?P<code>&lt;year&gt;</code>[0-9]{4})为例介绍：</p>
<ul>
<li>?P是固定格式</li>
<li><code>&lt;year&gt;</code>为变量的编写规则</li>
<li>[0-9]{4}为匹配模式，代表变量长度为4，只允许取0~9值</li>
</ul>
<h4 id="设置name参数"><a href="#设置name参数" class="headerlink" title="设置name参数"></a>设置name参数</h4><p>实际就是为URL命名，再在html中用<code>&#123;% url 'name' value %&#125;</code>的格式引用，即href属性的链接是动态链接。（name是URL的名字，value是URL中设置的参数）</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>框架学习</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|django框架入门3</title>
    <url>/2020/04/05/Python-django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A83/</url>
    <content><![CDATA[<p>django框架的学习第三弹！一起来学习让人理解困难的数据库和表单吧……</p>
<span id="more"></span>

<h3 id="模型与数据库"><a href="#模型与数据库" class="headerlink" title="模型与数据库"></a>模型与数据库</h3><p>Django支持各种数据库，并为这些数据库提供了统一的调用API，这些API统称为ORM框架，通过ORM框架可以实现数据库连接和读写操作</p>
<h4 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h4><p>Django中通过虚拟对象数据库（模型）来实现对目标数据库的读写操作</p>
<h5 id="1-配置目标数据库信息"><a href="#1-配置目标数据库信息" class="headerlink" title="1.配置目标数据库信息"></a>1.配置目标数据库信息</h5><p>在项目下的setting.py进行配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line"><span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;mydata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;USER&#x27;</span> : <span class="string">&#x27;root&#x27;</span> ,</span><br><span class="line"> <span class="string">&#x27;PASSWORD&#x27;</span> : <span class="string">&#x27;1234&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;HOST&#x27;</span> : <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PORT&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开启mysql的服务后，用Navicat工具连接数据库并新建一个mydata的数据库</p>
<h5 id="2-构建虚拟对象数据库"><a href="#2-构建虚拟对象数据库" class="headerlink" title="2.构建虚拟对象数据库"></a>2.构建虚拟对象数据库</h5><p>在app的models.py文件中以类的形式定义模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment">#产品分类表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Type</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(<span class="string">&#x27;序号&#x27;</span>,primary_key=<span class="literal">True</span>)</span><br><span class="line">    type_name = models.CharField(<span class="string">&#x27;产品类型&#x27;</span>,max_length=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#产品信息表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(<span class="string">&#x27;序号&#x27;</span>,primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(<span class="string">&#x27;名称&#x27;</span>,max_length=<span class="number">50</span>)</span><br><span class="line">    weight = models.CharField(<span class="string">&#x27;重量&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    size = models.CharField(<span class="string">&#x27;尺寸&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="built_in">type</span> = models.ForeignKey(Type, on_delete=models.CASCADE,verbose_name=<span class="string">&#x27;产品类型&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>模型以类的方式进行定义，并且继承Django的models.Model类，类的命名一般以首字母大写开头</li>
<li>模型字段以类属性进行定义，其中的常用数据类型和参数解释如下</li>
</ul>
<p>表字段常用数据类型：</p>
<table>
<thead>
<tr>
<th>表字段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>models.AutoField</td>
<td>默认会生成一个名为id的字段并为int类型</td>
</tr>
<tr>
<td>models.CharField</td>
<td>字符串类型</td>
</tr>
<tr>
<td>models.BooleanField</td>
<td>布尔类型</td>
</tr>
<tr>
<td>models.DateField</td>
<td>日期(date) 类型</td>
</tr>
<tr>
<td>models.DateTimeField</td>
<td>日期(datetime) 类型</td>
</tr>
<tr>
<td>models.EmailField</td>
<td>字符串类型(正则表达式邮箱)</td>
</tr>
<tr>
<td>models.FloatField</td>
<td>浮点类型</td>
</tr>
<tr>
<td>models.IntegerField</td>
<td>整数类型</td>
</tr>
</tbody></table>
<p>连邮箱的类型都考虑到就非常贴心了</p>
<p>表字段常用参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Null</td>
<td>如为True，字段可以为空</td>
</tr>
<tr>
<td>Blank</td>
<td>如为True，设置在Admin站点管理中添加数据时可允许空值</td>
</tr>
<tr>
<td>primary_ key</td>
<td>如为True，将字段设置成主键</td>
</tr>
<tr>
<td>verbose _name</td>
<td>在Admin站点管理设置字段的显示名称</td>
</tr>
</tbody></table>
<h5 id="3-生成数据表"><a href="#3-生成数据表" class="headerlink" title="3.生成数据表"></a>3.生成数据表</h5><p>通过模型在目标数据库创建相应的数据表，使用下面的两个命令行即可生成数据表</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">django</span>\<span class="title">mysite</span></span></span><br><span class="line"><span class="function">(<span class="title">django</span>) λ <span class="title">python</span> <span class="title">manage.py</span> <span class="title">makemigrations</span></span></span><br><span class="line"><span class="function"><span class="title">Migrations</span> <span class="title">for</span> &#x27;<span class="title">index</span>&#x27;:</span></span><br><span class="line"><span class="function">  <span class="title">index</span>\<span class="title">migrations</span>\0003<span class="title">_auto_20200405_1522.py</span></span></span><br><span class="line"><span class="function">    - <span class="title">Create</span> <span class="title">model</span> <span class="title">Product</span></span></span><br><span class="line"><span class="function">    - <span class="title">Create</span> <span class="title">model</span> <span class="title">Type</span></span></span><br><span class="line"><span class="function">    - <span class="title">Delete</span> <span class="title">model</span> <span class="title">laopo</span></span></span><br><span class="line"><span class="function">    - <span class="title">Add</span> <span class="title">field</span> <span class="title">type</span> <span class="title">to</span> <span class="title">product</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">django</span>\<span class="title">mysite</span></span></span><br><span class="line"><span class="function">(<span class="title">django</span>) λ <span class="title">python</span> <span class="title">manage.py</span> <span class="title">migrate</span></span></span><br><span class="line"><span class="function"><span class="title">Operations</span> <span class="title">to</span> <span class="title">perform</span>:</span></span><br><span class="line"><span class="function">  <span class="title">Apply</span> <span class="title">all</span> <span class="title">migrations</span>: <span class="title">admin</span>, <span class="title">auth</span>, <span class="title">contenttypes</span>, <span class="title">index</span>, <span class="title">sessions</span></span></span><br><span class="line"><span class="function"><span class="title">Running</span> <span class="title">migrations</span>:</span></span><br><span class="line"><span class="function">  <span class="title">Applying</span> <span class="title">index</span>.0003<span class="title">_auto_20200405_1522</span>... <span class="title">OK</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">django</span>\<span class="title">mysite</span></span></span><br><span class="line"><span class="function">(<span class="title">django</span>) λ</span></span><br></pre></td></tr></table></figure>

<p>用Navicat查看数据库，即可发现数据表生成成功</p>
<h4 id="数据表的关系"><a href="#数据表的关系" class="headerlink" title="数据表的关系"></a>数据表的关系</h4><p>每个数据表是可以存在关联的，表与表之间有三种关系：</p>
<h5 id="1-一对一"><a href="#1-一对一" class="headerlink" title="1.一对一"></a>1.一对一</h5><p>用OneToOneField构建一对一关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">models.ForeignKey(第一个表名, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure>





<h5 id="2-一对多"><a href="#2-一对多" class="headerlink" title="2.一对多"></a>2.一对多</h5><p>用ForeignKey构建一对多关系，这样的关系是常用的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">models.ForeignKey(Type, on_delete=models.CASCADE,verbose_name=<span class="string">&#x27;产品类型&#x27;</span>)</span><br></pre></td></tr></table></figure>





<h5 id="3-多对多"><a href="#3-多对多" class="headerlink" title="3.多对多"></a>3.多对多</h5><p>用ManyToManyField构建多对多关系，这种关系不常用</p>
<h4 id="数据表的读写"><a href="#数据表的读写" class="headerlink" title="数据表的读写"></a>数据表的读写</h4><p>数据表的读写操作主要实现对数据的增删改查，首先要在数据表中添加数据如图</p>
<h5 id="1-工具使用"><a href="#1-工具使用" class="headerlink" title="1.工具使用"></a>1.工具使用</h5><p>为了更好演示数据库的读写操作，以下使用PyCharm的shell模式来操作数据库，实际运用中的代码也是一样的。</p>
<p>在PyCharm的Terminal下开启shell模式</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure>





<h5 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2.插入数据"></a>2.插入数据</h5><p>（1）方法一：通过对模型Product进行操作</p>
<p>输入以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> index . models <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.name = <span class="string">&#x27;black&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.weight = <span class="string">&#x27;111g&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.size = <span class="string">&#x27;255mm&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.type_id = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.save()</span><br></pre></td></tr></table></figure>

<p>插入方式的原理：</p>
<ul>
<li>从models.py中导入模型Product</li>
<li>对模型Product声明并实例化，生成对象p</li>
<li>对对象p的属性进行逐一赋值</li>
<li>完成赋值后需要对p进行保存</li>
</ul>
<p>（2）方法二：通过ORM框架提供的API实现，使用create方法实现数据插入,常用方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">from</span> index . models <span class="keyword">import</span> *</span><br><span class="line">&gt;&gt;&gt;Product.objects.create(name = <span class="string">&#x27;black&#x27;</span>,weight = <span class="string">&#x27;111g&#x27;</span>,size = <span class="string">&#x27;255mm&#x27;</span>,type_id = <span class="number">1</span>)</span><br></pre></td></tr></table></figure>



<p>（3）方法三：实例化时直接设置属性值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> index . models <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product(name = <span class="string">&#x27;black&#x27;</span>,weight = <span class="string">&#x27;111g&#x27;</span>,size = <span class="string">&#x27;255mm&#x27;</span>,type_id = <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.save()</span><br></pre></td></tr></table></figure>





<h5 id="3-更新数据"><a href="#3-更新数据" class="headerlink" title="3.更新数据"></a>3.更新数据</h5><p>数据更新的实现步骤与数据插入类似，唯一的区别是在模型实例化后，更新数据要进行数据查询</p>
<p>（1）方法一：通过对模型Product进行操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> index . models <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product.objects.get(<span class="built_in">id</span> = <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.name = <span class="string">&#x27;black&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.save()</span><br></pre></td></tr></table></figure>



<p>（2）方法二：通过ORM框架提供的API实现，使用update方法实现数据更新</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> index . models <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#更新单条数据，使用查询条件get</span></span><br><span class="line">Product.objects.get(<span class="built_in">id</span>=<span class="number">4</span>).update(name=<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新多条数据，使用查询条件filter以列表格式返回</span></span><br><span class="line">Product.objects.<span class="built_in">filter</span>(name=<span class="string">&#x27;red&#x27;</span>).update(weight=<span class="string">&#x27;666g&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#全表数据更新</span></span><br><span class="line">Product.objects.update(name=<span class="string">&#x27;yellow&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h5 id="4-数据删除"><a href="#4-数据删除" class="headerlink" title="4.数据删除"></a>4.数据删除</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除表中全部数据</span></span><br><span class="line">Product.objects.<span class="built_in">all</span>().delete()</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除一条id为1的数据</span></span><br><span class="line">Product.objects.get(<span class="built_in">id</span> = <span class="number">1</span>) .delete()</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除多条数据</span></span><br><span class="line">Product.objects .<span class="built_in">filter</span> (name=<span class="string">&#x27;华为荣耀V9&#x27;</span>) .delete()</span><br></pre></td></tr></table></figure>

<p>数据的删除和更新都用到了查询条件filter和查询条件get，其区别如下：</p>
<ul>
<li>查询字段必须是主键或者唯一约束的字段，并且查询的数据必须存在</li>
<li>查询字段没有限制，只要该字段是数据表的某一字段即可，查询结果以列表的形式返回</li>
</ul>
<h5 id="5-数据查询"><a href="#5-数据查询" class="headerlink" title="5.数据查询"></a>5.数据查询</h5><p>数据查询的内容是数据库操作内容最为多最为复杂的部分</p>
<p>常用的查询方法：</p>
<p>（1）全表查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据以列表形式返回</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product.objects.<span class="built_in">all</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p[<span class="number">1</span>] . name</span><br></pre></td></tr></table></figure>

<p>（2）查询前5个数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在Django中使用Python的列表截取分解即可实现</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product.objects.<span class="built_in">all</span>() [:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>（3）查询某个字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#values方法，以列表形式返回数据，列表元素以字典格式表示</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product.objects. values (<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p[<span class="number">1</span>] <span class="comment">#[ &#x27;name&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>（4）列表表示返回数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># values_ list 方法，以列表表示返回数据，列表元素以元组格式表示</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P = Product.objects. values_ <span class="built_in">list</span>(<span class="string">&#x27;name&#x27;</span>) [:<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P</span><br></pre></td></tr></table></figure>



<p>（5）使用get方法查询数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p= Product. objects.get(<span class="built_in">id</span> = <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.name</span><br></pre></td></tr></table></figure>



<p>（6）使用filter方法查询数据，注意区分get和filter的差异</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product. objects.<span class="built_in">filter</span>(<span class="built_in">id</span> = <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p[<span class="number">0</span>] .name</span><br></pre></td></tr></table></figure>



<p>（7）and查询主要在filter里面添加多个查询条件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product. objects . <span class="built_in">filter</span> (name=<span class="string">&#x27;red&#x27;</span>,<span class="built_in">id</span>=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p</span><br></pre></td></tr></table></figure>



<p>（8）or查询，需要引入Q，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django . db .models <span class="keyword">import</span> Q</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product. objects . <span class="built_in">filter</span>(Q (name=<span class="string">&#x27;red&#x27;</span>)|Q(<span class="built_in">id</span>=<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p</span><br></pre></td></tr></table></figure>



<p>（9）查询数据量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用count方法统计查询数据的数据量</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product . objects . <span class="built_in">filter</span> (name=<span class="string">&#x27;yellow&#x27;</span>).count ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P</span><br></pre></td></tr></table></figure>



<p>（10）去重查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#distinct方法无须设置参数，去重方式根据values设置的字段执行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product.objects.values (<span class="string">&#x27;name&#x27;</span>).<span class="built_in">filter</span> (name=<span class="string">&#x27;red&#x27;</span>).distinct()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P</span><br></pre></td></tr></table></figure>



<p>以上均使用等值来匹配结果，若想实现其他骚操作，可以参考以下匹配符</p>
<h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><p>对多个关联的数据表进行查询，我们可以使用select_related方法实现，此处不做介绍……</p>
<h3 id="表单与模型"><a href="#表单与模型" class="headerlink" title="表单与模型"></a>表单与模型</h3><p>表单是用户信息的集合，作用是实现网页上的数据交互。</p>
<p>用户表单是web开发的一项基本功能，django的表单功能由Form类实现，主要有两种：django.forms.Form （基础的表单功能），django.forms.ModelForm（在前者的基础上结合模型所生成的数据表单）</p>
<h4 id="初识表单"><a href="#初识表单" class="headerlink" title="初识表单"></a>初识表单</h4><h5 id="1-表单在html"><a href="#1-表单在html" class="headerlink" title="1.表单在html"></a>1.表单在html</h5><p>在html中表单由<form>标签实现</form></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表单--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">me</span> <span class="attr">thod</span>=<span class="string">&quot;post&quot;</span>&gt;</span> </span><br><span class="line">        First name: <span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot; firstname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mickey&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot; Submit&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--表单--&gt;</span></span><br><span class="line">        Last name: <span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot; lastname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mouse&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot; Submit&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span>         </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<p>由此可知一个完整的表单有4个组成部分：提交地址，请求方式，元素控件，提交按钮</p>
<table>
<thead>
<tr>
<th>组成部分</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>提交地址</td>
<td>提交地址用于设置用户提交的表单数据应由哪个URL接收和处理，由<form>的属性action 决定</form></td>
</tr>
<tr>
<td>请求方式</td>
<td>请求方式用于设置表单的提交方式，通常是GET请求或POST请求，由<form>的属性method</form></td>
</tr>
<tr>
<td>元素控件</td>
<td>元素控件是供用户输入数据信息的输入框。由HTML的<input>控件实现，属性type用于设置输入框的类型</td>
</tr>
<tr>
<td>提交按钮</td>
<td>提交按钮供用户提交数据到服务器，该按钮也是由HTML的<input> 控件实现type=”submit”</td>
</tr>
</tbody></table>
<p>下面以django的方式实现上述功能</p>
<h5 id="2-定义表单"><a href="#2-定义表单" class="headerlink" title="2.定义表单"></a>2.定义表单</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义ProudctForm表单对象</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> . models <span class="keyword">import</span>*</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductForm</span> (<span class="params">forms. Form</span>) :</span></span><br><span class="line">    name = forms.CharField(max_length = <span class="number">20</span>,label = <span class="string">&#x27;名字&#x27;</span>,)</span><br><span class="line">    weight = forms.CharField(max_length = <span class="number">50</span>,label = <span class="string">&#x27; 重量&#x27;</span>)</span><br><span class="line">    size = forms.CharField(max_length = <span class="number">50</span>,label = <span class="string">&#x27;尺寸&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置下拉框的值</span></span><br><span class="line">    choices_list = [(i + <span class="number">1</span>, v[<span class="string">&#x27;type_ name&#x27;</span>]) <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(Type.objects.values(<span class="string">&#x27;type_ name&#x27;</span>))]</span><br><span class="line">    <span class="built_in">type</span> = forms.ChoiceField(choices=choices_list, labe1 = <span class="string">&#x27; 产品类型&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在index中添加form.py，用于实现编写表单实现功能。定义了表单ProductForm。表单以类的形式表示，表单中定义了不同类型的类属性，即表单字段（类似HTML的一个控件）</p>
<h5 id="3-视图实例化"><a href="#3-视图实例化" class="headerlink" title="3.视图实例化"></a>3.视图实例化</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py代码，将表单ProductForm实例化并将其传递到模板中生成网页内容</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> renderfrom . form <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span> (<span class="params">request</span>) :</span>    </span><br><span class="line">    product = ProductForm()    </span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;data_form.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure>

<p>在views中导入ProductForm类，在视图函数中实例化生成对象product并把它传给html</p>
<h5 id="4-网页显示"><a href="#4-网页显示" class="headerlink" title="4.网页显示"></a>4.网页显示</h5><p>将对象以HTML的<table>的形式展示在网页上</table></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% if product.errors %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        数据出错啦，错误信息: &#123;&#123; product . errors &#125;&#125;.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        &#123;% csrf_ token %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">                &#123;&#123; product.as_ table &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot; 提交&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>最终实现效果：</p>
<h4 id="表单定义"><a href="#表单定义" class="headerlink" title="表单定义"></a>表单定义</h4><h5 id="1-内置表单字段"><a href="#1-内置表单字段" class="headerlink" title="1.内置表单字段"></a>1.内置表单字段</h5><table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>BooleanField</td>
<td>复选框，如果字段带有required=True,复选框被勾选上</td>
</tr>
<tr>
<td>CharField</td>
<td>参数max_ length和min_ length分 别设置输入长度</td>
</tr>
<tr>
<td>ChoiceField</td>
<td>下拉框，参数choices设置数据内容</td>
</tr>
<tr>
<td>DateField</td>
<td>文本框，具有验证日期格式的功能，参数input_ formats设置日期格</td>
</tr>
<tr>
<td>EmailField</td>
<td>文本框，验证输入数据是否为合法的邮箱地址</td>
</tr>
<tr>
<td>FileField</td>
<td>文件上传功能，参数max_ <em>length和allow</em> empty_ file分别用于设置文件名的最大长度和文件内容是否为空</td>
</tr>
<tr>
<td>ImageField</td>
<td>验证文件是否为Pillow库可识别的图像格式</td>
</tr>
<tr>
<td>IntegerField</td>
<td>验证数据是否为整型</td>
</tr>
<tr>
<td>URLField</td>
<td>验证数据是否为有效的URL地址</td>
</tr>
</tbody></table>
<h5 id="2-表单字段参数"><a href="#2-表单字段参数" class="headerlink" title="2.表单字段参数"></a>2.表单字段参数</h5><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Required</td>
<td>输入数据是否为空，默认值为True</td>
</tr>
<tr>
<td>Widget</td>
<td>设置HTMI控件的样式</td>
</tr>
<tr>
<td>Label</td>
<td>用于生成Label标签或显示内容</td>
</tr>
<tr>
<td>help_text</td>
<td>设置帮助提示信息</td>
</tr>
<tr>
<td>error_messages</td>
<td>设置错误信息，以字典格式表示</td>
</tr>
<tr>
<td>show_hidden_initial</td>
<td>于检验两次输入值是否一致</td>
</tr>
<tr>
<td>Localize</td>
<td>值为True/False，是否支持本地化，如不同时区显示相应的时间.</td>
</tr>
</tbody></table>
<h4 id="模型与表单"><a href="#模型与表单" class="headerlink" title="模型与表单"></a>模型与表单</h4><p>将表单与模型结合起来形成数据表单。该表单继承于父类forms.ModelForm</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductModelForm</span>(<span class="params">forms.ModelForm</span>)</span></span><br></pre></td></tr></table></figure>



<h5 id="1-添加字段"><a href="#1-添加字段" class="headerlink" title="1.添加字段"></a>1.添加字段</h5><p>添加模型外的表单字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">productId = forms . CharField (max_ length=<span class="number">20</span>,label=<span class="string">&#x27; 产品序号&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h5 id="2-字段转换"><a href="#2-字段转换" class="headerlink" title="2.字段转换"></a>2.字段转换</h5><p>通过类Meta实现模型与表单字段的转换。</p>
<p>类Meta的属性说明：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Model</td>
<td>必需属性，用于绑定Model对象</td>
</tr>
<tr>
<td>Fields</td>
<td>必需属性，设置模型内哪些字段转换成表单字段</td>
</tr>
<tr>
<td>Exclude</td>
<td>与fields相反， 禁止模型内哪些字段转换成表单字段</td>
</tr>
<tr>
<td>Labels</td>
<td>可选属性，设置表单字段里的参数label</td>
</tr>
<tr>
<td>error_messages</td>
<td>可选属性，设置表单字段里的参数error_messages</td>
</tr>
</tbody></table>
<h5 id="3-数据清洗"><a href="#3-数据清洗" class="headerlink" title="3.数据清洗"></a>3.数据清洗</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自定义表单字段weight的数据清洗</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_</span> <span class="title">weight</span> (<span class="params">self</span>):</span></span><br><span class="line">	data = self. cleaned_data[<span class="string">&#x27;weight&#x27;</span>]</span><br><span class="line">	<span class="keyword">return</span> data+<span class="string">&#x27;g &#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>框架学习</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|django框架入门2</title>
    <url>/2020/04/04/Python-django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A82/</url>
    <content><![CDATA[<p>django框架第二弹，一起来学习视图和模板吧！！！</p>
<span id="more"></span>

<h3 id="探究视图"><a href="#探究视图" class="headerlink" title="探究视图"></a>探究视图</h3><p>视图负责处理用户请求和生成相应的响应内容，然后再页面中显示</p>
<h4 id="构建网页内容"><a href="#构建网页内容" class="headerlink" title="构建网页内容"></a>构建网页内容</h4><h5 id="1-响应类型"><a href="#1-响应类型" class="headerlink" title="1.响应类型"></a>1.响应类型</h5><p>视图函数return具有多种响应类型</p>
<table>
<thead>
<tr>
<th>响应类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>HttpResponse(‘Hello world’)</td>
<td>HTTP状态码200，请求已成功被服务器接收</td>
</tr>
<tr>
<td>HttpResponseBadRequest(‘BadRequest’)</td>
<td>HTTP状态码400，访问的页面不存在或者请求错</td>
</tr>
<tr>
<td>HttpResponseForbidden(‘NotFound’)</td>
<td>HTTP状态码404，网页不存在或网页的URL失效</td>
</tr>
<tr>
<td>HttpResponseForbidden(‘NotFound’)</td>
<td>HTTP状态码403，没有访问权限</td>
</tr>
<tr>
<td>HttpResponseNotAllowed(‘NotAllowed Get’)</td>
<td>HTTP状态码405，不允许使用该请求方式</td>
</tr>
<tr>
<td>HttpResponseServrError(‘ServerError’)</td>
<td>HTTP状态码500， 服务器内容错误</td>
</tr>
</tbody></table>
<p>响应类型是服务器告诉客户端当前网页请求发生了什么，其属于django.http模板，该模板可以用于实现文件下载</p>
<h5 id="2-生成html网页"><a href="#2-生成html网页" class="headerlink" title="2.生成html网页"></a>2.生成html网页</h5><p>django.http模板可以通过render()函数跳转生成html文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">render(request, template_name, context = <span class="literal">None</span>, content_type = <span class="literal">None</span>, status = <span class="literal">None</span>, using = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>参数说明</p>
<table>
<thead>
<tr>
<th>相关参数</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>request</td>
<td>浏览器向服务器发送的请求对象（不用修改）</td>
</tr>
<tr>
<td>template_ name</td>
<td>HTML 模板文件名</td>
</tr>
<tr>
<td>context</td>
<td>对HTML模板的变量赋值，以字典格式表示，默认情况下是一个空字典</td>
</tr>
<tr>
<td>content_ type</td>
<td>一般情况使用默认值，不用修改</td>
</tr>
<tr>
<td>status</td>
<td>HTTP状态码，默认为200，可以指向404页面</td>
</tr>
<tr>
<td>using</td>
<td>设置HTML模板转换生成HTML网页的模板引擎</td>
</tr>
</tbody></table>
<h5 id="3-案例"><a href="#3-案例" class="headerlink" title="3.案例"></a>3.案例</h5><p>在app目录下创建templates存放html模板，static存放html的静态资源</p>
<p>编写urls.py生成URL信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path <span class="comment">#引入re_path功能模板</span></span><br><span class="line"><span class="keyword">from</span> .<span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,views.index), <span class="comment">#首页URL</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p>编写视图函数生成html网页</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render <span class="comment">#引用render模板</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span> (<span class="params">request</span>) :</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, context=&#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;首页&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>





<h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><p>视图的功能：</p>
<ul>
<li>接收用户请求和返回响应内容</li>
<li>与模型(Model) 实现数据交互(操作数据库)</li>
<li>视图相当于一个处理中心，负责接收用户请求，然后根据请求信息读取并处理后台数据，最后生成HTML网页返回给用户。</li>
</ul>
<p>该部分的内容涉及到数据库，详细的内容会在下一篇文章介绍</p>
<h5 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h5><p>视图操作数据库实质是从models.py导入数据库映射对象</p>
<p>（1）在app的models.py文件编写，将Product类和数据表Product构成映射关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Laopo</span> (<span class="params">models .Model</span>) :</span></span><br><span class="line">    <span class="built_in">id</span> = models.IntegerField(primary_key = <span class="literal">True</span>) <span class="comment">#对应整型类数据</span></span><br><span class="line">    name = models.CharField(max_length = <span class="number">50</span>)     <span class="comment">#对应字符类数据，最大长度为50字节</span></span><br><span class="line">    <span class="built_in">type</span> = models.CharField(max__length = <span class="number">20</span>)</span><br></pre></td></tr></table></figure>



<p>（2）在Navicat for MySQL工具，先新建数据库，再到setting.py文件设置数据库连接信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line"><span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;mydata&#x27;</span>, <span class="comment">#名字与在Navicat新建的对应</span></span><br><span class="line"><span class="string">&#x27;USER&#x27;</span> : <span class="string">&#x27;root&#x27;</span> ,</span><br><span class="line"> <span class="string">&#x27;PASSWORD&#x27;</span> : <span class="string">&#x27;1234&#x27;</span>,	<span class="comment">#密码填自己注册MySQL时写的密码</span></span><br><span class="line"><span class="string">&#x27;HOST&#x27;</span> : <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PORT&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>（3）上述代码只构成了两者间的关系，在数据库中并没有生成相应数据表</p>
<p>生成用于创建数据表的文件（在项目下调用）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></table></figure>

<p>该指令用于生成index定义的模型生成0001_initial.py文件，形成生成数据表的脚本代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<p>该指令根据脚本代码在目标数据库生成对应数据表（要重新连接刷新数据库）</p>
<p>实现效果如下（要打开mysql服务才能成功连接）</p>
<p>其中的index_product对应的就是我们自己在models.py中定义的Product类，通过Navicat工具在其中添加数据，如图</p>
<h5 id="2-视图函数处理"><a href="#2-视图函数处理" class="headerlink" title="2.视图函数处理"></a>2.视图函数处理</h5><p>视图函数将数据与模板连接，实现数据可视化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render <span class="comment">#引用render模板</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>) :</span></span><br><span class="line">    type_list = Laopo.objects.values(<span class="string">&#x27;type&#x27;</span>).distinct() <span class="comment">#查询type的数据并去重</span></span><br><span class="line">    name_list = Laopo.objects.values(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;type&#x27;</span>)     <span class="comment">#查询type和name的全部数据</span></span><br><span class="line">    <span class="comment">#将读取到的数据用context字典储存起来</span></span><br><span class="line">    context = &#123;<span class="string">&#x27;title&#x27;</span>:<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;type_list&#x27;</span>: type_list, <span class="string">&#x27;name_lsit&#x27;</span>:name_list&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#变量context的内容是render()函数的参数值，把变量传给HTML</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, context=context, status=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h5 id="3-使用模板插入数据"><a href="#3-使用模板插入数据" class="headerlink" title="3.使用模板插入数据"></a>3.使用模板插入数据</h5><p>模板与标签的内容下一篇文章再细讲</p>
<p>在html插入动态数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% for type in type_list %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% for name in name_list %&#125;</span><br><span class="line">    &#123;% if type.type == &quot;傲娇&quot;&#125;</span><br><span class="line">        &#123;% name.name %&#125;是个傲娇</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h5><p>实现数据可视的步骤：</p>
<ul>
<li>定义数据模型</li>
<li>在视图导入模型所定义的类（数据表对象）</li>
<li>视图函数再获取数据后，将数据传递给html模板</li>
</ul>
<h4 id="获取请求信息"><a href="#获取请求信息" class="headerlink" title="获取请求信息"></a>获取请求信息</h4><p>视图是用于接收并处理用户请求信息，并且信息储存在参数request中</p>
<h5 id="1-常用属性"><a href="#1-常用属性" class="headerlink" title="1.常用属性"></a>1.常用属性</h5><p>最重要的是GET，POST和method三个</p>
<h5 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h5><p>编写url.py路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path </span><br><span class="line"><span class="keyword">from</span> .<span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;login.html&#x27;</span>,views.login),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p>编写视图函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse <span class="comment">#引用render模板</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment">#post请求的情况</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        <span class="comment"># 绝对路径，完整的地址信息</span></span><br><span class="line">        <span class="comment"># return redirect( &#x27;http://127.0.0.1:8000/&#x27;)</span></span><br><span class="line">        <span class="comment"># 相对路径，代表首页地址</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#get请求的情况</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> request.GET.get(<span class="string">&#x27;name&#x27;</span>):</span><br><span class="line">            name = request.GET.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            name = <span class="string">&#x27; Everyone &#x27;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;username is &#x27;</span> + name)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>首先使用method对用户的请求方式进行判断，一般来说用户访问某个URL地址都是GET，输入信息和点击按钮是POST</li>
<li>判断后，用GET或POST的方式获取请求参数</li>
<li>http:/ /127.0.0.1 : 8000/ login. html ?name=Tom 中GET的请求参数以?为标识，等号前为参数名，等号后为参数值</li>
</ul>
<h4 id="通用视图"><a href="#通用视图" class="headerlink" title="通用视图"></a>通用视图</h4><p>Django可以通过通用视图快速完成数据视图的开发，它是通过定义和声明类的形式实现的</p>
<table>
<thead>
<tr>
<th>类</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>TemplateView</td>
<td>返回HTML模板</td>
</tr>
<tr>
<td>ListView</td>
<td>将数据库的数据传递给HTML模板，通常获取某个表的所有数据</td>
</tr>
<tr>
<td>DetailView</td>
<td>将数据库的数据传递给HTML模板，通常获取数据表的单条数据</td>
</tr>
</tbody></table>
<h3 id="深入模板"><a href="#深入模板" class="headerlink" title="深入模板"></a>深入模板</h3><p>django作为web框架，可以使用模板去动态生成HTML网页。django的模板语言有其内置的DTL和最流行的Jinja2，以下主要介绍的是内置的模板语言DTL</p>
<h4 id="变量与标签"><a href="#变量与标签" class="headerlink" title="变量与标签"></a>变量与标签</h4><h5 id="1-Django内置标签"><a href="#1-Django内置标签" class="headerlink" title="1.Django内置标签"></a>1.Django内置标签</h5><table>
<thead>
<tr>
<th>标签</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>name是变量名，用于插入变量数据，可以是字符串型和整型</td>
</tr>
<tr>
<td><code>&#123;% for %&#125;`          | 遍历输出变量的内容，变量类型多为列表                 |
| `&#123;% if %&#125;`           | 对变量进行条件判断                                   |
| `&#123;% csrf_ _token %&#125;` | 用于防护跨站请求伪造攻击                             |
| `&#123;% url %&#125;`          | 引用路由配置的地址，生成相应的URL地址                |
| `&#123;% static %&#125;`       | 读取静态资源的文件内容                               |
| `&#123;% extends xxx %&#125;`  | 模板继承，xxx为模板文件名，使当前模板继承xxx模板     |
| `&#123;% block xxx %&#125;`    | 重写父类模板的代码                                   |

注意`&#123;% for %&#125;`要用`&#123;% endfor %&#125;</code>，<code>&#123;% if %&#125;`要用`&#123;% endif %&#125;</code>结束</td>
<td></td>
</tr>
</tbody></table>
<h5 id="2-for标签变量"><a href="#2-for标签变量" class="headerlink" title="2.for标签变量"></a>2.for标签变量</h5><p>为了方便for的索引，模板还提供一些特殊的变量来获取for标签循环的信息，把for做出数组的效果方便读取信息</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>forloop.counter</td>
<td>获取当前循环的索引（即第几个数据），从1开始计算</td>
</tr>
<tr>
<td>forloop.counter()</td>
<td>获取当前循环的索引，从0开始计算</td>
</tr>
<tr>
<td>forloop.revcounter</td>
<td>索引从最大数开始递减，直到索引到1位置</td>
</tr>
<tr>
<td>forloop.revcounter()</td>
<td>索引从最大数开始递减，直到索引到0位置</td>
</tr>
<tr>
<td>forloop.first</td>
<td>当遍历的元素为第一项时为真</td>
</tr>
<tr>
<td>forloop.last</td>
<td>当遍历的元素为最后一-项时为真</td>
</tr>
</tbody></table>
<h4 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h4><p>即存在一个html文件的内容，可以在其他html中共用（如header和footer这些）</p>
<p>使用方法很简单：</p>
<ul>
<li>在index.html中使用<code>&#123;% extends "base.html" %&#125;</code>来继承base.html的代码</li>
<li><code>&#123;% block body %&#125;`在继承模板的基础上实现自定义模板内容
- `&#123;% endblock %&#125;</code>结束block标签</li>
</ul>
<p>相当于在共用模板中插入<code>&#123;% block body %&#125;`与`&#123;% endblock %&#125;</code>间的内容</p>
<h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>过滤器是对变量内容进行处理，把变量的数据格式与内容转化成我们想要的效果，其使用方法为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;variable|<span class="built_in">filter</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>过滤器处理变量variable，Django中有许多内置的过滤器</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>框架学习</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|django框架入门4</title>
    <url>/2020/04/06/Python-django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A84/</url>
    <content><![CDATA[<p>本次章节开始y学习Admin后台系统和Auth认证系统（已经是django最后的内容了，没想到我都写完了一个系列了……）</p>
<span id="more"></span>

<h3 id="Admin后台系统"><a href="#Admin后台系统" class="headerlink" title="Admin后台系统"></a>Admin后台系统</h3><p>admin后台系统即网站后台管理系统，主要用于对网站前台信息进行管理（简单来说就是对网站的数据库和文件进行快速操作和管理的系统）</p>
<h4 id="走进Admin"><a href="#走进Admin" class="headerlink" title="走进Admin"></a>走进Admin</h4><h5 id="1-admin配置"><a href="#1-admin配置" class="headerlink" title="1.admin配置"></a>1.admin配置</h5><p>当一个网站上线后，网站管理员通过网站后台系统对网站进行管理与维护。django内置了强大的admin后台系统</p>
<p>（1）在setting.py中默认启用了Admin后台</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">  <span class="comment">#admin的配置</span></span><br><span class="line">  <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>当网站不需要Admin后台，可以删除配置信息，减少程序对系统资源的占用</p>
<p>（2）在根目录的urls.py中可以看到admin的URL地址信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),    <span class="comment">#admin站点管理地址</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,include(<span class="string">&#x27;index.urls&#x27;</span>)),      <span class="comment">#首页地址</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>通过<a href="http://127.0.0.1:8000/admin/进入后台">http://127.0.0.1:8000/admin/进入后台</a></p>
<h5 id="2-创建用户"><a href="#2-创建用户" class="headerlink" title="2.创建用户"></a>2.创建用户</h5><p>要访问admin后台系统，首先需要用户账号和密码，在确保模型在数据库中有相应的数据表后：</p>
<p>（1）使用django的管理工具manage.py，输入命令行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">python manage.py create superuser</span><br></pre></td></tr></table></figure>

<p>用户名和邮箱地址可以为空，接下来就可以进入admin后台系统了</p>
<p>（2）登录进去后，发现都是英文，如果有需要可以通过添加中间件来转换成中文</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.locale.LocaleMiddleware&#x27;</span>, <span class="comment">#在此处添加，注意顺序</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h5 id="3-admin功能"><a href="#3-admin功能" class="headerlink" title="3.admin功能"></a>3.admin功能</h5><table>
<thead>
<tr>
<th>功能</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>站点管理</td>
<td>网站的App管理界面,主要管理Django的App下所定义的模型</td>
</tr>
<tr>
<td>认证和授权</td>
<td>内置的认证系统，也是项目的一一个App</td>
</tr>
<tr>
<td>用户和组</td>
<td>认证和授权所定义的模型，auth_ user和auth_user_groups</td>
</tr>
</tbody></table>
<h5 id="4-模型展示"><a href="#4-模型展示" class="headerlink" title="4.模型展示"></a>4.模型展示</h5><p>若想将index定义的模型展示到后台中，可以有以下两种方法，在app的admin.py中编写</p>
<p>（1）直接把模型注册到admin后台</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> . models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">admin.site.register(Product)</span><br></pre></td></tr></table></figure>

<p>简单但不常用的方法，日常开发通常使用类的方法</p>
<p>（2）通过类的继承进行注册</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> . models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#注册方法一，使用Python装饰器将ProductAdmin和模型Product绑定并注册到后台</span></span><br><span class="line"><span class="meta">@admin.register (<span class="params">Product</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductAdmin</span> (<span class="params">admin.ModelAdmin</span>) :</span></span><br><span class="line">    <span class="comment"># 设置显示的字段</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;weight&#x27;</span>, <span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注册方法二</span></span><br><span class="line">admin.site.register (Product,ProductAdmin)</span><br></pre></td></tr></table></figure>

<p>原理：</p>
<ul>
<li>自定义ProductAdmin类，使其继承ModelAdmin，ModelAdmin 主要设置模型。</li>
<li>将ProductAdmin类注册到Admin后台系统中有两种方法，两者都是将模型Product和ProductAdmin类绑定并注册到Admin后台系统。</li>
</ul>
<h4 id="admin的基本设置"><a href="#admin的基本设置" class="headerlink" title="admin的基本设置"></a>admin的基本设置</h4><h5 id="1-中文显示"><a href="#1-中文显示" class="headerlink" title="1.中文显示"></a>1.中文显示</h5><p>index和products的中文显示需要不同方法</p>
<p>（1）实现index中文显示，在<em>init</em>.py文件编写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django. apps <span class="keyword">import</span> AppConfig</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改App在Admin后台显示的名称</span></span><br><span class="line"><span class="comment">#default_app_config 的值来自apps.py的类名</span></span><br><span class="line">default_app_config = <span class="string">&#x27;index.IndexConfig&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取当前App的命名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_current_app_name</span>(<span class="params">_file</span>):</span></span><br><span class="line">    <span class="keyword">return</span> os.path.split(os.path.dirname(_file))[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#重写类IndexConfig</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexConfig</span> (<span class="params">AppConfig</span>):</span></span><br><span class="line">    name = get_current_app_name(__file__)</span><br><span class="line">    verbose_name = <span class="string">&#x27;网站首页&#x27;</span></span><br></pre></td></tr></table></figure>

<p>IndexConfig类中的verbose_name属性用于设置index的中文内容</p>
<p>（2）模型中文显示</p>
<p>在models.py中设置类Meta的类属性verbose_name_plural</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(<span class="string">&#x27;序号&#x27;</span>,primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(<span class="string">&#x27;名称&#x27;</span>,max_length=<span class="number">50</span>)</span><br><span class="line">    weight = models.CharField(<span class="string">&#x27;重量&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    size = models.CharField(<span class="string">&#x27;尺寸&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="built_in">type</span> = models.ForeignKey(Type, on_delete=models.CASCADE,verbose_name=<span class="string">&#x27;产品类型&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span> (<span class="params">self</span>) :</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    <span class="comment"># 如只设置verbose_name, 在Admin会显示为&quot;产品信息s&quot;</span></span><br><span class="line">    verbose_name = <span class="string">&#x27;产品信息&#x27;</span></span><br><span class="line">    verbose_name_plural = <span class="string">&#x27;产品信息&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>框架学习</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>硬件开发|stm32使用案例</title>
    <url>/2021/06/18/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-stm32%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041048103.png" alt="image-20210904104854742"></p>
<span id="more"></span>

<h3 id="GPIO库导入"><a href="#GPIO库导入" class="headerlink" title="GPIO库导入"></a>GPIO库导入</h3><p>添加<code>USE_STDPERIPH_DRIVER</code>到C/C++配置中</p>
<h3 id="点亮LED"><a href="#点亮LED" class="headerlink" title="点亮LED"></a>点亮LED</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个GPIO信息结构体（静态变量）</span></span><br><span class="line"><span class="keyword">static</span> GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1.打开GPIOB组的时钟（降低功耗）选择对应外设 */</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 配置开启端口号</span></span><br><span class="line">	<span class="comment">/* 2.配置为输出推挽（多个IO使用位或添加） */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;			<span class="comment">//引脚选择</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	<span class="comment">//端口输出速率（功耗）</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	<span class="comment">//端口模式：推挽输出</span></span><br><span class="line">	GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 选择外设并控制端口号输出信号</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		GPIO_ResetBits(GPIOB, GPIO_Pin_0);	<span class="comment">// PB1低电平</span></span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>定义GPIO_InitTypeDef类型结构体，可修改其端口配置</p>
<p><img src="/2021/06/18/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-stm32%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/C:%5CUsers%5Clinghao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210618200840443.png" alt="image-20210618200840443"></p>
</li>
<li><p>GPIO_Init函数选择输出外设，并指向端口配置</p>
</li>
<li><p>GPIO_ResetBits选择外设与端口，并输出低电平</p>
</li>
<li><p>GPIO_setBits选择外设与端口，并输出高电平</p>
</li>
</ul>
<h3 id="蜂鸣器"><a href="#蜂鸣器" class="headerlink" title="蜂鸣器"></a>蜂鸣器</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个GPIO信息结构体（静态变量）</span></span><br><span class="line"><span class="keyword">static</span> GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">5000000</span>;</span><br><span class="line">	<span class="keyword">while</span>(i--);	<span class="comment">// 没有任何意义，只是为了消耗时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 蜂鸣器初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BEEP_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/* 1.打开GPIOB组的时钟（降低功耗）选择对应外设 */</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 2.配置为输出推挽（多个IO使用位或添加） */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;			<span class="comment">//引脚选择</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	<span class="comment">//端口输出速率（功耗）</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	<span class="comment">//端口模式：推挽输出</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 3.给蜂鸣器初始化电平（不响）</span></span><br><span class="line">	GPIO_SetBits(GPIOA, GPIO_Pin_1);	<span class="comment">// 不响</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	BEEP_Init();	<span class="comment">// 初始化蜂鸣器</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		GPIO_ResetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">		delay();	<span class="comment">// 延时一段时间</span></span><br><span class="line">		</span><br><span class="line">		GPIO_SetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">		delay();	<span class="comment">// 延时一段时间</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>切换外设为A则可以选择到蜂鸣器（以开发板手册为准）</li>
</ul>
<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个GPIO信息结构体（静态变量）</span></span><br><span class="line"><span class="keyword">static</span> GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_ALL GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">5000000</span>;</span><br><span class="line">	<span class="keyword">while</span>(i--);	<span class="comment">// 没有任何意义，只是为了消耗时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LED初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/* 1.打开GPIOB组的时钟（降低功耗） */</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 2.关闭JTAG引脚映射（PA13/14/15 PB3/4）  */</span></span><br><span class="line">    GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 3.配置为输出推挽（多个IO使用位或添加） */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = LED_ALL;			<span class="comment">//引脚选择</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	<span class="comment">//端口输出速率（功耗）</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	<span class="comment">//端口模式：推挽输出</span></span><br><span class="line">	GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 4.初始化电平（不亮）</span></span><br><span class="line">	GPIO_SetBits(GPIOB, LED_ALL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按键初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KEY_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/* 1.打开GPIO组的时钟（降低功耗） */</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 2.配置为输入（多个IO使用位或添加） */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;			<span class="comment">//引脚选择</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	<span class="comment">// 按钮开关使用浮空输入模式</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LED_Init();		<span class="comment">// 初始化LED</span></span><br><span class="line">	KEY_Init();		<span class="comment">// 初始化按键</span></span><br><span class="line">	GPIO_SetBits(GPIOB, GPIO_Pin_1);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_7)==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			GPIO_ResetBits(GPIOB, GPIO_Pin_1);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			GPIO_SetBits(GPIOB, GPIO_Pin_1);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>浮空输入_IN_FLOATING ——浮空输入，IO的电平状态是不确定的，完全由外部输入决定；如果在该引脚悬空的情况下，读取该端口的电平是不确定的；</li>
<li>带上拉输入IPU——IO内部上拉电阻输入  ==悬空时，处于高电平状态</li>
<li>带下拉输入<em>IPD—— IO内部下拉电阻输入 ==悬空时，处于低电平状态</em></li>
<li>模拟输入AIN ——应用ADC模拟输入，或者低功耗下省电</li>
</ul>
<h3 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h3><h4 id="（1）串口通信电路连接"><a href="#（1）串口通信电路连接" class="headerlink" title="（1）串口通信电路连接"></a>（1）串口通信电路连接</h4><p>串口通信电路连接：</p>
<p><img src="/2021/06/18/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-stm32%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/C:%5CUsers%5Clinghao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210622112304168.png" alt="image-20210622112304168"></p>
<ul>
<li>12，78 为蓝牙串口（手机app）</li>
<li>34为串口调试</li>
<li>56 stm32芯片</li>
</ul>
<p>通讯对象将两边引脚短接即可</p>
<h4 id="（2）重写printf函数"><a href="#（2）重写printf函数" class="headerlink" title="（2）重写printf函数"></a>（2）重写printf函数</h4><p>重写printf函数使其可以将文本输出到串口</p>
<p>输出字符串到串口：</p>
<ul>
<li>配置相关库：</li>
</ul>
<p><img src="/2021/06/18/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-stm32%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/C:%5CUsers%5Clinghao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210622114338205.png" alt="image-20210622114338205"></p>
<ul>
<li>重新定义fputc函数，让printf输出数据到串口1<img src="/2021/06/18/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-stm32%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/C:%5CUsers%5Clinghao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210622114454922.png" alt="image-20210622114454922"></li>
</ul>
<h4 id="（3）串口单字符发送"><a href="#（3）串口单字符发送" class="headerlink" title="（3）串口单字符发送"></a>（3）串口单字符发送</h4><p>（芯片与串口通信）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO信息结构体初始化</span></span><br><span class="line"><span class="comment">// 配置IO口结构体</span></span><br><span class="line">GPIO_InitTypeDef   GPIO_InitStructure;</span><br><span class="line"><span class="comment">// 配置中断结构体</span></span><br><span class="line">EXTI_InitTypeDef   EXTI_InitStructure;</span><br><span class="line"><span class="comment">// 配置中断优先级结构体</span></span><br><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line"><span class="comment">// 配置串口结构题</span></span><br><span class="line">USART_InitTypeDef USART_InitStructure; </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置串口1--&gt;PA9+PA10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usart1_init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1.使能GPIO外设、IO复用时钟、USART2时钟 PA9 和PA10</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//2.配置GPIO + 初始化GPIO</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//  PA2   TX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//复用推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; <span class="comment">//  PA3   RX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  <span class="comment">//浮空输入   PA10  RX</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.配置USART1 + 初始化USART1</span></span><br><span class="line">	USART_InitStructure.USART_BaudRate = bound;<span class="comment">//波特率</span></span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//数据位8位</span></span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//停止位1位</span></span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶检验</span></span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line">	USART_Init(USART1, &amp;USART_InitStructure);		<span class="comment">//把配置信息加载到串口2</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//4.配置NVIC + 初始化NVIC </span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		<span class="comment">//选择串口2的中断</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>;		<span class="comment">//设置抢占优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			<span class="comment">//使能串口2的中断</span></span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);						<span class="comment">//把配置信息加载到中断</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//5.使能串口中断</span></span><br><span class="line">	USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//接收到数据触发中断</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//6.使能串口</span></span><br><span class="line">	USART_Cmd(USART1,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单字符发送到串口</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">    <span class="comment">// 配置串口比特率</span></span><br><span class="line">	usart1_init(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		USART_SendData(USART1,<span class="string">&#x27;h&#x27;</span>);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">		</span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		USART_SendData(USART1,<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">	</span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		USART_SendData(USART1,<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">	</span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		USART_SendData(USART1,<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">		</span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		USART_SendData(USART1,<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">		</span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		USART_SendData(USART1,<span class="string">&#x27;\r&#x27;</span>);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">	</span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		USART_SendData(USART1,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">		</span><br><span class="line">		delay();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="（4）使用printf发送字符串到串口"><a href="#（4）使用printf发送字符串到串口" class="headerlink" title="（4）使用printf发送字符串到串口"></a>（4）使用printf发送字符串到串口</h4><p>（芯片与串口通信）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO信息结构体初始化</span></span><br><span class="line"><span class="comment">// 配置IO口结构体</span></span><br><span class="line">GPIO_InitTypeDef   GPIO_InitStructure;</span><br><span class="line"><span class="comment">// 配置中断结构体</span></span><br><span class="line">EXTI_InitTypeDef   EXTI_InitStructure;</span><br><span class="line"><span class="comment">// 配置中断优先级结构体</span></span><br><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line"><span class="comment">// 配置串口结构题</span></span><br><span class="line">USART_InitTypeDef USART_InitStructure; </span><br><span class="line"></span><br><span class="line"><span class="comment">//重定义fputc函数---》每次发送一个字符到</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> ch, FILE *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//发送字符到串口1</span></span><br><span class="line">	USART_SendData(USART1,ch);</span><br><span class="line">	<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置串口1--&gt;PA9+PA10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usart1_init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1.使能GPIO外设、IO复用时钟、USART2时钟 PA9 和PA10</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//2.配置GPIO + 初始化GPIO</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//  PA2   TX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//复用推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; <span class="comment">//  PA3   RX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  <span class="comment">//浮空输入   PA10  RX</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.配置USART1 + 初始化USART1</span></span><br><span class="line">	USART_InitStructure.USART_BaudRate = bound;<span class="comment">//波特率</span></span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//数据位8位</span></span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//停止位1位</span></span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶检验</span></span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line">	USART_Init(USART1, &amp;USART_InitStructure);		<span class="comment">//把配置信息加载到串口2</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//4.配置NVIC + 初始化NVIC </span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		<span class="comment">//选择串口2的中断</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>;		<span class="comment">//设置抢占优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			<span class="comment">//使能串口2的中断</span></span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);						<span class="comment">//把配置信息加载到中断</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//5.使能串口中断</span></span><br><span class="line">	USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//接收到数据触发中断</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//6.使能串口</span></span><br><span class="line">	USART_Cmd(USART1,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// printf发送字符串到串口</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	usart1_init(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123; </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;good\r\n&quot;</span>);</span><br><span class="line">		delay();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="（5）手机蓝牙与芯片通信"><a href="#（5）手机蓝牙与芯片通信" class="headerlink" title="（5）手机蓝牙与芯片通信"></a>（5）手机蓝牙与芯片通信</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO信息结构体体初始化</span></span><br><span class="line">GPIO_InitTypeDef   GPIO_InitStructure;</span><br><span class="line">EXTI_InitTypeDef   EXTI_InitStructure;</span><br><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure; <span class="comment">//串口配置的信息结构体</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//led-》GPIO信息结构体初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//关闭引脚JTAG复用功能--&gt;PA13、PA14、PA15、PB3、PB4</span></span><br><span class="line">	RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* GPIOB Periph clock enable */</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Configure PD0 and PD2 in output pushpull mode */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = <span class="number">0xff</span> ;<span class="comment">//GPIO_Pin_0~GPIO_Pin_7</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//设置运行频率50MHz</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; <span class="comment">//设置推挽输出</span></span><br><span class="line">	GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_SetBits(GPIOB, <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">10000</span>; j++);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置串口1--&gt;PA9+PA10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usart1_init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1.使能GPIO外设、IO复用时钟、USART2时钟 PA9 和PA10</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//2.配置GPIO + 初始化GPIO</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//  PA2   TX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//复用推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; <span class="comment">//  PA3   RX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  <span class="comment">//浮空输入   PA10  RX</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.配置USART1 + 初始化USART1</span></span><br><span class="line">	USART_InitStructure.USART_BaudRate = bound;<span class="comment">//波特率</span></span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//数据位8位</span></span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//停止位1位</span></span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶检验</span></span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line">	USART_Init(USART1, &amp;USART_InitStructure);		<span class="comment">//把配置信息加载到串口2</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//4.配置NVIC + 初始化NVIC </span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		<span class="comment">//选择串口2的中断</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>;		<span class="comment">//设置抢占优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			<span class="comment">//使能串口2的中断</span></span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);						<span class="comment">//把配置信息加载到中断</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//5.使能串口中断</span></span><br><span class="line">	USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//接收到数据触发中断</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//6.使能串口</span></span><br><span class="line">	USART_Cmd(USART1,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	usart1_init(<span class="number">9600</span>);</span><br><span class="line">	led_init();</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;	</span><br><span class="line">		delay();</span><br><span class="line">        <span class="comment">// data接收来自蓝牙通信的数据（手机app）</span></span><br><span class="line">		<span class="keyword">if</span>(data == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			GPIO_ResetBits(GPIOB, GPIO_Pin_0);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(data == <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			GPIO_SetBits(GPIOB, GPIO_Pin_0);			</span><br><span class="line">		&#125;		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//串口1中断服务函数（可以让主函数中断其他事物回来处理串口1，从而接收到蓝牙发送的数据data）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//判断中断是否产生</span></span><br><span class="line">	<span class="keyword">if</span>( USART_GetITStatus(USART1,USART_IT_RXNE) == SET )<span class="comment">//如果接收到数据</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//接收数据</span></span><br><span class="line">		data = USART_ReceiveData(USART1);<span class="comment">//接收从USART2发送过来的中断，每次接收1个字节</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>( USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		<span class="comment">//USART_SendData(USART1,n);</span></span><br><span class="line">		<span class="comment">//while(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span></span><br><span class="line">	</span><br><span class="line">		<span class="comment">//清空中断标志位</span></span><br><span class="line">		USART_ClearITPendingBit(USART1,USART_IT_RXNE);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="液晶屏显示"><a href="#液晶屏显示" class="headerlink" title="液晶屏显示"></a>液晶屏显示</h3><h4 id="（1）工具函数与文件"><a href="#（1）工具函数与文件" class="headerlink" title="（1）工具函数与文件"></a>（1）工具函数与文件</h4><h5 id="液晶显示工具包"><a href="#液晶显示工具包" class="headerlink" title="液晶显示工具包"></a>液晶显示工具包</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* oled.c文件实现液晶屏文字显示 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oledfont.h&quot;</span>  	 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SysTick.h&quot;</span></span></span><br><span class="line">  	   </span><br><span class="line">u8 OLED_GRAM[<span class="number">128</span>][<span class="number">8</span>];	 </span><br><span class="line"></span><br><span class="line"><span class="comment">//更新显存到LCD		 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Refresh_Gram</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u8 i,n;		    </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)  </span><br><span class="line">	&#123;  </span><br><span class="line">		OLED_WR_Byte (<span class="number">0xb0</span>+i,OLED_CMD);    <span class="comment">//设置页地址（0~7）</span></span><br><span class="line">		OLED_WR_Byte (<span class="number">0x00</span>,OLED_CMD);      <span class="comment">//设置显示位置—列低地址</span></span><br><span class="line">		OLED_WR_Byte (<span class="number">0x10</span>,OLED_CMD);      <span class="comment">//设置显示位置—列高地址   </span></span><br><span class="line">		<span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); </span><br><span class="line">	&#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向SSD1306写入一个字节。</span></span><br><span class="line"><span class="comment">//dat:要写入的数据/命令</span></span><br><span class="line"><span class="comment">//cmd:数据/命令标志 0,表示命令;1,表示数据;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_WR_Byte</span><span class="params">(u8 dat,u8 cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	u8 i;			  </span><br><span class="line">	OLED_RS=cmd; <span class="comment">//写命令 </span></span><br><span class="line">	OLED_CS=<span class="number">0</span>;		  </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">	&#123;			  </span><br><span class="line">		OLED_SCLK=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(dat&amp;<span class="number">0x80</span>)OLED_SDIN=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> OLED_SDIN=<span class="number">0</span>;</span><br><span class="line">		OLED_SCLK=<span class="number">1</span>;</span><br><span class="line">		dat&lt;&lt;=<span class="number">1</span>;   </span><br><span class="line">	&#125;				 </span><br><span class="line">	OLED_CS=<span class="number">1</span>;		  </span><br><span class="line">	OLED_RS=<span class="number">1</span>;   	  </span><br><span class="line">&#125; </span><br><span class="line"> 	  </span><br><span class="line"><span class="comment">//开启OLED显示    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Display_On</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0X14</span>,OLED_CMD);  <span class="comment">//DCDC ON</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0XAF</span>,OLED_CMD);  <span class="comment">//DISPLAY ON</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭OLED显示     </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Display_Off</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0X10</span>,OLED_CMD);  <span class="comment">//DCDC OFF</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0XAE</span>,OLED_CMD);  <span class="comment">//DISPLAY OFF</span></span><br><span class="line">&#125;		</span><br><span class="line"></span><br><span class="line"><span class="comment">//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Clear</span><span class="params">(<span class="keyword">void</span>)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">	u8 i,n;  </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)<span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)OLED_GRAM[n][i]=<span class="number">0X00</span>;  </span><br><span class="line">	OLED_Refresh_Gram();<span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//画点 </span></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="comment">//t:1 填充 0,清空				   </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_DrawPoint</span><span class="params">(u8 x,u8 y,u8 t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u8 pos,bx,temp=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">127</span>||y&gt;<span class="number">63</span>)<span class="keyword">return</span>;<span class="comment">//超出范围了.</span></span><br><span class="line">	pos=<span class="number">7</span>-y/<span class="number">8</span>;</span><br><span class="line">	bx=y%<span class="number">8</span>;</span><br><span class="line">	temp=<span class="number">1</span>&lt;&lt;(<span class="number">7</span>-bx);</span><br><span class="line">	<span class="keyword">if</span>(t)OLED_GRAM[x][pos]|=temp;</span><br><span class="line">	<span class="keyword">else</span> OLED_GRAM[x][pos]&amp;=~temp;	    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x1,y1,x2,y2 填充区域的对角坐标</span></span><br><span class="line"><span class="comment">//确保x1&lt;=x2;y1&lt;=y2 0&lt;=x1&lt;=127 0&lt;=y1&lt;=63	 	 </span></span><br><span class="line"><span class="comment">//dot:0,清空;1,填充	  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Fill</span><span class="params">(u8 x1,u8 y1,u8 x2,u8 y2,u8 dot)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">	u8 x,y;  </span><br><span class="line">	<span class="keyword">for</span>(x=x1;x&lt;=x2;x++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(y=y1;y&lt;=y2;y++)OLED_DrawPoint(x,y,dot);</span><br><span class="line">	&#125;													    </span><br><span class="line">	OLED_Refresh_Gram();<span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在指定位置显示一个字符,包括部分字符</span></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="comment">//mode:0,反白显示;1,正常显示				 </span></span><br><span class="line"><span class="comment">//size:选择字体 16/12 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowChar</span><span class="params">(u8 x,u8 y,u8 chr,u8 size,u8 mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;      			    </span><br><span class="line">	u8 temp,t,t1;</span><br><span class="line">	u8 y0=y;</span><br><span class="line">	u8 csize=(size/<span class="number">8</span>+((size%<span class="number">8</span>)?<span class="number">1</span>:<span class="number">0</span>))*(size/<span class="number">2</span>);		<span class="comment">//得到字体一个字符对应点阵集所占的字节数</span></span><br><span class="line">	chr=chr-<span class="string">&#x27; &#x27;</span>;<span class="comment">//得到偏移后的值		 </span></span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;csize;t++)</span><br><span class="line">    &#123;   </span><br><span class="line">		<span class="keyword">if</span>(size==<span class="number">12</span>)temp=asc2_1206[chr][t]; 	 	<span class="comment">//调用1206字体</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(size==<span class="number">16</span>)temp=asc2_1608[chr][t];	<span class="comment">//调用1608字体</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(size==<span class="number">24</span>)temp=asc2_2412[chr][t];	<span class="comment">//调用2412字体</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span>;								<span class="comment">//没有的字库</span></span><br><span class="line">        <span class="keyword">for</span>(t1=<span class="number">0</span>;t1&lt;<span class="number">8</span>;t1++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(temp&amp;<span class="number">0x80</span>)OLED_DrawPoint(x,y,mode);</span><br><span class="line">			<span class="keyword">else</span> OLED_DrawPoint(x,y,!mode);</span><br><span class="line">			temp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">			y++;</span><br><span class="line">			<span class="keyword">if</span>((y-y0)==size)</span><br><span class="line">			&#123;</span><br><span class="line">				y=y0;</span><br><span class="line">				x++;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;  	 </span><br><span class="line">    &#125;          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//m^n函数</span></span><br><span class="line"><span class="function">u32 <span class="title">mypow</span><span class="params">(u8 m,u8 n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u32 result=<span class="number">1</span>;	 </span><br><span class="line">	<span class="keyword">while</span>(n--)result*=m;    </span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;				  </span><br><span class="line"><span class="comment">//显示2个数字</span></span><br><span class="line"><span class="comment">//x,y :起点坐标	 </span></span><br><span class="line"><span class="comment">//len :数字的位数</span></span><br><span class="line"><span class="comment">//size:字体大小</span></span><br><span class="line"><span class="comment">//mode:模式	0,填充模式;1,叠加模式</span></span><br><span class="line"><span class="comment">//num:数值(0~4294967295);	 		  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowNum</span><span class="params">(u8 x,u8 y,u32 num,u8 len,u8 size)</span></span></span><br><span class="line"><span class="function"></span>&#123;         	</span><br><span class="line">	u8 t,temp;</span><br><span class="line">	u8 enshow=<span class="number">0</span>;						   </span><br><span class="line">	<span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">	&#123;</span><br><span class="line">		temp=(num/mypow(<span class="number">10</span>,len-t<span class="number">-1</span>))%<span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span>(enshow==<span class="number">0</span>&amp;&amp;t&lt;(len<span class="number">-1</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(temp==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				OLED_ShowChar(x+(size/<span class="number">2</span>)*t,y,<span class="string">&#x27; &#x27;</span>,size,<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> enshow=<span class="number">1</span>; </span><br><span class="line">		 	 </span><br><span class="line">		&#125;</span><br><span class="line">	 	OLED_ShowChar(x+(size/<span class="number">2</span>)*t,y,temp+<span class="string">&#x27;0&#x27;</span>,size,<span class="number">1</span>); </span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//显示字符串</span></span><br><span class="line"><span class="comment">//x,y:起点坐标  </span></span><br><span class="line"><span class="comment">//size:字体大小 </span></span><br><span class="line"><span class="comment">//*p:字符串起始地址 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowString</span><span class="params">(u8 x,u8 y,<span class="keyword">const</span> u8 *p,u8 size)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">    <span class="keyword">while</span>((*p&lt;=<span class="string">&#x27;~&#x27;</span>)&amp;&amp;(*p&gt;=<span class="string">&#x27; &#x27;</span>))<span class="comment">//判断是不是非法字符!</span></span><br><span class="line">    &#123;       </span><br><span class="line">        <span class="keyword">if</span>(x&gt;(<span class="number">128</span>-(size/<span class="number">2</span>)))&#123;x=<span class="number">0</span>;y+=size;&#125;</span><br><span class="line">        <span class="keyword">if</span>(y&gt;(<span class="number">64</span>-size))&#123;y=x=<span class="number">0</span>;OLED_Clear();&#125;</span><br><span class="line">        OLED_ShowChar(x,y,*p,size,<span class="number">1</span>);	 </span><br><span class="line">        x+=size/<span class="number">2</span>;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;  </span><br><span class="line">	</span><br><span class="line">&#125;	</span><br><span class="line"><span class="comment">//初始化SSD1306					    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; 	 				 	 					    </span><br><span class="line">	GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line">  	  </span><br><span class="line">	RCC_APB2PeriphClockCmd(	RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOC, ENABLE );</span><br><span class="line">		  </span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 <span class="comment">//推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);						    	 </span><br><span class="line"> 	GPIO_SetBits(GPIOA,GPIO_Pin_4|GPIO_Pin_6|GPIO_Pin_3);	<span class="comment">//拉高电平</span></span><br><span class="line">		  </span><br><span class="line">	OLED_WR_Byte(<span class="number">0xAE</span>,OLED_CMD); <span class="comment">//关闭显示</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xD5</span>,OLED_CMD); <span class="comment">//设置时钟分频因子,震荡频率</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">80</span>,OLED_CMD);   <span class="comment">//[3:0],分频因子;[7:4],震荡频率</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA8</span>,OLED_CMD); <span class="comment">//设置驱动路数</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0X3F</span>,OLED_CMD); <span class="comment">//默认0X3F(1/64) </span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xD3</span>,OLED_CMD); <span class="comment">//设置显示偏移</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0X00</span>,OLED_CMD); <span class="comment">//默认为0</span></span><br><span class="line"></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x40</span>,OLED_CMD); <span class="comment">//设置显示开始行 [5:0],行数.</span></span><br><span class="line">													    </span><br><span class="line">	OLED_WR_Byte(<span class="number">0x8D</span>,OLED_CMD); <span class="comment">//电荷泵设置</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x14</span>,OLED_CMD); <span class="comment">//bit2，开启/关闭</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x20</span>,OLED_CMD); <span class="comment">//设置内存地址模式</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x02</span>,OLED_CMD); <span class="comment">//[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA1</span>,OLED_CMD); <span class="comment">//段重定义设置,bit0:0,0-&gt;0;1,0-&gt;127;</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xC0</span>,OLED_CMD); <span class="comment">//设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]-&gt;COM0;N:驱动路数</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xDA</span>,OLED_CMD); <span class="comment">//设置COM硬件引脚配置</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x12</span>,OLED_CMD); <span class="comment">//[5:4]配置</span></span><br><span class="line">		 </span><br><span class="line">	OLED_WR_Byte(<span class="number">0x81</span>,OLED_CMD); <span class="comment">//对比度设置</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xEF</span>,OLED_CMD); <span class="comment">//1~255;默认0X7F (亮度设置,越大越亮)</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xD9</span>,OLED_CMD); <span class="comment">//设置预充电周期</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xf1</span>,OLED_CMD); <span class="comment">//[3:0],PHASE 1;[7:4],PHASE 2;</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xDB</span>,OLED_CMD); <span class="comment">//设置VCOMH 电压倍率</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x30</span>,OLED_CMD); <span class="comment">//[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;</span></span><br><span class="line"></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA4</span>,OLED_CMD); <span class="comment">//全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA6</span>,OLED_CMD); <span class="comment">//设置显示方式;bit0:1,反相显示;0,正常显示	    						   </span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xAF</span>,OLED_CMD); <span class="comment">//开启显示	 </span></span><br><span class="line">	OLED_Clear();</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h5 id="精准延时工具包"><a href="#精准延时工具包" class="headerlink" title="精准延时工具包"></a>精准延时工具包</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*SysTick.c文件实现精准延时函数*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SysTick.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> u8  fac_us=<span class="number">0</span>;							<span class="comment">//us延时倍乘数			   </span></span><br><span class="line"><span class="keyword">static</span> u16 fac_ms=<span class="number">0</span>;							<span class="comment">//ms延时倍乘数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化延迟函数</span></span><br><span class="line"><span class="comment">//SYSTICK的时钟固定为AHB时钟的1/8</span></span><br><span class="line"><span class="comment">//SYSCLK:系统时钟频率</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Init</span><span class="params">(u8 SYSCLK)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); </span><br><span class="line">	fac_us=SYSCLK/<span class="number">8</span>;					</span><br><span class="line">	fac_ms=(u16)fac_us*<span class="number">1000</span>;				   </span><br><span class="line">&#125;								    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u32 nus)</span></span></span><br><span class="line"><span class="function"></span>&#123;		</span><br><span class="line">	u32 temp;	    	 </span><br><span class="line">	SysTick-&gt;LOAD=nus*fac_us; <span class="comment">//时间加载	  		 </span></span><br><span class="line">	SysTick-&gt;VAL=<span class="number">0x00</span>;        <span class="comment">//清空计数器</span></span><br><span class="line">	SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk ;          <span class="comment">//开始倒数	 </span></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		temp=SysTick-&gt;CTRL;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(temp&amp;<span class="number">0x01</span>&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)));<span class="comment">//等待时间到达   </span></span><br><span class="line">	SysTick-&gt;CTRL&amp;=~SysTick_CTRL_ENABLE_Msk;       <span class="comment">//关闭计数器</span></span><br><span class="line">	SysTick-&gt;VAL =<span class="number">0X00</span>;       <span class="comment">//清空计数器	 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时nms</span></span><br><span class="line"><span class="comment">//注意nms的范围</span></span><br><span class="line"><span class="comment">//SysTick-&gt;LOAD为24位寄存器,所以,最大延时为:</span></span><br><span class="line"><span class="comment">//nms&lt;=0xffffff*8*1000/SYSCLK</span></span><br><span class="line"><span class="comment">//SYSCLK单位为Hz,nms单位为ms</span></span><br><span class="line"><span class="comment">//对72M条件下,nms&lt;=1864 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u16 nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;	 		  	  </span><br><span class="line">	u32 temp;		   </span><br><span class="line">	SysTick-&gt;LOAD=(u32)nms*fac_ms;<span class="comment">//时间加载(SysTick-&gt;LOAD为24bit)</span></span><br><span class="line">	SysTick-&gt;VAL =<span class="number">0x00</span>;           <span class="comment">//清空计数器</span></span><br><span class="line">	SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk ;          <span class="comment">//开始倒数  </span></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		temp=SysTick-&gt;CTRL;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(temp&amp;<span class="number">0x01</span>&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)));<span class="comment">//等待时间到达   </span></span><br><span class="line">	SysTick-&gt;CTRL&amp;=~SysTick_CTRL_ENABLE_Msk;       <span class="comment">//关闭计数器</span></span><br><span class="line">	SysTick-&gt;VAL =<span class="number">0X00</span>;       <span class="comment">//清空计数器	  	    </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="（2）数字与字母显示"><a href="#（2）数字与字母显示" class="headerlink" title="（2）数字与字母显示"></a>（2）数字与字母显示</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">1000</span>;</span><br><span class="line">	u8 buf[<span class="number">10</span>] = <span class="string">&quot;ZhangSan&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	SysTick_Init(<span class="number">72</span>);	<span class="comment">// 初始化延时（72MHz芯片主频）</span></span><br><span class="line">	OLED_Init();	<span class="comment">//  初始化OLED</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">			</span><br><span class="line">		OLED_ShowNum(<span class="number">0</span>,<span class="number">0</span>,num,<span class="number">4</span>,<span class="number">16</span>);<span class="comment">//显示数字 </span></span><br><span class="line">		OLED_ShowString(<span class="number">0</span>,<span class="number">16</span>,buf,<span class="number">16</span>); </span><br><span class="line">		OLED_ShowChar(<span class="number">50</span>,<span class="number">0</span>,<span class="string">&#x27;S&#x27;</span>, <span class="number">16</span>, <span class="number">1</span>);</span><br><span class="line">		OLED_Refresh_Gram();    <span class="comment">//更新数据到OLED  </span></span><br><span class="line">		</span><br><span class="line">			</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>调用SysTick_Init()函数延时规定的时间</p>
</li>
<li><p>调用oled.c定义的OLED_ShowNum等方法</p>
</li>
<li><p>相关参数可以查看oled.c内的定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//x,y :起点坐标	</span></span><br><span class="line"><span class="comment">// num or char : 要显示的数据内容或地址</span></span><br><span class="line"><span class="comment">// len字长（一般填16）</span></span><br><span class="line"><span class="comment">// size：字体大小（一般填16）</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="（3）汉字显示"><a href="#（3）汉字显示" class="headerlink" title="（3）汉字显示"></a>（3）汉字显示</h4><h5 id="延时工具包"><a href="#延时工具包" class="headerlink" title="延时工具包"></a>延时工具包</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////// 	 </span></span><br><span class="line"><span class="comment">//如果使用ucos,则包括下面的头文件即可.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_UCOS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;includes.h&quot;</span>					<span class="comment">//ucos 使用	  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> u8  fac_us=<span class="number">0</span>;<span class="comment">//us延时倍乘数</span></span><br><span class="line"><span class="keyword">static</span> u16 fac_ms=<span class="number">0</span>;<span class="comment">//ms延时倍乘数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_CRITICAL_METHOD 	<span class="comment">//如果OS_CRITICAL_METHOD定义了,说明使用ucosII了.</span></span></span><br><span class="line"><span class="comment">//systick中断服务函数,使用ucos时用到</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;				   </span><br><span class="line">	OSIntEnter();		<span class="comment">//进入中断</span></span><br><span class="line">    OSTimeTick();       <span class="comment">//调用ucos的时钟服务程序               </span></span><br><span class="line">    OSIntExit();        <span class="comment">//触发任务切换软中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化延迟函数</span></span><br><span class="line"><span class="comment">//当使用ucos的时候,此函数会初始化ucos的时钟节拍</span></span><br><span class="line"><span class="comment">//SYSTICK的时钟固定为HCLK时钟的1/8</span></span><br><span class="line"><span class="comment">//SYSCLK:系统时钟</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_init</span><span class="params">()</span>	 </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_CRITICAL_METHOD 	<span class="comment">//如果OS_CRITICAL_METHOD定义了,说明使用ucosII了.</span></span></span><br><span class="line">	u32 reload;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);	<span class="comment">//选择外部时钟  HCLK/8</span></span><br><span class="line">	fac_us=SystemCoreClock/<span class="number">8000000</span>;	<span class="comment">//为系统时钟的1/8  </span></span><br><span class="line">	 </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_CRITICAL_METHOD 	<span class="comment">//如果OS_CRITICAL_METHOD定义了,说明使用ucosII了.</span></span></span><br><span class="line">	reload=SystemCoreClock/<span class="number">8000000</span>;		<span class="comment">//每秒钟的计数次数 单位为K	   </span></span><br><span class="line">	reload*=<span class="number">1000000</span>/OS_TICKS_PER_SEC;<span class="comment">//根据OS_TICKS_PER_SEC设定溢出时间</span></span><br><span class="line">							<span class="comment">//reload为24位寄存器,最大值:16777216,在72M下,约合1.86s左右	</span></span><br><span class="line">	fac_ms=<span class="number">1000</span>/OS_TICKS_PER_SEC;<span class="comment">//代表ucos可以延时的最少单位	   </span></span><br><span class="line">	SysTick-&gt;CTRL|=SysTick_CTRL_TICKINT_Msk;   	<span class="comment">//开启SYSTICK中断</span></span><br><span class="line">	SysTick-&gt;LOAD=reload; 	<span class="comment">//每1/OS_TICKS_PER_SEC秒中断一次	</span></span><br><span class="line">	SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk;   	<span class="comment">//开启SYSTICK    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">	fac_ms=(u16)fac_us*<span class="number">1000</span>;<span class="comment">//非ucos下,代表每个ms需要的systick时钟数   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;								    </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_CRITICAL_METHOD	<span class="comment">//使用了ucos</span></span></span><br><span class="line"><span class="comment">//延时nus</span></span><br><span class="line"><span class="comment">//nus为要延时的us数.		    								   </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u32 nus)</span></span></span><br><span class="line"><span class="function"></span>&#123;		</span><br><span class="line">	u32 ticks;</span><br><span class="line">	u32 told,tnow,tcnt=<span class="number">0</span>;</span><br><span class="line">	u32 reload=SysTick-&gt;LOAD;	<span class="comment">//LOAD的值	    	 </span></span><br><span class="line">	ticks=nus*fac_us; 			<span class="comment">//需要的节拍数	  		 </span></span><br><span class="line">	tcnt=<span class="number">0</span>;</span><br><span class="line">	told=SysTick-&gt;VAL;        	<span class="comment">//刚进入时的计数器值</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		tnow=SysTick-&gt;VAL;	</span><br><span class="line">		<span class="keyword">if</span>(tnow!=told)</span><br><span class="line">		&#123;	    </span><br><span class="line">			<span class="keyword">if</span>(tnow&lt;told)tcnt+=told-tnow;<span class="comment">//这里注意一下SYSTICK是一个递减的计数器就可以了.</span></span><br><span class="line">			<span class="keyword">else</span> tcnt+=reload-tnow+told;	    </span><br><span class="line">			told=tnow;</span><br><span class="line">			<span class="keyword">if</span>(tcnt&gt;=ticks)<span class="keyword">break</span>;<span class="comment">//时间超过/等于要延迟的时间,则退出.</span></span><br><span class="line">		&#125;  </span><br><span class="line">	&#125;; 									    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时nms</span></span><br><span class="line"><span class="comment">//nms:要延时的ms数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u16 nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="keyword">if</span>(OSRunning==TRUE)<span class="comment">//如果os已经在跑了	    </span></span><br><span class="line">	&#123;		  </span><br><span class="line">		<span class="keyword">if</span>(nms&gt;=fac_ms)<span class="comment">//延时的时间大于ucos的最少时间周期 </span></span><br><span class="line">		&#123;</span><br><span class="line">   			OSTimeDly(nms/fac_ms);<span class="comment">//ucos延时</span></span><br><span class="line">		&#125;</span><br><span class="line">		nms%=fac_ms;				<span class="comment">//ucos已经无法提供这么小的延时了,采用普通方式延时    </span></span><br><span class="line">	&#125;</span><br><span class="line">	delay_us((u32)(nms*<span class="number">1000</span>));	<span class="comment">//普通方式延时,此时ucos无法启动调度.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span><span class="comment">//不用ucos时</span></span></span><br><span class="line"><span class="comment">//延时nus</span></span><br><span class="line"><span class="comment">//nus为要延时的us数.		    								   </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u32 nus)</span></span></span><br><span class="line"><span class="function"></span>&#123;		</span><br><span class="line">	u32 temp;	    	 </span><br><span class="line">	SysTick-&gt;LOAD=nus*fac_us; <span class="comment">//时间加载	  		 </span></span><br><span class="line">	SysTick-&gt;VAL=<span class="number">0x00</span>;        <span class="comment">//清空计数器</span></span><br><span class="line">	SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk ;          <span class="comment">//开始倒数	 </span></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		temp=SysTick-&gt;CTRL;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(temp&amp;<span class="number">0x01</span>&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)));<span class="comment">//等待时间到达   </span></span><br><span class="line">	SysTick-&gt;CTRL&amp;=~SysTick_CTRL_ENABLE_Msk;       <span class="comment">//关闭计数器</span></span><br><span class="line">	SysTick-&gt;VAL =<span class="number">0X00</span>;       <span class="comment">//清空计数器	 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时nms</span></span><br><span class="line"><span class="comment">//注意nms的范围</span></span><br><span class="line"><span class="comment">//SysTick-&gt;LOAD为24位寄存器,所以,最大延时为:</span></span><br><span class="line"><span class="comment">//nms&lt;=0xffffff*8*1000/SYSCLK</span></span><br><span class="line"><span class="comment">//SYSCLK单位为Hz,nms单位为ms</span></span><br><span class="line"><span class="comment">//对72M条件下,nms&lt;=1864 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u16 nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;	 		  	  </span><br><span class="line">	u32 temp;		   </span><br><span class="line">	SysTick-&gt;LOAD=(u32)nms*fac_ms;<span class="comment">//时间加载(SysTick-&gt;LOAD为24bit)</span></span><br><span class="line">	SysTick-&gt;VAL =<span class="number">0x00</span>;           <span class="comment">//清空计数器</span></span><br><span class="line">	SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk ;          <span class="comment">//开始倒数  </span></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		temp=SysTick-&gt;CTRL;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(temp&amp;<span class="number">0x01</span>&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)));<span class="comment">//等待时间到达   </span></span><br><span class="line">	SysTick-&gt;CTRL&amp;=~SysTick_CTRL_ENABLE_Msk;       <span class="comment">//关闭计数器</span></span><br><span class="line">	SysTick-&gt;VAL =<span class="number">0X00</span>;       <span class="comment">//清空计数器	  	    </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="液晶显示工具包-1"><a href="#液晶显示工具包-1" class="headerlink" title="液晶显示工具包"></a>液晶显示工具包</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oledfont.h&quot;</span>  	 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="comment">//OLED的显存</span></span><br><span class="line"><span class="comment">//存放格式如下.</span></span><br><span class="line"><span class="comment">//[0]0 1 2 3 ... 127	</span></span><br><span class="line"><span class="comment">//[1]0 1 2 3 ... 127	</span></span><br><span class="line"><span class="comment">//[2]0 1 2 3 ... 127	</span></span><br><span class="line"><span class="comment">//[3]0 1 2 3 ... 127	</span></span><br><span class="line"><span class="comment">//[4]0 1 2 3 ... 127	</span></span><br><span class="line"><span class="comment">//[5]0 1 2 3 ... 127	</span></span><br><span class="line"><span class="comment">//[6]0 1 2 3 ... 127	</span></span><br><span class="line"><span class="comment">//[7]0 1 2 3 ... 127 			   </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> OLED_MODE==1</span></span><br><span class="line"><span class="comment">//向SSD1106写入一个字节。</span></span><br><span class="line"><span class="comment">//dat:要写入的数据/命令</span></span><br><span class="line"><span class="comment">//cmd:数据/命令标志 0,表示命令;1,表示数据;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_WR_Byte</span><span class="params">(u8 dat,u8 cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DATAOUT(dat);	    </span><br><span class="line">	<span class="keyword">if</span>(cmd)</span><br><span class="line">	  OLED_DC_Set();</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	  OLED_DC_Clr();		   </span><br><span class="line">	OLED_CS_Clr();</span><br><span class="line">	OLED_WR_Clr();	 </span><br><span class="line">	OLED_WR_Set();</span><br><span class="line">	OLED_CS_Set();	  </span><br><span class="line">	OLED_DC_Set();	 </span><br><span class="line">&#125; 	    	    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">//向SSD1106写入一个字节。</span></span><br><span class="line"><span class="comment">//dat:要写入的数据/命令</span></span><br><span class="line"><span class="comment">//cmd:数据/命令标志 0,表示命令;1,表示数据;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_WR_Byte</span><span class="params">(u8 dat,u8 cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	u8 i;			  </span><br><span class="line">	<span class="keyword">if</span>(cmd)</span><br><span class="line">	  OLED_DC_Set();</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	  OLED_DC_Clr();		  </span><br><span class="line">	OLED_CS_Clr();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">	&#123;			  </span><br><span class="line">		OLED_SCLK_Clr();</span><br><span class="line">		<span class="keyword">if</span>(dat&amp;<span class="number">0x80</span>)</span><br><span class="line">		   OLED_SDIN_Set();</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		   OLED_SDIN_Clr();</span><br><span class="line">		OLED_SCLK_Set();</span><br><span class="line">		dat&lt;&lt;=<span class="number">1</span>;   </span><br><span class="line">	&#125;				 		  </span><br><span class="line">	OLED_CS_Set();</span><br><span class="line">	OLED_DC_Set();   	  </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OLED_Set_Pos</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> x, <span class="keyword">unsigned</span> <span class="keyword">char</span> y)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">	OLED_WR_Byte(<span class="number">0xb0</span>+y,OLED_CMD);</span><br><span class="line">	OLED_WR_Byte(((x&amp;<span class="number">0xf0</span>)&gt;&gt;<span class="number">4</span>)|<span class="number">0x10</span>,OLED_CMD);</span><br><span class="line">	OLED_WR_Byte((x&amp;<span class="number">0x0f</span>)|<span class="number">0x01</span>,OLED_CMD); </span><br><span class="line">&#125;   	  </span><br><span class="line"><span class="comment">//开启OLED显示    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Display_On</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0X14</span>,OLED_CMD);  <span class="comment">//DCDC ON</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0XAF</span>,OLED_CMD);  <span class="comment">//DISPLAY ON</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭OLED显示     </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Display_Off</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0X10</span>,OLED_CMD);  <span class="comment">//DCDC OFF</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0XAE</span>,OLED_CMD);  <span class="comment">//DISPLAY OFF</span></span><br><span class="line">&#125;		   			 </span><br><span class="line"><span class="comment">//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Clear</span><span class="params">(<span class="keyword">void</span>)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">	u8 i,n;		    </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)  </span><br><span class="line">	&#123;  </span><br><span class="line">		OLED_WR_Byte (<span class="number">0xb0</span>+i,OLED_CMD);    <span class="comment">//设置页地址（0~7）</span></span><br><span class="line">		OLED_WR_Byte (<span class="number">0x00</span>,OLED_CMD);      <span class="comment">//设置显示位置—列低地址</span></span><br><span class="line">		OLED_WR_Byte (<span class="number">0x10</span>,OLED_CMD);      <span class="comment">//设置显示位置—列高地址   </span></span><br><span class="line">		<span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)OLED_WR_Byte(<span class="number">0</span>,OLED_DATA); </span><br><span class="line">	&#125; <span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在指定位置显示一个字符,包括部分字符</span></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="comment">//mode:0,反白显示;1,正常显示				 </span></span><br><span class="line"><span class="comment">//size:选择字体 16/12 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowChar</span><span class="params">(u8 x,u8 y,u8 chr)</span></span></span><br><span class="line"><span class="function"></span>&#123;      	</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> c=<span class="number">0</span>,i=<span class="number">0</span>;	</span><br><span class="line">		c=chr-<span class="string">&#x27; &#x27;</span>;<span class="comment">//得到偏移后的值			</span></span><br><span class="line">		<span class="keyword">if</span>(x&gt;Max_Column<span class="number">-1</span>)&#123;x=<span class="number">0</span>;y=y+<span class="number">2</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span>(SIZE ==<span class="number">16</span>)</span><br><span class="line">			&#123;</span><br><span class="line">			OLED_Set_Pos(x,y);	</span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">			OLED_WR_Byte(F8X16[c*<span class="number">16</span>+i],OLED_DATA);</span><br><span class="line">			OLED_Set_Pos(x,y+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">			OLED_WR_Byte(F8X16[c*<span class="number">16</span>+i+<span class="number">8</span>],OLED_DATA);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;	</span><br><span class="line">				OLED_Set_Pos(x,y+<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">				OLED_WR_Byte(F6x8[c][i],OLED_DATA);</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//m^n函数</span></span><br><span class="line"><span class="function">u32 <span class="title">oled_pow</span><span class="params">(u8 m,u8 n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u32 result=<span class="number">1</span>;	 </span><br><span class="line">	<span class="keyword">while</span>(n--)result*=m;    </span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;				  </span><br><span class="line"><span class="comment">//显示2个数字</span></span><br><span class="line"><span class="comment">//x,y :起点坐标	 </span></span><br><span class="line"><span class="comment">//len :数字的位数</span></span><br><span class="line"><span class="comment">//size:字体大小</span></span><br><span class="line"><span class="comment">//mode:模式	0,填充模式;1,叠加模式</span></span><br><span class="line"><span class="comment">//num:数值(0~4294967295);	 		  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowNum</span><span class="params">(u8 x,u8 y,u32 num,u8 len,u8 size)</span></span></span><br><span class="line"><span class="function"></span>&#123;         	</span><br><span class="line">	u8 t,temp;</span><br><span class="line">	u8 enshow=<span class="number">0</span>;						   </span><br><span class="line">	<span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">	&#123;</span><br><span class="line">		temp=(num/oled_pow(<span class="number">10</span>,len-t<span class="number">-1</span>))%<span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span>(enshow==<span class="number">0</span>&amp;&amp;t&lt;(len<span class="number">-1</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(temp==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				OLED_ShowChar(x+(size/<span class="number">2</span>)*t,y,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> enshow=<span class="number">1</span>; </span><br><span class="line">		 	 </span><br><span class="line">		&#125;</span><br><span class="line">	 	OLED_ShowChar(x+(size/<span class="number">2</span>)*t,y,temp+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//显示一个字符号串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowString</span><span class="params">(u8 x,u8 y,u8 *chr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> j=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (chr[j]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">	&#123;		OLED_ShowChar(x,y,chr[j]);</span><br><span class="line">			x+=<span class="number">8</span>;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">120</span>)&#123;x=<span class="number">0</span>;y+=<span class="number">2</span>;&#125;</span><br><span class="line">			j++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示汉字--no表示行数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowCHinese</span><span class="params">(u8 x,u8 y,u8 no)</span></span></span><br><span class="line"><span class="function"></span>&#123;      			    </span><br><span class="line">	u8 t,adder=<span class="number">0</span>;</span><br><span class="line">	OLED_Set_Pos(x,y);	</span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">16</span>;t++)</span><br><span class="line">		&#123;</span><br><span class="line">				OLED_WR_Byte(Hzk[<span class="number">2</span>*no][t],OLED_DATA);</span><br><span class="line">				adder+=<span class="number">1</span>;</span><br><span class="line">     &#125;	</span><br><span class="line">		OLED_Set_Pos(x,y+<span class="number">1</span>);	</span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">16</span>;t++)</span><br><span class="line">			&#123;	</span><br><span class="line">				OLED_WR_Byte(Hzk[<span class="number">2</span>*no+<span class="number">1</span>][t],OLED_DATA);</span><br><span class="line">				adder+=<span class="number">1</span>;</span><br><span class="line">      &#125;					</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***********功能描述：显示显示BMP图片128×64起始点坐标(x,y),x的范围0～127，y为页的范围0～7*****************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_DrawBMP</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> x0, <span class="keyword">unsigned</span> <span class="keyword">char</span> y0,<span class="keyword">unsigned</span> <span class="keyword">char</span> x1, <span class="keyword">unsigned</span> <span class="keyword">char</span> y1,<span class="keyword">unsigned</span> <span class="keyword">char</span> BMP[])</span></span></span><br><span class="line"><span class="function"></span>&#123; 	</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">char</span> x,y;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(y1%<span class="number">8</span>==<span class="number">0</span>) y=y1/<span class="number">8</span>;      </span><br><span class="line">  <span class="keyword">else</span> y=y1/<span class="number">8</span>+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(y=y0;y&lt;y1;y++)</span><br><span class="line">	&#123;</span><br><span class="line">		OLED_Set_Pos(x0,y);</span><br><span class="line">    <span class="keyword">for</span>(x=x0;x&lt;x1;x++)</span><br><span class="line">	    &#123;      </span><br><span class="line">	    	OLED_WR_Byte(BMP[j++],OLED_DATA);	    	</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化SSD1306					    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; 	</span><br><span class="line"> </span><br><span class="line"> 	 </span><br><span class="line"> 	GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"> 	</span><br><span class="line"> 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);	 <span class="comment">//使能A端口时钟</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6| GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_7;	 </span><br><span class="line"> 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 <span class="comment">//推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//速度50MHz</span></span><br><span class="line"> 	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);	  <span class="comment">//初始化GPIOD3,6</span></span><br><span class="line"> 	GPIO_SetBits(GPIOA,GPIO_Pin_5|GPIO_Pin_7|GPIO_Pin_4);	</span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);	 <span class="comment">//使能A端口时钟</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;	 </span><br><span class="line"> 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 <span class="comment">//推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//速度50MHz</span></span><br><span class="line"> 	GPIO_Init(GPIOB, &amp;GPIO_InitStructure);	  <span class="comment">//初始化GPIOD3,6</span></span><br><span class="line">	</span><br><span class="line"> 	GPIO_SetBits(GPIOB,GPIO_Pin_8);	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  OLED_RST_Set();</span><br><span class="line">	delay_ms(<span class="number">100</span>);</span><br><span class="line">	OLED_RST_Clr();</span><br><span class="line">	delay_ms(<span class="number">200</span>);</span><br><span class="line">	OLED_RST_Set(); </span><br><span class="line">					  </span><br><span class="line">	OLED_WR_Byte(<span class="number">0xAE</span>,OLED_CMD);<span class="comment">//--turn off oled panel</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x00</span>,OLED_CMD);<span class="comment">//---set low column address</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x10</span>,OLED_CMD);<span class="comment">//---set high column address</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x40</span>,OLED_CMD);<span class="comment">//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x81</span>,OLED_CMD);<span class="comment">//--set contrast control register</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xCF</span>,OLED_CMD); <span class="comment">// Set SEG Output Current Brightness</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA1</span>,OLED_CMD);<span class="comment">//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xC8</span>,OLED_CMD);<span class="comment">//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA6</span>,OLED_CMD);<span class="comment">//--set normal display</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA8</span>,OLED_CMD);<span class="comment">//--set multiplex ratio(1 to 64)</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x3f</span>,OLED_CMD);<span class="comment">//--1/64 duty</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xD3</span>,OLED_CMD);<span class="comment">//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x00</span>,OLED_CMD);<span class="comment">//-not offset</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xd5</span>,OLED_CMD);<span class="comment">//--set display clock divide ratio/oscillator frequency</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x80</span>,OLED_CMD);<span class="comment">//--set divide ratio, Set Clock as 100 Frames/Sec</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xD9</span>,OLED_CMD);<span class="comment">//--set pre-charge period</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xF1</span>,OLED_CMD);<span class="comment">//Set Pre-Charge as 15 Clocks &amp; Discharge as 1 Clock</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xDA</span>,OLED_CMD);<span class="comment">//--set com pins hardware configuration</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x12</span>,OLED_CMD);</span><br><span class="line">	OLED_WR_Byte(<span class="number">0xDB</span>,OLED_CMD);<span class="comment">//--set vcomh</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x40</span>,OLED_CMD);<span class="comment">//Set VCOM Deselect Level</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x20</span>,OLED_CMD);<span class="comment">//-Set Page Addressing Mode (0x00/0x01/0x02)</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x02</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x8D</span>,OLED_CMD);<span class="comment">//--set Charge Pump enable/disable</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x14</span>,OLED_CMD);<span class="comment">//--set(0x10) disable</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA4</span>,OLED_CMD);<span class="comment">// Disable Entire Display On (0xa4/0xa5)</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA6</span>,OLED_CMD);<span class="comment">// Disable Inverse Display On (0xa6/a7) </span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xAF</span>,OLED_CMD);<span class="comment">//--turn on oled panel</span></span><br><span class="line">	</span><br><span class="line">	OLED_WR_Byte(<span class="number">0xAF</span>,OLED_CMD); <span class="comment">/*display ON*/</span> </span><br><span class="line">	OLED_Clear();</span><br><span class="line">	OLED_Set_Pos(<span class="number">0</span>,<span class="number">0</span>); 	</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>



<h5 id="中断优先工具包"><a href="#中断优先工具包" class="headerlink" title="中断优先工具包"></a>中断优先工具包</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);	<span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>串口通信配置工具包</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span>	  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加入以下代码,支持printf函数,而不需要选择use MicroLIB	  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> import(__use_no_semihosting)             </span></span><br><span class="line"><span class="comment">//标准库需要的支持函数                 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">FILE</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">	<span class="keyword">int</span> handle; </span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">FILE __stdout;       </span><br><span class="line"><span class="comment">//定义_sys_exit()以避免使用半主机模式    </span></span><br><span class="line">_sys_exit(<span class="keyword">int</span> x) </span><br><span class="line">&#123; </span><br><span class="line">	x = x; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//重定义fputc函数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> ch, FILE *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;      </span><br><span class="line">	<span class="keyword">while</span>((USART1-&gt;SR&amp;<span class="number">0X40</span>)==<span class="number">0</span>);<span class="comment">//循环发送,直到发送完毕   </span></span><br><span class="line">    USART1-&gt;DR = (u8) ch;      </span><br><span class="line">	<span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用microLib的方法*/</span></span><br><span class="line"> <span class="comment">/* </span></span><br><span class="line"><span class="comment">int fputc(int ch, FILE *f)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	USART_SendData(USART1, (uint8_t) ch);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET) &#123;&#125;	</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">    return ch;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">int GetKey (void)  &#123; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    while (!(USART1-&gt;SR &amp; USART_FLAG_RXNE));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    return ((int)(USART1-&gt;DR &amp; 0x1FF));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> EN_USART1_RX   <span class="comment">//如果使能了接收</span></span></span><br><span class="line"><span class="comment">//串口1中断服务程序</span></span><br><span class="line"><span class="comment">//注意,读取USARTx-&gt;SR能避免莫名其妙的错误   	</span></span><br><span class="line">u8 USART_RX_BUF[USART_REC_LEN];     <span class="comment">//接收缓冲,最大USART_REC_LEN个字节.</span></span><br><span class="line"><span class="comment">//接收状态</span></span><br><span class="line"><span class="comment">//bit15，	接收完成标志</span></span><br><span class="line"><span class="comment">//bit14，	接收到0x0d</span></span><br><span class="line"><span class="comment">//bit13~0，	接收到的有效字节数目</span></span><br><span class="line">u16 USART_RX_STA=<span class="number">0</span>;       <span class="comment">//接收状态标记	  </span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uart_init</span><span class="params">(u32 bound)</span></span>&#123;</span><br><span class="line">    <span class="comment">//GPIO端口设置</span></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	USART_InitTypeDef USART_InitStructure;</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	 </span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1|RCC_APB2Periph_GPIOA|RCC_APB2Periph_AFIO, ENABLE);	<span class="comment">//使能USART1，GPIOA时钟以及复用功能时钟</span></span><br><span class="line">     <span class="comment">//USART1_TX   PA.9</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//PA.9</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	<span class="comment">//复用推挽输出</span></span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//USART1_RX	  PA.10</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;<span class="comment">//浮空输入</span></span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStructure);  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//Usart1 NVIC 配置</span></span><br><span class="line"></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">3</span> ;<span class="comment">//抢占优先级3</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">3</span>;		<span class="comment">//子优先级3</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			<span class="comment">//IRQ通道使能</span></span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);	<span class="comment">//根据指定的参数初始化VIC寄存器</span></span><br><span class="line">  </span><br><span class="line">   <span class="comment">//USART 初始化设置</span></span><br><span class="line"></span><br><span class="line">	USART_InitStructure.USART_BaudRate = bound;<span class="comment">//一般设置为9600;</span></span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//字长为8位数据格式</span></span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//一个停止位</span></span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶校验位</span></span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	<span class="comment">//收发模式</span></span><br><span class="line"></span><br><span class="line">    USART_Init(USART1, &amp;USART_InitStructure); <span class="comment">//初始化串口</span></span><br><span class="line">    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);<span class="comment">//开启中断</span></span><br><span class="line">    USART_Cmd(USART1, ENABLE);                    <span class="comment">//使能串口 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span>                	<span class="comment">//串口1中断服务程序</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	u8 Res;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_TICKS_PER_SEC	 	<span class="comment">//如果时钟节拍数定义了,说明要使用ucosII了.</span></span></span><br><span class="line">	OSIntEnter();    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  <span class="comment">//接收中断(接收到的数据必须是0x0d 0x0a结尾)</span></span><br><span class="line">		&#123;</span><br><span class="line">		Res =USART_ReceiveData(USART1);<span class="comment">//(USART1-&gt;DR);	//读取接收到的数据</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>((USART_RX_STA&amp;<span class="number">0x8000</span>)==<span class="number">0</span>)<span class="comment">//接收未完成</span></span><br><span class="line">			&#123;</span><br><span class="line">			<span class="keyword">if</span>(USART_RX_STA&amp;<span class="number">0x4000</span>)<span class="comment">//接收到了0x0d</span></span><br><span class="line">				&#123;</span><br><span class="line">				<span class="keyword">if</span>(Res!=<span class="number">0x0a</span>)USART_RX_STA=<span class="number">0</span>;<span class="comment">//接收错误,重新开始</span></span><br><span class="line">				<span class="keyword">else</span> USART_RX_STA|=<span class="number">0x8000</span>;	<span class="comment">//接收完成了 </span></span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="comment">//还没收到0X0D</span></span><br><span class="line">				&#123;	</span><br><span class="line">				<span class="keyword">if</span>(Res==<span class="number">0x0d</span>)USART_RX_STA|=<span class="number">0x4000</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">					USART_RX_BUF[USART_RX_STA&amp;<span class="number">0X3FFF</span>]=Res ;</span><br><span class="line">					USART_RX_STA++;</span><br><span class="line">					<span class="keyword">if</span>(USART_RX_STA&gt;(USART_REC_LEN<span class="number">-1</span>))USART_RX_STA=<span class="number">0</span>;<span class="comment">//接收数据错误,重新开始接收	  </span></span><br><span class="line">					&#125;		 </span><br><span class="line">				&#125;</span><br><span class="line">			&#125;   		 </span><br><span class="line">     &#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_TICKS_PER_SEC	 	<span class="comment">//如果时钟节拍数定义了,说明要使用ucosII了.</span></span></span><br><span class="line">	OSIntExit();  											 </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>	</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>支持中断处理串口通信</li>
<li>支持printf输出内容到串口</li>
</ul>
<h5 id="文字取模添加"><a href="#文字取模添加" class="headerlink" title="文字取模添加"></a>文字取模添加</h5><p>在oledfont.h可以看到字符串的16进制对应，我们也可以取模然后添加汉字</p>
<h5 id="汉字显示"><a href="#汉字显示" class="headerlink" title="汉字显示"></a>汉字显示</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bmp.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u8 t;</span><br><span class="line">		delay_init();	    	 <span class="comment">//延时函数初始化	  </span></span><br><span class="line">		NVIC_Configuration(); 	 <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级 	LED_Init();			 </span></span><br><span class="line">    	<span class="comment">//LED端口初始化</span></span><br><span class="line">		OLED_Init();			<span class="comment">//初始化OLED  </span></span><br><span class="line">		OLED_Clear()  	; </span><br><span class="line">		t=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line">	&#123;		</span><br><span class="line">		OLED_Clear();</span><br><span class="line">	<span class="comment">//	LED_ON;</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//中</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">18</span>,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//景</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">36</span>,<span class="number">0</span>,<span class="number">2</span>);<span class="comment">//园</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">54</span>,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//电</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">72</span>,<span class="number">0</span>,<span class="number">4</span>);<span class="comment">//子</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">90</span>,<span class="number">0</span>,<span class="number">5</span>);<span class="comment">//科</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">108</span>,<span class="number">0</span>,<span class="number">6</span>);<span class="comment">//技</span></span><br><span class="line">		</span><br><span class="line">		OLED_ShowCHinese(<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>);<span class="comment">//佛</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">18</span>,<span class="number">6</span>,<span class="number">8</span>);<span class="comment">//科</span></span><br><span class="line">		OLED_ShowString(<span class="number">0</span>,<span class="number">3</span>,(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="string">&quot;1.3&#x27; OLED TEST&quot;</span>);</span><br><span class="line">	&#125;	  </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="温度测量"><a href="#温度测量" class="headerlink" title="温度测量"></a>温度测量</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO信息结构体体初始化</span></span><br><span class="line">GPIO_InitTypeDef   GPIO_InitStructure;</span><br><span class="line">EXTI_InitTypeDef   EXTI_InitStructure;</span><br><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure; <span class="comment">//串口配置的信息结构体</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> dht11_data[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重定义fputc函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> ch, FILE *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//发送字符到串口1</span></span><br><span class="line">	USART_SendData(USART1,ch);</span><br><span class="line">	<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//延时100ms ，计数72000000次时间过了1s  , 计数72000次时间过了1ms,计数72次表示时间过了1us</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	SysTick-&gt;LOAD = <span class="number">72000</span>*x; <span class="comment">//把计数值加载到LOAD寄存器 ---&gt;每次计数100ms</span></span><br><span class="line"></span><br><span class="line">	SysTick-&gt;VAL = <span class="number">0</span>; <span class="comment">//清空VAL寄存器的计数值</span></span><br><span class="line"></span><br><span class="line">	SysTick-&gt;CTRL |= <span class="number">0x1</span>&lt;&lt;<span class="number">0</span>; <span class="comment">//开始计时,打开定时器把CTRL的第0位置1</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">0</span> == (SysTick-&gt;CTRL &amp; (<span class="number">0x1</span>&lt;&lt;<span class="number">16</span>)) ); <span class="comment">//判断CTRL是否为1，如果为1表示计时时间到了</span></span><br><span class="line">	</span><br><span class="line">	SysTick-&gt;CTRL &amp;= ~(<span class="number">0x1</span>&lt;&lt;<span class="number">0</span>); <span class="comment">//关闭定时器，把CTRL的第0位清零</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//微妙级别延时</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	SysTick-&gt;LOAD = <span class="number">72</span>*x; <span class="comment">//把计数值加载到LOAD寄存器 ---&gt;每次计数100ms</span></span><br><span class="line"></span><br><span class="line">	SysTick-&gt;VAL = <span class="number">0</span>; <span class="comment">//清空VAL寄存器的计数值</span></span><br><span class="line"></span><br><span class="line">	SysTick-&gt;CTRL |= <span class="number">0x1</span>&lt;&lt;<span class="number">0</span>; <span class="comment">//开始计时,打开定时器把CTRL的第0位置1</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">0</span> == (SysTick-&gt;CTRL &amp; (<span class="number">0x1</span>&lt;&lt;<span class="number">16</span>)) ); <span class="comment">//判断CTRL是否为1，如果为1表示计时时间到了</span></span><br><span class="line">	</span><br><span class="line">	SysTick-&gt;CTRL &amp;= ~(<span class="number">0x1</span>&lt;&lt;<span class="number">0</span>); <span class="comment">//关闭定时器，把CTRL的第0位清零</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//led-》GPIO信息结构体初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//关闭引脚JTAG复用功能--&gt;PA13、PA14、PA15、PB3、PB4</span></span><br><span class="line">	RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* GPIOB Periph clock enable */</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Configure PD0 and PD2 in output pushpull mode */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = <span class="number">0xff</span> ;<span class="comment">//GPIO_Pin_0~GPIO_Pin_7</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//设置运行频率50MHz</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; <span class="comment">//设置推挽输出</span></span><br><span class="line">	GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_SetBits(GPIOB, <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">10000</span>; j++);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置串口1--&gt;PA9+PA10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usart1_init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1.使能GPIO外设、IO复用时钟、USART2时钟 PA9 和PA10</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//2.配置GPIO + 初始化GPIO</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//  PA2   TX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//复用推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; <span class="comment">//  PA3   RX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  <span class="comment">//浮空输入   PA10  RX</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.配置USART1 + 初始化USART1</span></span><br><span class="line">	USART_InitStructure.USART_BaudRate = bound;<span class="comment">//波特率</span></span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//数据位8位</span></span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//停止位1位</span></span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶检验</span></span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line">	USART_Init(USART1, &amp;USART_InitStructure);		<span class="comment">//把配置信息加载到串口2</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//4.配置NVIC + 初始化NVIC </span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		<span class="comment">//选择串口2的中断</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>;		<span class="comment">//设置抢占优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			<span class="comment">//使能串口2的中断</span></span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);						<span class="comment">//把配置信息加载到中断</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//5.使能串口中断</span></span><br><span class="line">	USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//接收到数据触发中断</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//6.使能串口</span></span><br><span class="line">	USART_Cmd(USART1,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//把PB15设置为输出模式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_PA15_outputmode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/* GPIOB Peripheral clock enable 使能对应GPIO组的硬件时钟，使能第B组的硬件时钟*/</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* Configure PB15 in output pushpull mode */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;		<span class="comment">//选择15号引脚</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;		<span class="comment">//选择输出模式</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	<span class="comment">//设置运行速度为100MHz</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把PB15设置为输入模式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_PA15_inputmode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* GPIOB Periph clock enable */</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Configure PD0 and PD2 in output pushpull mode */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15; </span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//设置运行频率50MHz</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; <span class="comment">//设置推挽输出</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MCU请求dht11发送数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask_dht11_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//请求dht11发送数据</span></span><br><span class="line">	set_PA15_outputmode(); <span class="comment">//--》设置为输出模式</span></span><br><span class="line">	GPIO_ResetBits(GPIOA,  GPIO_Pin_15);</span><br><span class="line">	delay_ms(<span class="number">20</span>);</span><br><span class="line">	GPIO_SetBits(GPIOA, GPIO_Pin_15);</span><br><span class="line"></span><br><span class="line">	delay_us(<span class="number">30</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//判断dht11是否有回应--》在一定的时间内没有回应，就要重新请求数据</span></span><br><span class="line">	set_PA15_inputmode();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//超时控制--》设置100us</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(i&lt;<span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(<span class="number">0</span> == GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15))</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		delay_us(<span class="number">1</span>);</span><br><span class="line">		i++;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	 <span class="comment">//如果超时，就结束函数</span></span><br><span class="line">	<span class="keyword">if</span>(i&gt;= <span class="number">100</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">	</span><br><span class="line">	i=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//检测低电平持续时间--》也要设置超时控制</span></span><br><span class="line">	<span class="keyword">while</span>(i&lt;<span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">if</span>(<span class="number">1</span> == GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15))</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		delay_us(<span class="number">1</span>);</span><br><span class="line">		i++;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	 <span class="comment">//如果超时，就结束函数</span></span><br><span class="line">	<span class="keyword">if</span>(i&gt;= <span class="number">100</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每次读取一个字节数据</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">read_dht11_data_1byte</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> data=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//等待高电平时间持续结束</span></span><br><span class="line">	<span class="comment">//while(1 == PAin(15));</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span> ==  GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15));</span><br><span class="line">	<span class="comment">//读取8bit数据--》合成一个unsigned char 数据</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//判断是1还是0--&gt;等待低电平时间持续结束</span></span><br><span class="line">		<span class="keyword">while</span>( <span class="number">0</span> == GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15));</span><br><span class="line">		delay_us(<span class="number">40</span>);</span><br><span class="line">		<span class="comment">//40us后，仍然是高电平，该bit则为1</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="number">1</span> == GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15))</span><br><span class="line">		&#123;</span><br><span class="line">			data |=  <span class="number">1</span>&lt;&lt; (<span class="number">7</span>-i); <span class="comment">//先读到是高位		</span></span><br><span class="line">		&#125;</span><br><span class="line">		 <span class="comment">//等待高电平时间持续结束</span></span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span> == GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> data;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取全部数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_dht11_all_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="comment">//不断请求dht11发送数据</span></span><br><span class="line">	<span class="keyword">while</span>( <span class="number">-1</span> == ask_dht11_data());</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">		dht11_data[i]= read_dht11_data_1byte();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//判断校验和</span></span><br><span class="line">	<span class="keyword">if</span>(dht11_data[<span class="number">4</span>] == dht11_data[<span class="number">0</span>]+dht11_data[<span class="number">1</span>]+dht11_data[<span class="number">2</span>]+dht11_data[<span class="number">3</span>])</span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化系统定时器时钟--》时钟频率为72MHz</span></span><br><span class="line">	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);</span><br><span class="line">	led_init();</span><br><span class="line"></span><br><span class="line">	usart1_init(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">		delay();</span><br><span class="line">		<span class="comment">//if(data == &#x27;D&#x27;)</span></span><br><span class="line">		<span class="comment">//&#123;</span></span><br><span class="line">			<span class="comment">//读取温湿度数据 成功</span></span><br><span class="line">			<span class="keyword">if</span>(<span class="number">1</span> == read_dht11_all_data())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;H:%d.%d T:%d.%d\r\n&quot;</span>, dht11_data[<span class="number">0</span>],dht11_data[<span class="number">1</span>], dht11_data[<span class="number">2</span>],dht11_data[<span class="number">3</span>]);</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//&#125;</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//串口1中断服务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//判断中断是否产生</span></span><br><span class="line">	<span class="keyword">if</span>( USART_GetITStatus(USART1,USART_IT_RXNE) == SET )<span class="comment">//如果接收到数据</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//接收数据</span></span><br><span class="line">		data = USART_ReceiveData(USART1);<span class="comment">//接收从USART2发送过来的中断</span></span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>( USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//清空中断标志位</span></span><br><span class="line">		USART_ClearITPendingBit(USART1,USART_IT_RXNE);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>硬件开发</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>stm32</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
</search>
