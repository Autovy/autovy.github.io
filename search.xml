<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言|数据结构入门指南</title>
    <url>/2021/03/10/CLanguage/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202206081642482.png" alt="image-20210205093243144"></p>
<span id="more"></span>

<h3 id="数据结构入门指南（C语言版）"><a href="#数据结构入门指南（C语言版）" class="headerlink" title="数据结构入门指南（C语言版）"></a>数据结构入门指南（C语言版）</h3><p>（图片来源于《计算机是怎么跑起来的》一书和GeeksforGeeks网站）</p>
<h4 id="初识数据结构"><a href="#初识数据结构" class="headerlink" title="初识数据结构"></a>初识数据结构</h4><h5 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h5><p>数组是数据结构的基础。</p>
<p>数组在程序中往往是从内存整体中分配出一块连续的空间，数组反映了内存的物理结构</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040908422.png" alt="image-20210205093243144"></p>
<h5 id="2-数组的应用"><a href="#2-数组的应用" class="headerlink" title="2.数组的应用"></a>2.数组的应用</h5><p>以数组为基础的数据结构，可供各种各样的算法处理大量数据</p>
<h5 id="3-数据结构概念"><a href="#3-数据结构概念" class="headerlink" title="3.数据结构概念"></a>3.数据结构概念</h5><p>内存的物理结构无法改变，而数据结构可以通过程序在逻辑上改变内存的物理结构，使数据按照自己的相反分布</p>
<p>典型的数据结构如下：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040909890.png" alt="image-20210205094134834"></p>
<h4 id="栈的实现方法（stack）"><a href="#栈的实现方法（stack）" class="headerlink" title="栈的实现方法（stack）"></a>栈的实现方法（stack）</h4><h5 id="1-栈的特点"><a href="#1-栈的特点" class="headerlink" title="1.栈的特点"></a>1.栈的特点</h5><p>栈中数据的使用顺序和堆积顺序是相反的，堆积顺序是从下到上，而使用顺序是从上到上，就好像干草堆一样</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040909864.png" alt="image-20210205095057769"></p>
<p>这种数据存取方式称为LIFO（last in first out，后进先出），即最后存入的数据最先被处理</p>
<h5 id="2-栈的实现"><a href="#2-栈的实现" class="headerlink" title="2.栈的实现"></a>2.栈的实现</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 构建数组作为栈的本体 </span></span><br><span class="line"><span class="keyword">char</span> Stack[<span class="number">100</span>];</span><br><span class="line"><span class="comment">// 栈顶指针，始终指向栈数据的最顶端 </span></span><br><span class="line"><span class="keyword">char</span> StackPointer = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈函数，存储数据 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">char</span> Data)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 数据存储在栈顶指针指向位置 </span></span><br><span class="line">	Stack[StackPointer] = Data;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 更新栈顶指针的值 </span></span><br><span class="line">	StackPointer++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈函数，读取数据 </span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 更新栈顶指针的值 </span></span><br><span class="line">	StackPointer--;</span><br><span class="line">	<span class="comment">// 在栈顶指针处取出数据 </span></span><br><span class="line">	<span class="keyword">return</span> Stack[StackPointer];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 运行实例 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="comment">//存储数据 </span></span><br><span class="line">	Push(<span class="number">1</span>);</span><br><span class="line">	Push(<span class="number">2</span>);</span><br><span class="line">	Push(<span class="number">3</span>);</span><br><span class="line">	Push(<span class="number">4</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//读取数据 </span></span><br><span class="line">	<span class="keyword">while</span> (StackPointer !=<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">char</span> result = Pop();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-原理图"><a href="#3-原理图" class="headerlink" title="3.原理图"></a>3.原理图</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040909584.png" alt="image-20210205104130629"></p>
<p>注意此图的栈底放在上面，最底部才是栈顶</p>
<h5 id="4-语法解释"><a href="#4-语法解释" class="headerlink" title="4.语法解释"></a>4.语法解释</h5><ul>
<li>最终实现效果是：存入顺序是1，2，3，4；取出顺序是4，3，2，1</li>
<li>栈的成分：数组，栈顶指针，入栈函数，出栈函数</li>
<li>入栈函数将数据压入栈中</li>
<li>出栈函数将数据从栈中弹出</li>
<li>存储5个数据，最后栈顶指针指向5的地址（地址4为最后一个数据），所以在出栈函数中，栈顶指针需要减1，才能取得第一个数据</li>
</ul>
<h4 id="队列的实现方法（queue）"><a href="#队列的实现方法（queue）" class="headerlink" title="队列的实现方法（queue）"></a>队列的实现方法（queue）</h4><h5 id="1-队列的特点"><a href="#1-队列的特点" class="headerlink" title="1.队列的特点"></a>1.队列的特点</h5><p>队列中最先存入的数据是被最先处理的，这种方式被称为FIFO（first in first out, 先进先出）。就像排队上车一样，先到的人就能先上车</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040909768.png" alt="image-20210205154955234"></p>
<h5 id="2-队列的实现"><a href="#2-队列的实现" class="headerlink" title="2.队列的实现"></a>2.队列的实现</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建作为队列本质的数组 </span></span><br><span class="line"><span class="keyword">char</span>  Queue[<span class="number">100</span>];</span><br><span class="line"><span class="comment">// 标识数据存储位置的索引 </span></span><br><span class="line"><span class="keyword">char</span> SetIndex = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 标识数据读取位置的索引 </span></span><br><span class="line"><span class="keyword">char</span> GetIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 存储数据函数 </span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">char</span> Data)</span></span>&#123;</span><br><span class="line"> 	<span class="comment">// 存入数据</span></span><br><span class="line">	 Queue [SetIndex] = Data;</span><br><span class="line">	 </span><br><span class="line">	 <span class="comment">// 更新存储索引 </span></span><br><span class="line">	 SetIndex++;</span><br><span class="line">	  </span><br><span class="line">	 <span class="comment">// 到达数组末尾则折回开头 </span></span><br><span class="line">	 <span class="keyword">if</span>(SetIndex&gt;=<span class="number">100</span>)&#123;</span><br><span class="line">	 	SetIndex = <span class="number">0</span>;</span><br><span class="line">	 &#125; </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 读取数据函数 </span></span><br><span class="line"> <span class="function"><span class="keyword">char</span> <span class="title">Get</span><span class="params">()</span></span>&#123;</span><br><span class="line"> 	<span class="keyword">char</span> Data;</span><br><span class="line"> 	</span><br><span class="line">	 <span class="comment">// 读取数据 </span></span><br><span class="line"> 	Data = Queue[GetIndex];</span><br><span class="line"> 	</span><br><span class="line"> 	<span class="comment">// 更新读取索引 </span></span><br><span class="line"> 	GetIndex++;</span><br><span class="line"> 	</span><br><span class="line"> 	<span class="comment">//  到达数组末尾则折回开头 </span></span><br><span class="line"> 	<span class="keyword">if</span>(GetIndex&gt;=<span class="number">100</span>)&#123;</span><br><span class="line"> 		GetIndex = <span class="number">0</span>;</span><br><span class="line">	 &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 返回读出数据 </span></span><br><span class="line">	<span class="keyword">return</span> Data;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 运行实例 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="comment">//存储数据 </span></span><br><span class="line">	Set(<span class="number">1</span>);</span><br><span class="line">	Set(<span class="number">2</span>);</span><br><span class="line">	Set(<span class="number">3</span>);</span><br><span class="line">	Set(<span class="number">4</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//读取数据 </span></span><br><span class="line">	<span class="keyword">while</span> (GetIndex != SetIndex) &#123;</span><br><span class="line">		<span class="keyword">char</span> result = Get();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-原理图-1"><a href="#3-原理图-1" class="headerlink" title="3.原理图"></a>3.原理图</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040909593.png" alt="image-20210205161354653"></p>
<h5 id="4-语法解释-1"><a href="#4-语法解释-1" class="headerlink" title="4.语法解释"></a>4.语法解释</h5><ul>
<li>最终实现效果是：存入顺序是1，2，3，4；取出顺序是1，2，3，4</li>
<li>栈的成分：数组，数据存储指针，数据读取指针，存储函数，读取函数</li>
<li>队列的逻辑结构实际上是圆环，数据存满后又会回到开头开始存数据</li>
<li>数据读取指针和数据存储指针是一样的，走向一样，最终值（指存完数据和读完数据的最后值的值）也要相等</li>
</ul>
<h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><h5 id="1-组成"><a href="#1-组成" class="headerlink" title="1.组成"></a>1.组成</h5><p>结构体即把若干个数据项汇集到一起并赋予其名字的一个整体</p>
<p>定义完结构体后，我们可以把结构体当作一个数据类型，可以用它来声明变量</p>
<p>每一个被汇集到结构体的每一个数据项叫做结构体的成员</p>
<h5 id="2-运用"><a href="#2-运用" class="headerlink" title="2.运用"></a>2.运用</h5><p>我们需要用到结构体数组来实现链表和二叉树</p>
<h5 id="3-内存分布"><a href="#3-内存分布" class="headerlink" title="3.内存分布"></a>3.内存分布</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040909289.png" alt="image-20210205182952994"></p>
<h4 id="链表的实现方法（Linked-list）"><a href="#链表的实现方法（Linked-list）" class="headerlink" title="链表的实现方法（Linked list）"></a>链表的实现方法（Linked list）</h4><h5 id="1-链表的特点"><a href="#1-链表的特点" class="headerlink" title="1.链表的特点"></a>1.链表的特点</h5><p>链表容易实现数据的插入和删除，任意改变数据的排列方式。就像人手拉手排成一排，要改变顺序，只需要改变牵手对象即可实现</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040909642.png" alt="image-20210205183938605"></p>
<h5 id="2-链表的实现"><a href="#2-链表的实现" class="headerlink" title="2.链表的实现"></a>2.链表的实现</h5><p>参考文章：<a href="https://www.geeksforgeeks.org/linked-list-set-1-introduction/等系列文章">https://www.geeksforgeeks.org/linked-list-set-1-introduction/等系列文章</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//链表操作函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(struct Node* n)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertAfter</span><span class="params">(struct Node* prev_node, <span class="keyword">int</span> new_data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(struct Node** head_ref, <span class="keyword">int</span> new_data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">append</span> <span class="params">(struct Node**head_ref, <span class="keyword">int</span> new_data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(struct Node**head, <span class="keyword">int</span> key)</span> </span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链表节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="comment">// 存储该节点内容 </span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//  存储下一个节点的地址 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序简单创建一个三节点链表</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// 声明节点 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">second</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">third</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 为三个节点分配空间</span></span><br><span class="line">	head = (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node)); </span><br><span class="line">	second = (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node)); </span><br><span class="line">	third = (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node)); </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 在节点内存入数据（内容+下个节点的地址）构成链表</span></span><br><span class="line">	head -&gt; data = <span class="number">1</span>;</span><br><span class="line">	head -&gt; next = second; </span><br><span class="line">	</span><br><span class="line">	second -&gt; data = <span class="number">2</span>;</span><br><span class="line">	second -&gt; next = third;</span><br><span class="line">	</span><br><span class="line">	third -&gt; data = <span class="number">3</span>;</span><br><span class="line">	third -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 最末端插入6，则链表为 1-&gt;2-&gt; 3-&gt;6-&gt;NULL</span></span><br><span class="line">	append(&amp;head,<span class="number">6</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 在最前端插入7， 则链表为 7-&gt;1-&gt;2-&gt; 3-&gt;6-&gt;NULL</span></span><br><span class="line">	push(&amp;head,<span class="number">7</span>);</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 在指定位置（第三个节点的下个节点后面）插入8， 则链表为 7-&gt;1-&gt;8-&gt;2-&gt;3-&gt;6-&gt;NULL</span></span><br><span class="line">	insertAfter(head-&gt;next,<span class="number">8</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 删除2</span></span><br><span class="line">	deleteNode(&amp;head, <span class="number">2</span>); </span><br><span class="line">	 </span><br><span class="line">	printList(head); </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从指定位置开始遍历链表函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(struct Node* n)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 链表的末尾一定指向NULL </span></span><br><span class="line">	<span class="keyword">while</span>(n != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n-&gt;data);</span><br><span class="line">		n = n-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 链表插入有三种形式：1. 在最前面插入 2.指定位置插入  3. 在最末尾插入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.在最前面插入</span></span><br><span class="line"><span class="comment">// 两个参数分别的含义是： 给定头的引用（指向指针的指针），插入的数据 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(struct Node** head_ref, <span class="keyword">int</span> new_data)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// （1）为新节点分配空间 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">new_node</span> =</span> (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// （2）放入数据</span></span><br><span class="line">	new_node-&gt;data = new_data; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// （3） 新节点存储原头部的地址</span></span><br><span class="line">	new_node-&gt;next = (*head_ref);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (4) 移动头部指向新节点，新节点成为新头部</span></span><br><span class="line">	(*head_ref) = new_node; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.在指定节点后面插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertAfter</span><span class="params">(struct Node* prev_node, <span class="keyword">int</span> new_data)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// （1）检查给定节点是否为空</span></span><br><span class="line">	<span class="keyword">if</span>(prev_node==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (2)为新节点分配空间 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">new_node</span> =</span> (struct Node*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (3)放入数据</span></span><br><span class="line">	new_node-&gt;data = new_data;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (4)新节点存储插入节点存储的下个节点的地址</span></span><br><span class="line">	new_node-&gt;next = prev_node-&gt;next;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 插入节点存储新节点的地址</span></span><br><span class="line">	prev_node-&gt;next = new_node; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 3.在最末尾插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">append</span> <span class="params">(struct Node**head_ref, <span class="keyword">int</span> new_data)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//	(1) 为新节点分配空间 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">new_node</span> =</span> (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">	<span class="comment">// 第5步中使用 ,让第五步的找尾部从头部开始 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">last</span> =</span> *head_ref;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (2) 放入数据</span></span><br><span class="line">	new_node-&gt;data = new_data;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (3)  新节点要放到最后，所以存储地址为NULL</span></span><br><span class="line">	new_node-&gt;next = <span class="literal">NULL</span>; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (4) 如果链表为空，则新节点成为头部</span></span><br><span class="line">	<span class="keyword">if</span>(*head_ref == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		</span><br><span class="line">		*head_ref = new_node;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (5) 链表不为空，一直摸到链表末端</span></span><br><span class="line">	<span class="keyword">while</span>(last-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		last = last-&gt;next;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// (6) 原末端节点存储的地址改为新节点</span></span><br><span class="line">	last-&gt;next = new_node;</span><br><span class="line">	<span class="keyword">return</span>; </span><br><span class="line">	 </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除给定值所在节点 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(struct Node**head_ref, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 存储头部节点</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">temp</span> =</span> *head_ref, *prev;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 如果头部节点含有给定值，需要删除头部</span></span><br><span class="line"><span class="keyword">if</span>(temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;data == key)&#123;</span><br><span class="line">	<span class="comment">// 改变头部</span></span><br><span class="line">	*head_ref = temp-&gt;next; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 释放旧头部</span></span><br><span class="line">	<span class="built_in">free</span>(temp);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历节点，搜索给定值的位置  </span></span><br><span class="line"><span class="keyword">while</span>(temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;data !=key)&#123;</span><br><span class="line">	prev = temp;</span><br><span class="line">	temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果给定值不存在</span></span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">NULL</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到位置后，开始删除操作</span></span><br><span class="line"><span class="comment">// 移动删除节点前一个节点的链接到删除节点的下一个节点</span></span><br><span class="line">prev-&gt;next = temp-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放需要删除的节点</span></span><br><span class="line"><span class="built_in">free</span>(temp); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-原理图-2"><a href="#3-原理图-2" class="headerlink" title="3.原理图"></a>3.原理图</h5><p>（1）链表结构图</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040909831.png" alt="image-20210208081719442"></p>
<p>（2）头部插入示意图</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040909591.png" alt="image-20210208081851924"></p>
<p>（3）指定位置插入示意图</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040909857.png" alt="image-20210208081923801"></p>
<p>（4）末端插入示意图</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040909257.png" alt="image-20210208082016685"></p>
<p>（5）删除示意图</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040909080.png" alt="image-20210208082128253"></p>
<h5 id="4-语法解释-2"><a href="#4-语法解释-2" class="headerlink" title="4.语法解释"></a>4.语法解释</h5><ul>
<li><p><code>struct Node* next</code>声明后，next存储地址，*next是地址中的值（自我引用结构体）</p>
</li>
<li><p>声明节点中，<code>struct Node* head = NULL</code>，则head内为地址</p>
</li>
<li><p>malloc()函数的声明方法为：<code>void *malloc(size_t size)</code>，其作用是分配所需的内存空间，返回值即为指向被分配内存的指针（地址）</p>
</li>
<li><p>则有head，second，third存储的是指向该节点的指针（地址），要使指向该节点的指针访问到节点的成员，那就用<code>-&gt;</code>运算符</p>
</li>
<li><p><code>struct Node** head_ref</code>相当于指向该结构体的指针的指针，即该指针存放的位置，相当于head（头部指针）取址即&amp;head；* head_ref则为该结构的指针（即head，但是*head_ref这种方式才能动态移动指针）</p>
</li>
</ul>
<h4 id="二叉树的实现方法（Binary-tree）"><a href="#二叉树的实现方法（Binary-tree）" class="headerlink" title="二叉树的实现方法（Binary tree）"></a>二叉树的实现方法（Binary tree）</h4><h5 id="1-二叉树的特点"><a href="#1-二叉树的特点" class="headerlink" title="1.二叉树的特点"></a>1.二叉树的特点</h5><p>  二叉树是基于链表的，用到的还是自我引用的结构体，但是会带有两个连接信息（即指向其他元素的指针）</p>
<p>  二叉树多用于实现用于搜索数据的算法（如：二分查找法）</p>
<p>  二叉树结构在搜索数据时，不是沿着一条线搜索，而是循着二叉树的分叉不断向下搜索</p>
<p>  <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040909207.png" alt="image-20210208095901708"></p>
<h5 id="2-二叉树的实现"><a href="#2-二叉树的实现" class="headerlink" title="2.二叉树的实现"></a>2.二叉树的实现</h5>  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">  	<span class="keyword">int</span> data;</span><br><span class="line">  	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">left</span>;</span></span><br><span class="line">  	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">right</span>;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 声明操作二叉树的函数</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printPostorder</span><span class="params">(struct node* node)</span></span>; </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printInorder</span><span class="params">(struct node* node)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printPreorder</span><span class="params">(struct node* node)</span></span>;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建一个新节点函数</span></span><br><span class="line">  <span class="comment">// 返回值为该节点的地址 </span></span><br><span class="line">  <span class="function">struct node* <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">// 分配空间给新节点 </span></span><br><span class="line">  	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">node</span> =</span> (struct node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">// 分配数据给该节点</span></span><br><span class="line">  	node-&gt;data = data;</span><br><span class="line">  	 </span><br><span class="line">  	<span class="comment">// 初始左右分叉的指向</span></span><br><span class="line">  	node-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">  	node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">  	</span><br><span class="line">  	<span class="keyword">return</span> (node);   </span><br><span class="line">  		</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">// 创建二叉树的首节点（root）</span></span><br><span class="line">  	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">root</span> =</span> newNode(<span class="number">1</span>);</span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">// 从首节点出发分叉出两页 </span></span><br><span class="line">  	root-&gt;left = newNode(<span class="number">2</span>);</span><br><span class="line">  	root-&gt;right = newNode(<span class="number">3</span>); </span><br><span class="line">  	</span><br><span class="line">  	root-&gt;left-&gt;left = newNode(<span class="number">4</span>);</span><br><span class="line">  	root-&gt;left-&gt;right = newNode(<span class="number">5</span>);</span><br><span class="line">  	</span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;后序顺序打印\n&quot;</span>);</span><br><span class="line">  	printPostorder(root); </span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>) ;</span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;中序顺序打印\n&quot;</span>);</span><br><span class="line">  	printInorder(root); </span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>) ;</span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;前序顺序打印\n&quot;</span>);</span><br><span class="line">  	printPreorder(root); </span><br><span class="line">  	</span><br><span class="line">  	</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3种遍历方法 </span></span><br><span class="line">  <span class="comment">// 1.后序遍历 （左-&gt;右-&gt;根） </span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printPostorder</span><span class="params">(struct node* node)</span></span>&#123;</span><br><span class="line">  	</span><br><span class="line">  	<span class="keyword">if</span>(node==<span class="literal">NULL</span>)&#123;</span><br><span class="line">  		<span class="keyword">return</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">  	</span><br><span class="line">  	printPostorder(node-&gt;left);</span><br><span class="line">  	printPostorder(node-&gt;right); </span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">// 打印出该节点的数据 </span></span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, node-&gt;data); </span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2.中序遍历（左-&gt;根-&gt;右）</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printInorder</span><span class="params">(struct node* node)</span></span>&#123;</span><br><span class="line">  	</span><br><span class="line">  	<span class="keyword">if</span>(node==<span class="literal">NULL</span>)&#123;</span><br><span class="line">  		<span class="keyword">return</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">  	</span><br><span class="line">  	printInorder(node-&gt;left);</span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, node-&gt;data);</span><br><span class="line">  	printInorder(node-&gt;right);</span><br><span class="line">  	</span><br><span class="line">  	</span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//  3. 前序遍历 (根-&gt;左-&gt;右)</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">printPreorder</span><span class="params">(struct node* node)</span></span>&#123;</span><br><span class="line">   	</span><br><span class="line">  	<span class="keyword">if</span>(node == <span class="literal">NULL</span>)&#123;</span><br><span class="line">   		<span class="keyword">return</span>;</span><br><span class="line">  	 &#125;</span><br><span class="line">  	 </span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, node-&gt;data);</span><br><span class="line">  	printPreorder(node-&gt;left);</span><br><span class="line">  	printPreorder(node-&gt;right);</span><br><span class="line">   	</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>



<h5 id="3-二叉树原理图"><a href="#3-二叉树原理图" class="headerlink" title="3.二叉树原理图"></a>3.二叉树原理图</h5><p>  （1）遍历方法示意图</p>
<p>  <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040909994.png" alt="image-20210208150838184"></p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
        <tag>入门教程</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言|最简管理系统</title>
    <url>/2020/06/15/CLanguage/C%E8%AF%AD%E8%A8%80-%E6%9C%80%E7%AE%80%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>C语言结课作业：编写一个小型工资管理系统，用来管理职工的个人基本信息及工资薪酬等数据。在技术要求方面仅仅是要求了使用结构体数据类型，但基于我们的学习进度，考察的应该是用数组来储存。</p>
<span id="more"></span>



<h3 id="作业要求"><a href="#作业要求" class="headerlink" title="作业要求"></a>作业要求</h3><ol>
<li><p>每个职工的数据应包括：<strong>工号、姓名、性别、部门、基本工资、绩效工资、奖金、应发工资</strong>（应发工资=基本工资+绩效工资+奖金）。职工数据要求采用结构体数据类型。</p>
</li>
<li><p><strong>菜单显示：</strong>显示系统的一级功能菜单（数据输入、数据修改、数据处理、数据输出、退出）。</p>
</li>
<li><p><strong>数据输入</strong>：至少输入10个职工的各项数据（应发工资由系统自动计算，不需要输入）。<strong>录入的第一条记录用自已的真实姓名，部门为自己的真实班级。</strong>并将有自己真实姓名、班级的输出结果截屏保存到大作业总结报告中。</p>
</li>
<li><p><strong>数据修改</strong>：输入工号,修改指定工号的各项数据。输出修改完成后的全部职工数据。</p>
</li>
<li><p><strong>数据处理</strong>：处理方式包括：排序、查询。可提供子菜单让用户选择。其中：</p>
<p>1)<strong>排序</strong>：按工号排序，显示所有职工的全部数据。</p>
<p>2)<strong>查询</strong>：按工号查询，显示指定工号的全部数据。</p>
</li>
<li><p><strong>数据输出</strong>：输出全部职工的各项数据。</p>
</li>
<li><p><strong>退出</strong>：退出整个工资管理系统。</p>
</li>
</ol>
<h3 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h3><h5 id="1-数据存储"><a href="#1-数据存储" class="headerlink" title="1.数据存储"></a>1.数据存储</h5><p>我使用的是结构体数组来自建一个数据库，放在全局环境下，将数据库设为一个全局变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自建数据库</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">staff</span> &#123;</span></span><br><span class="line"> 	</span><br><span class="line">	<span class="keyword">int</span>  id;</span><br><span class="line"> 	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"> 	<span class="keyword">char</span> sex[<span class="number">20</span>];</span><br><span class="line"> 	<span class="keyword">char</span> belong[<span class="number">20</span>];</span><br><span class="line"> 	<span class="keyword">int</span>  basic_pay;</span><br><span class="line">	<span class="keyword">int</span>  add_pay;</span><br><span class="line">	<span class="keyword">int</span>  reward_pay;</span><br><span class="line">	<span class="keyword">int</span>  all_pay;</span><br><span class="line"></span><br><span class="line"> &#125;data[<span class="number">999</span>] = &#123;</span><br><span class="line"> 	</span><br><span class="line">	&#123;<span class="number">44</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;技术部&quot;</span>, <span class="number">5000</span>, <span class="number">1000</span>, <span class="number">200</span>, <span class="number">6200</span> &#125;,</span><br><span class="line">	</span><br><span class="line">	&#123;<span class="number">14</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;运维部&quot;</span>, <span class="number">4000</span>, <span class="number">1000</span>, <span class="number">200</span>, <span class="number">5200</span> &#125;,</span><br><span class="line">	</span><br><span class="line">	&#123;<span class="number">56</span>, <span class="string">&quot;小红&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="string">&quot;网安部&quot;</span>, <span class="number">3000</span>, <span class="number">1000</span>, <span class="number">200</span>, <span class="number">4200</span> &#125;,</span><br><span class="line"> 		</span><br><span class="line"> &#125;; </span><br></pre></td></tr></table></figure>



<p>另外还需要定义一个全局的数据库长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int lenth &#x3D; 3;</span><br></pre></td></tr></table></figure>

<p>之所以直接定义为一个常量，而不是用sizeof这种方式来计算数组长度，因为我发现结构体数组用这种方式来计算数组长度会是一个大坑！所以还不如手动添加常量</p>
<h5 id="2-函数功能结构"><a href="#2-函数功能结构" class="headerlink" title="2.函数功能结构"></a>2.函数功能结构</h5><p>（1）函数声明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;函数声明</span><br><span class="line">int create();    &#x2F;&#x2F;增</span><br><span class="line">int del();  	&#x2F;&#x2F;删</span><br><span class="line">int edit();    &#x2F;&#x2F;改</span><br><span class="line"></span><br><span class="line">int process();     &#x2F;&#x2F;处理 </span><br><span class="line">int req();     &#x2F;&#x2F;查</span><br><span class="line">int line();     &#x2F;&#x2F;排 </span><br><span class="line"></span><br><span class="line">int showall(); &#x2F;&#x2F;查询全部</span><br></pre></td></tr></table></figure>



<p>（2）函数定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//菜单系统 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> order;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;****************************\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;主菜单：\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;1.输入员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;2.删除员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;3.修改员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;4.处理员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;5.显示所有员工信息\n&quot;</span>); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;6.退出\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;****************************\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;---请输入菜单项：---\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;order); </span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(order==<span class="number">6</span>)&#123;		</span><br><span class="line">			</span><br><span class="line">			system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;		</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">switch</span>(order)&#123;</span><br><span class="line">				</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>: 	create();<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>: 	del();<span class="keyword">break</span>;	</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>: 	edit();<span class="keyword">break</span>;	</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>: 	process();<span class="keyword">break</span>;	</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>: 	showall(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:    <span class="built_in">printf</span>(<span class="string">&quot;\n404 NOT FOUND!&quot;</span>); getchar(); getchar(); system(<span class="string">&quot;cls&quot;</span>);	</span><br><span class="line">			</span><br><span class="line">			&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//增添信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除信息 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">edit</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//员工信息排序输出 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">line</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询员工信息 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">req</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询全部数据 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">showall</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>



<p>函数结构如下</p>
<p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20200615101249209.png" alt="image-20200615101249209"> </p>
<p>这些函数都会对全局中的数据库进行操作。</p>
<h3 id="菜单系统"><a href="#菜单系统" class="headerlink" title="菜单系统"></a>菜单系统</h3><p>main函数这里，就构建整体的函数调用框架，即本管理系统的菜单系统</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//菜单系统 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">   	</span><br><span class="line">   <span class="keyword">int</span> order;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;****************************\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;主菜单：\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;1.输入员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;2.删除员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;3.修改员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;4.处理员工信息\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;5.显示所有员工信息\n&quot;</span>); </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;6.退出\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;****************************\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;---请输入菜单项：---\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;order); </span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(order==<span class="number">6</span>)&#123;		</span><br><span class="line">			</span><br><span class="line">			system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;		</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">switch</span>(order)&#123;</span><br><span class="line">				</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>: 	create();<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>: 	del();<span class="keyword">break</span>;	</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>: 	edit();<span class="keyword">break</span>;	</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>: 	process();<span class="keyword">break</span>;	</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>: 	showall(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:    <span class="built_in">printf</span>(<span class="string">&quot;\n404 NOT FOUND!&quot;</span>); getchar(); getchar(); system(<span class="string">&quot;cls&quot;</span>);	</span><br><span class="line">			</span><br><span class="line">			&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>菜单系统常用switch语句来调用各个函数，另外为了整个管理系统的输出整洁一点，我还用了</p>
<p>“stdlib.h”库中的清屏函数system(“cls”)</p>
<h3 id="增添员工信息"><a href="#增添员工信息" class="headerlink" title="增添员工信息"></a>增添员工信息</h3><p> 增添员工信息的基本设计思路：将新的信息填入到下一个数组空的位置。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	i = lenth;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新增员工工号：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i].id); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新增员工姓名：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[i].name); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新增员工性别：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[i].sex); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新增员工所属部门：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[i].belong);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);	 </span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新增员工基本工资：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i].basic_pay); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新增员工绩效工资：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i].add_pay); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);		</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;新增员工奖金：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i].reward_pay); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	data[i].all_pay = data[i].basic_pay + data[i].add_pay + data[i].reward_pay;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;创建成功！\n&quot;</span>);	</span><br><span class="line">	lenth++;</span><br><span class="line">	getchar();</span><br><span class="line">	getchar();</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);	</span><br><span class="line">		</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p> 用在全局定义的lenth（突然发现自己记错了长度的英语单词2333）来确定新数据的填写地址，创建成功后要注意用<code>lenth++</code>，拓展数据的长度。</p>
<h3 id="删除员工信息"><a href="#删除员工信息" class="headerlink" title="删除员工信息"></a>删除员工信息</h3><p>删除员工信息的基本设计思路是：通过遍历所有的数据查询到指定的员工工号，然后将后面的数据依次向上填补被“删除”的空白</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除信息 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i = lenth;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入删除员工工号：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i+<span class="number">1</span>; j++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(num==data[j].id)&#123;</span><br><span class="line">			<span class="keyword">for</span>( ;j&lt;=i-j; j++)&#123;</span><br><span class="line">				</span><br><span class="line">				data[j] = data[j+<span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			lenth--;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n删除成功!\n&quot;</span>); </span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(j==i+<span class="number">1</span>)&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n查无此人!\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	getchar();</span><br><span class="line">	getchar();</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 在遍历中用到了两个if语句，if(num==data[j].id)来寻找符合条件的员工号，而<code>if(j==i+1)</code>则是遍历所有的数据后未找到匹配条件。</p>
<p>说是删除实践上只是删除的数组元素的地位（下标）和财产（数据）被下一个数组元素给继承了，而下一个的数据元素的下标和数据又被下下个数据元素继承，以此类推。这里同样要注意用<code>lenth--</code>缩短数据长度。</p>
<h3 id="修改员工信息"><a href="#修改员工信息" class="headerlink" title="修改员工信息"></a>修改员工信息</h3><p>修改员工信息的思路和删除员工信息的思路相差无几：都需要查询定位对应的员工信息，不同的是定位后，这个还要修改员工的信息</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">edit</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i = lenth;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入需要修改的员工工号：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);  </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i+<span class="number">1</span>; j++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(num==data[j].id)&#123;</span><br><span class="line">					</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;修改姓名：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[j].name); </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;修改性别：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[j].sex); </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);	</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;修改所属部门：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[j].belong);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);	 </span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;修改基本工资：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[j].basic_pay); </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);	</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;修改绩效工资：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[j].add_pay); </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);		</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;修改奖金：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[j].reward_pay); </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			</span><br><span class="line">			data[j].all_pay = data[j].basic_pay + data[j].add_pay + data[j].reward_pay;</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;修改成功！\n&quot;</span>);				</span><br><span class="line">			showall(); </span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(j==i+<span class="number">1</span>)&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n查无此人!\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">				</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	getchar();</span><br><span class="line">	getchar();</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所谓修改，无非是重新赋值罢了。</p>
<h3 id="处理信息"><a href="#处理信息" class="headerlink" title="处理信息"></a>处理信息</h3><p>处理信息分成了排序信息和查询信息两部分，所有采用菜单系统同样的方式来设计</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> order;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1.员工信息排序     2.员工信息查询\n&quot;</span>); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请选择处理方式:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;order); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">switch</span>(order)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>: line(); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>: req();  <span class="keyword">break</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h5 id="1-信息排序"><a href="#1-信息排序" class="headerlink" title="1.信息排序"></a>1.信息排序</h5><p>说实话这个函数的设计是该项目唯一卡到我的地方，因为我一直把它理解成了“排序处理”，但我了解实际上的需求应该是“排序输出”，那问题就简单很多了，我的设计思路如下</p>
<p>将每个数组元素的地址看作是它们的住址，而员工工号信息就是它们的门牌号，把它们的门牌号记录下来，然后排列大小顺序，按顺序去拜访它们，期间它们的住处时是没有发生改变的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//员工信息排序输出 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">line</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">int</span> id_data[<span class="number">100</span>];</span><br><span class="line">	i = lenth;</span><br><span class="line">	<span class="keyword">char</span>* str[<span class="number">8</span>] = &#123;<span class="string">&quot;工号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;部门&quot;</span>, <span class="string">&quot;基本工资&quot;</span>, <span class="string">&quot;绩效工资&quot;</span>, <span class="string">&quot;奖金&quot;</span>, <span class="string">&quot;应发工资&quot;</span>&#125;; </span><br><span class="line">	</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;i; j++)&#123;</span><br><span class="line">		</span><br><span class="line">		id_data[j] = data[j].id;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	qsort(id_data, i, <span class="keyword">sizeof</span>(id_data[<span class="number">0</span>]) , cmp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n排序成功！\n\n&quot;</span>) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据表的字段输出	</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">8</span>; n++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-12s&quot;</span> , str[n]);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据排序输出	</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> n1 = <span class="number">0</span>; n1&lt;i; n1++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> n2 = <span class="number">0</span>; n2&lt;i; n2++ )&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(id_data[n1] == data[n2].id)&#123;</span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot; %-10d&quot;</span>,    data[n2].id); </span><br><span class="line">		</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot; %-10s&quot;</span>,    data[n2].name); </span><br><span class="line">			</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;   %-10s&quot;</span>,  data[n2].sex); </span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>,     data[n2].belong); </span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;    %-10d&quot;</span>, data[n2].basic_pay); </span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[n2].add_pay); 	</span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[n2].reward_pay); </span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[n2].all_pay ); </span><br><span class="line">				</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">						</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line"> 	getchar();</span><br><span class="line"> 	getchar();</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 依据代码，我的思路对应关系如下</p>
<ul>
<li>住址 ==&gt; 数组元素下标，即<code>data</code>数组的下标</li>
<li>门牌号 ==&gt;  <code>data[j].id</code></li>
<li>记录门牌号 ==&gt; 用了另一个数组：<code>id_data[j]</code> 来储存</li>
<li>排列门牌号大小 ==&gt; 将<code>id_data[j]</code> 存储的门牌号排序，这里使用了C语言内置的排序函数：qsort()</li>
<li>依次拜访 ==&gt; 两层循环，外层循环：<code>for(int n1 = 0; n1&lt;i; n1++)</code>循环名单上排列好的门牌号，内层循环：<code>for(int n2 = 0; n2&lt;i; n2++ )</code>，一个个去找符合名单上第一位的门牌号，然后输出</li>
</ul>
<p>另外注意，作为一个大学生的作业，使用内置的qsort()排序函数应该是非法的（狗头），应该使用冒泡排序或选择排序！</p>
<p>好，我摊牌啦，我就是想偷一下懒……</p>
<h5 id="2-查询员工信息"><a href="#2-查询员工信息" class="headerlink" title="2.查询员工信息"></a>2.查询员工信息</h5><p>查询的思路和删除信息，修改信息相似，没什么特别的地方</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询员工信息 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">req</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i = lenth;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">char</span>* str[<span class="number">8</span>] = &#123;<span class="string">&quot;工号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;部门&quot;</span>, <span class="string">&quot;基本工资&quot;</span>, <span class="string">&quot;绩效工资&quot;</span>, <span class="string">&quot;奖金&quot;</span>, <span class="string">&quot;应发工资&quot;</span>&#125;; </span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入需要查询员工工号：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);  </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">8</span>; n++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-12s&quot;</span> , str[n]);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i+<span class="number">1</span>; j++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(num==data[j].id)&#123;</span><br><span class="line">	</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; %-10d&quot;</span>,    data[j].id); </span><br><span class="line">		</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; %-10s&quot;</span>,    data[j].name); </span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;   %-10s&quot;</span>,  data[j].sex); </span><br><span class="line">				</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>,     data[j].belong); </span><br><span class="line">				</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;    %-10d&quot;</span>, data[j].basic_pay); </span><br><span class="line">				</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].add_pay); 	</span><br><span class="line">				</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].reward_pay); </span><br><span class="line">				</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].all_pay ); </span><br><span class="line">				</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n查询成功！\n\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(j==i+<span class="number">1</span>)&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; 无\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n查无此人!\n&quot;</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">	getchar();</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 这里输出数据表的表头，用了数组来存储字符串，要注意加<em>号：    `char</em> str[8]`</p>
<h3 id="查询全部数据"><a href="#查询全部数据" class="headerlink" title="查询全部数据"></a>查询全部数据</h3><p>无脑遍历输出即可，就是输出格式上要有调整，一般可以用<code>printf(&quot;%-9d&quot;)</code>占9个空格，左对齐的方式来调整输出格式，输出那里我也是为了美观才一个个去加空格调整格式，就不要吐槽我代码格式不整洁了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询全部数据 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">showall</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span>* str[<span class="number">8</span>] = &#123;<span class="string">&quot;工号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;部门&quot;</span>, <span class="string">&quot;基本工资&quot;</span>, <span class="string">&quot;绩效工资&quot;</span>, <span class="string">&quot;奖金&quot;</span>, <span class="string">&quot;应发工资&quot;</span>&#125;; </span><br><span class="line">	i = lenth - <span class="number">1</span>;</span><br><span class="line">	 </span><br><span class="line">	data[i].all_pay = 	data[i].basic_pay + data[i].add_pay + data[i].reward_pay;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;查询成功！\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">8</span>; n++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-12s&quot;</span> , str[n]);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i; j++)&#123;</span><br><span class="line">			</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; %-10d&quot;</span>,    data[j].id); </span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; %-10s&quot;</span>,    data[j].name); </span><br><span class="line">	</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;   %-10s&quot;</span>,  data[j].sex); </span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>,     data[j].belong); </span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;    %-10d&quot;</span>, data[j].basic_pay); </span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].add_pay); 	</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].reward_pay); </span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].all_pay ); </span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> 	getchar();</span><br><span class="line"> 	getchar();</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整体来说，这个结课作业并不难，只用用课堂上的知识完全是可以完成了（我一个下午不到就写好）。</p>
<p>但事实上无论用哪门语言，增删改查的实现永远是入门重要的第一课，本项目和之前的python学生管理系统，都仅仅是在内部实现的数据增删改查，一旦退出程序，缓存就被清除了，无法保留。所以我们还应考虑——如何把这样的操作在文本中实现，如何连接mysql数据库实现同样增删改查的操作。</p>
<p>所以呀，流水的编程语言，铁打的管理系统，入门从管理系统开始！</p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>开发实战</tag>
        <tag>管理系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|Spring学习</title>
    <url>/2021/05/07/Java/Java-Spring%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041340206.png" alt="image-20210904133451706"></p>
<span id="more"></span>



<h3 id="1-初识Spring"><a href="#1-初识Spring" class="headerlink" title="1.初识Spring"></a>1.初识Spring</h3><h4 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h4><p>Spring是针对企业级开发的框架，是技术使用更将方便，整合了现有的技术框架</p>
<ul>
<li>SSH：Struct2 + Spring + Hibernate</li>
<li>SSM：SpringMCV + Spring + Mybatis</li>
</ul>
<h4 id="Spring优点"><a href="#Spring优点" class="headerlink" title="Spring优点"></a>Spring优点</h4><ul>
<li>轻量级，非入侵式</li>
<li>开源的免费框架</li>
<li>控制反转（IOC），面向切面（AOP）编程</li>
<li>支持事物处理，对框架整合的支持</li>
</ul>
<h4 id="Spring组成"><a href="#Spring组成" class="headerlink" title="Spring组成"></a>Spring组成</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040933389.png" alt="image-20210604151457606"></p>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040933978.png" alt="image-20210604151952837"></p>
<h4 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a><strong>Spring Boot</strong></h4><ul>
<li>一个快速开发的脚手架</li>
<li>基于SpringBoot可以快速的开发单个微服务。</li>
<li>约定大于配置</li>
</ul>
<p><strong>Spring Cloud</strong></p>
<ul>
<li>SpringCloud是基于SpringBoot实现的</li>
</ul>
<h3 id="2-IOC理论推导"><a href="#2-IOC理论推导" class="headerlink" title="2.IOC理论推导"></a>2.IOC理论推导</h3><h4 id="经典Java应用分层"><a href="#经典Java应用分层" class="headerlink" title="经典Java应用分层"></a>经典Java应用分层</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040933172.png" alt="image-20210604153048214"></p>
<h4 id="控制反转的思想"><a href="#控制反转的思想" class="headerlink" title="控制反转的思想"></a>控制反转的思想</h4><p>程序不在主动创建对象，而是被动的接受对象（控制权从程序转移到用户）。反转了，我们不负责创建对象，我们只被动处理对象</p>
<p><strong>反转前：</strong>用户只能使用我们准备好的对象，有其他需求我们要额外新增修改</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040934924.png" alt="image-20210604154725356"></p>
<p><strong>反转后：</strong>用户可以任意创建对象，我们只负责去处理这些类</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040934307.png" alt="image-20210604154631248"></p>
<h4 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040934274.png" alt="image-20210604155144289"></p>
<p>IOC就是为了解耦，让各个对象的依赖关系减弱</p>
<p>控制反转是一种通过描述（xml或注解）并通过第三方去生产或获取特定对象的方式。在Spring中，实现控制反转的loC容器，其实现方法就是依赖注入（DI）</p>
<h3 id="3-Spring初体验"><a href="#3-Spring初体验" class="headerlink" title="3.Spring初体验"></a>3.Spring初体验</h3><h4 id="xml法"><a href="#xml法" class="headerlink" title="xml法"></a>xml法</h4><ul>
<li>配置元数据：使用Spring创建对象，在Spring中称为bean </li>
<li>bean相当于new了一个对象</li>
<li>获取spring的上下文对象，从xml提取出对象</li>
<li>IOC变成实现：由主动编程变为被动接收</li>
<li>所谓IOC就是对象由Spring来创建，管理，装配</li>
</ul>
<h4 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC创建对象的方式</h4><ul>
<li>无参构造（默认方法）</li>
<li>有参构造：<ul>
<li>下标赋值</li>
<li>类型赋值（不建议使用）</li>
<li>参数名赋值</li>
</ul>
</li>
<li>在配置XML文件加载的时候，容器中管理的对象就已经初始化了，即使在没有getbean这个对象，但是其已经在Spring容器中创建</li>
</ul>
<h3 id="4-Spring配置"><a href="#4-Spring配置" class="headerlink" title="4.Spring配置"></a>4.Spring配置</h3><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><p>​    除了对象名，我们也可以起小名来找到这个对象</p>
<h4 id="Bean的配置"><a href="#Bean的配置" class="headerlink" title="Bean的配置"></a>Bean的配置</h4><ul>
<li>id：bean的唯一标识符，也就是相当于我们学的对象名 </li>
<li>class：bean对象所对应的全限定名：包名+类名    </li>
<li>name：也是别名，而且name可以同时取多个别名</li>
</ul>
<h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><p>​    用于不同人开发的bean.xml文件合并在一起</p>
<h4 id="Bean与Spring容器的关系"><a href="#Bean与Spring容器的关系" class="headerlink" title="Bean与Spring容器的关系"></a>Bean与Spring容器的关系</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040934089.png" alt="image-20210604163430319"></p>
<h3 id="5-依赖注入"><a href="#5-依赖注入" class="headerlink" title="5.依赖注入"></a>5.依赖注入</h3><h4 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h4><p>当实体对象有有参构造方法的时候，需要使用构造器注入construct-args</p>
<h4 id="Set方式注入"><a href="#Set方式注入" class="headerlink" title="Set方式注入"></a>Set方式注入</h4><ul>
<li><p>依赖：bean对象的创建依赖于容器</p>
</li>
<li><p>注入：bean对象中的所有属性，由容器来注入</p>
</li>
<li><p>普通型注入：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种：普通值注入，value        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黑心白莲&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Bean注入（注入另一对象实体，其也需要在bean中注册）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种：--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>数组型注入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数组        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>List型注入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>打篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Map型注入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456789987456321&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;359419496419481649&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Set型注入</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Set        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>NULL型注入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--NULL        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Properties型注入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Properties        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>20191029<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>102.0913.524.4585<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;user&quot;</span>&gt;</span>黑心白莲<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="其他注入方式"><a href="#其他注入方式" class="headerlink" title="其他注入方式"></a>其他注入方式</h4><p>可以使用p命名空间和c命名空间进行注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--p命名空间注入，可以直接注入属性的值：property--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;黑心白莲&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--c命名空间注入，通过构造器注入：constructor-args--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;狂神&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;22&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="6-Bean解析"><a href="#6-Bean解析" class="headerlink" title="6.Bean解析"></a>6.Bean解析</h3><h4 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040934289.png" alt="image-20210605114941989"></p>
<p>Spring默认使用单例模式（singleton）</p>
<h4 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h4><ul>
<li>手动装配：每一个属性都要自己去设置</li>
<li>自动装配是Spring满足bean依赖一种方式</li>
<li>Spring会在上下文中自动寻找，并自动给bean装配属性（）</li>
</ul>
<p><strong>自动装配类型：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040934247.png" alt="image-20210605115608244"></p>
<ul>
<li>byName:   会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id；</li>
<li>byType：会自动在容器上下文中查找，和自己对象属性类型相同的bean；</li>
</ul>
<h3 id="7-使用注解开发"><a href="#7-使用注解开发" class="headerlink" title="7.使用注解开发"></a>7.使用注解开发</h3><h4 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h4><ul>
<li>导入约束</li>
<li>配置注解的支持： <code>&lt;context:annotation-config/&gt;</code></li>
</ul>
<h4 id="Autowired注解"><a href="#Autowired注解" class="headerlink" title="@Autowired注解"></a>@Autowired注解</h4><ul>
<li>可以在属性或者set方法上使用</li>
<li>使用Autowired方法就可以不用编写set方法（但是需要使用自动装配，且符合命名ByName）</li>
</ul>
<p><strong>不使用注解：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p><strong>使用注解：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果显式定义了Autowired的required属性为false，说明这个对象可以为null，否则不允许为空</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// set的方法都被省略掉了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Qualifier注解"><a href="#Qualifier注解" class="headerlink" title="@Qualifier注解"></a>@Qualifier注解</h4><ul>
<li><p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解【@Autowired】完成的时候，我们可以使用@Qualifier(value = “xxx”)去配置@Autowired的使用，指定一个唯一的bean对象注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;cat111&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;dog222&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="Resource注解"><a href="#Resource注解" class="headerlink" title="@Resource注解"></a>@Resource注解</h4><p>@Resource和@Autowired的区别：</p>
<ul>
<li>都是用来自动装配的，都可以放在属性字段上</li>
<li>@Autowired通过byType的方式实现，而且必须要求这个对象存</li>
<li>@Resource默认通过byName的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错</li>
<li>执行顺序不同：@Autowired通过byType的方式实现。</li>
</ul>
<h4 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h4><p><strong>属性注入：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//等价于&lt;bean id=&quot;user&quot;class=&quot;com.kuang.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="comment">//@Component 组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于  &lt;property name=&quot;name&quot; value=&quot;白莲&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;白莲&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>衍生的注解：</strong></p>
<p>@Component有几个衍生的注解，按照mvc三层架构分层</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dao 【@Repository】</span><br><span class="line">service 【@Service】</span><br><span class="line">controller 【@Controller】</span><br></pre></td></tr></table></figure>



<p><strong>自动装配：</strong></p>
<ul>
<li>@Autowired：自动装配通过类型，名字。如果Autowired不能唯一自动装配上属性，则需要通过@Qualifier(value = “xxx”)去配置。 </li>
<li>@Nullable 字段标记了了这个注解，说明这个字段可以为null; </li>
<li>@Resource：自动装配通过名字，类型</li>
</ul>
<h4 id="注解与xml"><a href="#注解与xml" class="headerlink" title="注解与xml"></a>注解与xml</h4><ul>
<li>xml更加万能，适用于任何场合，维护简单方便</li>
<li>注解不是自己类使用不了，维护相对复杂</li>
<li>最佳的实践是：注解只负责完成属性的注入，xml用来管理bean</li>
</ul>
<h3 id="8-Java配置Spring"><a href="#8-Java配置Spring" class="headerlink" title="8.Java配置Spring"></a>8.Java配置Spring</h3><p>完全抛弃xml配置，采用JavaConfig来配置Spring</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个也会Spring容器托管，注册到容器中，因为它本来就是一个@Component</span></span><br><span class="line"><span class="comment">// @Configuration代表这是一个配置类，就和我们之前看的beans.xml</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.autovy.pojo&quot;)</span></span><br><span class="line"><span class="meta">@Import(AutovyConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutovyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册一个bean，就相当于我们之前写的一个bean标签</span></span><br><span class="line">    <span class="comment">// 这个方法的名字，就相当于bean标签中id属性</span></span><br><span class="line">    <span class="comment">// 这个方法的返回值，就相当于bean标签中的class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> user(); <span class="comment">// 就是返回要注入到bean的对象！</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="9-代理模式"><a href="#9-代理模式" class="headerlink" title="9.代理模式"></a>9.代理模式</h3><p>真实角色通过他们的替身——代理对象进行交流</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040934761.png" alt="image-20210605150430423"></p>
<h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p><strong>角色分析：</strong></p>
<ul>
<li>抽象角色：一般会使用接口或者抽象类来解决</li>
<li>真实角色：被代理的角色</li>
<li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作</li>
<li>客户：访问代理对象的人！</li>
</ul>
<p><strong>实现过程：</strong></p>
<ul>
<li>代理对象组合目标对象，并帮忙为目标对象实现接口的附加方法</li>
<li>客户只需要访问代理对象即可</li>
</ul>
<p><strong>代理模式好处：</strong></p>
<ul>
<li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li>
<li>公共角色就交给代理角色！实现了业务的分工</li>
<li>公共业务发生扩展的时候，方便集中管理！</li>
<li>一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低</li>
</ul>
<h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>动态代理的代理类是自动生成的，可以分为：基于接口的动态代理（JDK动态代理），基于类的动态代理（cglib）两种</p>
<p><strong>动态代理的好处：</strong></p>
<ul>
<li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li>
<li>公共角色就交给代理角色！实现了业务的分工！</li>
<li>公共业务发生扩展的时候，方便集中管理！</li>
<li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li>
<li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可</li>
</ul>
<h3 id="10-AOP详解"><a href="#10-AOP详解" class="headerlink" title="10.AOP详解"></a>10.AOP详解</h3><h4 id="AOP实现机制"><a href="#AOP实现机制" class="headerlink" title="AOP实现机制"></a>AOP实现机制</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040934449.png" alt="image-20210605153837739"></p>
<h4 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h4><ul>
<li>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术</li>
<li>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040934769.png" alt="image-20210605153954045"></p>
<h4 id="AOP在Spring中"><a href="#AOP在Spring中" class="headerlink" title="AOP在Spring中"></a>AOP在Spring中</h4><p>AOP在不改变原有代码的情况下，增加新的功能</p>
<p>有三种实现方法：</p>
<ul>
<li>Spring的API接口实现</li>
<li>自定义类来实现AOP</li>
<li>使用注解实现</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>Java</tag>
        <tag>框架学习</tag>
        <tag>Spring</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|面向对象学习</title>
    <url>/2021/01/31/Java/Java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040939004.png" alt="image-20210904093908758"></p>
<span id="more"></span>

<h4 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h4><h5 id="1-class和instance"><a href="#1-class和instance" class="headerlink" title="1.class和instance"></a>1.class和instance</h5><p>class即类，instance即实例。</p>
<p>class是一种对象模版，它定义了如何创建实例，因此，class本身就是一种数据类型；</p>
<p>而instance是对象实例，instance是根据class创建的实例，可以创建多个instance，每个instance类型相同，但各自属性可能不相同。</p>
<h5 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个city类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建类的字段即属性</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> lattitude;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> longitude;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">oop1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建实例frist</span></span><br><span class="line">        City frist = <span class="keyword">new</span> City();</span><br><span class="line">        <span class="comment">// 对实例的属性赋值</span></span><br><span class="line">        frist.name = <span class="string">&quot;shanghai&quot;</span>;</span><br><span class="line">        frist.lattitude = <span class="number">11</span>;</span><br><span class="line">        frist.longitude = <span class="number">111</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问实例属性并打印</span></span><br><span class="line">        System.out.println(frist.name);</span><br><span class="line">        System.out.println(frist.lattitude);</span><br><span class="line">        System.out.println(frist.longitude);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-实例讲解"><a href="#3-实例讲解" class="headerlink" title="3. 实例讲解"></a>3. 实例讲解</h5><ul>
<li>City类中包含了3个字段（field，有些语言叫做属性），通过class我们实现了数据的封装</li>
<li>public可以用来修饰方法和字段，表示其可以被外部访问</li>
<li>创建实例用new，用Class名作为实例的数据类型</li>
<li>访问实例属性时可以用<code>变量.字段</code>的形式，但是如果用private修饰了该属性则会报错</li>
</ul>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="1-方法的引入"><a href="#1-方法的引入" class="headerlink" title="1.方法的引入"></a>1.方法的引入</h5><p>上一级中，我们直接把属性用<code>public</code>修饰，把属性暴露给外部可能会破坏封装性。所以我们往往采用<code>private</code>修饰属性，然后通过<strong>方法</strong>来读取属性赋值</p>
<h5 id="2-参数绑定"><a href="#2-参数绑定" class="headerlink" title="2.参数绑定"></a>2.参数绑定</h5><p>基本类型参数的传递，是调用方值的复制。双方各自的后续修改，互不影响</p>
<h5 id="3-实例"><a href="#3-实例" class="headerlink" title="3.实例"></a>3.实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">opp2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person Jhon = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">// 调用实例的方法</span></span><br><span class="line">        Jhon.setBirth(<span class="number">2000</span>);</span><br><span class="line">        System.out.println(Jhon.getage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义私有属性，外部不可调用</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> birth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this永远指向当前实例，从而达到赋值的目的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(<span class="keyword">int</span> birth)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 调用类内部私有的方法</span></span><br><span class="line">        <span class="keyword">return</span> calcAge(<span class="number">2020</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法，仅允许类内部调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calcAge</span><span class="params">(<span class="keyword">int</span> currentYear)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentYear - <span class="keyword">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="4-实例讲解"><a href="#4-实例讲解" class="headerlink" title="4.实例讲解"></a>4.实例讲解</h5><ul>
<li><code>public int getage()</code>该语句中，<code>public</code>用于修饰方法是否供外部调用，<code>int</code>则是该方法的返回数据类型</li>
<li>通过<code>this.field</code>就可以访问当前实例的字段，如果命名没有冲突实际上可以省略<code>this</code></li>
<li><code>this.birth = birth</code>前一个<code>birth</code>指向实例的一个属性，后一个<code>birth</code>则是外部传入的参数，因为命名重复，所以要用this修饰</li>
</ul>
<h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h5 id="1-构造方法应用"><a href="#1-构造方法应用" class="headerlink" title="1.构造方法应用"></a>1.构造方法应用</h5><p>创建对象实例时，我们可以使用构造方法让内部字段初始化，其相当于类内部一个和类同名的特殊的方法。</p>
<h5 id="2-默认构造方法"><a href="#2-默认构造方法" class="headerlink" title="2.默认构造方法"></a>2.默认构造方法</h5><p>如果一个类没有定义构造方法，编译器会为我们生成一个默认的构造方法，因而我们可以在<code>new Person()</code>调用</p>
<p>如果我们自定义了一个构造方法，那么默认的构造方法将不会被创建</p>
<h5 id="3-实例-1"><a href="#3-实例-1" class="headerlink" title="3.实例"></a>3.实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">opp3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用构造方法</span></span><br><span class="line">        Person2 ming = <span class="keyword">new</span> Person2(<span class="string">&quot;小明&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        System.out.println(ming.getAge());</span><br><span class="line">        System.out.println(ming.getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 创建构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person2</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><h5 id="1-方法重载介绍"><a href="#1-方法重载介绍" class="headerlink" title="1.方法重载介绍"></a>1.方法重载介绍</h5><p>在一个类中，如果存在一系列的方法功能方法名一样，但是参数不同。这种方法名相同，但各自的参数不同，称为方法重载（Overload）</p>
<p>方法重载参数不同，但是返回值类型通常相同</p>
<h5 id="2-实例-1"><a href="#2-实例-1" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">opp4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person4 ming = <span class="keyword">new</span> Person4();</span><br><span class="line">        ming.setName(<span class="string">&quot;xiao&quot;</span>, <span class="string">&quot;ming&quot;</span>);</span><br><span class="line">        System.out.println(ming.getname());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person4</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getname</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setname</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String fname, String lname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = fname + lname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="1-继承的应用"><a href="#1-继承的应用" class="headerlink" title="1.继承的应用"></a>1.继承的应用</h5><p>通过继承子类可以获得父类的所有功能，还可以在父类基础上编写额外的功能。</p>
<p>类自动获得了父类的所有字段，严禁定义与父类重名的字段</p>
<p>父类又可以称为超类，基类</p>
<p>子类又可以称为扩展类</p>
<h5 id="2-继承树"><a href="#2-继承树" class="headerlink" title="2.继承树"></a>2.继承树</h5><p>除了object外，任何类都会继承于某个类，一个子类只能有一个父类，一个父类允许存在多个子类</p>
<h5 id="3-protected与private"><a href="#3-protected与private" class="headerlink" title="3.protected与private"></a>3.protected与private</h5><p>如果父类中的属性或方法是<code>private</code>修饰，子类同样也是无法访问到的，这时我们可以使用protected修饰，可以把属性和方法的权限控制在继承树内部</p>
<h5 id="4-子类的构造方法"><a href="#4-子类的构造方法" class="headerlink" title="4.子类的构造方法"></a>4.子类的构造方法</h5><p>子类是无法继承父类的任何构造方法的，编译器会自动为我们添加<code>super()</code>来调用父类的构造方法，故若是父类存在带参数的构造方法，要手动在子类中调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="number">12</span>, <span class="number">89</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的构造方法Person(String, int)</span></span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="7-向上转型与向下转型"><a href="#7-向上转型与向下转型" class="headerlink" title="7.向上转型与向下转型"></a>7.向上转型与向下转型</h5><p>（1）向上转型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果一个引用变量的类型是Student，那么它可以指向一个Student类型的实例</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">// 一个引用类型为Person的变量同样可以指向Student类型的实例</span></span><br><span class="line">Person p = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure>

<p>这种把一个子类类型安全地变为父类类型的赋值，被称为向上转型（upcasting）</p>
<p>注意到继承树是<code>Student &gt; Person &gt; Object</code>，所以，可以把<code>Student</code>类型转型为<code>Person</code>，或者更高层次的<code>Object</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Student s &#x3D; new Student();</span><br><span class="line">Person p &#x3D; s; </span><br><span class="line">Object o1 &#x3D; p;</span><br><span class="line">Object o2 &#x3D; s;</span><br></pre></td></tr></table></figure>



<p>（2）向下转型</p>
<p>如果把一个父类类型强制转型为子类类型，就是向下转型（downcasting）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Student();</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 向下转型成功，因为p1虽然变量类型是Person，实际内容是子类，故能转型成功</span></span><br><span class="line">Student s1 = (Student) p1; </span><br><span class="line"><span class="comment">// 向下转型失败，实际内容是父类，不能由父类转向子类</span></span><br><span class="line">Student s2 = (Student) p2; </span><br></pre></td></tr></table></figure>



<h5 id="6-实例"><a href="#6-实例" class="headerlink" title="6.实例"></a>6.实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;小红&quot;</span>, <span class="number">20</span>, <span class="number">99</span>);</span><br><span class="line">        <span class="comment">// 定义PrimaryStudent，从Student继承，新增grade字段:</span></span><br><span class="line">        Student ps = <span class="keyword">new</span> PrimaryStudent(<span class="string">&quot;小军&quot;</span>, <span class="number">9</span>, <span class="number">100</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(ps.getScore());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> score; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimaryStudent</span> <span class="keyword">extends</span> <span class="title">Student</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> grade;</span><br><span class="line">   	<span class="function"><span class="keyword">public</span> <span class="title">PrimaryStudent</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score, <span class="keyword">int</span> grade)</span></span>&#123;</span><br><span class="line">       <span class="comment">// 调用Student的构造函数 </span></span><br><span class="line">       <span class="keyword">super</span>(name, age, score);</span><br><span class="line">       <span class="keyword">this</span>.grade = grade;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><h5 id="1-覆写"><a href="#1-覆写" class="headerlink" title="1.覆写"></a>1.覆写</h5><p>子类中不能存在与父类重名的属性，但子类可以覆写父类的方法，覆写方法时方法名和返回类型要相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">   	<span class="comment">// 加上@Override 可以让编译器帮助检查是否正确覆写</span></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String s)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-多态"><a href="#2-多态" class="headerlink" title="2.多态"></a>2.多态</h5><p>Java的实例方法调用是基于运行时的实际类型的动态调用（<code>new Student()</code>），而非变量的声明类型（<code>Person</code>）</p>
<p>多态是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法</p>
<p>多态具有一个强大的功能——允许添加更多类型的子类实现功能扩展，却不需要修改基于父类的代码</p>
<h5 id="3-实例-2"><a href="#3-实例-2" class="headerlink" title="3.实例"></a>3.实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数组存储两部分的税收</span></span><br><span class="line">        Income[] incomes = <span class="keyword">new</span> Income[] &#123;</span><br><span class="line">            <span class="keyword">new</span> Income(<span class="number">3000</span>),</span><br><span class="line">            <span class="keyword">new</span> Salary(<span class="number">7500</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(totalTax(incomes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">totalTax</span><span class="params">(Income... incomes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 此处的循环中income的实际指向可以动态改变（Income/Salary）</span></span><br><span class="line">        <span class="comment">// getTax由于子类的多态实际上调用的方法不同</span></span><br><span class="line">        <span class="keyword">for</span> (Income income: incomes) &#123;</span><br><span class="line">            total = total + income.getTax();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> income;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Income</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.income = income;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> income * <span class="number">0.1</span>; <span class="comment">// 税率10%</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Salary</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(income);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 重写父类的得税方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (income &lt;= <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (income - <span class="number">5000</span>) * <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-多态补充"><a href="#4-多态补充" class="headerlink" title="4.多态补充"></a>4.多态补充</h5><p>（1）调用父类中被覆写的方法用<code>super</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student extends Person &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的hello()方法:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hello() + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（2）final修饰可以防止方法被子类覆写如：<code>public final String hello()</code></p>
<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><h5 id="1-面向抽象编程"><a href="#1-面向抽象编程" class="headerlink" title="1.面向抽象编程"></a>1.面向抽象编程</h5><p>抽象类和其中的抽象方法本身是无法执行的，其强制了子类必须实现其定义的抽象方法，即相当于定义了一个规范</p>
<p>这种引用高层类型，避免引用子类型的方式，称为面向抽象编程</p>
<p>有以下优点：</p>
<ul>
<li>上层代码只定义规范（例如：<code>abstract class Person</code>）；</li>
<li>不需要子类就可以实现业务逻辑（正常编译）；</li>
<li>具体的业务逻辑由不同的子类实现，调用者并不关心</li>
</ul>
<h5 id="2-实例-2"><a href="#2-实例-2" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        p.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student.run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><h5 id="1-接口介绍"><a href="#1-接口介绍" class="headerlink" title="1.接口介绍"></a>1.接口介绍</h5><p>接口（interface）中没有字段，接口中定义的所有方法默认为<code>public abstract</code></p>
<h5 id="2-接口实现"><a href="#2-接口实现" class="headerlink" title="2.接口实现"></a>2.接口实现</h5><p>当用一个具体的class实现一个interface时，需要用到implements关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类实现接口，一个类只能继承一个类，但是可以实现多个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">&quot; run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-接口继承"><a href="#3-接口继承" class="headerlink" title="3.接口继承"></a>3.接口继承</h5><p>接口也可以通过继承扩展</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h4><h5 id="1-静态字段"><a href="#1-静态字段" class="headerlink" title="1.静态字段"></a>1.静态字段</h5><p>class中定义的字段我们称为实例字段，其一般有着独立性，各个实例间互不影响</p>
<p>但是如果我们用<code>static</code>一个静态修饰一个字段，那么所有的实例都会共享这个字段的空间</p>
<p>对于静态字段，我们无论修改哪个实例，所有实例的静态字段都会改动</p>
<p>我们往往采用<code>类名.静态字段</code>访问静态对象，如:<code>Person.number = 99;</code></p>
<h5 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2.静态方法"></a>2.静态方法</h5><p>静态方法可以通过类名直接调用，不需要一个实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person.setNumber(<span class="number">99</span>);</span><br><span class="line">        System.out.println(Person.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个静态方法，因为静态方法不存在实例，所以无法访问this变量（不能用this）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        number = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-接口的静态字段"><a href="#3-接口的静态字段" class="headerlink" title="3.接口的静态字段"></a>3.接口的静态字段</h5><p>因为接口是一个纯抽象类，所以它不能定义实例字段，但是可以有静态字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 编译器会自动加上public statc final:</span></span><br><span class="line">    <span class="keyword">int</span> MALE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> FEMALE = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><p>位于同一个包的类，可以访问包作用域的字段和方法。不用<code>public</code>、<code>protected</code>、<code>private</code>修饰的字段和方法就是包作用域</p>
<p>可以用import语句导入其他包的class</p>
<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>可参考：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260466215676512">https://www.liaoxuefeng.com/wiki/1252599548343744/1260466215676512</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>Java</tag>
        <tag>后端</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|网络爬虫项目</title>
    <url>/2021/04/26/Java/Java-%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040942707.jpeg" alt="logo"></p>
<span id="more"></span>

<h3 id="idea基本设置"><a href="#idea基本设置" class="headerlink" title="idea基本设置"></a>idea基本设置</h3><p>File&gt;Setting打开idea基本设置，可以更改字体主题，安装插件等</p>
<p>建议安装中文翻译插件和Codota插件</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040940118.png" alt="image-20210507095023736"></p>
<h3 id="idea创建项目"><a href="#idea创建项目" class="headerlink" title="idea创建项目"></a>idea创建项目</h3><h4 id="1-参考文章"><a href="#1-参考文章" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://www.jianshu.com/p/e2c17c3460de">IDEA新建一般Java项目</a></p>
<p><a href="https://blog.csdn.net/shaxu123/article/details/97097296">语言版本和环境版本不一致导致错误</a>：Error:java: 无效的源发行版</p>
<h4 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）配置"><a href="#（1）配置" class="headerlink" title="（1）配置"></a>（1）配置</h5><p>新建一般Java项目时，一般选择默认配置进行</p>
<h5 id="（2）打开项目"><a href="#（2）打开项目" class="headerlink" title="（2）打开项目"></a>（2）打开项目</h5><p>打开的项目文件时，文件结构如下，文件路径多出一层或少一层文件，idea都不能识别出该项目（程序文件都要放到src文件中）：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040941220.png" alt="image-20210507092554533"></p>
<h5 id="（3）配置修改"><a href="#（3）配置修改" class="headerlink" title="（3）配置修改"></a>（3）配置修改</h5><p>项目结构（文件 &gt; 项目结构）中可以修改项目的一些配置（可设置项目，模块的语言级别）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040941155.png" alt="image-20210507095156216"></p>
<h5 id="（4）标记目录"><a href="#（4）标记目录" class="headerlink" title="（4）标记目录"></a>（4）标记目录</h5><p>标记目录可以自定义源根目录等，一般不改动，默认src为源根目录</p>
<h5 id="（5）添加Maven框架"><a href="#（5）添加Maven框架" class="headerlink" title="（5）添加Maven框架"></a>（5）添加Maven框架</h5><p>在Java一般项目中没有meavn的选项，可以在后期加上Maven框架支持</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040941147.png" alt="image-20210507101055813"></p>
<p>添加了Maven框架后，还需要重新加载Maven项目即可完成框架添加</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040941626.png" alt="image-20210507101357206"></p>
<h3 id="配置meavn"><a href="#配置meavn" class="headerlink" title="配置meavn"></a>配置meavn</h3><h4 id="1-参考文章-1"><a href="#1-参考文章-1" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://zhuanlan.zhihu.com/p/122429605">Meavn配置过程</a></p>
<p><a href="https://blog.csdn.net/stone_fall/article/details/108140716">依赖添加错误</a></p>
<p><a href="https://blog.csdn.net/qq_34412985/article/details/104410574">手动添加jar包</a></p>
<h4 id="2-注意事项-1"><a href="#2-注意事项-1" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）maven配置"><a href="#（1）maven配置" class="headerlink" title="（1）maven配置"></a>（1）maven配置</h5><p>idea有自己自带的maven，如果想自定义到自己下载的maven文件，可以在设置中修改（这样的修改只是针对该项目，新建的项目还是使用默认的maven）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040941483.png" alt="image-20210507100212095"></p>
<ul>
<li>设置主目录</li>
<li>用户设置文件指向maven的setting文件</li>
<li>可以新建一个文件用于存储本地库</li>
</ul>
<h5 id="（2）Meavn创建项目"><a href="#（2）Meavn创建项目" class="headerlink" title="（2）Meavn创建项目"></a>（2）Meavn创建项目</h5><p>除了在一般项目创建后再添加Maven框架，我们也可以直接使用Meavn框架创建项目</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040941163.png" alt="image-20210507101919573"></p>
<p>区别于一般的Java项目，使用Meavn框架创建的会在src新建两个文件夹：main（放主程序）和test（放测试程序）</p>
<h5 id="（3）meavn添加包"><a href="#（3）meavn添加包" class="headerlink" title="（3）meavn添加包"></a>（3）meavn添加包</h5><ul>
<li>通过pom.xml添加依赖</li>
</ul>
<p>在pom.xml文件中添加<code>&lt;dependency&gt;&lt;/dependency&gt;</code>标签，如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>要注意要是在<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>内添加依赖</p>
<p>我们可以通过<a href="https://mvnrepository.com/artifact/org.eclipse.ditto/ditto-base-api/2.0.0">Maven Repositor</a>查找对应包的依赖项xml文本</p>
<p>最后加载Maven包变更完成依赖项的添加</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040941753.png" alt="image-20210507103208170"></p>
<ul>
<li>手动添加jar包</li>
</ul>
<p>meavn找不到相关包时，可以直接下载jar文件到本地包，放在刚刚设置Maven本地库存储文件中，然后使用maven导入</p>
<h3 id="爬虫配置"><a href="#爬虫配置" class="headerlink" title="爬虫配置"></a>爬虫配置</h3><h4 id="1-参考文章-2"><a href="#1-参考文章-2" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="http://webmagic.io/docs/zh/">WebMagic 文档</a></p>
<p><a href="https://www.cnblogs.com/justcooooode/p/7913365.html#_label0">出现log4j警告解决方法</a></p>
<p><a href="https://www.cnblogs.com/justlove/p/7637681.html">出现了SLF4J的报错解决方法</a>：添加依赖即解决</p>
<p><a href="http://webmagic.io/docs/zh/posts/ch4-basic-page-processor/">文档中爬虫基本使用介绍</a></p>
<h4 id="2-注意事项-2"><a href="#2-注意事项-2" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）爬虫框架添加"><a href="#（1）爬虫框架添加" class="headerlink" title="（1）爬虫框架添加"></a>（1）爬虫框架添加</h5><p>爬虫框架采用了易于上手的WebMagic框架，在pom.xml文件中添加相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="（2）无法爬取网页"><a href="#（2）无法爬取网页" class="headerlink" title="（2）无法爬取网页"></a>（2）无法爬取网页</h5><p>无法爬取TLS1.2协议站点的问题</p>
<p>在依赖中把WebMagica改成最新版本（0.7.4以上）即可解决</p>
<h5 id="（3）SLF4J报错"><a href="#（3）SLF4J报错" class="headerlink" title="（3）SLF4J报错"></a>（3）SLF4J报错</h5><p>出现了SLF4J报错可以添加以下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="（4）爬取方法"><a href="#（4）爬取方法" class="headerlink" title="（4）爬取方法"></a>（4）爬取方法</h5><ul>
<li>实现实现PageProcessor接口，设置爬虫相关配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Site site = Site.me()</span><br><span class="line">        .setCharset(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">        .setRetryTimes(<span class="number">3</span>)</span><br><span class="line">        .setSleepTime(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>



<ul>
<li>process编写抽取逻辑，可以定义爬取页面的规则</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">// 爬取title放入父类私有属性中</span></span><br><span class="line">    List title = page.getHtml()</span><br><span class="line">        .css(<span class="string">&quot;li &gt; div &gt; div.details &gt; span.link.h-cite.u-repost-of &gt; a&quot;</span>)</span><br><span class="line">        .regex(<span class="string">&quot;&gt;(.+)&lt;/a&gt;&quot;</span>,<span class="number">1</span>)</span><br><span class="line">        .all();</span><br><span class="line">        </span><br><span class="line">    	set_title(title);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>Spider类执行爬虫</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Spider.create(obj)</span><br><span class="line">      .addUrl(url)</span><br><span class="line">      <span class="comment">//开启4个线程抓取</span></span><br><span class="line">      .thread(<span class="number">4</span>)</span><br><span class="line">      <span class="comment">//启动爬虫</span></span><br><span class="line">      .run();</span><br></pre></td></tr></table></figure>



<h5 id="（5）正则匹配问题"><a href="#（5）正则匹配问题" class="headerlink" title="（5）正则匹配问题"></a>（5）正则匹配问题</h5><p>WebMagic链式抽取元素中使用的正则是不区分大小写的</p>
<h3 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h3><h4 id="1-参考文章-3"><a href="#1-参考文章-3" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://blog.csdn.net/XJ0927/article/details/108229970">IDEA单元测试设置过程</a></p>
<p><a href="http://www.justdojava.com/2019/07/20/debug-in-idea/">深入学习 Intellij IDEA 调试技巧</a></p>
<h4 id="2-单元测试"><a href="#2-单元测试" class="headerlink" title="2.单元测试"></a>2.单元测试</h4><h5 id="（1）单元测试理解"><a href="#（1）单元测试理解" class="headerlink" title="（1）单元测试理解"></a>（1）单元测试理解</h5><p>单元测试实质上是在主运行程序之外，为某个方法创建单独的测试程序，而不必只有一个执行入口进入程序</p>
<h5 id="（2）单元测试特殊情况"><a href="#（2）单元测试特殊情况" class="headerlink" title="（2）单元测试特殊情况"></a>（2）单元测试特殊情况</h5><p>抽象方法在单元测试时不能被调用，因为抽象类不能有实例不能直接调用</p>
<h5 id="（3）单元测试使用案例"><a href="#（3）单元测试使用案例" class="headerlink" title="（3）单元测试使用案例"></a>（3）单元测试使用案例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 爬取工具类测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">spider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Tool().spider(<span class="keyword">new</span> Lobsters() ,<span class="string">&quot;https://lobste.rs/&quot;</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h5 id="（4）单元测试生成"><a href="#（4）单元测试生成" class="headerlink" title="（4）单元测试生成"></a>（4）单元测试生成</h5><p>idea可以快捷为类生成一个测试类，并可以勾选生成测试方法</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040941641.png" alt="image-20210508081411414"></p>
<h4 id="3-单步调试"><a href="#3-单步调试" class="headerlink" title="3.单步调试"></a>3.单步调试</h4><h5 id="（1）断点设置"><a href="#（1）断点设置" class="headerlink" title="（1）断点设置"></a>（1）断点设置</h5><p>设置断点可以让程序在调试时从入口开始执行到断点所在代码</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040941178.png" alt="image-20210508083551638"></p>
<p>不设断点调试，程序会执行完全部代码，无法实现单步调试</p>
<h5 id="（2）调试显示"><a href="#（2）调试显示" class="headerlink" title="（2）调试显示"></a>（2）调试显示</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040941715.png" alt="image-20210508084409131"></p>
<ul>
<li>重新调试：当单步调试进入加载类等奇怪的地方时，可以重新调试，直到断点出现勾号，说明调试成功</li>
<li>调试过程中，步过（<strong>Setp Over</strong>）使用频率最高，当碰到方法时，不会进入方法内，而是直接调用方法，然后进入下一行</li>
<li>步进（ <strong>Step Into</strong>）则会进入方法内</li>
</ul>
<h3 id="构造子类"><a href="#构造子类" class="headerlink" title="构造子类"></a>构造子类</h3><h4 id="1-参考文章-4"><a href="#1-参考文章-4" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://blog.csdn.net/HD243608836/article/details/89155433">java中父类与子类有相同属性调谁？取决于左边</a></p>
<p><a href="https://blog.csdn.net/dxtianlei/article/details/99299051">父类私有属性和私有方法的继承</a></p>
<p><a href="https://blog.csdn.net/ccpat/article/details/44515335">Java this 关键字用法</a></p>
<h4 id="2-注意事项-3"><a href="#2-注意事项-3" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）子类属性继承问题"><a href="#（1）子类属性继承问题" class="headerlink" title="（1）子类属性继承问题"></a>（1）子类属性继承问题</h5><ul>
<li><p>子类是继承了父类的私有属性和私有方法，只是子类没有权限直接访问父类的私有属性和私有方法。但是我们可以通过继承父类get和set方法访问到父类的私有属性</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改私有属性方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set_title</span><span class="params">(List title)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问私有属性方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">show_title</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>父类属性不可被重写,只会被调用,父类方法可以被重写,也可以被调用</p>
</li>
<li><p>当子类中存在和父类同名属性,父类属性会隐藏起来,在多态的情况下属性被调用时会激活父类属性子类属性隐藏起来,而方法不会隐藏,一旦被重写,只能使用super来在子类调用</p>
</li>
</ul>
<h5 id="（2）继承中this指向问题"><a href="#（2）继承中this指向问题" class="headerlink" title="（2）继承中this指向问题"></a>（2）继承中this指向问题</h5><ul>
<li>对于方法的覆盖，new的谁就调谁，这就是多态。</li>
<li>对于成员变量的覆盖，this在哪个类就指向哪个类的成员变量，没有多态。</li>
<li>无论子类是否覆盖成员变量，this始终访问父类的成员变量</li>
<li>静态方法中，无法使用this引用上下文内容（属性，方法）</li>
</ul>
<h5 id="（3）抽象方法使用问题"><a href="#（3）抽象方法使用问题" class="headerlink" title="（3）抽象方法使用问题"></a>（3）抽象方法使用问题</h5><ul>
<li>抽象类是作为一个模板存在的，不能创建抽象类对象，需要用子类实现所有其抽象方法后变为非抽象类才能间接实例化</li>
<li>抽象方法只有声明没有实现（对于不知道该怎么实现的方法，我们可以声明为抽象方法），强制子类必须重写抽象方法</li>
</ul>
<h3 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h3><h4 id="1-参考文章-5"><a href="#1-参考文章-5" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://www.geeksforgeeks.org/md5-hash-in-java/">Java实现md5加密</a></p>
<p><a href="https://blog.csdn.net/Littleflowers/article/details/113955196">Java内部类实现http请求</a></p>
<p><a href="https://www.cnblogs.com/liaohuiqiang/p/7627022.html">http请求与多线程</a></p>
<p><a href="https://blog.csdn.net/foxpeter/article/details/23475293">URL中关于空格的编码</a></p>
<h4 id="2-注意事项-4"><a href="#2-注意事项-4" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）Http请求实现"><a href="#（1）Http请求实现" class="headerlink" title="（1）Http请求实现"></a>（1）Http请求实现</h5><ul>
<li><p>get请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String urlNameString = url + <span class="string">&#x27;?&#x27;</span> + param;</span><br><span class="line">URL realUrl = <span class="keyword">new</span> URL(urlNameString);</span><br><span class="line"><span class="comment">// 打开链接，强转换为httpURLConnection类</span></span><br><span class="line">URLConnection connection = realUrl.openConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置通用请求属性</span></span><br><span class="line">connection.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">connection.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">connection.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>,<span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span>);</span><br><span class="line"><span class="comment">// 建立实际链接</span></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求成功获得输入流</span></span><br><span class="line">BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(connection.getInputStream()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得返回结果</span></span><br><span class="line">String res = in.readLine();</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>post请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URL realUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line"><span class="comment">// 打开和URL之间的连接</span></span><br><span class="line">URLConnection conn = realUrl.openConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置通用的请求属性</span></span><br><span class="line">conn.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">conn.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">conn.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>,</span><br><span class="line"><span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送POST请求必须设置如下两行</span></span><br><span class="line">conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取URLConnection对象对应的输出流</span></span><br><span class="line">out = <span class="keyword">new</span> PrintWriter(conn.getOutputStream());</span><br><span class="line"><span class="comment">// 发送请求参数</span></span><br><span class="line">out.print(param);</span><br><span class="line"><span class="comment">// flush输出流的缓冲</span></span><br><span class="line">out.flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义BufferedReader输入流来读取URL的响应</span></span><br><span class="line">in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得返回结果 </span></span><br><span class="line">String res = in.readLine();</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li>Java发起http请求后，返回值为String类型</li>
<li>注意请求api的QPS（每秒请求量），我们可以通过<code>Thread.currentThread().sleep(1000);//毫秒</code> 简单实现延时</li>
<li>链接编码问题，有时候链接请求失败是因为空格没有编码为%20,而导致请求失败</li>
</ul>
<h5 id="（2）Java加密问题"><a href="#（2）Java加密问题" class="headerlink" title="（2）Java加密问题"></a>（2）Java加密问题</h5><p>​    实现md5加密</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// md5加密工具</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMd5</span><span class="params">(String input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用哈希MD5调用静态getInstance方法</span></span><br><span class="line">        MessageDigest md = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// digest() 方法调用来计算消息摘要</span></span><br><span class="line">        <span class="comment">//  of an input digest() return array of byte</span></span><br><span class="line">        <span class="keyword">byte</span>[] messageDigest = md.digest(input.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字节数组转换为符号表示</span></span><br><span class="line">        BigInteger no = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, messageDigest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将消息摘要转换为十六进制值</span></span><br><span class="line">        String hashtext = no.toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">while</span> (hashtext.length() &lt; <span class="number">32</span>) &#123;</span><br><span class="line">            hashtext = <span class="string">&quot;0&quot;</span> + hashtext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hashtext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于指定错误的消息摘要算法</span></span><br><span class="line">    <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="Java数据处理"><a href="#Java数据处理" class="headerlink" title="Java数据处理"></a>Java数据处理</h4><h4 id="1-参考文章-6"><a href="#1-参考文章-6" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://blog.csdn.net/chenkaibsw/article/details/78989459">Java数组遍历方法</a></p>
<p><a href="https://blog.csdn.net/WZH577/article/details/90453762">java遍历List方法</a></p>
<p><a href="https://www.cnblogs.com/goloving/p/7740100.html">List和Array相互转换 </a></p>
<h4 id="2-注意事项-5"><a href="#2-注意事项-5" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）字符串与数组转换"><a href="#（1）字符串与数组转换" class="headerlink" title="（1）字符串与数组转换"></a>（1）字符串与数组转换</h5><ul>
<li><p>字符串转换成数组</p>
<p>String.split() 方法，Java 中通常用 split() 分割字符串，返回的是一个数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;123abc&quot;</span>;</span><br><span class="line">String[] arr = str.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; <span class="comment">// String数组</span></span><br><span class="line">    System.out.print(arr[i]); <span class="comment">// 输出 1 2 3 a b c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组转换为字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr = &#123; <span class="string">&quot;123&quot;</span>, <span class="string">&quot;abc&quot;</span> &#125;;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    sb.append(arr[i]); <span class="comment">// String并不拥有append方法，所以借助 StringBuffer</span></span><br><span class="line">&#125;</span><br><span class="line">String sb1 = sb.toString();</span><br><span class="line">System.out.println(sb1); <span class="comment">// 输出123abc</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="（2）数组遍历方法"><a href="#（2）数组遍历方法" class="headerlink" title="（2）数组遍历方法"></a>（2）数组遍历方法</h5><ul>
<li><p>传统for循环方法</p>
</li>
<li><p>for each循环（foreach只能用于普通数组）</p>
</li>
<li><p>利用Array类中的toString方法（不能直接打印数组，<code>System.out.println(array)</code>这样打印是的是数组的首地址）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(array))</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="（3）List遍历方法"><a href="#（3）List遍历方法" class="headerlink" title="（3）List遍历方法"></a>（3）List遍历方法</h5><ul>
<li>迭代器遍历（hasNext和next方法）</li>
<li>for each遍历（从List中获得的元素是对象）</li>
<li>传统for循环遍历（使用size方法获得List长度）</li>
<li>Lambda表达式</li>
</ul>
<h5 id="（3）Java中的正则表达式"><a href="#（3）Java中的正则表达式" class="headerlink" title="（3）Java中的正则表达式"></a>（3）Java中的正则表达式</h5><ul>
<li>注意该正则方法，一定是先find后group，group()方法通过前一个成功的find()方法调用返回找到的字符串</li>
</ul>
<h5 id="（5）List与Array的转换"><a href="#（5）List与Array的转换" class="headerlink" title="（5）List与Array的转换"></a>（5）List与Array的转换</h5><ul>
<li><p>List to Array</p>
<p>使用List 提供的toArray的接口对List进行转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定类型转换</span></span><br><span class="line">String[] array=list.toArray(<span class="keyword">new</span> String[list.size()]);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Array to List</p>
<p>使用ArrayList的构造方法进行转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(array));</span><br></pre></td></tr></table></figure>





</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
        <tag>Java</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript|DOM编程艺术</title>
    <url>/2020/03/08/JavaScript/JavaScript-DOM%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109042334476.png" alt="image-20210904233422857"></p>
<span id="more"></span>

<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h4 id="DOM的构成"><a href="#DOM的构成" class="headerlink" title="DOM的构成"></a>DOM的构成</h4><h5 id="1-文档：DOM的”D”"><a href="#1-文档：DOM的”D”" class="headerlink" title="1.文档：DOM的”D”"></a>1.文档：DOM的”D”</h5><p>“D”即”document”，中文为文档，但一个网页加载到web浏览器时，就会生成一份网页的结构性的文档，文档中包含着许多对象，对象之间的关系又构成了一个模型。</p>
<h5 id="2-对象：DOM的”O”"><a href="#2-对象：DOM的”O”" class="headerlink" title="2.对象：DOM的”O”"></a>2.对象：DOM的”O”</h5><p>“O”即”object”，中文为对象。对象就是一种独立的数据集合，所以文档内容就是一个个对象的属性方法构成的。</p>
<h5 id="3-模型：DOM的”M”"><a href="#3-模型：DOM的”M”" class="headerlink" title="3.模型：DOM的”M”"></a>3.模型：DOM的”M”</h5><p>”M“即”model“，中文为模型。模型的含义是某种事物的表现形式。浏览器会为我们提供当前网页的地图，而我们就可以用js去读这份地图</p>
<p>至此，我们不难理解，所谓DOM就是把网页的文档内容表示成了一棵树，有树干和树枝的从属关系，而我们就可以顺藤摸瓜地了解整棵树</p>
<p>从html的角度来看，标签的包含关系和并列关系就是这样类似的模型</p>
<h5 id="4-节点"><a href="#4-节点" class="headerlink" title="4.节点"></a>4.节点</h5><p>更加准确地描述DOM，应该要引入节点这个概念，文档是由节点构成的集合。每个节点都是一个对象</p>
<p>一份DOM包括的节点</p>
<ul>
<li>元素节点，对应html的标签层级关系，其中<html>元素就是这棵节点树的根元素</html></li>
<li>文本节点，对应html的文本，所以文本节点是在元素节点内部的</li>
<li>属性节点，对应html标签的属性信息，所以所以属性节点也是包含在元素节点内的</li>
</ul>
<h4 id="DOM与HTML的连结"><a href="#DOM与HTML的连结" class="headerlink" title="DOM与HTML的连结"></a>DOM与HTML的连结</h4><p>在css层叠样式表中，我们可以使用class属性（为元素分组）和id元素（给元素唯一的认证）实现html和css的连结，而DOM与HTML的连结与此类似。</p>
<p>每个节点都是一个对象，我们通过js选择器来定位节点，然后修改节点的属性和方法来实现交互</p>
<h5 id="1-js选择器"><a href="#1-js选择器" class="headerlink" title="1.js选择器"></a>1.js选择器</h5><p>与css的选择器类似，Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问并交互</p>
<p>选择方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　<span class="comment">//不常用的选择方法：　</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName();   <span class="comment">// 标签，有时太多个要用上数组   </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsById();   <span class="comment">// 通过id寻找标签</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(); <span class="comment">//通过class寻找标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常用且与css选择器非常一致的方法：</span></span><br><span class="line"><span class="built_in">document</span>.querySelector();    <span class="comment">//获取匹配的第一个元素！</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll();     <span class="comment">//获取元素集合，</span></span><br></pre></td></tr></table></figure>

<p>简介用法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> title= <span class="built_in">document</span>.querySelector(“h1”);    </span><br></pre></td></tr></table></figure>



<h5 id="2-document与类的交互"><a href="#2-document与类的交互" class="headerlink" title="2.document与类的交互"></a>2.document与类的交互</h5><p>(1)使用classList函数</p>
<p>为标签增加了一个类，类里面有属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;myDIV&quot;</span>).classList.add(<span class="string">&quot;mystyle&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>常用函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">add(class1, class2, ...) <span class="comment">// 在元素中添加一个或多个类名</span></span><br><span class="line"></span><br><span class="line">remove(class1, class2, ...) <span class="comment">//移除元素中一个或多个类名</span></span><br><span class="line"></span><br><span class="line">toggle(<span class="class"><span class="keyword">class</span>, <span class="title">true</span>|<span class="title">false</span>) //在元素中切换类名，存在则移除，不存在则添加，用于某种开关切换</span></span><br></pre></td></tr></table></figure>



<p>(2)使用attribute函数，attributes 属性返回指定节点属性的集合（不仅可以修改类还可以修改其他参数）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;li&quot;</span>).attributes.class.value=<span class="string">&quot;title&quot;</span>;  <span class="comment">// 将li的class类型改成了title</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;li&quot;</span>).setAttribute(<span class="string">&quot;class&quot;</span>,<span class="string">&quot;title&quot;</span>); <span class="comment">//为li添加class=“title”的属性</span></span><br></pre></td></tr></table></figure>



<p>（3）getAttribute与setAttribute</p>
<p>定位找到对应节点后，我们可以用getAttribute查询其中的元素中各种属性的值，而setAttribute则可以更改这些值，和上述更改类的方法类似</p>
<h5 id="3-与文本内容的交互"><a href="#3-与文本内容的交互" class="headerlink" title="3.与文本内容的交互"></a>3.与文本内容的交互</h5><p>（1）html提供的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;h1&quot;</span>).innerHTML=<span class="string">&quot;Goodbye&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;h1&quot;</span>).innerHTML=<span class="string">&quot;&lt;em&gt;Goodbye&lt;/em&gt;&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>//修改文本的内容，甚至可以写入html代码修改文本样式</p>
<p>但值得注意的是，innerHTML属性只适用于html文档，浏览器在执行xhtml文档时不会执行innerHTML属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;h1&quot;</span>).textContent=<span class="string">&quot;Goodbye&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>//只能修改文本内容</p>
<p>（2）DOM方法</p>
<p>DOM方法的核心是插入新的子节点，再添加文本属性。</p>
<ul>
<li><p>createElement创造一个新的元素节点</p>
</li>
<li><p>appendChild为元素子节点找个父节点</p>
</li>
<li><p>createTextNode创造文本节点</p>
</li>
<li><p>appendChild为文本子节点找个父节点</p>
<p>实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> para = <span class="built_in">document</span>.creatElement(<span class="string">&quot;p&quot;</span>);<span class="comment">//创造一个元素节点p</span></span><br><span class="line"><span class="keyword">var</span> testdiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;testdiv&quot;</span>) ; <span class="comment">//定位父节点</span></span><br><span class="line">testdiv.appendChild(para);<span class="comment">//确定父子关系</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.creatTextNode(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="comment">//创造文本节点</span></span><br><span class="line">para.appendChild(text);<span class="comment">//把文本节点加到元素节点中</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>（3）补充节点定位方案</p>
<p>insertBefore()方法</p>
<p>把一个新元素插到一个现有元素前面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">paretElement.insertBefore(newElement,targetElement)</span><br></pre></td></tr></table></figure>

<ul>
<li>想插入的新元素newElement</li>
<li>现有元素targetElement</li>
<li>两元素共同父元素</li>
</ul>
<p>insertAfter()方法</p>
<p>事实上DOM并没有这个函数，所以需要自己创建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertAfter</span>（<span class="title">newElement</span>， <span class="title">targetElement</span>）</span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">parent</span> <span class="title">targetElement</span>.<span class="title">parentNode</span></span></span><br><span class="line"><span class="function"><span class="title">if</span> (<span class="params">parent.lastchild == targetElement </span>)(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">parent.appendchild(newElement);</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">else</span></span></span></span><br><span class="line"><span class="function"><span class="params">parent.insertBefore(newElement， targetElement.nextsibling);</span></span></span><br></pre></td></tr></table></figure>





<h5 id="4-更改元素样式"><a href="#4-更改元素样式" class="headerlink" title="4.更改元素样式"></a>4.更改元素样式</h5><p>(1)更改内嵌style法</p>
<p>文档内的每个元素都是一个对象，它们的style属性也是一个对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;id&quot;</span>).style.property=<span class="string">&quot;值&quot;</span></span><br></pre></td></tr></table></figure>

<p>样式表：<a href="https://www.w3school.com.cn/jsref/dom_obj_style.asp">https://www.w3school.com.cn/jsref/dom_obj_style.asp</a></p>
<p>使用案例：</p>
<p>获取style属性中的font-family值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">“content-type“content</span>=<span class="string">“text/html;charset</span>=<span class="string">utf-8/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload= <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> para <span class="built_in">document</span>.getElementById(<span class="string">&quot;example&quot;</span>)</span></span><br><span class="line">alert(The font family is“+ para style.fontFamily);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">“example“style</span>=<span class="string">&quot;color: grey;</span></span></span><br><span class="line"><span class="tag"><span class="string">font-family: &#x27;Arial&#x27;,sans-serif;&quot;</span>&gt;</span></span><br><span class="line">An example of a paragraph</span><br><span class="line">&lt;/p〉</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以获取定位元素节点通过改变值来更改样式</p>
<p>变量简化语句</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buttoncolor = <span class="built_in">document</span>.</span><br><span class="line">(<span class="string">&quot;.game button&quot;</span>).style.backgroundColor;<span class="comment">//错误示范</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buttoncolor = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.game button&quot;</span>).style;<span class="comment">//到此为止</span></span><br></pre></td></tr></table></figure>



<p>数组的使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buttoncolor = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.game button&quot;</span>).style;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colo = [<span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;gold&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;grey&quot;</span>, <span class="string">&quot;brown&quot;</span>, <span class="string">&quot;black&quot;</span>];</span><br><span class="line"></span><br><span class="line">buttoncolor.backgroundColor = colo[<span class="number">2</span>];</span><br></pre></td></tr></table></figure>





<p>(2)js刷新元素class法</p>
<p>style属性采用“Camel记号”来记名，但只能检索到内嵌载html中的样式信息，而无法读取到外部css的样式信息</p>
<p>一些涉及到大量规律性样式的，css也许很难实现，但用js更改样式的方法则很简单</p>
<p>js刷新元素class法不在是在行为层（js）更改样式，而是在表现层（css）更改。这里就要用到className属性来替换元素的class</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">styleHeaderSiblings</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Document.getElementsBy TagName)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> headers = <span class="built_in">document</span>.getElementsBy TagName(“h1”);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;headers.length; i++)(</span><br><span class="line"><span class="keyword">var</span> elem =getNextElementheaders[i]. nextSibling)</span><br><span class="line">elem.className= <span class="string">&quot;intro&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上代码是class属性覆盖，若要实现追加，则需要自己写一个函数</p>
<p>追加方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">elem.className +&#x3D;&quot; intro&quot;</span><br></pre></td></tr></table></figure>

<p>注意：intro的第一个字符是空格</p>
<p>实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">element, value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (element. className)&#123;</span><br><span class="line">element.className.value</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">else</span> &#123;</span><br><span class="line">newClassName.element.className;</span><br><span class="line">newClassName+=<span class="string">&quot; &quot;</span>;</span><br><span class="line">newClassName+= value;</span><br><span class="line">element className newClassName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这样的方案使网页的行为层和表示层彻底分离，js只刷新了className属性，而style属性不受任何影响</p>
<p>再对函数抽象化有：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">styleElementSiblings</span>(<span class="params">tag, theclass</span>)(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">if</span> (!<span class="built_in">document</span>. getByTagName)<span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">var</span> elems=<span class="built_in">document</span>.getElementsByTagName (tag);</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;elems.length; i++)</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">var</span> elem= getNextElement(elems[i]. nextSibling)</span></span></span><br><span class="line"><span class="function"><span class="params">addclass(elem, theclass);</span></span></span><br></pre></td></tr></table></figure>

<p>一个通用的样式变换模板就形成了</p>
<h5 id="5-事件响应"><a href="#5-事件响应" class="headerlink" title="5.事件响应"></a>5.事件响应</h5><p>（1）css事件</p>
<p>css和js在事件响应上有所重叠的部分——css的hover等伪class属性允许我们根据html元素的状态来改变样式，而DOM也可以通过onmouseover等事件处理函数来实现。</p>
<p>如果只是改变某个元素的呈现效果，css就够用了</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#c60</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果想改变某个元素的行为，则更多地使用DOM</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rows = <span class="built_in">document</span>.getElementbuTagName(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;rows.length; i++)&#123;</span><br><span class="line">	rows[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.style.color = <span class="string">&quot;#c60&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">    rows[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.style.color = <span class="string">&quot;black&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（2）用功能制造事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>).addEventlistener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&quot;h1&quot;</span>).classList.toggle(<span class="string">&quot;title&quot;</span>);&#125;)</span><br></pre></td></tr></table></figure>

<p>选择一个标签，给它一个事件，并赋予功能，功能是修改另一个标签——这是最简单的交互，以后会更详细地讲js的事件</p>
<h4 id="DOM小结"><a href="#DOM小结" class="headerlink" title="DOM小结"></a>DOM小结</h4><p>在需要对文档里的现有信息进行检索时，以下DOM方法最有用:</p>
<ul>
<li>getElementById（）</li>
<li>getElementByTagName （）</li>
<li>getAttribute（）</li>
</ul>
<p>在需要把信息添加到文档里去时，以下DOM方法最有用:</p>
<ul>
<li>createElement（）</li>
<li>createTextNode（）</li>
<li>appendChild（）</li>
<li>insertBefore()</li>
<li>setAttribute（）</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>JavaScript</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序|新番查询小程序</title>
    <url>/2020/05/03/Mobile/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%96%B0%E7%95%AA%E6%9F%A5%E8%AF%A2%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041904207.png" alt="image-20210904155423003"></p>
<span id="more"></span>

<h4 id="窗口栏"><a href="#窗口栏" class="headerlink" title="窗口栏"></a>窗口栏</h4><p>在app.json中修改窗口栏</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;window&quot;: &#123;</span><br><span class="line">  &quot;navigationBarBackgroundColor&quot;: &quot;#ec1380&quot;,</span><br><span class="line">  &quot;navigationBarTextStyle&quot;: &quot;white&quot;,</span><br><span class="line">  &quot;navigationBarTitleText&quot;: &quot;新番查询&quot;,</span><br><span class="line">  &quot;navigationStyle&quot;: &quot;default&quot;,</span><br><span class="line">  &quot;backgroundColor&quot;: &quot;#ec1380&quot;,</span><br><span class="line">  &quot;backgroundTextStyle&quot;: &quot;dark&quot;,</span><br><span class="line">  &quot;backgroundColorTop&quot;: &quot;#ffffff&quot;,</span><br><span class="line">  &quot;backgroundColorBottom&quot;: &quot;#ffffff&quot;,</span><br><span class="line">  &quot;enablePullDownRefresh&quot;: true,</span><br><span class="line">  &quot;onReachBottomDistance&quot;: 50</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>常用属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>navigationBarBackgroundColor</td>
<td>#000000</td>
<td>导航栏背景颜色，如 <code>#000000</code></td>
</tr>
<tr>
<td>navigationBarTitleText</td>
<td></td>
<td>导航栏标题文字内容</td>
</tr>
</tbody></table>
<h4 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h4><h5 id="1-index-wxml添加元素"><a href="#1-index-wxml添加元素" class="headerlink" title="1.index.wxml添加元素"></a>1.index.wxml添加元素</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">class</span>=<span class="string">&quot;swiper&quot;</span> <span class="attr">indicator-dots</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span> <span class="attr">interval</span>=<span class="string">&quot;5000&quot;</span> <span class="attr">duration</span>=<span class="string">&quot;500&quot;</span> <span class="attr">circular</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span> <span class="attr">current</span>=<span class="string">&quot;0&quot;</span> <span class="attr">bindchange</span>=<span class="string">&quot;swiperChange&quot;</span>  &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;imgUrls&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;unique&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">swiper-item</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;item&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（1）swiper标签，微信小程序滑块视图容器，以下是其常用属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>indicator-dots</td>
<td>false</td>
<td>是否显示面板指示点</td>
</tr>
<tr>
<td>autoplay</td>
<td>false</td>
<td>是否自动切换</td>
</tr>
<tr>
<td>current</td>
<td>0</td>
<td>当前所在滑块的 index</td>
</tr>
<tr>
<td>interval</td>
<td>5000</td>
<td>自动切换时间间隔</td>
</tr>
<tr>
<td>duration</td>
<td>500</td>
<td>滑动动画时长</td>
</tr>
<tr>
<td>circular</td>
<td>false</td>
<td>是否采用衔接滑动</td>
</tr>
<tr>
<td>bindchange</td>
<td>无</td>
<td>current 改变时会触发 change 事件，event.detail = {current, source}</td>
</tr>
</tbody></table>
<p>（2）block标签，可在wxml文件实现逻辑，常用的有wx:for和wx：if</p>
<ul>
<li>在组件上使用 <code>wx:for</code> 控制属性绑定一个数组，可以理解为该元素储存了一个数组（imgUrls），通过wx：for遍历了这个数组</li>
<li>wx:key用于指定列表中项目的唯一的标识符，相当于数组的下标，确定轮播图的顺序</li>
</ul>
<p>（3）swiper-item，放置在swiper标签中，用于确定轮播对象，代码的轮播对象是图片</p>
<h5 id="2-index-wxss排布元素"><a href="#2-index-wxss排布元素" class="headerlink" title="2.index.wxss排布元素"></a>2.index.wxss排布元素</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.swiper-con</span>&#123;</span><br><span class="line">          <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swiper&#123;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">421</span>rpx;          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swiper-item image&#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.swiper-con</span> <span class="selector-class">.swiper</span>&#123;</span><br><span class="line">          <span class="attribute">height</span>:<span class="number">300</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.swiper-con</span> <span class="selector-class">.swiper</span> <span class="selector-class">.img</span>&#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与css类似的语法，确定轮播图的排布</p>
<h5 id="3-index-js实现逻辑"><a href="#3-index-js实现逻辑" class="headerlink" title="3.index.js实现逻辑"></a>3.index.js实现逻辑</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  imgUrls:[</span><br><span class="line">    <span class="string">&quot;https://i0.hdslb.com/bfs/bangumi/image/bc3c51659027a8f54a8a0a5894c83cafe582139f.jpg@2320w_664h.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i0.hdslb.com/bfs/bangumi/image/8f11a567cf9bed9035c4250584cec6847a7f42cb.jpg@2320w_664h.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i0.hdslb.com/bfs/bangumi/image/ba2a537e388881d4e0c9aec097b7ab690ab9849a.jpg@2320w_664h.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i0.hdslb.com/bfs/bangumi/image/b719ed2a2856345a57c4a68fddcc9de3c01a0ddc.jpg@2320w_664h.jpg&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>data内数据是wxml变量的初始数据，wxml通过wx:for遍历imgUrls，并存储在item变量中输出（注意变量名一定要为item）</li>
<li>函数swiperChange被触发，函数写法为： 函数名：function（参数）{内容}</li>
<li>this.setData更改变量，可用console.log(e)输出数据数组</li>
</ul>
<h4 id="接入API"><a href="#接入API" class="headerlink" title="接入API"></a>接入API</h4><h5 id="1-index-js实现逻辑"><a href="#1-index-js实现逻辑" class="headerlink" title="1.index.js实现逻辑"></a>1.index.js实现逻辑</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line">   url:<span class="string">&quot;https://bangumi.bilibili.com/web_api/timeline_global&quot;</span>,</span><br><span class="line">   data:&#123;<span class="attr">x</span>:<span class="string">&quot;result&quot;</span>&#125;,</span><br><span class="line">   header: &#123;</span><br><span class="line">     <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> </span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(res.data)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>url，填入请求的域名，记住要勾选不校验域名合法或在微信平台填写该域名否则报错</li>
<li>data，返回的数据</li>
<li>header，一般默认不填，返回json型数据</li>
<li>success()，请求成功后执行的语句，一般都会用console.log(res.data)输出数据数组，以便检索出数据</li>
</ul>
<h4 id="构建选择器"><a href="#构建选择器" class="headerlink" title="构建选择器"></a>构建选择器</h4><h5 id="1-index-wxml添加元素-1"><a href="#1-index-wxml添加元素-1" class="headerlink" title="1.index.wxml添加元素"></a>1.index.wxml添加元素</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;choose&quot;</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;<span class="name">picker</span> <span class="attr">bindchange</span>=<span class="string">&quot;bindPickerChange&quot;</span> <span class="attr">range</span>=<span class="string">&quot;&#123;&#123;array&#125;&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;index&#125;&#125;&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> =<span class="string">&quot;picker&quot;</span>&gt;</span></span><br><span class="line">      日期选择：&#123;&#123;array[index]&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（1）<picker>标签构建选择器，用mode确定选择器的类型</picker></p>
<ul>
<li>selector，普通选择器，mode不填时，默认使用</li>
<li>time，时间选择器，小程序内置的可以选择时间的选择器</li>
<li>date，日期选择器</li>
<li>region，省市区选择器</li>
</ul>
<p>（2）range属性，填入一个数组作为选择器的项，这个数组在index.js的初始数据中填写</p>
<p>（3）value属性，填写的是数组的下标，数据同样在data中填入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  array: [],  <span class="comment">//由于我的选择器是从api获取的，所以置空</span></span><br><span class="line">  index: <span class="number">6</span>, <span class="comment">//index代表下标，在B站新番api中，下标6的数据就是今日数据</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>





<p>（4）bindchang属性，填入触发的函数，函数在index.js文件中构建</p>
<p>（5）以上内容都是处理了选择器的数据，接下来就要在页面上展示选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;choose&quot;</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;<span class="name">picker</span> <span class="attr">bindchange</span>=<span class="string">&quot;bindPickerChange&quot;</span> <span class="attr">range</span>=<span class="string">&quot;&#123;&#123;array&#125;&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;index&#125;&#125;&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> =<span class="string">&quot;picker&quot;</span>&gt;</span></span><br><span class="line">      日期选择：&#123;&#123;array[index]&#125;&#125;  //填入可变的数据</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="2-index-wxss选择器布局"><a href="#2-index-wxss选择器布局" class="headerlink" title="2.index.wxss选择器布局"></a>2.index.wxss选择器布局</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.choose</span>&#123;</span><br><span class="line">          <span class="attribute">height</span>:<span class="number">10</span>rpx;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">          <span class="attribute">display</span>:flex;</span><br><span class="line">          <span class="attribute">flex-direction</span>: column;</span><br><span class="line">          <span class="attribute">align-items</span>: center;</span><br><span class="line">          <span class="attribute">margin-top</span>: <span class="number">25</span>rpx;</span><br><span class="line">          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.picker</span>&#123;</span><br><span class="line">          <span class="attribute">border-bottom</span>: <span class="number">5px</span> solid <span class="number">#70bcf6</span>; </span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">2px</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-index-js构建函数"><a href="#3-index-js构建函数" class="headerlink" title="3.index.js构建函数"></a>3.index.js构建函数</h5><p>本项目需要实现的是，获取B站新番的数据，通过选择器来查看该日的新番</p>
<p>（1）填写数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  array: [], <span class="comment">//由于我的选择器是从api获取的，所以置空</span></span><br><span class="line">  index: <span class="number">6</span>,</span><br><span class="line">  arr_png:[]  <span class="comment">//获取api中新番的图片</span></span><br><span class="line"> </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>





<p>（2）初始化页面加载数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="built_in">this</span></span><br><span class="line">  wx.request(&#123;</span><br><span class="line">    url:<span class="string">&quot;https://bangumi.bilibili.com/web_api/timeline_global&quot;</span>,</span><br><span class="line">    data:&#123;<span class="attr">x</span>:<span class="string">&quot;result&quot;</span>&#125;,</span><br><span class="line">    header: &#123;</span><br><span class="line">      <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(); </span><br><span class="line">      <span class="keyword">var</span> arr_gif = <span class="keyword">new</span> <span class="built_in">Array</span>(); </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt;= <span class="number">11</span>;i++)&#123;</span><br><span class="line">        arr[i] = res.data.result[i].date</span><br><span class="line">        arr_gif[i] = res.data.result[i].seasons</span><br><span class="line">      &#125;</span><br><span class="line">      that.setData(&#123;</span><br><span class="line">        array:arr,</span><br><span class="line">        arr_png:arr_gif[<span class="number">6</span>] <span class="comment">//下标6是当天数</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li><p>onLoad: function (options) 函数专门用于数据初始化，加载完页面，即加载完数据</p>
</li>
<li><p>在处理api的数据时不能直接用this，而是用that取代this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>观察api返回的数据，用.符号获取对应数据，通过循环遍历将数据存储在数组中</p>
</li>
<li><p>setDate负责更换数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">that.setData(&#123;</span><br><span class="line">   array:arr, <span class="comment">//data中的array空数组填入获取的日期数据</span></span><br><span class="line">   arr_png:arr_gif[<span class="number">6</span>]  <span class="comment">//填入新番相关数据</span></span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>（3）选择器触发数据重新加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bindPickerChange:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">var</span> value = e.detail.value</span><br><span class="line">  wx.request(&#123;</span><br><span class="line">    url:<span class="string">&quot;https://bangumi.bilibili.com/web_api/timeline_global&quot;</span>,</span><br><span class="line">    data:&#123;<span class="attr">x</span>:<span class="string">&quot;result&quot;</span>&#125;,</span><br><span class="line">    header: &#123;</span><br><span class="line">      <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(); </span><br><span class="line">      <span class="keyword">var</span> arr_gif = <span class="keyword">new</span> <span class="built_in">Array</span>(); </span><br><span class="line">      <span class="built_in">console</span>.log(res.data);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt;= <span class="number">11</span>;i++)&#123;</span><br><span class="line">        arr[i] = res.data.result[i].date</span><br><span class="line">        arr_gif[i] = res.data.result[i].seasons</span><br><span class="line">      &#125;</span><br><span class="line">      that.setData(&#123;</span><br><span class="line">        array:arr,</span><br><span class="line">        index:value,</span><br><span class="line">        arr_png:arr_gif[value]</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>和上面一个函数的获取数据方法一致，用setDate更换数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">that.setData(&#123;</span><br><span class="line">  array:arr,</span><br><span class="line">  index:value,</span><br><span class="line">  arr_png:arr_gif[value]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="展示页面的实现"><a href="#展示页面的实现" class="headerlink" title="展示页面的实现"></a>展示页面的实现</h4><h5 id="1-index-wxml展示页面元素"><a href="#1-index-wxml展示页面元素" class="headerlink" title="1.index.wxml展示页面元素"></a>1.index.wxml展示页面元素</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;anime&quot;</span><span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;arr_png&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;unique&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;png&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;item.cover&#125;&#125;&quot;</span>/&gt;</span>         </span><br><span class="line">          <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">text</span>&gt;</span> &#123;&#123;item.pub_index&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span>                             </span><br><span class="line">          <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;item.url&#125;&#125;&quot;</span>&gt;</span>&#123;&#123;item.title&#125;&#125; <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">view</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<ul>
<li><p>wx:for，填写需要获取的数据，从data中获取（经过js的函数后，此时的数据是从api中的）</p>
</li>
<li><p>通过观察api，用的形式获取数据</p>
</li>
</ul>
<h5 id="2-index-wxss调整布局"><a href="#2-index-wxss调整布局" class="headerlink" title="2.index.wxss调整布局"></a>2.index.wxss调整布局</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.png</span>&#123;</span><br><span class="line">          <span class="attribute">display</span>: flex;</span><br><span class="line">          <span class="attribute">flex-direction</span>: column; <span class="comment">/*垂直布局*/</span></span><br><span class="line">          <span class="attribute">align-items</span>: center; <span class="comment">/*水平方向居中*/</span></span><br><span class="line">          <span class="attribute">margin-top</span>: <span class="number">40</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.png</span> image &#123; </span><br><span class="line">          <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">          <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">          <span class="attribute">margin-top</span>: <span class="number">50</span>rpx;</span><br><span class="line">          <span class="attribute">margin-left</span>: <span class="number">10</span>rpx;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span>&#123;    </span><br><span class="line">          <span class="attribute">position</span>: relative;</span><br><span class="line">          <span class="attribute">top</span>: <span class="number">10</span>rpx;</span><br><span class="line">          <span class="attribute">text-align</span>: center;</span><br><span class="line">          <span class="attribute">color</span>: deepskyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.a</span>&#123;       <span class="attribute">position</span>: relative;</span><br><span class="line">          <span class="attribute">top</span>: <span class="number">20</span>rpx;</span><br><span class="line">          <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>至此一个简单的小程序就完成啦！</p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP|基于PHP开发论坛</title>
    <url>/2020/09/12/PHP/PHP-PHP%E8%AE%BA%E5%9D%9B%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041004045.png" alt="image-20210904100404823"></p>
<span id="more"></span>

<h4 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h4><p>本项目的前端都是通过Bootstrap来实现，我们只需要在页面头部加载Bootstrap的层级样式表，即可非常快捷地使用Bootstrap的组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fastly.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Bootstrap官方文档：<a href="https://v3.bootcss.com/">https://v3.bootcss.com/</a></p>
<h4 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h4><p>我实现图片上传的思路如下：</p>
<ul>
<li><p>前端打开文件，获取文件信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;inpfile&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/gif, image/jpeg, image/png&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default btn-lg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-picture&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过ajax技术将图片发给后端</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$( <span class="built_in">document</span> ).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          $(<span class="string">&#x27;#inpfile&#x27;</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">          </span><br><span class="line">            <span class="keyword">var</span> file_data = $(<span class="string">&#x27;#inpfile&#x27;</span>).prop(<span class="string">&#x27;files&#x27;</span>)[<span class="number">0</span>];   </span><br><span class="line">            <span class="keyword">var</span> form_data = <span class="keyword">new</span> FormData();                  </span><br><span class="line">            form_data.append(<span class="string">&#x27;file&#x27;</span>, file_data);</span><br><span class="line">          </span><br><span class="line">              $.ajax(&#123;</span><br><span class="line">              url:<span class="string">&#x27;pic.php&#x27;</span>,</span><br><span class="line">              type:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">              dataType: <span class="string">&#x27;text&#x27;</span>,  </span><br><span class="line">              cache: <span class="literal">false</span>,</span><br><span class="line">              contentType: <span class="literal">false</span>,</span><br><span class="line">              processData: <span class="literal">false</span>,</span><br><span class="line">              data:form_data,</span><br><span class="line"></span><br><span class="line">      success:<span class="function"><span class="keyword">function</span>(<span class="params">data1</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">var</span> pic = <span class="string">&quot;&lt;br&gt;&lt;img src =&quot;</span>+data1+<span class="string">&quot; /&gt;&lt;br&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="built_in">document</span>.execCommand(<span class="string">&quot;insertHTML&quot;</span>,<span class="string">&quot;false&quot;</span>,pic);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>后端处理并存储图像（放在服务器或本地的某个文件夹）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$imgname</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]; <span class="comment">//获取上传的文件名称</span></span><br><span class="line"><span class="variable">$filetype</span> = pathinfo(<span class="variable">$imgname</span>, PATHINFO_EXTENSION);<span class="comment">//获取后缀</span></span><br><span class="line"><span class="variable">$newname</span> = date(<span class="string">&quot;Ymdhis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$filetype</span>; </span><br><span class="line"><span class="comment">//构建新名称</span></span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$newname</span>;</span><br><span class="line"><span class="comment">// 构建传输路径</span></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;img/&#x27;</span>.iconv(<span class="string">&#x27;UTF-8&#x27;</span>,<span class="string">&#x27;gbk&#x27;</span>,basename(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>])); </span><br><span class="line"><span class="comment">// 将路径存入数据库</span></span><br><span class="line"><span class="variable">$result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="string">&quot;UPDATE  users SET tx = &#x27;<span class="subst">&#123;$dir&#125;</span>&#x27; WHERE id = &#x27;<span class="subst">&#123;$id&#125;</span>&#x27;&quot;</span>);</span><br><span class="line"><span class="comment">// 移动文件到指定路径</span></span><br><span class="line">move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>],<span class="variable">$dir</span>);        </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h4 id="表单与后端"><a href="#表单与后端" class="headerlink" title="表单与后端"></a>表单与后端</h4><h5 id="1-构建表单"><a href="#1-构建表单" class="headerlink" title="1.构建表单"></a>1.构建表单</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;君の名は？&quot;</span> <span class="attr">aria-describedby</span>=<span class="string">&quot;basic-addon1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">aria-describedby</span>=<span class="string">&quot;basic-addon1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>from标签</strong>：表单标签，action属于填发送信息的后端文件（login.php），空白则发给自己；method属性确定发送信息的方式，一般表单都用”POST”</li>
<li><strong>input标签</strong>：设置一个表单域，type属性为表单填写的数据类型（甚至有密码和日期等内置的类型），placeholder属性即表单域提示文字，name属性为该表单域数据起名方便后端识别</li>
<li><strong>button标签</strong>：当button放在from标签内，且type属性为“submit”，可以起到提交表单信息到后端的功能</li>
</ul>
<h5 id="2-后端接收表单信息"><a href="#2-后端接收表单信息" class="headerlink" title="2.后端接收表单信息"></a>2.后端接收表单信息</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;name&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br></pre></td></tr></table></figure>



<h5 id="3-表单重复提交问题"><a href="#3-表单重复提交问题" class="headerlink" title="3.表单重复提交问题"></a>3.表单重复提交问题</h5><p>表单与后端交互时会出现一个经典的问题：当页面刷新是，表单会重复提交用户输入的数据，导致出现插入重复的数据或者发出空白数据这样的问题</p>
<p>这个问题的解决方案有很多，这里提供两种简单的解决方案</p>
<ul>
<li><p><strong>页面重定向</strong></p>
<p>最简单最有效的解决方法，在用户提交表单后，立刻重定向到新页面或者到本页面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">&quot;refresh:1; url=login.php&quot;</span>); </span><br></pre></td></tr></table></figure>

<p>问题：一个页面不能有多个重定向，否则会报错</p>
</li>
<li><p><strong>js代码禁止页面刷新</strong></p>
<p>一种比较奇葩的思路，但是某些时候会十分有效</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.history.replaceState ) &#123;</span><br><span class="line">        <span class="built_in">window</span>.history.replaceState( <span class="literal">null</span>, <span class="literal">null</span>, <span class="built_in">window</span>.location.href );</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><strong>参考文章（更多解决方案）</strong></p>
<p>一些大佬们的讨论：<a href="https://stackoverflow.com/questions/6320113/how-to-prevent-form-resubmission-when-page-is-refreshed-f5-ctrlr">https://stackoverflow.com/questions/6320113/how-to-prevent-form-resubmission-when-page-is-refreshed-f5-ctrlr</a></p>
<p>总结得比较好的文章：<a href="https://makitweb.com/prevent-page-from-submit-on-refresh-in-php/#conclusion">https://makitweb.com/prevent-page-from-submit-on-refresh-in-php/#conclusion</a></p>
</li>
</ul>
<h4 id="前端发送信息的其他方式"><a href="#前端发送信息的其他方式" class="headerlink" title="前端发送信息的其他方式"></a>前端发送信息的其他方式</h4><p>表单提交信息到后端有个致命的问题，那就是每一次提交都需要刷新一次页面，这种现象叫同步请求。</p>
<p>但是很多时候我们只需要局部刷新页面，这时候就需要用到异步请求了。</p>
<p>JavaScript中的Ajax技术就可以实现这样的异步请求，其相当于在表单与后端之间加入一个干活更加利索的信息搬运工</p>
<h5 id="1-js实现Ajax"><a href="#1-js实现Ajax" class="headerlink" title="1.js实现Ajax"></a>1.js实现Ajax</h5><p>js实现Ajax技术需要用到<code>XMLHttpRequest()</code>对象</p>
<p>ajax的工作过程：</p>
<ul>
<li>创建XMLHTTPRequest对象</li>
<li>设置请求的url等参数</li>
<li>发送请求</li>
<li>注册事件</li>
<li>在注册事件中获取返回的内容，并修改页面显示，实现局部刷新</li>
</ul>
<p>我们一般用post的方式，前端send发送，后端$_POST，最后一个echo返回数据，前端ajax.responseText接收返回数据</p>
<p><strong>前端</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>post方式发送数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册名字<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btnName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;tishi&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//绑定失去焦点事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btnName&#x27;</span>).onblur=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送ajax请求到服务器</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//1.创建异步对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> ajax = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      <span class="comment">//2.设置请求的url等参数</span></span></span><br><span class="line"><span class="javascript">      ajax.open(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;example.php&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">/*如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：*/</span></span></span><br><span class="line"><span class="javascript">      ajax.setRequestHeader(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 3.发送请求</span></span></span><br><span class="line"><span class="javascript">      ajax.send(<span class="string">&#x27;Name=&#x27;</span>+<span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btnName&#x27;</span>).value);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 4.注册事件</span></span></span><br><span class="line"><span class="javascript">      ajax.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        if (ajax.readyState ==4&amp;&amp;ajax.status==200) &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 5.在注册事件中接收返回的内容并修改数据</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(ajax.responseText);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> show = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#tishi&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                show.style.display=<span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (ajax.responseText ==<span class="string">&quot;exist&quot;</span>) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                show.innerHTML=<span class="string">&#x27;该用户已经注册了！&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                show.innerHTML=<span class="string">&#x27;你可以使用该名字！&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>后端：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">     header(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">     <span class="variable">$name</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;Name&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 准备一个数据 模拟已经存在的用户</span></span><br><span class="line">     <span class="variable">$nameArray</span> = <span class="keyword">array</span>(<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;kong&#x27;</span>,<span class="string">&#x27;rose&#x27;</span>,<span class="string">&#x27;ice&#x27;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 检验是否存在，并且接受返回值</span></span><br><span class="line">     <span class="variable">$result</span>=in_array(<span class="variable">$name</span>, <span class="variable">$nameArray</span>);</span><br><span class="line">     <span class="comment">// 通过if else返回不同的值给浏览器</span></span><br><span class="line">     <span class="keyword">if</span>(<span class="variable">$result</span>)&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;exist&quot;</span>;</span><br><span class="line">     &#125; </span><br><span class="line">	 <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;not exist&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考文章：<a href="https://blog.csdn.net/diligentkong/article/details/72833577">https://blog.csdn.net/diligentkong/article/details/72833577</a></p>
<h5 id="2-jquery实现Ajax"><a href="#2-jquery实现Ajax" class="headerlink" title="2.jquery实现Ajax"></a>2.jquery实现Ajax</h5><p>相对于原生的js，jq实现Ajax的方法无疑简单很多，也是本项目主要使用的方法</p>
<ul>
<li><p>首先使用jq需要引入jq的文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后使用jq构造Ajax</p>
<p><strong>前端</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="comment">// 请求的后端文件</span></span><br><span class="line">	url:<span class="string">&#x27;love.php&#x27;</span>,</span><br><span class="line">    <span class="comment">// 请求方式</span></span><br><span class="line">    type:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="comment">// 发送的数据</span></span><br><span class="line">    data:&#123;<span class="attr">id</span>:id, <span class="attr">choose</span>:tj_count&#125;,</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 成功发送后触发的函数，data2为后端返回的数据</span></span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">data2</span>)</span>&#123;</span><br><span class="line">    	<span class="comment">//修改文本不能用直接等于</span></span><br><span class="line">    	$(e).find(<span class="string">&#x27;.badge&#x27;</span>).text(data2)</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>后端</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收前端ajax发来的数据</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&quot;id&quot;</span>];</span><br><span class="line"><span class="variable">$choose</span> = <span class="variable">$_POST</span>[<span class="string">&quot;choose&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(id==<span class="number">1</span> &amp;&amp; choose==<span class="number">1</span>)&#123;	</span><br><span class="line">	<span class="variable">$num</span> = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回数据</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;</span><br></pre></td></tr></table></figure>






</li>
</ul>
<h4 id="后端获取信息的其他方式"><a href="#后端获取信息的其他方式" class="headerlink" title="后端获取信息的其他方式"></a>后端获取信息的其他方式</h4><p>除了从前端的表单中获取，后端还可以从url,cookie和session中获取信息，当然还有存储信息更为强大的数据库（这里先不讲，后面单独会有专题）</p>
<h5 id="1-以GET的形式获取url中的信息"><a href="#1-以GET的形式获取url中的信息" class="headerlink" title="1.以GET的形式获取url中的信息"></a>1.以GET的形式获取url中的信息</h5><p>通过这种方法可以渲染出数据不同的页面，如文章页，个人主页。</p>
<ul>
<li><p><strong>前端构造url</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;passage.php?id=&#x27;.$passage_row[&quot;</span><span class="attr">id</span>&quot;]<span class="attr">.</span>&#x27;&amp;<span class="attr">method</span>=<span class="string">2</span>&quot; /&gt;</span></span><br></pre></td></tr></table></figure>

<p>‘?’后面是数据，如method的值为’2’</p>
</li>
<li><p><strong>后端获取数据</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>]; </span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="2-把信息存在cookie中"><a href="#2-把信息存在cookie中" class="headerlink" title="2.把信息存在cookie中"></a>2.把信息存在cookie中</h5><p>cookie是将用户信息储存在客户端即浏览器中，供各个页面使用这些在cookie中存储的数据</p>
<p>cookie具备有效期，当有效期结束之后，Cookie会自动的从客户端删除</p>
<p>cookie的数据极易被修改，所以一般来说不会把敏感信息和重要信息存在cookie中</p>
<ul>
<li><p><strong>创建cookie</strong></p>
<p>设置一个名叫”userid”的数据，值为$row[“id”]</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">setcookie(<span class="string">&quot;userid&quot;</span>, <span class="variable">$row</span>[<span class="string">&quot;id&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>也可以通过header来设置cookie</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">&quot;Set-Cookie:cookie_name=value&quot;</span>);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><strong>读取cookie</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$belong_id</span> = <span class="variable">$_COOKIE</span>[<span class="string">&quot;userid&quot;</span>];</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="3-把信息存在session中"><a href="#3-把信息存在session中" class="headerlink" title="3.把信息存在session中"></a>3.把信息存在session中</h5><p>如果说cookie相当于存折，可以看到里面的信息。那么session就像银行卡，你只能用而不能看到被加密的信息，所以信息安全性会更高</p>
<ul>
<li><p><strong>创建session</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;sessionName&#x27;</span>] = <span class="string">&#x27;sessionValue&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;session_id:&quot;</span>.session_id(); <span class="comment">// 显示当前的session_id</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>读取session</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$session</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;sessionName&#x27;</span>];</span><br></pre></td></tr></table></figure>




</li>
</ul>
<h4 id="PHP请求API"><a href="#PHP请求API" class="headerlink" title="PHP请求API"></a>PHP请求API</h4><h5 id="1-file-get-contents请求API"><a href="#1-file-get-contents请求API" class="headerlink" title="1.file_get_contents请求API"></a>1.file_get_contents请求API</h5><p>file_get_contents请求api的方法相对简单，适合请求相对简单的api和网页页面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求api</span></span><br><span class="line"><span class="variable">$api</span> = file_get_contents(<span class="string">&quot;http://api.bilibili.com/x/emote/user/panel/web?business=reply&quot;</span>);</span><br><span class="line"><span class="comment">// 将api返回的数据转换为json数据处理</span></span><br><span class="line"><span class="variable">$data</span> =json_decode(<span class="variable">$api</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 索引json中的数据</span></span><br><span class="line"><span class="variable">$str</span> =  <span class="variable">$data</span> [<span class="string">&quot;data&quot;</span>][<span class="string">&quot;packages&quot;</span>][<span class="variable">$num</span>][<span class="string">&quot;emote&quot;</span>];</span><br></pre></td></tr></table></figure>

<h5 id="2-curl请求API"><a href="#2-curl请求API" class="headerlink" title="2.curl请求API"></a>2.curl请求API</h5><p>curl来请求api才是主流的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个curl的会话</span></span><br><span class="line"><span class="variable">$ch</span> = curl_init();</span><br><span class="line"><span class="comment">// 设置请求的URL</span></span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="string">&quot;http://api.gochati.cn/htapi.phpq=&#x27;<span class="subst">&#123;$str&#125;</span>&#x27;&amp;token=test123&quot;</span>);</span><br><span class="line"><span class="comment">// 设置否将响应结果存入变量，1是存入，0是直接echo出</span></span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 得到响应结果存入变量中</span></span><br><span class="line"><span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>;</span><br><span class="line"><span class="comment">// 关闭这个curl会话</span></span><br><span class="line">curl_close(<span class="variable">$ch</span>);    </span><br></pre></td></tr></table></figure>



<h4 id="把信息存在数据库"><a href="#把信息存在数据库" class="headerlink" title="把信息存在数据库"></a>把信息存在数据库</h4><p>终于来到本文的重头戏了——数据库，后端处理完数据后就可以将数据存在数据表中，方便下一次去使用，更重要的在于可以构建数据间的关系。</p>
<p>本项目用了面向过程的方法，其实和面向对象差别不大</p>
<h5 id="1-连接数据库"><a href="#1-连接数据库" class="headerlink" title="1.连接数据库"></a>1.连接数据库</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;127.0.0.1&quot;</span>;<span class="comment">//以下四行为数据库信息</span></span><br><span class="line"><span class="variable">$user</span> = <span class="string">&quot;user&quot;</span>;<span class="comment">//用户名</span></span><br><span class="line"><span class="variable">$password_all</span> = <span class="string">&quot;123456&quot;</span>;<span class="comment">//密码</span></span><br><span class="line"><span class="variable">$data</span> = <span class="string">&quot;acg&quot;</span>;<span class="comment">//要使用的数据库名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="variable">$servername</span>, <span class="variable">$user</span>, <span class="variable">$password_all</span>, <span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . mysqli_connect_error());</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;连接成功&quot;</span>;</span><br><span class="line"><span class="comment">// 修改字符集的编码方式，现在不推荐使用</span></span><br><span class="line">mysqli_query(<span class="variable">$conn</span>,<span class="string">&quot;set names &#x27;utf8&#x27;;&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="2-创建数据表"><a href="#2-创建数据表" class="headerlink" title="2.创建数据表"></a>2.创建数据表</h5><p>一般的数据表可以提前建好，不用代码来形成。可以使用如Navicat等可视化mysql工具</p>
<p>建表注意事项：</p>
<ul>
<li>表的字段名不要与语言的关键字重复</li>
<li>主键只能设一个，一般设id为主键</li>
<li>注意数据类型和长度，一般的整型数据长度用1，短的字符串用varchar类型，如果要存储文章之类的则需要text类型，长度设为0</li>
<li>字符串的字符集一般是utf8，排序规则一般utf8_general_ci</li>
<li>设置能否为null是特别容易出错的地方，如果设置为不是null即该数据不能为空，在插入数据时如果该数据不插入则会出现数据无法插入的错误（但是是不会报错的（：）</li>
</ul>
<h5 id="3-插入数据"><a href="#3-插入数据" class="headerlink" title="3.插入数据"></a>3.插入数据</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$query</span> = mysqli_query(<span class="variable">$conn</span>,<span class="string">&quot;INSERT INTO wz (sj, ht, ms, zz, pl, tj) VALUES ( &#x27;<span class="subst">$time</span>&#x27; ,&#x27;<span class="subst">&#123;$topic&#125;</span>&#x27;,&#x27;<span class="subst">&#123;$passage&#125;</span>&#x27;, &#x27;<span class="subst">&#123;$name&#125;</span>&#x27;, 0, 0);&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>mysqli_query</code>是对连接的数据库执行sql语句</li>
<li>sql语句，<code>INSERT INTO</code>即执行插入命令</li>
<li>wz指插入的对象表格，(sj, ht, ms, zz, pl, tj)则是表格的字段，注意如果构建表时设置了某字段为不为null，则该字段一定要填入其中，否则所有的数据都无法插入</li>
<li>VALUES 后面即字段对应的值</li>
</ul>
<h5 id="4-读取数据"><a href="#4-读取数据" class="headerlink" title="4.读取数据"></a>4.读取数据</h5><p>本项目用的最频繁的一定是读取mysql数据了，而且还非常频繁地使用了禁术<code>SELECT *</code>  （：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$passage_result</span> = mysqli_query(<span class="variable">$conn</span>, <span class="string">&#x27;SELECT * FROM wz;&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>( <span class="variable">$passage_row</span> = mysqli_fetch_assoc(<span class="variable">$passage_result</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$passage_row</span>[<span class="string">&quot;id&quot;</span>] == <span class="variable">$id</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$choose</span> == <span class="number">0</span>)&#123;   </span><br><span class="line">            <span class="variable">$num</span> =  ++<span class="variable">$passage_row</span>[<span class="string">&#x27;tj&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;   </span><br><span class="line">             <span class="variable">$num</span> =  --<span class="variable">$passage_row</span>[<span class="string">&#x27;tj&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>SELECT * FROM</code>搜索整个表格的所有字段，但里面填写了字段名，则只搜索该表的该字段。最终整合成一堆关联数组</li>
<li>from后面接数据表名</li>
<li><code>mysqli_fetch_assoc</code>提取出一条关联数组</li>
<li><code>while( $passage_row = mysqli_fetch_assoc($passage_result))</code>逐个遍历之前生成一堆关联数组</li>
<li><code>$passage_row[&quot;id&quot;]</code>索引一条关联数组的id</li>
</ul>
<h5 id="5-整合数据"><a href="#5-整合数据" class="headerlink" title="5.整合数据"></a>5.整合数据</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$result</span>  = mysqli_query(<span class="variable">$conn</span>, <span class="string">&quot;select * from comment where passage_id = &#x27;<span class="subst">&#123;$id&#125;</span>&#x27;&quot;</span>);</span><br><span class="line"><span class="variable">$all</span> = mysqli_num_rows(<span class="variable">$result</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$all</span>;</span><br></pre></td></tr></table></figure>

<p><code>where</code>可以达到批量操作同一个数据表的多个数据的操作，也常常用于统计数据表的相同数据</p>
<h5 id="6-更新数据"><a href="#6-更新数据" class="headerlink" title="6.更新数据"></a>6.更新数据</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询插入即更新已有数据</span></span><br><span class="line"><span class="variable">$comment_add</span> = mysqli_query(<span class="variable">$conn</span>, <span class="string">&quot;UPDATE wz SET pl = &#x27;<span class="subst">&#123;$all&#125;</span>&#x27; WHERE id = &#x27;<span class="subst">&#123;$id&#125;</span>&#x27; &quot;</span>);</span><br></pre></td></tr></table></figure>

<p>update比较简单，值得一提的是，它可以和where结合更新指定数据（相当于if的作用，还不用遍历）</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
        <tag>后端</tag>
        <tag>Bootstrap</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP|课题申报系统开发(Vue+TP)</title>
    <url>/2021/07/15/PHP/PHP-%E8%AF%BE%E9%A2%98%E7%94%B3%E6%8A%A5%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91(Vue+TP)/</url>
    <content><![CDATA[<img src="https://raw.staticdn.net/Autovy/Image/master/img/202109042317087.png" alt="image-20210904231657416" style="zoom:150%;">

<p>支持国产😇</p>
<span id="more"></span>

<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="1-项目启动"><a href="#1-项目启动" class="headerlink" title="1.项目启动"></a>1.项目启动</h4><h5 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h5><p>Vue的依赖文件是package.json，其分为两部分</p>
<ul>
<li><p>全部安装（一般用这个）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>只安装dependencies里的内容（生产环境依赖）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --dependencies</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>只安装devDependencies（开发环境依赖）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --devDependencies</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="删除全部依赖"><a href="#删除全部依赖" class="headerlink" title="删除全部依赖"></a>删除全部依赖</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall</span><br></pre></td></tr></table></figure>



<h5 id="生成依赖文件package-json"><a href="#生成依赖文件package-json" class="headerlink" title="生成依赖文件package.json"></a>生成依赖文件package.json</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>



<h5 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h5><p>启动项目的命令需要看package.json文件</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041953941.png" alt="image-20210904195358015"></p>
<p>所以要用<code>npm run dev</code>启动项目</p>
<h4 id="2-登录页面解析"><a href="#2-登录页面解析" class="headerlink" title="2.登录页面解析"></a>2.登录页面解析</h4><h5 id="ref访问子组件实例与元素"><a href="#ref访问子组件实例与元素" class="headerlink" title="ref访问子组件实例与元素"></a>ref访问子组件实例与元素</h5><p>vue的ref有类似于html的id的功能，可以用来给js访问子组件实例或元素</p>
<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">ref</span>=<span class="string">&quot;usernameInput&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Vue</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$refs.usernameInput </span><br></pre></td></tr></table></figure>

<p>这样即可访问到输入框的内容</p>
<h5 id="组件的属性和方法"><a href="#组件的属性和方法" class="headerlink" title="组件的属性和方法"></a>组件的属性和方法</h5><p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">Form</span> <span class="attr">ref</span>=<span class="string">&quot;loginForm&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">prop</span>=<span class="string">&quot;user_name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.user_name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;prepend&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">:size</span>=<span class="string">&quot;16&quot;</span> <span class="attr">type</span>=<span class="string">&quot;person&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>Vue</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> data () &#123;</span><br><span class="line">           form: &#123;</span><br><span class="line">               user_name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">               password: <span class="string">&#x27;&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>:model=&quot;form&quot;</code>的双向绑定，相当于视图上的数据与Vue对象上的数据是同步变化的</p>
<h4 id="3-http请求"><a href="#3-http请求" class="headerlink" title="3.http请求"></a>3.http请求</h4><p>参考：<a href="https://stackoverflow.com/questions/54955426/how-to-use-async-await-in-vue-js">How to use async/await in Vue.js?</a></p>
<h5 id="Vue异步更新"><a href="#Vue异步更新" class="headerlink" title="Vue异步更新"></a>Vue异步更新</h5><p>异步即几个程序同时开始，不会出现阻塞的现象，Vue进行网络请求时会出现异步现象导致函数执行不同</p>
<p><strong>同步（按序执行，阻塞现象）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">created ()&#123;</span><br><span class="line">    <span class="built_in">this</span>.getA()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">this</span>.getB() </span><br><span class="line">&#125;,</span><br><span class="line">methods : &#123;</span><br><span class="line">    getA ()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    getB ()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>



<p><strong>异步（多个函数同时开始，结束时间决定出现顺序）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">created ()&#123;</span><br><span class="line">    <span class="built_in">this</span>.getA()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">this</span>.getB() </span><br><span class="line">&#125;,</span><br><span class="line">methods : &#123;</span><br><span class="line">    getA ()&#123;</span><br><span class="line">        $axios.post(<span class="string">`/getA`</span>,params)&#123;</span><br><span class="line">        .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    getB ()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure>





<h5 id="让程序同步"><a href="#让程序同步" class="headerlink" title="让程序同步"></a>让程序同步</h5><p>可以通过then或async/await使函数同步</p>
<p><strong>then</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">created () &#123;</span><br><span class="line">    <span class="built_in">this</span>.getA().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">this</span>.getB()</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">methods : &#123;</span><br><span class="line">    getA () &#123;</span><br><span class="line">        <span class="keyword">return</span> $axios.post(<span class="string">`/getA`</span>,params);</span><br><span class="line">    &#125;,</span><br><span class="line">    getB ()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>async/await</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> created ()&#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.getA()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">this</span>.getB() </span><br><span class="line">&#125;,</span><br><span class="line">methods : &#123;</span><br><span class="line">    getA : <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> $axios.post(<span class="string">`/getA`</span>,params);</span><br><span class="line">    &#125;,</span><br><span class="line">    getB : <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h5 id="created"><a href="#created" class="headerlink" title="created()"></a>created()</h5><p>不需要让运行同步，只需要保证最后结束的函数（网络请求函数）正确赋值即可</p>
<p>采用异步的函数先通过created（相当于js页面加载即执行）执行完axios，赋值给data中的数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.getLists();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getLists</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="built_in">this</span>.$base.url.ExpertFinishGetLists;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cookie获取用户跳转到多少页</span></span><br><span class="line">    <span class="keyword">let</span> page = <span class="built_in">parseInt</span>(Cookies.get(<span class="string">&#x27;page&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> (page) &#123;</span><br><span class="line">      <span class="built_in">this</span>.params.page = page</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">this</span>.$post(url,<span class="built_in">this</span>.params).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.data = res.data;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//获取权限树</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h3 id="ThinkPHP5"><a href="#ThinkPHP5" class="headerlink" title="ThinkPHP5"></a>ThinkPHP5</h3><p>参考文章：<a href="https://www.soolco.com/post/62551_1_1.html">https://www.soolco.com/post/62551_1_1.html</a></p>
<h4 id="1-路由配置"><a href="#1-路由配置" class="headerlink" title="1.路由配置"></a>1.路由配置</h4><p>配置为在thinkphp/public文件</p>
<h5 id="phpstudy设置根目录"><a href="#phpstudy设置根目录" class="headerlink" title="phpstudy设置根目录"></a>phpstudy设置根目录</h5><p>一般设为www文件（web服务器上的nginx配置也只会指向这个文件）</p>
<p>其入口是public文件</p>
<h5 id="配置伪静态"><a href="#配置伪静态" class="headerlink" title="配置伪静态"></a>配置伪静态</h5><p>访问PHP文件要去掉thinkphp路径中的index.php要配置伪静态</p>
<p><strong>apache伪静态规则</strong></p>
<p>修改apache配置文件httpd.conf</p>
<p>取消掉该行的注释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure>

<p>将将 <code>AllowOverride None</code>  修改为： <code>AllowOverride All</code></p>
<p>以开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Directory</span> /&gt;</span></span><br><span class="line">    Options +Indexes +FollowSymLinks +ExecCGI</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">    Require all granted</span><br><span class="line"><span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>在thinkphp/public入口文件添加 <code>.htaccess</code> 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IfModule</span> <span class="attr">mod_rewrite.c</span>&gt;</span></span><br><span class="line">  Options +FollowSymlinks -Multiviews</span><br><span class="line">  RewriteEngine On</span><br><span class="line"></span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">  RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]</span><br><span class="line"><span class="tag">&lt;/<span class="name">IfModule</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在phpstudy的网站设置中添加伪静态设置以对应.htaccess文件</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109042256334.png" alt="image-20210904225150721"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IfModule</span> <span class="attr">mod_rewrite.c</span>&gt;</span></span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteBase /</span><br><span class="line">RewriteRule ^index\.php$ - [L]</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteRule . /index.php [L]</span><br><span class="line"><span class="tag">&lt;/<span class="name">IfModule</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>Nginx伪静态规则</strong></p>
<p>在thinkphp/public入口文件添加 <code>nginx.htaccess</code> 文件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Check if a file exists, or route it to index.php.</span></span><br><span class="line"><span class="attribute">try_files</span> $uri $uri/ /exploit/index.php?$query_string;</span><br><span class="line"><span class="attribute">if</span> (!-e $request_filename) &#123;</span><br><span class="line">    <span class="attribute">rewrite</span> <span class="regexp"> ^(.*)$</span>  /index.php?s=<span class="variable">$1</span>  <span class="literal">last</span>;</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>修改配置文件</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109042256152.png" alt="image-20210904225437200"></p>
<p>在 location中增加if语句最终为</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">           <span class="attribute">index</span> index.php index.html;</span><br><span class="line">           <span class="attribute">if</span> (!-e $request_filename) &#123;</span><br><span class="line">              <span class="attribute">rewrite</span> <span class="regexp"> ^(.*)$</span>  /index.php?s=/<span class="variable">$1</span>  <span class="literal">last</span>;</span><br><span class="line">              break;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">400</span> /error/<span class="number">400</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">403</span> /error/<span class="number">403</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">404</span> /error/<span class="number">404</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">500</span> /error/<span class="number">500</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">501</span> /error/<span class="number">501</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">502</span> /error/<span class="number">502</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">503</span> /error/<span class="number">503</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">504</span> /error/<span class="number">504</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">505</span> /error/<span class="number">505</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">506</span> /error/<span class="number">506</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">507</span> /error/<span class="number">507</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">509</span> /error/<span class="number">509</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">510</span> /error/<span class="number">510</span>.html;</span><br><span class="line">           <span class="attribute">include</span> D:/phpstudy_pro/WWW/ktsb/public/nginx.htaccess;</span><br><span class="line">           <span class="attribute">autoindex</span>  <span class="literal">off</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>





<h4 id="2-数据库导入"><a href="#2-数据库导入" class="headerlink" title="2.数据库导入"></a>2.数据库导入</h4><h5 id="navicat执行sql文件错误"><a href="#navicat执行sql文件错误" class="headerlink" title="navicat执行sql文件错误"></a>navicat执行sql文件错误</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109042258221.png" alt="image-20210904225833897"></p>
<p>可以关闭以上两个选项查看执行错误</p>
<h5 id="数据库严格模式与非严格模式"><a href="#数据库严格模式与非严格模式" class="headerlink" title="数据库严格模式与非严格模式"></a>数据库严格模式与非严格模式</h5><p>严格模式下</p>
<ul>
<li>不支持对not null字段插入null值</li>
<li>不支持对自增长字段插入”值</li>
<li>不支持text字段有默认值</li>
<li>在严格模式下timestamp类型的字段不允许 ‘0000-00-00’ 作为有效日期</li>
</ul>
<h5 id="数据库模式修改"><a href="#数据库模式修改" class="headerlink" title="数据库模式修改"></a>数据库模式修改</h5><p>运行命令查看模式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;sql_mode&#x27;</span></span><br></pre></td></tr></table></figure>

<p>显示出模式的项</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109042306119.png" alt="image-20210904230558730"></p>
<p>所以需要移除<code>NO_ZERO_IN_DATE,NO_ZERO_DATE</code>，最终变为</p>
<p><code>STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</code></p>
<p>可以在root权限下运行命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> sql_mode <span class="operator">=</span> <span class="string">&#x27;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p>也可以在phpstudy环境下修改为非严格模式</p>
<p>​        <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109042309767.png" alt="image-20210716155625246"></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
        <tag>框架学习</tag>
        <tag>后端</tag>
        <tag>前端</tag>
        <tag>thinkphp</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|django-rest-framework入门</title>
    <url>/2020/04/13/Python/Python-django-rest-framework/</url>
    <content><![CDATA[<p>官方快速入门教程有坑，一直找不到关于django rest framework好的书籍和好的博文，本文都是基于网上收集整理的资料</p>
<span id="more"></span>

<h4 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h4><p>Django REST framework（以下简称 DRF）是一个开源的 Django 扩展，提供了便捷的 REST API 开发框架，是实现前后端分离的典型案例。所谓前后端分类，即前端负责页面展示和与用户的交互，后端则负责API接口</p>
<h5 id="1-功能介绍"><a href="#1-功能介绍" class="headerlink" title="1.功能介绍"></a>1.功能介绍</h5><ul>
<li>支持 OAuth 认证</li>
<li>支持对 ORM 和非 ORM 数据源的序列化</li>
<li>丰富的定制层级：函数视图、类视图、视图集合</li>
<li>内置Mixins，可以用于快速组装</li>
</ul>
<h5 id="2-特性"><a href="#2-特性" class="headerlink" title="2.特性"></a>2.特性</h5><ul>
<li>直观的 API web 界面。</li>
<li>多种身份认证和权限认证方式的支持。</li>
<li>内置了 OAuth1 和 OAuth2 的支持。</li>
<li>内置了限流系统。</li>
<li>根据 Django ORM 或者其它库自动序列化。</li>
<li>丰富的定制层级：函数视图、类视图、视图集合到自动生成 API，满足各种需要。</li>
<li>可扩展性，插件丰富。</li>
<li>广泛使用，文档丰富。</li>
</ul>
<h4 id="RESTful-架构"><a href="#RESTful-架构" class="headerlink" title="RESTful 架构"></a>RESTful 架构</h4><p>RESTful架构，就是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用</p>
<p>那什么是RESTful架构呢？</p>
<p>　　（1）<strong>每一个URI代表一种资源；</strong>简单理解就是url指向网络上的一个信息如文本，图片，音频等，要获取这个资源只需访问这个url即可</p>
<p>　　（2）<strong>客户端和服务器之间，传递这种资源的某种表现层；</strong>所谓表现层即指把“资源”呈现出来的的形式，如文本（资源）可以用txt格式，html格式，json格式（表现层）来呈现。访问一个网站，客户端和服务端会传递这种表现层，以实现下一个步骤：状态转化</p>
<p>　　（3）<strong>客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</strong>因为http协议是无状态协议，所有状态都保存在服务端，客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</p>
<p>参考文章：<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></p>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="1-Serializer序列化"><a href="#1-Serializer序列化" class="headerlink" title="1.Serializer序列化"></a>1.Serializer序列化</h5><p>序列化器用于处理前端发来的json数据,因为前端发送给后端的是json数据,但是后端要向数据库存储数据,json数据是不被允许的.反序列化则反过来理解。</p>
<p>简单来说就是通过映射，把数据结构转换符合前端/后端的数据，就是充当一个翻译官的作用</p>
<p>（1）序列化</p>
<p>模板：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line">data = serializers.serialize(<span class="string">&quot;xml&quot;</span>, SomeModel.objects.<span class="built_in">all</span>())</span><br></pre></td></tr></table></figure>

<p>从djang.core导入它，然后调用它的serialize方法。</p>
<p>这个方法至少接收两个参数，第一个是你要序列化成为的数据格式，这里是‘xml’，第二个是要序列化的数据对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YourSerializer</span>(<span class="params">Serializer</span>):</span></span><br><span class="line">    field1 = Field()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        <span class="comment"># save your data here</span></span><br><span class="line">        <span class="keyword">return</span> saved_data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        <span class="comment"># update your instance</span></span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure>

<p>序列化之后的数据保存在 <code>serializer.data</code> 中的，可以使用 <code>SomeRenderer().render(serializer.data)</code> 将其序列化为字符串对象作为 Response body 返回。</p>
<p>（2）反序列化</p>
<p>模板：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = SomeParser().parse(incoming_stream)</span><br><span class="line">serializer = YourSerializer(data=data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> serializer.is_valid():     <span class="comment"># 这里会根据 Serialzier 的 Field 和自定义验证工具进行数据校验</span></span><br><span class="line">    logging.info(serializer. validated_data)</span><br><span class="line">    serializer.update()        <span class="comment"># 或者 serializer.create()</span></span><br></pre></td></tr></table></figure>

<p>对于自定义 Serializer，你需要自己实现 <code>create</code> 和 <code>update</code> 方法。</p>
<p>你也可以使用 <code>serializer.save(**data)</code>，<code>save</code> 方法的行为取决于初始化的方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .save() 会创建一个新实例</span></span><br><span class="line">serializer = CommentSerializer(data=data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># .save() 会更新 `comment` 实例</span></span><br><span class="line">serializer = CommentSerializer(comment, data=data)</span><br></pre></td></tr></table></figure>

<p>反序列化时应该先运行 <code>serializer.is_valid()</code> 判断数据是否合法，<code>serializer.is_valid(raise_exception=True)</code> 会直接返回 400 信息。</p>
<h5 id="2-ViewSet视图"><a href="#2-ViewSet视图" class="headerlink" title="2.ViewSet视图"></a>2.ViewSet视图</h5><p>DRF 通过 View 提供 API 接口，一个 View 可以对应多个 Renderer，针对不同的渲染条件提供不同的输出格式（HTML／XML／JSON）</p>
<p>ViewSet 则是 View 的一个封装，一个 ViewSet 可以为同一个 URL 根据请求方法提供不同的接口。尤其是 ModelViewSet 会自动根据 Model 的定义生成 REST 接口和 URL，能够快速生成网站的一整套 API。</p>
<p>定义一个 ViewSet 需要为其声明 <code>queryset</code> 和 <code>serializer</code> 属性</p>
<p>模板：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewSet</span>(<span class="params">viewsets.ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    API endpoint that allows users to be viewed or edited.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;-date_joined&#x27;</span>)</span><br><span class="line">    serializer_class = UserSerializer</span><br></pre></td></tr></table></figure>



<p>Meta 继承：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountSerializer</span>(<span class="params">MyBaseSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>(<span class="params">MyBaseSerializer.Meta</span>):</span></span><br><span class="line">        model = Account</span><br></pre></td></tr></table></figure>



<h5 id="3-Request对象"><a href="#3-Request对象" class="headerlink" title="3.Request对象"></a>3.Request对象</h5><p>DRF使用Requests对象扩展了原生的HttpRequest，并提供了更灵活的请求处理。Requests对象的核心属性就是request.data，可以处理任意数据，接受POST、PUT和PATCH方法。</p>
<h4 id="DRF处理流程"><a href="#DRF处理流程" class="headerlink" title="DRF处理流程"></a>DRF处理流程</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041025355.png" alt="img"></p>
<h4 id="实战应用"><a href="#实战应用" class="headerlink" title="实战应用"></a>实战应用</h4><p>DRF的使用主要分为三步：定义资源 - 实现HTTP方法 - 配置URL</p>
<h5 id="1-安装配置"><a href="#1-安装配置" class="headerlink" title="1.安装配置"></a>1.安装配置</h5><p>确保自己的虚拟环境安装好了djangorestframework</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure>

<p>在项目的setting中编写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;demo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>, <span class="comment">#添加djangorestframework框架</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="2-序列化"><a href="#2-序列化" class="headerlink" title="2.序列化"></a>2.序列化</h5><p>（1）定义模型资源</p>
<p>在app中的models.py，定义模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(<span class="string">u&#x27;名称&#x27;</span>, default=<span class="string">&quot;&quot;</span>, max_length=<span class="number">255</span>)</span><br><span class="line">    price = models.FloatField(<span class="string">u&quot;单价&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>（2）实现序列化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers  <span class="comment">#在框架中导入</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Fruit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span>             <span class="comment">#模型的元数据</span></span><br><span class="line">        model = Fruit       <span class="comment">#选中模型</span></span><br><span class="line">        fields = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;price&#x27;</span>)  <span class="comment">#选择转换的字段</span></span><br></pre></td></tr></table></figure>

<ul>
<li>模型的元数据，指的是“除了字段外的所有内容”，例如排序方式、数据库表名、人类可读的单数或者复数名，<strong>每个模型都可以有自己的元数据类，每个元数据类也只对自己所在模型起作用。</strong></li>
<li>fields属性设置成’<strong>all</strong>‘来表明使用模型中的所有字段。</li>
<li><code>HyperlinkedModelSerializer</code>类类似于<code>ModelSerializer</code>类，不同之处在于它使用超链接来表示关联关系而不是主键。</li>
</ul>
<p>（3）ModelSerializer，HyperlinkedModelSerializer与Serializer</p>
<p>`</p>
<p>ModelSerializer<code>类能够让你自动创建一个具有模型中相应字段的</code>Serializer`类。</p>
<p><strong>这个<code>ModelSerializer</code>类和常规的<code>Serializer</code>类一样，不同的是</strong>：</p>
<ul>
<li>它根据模型自动生成一组字段。</li>
<li>它自动生成序列化器的验证器，比如unique_together验证器。</li>
<li>它默认简单实现了<code>.create()</code>方法和<code>.update()</code>方法。</li>
</ul>
<p><code>HyperlinkedModelSerializer</code>基本与<code>ModelSerializer</code>一样，不同之处：</p>
<ul>
<li>ModelSerializer，所有的模型的字段都将映射到序列化器上相应的字段即主键</li>
<li>HyperlinkedModelSerializer，序列化器将包含一个url字段而不是主键字段。</li>
</ul>
<h5 id="3-写ViewSet视图"><a href="#3-写ViewSet视图" class="headerlink" title="3.写ViewSet视图"></a>3.写ViewSet视图</h5><p>在views.py中编写，用提供默认行为的现有基类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet  <span class="comment">#引入默认视图集</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Fruit</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> FruitSerializer           <span class="comment">#引入序列化文件</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用于查看和编辑用户实例的视图集。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitViewSet</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    queryset = Fruit.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = FruitSerializer</span><br></pre></td></tr></table></figure>

<p>FruitViewSet直接继承ModelViewSet，ModelViewSet继承了一系列Mixins类的HTTP方法。如果需要自定义HTTP方法，可以继承APIView类，或者Mixins类，还可以完全自定义</p>
<h5 id="4-配置URL"><a href="#4-配置URL" class="headerlink" title="4.配置URL"></a>4.配置URL</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers   <span class="comment">#引入自动URL路由模板</span></span><br><span class="line"><span class="keyword">from</span> demo.views <span class="keyword">import</span> FruitViewSet</span><br><span class="line"></span><br><span class="line">router = routers.DefaultRouter()  <span class="comment">#API 向导</span></span><br><span class="line">router.register(<span class="string">r&#x27;fruit&#x27;</span>, FruitViewSet)  <span class="comment">#指定路由，处理请求的类</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;api/v1/&#x27;</span>, include(router.urls)),  <span class="comment">#确定url</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li></li>
<li>register()方法有两个强制参数：（1）<code>prefix</code> - 用于此组路由的URL前缀 （2）<code>viewset</code> - 处理请求的viewset类</li>
<li>DefaultRouter路由器包括标准集合<code>list</code>, <code>create</code>, <code>retrieve</code>, <code>update</code>, <code>partial_update</code> 和 <code>destroy</code>动作的路由，还包括一个默认返回所有列表视图的超链接的API根视图</li>
<li>django的url有path和url两种方法</li>
</ul>
<p>至此一个简单的API便实现了</p>
<p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20200413103713150.png" alt="image-20200413103713150"></p>
<h4 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h4><h5 id="1-权限"><a href="#1-权限" class="headerlink" title="1.权限"></a>1.权限</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_PERMISSION_CLASSES&#39;: [</span><br><span class="line">        &#39;rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly&#39;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认权限策略可以使用<code>DEFAULT_PERMISSION_CLASSES</code>设置进行全局设置</p>
<h5 id="2-分页控制"><a href="#2-分页控制" class="headerlink" title="2.分页控制"></a>2.分页控制</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YourView</span>(<span class="params">BaseView</span>):</span></span><br><span class="line">    paginate_by = <span class="number">10</span>                 <span class="comment"># 覆盖 settings 中的默认分页</span></span><br><span class="line">    max_paginate_by = <span class="number">100</span>             <span class="comment"># 限制最大分页大小</span></span><br></pre></td></tr></table></figure>

<p>也可以动态地去判断最大分页大小：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YouView</span>(<span class="params">BaseView</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paginate_queryset</span>(<span class="params">self, queryset</span>):</span></span><br><span class="line">        self.paginator.max_page_size = YOUR_PAGE_SIZE_LIMIT</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(YouView, self).paginate_queryset(queryset)</span><br></pre></td></tr></table></figure>



<h5 id="3-外键处理"><a href="#3-外键处理" class="headerlink" title="3.外键处理"></a>3.外键处理</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="comment">#对应主键</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HospitalSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Hospital </span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#对应外键        </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HospitalPicSerializer</span>(<span class="params">serializers.HyperlinkedModelSerializer</span>):</span></span><br><span class="line">    hospital = HospitalSerializer()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = HospitalPic</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure>



<h5 id="4-流量限制"><a href="#4-流量限制" class="headerlink" title="4.流量限制"></a>4.流量限制</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.AnonRateThrottle&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.throttling.UserRateThrottle&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;anon&#x27;</span>: <span class="string">&#x27;100/day&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;1000/day&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    throttle_classes = (UserRateThrottle,)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;request was permitted&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure>

<p>限制API查询的频率，可以根据用户不同，精确到每天、每小时、每分钟</p>
<h4 id="接口组合"><a href="#接口组合" class="headerlink" title="接口组合"></a>接口组合</h4><p>Django-rest-framework为我们提供了许多现成的mixins，可以用于快速组合接口</p>
<ul>
<li>GenericAPIView提供了view核心的功能</li>
<li>ListModelMixin提供了.list()方法</li>
<li>CreateModelMixin提供了.create()方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Fruit</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> FruitSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitList</span>(<span class="params">mixins.ListModelMixin, mixins.CreateModelMixin, generics.GenericAPIView</span>):</span></span><br><span class="line">    queryset = Fruit.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = FruitSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span>(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>框架学习</tag>
        <tag>python</tag>
        <tag>django</tag>
        <tag>rest framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|django框架入门1</title>
    <url>/2020/03/11/Python/Python-django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A81/</url>
    <content><![CDATA[<p>django学习第一弹，原理，配置及URL规则！！！</p>
<span id="more"></span>

<h3 id="Django建站基础"><a href="#Django建站基础" class="headerlink" title="Django建站基础"></a>Django建站基础</h3><h4 id="网站组成"><a href="#网站组成" class="headerlink" title="网站组成"></a>网站组成</h4><p>一个完整的网站大概包含域名、网站应用和服务器</p>
<p><strong>域名：</strong>域名可理解为网站的链接，用于标识一个或多个IP地址（门牌号）</p>
<p><strong>网站应用：</strong>网站应用是指这个网站有哪些页面，这些页面有什么功能并且如何实现这些功能（房子内部装饰）</p>
<p><strong>服务器：</strong>服务器是连接到互联网的计算机算机，用于网站应用的部署和上线</p>
<p><strong>虚拟主机：</strong>虚拟主机是在网络服务器上划分出一定的磁盘空间供用户放置站占和应用组件，提供必要的站点功能、数据存放和传输功能（供租用的房子）</p>
<h4 id="网站运行原理"><a href="#网站运行原理" class="headerlink" title="网站运行原理"></a>网站运行原理</h4><p><strong>客户端:</strong>在计算机上运行并连接到互联网的应用程序，简称浏览器</p>
<p><strong>服务器:</strong>能连接到互联网且具有IP地址的计算机，服务器主要接收和处理用户的请求信息。</p>
<p>用户在客户端操作网页时，实质是向网站发送一个HTTP请求，网站的服务器接收到请求后今步行相应的处理，最后将处理结果返回到客户端并生成相应的网页信息</p>
<p><strong>IP地址：</strong>互联网上的每台计算机都有一个IP地址，用于识别和通信，即为逻辑地址。在定位设备中则转换为MAC地址，即物理地址</p>
<p><strong>DNS:</strong>域名系统，用于跟踪计算机的域名及共在互联网上相应的IP地址</p>
<p><strong>TCP/IP:</strong>传输控制协议/互联网协议，是广泛使用的通信协议</p>
<p><strong>HTTP:</strong>超文本传输协议，是浏览器和服务器通过互联网进行通信的协议</p>
<p>了解了网站运行的原理后，感觉豁然开朗呀！多看一些理论也是非常有用的</p>
<h4 id="走进Django"><a href="#走进Django" class="headerlink" title="走进Django"></a>走进Django</h4><p>Django采用了MTV的框架模式，即模型( Model)、模板(Template )和视图(Views)，三者之间各自负责不同的职责。这些也是学习的重点板块</p>
<p>Django的主要目的是简便、快速地开发数据库驱动的网站，有许多功能强大的第三方插件，强调代码复用性——so，快速开发和DRY ( Do Not Repeat Yourself)是Django的处事原则</p>
<p><strong>Django有什么：</strong></p>
<table>
<thead>
<tr>
<th>组成</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>对象关系映射</td>
<td>将模型与关系数据库连接起来</td>
</tr>
<tr>
<td>URL设计</td>
<td>开发者可以设计任意的URL 网站地址</td>
</tr>
<tr>
<td>模板系统</td>
<td>模板之间具有可继承性</td>
</tr>
<tr>
<td>Cache系统</td>
<td>完善的缓存系统，可支持多种缓存方式</td>
</tr>
<tr>
<td>用户管理系统</td>
<td>提供用户认证、权限设置和用户组功能</td>
</tr>
<tr>
<td>admin管理系统</td>
<td>内置admin管理系统，系统扩展性强</td>
</tr>
</tbody></table>
<p>感觉在为Django打广告（尴尬……）</p>
<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><h5 id="1-创建项目主体"><a href="#1-创建项目主体" class="headerlink" title="1.创建项目主体"></a>1.创建项目主体</h5><p>在目标文件通过cmd输入该命令，即可创建一个名叫“MyDjang”的主文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django-admin startproject MyDjang</span><br></pre></td></tr></table></figure>



<h5 id="2-创建项目应用"><a href="#2-创建项目应用" class="headerlink" title="2.创建项目应用"></a>2.创建项目应用</h5><p>项目应用简称为App,相当于网站的功能。每个App代表网站的一个或多个网页</p>
<p>在新建项目主体下输入命令：分别创建了index和user两个网页</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.Py startapp</span><br><span class="line">index</span><br><span class="line"></span><br><span class="line">python manage.Py startapp user</span><br></pre></td></tr></table></figure>



<p>对各个文件的功能的解释</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>manage.py</td>
<td>命令行工具</td>
</tr>
<tr>
<td><em>init</em>.py</td>
<td>初始化文件，不需要修改</td>
</tr>
<tr>
<td>settings.py</td>
<td>项目的配置文件，经常要修改</td>
</tr>
<tr>
<td>urls.py</td>
<td>项目的URL设置，网站的地址信息</td>
</tr>
<tr>
<td>wsgi.py</td>
<td>Python应用与Web服务器之间的接口，用于Django项目在服务器上的部署和上线，一般不需要修改</td>
</tr>
<tr>
<td>admin.py</td>
<td>后台管理系统</td>
</tr>
<tr>
<td>apps.py</td>
<td>当前应用的配置，无需修改</td>
</tr>
<tr>
<td>mdoels.py</td>
<td>实现数据库和表单的地方</td>
</tr>
<tr>
<td>views.py</td>
<td>视图，生成页面处理信息，是django主要写代码的地方</td>
</tr>
</tbody></table>
<h5 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h5><p>在项目下输入命令行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>







<h5 id="4-PyCharm"><a href="#4-PyCharm" class="headerlink" title="4.PyCharm"></a>4.PyCharm</h5><p>另外也可以在PyCharm（要钱的开发者版）搭建开发环境，它会自动生成一些重要的文件夹。</p>
<p>用社区版的PyCharm则需要用上述的命令行操作，也要自己添加重要文件如：templates（存放html文件）</p>
<h3 id="Django配置信息"><a href="#Django配置信息" class="headerlink" title="Django配置信息"></a>Django配置信息</h3><p>配置信息存放在setting.py，在此处修改相关配置信息</p>
<h4 id="基本配置信息"><a href="#基本配置信息" class="headerlink" title="基本配置信息"></a>基本配置信息</h4><h5 id="1-调试模式"><a href="#1-调试模式" class="headerlink" title="1.调试模式"></a>1.调试模式</h5><p>开发阶段时是True，上线部署时一定要改成False，否则会泄露信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#调试模式</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br></pre></td></tr></table></figure>



<h5 id="2-App列表"><a href="#2-App列表" class="headerlink" title="2.App列表"></a>2.App列表</h5><p>把自己创建的App添加到App列表 ,否则这些app是无法被运行的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h4 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h4><p>存放网页的css和js，图片音频等</p>
<p>存放位置，在setting.py中设置，此处设置的是在App目录下的static文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Static files (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/3.0/howto/static-files/</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br></pre></td></tr></table></figure>



<p>在app文件下新建static文件来存放js和css文件</p>
<h4 id="模板路径"><a href="#模板路径" class="headerlink" title="模板路径"></a>模板路径</h4><p>模板在web开发中是指一种特殊的HTML文档，其中嵌入了一些可以被python识别的指令。</p>
<p>模板配置信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [], <span class="comment">#此处可以配置模板路径，留空则默认在templates文件下存放</span></span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>templates文件可放于根目录下（共用模板文件）和app文件下</p>
<p>配置模板代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>),</span><br><span class="line"><span class="comment">#配置存放于根目录下的templates                    os.path.join(BASE_DIR, &#x27;index/templates&#x27;)],</span></span><br><span class="line"><span class="comment">#配置存放于app下的templates</span></span><br></pre></td></tr></table></figure>



<h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><p>django有四种数据库引擎</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;django.db.backends.postgresql&#x27;</span></span><br><span class="line"><span class="string">&#x27;django.db.backends.mysql&#x27;</span></span><br><span class="line"><span class="string">&#x27;django.db.backends.sqlite3&#x27;</span></span><br><span class="line"><span class="string">&#x27;django.db.backends.oracle&#x27;</span></span><br></pre></td></tr></table></figure>



<p>项目默认使用轻型数据库——Sqlite3，其常用于嵌入式开发，其配置信息如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>但是比较常用的是MySQL数据库，配置连接的数据库为MySQL数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line"><span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django . db.backends .mysql&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django_db&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;USER&#x27;</span> : <span class="string">&#x27; root&#x27;</span> ,</span><br><span class="line"><span class="string">&#x27;PASSWORD&#x27;</span> : <span class="string">&#x27;1234&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;HOST&#x27;</span> : <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PORT&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处只连接了MySQL中一个名叫django_db</p>
<p>的数据库，实际开发中要连接多个数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="comment">#第一个数据库</span></span><br><span class="line"><span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line"><span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django . db.backends .mysql&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django_db&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;USER&#x27;</span> : <span class="string">&#x27; root&#x27;</span> ,</span><br><span class="line"><span class="string">&#x27;PASSWORD&#x27;</span> : <span class="string">&#x27;1234&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;HOST&#x27;</span> : <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PORT&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#第二个数据库</span></span><br><span class="line"><span class="string">&#x27;MyDjango&#x27;</span>: &#123;</span><br><span class="line"><span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django . db.backends .mysql&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django_db&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;USER&#x27;</span> : <span class="string">&#x27; root&#x27;</span> ,</span><br><span class="line"><span class="string">&#x27;PASSWORD&#x27;</span> : <span class="string">&#x27;1234&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;HOST&#x27;</span> : <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PORT&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">&#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上就是python中的两个字典</p>
<h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>中间件是处理Django的request和response对象的钩子。</p>
<p><strong>请求（request）：</strong>如用户在网站点击了某个按钮就会发送请求</p>
<p><strong>处理( response)：</strong>网页会根据用户的操作返回相关的网页内容，即为响应处理</p>
<p>而中间件就是处理请求信息的中枢点</p>
<p>开发者可以自定义中间件，但一般来说，django默认的中间件已满足了大部分需求</p>
<h3 id="编写URL"><a href="#编写URL" class="headerlink" title="编写URL"></a>编写URL</h3><p>url简单来说就是网址，每个地址代表不同的网页</p>
<h4 id="URL规则"><a href="#URL规则" class="headerlink" title="URL规则"></a>URL规则</h4><h5 id="1-目录调整"><a href="#1-目录调整" class="headerlink" title="1.目录调整"></a>1.目录调整</h5><p>每一个app都添加独立的静态资源（static文件）和模板文件夹（templates文件），以及urls.py文件。app中的urls.py文件管理属于该app的url，而项目根目录的urls.py统一管理每一个app的urls.py。</p>
<h5 id="2-运行原理"><a href="#2-运行原理" class="headerlink" title="2.运行原理"></a>2.运行原理</h5><p>程序收到用户请求时，根目录uels.py查找URL属于哪个app，然后在app的urls.py里找到具体urls.py信息</p>
<h5 id="3-案例"><a href="#3-案例" class="headerlink" title="3.案例"></a>3.案例</h5><p><strong>根目录下的urls.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin        <span class="comment">#导入admin功能模板</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include    <span class="comment">#导入URL编写模板</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),    <span class="comment">#admin站点管理地址</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,include(<span class="string">&#x27;index.urls&#x27;</span>)),      <span class="comment">#首页地址</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>URL为空即为网站域名，include是将该URL交给index的urls.py处理</p>
<p><strong>index的urls.py</strong></p>
<p>编写URL信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .<span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,views.index), <span class="comment">#导入同目录下的views.py文件，并应用其中的index方法</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p><strong>views.py的编写</strong></p>
<p>views.py用于编写视图函数（功能函数），处理URL请求的信息返回网页内容给用户（所以可以和html联系起来）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span> (<span class="params">request</span>) :</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello world&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>（1）index函数内必须设置request代表当前用户的请求对象（包含用户名，请求内容，请求方式）</p>
<p>（2）视图函数执行完后，必须要用return返回处理结果，否则报错</p>
<h4 id="带变量的URL"><a href="#带变量的URL" class="headerlink" title="带变量的URL"></a>带变量的URL</h4><p>想要一个URL代表多个不同页面，这时候就要用到带变量的URL了</p>
<h5 id="1-变量类型"><a href="#1-变量类型" class="headerlink" title="1.变量类型"></a>1.变量类型</h5><table>
<thead>
<tr>
<th align="center">变量类型</th>
<th align="center">简介</th>
</tr>
</thead>
<tbody><tr>
<td align="center">字符类型</td>
<td align="center">匹配任何非空字符串，默认类型</td>
</tr>
<tr>
<td align="center">整型</td>
<td align="center">匹配0和正整数。</td>
</tr>
<tr>
<td align="center">slug</td>
<td align="center">理解为注释、后缀，用作URL解释性字符</td>
</tr>
<tr>
<td align="center">uuid</td>
<td align="center">匹配一个uid格式的对象</td>
</tr>
</tbody></table>
<h5 id="2-案例"><a href="#2-案例" class="headerlink" title="2.案例"></a>2.案例</h5><p><strong>在index的urls.py中编写</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .<span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,views.index),</span><br><span class="line">    <span class="comment">##添加带有字符类型、整型和slug的URL</span></span><br><span class="line">    path(<span class="string">&#x27;&lt;year&gt;/&lt;int:month&gt;/&lt;slug:day&gt; &#x27;</span>,views.mydate)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>URL用符号”&lt;&gt;”设置变量，如上</p>
<ul>
<li><year> ：字符类型变量year</year></li>
<li><a href="int:month">int:month</a> : 整型变量month</li>
</ul>
<p><strong>在views.py中编写</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取URL中的参数year，month，day</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mydate</span>(<span class="params">request,year,month,day</span>) :</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="built_in">str</span> (year) +<span class="string">&#x27;/&#x27;</span>+ <span class="built_in">str</span> (month) +<span class="string">&#x27;/&#x27;</span>+ <span class="built_in">str</span> (day) )</span><br></pre></td></tr></table></figure>

<p>URL的变量要与视图函数的函数一一对应（一个空格都要对应）</p>
<h5 id="3-url中的正则表达式"><a href="#3-url中的正则表达式" class="headerlink" title="3.url中的正则表达式"></a>3.url中的正则表达式</h5><p>正则表达式的作用是对URL的变量进行截取和判断</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path <span class="comment">#引入re_path功能模板</span></span><br><span class="line"><span class="keyword">from</span> .<span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,views.index),</span><br><span class="line">    <span class="comment">#添加带有字符类型、整型和slug的URL</span></span><br><span class="line">    re_path(<span class="string">&#x27;(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9] &#123;2&#125;)/(?P&lt;day&gt;[0-9]&#123;2&#125;).html&#x27;</span>,views.mydate)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>以(?P<code>&lt;year&gt;</code>[0-9]{4})为例介绍：</p>
<ul>
<li>?P是固定格式</li>
<li><code>&lt;year&gt;</code>为变量的编写规则</li>
<li>[0-9]{4}为匹配模式，代表变量长度为4，只允许取0~9值</li>
</ul>
<h4 id="设置name参数"><a href="#设置name参数" class="headerlink" title="设置name参数"></a>设置name参数</h4><p>实际就是为URL命名，再在html中用<code>&#123;% url 'name' value %&#125;</code>的格式引用，即href属性的链接是动态链接。（name是URL的名字，value是URL中设置的参数）</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>框架学习</tag>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|django框架入门3</title>
    <url>/2020/04/05/Python/Python-django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A83/</url>
    <content><![CDATA[<p>django框架的学习第三弹！一起来学习让人理解困难的数据库和表单吧……</p>
<span id="more"></span>

<h3 id="模型与数据库"><a href="#模型与数据库" class="headerlink" title="模型与数据库"></a>模型与数据库</h3><p>Django支持各种数据库，并为这些数据库提供了统一的调用API，这些API统称为ORM框架，通过ORM框架可以实现数据库连接和读写操作</p>
<h4 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h4><p>Django中通过虚拟对象数据库（模型）来实现对目标数据库的读写操作</p>
<h5 id="1-配置目标数据库信息"><a href="#1-配置目标数据库信息" class="headerlink" title="1.配置目标数据库信息"></a>1.配置目标数据库信息</h5><p>在项目下的setting.py进行配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line"><span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;mydata&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;USER&#x27;</span> : <span class="string">&#x27;root&#x27;</span> ,</span><br><span class="line"> <span class="string">&#x27;PASSWORD&#x27;</span> : <span class="string">&#x27;1234&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;HOST&#x27;</span> : <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PORT&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开启mysql的服务后，用Navicat工具连接数据库并新建一个mydata的数据库</p>
<h5 id="2-构建虚拟对象数据库"><a href="#2-构建虚拟对象数据库" class="headerlink" title="2.构建虚拟对象数据库"></a>2.构建虚拟对象数据库</h5><p>在app的models.py文件中以类的形式定义模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment">#产品分类表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Type</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(<span class="string">&#x27;序号&#x27;</span>,primary_key=<span class="literal">True</span>)</span><br><span class="line">    type_name = models.CharField(<span class="string">&#x27;产品类型&#x27;</span>,max_length=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#产品信息表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(<span class="string">&#x27;序号&#x27;</span>,primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(<span class="string">&#x27;名称&#x27;</span>,max_length=<span class="number">50</span>)</span><br><span class="line">    weight = models.CharField(<span class="string">&#x27;重量&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    size = models.CharField(<span class="string">&#x27;尺寸&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="built_in">type</span> = models.ForeignKey(Type, on_delete=models.CASCADE,verbose_name=<span class="string">&#x27;产品类型&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>模型以类的方式进行定义，并且继承Django的models.Model类，类的命名一般以首字母大写开头</li>
<li>模型字段以类属性进行定义，其中的常用数据类型和参数解释如下</li>
</ul>
<p>表字段常用数据类型：</p>
<table>
<thead>
<tr>
<th>表字段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>models.AutoField</td>
<td>默认会生成一个名为id的字段并为int类型</td>
</tr>
<tr>
<td>models.CharField</td>
<td>字符串类型</td>
</tr>
<tr>
<td>models.BooleanField</td>
<td>布尔类型</td>
</tr>
<tr>
<td>models.DateField</td>
<td>日期(date) 类型</td>
</tr>
<tr>
<td>models.DateTimeField</td>
<td>日期(datetime) 类型</td>
</tr>
<tr>
<td>models.EmailField</td>
<td>字符串类型(正则表达式邮箱)</td>
</tr>
<tr>
<td>models.FloatField</td>
<td>浮点类型</td>
</tr>
<tr>
<td>models.IntegerField</td>
<td>整数类型</td>
</tr>
</tbody></table>
<p>连邮箱的类型都考虑到就非常贴心了</p>
<p>表字段常用参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Null</td>
<td>如为True，字段可以为空</td>
</tr>
<tr>
<td>Blank</td>
<td>如为True，设置在Admin站点管理中添加数据时可允许空值</td>
</tr>
<tr>
<td>primary_ key</td>
<td>如为True，将字段设置成主键</td>
</tr>
<tr>
<td>verbose _name</td>
<td>在Admin站点管理设置字段的显示名称</td>
</tr>
</tbody></table>
<h5 id="3-生成数据表"><a href="#3-生成数据表" class="headerlink" title="3.生成数据表"></a>3.生成数据表</h5><p>通过模型在目标数据库创建相应的数据表，使用下面的两个命令行即可生成数据表</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">django</span>\<span class="title">mysite</span></span></span><br><span class="line"><span class="function">(<span class="title">django</span>) λ <span class="title">python</span> <span class="title">manage.py</span> <span class="title">makemigrations</span></span></span><br><span class="line"><span class="function"><span class="title">Migrations</span> <span class="title">for</span> &#x27;<span class="title">index</span>&#x27;:</span></span><br><span class="line"><span class="function">  <span class="title">index</span>\<span class="title">migrations</span>\0003<span class="title">_auto_20200405_1522.py</span></span></span><br><span class="line"><span class="function">    - <span class="title">Create</span> <span class="title">model</span> <span class="title">Product</span></span></span><br><span class="line"><span class="function">    - <span class="title">Create</span> <span class="title">model</span> <span class="title">Type</span></span></span><br><span class="line"><span class="function">    - <span class="title">Delete</span> <span class="title">model</span> <span class="title">laopo</span></span></span><br><span class="line"><span class="function">    - <span class="title">Add</span> <span class="title">field</span> <span class="title">type</span> <span class="title">to</span> <span class="title">product</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">django</span>\<span class="title">mysite</span></span></span><br><span class="line"><span class="function">(<span class="title">django</span>) λ <span class="title">python</span> <span class="title">manage.py</span> <span class="title">migrate</span></span></span><br><span class="line"><span class="function"><span class="title">Operations</span> <span class="title">to</span> <span class="title">perform</span>:</span></span><br><span class="line"><span class="function">  <span class="title">Apply</span> <span class="title">all</span> <span class="title">migrations</span>: <span class="title">admin</span>, <span class="title">auth</span>, <span class="title">contenttypes</span>, <span class="title">index</span>, <span class="title">sessions</span></span></span><br><span class="line"><span class="function"><span class="title">Running</span> <span class="title">migrations</span>:</span></span><br><span class="line"><span class="function">  <span class="title">Applying</span> <span class="title">index</span>.0003<span class="title">_auto_20200405_1522</span>... <span class="title">OK</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">django</span>\<span class="title">mysite</span></span></span><br><span class="line"><span class="function">(<span class="title">django</span>) λ</span></span><br></pre></td></tr></table></figure>

<p>用Navicat查看数据库，即可发现数据表生成成功</p>
<h4 id="数据表的关系"><a href="#数据表的关系" class="headerlink" title="数据表的关系"></a>数据表的关系</h4><p>每个数据表是可以存在关联的，表与表之间有三种关系：</p>
<h5 id="1-一对一"><a href="#1-一对一" class="headerlink" title="1.一对一"></a>1.一对一</h5><p>用OneToOneField构建一对一关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">models.ForeignKey(第一个表名, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure>





<h5 id="2-一对多"><a href="#2-一对多" class="headerlink" title="2.一对多"></a>2.一对多</h5><p>用ForeignKey构建一对多关系，这样的关系是常用的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">models.ForeignKey(Type, on_delete=models.CASCADE,verbose_name=<span class="string">&#x27;产品类型&#x27;</span>)</span><br></pre></td></tr></table></figure>





<h5 id="3-多对多"><a href="#3-多对多" class="headerlink" title="3.多对多"></a>3.多对多</h5><p>用ManyToManyField构建多对多关系，这种关系不常用</p>
<h4 id="数据表的读写"><a href="#数据表的读写" class="headerlink" title="数据表的读写"></a>数据表的读写</h4><p>数据表的读写操作主要实现对数据的增删改查，首先要在数据表中添加数据如图</p>
<h5 id="1-工具使用"><a href="#1-工具使用" class="headerlink" title="1.工具使用"></a>1.工具使用</h5><p>为了更好演示数据库的读写操作，以下使用PyCharm的shell模式来操作数据库，实际运用中的代码也是一样的。</p>
<p>在PyCharm的Terminal下开启shell模式</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure>





<h5 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2.插入数据"></a>2.插入数据</h5><p>（1）方法一：通过对模型Product进行操作</p>
<p>输入以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> index . models <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.name = <span class="string">&#x27;black&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.weight = <span class="string">&#x27;111g&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.size = <span class="string">&#x27;255mm&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.type_id = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.save()</span><br></pre></td></tr></table></figure>

<p>插入方式的原理：</p>
<ul>
<li>从models.py中导入模型Product</li>
<li>对模型Product声明并实例化，生成对象p</li>
<li>对对象p的属性进行逐一赋值</li>
<li>完成赋值后需要对p进行保存</li>
</ul>
<p>（2）方法二：通过ORM框架提供的API实现，使用create方法实现数据插入,常用方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">from</span> index . models <span class="keyword">import</span> *</span><br><span class="line">&gt;&gt;&gt;Product.objects.create(name = <span class="string">&#x27;black&#x27;</span>,weight = <span class="string">&#x27;111g&#x27;</span>,size = <span class="string">&#x27;255mm&#x27;</span>,type_id = <span class="number">1</span>)</span><br></pre></td></tr></table></figure>



<p>（3）方法三：实例化时直接设置属性值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> index . models <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product(name = <span class="string">&#x27;black&#x27;</span>,weight = <span class="string">&#x27;111g&#x27;</span>,size = <span class="string">&#x27;255mm&#x27;</span>,type_id = <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.save()</span><br></pre></td></tr></table></figure>





<h5 id="3-更新数据"><a href="#3-更新数据" class="headerlink" title="3.更新数据"></a>3.更新数据</h5><p>数据更新的实现步骤与数据插入类似，唯一的区别是在模型实例化后，更新数据要进行数据查询</p>
<p>（1）方法一：通过对模型Product进行操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> index . models <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product.objects.get(<span class="built_in">id</span> = <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.name = <span class="string">&#x27;black&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.save()</span><br></pre></td></tr></table></figure>



<p>（2）方法二：通过ORM框架提供的API实现，使用update方法实现数据更新</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> index . models <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#更新单条数据，使用查询条件get</span></span><br><span class="line">Product.objects.get(<span class="built_in">id</span>=<span class="number">4</span>).update(name=<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新多条数据，使用查询条件filter以列表格式返回</span></span><br><span class="line">Product.objects.<span class="built_in">filter</span>(name=<span class="string">&#x27;red&#x27;</span>).update(weight=<span class="string">&#x27;666g&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#全表数据更新</span></span><br><span class="line">Product.objects.update(name=<span class="string">&#x27;yellow&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h5 id="4-数据删除"><a href="#4-数据删除" class="headerlink" title="4.数据删除"></a>4.数据删除</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除表中全部数据</span></span><br><span class="line">Product.objects.<span class="built_in">all</span>().delete()</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除一条id为1的数据</span></span><br><span class="line">Product.objects.get(<span class="built_in">id</span> = <span class="number">1</span>) .delete()</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除多条数据</span></span><br><span class="line">Product.objects .<span class="built_in">filter</span> (name=<span class="string">&#x27;华为荣耀V9&#x27;</span>) .delete()</span><br></pre></td></tr></table></figure>

<p>数据的删除和更新都用到了查询条件filter和查询条件get，其区别如下：</p>
<ul>
<li>查询字段必须是主键或者唯一约束的字段，并且查询的数据必须存在</li>
<li>查询字段没有限制，只要该字段是数据表的某一字段即可，查询结果以列表的形式返回</li>
</ul>
<h5 id="5-数据查询"><a href="#5-数据查询" class="headerlink" title="5.数据查询"></a>5.数据查询</h5><p>数据查询的内容是数据库操作内容最为多最为复杂的部分</p>
<p>常用的查询方法：</p>
<p>（1）全表查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据以列表形式返回</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product.objects.<span class="built_in">all</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p[<span class="number">1</span>] . name</span><br></pre></td></tr></table></figure>

<p>（2）查询前5个数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在Django中使用Python的列表截取分解即可实现</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product.objects.<span class="built_in">all</span>() [:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>（3）查询某个字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#values方法，以列表形式返回数据，列表元素以字典格式表示</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product.objects. values (<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p[<span class="number">1</span>] <span class="comment">#[ &#x27;name&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>（4）列表表示返回数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># values_ list 方法，以列表表示返回数据，列表元素以元组格式表示</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P = Product.objects. values_ <span class="built_in">list</span>(<span class="string">&#x27;name&#x27;</span>) [:<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P</span><br></pre></td></tr></table></figure>



<p>（5）使用get方法查询数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p= Product. objects.get(<span class="built_in">id</span> = <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.name</span><br></pre></td></tr></table></figure>



<p>（6）使用filter方法查询数据，注意区分get和filter的差异</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product. objects.<span class="built_in">filter</span>(<span class="built_in">id</span> = <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p[<span class="number">0</span>] .name</span><br></pre></td></tr></table></figure>



<p>（7）and查询主要在filter里面添加多个查询条件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product. objects . <span class="built_in">filter</span> (name=<span class="string">&#x27;red&#x27;</span>,<span class="built_in">id</span>=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p</span><br></pre></td></tr></table></figure>



<p>（8）or查询，需要引入Q，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django . db .models <span class="keyword">import</span> Q</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product. objects . <span class="built_in">filter</span>(Q (name=<span class="string">&#x27;red&#x27;</span>)|Q(<span class="built_in">id</span>=<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p</span><br></pre></td></tr></table></figure>



<p>（9）查询数据量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用count方法统计查询数据的数据量</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product . objects . <span class="built_in">filter</span> (name=<span class="string">&#x27;yellow&#x27;</span>).count ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P</span><br></pre></td></tr></table></figure>



<p>（10）去重查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#distinct方法无须设置参数，去重方式根据values设置的字段执行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Product.objects.values (<span class="string">&#x27;name&#x27;</span>).<span class="built_in">filter</span> (name=<span class="string">&#x27;red&#x27;</span>).distinct()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P</span><br></pre></td></tr></table></figure>



<p>以上均使用等值来匹配结果，若想实现其他骚操作，可以参考以下匹配符</p>
<h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><p>对多个关联的数据表进行查询，我们可以使用select_related方法实现，此处不做介绍……</p>
<h3 id="表单与模型"><a href="#表单与模型" class="headerlink" title="表单与模型"></a>表单与模型</h3><p>表单是用户信息的集合，作用是实现网页上的数据交互。</p>
<p>用户表单是web开发的一项基本功能，django的表单功能由Form类实现，主要有两种：django.forms.Form （基础的表单功能），django.forms.ModelForm（在前者的基础上结合模型所生成的数据表单）</p>
<h4 id="初识表单"><a href="#初识表单" class="headerlink" title="初识表单"></a>初识表单</h4><h5 id="1-表单在html"><a href="#1-表单在html" class="headerlink" title="1.表单在html"></a>1.表单在html</h5><p>在html中表单由<form>标签实现</form></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表单--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">me</span> <span class="attr">thod</span>=<span class="string">&quot;post&quot;</span>&gt;</span> </span><br><span class="line">        First name: <span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot; firstname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mickey&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot; Submit&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--表单--&gt;</span></span><br><span class="line">        Last name: <span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot; lastname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mouse&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot; Submit&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span>         </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<p>由此可知一个完整的表单有4个组成部分：提交地址，请求方式，元素控件，提交按钮</p>
<table>
<thead>
<tr>
<th>组成部分</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>提交地址</td>
<td>提交地址用于设置用户提交的表单数据应由哪个URL接收和处理，由<form>的属性action 决定</form></td>
</tr>
<tr>
<td>请求方式</td>
<td>请求方式用于设置表单的提交方式，通常是GET请求或POST请求，由<form>的属性method</form></td>
</tr>
<tr>
<td>元素控件</td>
<td>元素控件是供用户输入数据信息的输入框。由HTML的<input>控件实现，属性type用于设置输入框的类型</td>
</tr>
<tr>
<td>提交按钮</td>
<td>提交按钮供用户提交数据到服务器，该按钮也是由HTML的<input> 控件实现type=”submit”</td>
</tr>
</tbody></table>
<p>下面以django的方式实现上述功能</p>
<h5 id="2-定义表单"><a href="#2-定义表单" class="headerlink" title="2.定义表单"></a>2.定义表单</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义ProudctForm表单对象</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> . models <span class="keyword">import</span>*</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductForm</span> (<span class="params">forms. Form</span>) :</span></span><br><span class="line">    name = forms.CharField(max_length = <span class="number">20</span>,label = <span class="string">&#x27;名字&#x27;</span>,)</span><br><span class="line">    weight = forms.CharField(max_length = <span class="number">50</span>,label = <span class="string">&#x27; 重量&#x27;</span>)</span><br><span class="line">    size = forms.CharField(max_length = <span class="number">50</span>,label = <span class="string">&#x27;尺寸&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置下拉框的值</span></span><br><span class="line">    choices_list = [(i + <span class="number">1</span>, v[<span class="string">&#x27;type_ name&#x27;</span>]) <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(Type.objects.values(<span class="string">&#x27;type_ name&#x27;</span>))]</span><br><span class="line">    <span class="built_in">type</span> = forms.ChoiceField(choices=choices_list, labe1 = <span class="string">&#x27; 产品类型&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在index中添加form.py，用于实现编写表单实现功能。定义了表单ProductForm。表单以类的形式表示，表单中定义了不同类型的类属性，即表单字段（类似HTML的一个控件）</p>
<h5 id="3-视图实例化"><a href="#3-视图实例化" class="headerlink" title="3.视图实例化"></a>3.视图实例化</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py代码，将表单ProductForm实例化并将其传递到模板中生成网页内容</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> renderfrom . form <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span> (<span class="params">request</span>) :</span>    </span><br><span class="line">    product = ProductForm()    </span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;data_form.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure>

<p>在views中导入ProductForm类，在视图函数中实例化生成对象product并把它传给html</p>
<h5 id="4-网页显示"><a href="#4-网页显示" class="headerlink" title="4.网页显示"></a>4.网页显示</h5><p>将对象以HTML的<table>的形式展示在网页上</table></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% if product.errors %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        数据出错啦，错误信息: &#123;&#123; product . errors &#125;&#125;.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        &#123;% csrf_ token %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">                &#123;&#123; product.as_ table &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot; 提交&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>最终实现效果：</p>
<h4 id="表单定义"><a href="#表单定义" class="headerlink" title="表单定义"></a>表单定义</h4><h5 id="1-内置表单字段"><a href="#1-内置表单字段" class="headerlink" title="1.内置表单字段"></a>1.内置表单字段</h5><table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>BooleanField</td>
<td>复选框，如果字段带有required=True,复选框被勾选上</td>
</tr>
<tr>
<td>CharField</td>
<td>参数max_ length和min_ length分 别设置输入长度</td>
</tr>
<tr>
<td>ChoiceField</td>
<td>下拉框，参数choices设置数据内容</td>
</tr>
<tr>
<td>DateField</td>
<td>文本框，具有验证日期格式的功能，参数input_ formats设置日期格</td>
</tr>
<tr>
<td>EmailField</td>
<td>文本框，验证输入数据是否为合法的邮箱地址</td>
</tr>
<tr>
<td>FileField</td>
<td>文件上传功能，参数max_ <em>length和allow</em> empty_ file分别用于设置文件名的最大长度和文件内容是否为空</td>
</tr>
<tr>
<td>ImageField</td>
<td>验证文件是否为Pillow库可识别的图像格式</td>
</tr>
<tr>
<td>IntegerField</td>
<td>验证数据是否为整型</td>
</tr>
<tr>
<td>URLField</td>
<td>验证数据是否为有效的URL地址</td>
</tr>
</tbody></table>
<h5 id="2-表单字段参数"><a href="#2-表单字段参数" class="headerlink" title="2.表单字段参数"></a>2.表单字段参数</h5><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Required</td>
<td>输入数据是否为空，默认值为True</td>
</tr>
<tr>
<td>Widget</td>
<td>设置HTMI控件的样式</td>
</tr>
<tr>
<td>Label</td>
<td>用于生成Label标签或显示内容</td>
</tr>
<tr>
<td>help_text</td>
<td>设置帮助提示信息</td>
</tr>
<tr>
<td>error_messages</td>
<td>设置错误信息，以字典格式表示</td>
</tr>
<tr>
<td>show_hidden_initial</td>
<td>于检验两次输入值是否一致</td>
</tr>
<tr>
<td>Localize</td>
<td>值为True/False，是否支持本地化，如不同时区显示相应的时间.</td>
</tr>
</tbody></table>
<h4 id="模型与表单"><a href="#模型与表单" class="headerlink" title="模型与表单"></a>模型与表单</h4><p>将表单与模型结合起来形成数据表单。该表单继承于父类forms.ModelForm</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductModelForm</span>(<span class="params">forms.ModelForm</span>)</span></span><br></pre></td></tr></table></figure>



<h5 id="1-添加字段"><a href="#1-添加字段" class="headerlink" title="1.添加字段"></a>1.添加字段</h5><p>添加模型外的表单字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">productId = forms . CharField (max_ length=<span class="number">20</span>,label=<span class="string">&#x27; 产品序号&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h5 id="2-字段转换"><a href="#2-字段转换" class="headerlink" title="2.字段转换"></a>2.字段转换</h5><p>通过类Meta实现模型与表单字段的转换。</p>
<p>类Meta的属性说明：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Model</td>
<td>必需属性，用于绑定Model对象</td>
</tr>
<tr>
<td>Fields</td>
<td>必需属性，设置模型内哪些字段转换成表单字段</td>
</tr>
<tr>
<td>Exclude</td>
<td>与fields相反， 禁止模型内哪些字段转换成表单字段</td>
</tr>
<tr>
<td>Labels</td>
<td>可选属性，设置表单字段里的参数label</td>
</tr>
<tr>
<td>error_messages</td>
<td>可选属性，设置表单字段里的参数error_messages</td>
</tr>
</tbody></table>
<h5 id="3-数据清洗"><a href="#3-数据清洗" class="headerlink" title="3.数据清洗"></a>3.数据清洗</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自定义表单字段weight的数据清洗</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_</span> <span class="title">weight</span> (<span class="params">self</span>):</span></span><br><span class="line">	data = self. cleaned_data[<span class="string">&#x27;weight&#x27;</span>]</span><br><span class="line">	<span class="keyword">return</span> data+<span class="string">&#x27;g &#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>框架学习</tag>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|django框架入门2</title>
    <url>/2020/04/04/Python/Python-django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A82/</url>
    <content><![CDATA[<p>django框架第二弹，一起来学习视图和模板吧！！！</p>
<span id="more"></span>

<h3 id="探究视图"><a href="#探究视图" class="headerlink" title="探究视图"></a>探究视图</h3><p>视图负责处理用户请求和生成相应的响应内容，然后再页面中显示</p>
<h4 id="构建网页内容"><a href="#构建网页内容" class="headerlink" title="构建网页内容"></a>构建网页内容</h4><h5 id="1-响应类型"><a href="#1-响应类型" class="headerlink" title="1.响应类型"></a>1.响应类型</h5><p>视图函数return具有多种响应类型</p>
<table>
<thead>
<tr>
<th>响应类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>HttpResponse(‘Hello world’)</td>
<td>HTTP状态码200，请求已成功被服务器接收</td>
</tr>
<tr>
<td>HttpResponseBadRequest(‘BadRequest’)</td>
<td>HTTP状态码400，访问的页面不存在或者请求错</td>
</tr>
<tr>
<td>HttpResponseForbidden(‘NotFound’)</td>
<td>HTTP状态码404，网页不存在或网页的URL失效</td>
</tr>
<tr>
<td>HttpResponseForbidden(‘NotFound’)</td>
<td>HTTP状态码403，没有访问权限</td>
</tr>
<tr>
<td>HttpResponseNotAllowed(‘NotAllowed Get’)</td>
<td>HTTP状态码405，不允许使用该请求方式</td>
</tr>
<tr>
<td>HttpResponseServrError(‘ServerError’)</td>
<td>HTTP状态码500， 服务器内容错误</td>
</tr>
</tbody></table>
<p>响应类型是服务器告诉客户端当前网页请求发生了什么，其属于django.http模板，该模板可以用于实现文件下载</p>
<h5 id="2-生成html网页"><a href="#2-生成html网页" class="headerlink" title="2.生成html网页"></a>2.生成html网页</h5><p>django.http模板可以通过render()函数跳转生成html文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">render(request, template_name, context = <span class="literal">None</span>, content_type = <span class="literal">None</span>, status = <span class="literal">None</span>, using = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>参数说明</p>
<table>
<thead>
<tr>
<th>相关参数</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>request</td>
<td>浏览器向服务器发送的请求对象（不用修改）</td>
</tr>
<tr>
<td>template_ name</td>
<td>HTML 模板文件名</td>
</tr>
<tr>
<td>context</td>
<td>对HTML模板的变量赋值，以字典格式表示，默认情况下是一个空字典</td>
</tr>
<tr>
<td>content_ type</td>
<td>一般情况使用默认值，不用修改</td>
</tr>
<tr>
<td>status</td>
<td>HTTP状态码，默认为200，可以指向404页面</td>
</tr>
<tr>
<td>using</td>
<td>设置HTML模板转换生成HTML网页的模板引擎</td>
</tr>
</tbody></table>
<h5 id="3-案例"><a href="#3-案例" class="headerlink" title="3.案例"></a>3.案例</h5><p>在app目录下创建templates存放html模板，static存放html的静态资源</p>
<p>编写urls.py生成URL信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path <span class="comment">#引入re_path功能模板</span></span><br><span class="line"><span class="keyword">from</span> .<span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,views.index), <span class="comment">#首页URL</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p>编写视图函数生成html网页</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render <span class="comment">#引用render模板</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span> (<span class="params">request</span>) :</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, context=&#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;首页&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>





<h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><p>视图的功能：</p>
<ul>
<li>接收用户请求和返回响应内容</li>
<li>与模型(Model) 实现数据交互(操作数据库)</li>
<li>视图相当于一个处理中心，负责接收用户请求，然后根据请求信息读取并处理后台数据，最后生成HTML网页返回给用户。</li>
</ul>
<p>该部分的内容涉及到数据库，详细的内容会在下一篇文章介绍</p>
<h5 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h5><p>视图操作数据库实质是从models.py导入数据库映射对象</p>
<p>（1）在app的models.py文件编写，将Product类和数据表Product构成映射关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Laopo</span> (<span class="params">models .Model</span>) :</span></span><br><span class="line">    <span class="built_in">id</span> = models.IntegerField(primary_key = <span class="literal">True</span>) <span class="comment">#对应整型类数据</span></span><br><span class="line">    name = models.CharField(max_length = <span class="number">50</span>)     <span class="comment">#对应字符类数据，最大长度为50字节</span></span><br><span class="line">    <span class="built_in">type</span> = models.CharField(max__length = <span class="number">20</span>)</span><br></pre></td></tr></table></figure>



<p>（2）在Navicat for MySQL工具，先新建数据库，再到setting.py文件设置数据库连接信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line"><span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;mydata&#x27;</span>, <span class="comment">#名字与在Navicat新建的对应</span></span><br><span class="line"><span class="string">&#x27;USER&#x27;</span> : <span class="string">&#x27;root&#x27;</span> ,</span><br><span class="line"> <span class="string">&#x27;PASSWORD&#x27;</span> : <span class="string">&#x27;1234&#x27;</span>,	<span class="comment">#密码填自己注册MySQL时写的密码</span></span><br><span class="line"><span class="string">&#x27;HOST&#x27;</span> : <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PORT&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>（3）上述代码只构成了两者间的关系，在数据库中并没有生成相应数据表</p>
<p>生成用于创建数据表的文件（在项目下调用）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></table></figure>

<p>该指令用于生成index定义的模型生成0001_initial.py文件，形成生成数据表的脚本代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<p>该指令根据脚本代码在目标数据库生成对应数据表（要重新连接刷新数据库）</p>
<p>实现效果如下（要打开mysql服务才能成功连接）</p>
<p>其中的index_product对应的就是我们自己在models.py中定义的Product类，通过Navicat工具在其中添加数据，如图</p>
<h5 id="2-视图函数处理"><a href="#2-视图函数处理" class="headerlink" title="2.视图函数处理"></a>2.视图函数处理</h5><p>视图函数将数据与模板连接，实现数据可视化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render <span class="comment">#引用render模板</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>) :</span></span><br><span class="line">    type_list = Laopo.objects.values(<span class="string">&#x27;type&#x27;</span>).distinct() <span class="comment">#查询type的数据并去重</span></span><br><span class="line">    name_list = Laopo.objects.values(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;type&#x27;</span>)     <span class="comment">#查询type和name的全部数据</span></span><br><span class="line">    <span class="comment">#将读取到的数据用context字典储存起来</span></span><br><span class="line">    context = &#123;<span class="string">&#x27;title&#x27;</span>:<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;type_list&#x27;</span>: type_list, <span class="string">&#x27;name_lsit&#x27;</span>:name_list&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#变量context的内容是render()函数的参数值，把变量传给HTML</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, context=context, status=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h5 id="3-使用模板插入数据"><a href="#3-使用模板插入数据" class="headerlink" title="3.使用模板插入数据"></a>3.使用模板插入数据</h5><p>模板与标签的内容下一篇文章再细讲</p>
<p>在html插入动态数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% for type in type_list %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% for name in name_list %&#125;</span><br><span class="line">    &#123;% if type.type == &quot;傲娇&quot;&#125;</span><br><span class="line">        &#123;% name.name %&#125;是个傲娇</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h5><p>实现数据可视的步骤：</p>
<ul>
<li>定义数据模型</li>
<li>在视图导入模型所定义的类（数据表对象）</li>
<li>视图函数再获取数据后，将数据传递给html模板</li>
</ul>
<h4 id="获取请求信息"><a href="#获取请求信息" class="headerlink" title="获取请求信息"></a>获取请求信息</h4><p>视图是用于接收并处理用户请求信息，并且信息储存在参数request中</p>
<h5 id="1-常用属性"><a href="#1-常用属性" class="headerlink" title="1.常用属性"></a>1.常用属性</h5><p>最重要的是GET，POST和method三个</p>
<h5 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h5><p>编写url.py路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path </span><br><span class="line"><span class="keyword">from</span> .<span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;login.html&#x27;</span>,views.login),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p>编写视图函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse <span class="comment">#引用render模板</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment">#post请求的情况</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        <span class="comment"># 绝对路径，完整的地址信息</span></span><br><span class="line">        <span class="comment"># return redirect( &#x27;http://127.0.0.1:8000/&#x27;)</span></span><br><span class="line">        <span class="comment"># 相对路径，代表首页地址</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#get请求的情况</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> request.GET.get(<span class="string">&#x27;name&#x27;</span>):</span><br><span class="line">            name = request.GET.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            name = <span class="string">&#x27; Everyone &#x27;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;username is &#x27;</span> + name)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>首先使用method对用户的请求方式进行判断，一般来说用户访问某个URL地址都是GET，输入信息和点击按钮是POST</li>
<li>判断后，用GET或POST的方式获取请求参数</li>
<li>http:/ /127.0.0.1 : 8000/ login. html ?name=Tom 中GET的请求参数以?为标识，等号前为参数名，等号后为参数值</li>
</ul>
<h4 id="通用视图"><a href="#通用视图" class="headerlink" title="通用视图"></a>通用视图</h4><p>Django可以通过通用视图快速完成数据视图的开发，它是通过定义和声明类的形式实现的</p>
<table>
<thead>
<tr>
<th>类</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>TemplateView</td>
<td>返回HTML模板</td>
</tr>
<tr>
<td>ListView</td>
<td>将数据库的数据传递给HTML模板，通常获取某个表的所有数据</td>
</tr>
<tr>
<td>DetailView</td>
<td>将数据库的数据传递给HTML模板，通常获取数据表的单条数据</td>
</tr>
</tbody></table>
<h3 id="深入模板"><a href="#深入模板" class="headerlink" title="深入模板"></a>深入模板</h3><p>django作为web框架，可以使用模板去动态生成HTML网页。django的模板语言有其内置的DTL和最流行的Jinja2，以下主要介绍的是内置的模板语言DTL</p>
<h4 id="变量与标签"><a href="#变量与标签" class="headerlink" title="变量与标签"></a>变量与标签</h4><h5 id="1-Django内置标签"><a href="#1-Django内置标签" class="headerlink" title="1.Django内置标签"></a>1.Django内置标签</h5><table>
<thead>
<tr>
<th>标签</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>name是变量名，用于插入变量数据，可以是字符串型和整型</td>
</tr>
<tr>
<td><code>&#123;% for %&#125;`          | 遍历输出变量的内容，变量类型多为列表                 |
| `&#123;% if %&#125;`           | 对变量进行条件判断                                   |
| `&#123;% csrf_ _token %&#125;` | 用于防护跨站请求伪造攻击                             |
| `&#123;% url %&#125;`          | 引用路由配置的地址，生成相应的URL地址                |
| `&#123;% static %&#125;`       | 读取静态资源的文件内容                               |
| `&#123;% extends xxx %&#125;`  | 模板继承，xxx为模板文件名，使当前模板继承xxx模板     |
| `&#123;% block xxx %&#125;`    | 重写父类模板的代码                                   |

注意`&#123;% for %&#125;`要用`&#123;% endfor %&#125;</code>，<code>&#123;% if %&#125;`要用`&#123;% endif %&#125;</code>结束</td>
<td></td>
</tr>
</tbody></table>
<h5 id="2-for标签变量"><a href="#2-for标签变量" class="headerlink" title="2.for标签变量"></a>2.for标签变量</h5><p>为了方便for的索引，模板还提供一些特殊的变量来获取for标签循环的信息，把for做出数组的效果方便读取信息</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>forloop.counter</td>
<td>获取当前循环的索引（即第几个数据），从1开始计算</td>
</tr>
<tr>
<td>forloop.counter()</td>
<td>获取当前循环的索引，从0开始计算</td>
</tr>
<tr>
<td>forloop.revcounter</td>
<td>索引从最大数开始递减，直到索引到1位置</td>
</tr>
<tr>
<td>forloop.revcounter()</td>
<td>索引从最大数开始递减，直到索引到0位置</td>
</tr>
<tr>
<td>forloop.first</td>
<td>当遍历的元素为第一项时为真</td>
</tr>
<tr>
<td>forloop.last</td>
<td>当遍历的元素为最后一-项时为真</td>
</tr>
</tbody></table>
<h4 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h4><p>即存在一个html文件的内容，可以在其他html中共用（如header和footer这些）</p>
<p>使用方法很简单：</p>
<ul>
<li>在index.html中使用<code>&#123;% extends "base.html" %&#125;</code>来继承base.html的代码</li>
<li><code>&#123;% block body %&#125;`在继承模板的基础上实现自定义模板内容
- `&#123;% endblock %&#125;</code>结束block标签</li>
</ul>
<p>相当于在共用模板中插入<code>&#123;% block body %&#125;`与`&#123;% endblock %&#125;</code>间的内容</p>
<h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>过滤器是对变量内容进行处理，把变量的数据格式与内容转化成我们想要的效果，其使用方法为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;variable|<span class="built_in">filter</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>过滤器处理变量variable，Django中有许多内置的过滤器</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>框架学习</tag>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|django框架入门4</title>
    <url>/2020/04/06/Python/Python-django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A84/</url>
    <content><![CDATA[<p>本次章节开始y学习Admin后台系统和Auth认证系统（已经是django最后的内容了，没想到我都写完了一个系列了……）</p>
<span id="more"></span>

<h3 id="Admin后台系统"><a href="#Admin后台系统" class="headerlink" title="Admin后台系统"></a>Admin后台系统</h3><p>admin后台系统即网站后台管理系统，主要用于对网站前台信息进行管理（简单来说就是对网站的数据库和文件进行快速操作和管理的系统）</p>
<h4 id="走进Admin"><a href="#走进Admin" class="headerlink" title="走进Admin"></a>走进Admin</h4><h5 id="1-admin配置"><a href="#1-admin配置" class="headerlink" title="1.admin配置"></a>1.admin配置</h5><p>当一个网站上线后，网站管理员通过网站后台系统对网站进行管理与维护。django内置了强大的admin后台系统</p>
<p>（1）在setting.py中默认启用了Admin后台</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">  <span class="comment">#admin的配置</span></span><br><span class="line">  <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>当网站不需要Admin后台，可以删除配置信息，减少程序对系统资源的占用</p>
<p>（2）在根目录的urls.py中可以看到admin的URL地址信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),    <span class="comment">#admin站点管理地址</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,include(<span class="string">&#x27;index.urls&#x27;</span>)),      <span class="comment">#首页地址</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>通过<a href="http://127.0.0.1:8000/admin/进入后台">http://127.0.0.1:8000/admin/进入后台</a></p>
<h5 id="2-创建用户"><a href="#2-创建用户" class="headerlink" title="2.创建用户"></a>2.创建用户</h5><p>要访问admin后台系统，首先需要用户账号和密码，在确保模型在数据库中有相应的数据表后：</p>
<p>（1）使用django的管理工具manage.py，输入命令行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">python manage.py create superuser</span><br></pre></td></tr></table></figure>

<p>用户名和邮箱地址可以为空，接下来就可以进入admin后台系统了</p>
<p>（2）登录进去后，发现都是英文，如果有需要可以通过添加中间件来转换成中文</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.locale.LocaleMiddleware&#x27;</span>, <span class="comment">#在此处添加，注意顺序</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h5 id="3-admin功能"><a href="#3-admin功能" class="headerlink" title="3.admin功能"></a>3.admin功能</h5><table>
<thead>
<tr>
<th>功能</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>站点管理</td>
<td>网站的App管理界面,主要管理Django的App下所定义的模型</td>
</tr>
<tr>
<td>认证和授权</td>
<td>内置的认证系统，也是项目的一一个App</td>
</tr>
<tr>
<td>用户和组</td>
<td>认证和授权所定义的模型，auth_ user和auth_user_groups</td>
</tr>
</tbody></table>
<h5 id="4-模型展示"><a href="#4-模型展示" class="headerlink" title="4.模型展示"></a>4.模型展示</h5><p>若想将index定义的模型展示到后台中，可以有以下两种方法，在app的admin.py中编写</p>
<p>（1）直接把模型注册到admin后台</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> . models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">admin.site.register(Product)</span><br></pre></td></tr></table></figure>

<p>简单但不常用的方法，日常开发通常使用类的方法</p>
<p>（2）通过类的继承进行注册</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> . models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#注册方法一，使用Python装饰器将ProductAdmin和模型Product绑定并注册到后台</span></span><br><span class="line"><span class="meta">@admin.register (<span class="params">Product</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductAdmin</span> (<span class="params">admin.ModelAdmin</span>) :</span></span><br><span class="line">    <span class="comment"># 设置显示的字段</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;weight&#x27;</span>, <span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注册方法二</span></span><br><span class="line">admin.site.register (Product,ProductAdmin)</span><br></pre></td></tr></table></figure>

<p>原理：</p>
<ul>
<li>自定义ProductAdmin类，使其继承ModelAdmin，ModelAdmin 主要设置模型。</li>
<li>将ProductAdmin类注册到Admin后台系统中有两种方法，两者都是将模型Product和ProductAdmin类绑定并注册到Admin后台系统。</li>
</ul>
<h4 id="admin的基本设置"><a href="#admin的基本设置" class="headerlink" title="admin的基本设置"></a>admin的基本设置</h4><h5 id="1-中文显示"><a href="#1-中文显示" class="headerlink" title="1.中文显示"></a>1.中文显示</h5><p>index和products的中文显示需要不同方法</p>
<p>（1）实现index中文显示，在<em>init</em>.py文件编写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django. apps <span class="keyword">import</span> AppConfig</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改App在Admin后台显示的名称</span></span><br><span class="line"><span class="comment">#default_app_config 的值来自apps.py的类名</span></span><br><span class="line">default_app_config = <span class="string">&#x27;index.IndexConfig&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取当前App的命名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_current_app_name</span>(<span class="params">_file</span>):</span></span><br><span class="line">    <span class="keyword">return</span> os.path.split(os.path.dirname(_file))[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#重写类IndexConfig</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexConfig</span> (<span class="params">AppConfig</span>):</span></span><br><span class="line">    name = get_current_app_name(__file__)</span><br><span class="line">    verbose_name = <span class="string">&#x27;网站首页&#x27;</span></span><br></pre></td></tr></table></figure>

<p>IndexConfig类中的verbose_name属性用于设置index的中文内容</p>
<p>（2）模型中文显示</p>
<p>在models.py中设置类Meta的类属性verbose_name_plural</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = models.AutoField(<span class="string">&#x27;序号&#x27;</span>,primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(<span class="string">&#x27;名称&#x27;</span>,max_length=<span class="number">50</span>)</span><br><span class="line">    weight = models.CharField(<span class="string">&#x27;重量&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    size = models.CharField(<span class="string">&#x27;尺寸&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="built_in">type</span> = models.ForeignKey(Type, on_delete=models.CASCADE,verbose_name=<span class="string">&#x27;产品类型&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span> (<span class="params">self</span>) :</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    <span class="comment"># 如只设置verbose_name, 在Admin会显示为&quot;产品信息s&quot;</span></span><br><span class="line">    verbose_name = <span class="string">&#x27;产品信息&#x27;</span></span><br><span class="line">    verbose_name_plural = <span class="string">&#x27;产品信息&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>框架学习</tag>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|自动化脚本实战手册</title>
    <url>/2021/03/28/Python/Python-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E6%88%98%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040841155.jpg" alt="python"></p>
<span id="more"></span>

<h4 id="调用系统终端（cmd）"><a href="#调用系统终端（cmd）" class="headerlink" title="调用系统终端（cmd）"></a>调用系统终端（cmd）</h4><h5 id="1-运用场景"><a href="#1-运用场景" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>有一些工具是使用命令行来执行的，这时可以调用系统终端来实现自动化</p>
<p>如：</p>
<p>swftool：<a href="http://www.swftools.org/">http://www.swftools.org/</a>     （swf转换工具）</p>
<p>ffmpeg：<a href="https://ffmpeg.org/">https://ffmpeg.org/</a>    （视频转码工具）</p>
<h5 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pdf转swf</span></span><br><span class="line">os.system(<span class="string">&#x27;E:\swftools\pdf2swf.exe -b E:\swftools\pdf\%s.pdf -o E:\swftools\swf\%s.swf&#x27;</span> % (name, name))</span><br></pre></td></tr></table></figure>



<h5 id="3-语法解释"><a href="#3-语法解释" class="headerlink" title="3.语法解释"></a>3.语法解释</h5><ul>
<li><p><code>import os</code>引入os模块，该模块主要提供与操作系统相关的功能的便捷式途径</p>
</li>
<li><p><code>os.system</code>可以在系统的子shell中执行命令，在windows上即相当于在cmd运行命令行，其返回值为命令退出的状态</p>
</li>
<li><p><code>os.system</code>运行命令行时无法实时显示运行过程，只能最终返回运行结果，这是和在cmd运行时的差别</p>
</li>
<li><p>使用<code>system</code>函数，会创建一个子进程，但是子进程无法影响父进程中的环境变量。简单来说，就是使用第一个<code>system</code>函数用cd切换目录，第二个<code>system</code>函数的环境变量仍然继承父进程的环境变量。所以第二个子进程的目录位置没有被第一条语句改变</p>
</li>
<li><p>关于新进程的生成和跟踪执行结果，往往用<code>subprocess</code>模块代替<code>system</code></p>
</li>
<li><p>在<code>system</code>函数执行多条语句的方法，可以使用复合语句，如：<code>os.system(&#39;cd path-to-repo &amp;&amp; svn ci&#39;)</code>，即都在一个子进程中运行命令</p>
</li>
<li><p>或者使用<code>os.chdir</code>切换父进程的目录，再执行子进程</p>
</li>
</ul>
<h4 id="文件遍历筛选"><a href="#文件遍历筛选" class="headerlink" title="文件遍历筛选"></a>文件遍历筛选</h4><h5 id="1-运用场景-1"><a href="#1-运用场景-1" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>在自动化批量操作文件时，一定少不了文件遍历，并且可以筛选出需要的文件</p>
<h5 id="2-实例-1"><a href="#2-实例-1" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入python的标准库os库</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 遍历文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="comment"># 初始化一个空列表存储文件</span></span><br><span class="line">    list_all = []</span><br><span class="line">    <span class="comment"># 搜索一个目录下的所有文件夹和所有文件内的指定类型文件</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&#x27;E:\swftools\%s&#x27;</span> % name):</span><br><span class="line">        <span class="comment"># 获得文件名</span></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            <span class="comment"># 加上文件路径</span></span><br><span class="line">            dir_path = os.path.join(root, name)</span><br><span class="line">            <span class="comment"># 切割出文件名</span></span><br><span class="line">            dir_name = os.path.split(dir_path)[-<span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 筛选文件</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;.pdf&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;.swf&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">                list_all.append(dir_name)</span><br><span class="line">        <span class="keyword">return</span> list_all</span><br></pre></td></tr></table></figure>



<h5 id="3-语法解释-1"><a href="#3-语法解释-1" class="headerlink" title="3.语法解释"></a>3.语法解释</h5><ul>
<li><code>os.walk(根目录)</code>可返回3元组 (dirpath, dirnames, filenames)【文件夹相对路径, 文件夹名字, 文件名】</li>
<li><code>os.path.join</code>拼接路径</li>
<li><code>os.path.split(path)</code>拆分路径为<code>(head, tail)</code></li>
</ul>
<h4 id="服务器操作"><a href="#服务器操作" class="headerlink" title="服务器操作"></a>服务器操作</h4><h5 id="1-运用场景-2"><a href="#1-运用场景-2" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>可以运用在将本地文件上传到服务器或者操作服务器上的文件，还可以调用服务器的终端（可用于在服务器上制作视频流）</p>
<h5 id="2-实例-2"><a href="#2-实例-2" class="headerlink" title="2.实例"></a>2.实例</h5><p>参考博客：</p>
<p><a href="https://www.jianshu.com/p/486dd9993125">https://www.jianshu.com/p/486dd9993125</a></p>
<p><a href="https://juejin.cn/post/6844904078057668615">https://juejin.cn/post/6844904078057668615</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="comment"># 建立ssh连接的同时，建立一个加密的文件传输通道</span></span><br><span class="line"><span class="comment"># 设置连接服务器信息</span></span><br><span class="line">t = paramiko.Transport((<span class="string">&quot;host（主机号）&quot;</span>, 端口（一般为<span class="number">22</span>）))</span><br><span class="line">t.connect(username=<span class="string">&quot;用户名&quot;</span>, password=<span class="string">&quot;密码&quot;</span>)</span><br><span class="line"><span class="comment"># 将sshclient的对象的transport指定为以上的t，即进行ssh连接</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh._transport = t</span><br><span class="line"><span class="comment"># ssh连接后在服务器终端运行命令，此处为复合语句</span></span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">&#x27;cd /../var/www/;pwd;&#x27;</span>)</span><br><span class="line"><span class="comment"># 开启sftp通道，传输文件</span></span><br><span class="line">sftp = ssh.open_sftp()</span><br><span class="line"><span class="comment"># 文件传输</span></span><br><span class="line">sftp.put(localpath=<span class="string">&#x27;本地路径&#x27;</span>, remotepath=<span class="string">&#x27;远程路径’)</span></span><br><span class="line"><span class="string"># 关闭通道</span></span><br><span class="line"><span class="string">sftp.close</span></span><br></pre></td></tr></table></figure>



<h5 id="3-语法解释-2"><a href="#3-语法解释-2" class="headerlink" title="3. 语法解释"></a>3. 语法解释</h5><ul>
<li><p>paramiko模块主要用于远程操作服务器，利用该模块，可以方便的进行ssh连接和sftp协议进行sftp文件传输</p>
</li>
<li><p><code>pip install paramiko</code>下载安装paramiko模块</p>
</li>
<li><p>使用paramiko模块有两种连接方式，一种是通过<code>paramiko.SSHClient()</code>函数，另外一种是通过<code>paramiko.Transport()</code>函数</p>
</li>
<li><p><code>exec_command</code>函数调用会返回3个变量，其中stdout为标准输出，在输出内容比较少时，可以通过直接使用read读取出所有的输出</p>
</li>
<li><p>sftp用get函数即下载远程文件，put函数即上传本地文件</p>
</li>
</ul>
<h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><h5 id="1-运用场景-3"><a href="#1-运用场景-3" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>筛选统计数据库，或者可以利用数据库批量快捷发布网站内容（如基于wordpress的站点）</p>
<h5 id="2-实例-3"><a href="#2-实例-3" class="headerlink" title="2.实例"></a>2.实例</h5><p>参考文章：<a href="https://www.runoob.com/python3/python3-mysql.html">https://www.runoob.com/python3/python3-mysql.html</a></p>
<p>（1）引入所需库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> sshtunnel <span class="keyword">import</span> SSHTunnelForwarder</span><br></pre></td></tr></table></figure>



<p>（2）连接一般数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link</span>():</span></span><br><span class="line">	data = pymysql.connect(host=<span class="string">&#x27;数据库主机号&#x27;</span>, port=端口, user=<span class="string">&#x27;用户名&#x27;</span>, passwd=<span class="string">&#x27;密码&#x27;</span>, db=<span class="string">&#x27;数据库名&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>



<p>（3）连接需要跳板机的数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link_base</span>():</span></span><br><span class="line">    server = SSHTunnelForwarder(</span><br><span class="line">            (<span class="string">&#x27;跳板机主机号&#x27;</span>, <span class="number">22</span>),  <span class="comment"># B机器的配置</span></span><br><span class="line">            ssh_password=<span class="string">&quot;跳板机密码&quot;</span>,</span><br><span class="line">            ssh_username=<span class="string">&quot;跳板机用户名&quot;</span>,</span><br><span class="line">            remote_bind_address=(<span class="string">&#x27;数据库主机号&#x27;</span>, 数据库端口))</span><br><span class="line">	</span><br><span class="line">    server.start()</span><br><span class="line"></span><br><span class="line">    data = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,  <span class="comment"># 此处必须是是127.0.0.1</span></span><br><span class="line">                               port=server.local_bind_port,</span><br><span class="line">                               user=<span class="string">&#x27;数据库用户名&#x27;</span>,</span><br><span class="line">                               passwd=<span class="string">&#x27;数据库密码&#x27;</span>,</span><br><span class="line">                               db=<span class="string">&#x27;数据库名&#x27;</span></span><br><span class="line">                               )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>



<p>（4） 利用sql语句操作数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取目标id</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mysql</span>():</span></span><br><span class="line">    <span class="comment"># 获得连接后的数据库</span></span><br><span class="line">    data = link()</span><br><span class="line">    <span class="comment"># 使用 cursor() 方法创建一个游标对象 cursor</span></span><br><span class="line">    cursor = data.cursor()</span><br><span class="line">    <span class="comment"># 用execute执行sql语句操作数据库</span></span><br><span class="line">    sql = <span class="string">&quot;sql语句&quot;</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果为查询操作</span></span><br><span class="line">    <span class="comment"># 获取指针指向的数据</span></span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    <span class="comment"># 输出获取的元组数据</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 如果为增删改操作</span></span><br><span class="line">	<span class="comment"># 提交到数据库执行</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       <span class="comment"># 执行sql语句</span></span><br><span class="line">       cursor.execute(sql)</span><br><span class="line">       <span class="comment"># 提交到数据库执行</span></span><br><span class="line">       db.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">       <span class="comment"># 如果发生错误则回滚</span></span><br><span class="line">       db.rollback()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">	db.close()    </span><br></pre></td></tr></table></figure>



<h5 id="3-语法解释-3"><a href="#3-语法解释-3" class="headerlink" title="3.语法解释"></a>3.语法解释</h5><ul>
<li>连接数据库的核心模块为pymysql,可以通过<code>pip install PyMySQL</code>安装</li>
<li>当需要跳板机连接服务器对象时（可以说数据库服务器也可以是文件服务器），要用到sshtunnel模块，可以通过<code>pip install sshtunnel</code>安装</li>
<li>数据库由多张关系表构成，往往需要查询多个表才能得到自己需要的批量数据</li>
<li>通过cursor可以不断指定执行新的sql语句</li>
<li>sql语句可以善用where筛选语句，应选择查询对象是某个字段，而不是*（全表）</li>
</ul>
<h4 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h4><h5 id="1-运用场景-4"><a href="#1-运用场景-4" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>自动化操作往往会涉及到字符串的筛选和修改，这时候就要用到python的字符串操作和正则匹配</p>
<h5 id="2-实例-4"><a href="#2-实例-4" class="headerlink" title="2.实例"></a>2.实例</h5><p>（1）python字符串处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单筛选出含有指定子字符串的字符串</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;.pdf&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;.swf&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">	print(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单字符串切片，利用find找到切点，再用字符串索引取出所需的字符串</span></span><br><span class="line">num = <span class="built_in">str</span>(i).find(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">title = <span class="built_in">str</span>(i)[:num]</span><br></pre></td></tr></table></figure>



<p>（2）正则表达式处理字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用正则匹配筛选字符串，并修改取代字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="comment"># 正则匹配</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;embed&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> pattern.search(content):</span><br><span class="line">      content = <span class="built_in">str</span>(content).replace(<span class="string">&#x27;.pdf&#x27;</span>, <span class="string">&#x27;.swf&#x27;</span>).replace(<span class="string">&#x27;pdf&#x27;</span>, <span class="string">&#x27;x-shockwave-flash&#x27;</span>).replace(<span class="string">&#x27;height=&quot;100%&quot;&#x27;</span>, <span class="string">&#x27;height=&quot;400&quot;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则匹配的两种方法</span></span><br><span class="line">prog = re.<span class="built_in">compile</span>(pattern)</span><br><span class="line">result = prog.match(string)</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">result = re.match(pattern, string)</span><br></pre></td></tr></table></figure>



<h5 id="3-语法解释-4"><a href="#3-语法解释-4" class="headerlink" title="3.语法解释"></a>3.语法解释</h5><ul>
<li>正则表达式往往是用大于看，看是很难看懂的，比较有用的正则工具：<a href="https://regex101.com/">https://regex101.com/</a></li>
<li>正则查找有match和search两种方式</li>
<li><code>re.match()</code> 从第一个字符开始找, 如果第一个字符就不匹配就返回None, 不继续匹配. 用于判断字符串开头或整个字符串是否匹配,速度快</li>
<li><code>re.search()</code> 会整个字符串查找,直到找到一个匹配</li>
<li><code>re.compile()</code>将正则表达式的样式编译为一个正则对象，如果需要多次使用这个正则表达式的话，使用 <code>re.compile()</code>和保存这个正则对象以便复用，可以让程序更加高效</li>
</ul>
<h4 id="Word文档操作"><a href="#Word文档操作" class="headerlink" title="Word文档操作"></a>Word文档操作</h4><h5 id="1-运用场景-5"><a href="#1-运用场景-5" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>在办公中可以批量生成只有日期和名字改动的模板，可以读取一篇word文档生成计算机可以处理的数据</p>
<h5 id="2-实例-5"><a href="#2-实例-5" class="headerlink" title="2.实例"></a>2.实例</h5><p>（1）引入基本模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 负责新建文档</span></span><br><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="comment"># 对齐</span></span><br><span class="line"><span class="keyword">from</span> docx.enum.text <span class="keyword">import</span> WD_ALIGN_PARAGRAPH</span><br><span class="line"><span class="comment"># 磅数</span></span><br><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> Pt</span><br><span class="line"><span class="comment"># 中文格式</span></span><br><span class="line"><span class="keyword">from</span> docx.oxml.ns <span class="keyword">import</span> qn</span><br></pre></td></tr></table></figure>



<p>（2）文档基础设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个文档</span></span><br><span class="line">document = Document()</span><br><span class="line"><span class="comment"># 设置文档基础字体,注意该处的styles有个s</span></span><br><span class="line">document.styles[<span class="string">&#x27;Normal&#x27;</span>].font.name = <span class="string">u&#x27;微软雅黑&#x27;</span></span><br><span class="line">document.styles[<span class="string">&#x27;Normal&#x27;</span>].font.size = Pt(<span class="number">14</span>)</span><br><span class="line"><span class="comment"># 设置文档基础中文字体</span></span><br><span class="line">document.styles[<span class="string">&#x27;Normal&#x27;</span>].element.rPr.rFonts.<span class="built_in">set</span>(qn(<span class="string">&#x27;w:eastAsia&#x27;</span>), <span class="string">u&#x27;微软雅黑&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>（3）创建纯文字模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_context</span>(<span class="params">context</span>):</span></span><br><span class="line">	<span class="comment"># 创建自然段</span></span><br><span class="line">	p = document.add_paragraph()</span><br><span class="line">	<span class="comment"># 设置该自然段对齐方式</span></span><br><span class="line">	p.alignment = WD_ALIGN_PARAGRAPH.LEFT</span><br><span class="line">	<span class="comment"># 在该自然段添加文字</span></span><br><span class="line">	r = p.add_run(<span class="built_in">str</span>(context))</span><br><span class="line">	<span class="comment"># 设置字体格式</span></span><br><span class="line">	r.font.size = Pt(<span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 段后距离5磅</span></span><br><span class="line">    p1.space_after = Pt(<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 段前距离5磅</span></span><br><span class="line">    p1.space_after = Pt(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>



<p>（4）创建表格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">height = <span class="built_in">len</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="comment"># 文档插入表格</span></span><br><span class="line">table = document.add_table(rows=height, cols=<span class="number">5</span>, style=<span class="string">&#x27;Table Grid&#x27;</span>)</span><br><span class="line"><span class="comment"># 填写字段</span></span><br><span class="line">table.cell(<span class="number">0</span>, <span class="number">0</span>).text = <span class="string">&#x27;序号&#x27;</span></span><br><span class="line">table.cell(<span class="number">0</span>, <span class="number">1</span>).text = <span class="string">&#x27;网址名称&#x27;</span></span><br><span class="line">table.cell(<span class="number">0</span>, <span class="number">2</span>).text = <span class="string">&#x27;网址&#x27;</span></span><br><span class="line">table.cell(<span class="number">0</span>, <span class="number">3</span>).text = <span class="string">&#x27;责任部门&#x27;</span></span><br><span class="line">table.cell(<span class="number">0</span>, <span class="number">4</span>).text = <span class="string">&#x27;负责人姓名&#x27;</span></span><br></pre></td></tr></table></figure>



<p>（5）存储文档</p>
<p>注意要标注后缀为docx，否则打不开文件，储存位置为程序根目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">document.save(<span class="string">&#x27;test.docx&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>（6）读取文档</p>
<p>可用于将记录题目的word文档转换为计算机可以处理的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="comment"># 打开一个文档</span></span><br><span class="line">document = Document(<span class="string">&quot;C语言.docx&quot;</span>)</span><br><span class="line"><span class="comment"># 获取所有段落</span></span><br><span class="line">all_paragraphs = document.paragraphs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建二维数组存储一道题</span></span><br><span class="line">passage = [[]]</span><br><span class="line">sent = []</span><br><span class="line"><span class="comment"># 逐个读取段落,一般不读取run中的，因为会出现文字割裂的问题</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(all_paragraphs)):</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^\d&#x27;</span>)</span><br><span class="line">    matching = pattern.findall(all_paragraphs[i].text)</span><br><span class="line">    <span class="keyword">if</span> matching:</span><br><span class="line">        <span class="comment"># 重置单个题目的列表</span></span><br><span class="line">        passage.append(sent)</span><br><span class="line">        sent = []</span><br><span class="line">        sent.append(all_paragraphs[i].text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sent.append(all_paragraphs[i].text)</span><br></pre></td></tr></table></figure>



<p>（7）修改文档</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取word文件</span></span><br><span class="line">document = Document(<span class="string">&quot;资料2.0.docx&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_text</span>(<span class="params">old_text, new_text</span>):</span></span><br><span class="line">    <span class="comment"># 修改纯文本</span></span><br><span class="line">    <span class="comment"># 复制粘贴word文档内容包括格式</span></span><br><span class="line">    all_paragraphs = document.paragraphs</span><br><span class="line">    <span class="keyword">for</span> paragraphs <span class="keyword">in</span> all_paragraphs:</span><br><span class="line">        <span class="keyword">for</span> run <span class="keyword">in</span> paragraphs.runs:</span><br><span class="line">            <span class="comment"># 修改文字</span></span><br><span class="line">            run_text = run.text.replace(old_text, new_text)</span><br><span class="line">            run.text = run_text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改表格</span></span><br><span class="line">    all_tables = document.tables</span><br><span class="line">    <span class="keyword">for</span> table <span class="keyword">in</span> all_tables:</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> table.rows:</span><br><span class="line">           <span class="keyword">for</span> cell <span class="keyword">in</span> row.cells:</span><br><span class="line">                cell_text = cell.text.replace(old_text, new_text)</span><br><span class="line">                cell.text = cell_text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换字符串</span></span><br><span class="line">change_text(<span class="string">&#x27;社团&#x27;</span>, <span class="string">&#x27;协会&#x27;</span>)</span><br><span class="line"><span class="comment"># 可以覆盖保存，但注意要将打开程序关闭</span></span><br><span class="line">document.save(<span class="string">&quot;资料2.0.docx&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>8.word转pdf</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用win32模板的功能</span></span><br><span class="line"><span class="keyword">from</span> win32com.client <span class="keyword">import</span> Dispatch, constants, gencache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定读取docx的路径，保存pdf路径</span></span><br><span class="line">docx_path = <span class="string">&#x27;资料2.0.docx&#x27;</span></span><br><span class="line">pdf_path = <span class="string">&#x27;资料.pdf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指向offic的功能并调用</span></span><br><span class="line">gencache.EnsureModule(<span class="string">&#x27;&#123;00020905-0000-0000-C000-000000000046&#125;&#x27;</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用word服务，开始转换</span></span><br><span class="line">wd = Dispatch(<span class="string">&quot;Word.Application&quot;</span>)</span><br><span class="line">doc = wd.Documents.Open(docx_path, ReadOnly=<span class="number">1</span>)</span><br><span class="line">doc.ExportAsFixedFormat(pdf_path, constants.wdExportFormatPDF, Item=constants.wdExportDocumentWithMarkup,CreateBookmarks=constants.wdExportCreateHeadingBookmarks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出并保存</span></span><br><span class="line">wd.Quit(constants.wdDoNotSaveChanges)</span><br></pre></td></tr></table></figure>



<h5 id="3-语法解释-5"><a href="#3-语法解释-5" class="headerlink" title="3.语法解释"></a>3.语法解释</h5><ul>
<li>安装docx模块，<code>pip install python-docx</code></li>
<li>读取文档时要注意，<code>document.paragraphs</code>返回的数组的每一个元素即一行的内容</li>
<li>一维数组的增加可以直接使用append不断扩展数组<code>sent.append(&#39;str&#39;)</code></li>
<li>二维数组的二维增加，可以直接填入数组<code>passage.append(array)</code>，一维增加的前提的二维存在，否则会报错超出范围<code>passage[1].append(&#39;str&#39;)</code></li>
</ul>
<h4 id="Excel文档操作"><a href="#Excel文档操作" class="headerlink" title="Excel文档操作"></a>Excel文档操作</h4><h5 id="1-运用场景-6"><a href="#1-运用场景-6" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>办公中经常会用到excel表格来整理统计数据，利用python可以批量读取和写入表格，提高工作效率</p>
<h5 id="2-实例-6"><a href="#2-实例-6" class="headerlink" title="2.实例"></a>2.实例</h5><p>（1）xlrd库读取execl内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd  <span class="comment"># 引入xlrd库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入工作簿路径</span></span><br><span class="line">xlsx = xlrd.open_workbook(<span class="string">&#x27;E://考勤表.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定读取的工作表，也可以用工作表名字来索引</span></span><br><span class="line"><span class="comment"># table = xlsx.sheet_by_name(&quot;表名&quot;)</span></span><br><span class="line">table = xlsx.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定单元格的坐标值，并打印，注意不要超过单元格所有的内容否则会报错,以下三种形式是一致的</span></span><br><span class="line">print(table.cell_value(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(table.cell(<span class="number">1</span>, <span class="number">2</span>).value)</span><br><span class="line">print(table.row(<span class="number">1</span>)[<span class="number">2</span>].value)</span><br></pre></td></tr></table></figure>



<p>（2）xlwt库写入execl工作表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入xlwt库</span></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个工作簿</span></span><br><span class="line">new_workbook = xlwt.Workbook()</span><br><span class="line"><span class="comment"># 新建一个工作表</span></span><br><span class="line">worksheet = new_workbook.add_sheet(<span class="string">&#x27;sheet1&#x27;</span>)</span><br><span class="line"><span class="comment"># 在工作表指定坐标写入值</span></span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="comment"># 保存工作簿</span></span><br><span class="line">new_workbook.save(<span class="string">&#x27;test.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="Pandas分析数据"><a href="#Pandas分析数据" class="headerlink" title="Pandas分析数据"></a>Pandas分析数据</h4><h5 id="1-运用场景-7"><a href="#1-运用场景-7" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>Pandas是一个强大的分析结构化数据的工具集；用于数据挖掘和数据分析，同时也提供数据清洗功能。</p>
<h5 id="2-案例"><a href="#2-案例" class="headerlink" title="2.案例"></a>2.案例</h5><p>参考文档：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></p>
<p>读取excel数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用pandas打开excel</span></span><br><span class="line">file = pd.ExcelFile(<span class="string">&#x27;test.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># 指定表名，excel的数据以数组的形式返回</span></span><br><span class="line">data = file.parse(<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
        <tag>python</tag>
        <tag>脚本学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|基于python开发学生管理系统</title>
    <url>/2020/05/28/Python/Python-%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<img src="https://raw.staticdn.net/Autovy/Image/master/img/202206081707617.jpg" height="300" alt="git" align="center">



<span id="more"></span>

<h3 id="模拟数据库"><a href="#模拟数据库" class="headerlink" title="模拟数据库"></a>模拟数据库</h3><p>用列表为主体储存全部学生信息，方便读取。用字典这种数据类型放置一个学生信息。方便对列表操作时整块操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [   <span class="comment">#列表</span></span><br><span class="line">		   <span class="comment">#字典	</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>:<span class="string">&quot;佛山&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Mary&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;女&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>: <span class="string">&quot;广州&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;,  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Jhon&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>: <span class="string">&quot;厦门&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h3 id="操作框架"><a href="#操作框架" class="headerlink" title="操作框架"></a>操作框架</h3><p>写代码优先规划好主框架，然后再补充功能函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(</span><br><span class="line">            <span class="string">&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            欢迎使用【学生管理系统】</span></span><br><span class="line"><span class="string">            0.退出系统</span></span><br><span class="line"><span class="string">            1.显示所有学生信息</span></span><br><span class="line"><span class="string">            2.新建学生信息</span></span><br><span class="line"><span class="string">            3.查询学生信息</span></span><br><span class="line"><span class="string">            4.修改学生信息</span></span><br><span class="line"><span class="string">            5.删除学生信息                            </span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">          )</span><br><span class="line"></span><br><span class="line">    op = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的操作：&quot;</span>)) <span class="comment">#转化输入的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> op==<span class="number">1</span> :</span><br><span class="line">        print(<span class="string">&quot;显示所有学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">2</span> :</span><br><span class="line">        print(<span class="string">&quot;新建学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">3</span> :</span><br><span class="line">        print(<span class="string">&quot;查询学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">4</span> :</span><br><span class="line">        print(<span class="string">&quot;修改学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">5</span> :</span><br><span class="line">        print(<span class="string">&quot;删除学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">0</span> :</span><br><span class="line">        <span class="keyword">break</span>  						<span class="comment">#退出循环</span></span><br></pre></td></tr></table></figure>





<h3 id="显示信息"><a href="#显示信息" class="headerlink" title="显示信息"></a>显示信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showall</span>() :</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas :</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;学生信息：&quot;</span>, data)</span><br></pre></td></tr></table></figure>

<p>1.Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串，相当于用data逐个存储列表datas的信息</p>
<p>2.值得注意的是，python的函数必须写在调用函数之前（毕竟没有声明嘛）</p>
<h3 id="新增学生"><a href="#新增学生" class="headerlink" title="新增学生"></a>新增学生</h3><p>用字典存储学生信息，用赋值的方法修改（添加）信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">creat</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;新增学生名字：&quot;</span>)</span><br><span class="line">    sex = <span class="built_in">input</span>(<span class="string">&quot;新增学生性别：&quot;</span>)</span><br><span class="line">    adress = <span class="built_in">input</span>(<span class="string">&quot;新增学生地址：&quot;</span>) <span class="comment">#变量储存</span></span><br><span class="line">    student = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: sex,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>: adress</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    datas.append(student) <span class="comment">#新增列表的项</span></span><br></pre></td></tr></table></figure>



<h3 id="查询学生"><a href="#查询学生" class="headerlink" title="查询学生"></a>查询学生</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">req</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;查询学生姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  datas:</span><br><span class="line">        <span class="keyword">if</span>  data[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            print(data)</span><br></pre></td></tr></table></figure>

<p>列表+字典的信息储存形式用循环遍历字典内容，data就是字典名</p>
<h3 id="修改学生信息"><a href="#修改学生信息" class="headerlink" title="修改学生信息"></a>修改学生信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;修改学生的姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  datas:</span><br><span class="line">        <span class="keyword">if</span>  data[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            print(<span class="string">&quot;修改前学生信息：&quot;</span>,data)</span><br><span class="line">            data[<span class="string">&quot;name&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;修改的名字：&quot;</span>)</span><br><span class="line">            data[<span class="string">&quot;sex&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;修改性别：&quot;</span>)</span><br><span class="line">            data[<span class="string">&quot;adress&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;修改地址：&quot;</span>)</span><br><span class="line">            print(<span class="string">&quot;修改后学生信息：&quot;</span>,data)</span><br></pre></td></tr></table></figure>

<p>循环遍历字典内容，赋值修改信息</p>
<h3 id="删除学生信息"><a href="#删除学生信息" class="headerlink" title="删除学生信息"></a>删除学生信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;删除学生的姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  datas:</span><br><span class="line">        <span class="keyword">if</span>  data[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            datas.remove(data)</span><br></pre></td></tr></table></figure>

<p>data中相当于存储了整个字典，把他一整个删去即可</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
        <tag>管理系统</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工具|学点docker</title>
    <url>/2021/05/28/Tool/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Docker%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040845042.jpeg" alt="git"></p>
<span id="more"></span>

<h3 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h3><h4 id="Docker应用"><a href="#Docker应用" class="headerlink" title="Docker应用"></a>Docker应用</h4><ul>
<li>部署环境复杂，非常费时费力</li>
<li>环境不能跨平台</li>
<li>docker可以把环境打包成镜像，直接运行即可</li>
<li>docker通过隔离机制，可以将服务器利用到极致</li>
</ul>
<h4 id="Docker的功能"><a href="#Docker的功能" class="headerlink" title="Docker的功能"></a>Docker的功能</h4><ul>
<li><p>虚拟机技术</p>
</li>
<li><p>容器化技术</p>
</li>
<li><p>DevOps（开发 + 运维）</p>
</li>
<li><p>应用更加快速的交付和部署</p>
</li>
<li><p>更便捷的升级和扩缩容</p>
</li>
<li><p>更加简单的系统运维</p>
</li>
<li><p>更加高效的计算资源利用</p>
</li>
</ul>
<h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><h4 id="1-Docker基本组成"><a href="#1-Docker基本组成" class="headerlink" title="1.Docker基本组成"></a>1.Docker基本组成</h4><ul>
<li><p>仓库：仓库就是存放镜像的地方</p>
</li>
<li><p>镜像：docker镜像就像一个模板，通过镜像可以创建多个容器</p>
</li>
<li><p>容器：容器可以独立运行一个或者多组应用（启动，停止，删除）</p>
</li>
</ul>
<h4 id="2-run工作流程"><a href="#2-run工作流程" class="headerlink" title="2.run工作流程"></a>2.run工作流程</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040846845.png" alt="在这里插入图片描述"></p>
<h4 id="3-Docker工作原理"><a href="#3-Docker工作原理" class="headerlink" title="3.Docker工作原理"></a>3.Docker工作原理</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040846904.png" alt="Docker 工作原理"></p>
<h4 id="4-Docker与VM的区别"><a href="#4-Docker与VM的区别" class="headerlink" title="4.Docker与VM的区别"></a>4.Docker与VM的区别</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040846873.jpeg" alt="containers-vs-virtual-machines.jpg"></p>
<ul>
<li>Docker的抽象层比虚拟机少</li>
<li>docker利用的是宿主机的内核，vm需要的是Guest OS（vm每次都要加载操作系统的内核）</li>
</ul>
<h3 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040846335.jpeg" alt="img"></p>
<h4 id="1-帮助命令"><a href="#1-帮助命令" class="headerlink" title="1.帮助命令"></a>1.帮助命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker info</span><br><span class="line">docker --help</span><br></pre></td></tr></table></figure>



<h4 id="2-镜像命令"><a href="#2-镜像命令" class="headerlink" title="2.镜像命令"></a>2.镜像命令</h4><p>（1）docker images查看本地主机上的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<ul>
<li>REPOSITORY :镜像的仓库源</li>
<li>TAG：镜像的标签</li>
<li>IMAGE ID：镜像的id</li>
<li>CREATED：镜像的创建时间    </li>
<li>SIZE：镜像大小</li>
</ul>
<p>可选项：</p>
<ul>
<li>-a : 列出所有镜像</li>
<li>-q：只显示镜像id</li>
</ul>
<p>（2）docker search 搜索镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NAME  DESCRIPTION   STARS  OFFICIAL   AUTOMATED</span><br></pre></td></tr></table></figure>

<p>可选项，可以过滤搜索结果：</p>
<p>–filter=STARS=3000 ：搜索stars大于3000的镜像</p>
<p>（3）docker pull 拉取镜像:tag ，默认拉取最新版</p>
<p>（4）docker rmi 删除镜像名称/id   </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除mysql镜像</span></span><br><span class="line">docker rmi -f mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 递归删除所有镜像</span></span><br><span class="line">docker -f $(docker images -aq)</span><br></pre></td></tr></table></figure>



<h4 id="3-容器命令"><a href="#3-容器命令" class="headerlink" title="3.容器命令"></a>3.容器命令</h4><p>有了镜像我们才能创建容器</p>
<p>（1）新建镜像并启动：dokcer run [可选参数] image</p>
<p>容器内相当于一个新的虚拟环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure>

<p>相关参数：</p>
<ul>
<li>–name = “Name” ：容器名字，用于区分容器</li>
<li>-d ：后台方式运行</li>
<li>-it : 使用交互方式运行，可进入容器查看内容（开启容器终端）</li>
<li>-p：指定容器端口</li>
</ul>
<p>（2）查看容器：docker ps</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps  	  #查看运行中的容器</span><br></pre></td></tr></table></figure>

<p>相关参数：</p>
<ul>
<li>-a  ：查看所有容器（包括已终止的容器）</li>
<li>-n = ? :显示最近创建的容器</li>
<li>-q ： 只显示容器的编号</li>
</ul>
<p>（3）退出容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit # 容器停止并退出</span><br><span class="line">ctrl + P + Q # 容器不停止退出(按P,Q这个设计多少有点反人类)</span><br></pre></td></tr></table></figure>



<p>（4）删除容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id	# 删除指定的容器(不能删除运行中的容器，加-f强制删除)</span><br><span class="line">docker rm -f $(docker ps -aq) 	 # 删除所有容器</span><br></pre></td></tr></table></figure>



<p>（5）启动和停止容器的操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id # 启动容器</span><br><span class="line">docker restart 容器id # 重启容器</span><br><span class="line">docker stop 容器id # 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id # 强制停止当前容器</span><br></pre></td></tr></table></figure>



<h4 id="4-操作命令"><a href="#4-操作命令" class="headerlink" title="4.操作命令"></a>4.操作命令</h4><p>（1）后台启动命令</p>
<p>docker容器使用后台运行时（<code>docker run -d centos</code>），必须要有一个前台进程，如果docker发现自己没有应用了，就会自动停止</p>
<p>（2）查看日志命令</p>
<p>查看容器运行的日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f -t --tail 容器</span><br></pre></td></tr></table></figure>



<p>（3）查看容器进程信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker top 容器id</span><br></pre></td></tr></table></figure>



<p>（4）查看镜像元数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure>



<p>（5）进入当前正在运行的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令1:进入容器后开启一个新的终端（相当于开启了另一个进程）</span></span><br><span class="line">docker exec -it 容器id bashShell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令2：进入容器正在执行的终端中，不会启动新的进程</span></span><br><span class="line">docker attach 容器id</span><br></pre></td></tr></table></figure>



<p>（6）从容器中拷贝文件到主机上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 2e18c3e0375a:/home/test.py /home/autovy/桌面</span><br></pre></td></tr></table></figure>

<p>拷贝是一个手动过程，从封闭的容器中拿到需要留存的数据，而使用数据卷</p>
<p>则可以实现自动同步</p>
<h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>推荐文章：<a href="http://linyishui.top/2019101101.html">docker镜像讲解</a></p>
<h4 id="1-Portainer可视化工具"><a href="#1-Portainer可视化工具" class="headerlink" title="1.Portainer可视化工具"></a>1.Portainer可视化工具</h4><h4 id="2-镜像简介"><a href="#2-镜像简介" class="headerlink" title="2.镜像简介"></a>2.镜像简介</h4><ul>
<li>镜像就是一种轻量级，可执行的独立软件包，用来打包软件运行环境和基于环境开会的软件（包括代码，运行时，库，环境变量，配置文件）</li>
<li>镜像来源：<ul>
<li>从远程仓库下载</li>
<li>自己制作的镜像DockerFile</li>
</ul>
</li>
</ul>
<h4 id="3-镜像加载原理"><a href="#3-镜像加载原理" class="headerlink" title="3.镜像加载原理"></a>3.镜像加载原理</h4><p>（1）联合文件系统（UnionFS）</p>
<p>镜像和容器不同，容器是彼此独立的，而容器是分层叠加的，可以共享相同的底层文件和目录</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040846837.webp" alt="img"></p>
<p>（2）镜像加载原理</p>
<p>共享底层资源</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040846524.png" alt="docker文件系统分层存储原理"></p>
<h4 id="4-分层理解"><a href="#4-分层理解" class="headerlink" title="4.分层理解"></a>4.分层理解</h4><p>基于Ubuntu Linux 16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。该镜像当前已经包含3个镜像层</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040846403.png" alt="基于Ubuntu Linux 16.04创建镜像"></p>
<p>docker镜像默认只读，当容器启动时，一个新的可写层被加载到镜像顶部</p>
<p>这一层即为容器层，容器之下称为镜像层</p>
<h4 id="5-commit镜像"><a href="#5-commit镜像" class="headerlink" title="5.commit镜像"></a>5.commit镜像</h4><p>提交一个新的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的副本</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令和git原理相似</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</span><br></pre></td></tr></table></figure>



<h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><h4 id="1-数据卷原理"><a href="#1-数据卷原理" class="headerlink" title="1.数据卷原理"></a>1.数据卷原理</h4><p>容器之间有一个数据共享技术，Docker容器中产生的数据，同步到本地（从而实现数据可持久化，数据同步操作，数据存储在本地不会随着容器删除而丢失）</p>
<p>其本质是将容器内的目录挂载到主机上</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040846330.png" alt="数据卷容器实践_heima201907的博客-CSDN博客"></p>
<h4 id="2-数据卷使用"><a href="#2-数据卷使用" class="headerlink" title="2.数据卷使用"></a>2.数据卷使用</h4><p>（1）使用命令挂载 -v</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v 主机目录地址:容器目录地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试：将容器的目录挂载到主机目录</span></span><br><span class="line">docker run -it -v /home/test:/home centos /bin/bash</span><br></pre></td></tr></table></figure>

<ul>
<li>主机和容器没有对应目录时会自动创建目录</li>
<li>通过docker inspect 可以查看到挂载信息</li>
<li>挂载双方是双向同步关系，他们的文件内容无论哪一方更改，都会保持同步</li>
<li>修改文件时，只需要在本地修改即可，不需要进入容器</li>
</ul>
<p>（2）具名挂载和匿名挂载</p>
<p>除了上文中的指定路径挂载，我们也可以使用具名挂载和匿名挂载</p>
<p>匿名挂载：<code>-v :容器目录地址</code></p>
<p>具名挂载：<code>-v 卷名:容器目录地址</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">docker run -d -P --name test1 -v /home/new centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载</span></span><br><span class="line">docker run -d -P --name test1 -v mycentos:/home/new centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有卷(可以看到存在匿名卷)</span></span><br><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>

<p>所有的docker容器内的卷默认放在本地主机的<code>/var/lib/docker/volumes下</code></p>
<p>（3）挂载权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以通过 -v 容器路径：ro,rw改变读写权限</span></span><br><span class="line">ro # 只读，只能通过宿主机来操作，容器内部无法进行操作</span><br><span class="line">rw # 可读可写，默认为可读可写</span><br></pre></td></tr></table></figure>





<h4 id="3-数据卷容器"><a href="#3-数据卷容器" class="headerlink" title="3.数据卷容器"></a>3.数据卷容器</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040846812.png" alt="Docker学习过程（5-数据卷）_gengli2017的博客-CSDN博客"></p>
<p>容器间也可以进行挂载从而实现数据同步，多个子容器的数据可以挂载到一个父容器中，这个父容器就是数据卷容器</p>
<p>–volumes-from即可以让docker3挂载到docker1上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name docker3 --volumes-from docker1 5ce91af318b3 /bin/bash</span><br></pre></td></tr></table></figure>

<p>容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止</p>
<h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><p>参考文章：<a href="https://blog.52itstyle.vip/archives/2839/">DokcerFile命令详解</a></p>
<h4 id="1-DockerFile简介"><a href="#1-DockerFile简介" class="headerlink" title="1.DockerFile简介"></a>1.DockerFile简介</h4><p>DockerFile是构建docker镜像的构建文件，即命令脚本。通过这个脚本我们可以生成一个镜像。</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040846366.png" alt="在这里插入图片描述"></p>
<h4 id="2-DockerFile构建流程"><a href="#2-DockerFile构建流程" class="headerlink" title="2.DockerFile构建流程"></a>2.DockerFile构建流程</h4><p>（1）DockerFile内容示例</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在构建镜像形成两个数据卷，因为没有指定的挂载卷会自动进行匿名挂载</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----end------&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>



<p>（2）通过DockerFile文件构建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f dockerfile -t test/centos .</span><br></pre></td></tr></table></figure>

<p>build命令， -f  打开dockerfile文件的路径，-t  test/centos命名容器，.即为生成路径</p>
<p>（3）用自己的镜像创建容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it 5ce91af318b3 /bin/bash</span><br></pre></td></tr></table></figure>



<p>（4）docker push 发布镜像（开源进行）</p>
<h4 id="3-DockerFile指令详解"><a href="#3-DockerFile指令详解" class="headerlink" title="3.DockerFile指令详解"></a>3.DockerFile指令详解</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040846106.png" alt="img"></p>
<p>（图中最后一项应为CMD指令此处更正）</p>
<p>补充项：</p>
<ul>
<li><p>CMD：指定这个容器启动时要运行的命令，只有最后一个会生效，可被替代</p>
</li>
<li><p>ENTRYPOINT：指定这个容器启动时要运行的命令，可以追加命令</p>
</li>
<li><p>COPY：类似于ADD，将我们文件拷贝到镜像中</p>
</li>
<li><p>ENV：构建的时候设置环境变量</p>
</li>
</ul>
<h4 id="4-创建自己的DockerFile"><a href="#4-创建自己的DockerFile" class="headerlink" title="4.创建自己的DockerFile"></a>4.创建自己的DockerFile</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> Autovy&lt;autovys@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录为/usr/local</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装相关依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开放端口80</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----end------&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>

<p> 通过<code>docker history mycentos:0.1</code>  命令可以查看构建镜像的过程</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>开发工具</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工具|Docker搭建LNMP</title>
    <url>/2021/06/06/Tool/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Docker%E6%90%AD%E5%BB%BALNMP/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040845042.jpeg" alt="git"></p>
<span id="more"></span>

<h2 id="命令行搭建"><a href="#命令行搭建" class="headerlink" title="命令行搭建"></a>命令行搭建</h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><h4 id="1-mysql镜像拉取"><a href="#1-mysql镜像拉取" class="headerlink" title="1.mysql镜像拉取"></a>1.mysql镜像拉取</h4><p>从仓库中拉取对应的mysql镜像，注意如果不标注tag（版本号等），会默认使用lastest（最新版）这个版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docekr pull mysql:5.6</span><br></pre></td></tr></table></figure>



<h4 id="2-创建mysql容器"><a href="#2-创建mysql容器" class="headerlink" title="2.创建mysql容器"></a>2.创建mysql容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=xy123456 --name xy_mysql mysql:5.6</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>-d 让容器在后台运行，如果没有这个条件，会在终端展示mysql加载过程，而且无法进行操作（在另一个终端查看，会发现mysql的容器正在运行中，关闭原来的终端，该容器并不会随之关闭）</li>
<li>-p 添加主机到容器的端口映射，3306是容器内mysql默认使用的端口号</li>
<li>-e 设置环境变量，这里是设置mysql的root用户的初始密码，这个必须设置，如果没有设置容器会被自动关停</li>
<li>–name 容器的名字，容器名必须唯一</li>
</ul>
<h4 id="3-进入mysql容器"><a href="#3-进入mysql容器" class="headerlink" title="3.进入mysql容器"></a>3.进入mysql容器</h4><p>容器启动后，我们可以进入运行中的容器查看mysql的相关文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -ti xy_mysql /bin/bash</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>-t 在容器里生产一个伪终端</li>
<li>-i 对容器内的标准输入 (STDIN) 进行交互</li>
<li>exit命令是离开并关闭容器，但是由于容器还有任务所以不会关停</li>
</ul>
<h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><h4 id="1-PHP镜像拉取"><a href="#1-PHP镜像拉取" class="headerlink" title="1.PHP镜像拉取"></a>1.PHP镜像拉取</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull php:7.0-fpm</span><br></pre></td></tr></table></figure>



<h4 id="2-创建PHP容器"><a href="#2-创建PHP容器" class="headerlink" title="2.创建PHP容器"></a>2.创建PHP容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -v /var/nginx/www/html:/var/www/html -p 9000:9000 --link xy_mysql:mysql --name xy_phpfpm php:fpm </span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>-p 添加主机到容器的端口映射，设定php使用9000端口</li>
<li>-v 添加目录映射，即主机上的/var/nginx/www/html和容器中/var/www/html目录是同步的，主机上的路径如果不存在，也会自动生成</li>
<li>–link 与另外一个容器建立起联系，这样我们就可以在当前容器中去使用另一个容器里的服务</li>
</ul>
<h4 id="3-创建文件"><a href="#3-创建文件" class="headerlink" title="3.创建文件"></a>3.创建文件</h4><p>这时我们可以不进入容器内增加文件，而是可以在主机的挂载目录下添加文件</p>
<p>在/var/nginx/www/html目录下新建index.php文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim index.php</span><br></pre></td></tr></table></figure>



<p>写入内容作为测试</p>
<p>因为docker需要在最高权限下运行，所有在主机上创建的目录需要最高权限访问</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo() <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="安装nignx"><a href="#安装nignx" class="headerlink" title="安装nignx"></a>安装nignx</h3><h4 id="1-nginx镜像拉取"><a href="#1-nginx镜像拉取" class="headerlink" title="1.nginx镜像拉取"></a>1.nginx镜像拉取</h4><p>这里拉取的就是最新版</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>



<h4 id="2-创建nginx工具人容器"><a href="#2-创建nginx工具人容器" class="headerlink" title="2.创建nginx工具人容器"></a>2.创建nginx工具人容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 \</span><br><span class="line">--link xy_phpfpm:phpfpm --name xy_nginx nginx</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<p>创建一个无挂载的容器，方便下一步提取出配置文件（如果挂载了，会导致复制配置文件时，一直与容器同步）</p>
<h4 id="3-复制配置文件"><a href="#3-复制配置文件" class="headerlink" title="3.复制配置文件"></a>3.复制配置文件</h4><p>容器的挂载只限于目录，如果直接挂载文件，其仍作为目录被处理</p>
<p>要实现文件同步，我们必须要先从容器中复制出一份配置文件（如果是直接新建一个，挂载时主机上的空白文件会同步到容器中）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp xy_nginx:/etc/nginx/nginx.conf /var/nginx/nginx.conf</span><br><span class="line">docker cp xy_nginx:/etc/nginx/conf.d/default.conf /var/nginx/conf.d/</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>docker cp  原路径:转移路径</li>
<li>容器的路径用： <code>容器名:容器内文件路径</code>表示</li>
<li>cp时路径上的目录必须存在（而挂载时，主机会自动创建不存在的目录）</li>
</ul>
<h4 id="4-创建nginx挂载容器"><a href="#4-创建nginx挂载容器" class="headerlink" title="4.创建nginx挂载容器"></a>4.创建nginx挂载容器</h4><p>先把充当工具人的nginx容器删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm -f xy_nginx</span><br></pre></td></tr></table></figure>

<p>重新创建一个带挂载的nginx容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 \</span><br><span class="line">-v /var/nginx/nginx.conf:/ect/nginx/nginx.conf\</span><br><span class="line">-v /var/nginx/conf.d/default.conf:/ect/nginx/conf.d/default.conf\</span><br><span class="line">-v /var/nginx/www/html:/var/www/html\</span><br><span class="line">--link xy_phpfpm:phpfpm --name xy_nginx nginx</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>-p 添加主机到容器的端口映射，nginx默认使用80端口，也是网页范围默认使用的端口</li>
<li>-v 挂载了三个文件到本地，其中<code>/var/nginx/nginx.conf</code>和<code>/var/nginx/conf.d/default.conf</code>在本地同步了nginx两个重要的配置文件，<code>/var/www/html</code>则同步了nginx网页展示文件</li>
<li>挂载时应该要保持最后一个文件相同</li>
</ul>
<h4 id="5-修改配置文件"><a href="#5-修改配置文件" class="headerlink" title="5.修改配置文件"></a>5.修改配置文件</h4><p>修改nginx的配置文件让其监听php，这里可以直接在主机修改配置文件</p>
<p>主机：<code>/var/nginx/conf.d/default.conf</code>    容器：<code>/ect/nginx/conf.d/default.conf</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root           /<span class="keyword">var</span>/www/html;</span><br><span class="line">    fastcgi_pass   <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9000</span>;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document</span>_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    <span class="keyword">include</span>        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内容解析：</p>
<ul>
<li>root为文件php根目录，所以修改为 <code>/var/www/html</code></li>
<li>fastcgi_pass 修改为<code>本地ip地址:php端口</code>，注意使用回环地址也是不允许的</li>
<li>fastcgi_index为默认访问的页面</li>
<li>fastcgi_param应该改为 $document_root$fastcgi_script_name才能准确找到位置</li>
</ul>
<h4 id="6-配置出错处理方法"><a href="#6-配置出错处理方法" class="headerlink" title="6.配置出错处理方法"></a>6.配置出错处理方法</h4><p>当配置文件出错时，容器将无法运行</p>
<ul>
<li>先查看日志，查找出错的地方</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs xy_nginx</span><br></pre></td></tr></table></figure>

<ul>
<li>由于容器没有启动，我们无法直接进入容器修改，所以需要用docker cp下载出问题的文件，然后再通过cp覆盖问题文件</li>
<li>如果该出错文件有挂载，在本地修改即可</li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>开发工具</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工具|Linux学习手册</title>
    <url>/2021/06/27/Tool/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Linux%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040952867.png" alt="image-20210904095248687"></p>
<span id="more"></span>

<h3 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h3><h4 id="1-Linux发行版"><a href="#1-Linux发行版" class="headerlink" title="1.Linux发行版"></a>1.Linux发行版</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949495.jpeg" alt="img"></p>
<p>Linux发行版 = Liunx核心 +应用软件</p>
<h4 id="2-Liunx内核架构"><a href="#2-Liunx内核架构" class="headerlink" title="2.Liunx内核架构"></a>2.Liunx内核架构</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949098.jpeg" alt="img"></p>
<p>Liunx内核有5个子系统：</p>
<ul>
<li>Process Scheduler，进程管理、进程调度。负责管理 CPU 资源，以便让各个进程可以以尽量公平的方式访问 CPU。</li>
<li>Memory Manager，内存管理。负责管理 Memory（内存）资源，以便让各个进程可以安全的共享机器的内存资源。</li>
<li>VFS（Virtual File System），虚拟文件系统。Linux 内核将不同功能的外部设备抽象为可以通过统一的文件操作接口（open、close、read、write 等）来访问。这就是 Linux系统“一切皆是文件”的体现</li>
<li>设备驱动，负责管理第三方设备接入/终端</li>
<li>Network，网络子系统。负责管理系统的网络设备，并实现多种多样的网络标准</li>
</ul>
<h3 id="Linux基本操作"><a href="#Linux基本操作" class="headerlink" title="Linux基本操作"></a>Linux基本操作</h3><h4 id="1-开机关机"><a href="#1-开机关机" class="headerlink" title="1.开机关机"></a>1.开机关机</h4><p>开启会启动许多程序，在windows叫做“服务“（service），在Linux叫做“守护进程”（daemon）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949420.png" alt="Linux开机启动脚本 - 转1"></p>
<p>同步数据命令：sync（常常用于强制关机前）</p>
<p>关机命令：shutdown</p>
<p>重启命令：reboot</p>
<h4 id="2-基本目录结构"><a href="#2-基本目录结构" class="headerlink" title="2.基本目录结构"></a>2.基本目录结构</h4><p>基本知识：</p>
<ul>
<li>Liunx一切皆文件</li>
<li>根目录/，所有文件都挂载在这个节点下</li>
<li>ls 查看当前目录下所有文件</li>
</ul>
<p>Liunx目录结构：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949471.png" alt="img"></p>
<p>比较常用的如下：</p>
<ul>
<li>/etc ： 该目录可用来存放所有系统管理需要的配置文件和子目录</li>
<li>/home：用户主目录（在liunx，每个用户都有一个自己的目录）</li>
<li>/opt : 主机额外安装软件存放的位置</li>
<li>/root : 系统管理员用户主目录</li>
<li>/usr：用户的应用程序和文件都放在这个目录，类似于Windows的program files目录</li>
<li>/tmp ：存放临时文件，用完即丢的文件如安装包</li>
<li>/var : 存放不断扩充的东西，习惯于放那些经常被修改的目录</li>
</ul>
<h3 id="Liunx目录管理"><a href="#Liunx目录管理" class="headerlink" title="Liunx目录管理"></a>Liunx目录管理</h3><h4 id="1-文件管理基本命令"><a href="#1-文件管理基本命令" class="headerlink" title="1.文件管理基本命令"></a>1.文件管理基本命令</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949194.png" alt="img"></p>
<p>比较常用的如下：</p>
<ul>
<li>ls: 列出目录</li>
<li>cd：切换目录</li>
<li>pwd：显示目前的目录</li>
<li>mkdir：创建一个新的目录</li>
<li>rmdir：删除一个空的目录</li>
<li>cp：复制文件或目录</li>
<li>rm：移除文件或目录</li>
<li>mv：移动文件与目录，或修改文件与目录的名称</li>
<li>touch：创建文件</li>
</ul>
<h4 id="2-ls命令"><a href="#2-ls命令" class="headerlink" title="2.ls命令"></a>2.ls命令</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949481.png" alt="这里写图片描述"></p>
<h4 id="3-mkdir命令"><a href="#3-mkdir命令" class="headerlink" title="3.mkdir命令"></a>3.mkdir命令</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949299.png" alt="img"></p>
<h4 id="4-rm命令"><a href="#4-rm命令" class="headerlink" title="4.rm命令"></a>4.rm命令</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949353.png" alt="img"></p>
<h3 id="Linux文件管理"><a href="#Linux文件管理" class="headerlink" title="Linux文件管理"></a>Linux文件管理</h3><h4 id="1-文件属性"><a href="#1-文件属性" class="headerlink" title="1.文件属性"></a>1.文件属性</h4><p>文件属性字符串:<br><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949841.png" alt="img"></p>
<p>文件权限字符串：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949192.png" alt="363003_1227493859FdXT"></p>
<p>文件类型：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949930.png" alt="linux文件类型和权限- xd_xumaomao - 博客园"></p>
<p>常用的如下：</p>
<ul>
<li><code>-</code>：普通文件</li>
<li><code>d</code>：目录文件</li>
<li><code>l</code>：连接文件（相当于Windows的快捷方式）</li>
</ul>
<p>文件权限：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949379.png" alt="img"></p>
<p>在文件属性中每组权限按<code>rwx</code>这样的顺序显示，而<code>-</code>表示没有该权限</p>
<h4 id="2-chgrp-amp-chown命令"><a href="#2-chgrp-amp-chown命令" class="headerlink" title="2.chgrp&amp;chown命令"></a>2.chgrp&amp;chown命令</h4><p>更改文件属组（文件所属用户组）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">charg -R 属组名 文件名</span><br></pre></td></tr></table></figure>

<p>更改文件属主（文件所有者）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R 属主名 文件名</span><br></pre></td></tr></table></figure>

<p>同时修改文件的属组和属主</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown -R 属主名:属组名 文件名</span><br></pre></td></tr></table></figure>



<h4 id="3-chmod命令"><a href="#3-chmod命令" class="headerlink" title="3.chmod命令"></a>3.chmod命令</h4><p>chmod可以设置文件访问权限，有两种设置方法：数字（常用）和符号</p>
<p>Linux文件的基本权限有9个，分别是owner/group/others 三种身份分别的rwx权限（9个权限三个三个为一组）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949807.png" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用格式</span></span><br><span class="line">chmod 权限数字组 文件名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开放所有权限给所有人</span></span><br><span class="line">chmod 777 root</span><br></pre></td></tr></table></figure>



<h4 id="4-文件内容查看"><a href="#4-文件内容查看" class="headerlink" title="4.文件内容查看"></a>4.文件内容查看</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949445.png" alt="夺命雷公狗---linux NO:11 linux的文本文件查看命令- 夺命雷公狗- 博客园"></p>
<ul>
<li>nl：显示文件中的时候标注行号</li>
<li>less与more类似，有分页的功能，但是可以往前翻页（空格下翻页，pageDown，pageUp代表翻动页面）</li>
<li>在less查看模式下：q命令退出，<code>/</code>命令向下查询字符串，<code>?</code>向下查询字符串，<code>n</code>继续搜寻下一个，<code>N</code>向上寻找</li>
</ul>
<h3 id="Linux链接"><a href="#Linux链接" class="headerlink" title="Linux链接"></a>Linux链接</h3><h4 id="1-链接类型"><a href="#1-链接类型" class="headerlink" title="1.链接类型"></a>1.链接类型</h4><p>Linux的链接分为两种：  </p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949118.png" alt="linux之软连接硬链接- osc_3uvms8cw的个人空间- OSCHINA - 中文开源技术交流社区"></p>
<ul>
<li>软链接：类似与windows下的快捷方式，删除了源文件，快捷方式也访问不了</li>
<li>硬链接：允许一个文件有多个路径，用户可以通过这种机制建立硬链接到一些重要文件上，防止误删</li>
</ul>
<h4 id="2-创建链接"><a href="#2-创建链接" class="headerlink" title="2.创建链接"></a>2.创建链接</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 为f1文件创建一个硬链接f2</span></span><br><span class="line">ln f1 f2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为f1文件创建一个软链接（符号链接）f3</span></span><br><span class="line">ln -s f1 f3</span><br></pre></td></tr></table></figure>



<h4 id="3-链接相关测试"><a href="#3-链接相关测试" class="headerlink" title="3.链接相关测试"></a>3.链接相关测试</h4><p>文件内容修改：</p>
<p>原文件的内容，其硬链接的内容，其软连接访问的内容都是保持一致的，修改其中之一其他两项访问的内容也会相应变化</p>
<p>文件删除：</p>
<p>删除原文件后，硬链接依旧可以访问，而软链接无法打开（快捷方式失效）</p>
<h3 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h3><h4 id="1-Vim简介"><a href="#1-Vim简介" class="headerlink" title="1.Vim简介"></a>1.Vim简介</h4><ul>
<li>Vim是一种文本编辑器，有代码补全，编译及错误跳转等方便编程的功能</li>
<li>Vim可以通过参加实现IDE一样的功能</li>
<li>Vim基本使用：查看内容，编辑内容，保存内容</li>
</ul>
<h4 id="2-Vim三模式"><a href="#2-Vim三模式" class="headerlink" title="2.Vim三模式"></a>2.Vim三模式</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040949256.jpeg" alt="Linux 之Vim 命令使用（详细总结） - 知乎"></p>
<ul>
<li>命令模式只能查看文本，可以通过键盘输入切换到输入模式和底部命令行模式</li>
<li>输入模式可以编辑文件</li>
<li>末行模式即命令行模式可以执行退出，保存文件等操作</li>
</ul>
<h4 id="3-命令模式"><a href="#3-命令模式" class="headerlink" title="3.命令模式"></a>3.命令模式</h4><ul>
<li><code>数字+空格</code> ：横向移动光标，向右移动n个字</li>
<li><code>数字+回车</code>：纵向移动光标，向下移动n行</li>
<li><code>/word</code>：向光标下寻找名为word的字符串</li>
<li><code>?word</code>：向光标下寻找名为word的字符串</li>
<li><code>n/N</code>:进行下翻页和下翻页（n表示重复上一个搜寻动作，N则是反向于上一个搜寻动作）</li>
<li><code>u</code>：重复上一个操作</li>
</ul>
<h4 id="4-输入模式"><a href="#4-输入模式" class="headerlink" title="4.输入模式"></a>4.输入模式</h4><p>输入模式常用按键：</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202202271721696.png" alt="image-20220227172148042" style="zoom: 67%;">



<h4 id="5-命令行模式"><a href="#5-命令行模式" class="headerlink" title="5.命令行模式"></a>5.命令行模式</h4><p>常用命令：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202271722004.png" alt="image-20220227172248760"></p>
<p><code>:ZZ</code>：不存储直接离开（ctrl + z）</p>
<p><code>:set nu</code>：设置行号，打开文本每一行都显示行号</p>
<p>注意如果输入的命令不存在会返回127错误，而且会回到vim界面</p>
<h3 id="Linux账号管理"><a href="#Linux账号管理" class="headerlink" title="Linux账号管理"></a>Linux账号管理</h3><p>账号管理实质是对<code>/etc/passwd</code>文件的更新</p>
<h4 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="1.添加用户"></a>1.添加用户</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -选项 用户名</span><br></pre></td></tr></table></figure>

<p>useradd 相关选项：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040950318.png" alt="op"></p>
<p>常用<code>-m</code>自动为用户在home下创建目录</p>
<p>可以在/etc/passwd文件夹下查看用户相关的配置信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure>



<h4 id="2-删除用户"><a href="#2-删除用户" class="headerlink" title="2.删除用户"></a>2.删除用户</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userdel -选项 用户名</span><br></pre></td></tr></table></figure>

<p>常用<code>-r</code>选项自动删除用户在home下的用户目录</p>
<h4 id="3-修改用户"><a href="#3-修改用户" class="headerlink" title="3.修改用户"></a>3.修改用户</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usermod -选项 修改内容 用户名</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040950615.png" alt="选项"></p>
<h4 id="4-切换用户"><a href="#4-切换用户" class="headerlink" title="4.切换用户"></a>4.切换用户</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su + 用户名</span><br></pre></td></tr></table></figure>

<p>切换到root用户：<code>sudo su</code></p>
<p>修改主机名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostname 修改的名称</span><br></pre></td></tr></table></figure>



<h4 id="5-用户口令管理命令"><a href="#5-用户口令管理命令" class="headerlink" title="5.用户口令管理命令"></a>5.用户口令管理命令</h4><p>创建/修改用户的密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040950354.png" alt="选项"></p>
<h3 id="Linux用户组管理"><a href="#Linux用户组管理" class="headerlink" title="Linux用户组管理"></a>Linux用户组管理</h3><p>组的增加，删除和修改实际上就是对<code>/etc/group</code>文件的更新</p>
<h4 id="1-创建用户组"><a href="#1-创建用户组" class="headerlink" title="1.创建用户组"></a>1.创建用户组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用户组组的id自增1</span></span><br><span class="line">groupadd 组名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定id创建用户组</span></span><br><span class="line">groupadd -g 233 组名</span><br></pre></td></tr></table></figure>



<h4 id="2-删除用户组"><a href="#2-删除用户组" class="headerlink" title="2.删除用户组"></a>2.删除用户组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除用户组</span></span><br><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure>



<h4 id="3-修改用户组"><a href="#3-修改用户组" class="headerlink" title="3.修改用户组"></a>3.修改用户组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 基本样式</span></span><br><span class="line">groupmod 选项 修改内容 组名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 案例</span></span><br><span class="line">groupmod -g 666 -n newname 组名</span><br></pre></td></tr></table></figure>



<h4 id="4-切换用户组"><a href="#4-切换用户组" class="headerlink" title="4.切换用户组"></a>4.切换用户组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录的当前用户切换到root组</span></span><br><span class="line">newgrp root</span><br></pre></td></tr></table></figure>



<h4 id="5-用户管理相关文件"><a href="#5-用户管理相关文件" class="headerlink" title="5.用户管理相关文件"></a>5.用户管理相关文件</h4><p><code>/etc/passwd</code>文件：</p>
<p><strong>具体格式</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">用户名:口令（不可见一般显示为x）:用户标识号:组标识号:注释性描述:主目录:登录Shell</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040950861.jpeg" alt="详解Linux中/etc/passwd文件详解Linux中/etc/passwd文件"></p>
<p>该文件的每一行都代表一个用户，可以查看用户主目录位置，并查看属于哪一个组</p>
<p><code>/etc/shadow</code>文件：</p>
<p>用户密码加密后存放在/etc/shadow文件，与passwd文件一一对应</p>
<p><strong>具体格式</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040950761.jpeg" alt="img"></p>
<p><code>/etc/group</code>文件：</p>
<p><strong>具体格式</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">组名:口令:组ID:组内用户列表</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040950338.jpeg" alt="img"></p>
<h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h4 id="1-df命令"><a href="#1-df命令" class="headerlink" title="1.df命令"></a>1.df命令</h4><p>列出文件系统整体的磁盘使用量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 普通查看</span></span><br><span class="line">df</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 内存转换为M</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041103972.png" alt="img"></p>
<h4 id="2-du命令"><a href="#2-du命令" class="headerlink" title="2.du命令"></a>2.du命令</h4><p>检查磁盘空间使用量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前目录内存占用</span></span><br><span class="line">du </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查根目录每个目录所占用的容量</span></span><br><span class="line">du -sm /*</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040950313.png" alt="img"></p>
<h4 id="3-mount-amp-umount命令"><a href="#3-mount-amp-umount命令" class="headerlink" title="3.mount&amp;umount命令"></a>3.mount&amp;umount命令</h4><p>可类比于U盘的使用</p>
<p>mount：挂载设备</p>
<p>umount：卸载设备</p>
<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="1-进程介绍"><a href="#1-进程介绍" class="headerlink" title="1.进程介绍"></a>1.进程介绍</h4><ul>
<li>在Liunx中，每个程序都是有自己的一个进程，每一个进程都有一个id号</li>
<li>每一个进程都有一个父进程</li>
<li>进程有两种存在方式：前台运行（程序），后台运行（服务）</li>
</ul>
<h4 id="2-进程与线程"><a href="#2-进程与线程" class="headerlink" title="2.进程与线程"></a>2.进程与线程</h4><ul>
<li>进程就是应用程序的启动实例，而线程从属于进程，是程序的实际执行者</li>
<li>一个进程至少包含一个主线程，也可以有更多的子线程</li>
<li>对操作系统来说，线程是最小的执行单元，进程是最小的资源管理单元</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040950452.webp" alt="img"></p>
<h4 id="3-任务执行方式"><a href="#3-任务执行方式" class="headerlink" title="3.任务执行方式"></a>3.任务执行方式</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040950096.png" alt="img"></p>
<ul>
<li>串行是指多个任务时，各个任务按顺序执行，完成一个之后才能进行下一个</li>
<li>并行指的是多个任务可以同时执行，异步是多个任务并行的前提条件</li>
<li>并发是指两个或多个事件在同一时间间隔内发生，常用于多线程编程中</li>
</ul>
<h4 id="4-同步异步阻塞"><a href="#4-同步异步阻塞" class="headerlink" title="4.同步异步阻塞"></a>4.同步异步阻塞</h4><p>同步与异步关注的是<strong>消息通信机制</strong>：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040950691.png" alt="img"></p>
<ul>
<li>由调用方盲目主动问询的方式是同步调用</li>
<li>由被调用方主动通知调用方任务已完成的方式是异步调用</li>
<li>同步异步是对系统内核而言（是否主动通知应用层）</li>
</ul>
<p>阻塞和非阻塞关注的是<strong>程序在等待调用结果</strong>时的状态：</p>
<p><img src="https://pic3.zhimg.com/80/v2-6507ab3517814b1b84fbff9a3eb31842_720w.png" alt="img"></p>
<ul>
<li>被挂起无法执行其他操作的则是阻塞型</li>
<li>被立即「抽离」去完成其他「任务」的则是非阻塞型的</li>
<li>阻塞和非阻塞对应用层而言（应用是否去做其他事情）</li>
</ul>
<h4 id="5-ps命令"><a href="#5-ps命令" class="headerlink" title="5.ps命令"></a>5.ps命令</h4><p><code>ps</code>查看当前系统中正在执行的各种进程</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040950813.png" alt="Linux学习之路(三) —— Linux高级系统管理命令"></p>
<p>常用案例：</p>
<p>查看mysql的所有进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -aux|grep mysql</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ps -aux</code> ：查看所有进程信息</li>
<li><code>|</code> ：Linux管道符，过滤上一条命令输出的信息</li>
<li><code>grep</code> ：查找文件中符合条件的字符串</li>
</ul>
<p>查看父进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep mysql</span><br></pre></td></tr></table></figure>



<p>显示进程树</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -p显示父id，-u显示用户组</span></span><br><span class="line">pstree -pu</span><br></pre></td></tr></table></figure>



<h4 id="6-kill命令"><a href="#6-kill命令" class="headerlink" title="6.kill命令"></a>6.kill命令</h4><p>强制结束该进程，类似与windows结束任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 进程id</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>开发工具</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工具|matlab查询文档</title>
    <url>/2020/12/20/Tool/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-matlab%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040959763.png" alt="image-20210904095937186"></p>
<span id="more"></span>

<h4 id="matlab算数运算"><a href="#matlab算数运算" class="headerlink" title="matlab算数运算"></a>matlab算数运算</h4><p>快速查询：<a href="https://ww2.mathworks.cn/help/matlab/arithmetic.html?searchHighlight=算术&s_tid=srchtitle">算术运算 - MATLAB &amp; Simulink - MathWorks 中国</a></p>
<h5 id="1-基本运算"><a href="#1-基本运算" class="headerlink" title="1.基本运算"></a>1.基本运算</h5><table>
<thead>
<tr>
<th>符号</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>.*</td>
<td>乘法</td>
</tr>
<tr>
<td>*</td>
<td>矩阵乘法</td>
</tr>
<tr>
<td>./</td>
<td>数组右除</td>
</tr>
<tr>
<td>.\</td>
<td>数组左除</td>
</tr>
<tr>
<td>x = B/A</td>
<td>对线性方程组 xA = B 求解 x（矩阵适用）</td>
</tr>
<tr>
<td>x=A\B</td>
<td>对线性方程组 Ax = B 求解 x（矩阵适用）</td>
</tr>
<tr>
<td>b = mod(<a href="https://ww2.mathworks.cn/help/matlab/ref/mod.html#btvg3sl-1-a"><code>a</code></a>,<a href="https://ww2.mathworks.cn/help/matlab/ref/mod.html#btvg3sl-1-m"><code>m</code></a>)</td>
<td>返回 <code>a</code> 除以 <code>m</code> 后的余数，其中 <code>a</code> 是被除数，<code>m</code> 是除数</td>
</tr>
</tbody></table>
<h5 id="2-基本数数学函数"><a href="#2-基本数数学函数" class="headerlink" title="2.基本数数学函数"></a>2.基本数数学函数</h5><p>快速查询：<a href="https://blog.csdn.net/cc198877/article/details/8106016">Matlab常用数学函数和数学运算符_cc198877的专栏-CSDN博客_matlab数学运算符</a></p>
<h4 id="matlab数组与矩阵运算"><a href="#matlab数组与矩阵运算" class="headerlink" title="matlab数组与矩阵运算"></a>matlab数组与矩阵运算</h4><p>矩阵运算遵循线性代数的法则。与之不同，数组运算则是执行逐元素运算并支持多维数组</p>
<p>快速查询：<a href="https://ww2.mathworks.cn/help/matlab/matlab_prog/array-vs-matrix-operations.html?searchHighlight=矩阵运算&s_tid=srchtitle">数组与矩阵运算 - MATLAB &amp; Simulink - MathWorks 中国</a></p>
<h5 id="1-矩阵加法"><a href="#1-矩阵加法" class="headerlink" title="1.矩阵加法"></a>1.矩阵加法</h5><p>由于矩阵运算和数组运算在加法和减法的运算上相同，因此没有必要使用字符组合 <code>.+</code> 和 <code>.-</code>。</p>
<h5 id="2-矩阵数乘"><a href="#2-矩阵数乘" class="headerlink" title="2.矩阵数乘"></a>2.矩阵数乘</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040958630.png" alt="image-20201201103241881"></p>
<h5 id="3-矩阵乘法"><a href="#3-矩阵乘法" class="headerlink" title="3.矩阵乘法"></a>3.矩阵乘法</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040958737.png" alt="image-20201201103558855"></p>
<h5 id="4-数组运算"><a href="#4-数组运算" class="headerlink" title="4.数组运算"></a>4.数组运算</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040958930.png" alt="image-20201201103711838"></p>
<h5 id="5-矩阵运算"><a href="#5-矩阵运算" class="headerlink" title="5.矩阵运算"></a>5.矩阵运算</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040958852.png" alt="image-20201201103757776"></p>
<h4 id="矩阵简单操作"><a href="#矩阵简单操作" class="headerlink" title="矩阵简单操作"></a>矩阵简单操作</h4><p>快速查询：<a href="https://ww2.mathworks.cn/help/matlab/matrices-and-arrays.html?searchHighlight=矩阵&s_tid=srchtitle">矩阵和数组 - MATLAB &amp; Simulink - MathWorks 中国</a></p>
<p>详细总结：<a href="https://www.cnblogs.com/ran_ran/archive/2010/12/11/1903070.html">matlab矩阵的表示和简单操作 - Hello_Word - 博客园 (cnblogs.com)</a></p>
<h5 id="1-矩阵创建"><a href="#1-矩阵创建" class="headerlink" title="1.矩阵创建"></a>1.矩阵创建</h5><p>（1）直接输入法</p>
<p>（2）利用MATLAB函数创建矩阵</p>
<p>​          常用的如下</p>
<ul>
<li>ones()函数：产生全为1的矩阵，ones(n)：产生n<em>n维的全1矩阵，ones(m,n)：产生m</em>n维的全1矩阵；</li>
<li>zeros()函数：产生全为0的矩阵；</li>
<li>rand()函数：产生在（0，1）区间均匀分布的随机阵；</li>
<li>eye()函数：产生单位阵；</li>
<li>randn()函数：产生均值为0，方差为1的标准正态分布随机矩阵。</li>
</ul>
<p>（3）利用运算确定范围</p>
<p>如：产生一个均匀分布在（-5，5）之间的随即矩阵（10×2）</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span> = <span class="title">my</span><span class="params">()</span></span></span><br><span class="line">    A = <span class="number">-5</span> + <span class="number">10</span> * <span class="built_in">rand</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">    A = roundn(A,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="2-矩阵索引"><a href="#2-矩阵索引" class="headerlink" title="2.矩阵索引"></a>2.矩阵索引</h5><p>（1）索引矩阵中一个元素</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># 表示索引A矩阵第i行、第j列的元素</span><br><span class="line">A(<span class="built_in">i</span>,<span class="built_in">j</span>)</span><br></pre></td></tr></table></figure>

<p>（2）遍历一个矩阵中所有元素</p>
<p>一般用例：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = <span class="built_in">randn</span>(<span class="number">3</span>,<span class="number">4</span>)     <span class="comment">% 创建3行4列随机矩阵</span></span><br><span class="line">[r,c] = <span class="built_in">size</span>(A)    <span class="comment">% 读取行r、列c</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:r        <span class="comment">% 建立for循环嵌套</span></span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>:c</span><br><span class="line">        A(<span class="built_in">i</span>,k)     <span class="comment">% 读取矩阵每个位置数据，先行后列</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>find方法（查找非零元素的索引和值）：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># k = find(X) 返回一个包含数组 X 中每个非零元素的线性索引的向量，用length可以统计个数</span><br><span class="line">X = [<span class="number">18</span> <span class="number">3</span> <span class="number">1</span> <span class="number">11</span>; <span class="number">8</span> <span class="number">10</span> <span class="number">11</span> <span class="number">3</span>; <span class="number">9</span> <span class="number">14</span> <span class="number">6</span> <span class="number">1</span>; <span class="number">4</span> <span class="number">3</span> <span class="number">15</span> <span class="number">21</span>]</span><br><span class="line"># 通过find查找矩阵中的所有符合条件的元素，并把其索引组成数组</span><br><span class="line">[row,col] = <span class="built_in">find</span>(X&gt;<span class="number">0</span> &amp; X&lt;<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>实用案例：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># 需要用到两个循环来遍历元素</span><br><span class="line">a = [</span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">-2</span>, <span class="number">8</span>;</span><br><span class="line"><span class="number">3</span>, <span class="number">-4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">-8</span>;</span><br><span class="line"><span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">-1</span>;</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">55</span>, <span class="number">1</span>, <span class="number">-2</span>;</span><br><span class="line">];</span><br><span class="line"># 创建一个空矩阵存储符合条件的元素</span><br><span class="line">b  = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="number">5</span></span><br><span class="line">        <span class="keyword">if</span> a(<span class="built_in">i</span>,<span class="built_in">j</span>) &gt; <span class="number">1</span></span><br><span class="line">        # 矩阵添加元素（子矩阵）的方法</span><br><span class="line">            b = [b a(<span class="built_in">i</span>,<span class="built_in">j</span>)];</span><br><span class="line">        <span class="keyword">end</span>    </span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="built_in">disp</span>(b);</span><br></pre></td></tr></table></figure>



<h5 id="3-矩阵拆分和组合"><a href="#3-矩阵拆分和组合" class="headerlink" title="3.矩阵拆分和组合"></a>3.矩阵拆分和组合</h5><p>（1）组合（串联）</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># 将两个行向量串联起来，形成一个更长的行向量</span><br><span class="line">A = <span class="built_in">ones</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">B = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">C = [A B]</span><br></pre></td></tr></table></figure>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># 将 A 和 B 排列为一个矩阵的两行</span><br><span class="line">D = [A;B]</span><br></pre></td></tr></table></figure>

<p>（2）拆分（取出一个子矩阵）</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">A(:,j) # 表示取A矩阵的第j列全部元素</span><br><span class="line">A(i,:) # 表示A矩阵第i行的全部元素</span><br><span class="line">A(i:i+m,:) # 表示取A矩阵第i~i+m行的全部元素</span><br><span class="line">A(i:i+m,k:k+m) # 表示取A矩阵第i~i+m行内，并在第k~k+m列中的所有元素</span><br></pre></td></tr></table></figure>



<h5 id="4-矩阵的相关计算"><a href="#4-矩阵的相关计算" class="headerlink" title="4.矩阵的相关计算"></a>4.矩阵的相关计算</h5><p>v为矩阵的特征值，d为特征向量</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0.5</span>; <span class="number">1</span>,<span class="number">1</span>,<span class="number">0.25</span>; <span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">2</span>;];</span><br><span class="line">[v,d] = eig(a);</span><br><span class="line"><span class="built_in">disp</span>(v);</span><br><span class="line"><span class="built_in">disp</span>(d);</span><br></pre></td></tr></table></figure>



<h4 id="MATLAB的图形绘制"><a href="#MATLAB的图形绘制" class="headerlink" title="MATLAB的图形绘制"></a>MATLAB的图形绘制</h4><p>快速查询：<a href="https://ww2.mathworks.cn/help/matlab/learn_matlab/basic-plotting-functions.html#responsive_offcanvas">https://ww2.mathworks.cn/help/matlab/learn_matlab/basic-plotting-functions.html#responsive_offcanvas</a></p>
<h5 id="一-绘制一般曲线（二维线图）"><a href="#一-绘制一般曲线（二维线图）" class="headerlink" title="一.绘制一般曲线（二维线图）"></a>一.绘制一般曲线（二维线图）</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># x定周期，通过加减表示无意义点</span><br><span class="line">x = [<span class="number">0</span>:<span class="number">0.01</span>:<span class="built_in">pi</span>/<span class="number">2</span><span class="number">-0.01</span>, <span class="built_in">pi</span>/<span class="number">2</span>+<span class="number">0.01</span>:<span class="number">0.01</span>:(<span class="number">3</span>*<span class="built_in">pi</span>/<span class="number">2</span>)<span class="number">-0.01</span>, (<span class="number">3</span>*<span class="built_in">pi</span>/<span class="number">2</span>)+<span class="number">0.01</span>:<span class="number">0.01</span>:<span class="number">2</span>*<span class="built_in">pi</span>];</span><br><span class="line"># 定义y的函数（此处分别为正割和余割）</span><br><span class="line">y1 = <span class="built_in">sec</span>(x);</span><br><span class="line">y2 = <span class="built_in">csc</span>(x);</span><br><span class="line"></span><br><span class="line"># subplot 命令用于在同一窗口中显示多个绘图，此处表示的意思是将窗口划分为2*1（即上下两幅图），并选择第一处</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"># 绘制图形，r-表示绘制红色点划线</span><br><span class="line"><span class="built_in">plot</span>(x,y1,<span class="string">&#x27;r-.&#x27;</span>)</span><br><span class="line"># 注意要绘制完图形后，才能加上标注</span><br><span class="line">xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;正割公式&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># 选定第二处绘图</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,y2,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;余割公式&#x27;</span>)</span><br><span class="line"># axis设置坐标轴范围，x为0-3，y为0-12</span><br><span class="line">axis([<span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">12</span>]);</span><br></pre></td></tr></table></figure>



<h5 id="二-绘制极坐标曲线"><a href="#二-绘制极坐标曲线" class="headerlink" title="二.绘制极坐标曲线"></a>二.绘制极坐标曲线</h5><p>快速查询：<a href="https://ww2.mathworks.cn/help/matlab/ref/polarplot.html#d122e940353">https://ww2.mathworks.cn/help/matlab/ref/polarplot.html#d122e940353</a></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># theta参数为极坐标曲线的角度值，此处表示从0-2pi</span><br><span class="line">theta = <span class="number">0</span>:<span class="number">0.01</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line"># input输入数据</span><br><span class="line">a = input(<span class="string">&#x27;a=&#x27;</span>);</span><br><span class="line">b = input(<span class="string">&#x27;b=&#x27;</span>);</span><br><span class="line">n = input(<span class="string">&#x27;n=&#x27;</span>);</span><br><span class="line"># rho参数为半径值，即极坐标曲线的ρ</span><br><span class="line">rho = a*<span class="built_in">sin</span>(b+n*theta);</span><br><span class="line"># 生成曲线图，r设定曲线为红色</span><br><span class="line">polarplot(theta,rho,<span class="string">&#x27;r&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h5 id="三-绘制曲面图"><a href="#三-绘制曲面图" class="headerlink" title="三.绘制曲面图"></a>三.绘制曲面图</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># meshgrid(x,y)基于向量 x 和 y 中包含的坐标返回二维网格坐标</span><br><span class="line">[x, y] = <span class="built_in">meshgrid</span>(<span class="number">0</span>: <span class="number">0.1</span>:<span class="number">100</span>);</span><br><span class="line"># 注意在绘图对象函数中，运算一般用点乘，点幂</span><br><span class="line">z = x.^<span class="number">2</span> + y.^<span class="number">2</span> + <span class="built_in">sin</span>(x.*y);</span><br><span class="line"># 绘制等高线</span><br><span class="line">contour(z,<span class="number">2</span>)</span><br><span class="line"># 创建一个三维曲面图</span><br><span class="line">surf(x, y, z)</span><br><span class="line"></span><br><span class="line">[x,y]=<span class="built_in">meshgrid</span>(<span class="number">-4</span>:<span class="number">0.1</span>:<span class="number">4</span>);</span><br><span class="line">z = x.^<span class="number">2</span> + y.^<span class="number">2</span>;</span><br><span class="line"># 创建一个网格图，该网格图为三维曲面</span><br><span class="line">mesh(x, y, z);</span><br><span class="line"># 设置当前颜色图（有一些预设的方案提供）</span><br><span class="line">colormap(hot)</span><br></pre></td></tr></table></figure>



<h4 id="matlab程序设计"><a href="#matlab程序设计" class="headerlink" title="matlab程序设计"></a>matlab程序设计</h4><h5 id="1-if-else"><a href="#1-if-else" class="headerlink" title="1.if-else"></a>1.if-else</h5><p>编写求解方程根的函数</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a = input(<span class="string">&#x27;a值：&#x27;</span>);</span><br><span class="line">b = input(<span class="string">&#x27;b值：&#x27;</span>);</span><br><span class="line">c = input(<span class="string">&#x27;c值：&#x27;</span>);</span><br><span class="line">t = b^<span class="number">2</span> - <span class="number">4</span>*a*c;</span><br><span class="line"></span><br><span class="line"># 通过条件判断分流</span><br><span class="line"># 每个if要用一个end结束</span><br><span class="line"><span class="keyword">if</span> a==<span class="number">0</span> &amp;&amp; b==<span class="number">0</span></span><br><span class="line">       <span class="built_in">disp</span>(<span class="string">&#x27;为恒不等式&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elseif</span> a==<span class="number">0</span></span><br><span class="line">       x = -c/b;</span><br><span class="line">       <span class="built_in">disp</span>(x)    </span><br><span class="line"><span class="keyword">else</span>        </span><br><span class="line">    <span class="keyword">if</span> t&lt;<span class="number">0</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;该方程无解&#x27;</span>)</span><br><span class="line">    <span class="keyword">elseif</span> t==<span class="number">0</span></span><br><span class="line">        x = -b/<span class="number">2</span>*a;</span><br><span class="line">        fprintf(<span class="string">&#x27;x1=x2=%d&#x27;</span>,x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        x1 = (-b+<span class="built_in">sqrt</span>(t))/<span class="number">2</span>*a;</span><br><span class="line">        x2 = (-b-<span class="built_in">sqrt</span>(t))/<span class="number">2</span>*a;</span><br><span class="line">        fprintf(<span class="string">&#x27;x1=%d\nx2=%d&#x27;</span>,x1,x2);</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line">       </span><br><span class="line"><span class="keyword">end</span> </span><br></pre></td></tr></table></figure>



<h5 id="2-switch"><a href="#2-switch" class="headerlink" title="2.switch"></a>2.switch</h5><p>输入一个百分制成绩，要求输出成绩等级</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 取整分级</span></span><br><span class="line">sorce = input(<span class="string">&#x27;请输入你的成绩：&#x27;</span>);</span><br><span class="line">level = <span class="built_in">floor</span>(sorce/<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sorce&gt;<span class="number">100</span> || sorce &lt;<span class="number">0</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span>    </span><br><span class="line"></span><br><span class="line"># matlab的switch不用break结束</span><br><span class="line"><span class="keyword">switch</span> level</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;A+&#x27;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;B&#x27;</span>)    </span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;C&#x27;</span>) </span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">    <span class="keyword">otherwise</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span>        </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a>3.for循环</h5><p>利用for循环语句编写计算n!的函数程序</p>
<p>累加法时定义初始数为0</p>
<p>累积法时定义初始数为1</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[res]</span> = <span class="title">work43</span><span class="params">(n)</span></span></span><br><span class="line">    res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> n&lt;<span class="number">0</span></span><br><span class="line">        res=<span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">    <span class="keyword">elseif</span> n == <span class="number">0</span></span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">        res = res*<span class="built_in">i</span>; </span><br><span class="line">        <span class="keyword">end</span>   </span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<h5 id="4-构建Fibonacci数组"><a href="#4-构建Fibonacci数组" class="headerlink" title="4.构建Fibonacci数组"></a>4.构建Fibonacci数组</h5><p>matlab的数组可以自动拓宽</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a(<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">a(<span class="number">2</span>) = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> a(k) &lt; <span class="number">10000</span></span><br><span class="line">    a(k+<span class="number">2</span>) = a(k) + a(k+<span class="number">1</span>);</span><br><span class="line">    k = k + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(a(k))</span><br></pre></td></tr></table></figure>



<h4 id="SIMULINK仿真"><a href="#SIMULINK仿真" class="headerlink" title="SIMULINK仿真"></a>SIMULINK仿真</h4><p>快速入门：<a href="https://ww2.mathworks.cn/help/simulink/getting-started-with-simulink.html">https://ww2.mathworks.cn/help/simulink/getting-started-with-simulink.html</a></p>
<p>快速查询常用模块：<a href="https://www.cnblogs.com/dingdangsunny/p/12235689.html#_label1_2">https://www.cnblogs.com/dingdangsunny/p/12235689.html#_label1_2</a></p>
<p>一.simulink表示微分方程</p>
<p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20201214215652329.png" alt="image-20201214215652329"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040958323.png" alt="image-20201214221002667"></p>
<ul>
<li>Step：跃迁信号</li>
<li>Gain：支持标量、向量或矩阵形式的增益。（可以看作是高级的乘法）</li>
<li>Add：加法模块（sum模块也很常用）</li>
<li>Integrator：积分模块</li>
<li>Scope：示波器</li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>开发工具</tag>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言|算法入门指南</title>
    <url>/2021/02/03/CLanguage/C%E8%AF%AD%E8%A8%80-%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040904904.png" alt="image-20210210110218935"></p>
<span id="more"></span>



<h2 id="时间复杂度（Time-complexity）"><a href="#时间复杂度（Time-complexity）" class="headerlink" title="时间复杂度（Time complexity）"></a>时间复杂度（Time complexity）</h2><h3 id="1-一个例子"><a href="#1-一个例子" class="headerlink" title="1.一个例子"></a>1.一个例子</h3><p>情景：在一个有100个学生的教室里，仅有一名学生没过英语四级，我们要找到这名学生</p>
<ul>
<li>方法一：问每一个学生是否有过四级，时间复杂度为<strong>O(n)</strong></li>
<li>方法二：问每一个学生两个问题：1.是否有过四级 2.其他99个人过四级的情况，时间复杂度为<strong>O(n2)</strong></li>
<li>方法三：将100人分成两组，然后问没过四级的是在第一组还是在第二组，然后将该小组又分成两部分，再次询问，以此类推，直到最后找到没过四级的那个学生，时间复杂度为<strong>O(log n)</strong></li>
</ul>
<p>如果只有一个学生知道笔隐藏在哪个学生上，我可能需要进行O（n2）搜索。如果一个学生拿着笔，只有他们自己知道，我会使用O（n）。如果所有学生都知道，我会使用O（log n）搜索，但是只会告诉我是否猜对了。</p>
<h3 id="2-时间复杂度的含义"><a href="#2-时间复杂度的含义" class="headerlink" title="2.时间复杂度的含义"></a>2.时间复杂度的含义</h3><p>时间复杂度并不等于程序执行时间，我们没有考虑执行代码中每个语句所需的实际时间，而是考虑每个语句执行多少次</p>
<h3 id="3-时间复杂度图示"><a href="#3-时间复杂度图示" class="headerlink" title="3.时间复杂度图示"></a>3.时间复杂度图示</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040903611.png" alt="image-20210210104634026"></p>
<h3 id="4-时间复杂度计算方法"><a href="#4-时间复杂度计算方法" class="headerlink" title="4.时间复杂度计算方法"></a>4.时间复杂度计算方法</h3><ul>
<li>将算法/功能分解为单独的操作</li>
<li>计算每个操作的复杂度</li>
<li>将每个操作的复杂度加起来</li>
<li>删除常量</li>
<li>找到最高阶项-这就是我们认为算法/函数的复杂度</li>
</ul>
<h2 id="经典算法一览"><a href="#经典算法一览" class="headerlink" title="经典算法一览"></a>经典算法一览</h2><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040904904.png" alt="image-20210210110218935"></p>
<h2 id="辗转相除法（Euclidean-algorithm）"><a href="#辗转相除法（Euclidean-algorithm）" class="headerlink" title="辗转相除法（Euclidean algorithm）"></a>辗转相除法（Euclidean algorithm）</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><ul>
<li>辗转相除法又称为欧几里得算法，常用于求解最大公约数</li>
<li>算法原理：若a除以b的余数为r , 则有 gcd(a , b) = gcd( b ,r )</li>
<li>算法思路：大数除于小数得余数，该余数再与小数重复上面步骤，直到最后得小数为0，这时大数即为最大公约数</li>
</ul>
<h3 id="2-基本案例"><a href="#2-基本案例" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用递归函数辗转相除返回最大公约数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(a == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> b;		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> gcd(b%a, a);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果展示 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>; </span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">15</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;GCD(%d, %d)=%d\n&quot;</span>, a, b, gcd(a,b));</span><br><span class="line">	</span><br><span class="line">	a = <span class="number">35</span>; </span><br><span class="line">	b = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;GCD(%d, %d)=%d\n&quot;</span>, a, b, gcd(a,b));</span><br><span class="line">	</span><br><span class="line">	a = <span class="number">31</span>; </span><br><span class="line">	b = <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;GCD(%d, %d)=%d\n&quot;</span>, a, b, gcd(a,b));	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>语法解析：</p>
<ul>
<li><code>b%a</code>即b除以a后的余数，当b&lt;a时，返回b，所以在以上程序中，我们不需要比较a，b大小，比如gcd(35,10) ,经过<code>b%a</code>会变成gcd(10,35)</li>
<li>递归是一种特殊的循环，其停止的信号是<code>return</code>语句</li>
<li>以上程序的时间复杂度是：O(Log min(a, b))  </li>
</ul>
<h3 id="3-扩展案例"><a href="#3-扩展案例" class="headerlink" title="3.扩展案例"></a>3.扩展案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// gcd扩展版，不仅可以得到最大公约数，还可以找到整数系数x和y</span></span><br><span class="line"><span class="comment">// ax + by = gcd(a, b) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcdExtended</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line">		*x = <span class="number">0</span>;</span><br><span class="line">		*y = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> b;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// x1,y1存储递归调用的结果</span></span><br><span class="line">	<span class="keyword">int</span> x1,y1;</span><br><span class="line">	<span class="keyword">int</span> gcd = gcdExtended(b%a, a, &amp;x1, &amp;y1);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 更新x,y值 </span></span><br><span class="line">	*x = y1 - (b/a) * x1;</span><br><span class="line">	*y = x1;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> gcd; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示结果</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> x, y;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">35</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">15</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> g = gcdExtended(a, b, &amp;x, &amp;y);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a*%d + b*%d = %d &quot;</span>, x, y, g);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>语法解析：</p>
<ul>
<li>以上程序目的是为了计算：  <code>ax + by = gcd(a, b)</code> 中的x，y</li>
<li>本程序使用了指针，可以在另一个函数中修改主函数的值，避免变量作用域的问题。在主函数内，可以通过<code>&amp;x,&amp;y</code>将x，y的地址传给其他函数，其他函数定义指针<code>int *x, int *y</code>存储地址，然后再用<code>*x,*y</code>读取地址中存的值即可修改主函数中的变量</li>
<li><code>int gcd = gcdExtended(b%a, a, &amp;x1, &amp;y1);</code>使程序反复执行其上面的语句，直至a==0,这时可以得到gcd,和x1=0，y1=1的初始值。然后再开始与以上执行方向相反执行其下面的语句。最后<code>return gcd</code>实际上在第二部分的循环中，值不变</li>
<li>主函数执行时，<code>gcdExtended</code>中的地址是主函数<code>x，y</code>的地址，而递归函数中的地址是<code>x1，y1</code>的地址;<code>x1,y1</code>存储的是上一个循环中的<code>*x，*y</code></li>
</ul>
<h2 id="埃拉托斯特尼筛法（sieve-of-Eratosthenes）"><a href="#埃拉托斯特尼筛法（sieve-of-Eratosthenes）" class="headerlink" title="埃拉托斯特尼筛法（sieve of Eratosthenes）"></a>埃拉托斯特尼筛法（sieve of Eratosthenes）</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>埃拉托斯特尼筛法是一种常用的素数筛法，可以筛选一定范围自然数内的质数（Prime numbers），时间复杂度：O(<em>n</em> log log <em>n</em>)</p>
<p>埃拉托斯特尼筛法演示动画（摘自维基百科）</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif" alt="img"></p>
<h3 id="2-实现步骤"><a href="#2-实现步骤" class="headerlink" title="2.实现步骤"></a>2.实现步骤</h3><p>该筛法的基本步骤案例，筛选2-50范围内的素数</p>
<p>（1）创建2-50所有数字的列表</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040904338.png" alt="image-20210214200912413"></p>
<p>（2）标记所有<strong>2的倍数</strong>且<strong>大于或等于其平方（即4）</strong>的数字</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040904399.png" alt="image-20210214200920690"></p>
<p>（3）标记所有<strong>3的倍数</strong>且<strong>大于或等于其平方（即9）</strong>的数字</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040904633.png" alt="image-20210214202117142"></p>
<p>（4）标记所有<strong>5的倍数</strong>且<strong>大于或等于其平方（即25）</strong>的数字</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040904951.png" alt="image-20210214202159136"></p>
<p>（5）标记所有<strong>7的倍数</strong>且<strong>大于或等于其平方（即49）</strong>的数字</p>
<p>​    查无数字，则跳过这一步</p>
<p>（6）去掉列表中标记的数字，剩下的未被标记数字即为素数：2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47.</p>
<h3 id="3-基本案例"><a href="#3-基本案例" class="headerlink" title="3.基本案例"></a>3.基本案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 筛选素数函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">SieveOfEratosthenes</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 创建标识数组</span></span><br><span class="line">	<span class="keyword">bool</span> primes[n+<span class="number">1</span>]; </span><br><span class="line">	<span class="comment">// 标识数组默认填入true,用索引当作自然数 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i&lt;=n; i++) &#123;</span><br><span class="line">		</span><br><span class="line">		primes[i] = <span class="literal">true</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 开始标记非质数（即标记p的倍数且大于或等于其平方的数字） </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">2</span>; p*p&lt;=n; p++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(primes[p] == <span class="literal">true</span>)&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=p*p; i&lt;=n; i+=p)&#123;</span><br><span class="line">				primes[i] = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 打印出所有素数</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">2</span>; p&lt;=n; p++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(primes[p])&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入筛选范围:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	SieveOfEratosthenes(n); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">	</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h2 id="线性查找（Linear-search）"><a href="#线性查找（Linear-search）" class="headerlink" title="线性查找（Linear search）"></a>线性查找（Linear search）</h2><h3 id="1-基本概念-2"><a href="#1-基本概念-2" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>线性查找时间复杂度为：O(n)</p>
<p>线性查找的步骤如下：</p>
<ul>
<li>从arr []的最左边元素开始，然后将x与arr []的每个元素一一比较</li>
<li>如果x与元素匹配，则返回索引。</li>
<li>如果x与任何元素都不匹配，则返回-1。</li>
</ul>
<p>线性查找示意图如下：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040904177.gif" alt="img"></p>
<h3 id="2-基本案例-1"><a href="#2-基本案例-1" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线性查找函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 逐个遍历查找，n为数组长度 ，x为查找对象 </span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(arr[i]==x)&#123;</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 目标数组 </span></span><br><span class="line">	<span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 查找目标</span></span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 测量数组大小</span></span><br><span class="line">	<span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 查找过程</span></span><br><span class="line">	<span class="keyword">int</span> result = search(arr, n, x);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	(result==<span class="number">-1</span>)? <span class="built_in">printf</span>(<span class="string">&quot;目标不存在&quot;</span>):<span class="built_in">printf</span>(<span class="string">&quot;目标所在索引为%d&quot;</span>, result);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>





<h2 id="二分查找（Binary-Search）"><a href="#二分查找（Binary-Search）" class="headerlink" title="二分查找（Binary Search）"></a>二分查找（Binary Search）</h2><h3 id="1-基本概念-3"><a href="#1-基本概念-3" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>二分查找的对象是从小到大的数组，其时间复杂度可以写作：O(Log n)</p>
<p>二分查找步骤：</p>
<ul>
<li>将x与中间元素比较</li>
<li>如果x与中间元素匹配，则返回中间索引</li>
<li>否则如果x大于中间元素则取中间元素后右半边数组重复操作</li>
<li>否则如果x小于中间元素则取中间元素后左半边数组重复操作</li>
</ul>
<p>二分查找示意图：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040905289.gif" alt="“Binary Search”"></p>
<h3 id="2-基本案例-2"><a href="#2-基本案例-2" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="comment">// 递归法二分查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(r &gt;= l)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 求中间元素</span></span><br><span class="line">		<span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>; </span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 情况1：如果目标与中间元素匹配 </span></span><br><span class="line">		<span class="keyword">if</span>(arr[mid] == x)&#123;</span><br><span class="line">			<span class="keyword">return</span> mid;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 情况2:如果目标小于中间元素</span></span><br><span class="line">		<span class="keyword">if</span>(arr[mid] &gt; x)&#123;</span><br><span class="line">			<span class="comment">// 返回以中间-1为右的递归 </span></span><br><span class="line">			<span class="keyword">return</span> binarySearch(arr, l, mid<span class="number">-1</span>, x);</span><br><span class="line">		&#125; </span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 情况3：如果目标大于中间元素</span></span><br><span class="line">		<span class="comment">// 返回以中间+1为左的递归 </span></span><br><span class="line">		<span class="keyword">return</span> binarySearch(arr, mid + <span class="number">1</span>, r, x);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 查无结果</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 目标数组 </span></span><br><span class="line">	<span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 查找目标</span></span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 测量数组大小</span></span><br><span class="line">	<span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 查找过程,定左右 </span></span><br><span class="line">	<span class="keyword">int</span> result =  binarySearch(arr, <span class="number">0</span>, n - <span class="number">1</span>, x);</span><br><span class="line">	</span><br><span class="line">	(result==<span class="number">-1</span>) ? <span class="built_in">printf</span>(<span class="string">&quot;目标不存在&quot;</span>) : <span class="built_in">printf</span>(<span class="string">&quot;目标所在索引为%d&quot;</span>, result);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">		</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h2 id="哈希表（Hash-table）"><a href="#哈希表（Hash-table）" class="headerlink" title="哈希表（Hash table）"></a>哈希表（Hash table）</h2><h3 id="1-基本概念-4"><a href="#1-基本概念-4" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>哈希表是一种<strong>数据结构</strong>，其以键值对的形式表示数据。每一个键都映射哈希表中的一个值（与关联数组类似）</p>
<p>在哈希表中，对键进行处理以生成映射到所需元素的新索引。此过程称为hashing。</p>
<p>哈希表是存储和检索元素的有效方法，所以其也是一种有效的<strong>查找算法</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040905182.png" alt="“hashing”示意图"></p>
<h3 id="2-实现步骤-1"><a href="#2-实现步骤-1" class="headerlink" title="2.实现步骤"></a>2.实现步骤</h3><p>（1）哈希表初始化</p>
<p>​    在将元素插入数组前，将数组默认值设为-1（-1表示元素不存    在或特定的索引可以插入）</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040905313.png" alt="image-20210215110519122"></p>
<p>（2）插入元素</p>
<p>​    哈希表插入元素的经典算法是：<code>key =  element % size</code> （key即数据插入位置，element即元素，size即数组大小）</p>
<p>​    如插入数字24</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040905850.png" alt="image-20210215111157606"></p>
<p>（3）搜索元素</p>
<p>搜索元素和插入元素使用同一算法获得索引（key），再按索引查找对应元素</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040906618.png" alt="image-20210215111443960"></p>
<p>（4）删除元素</p>
<p>在哈希表中删除元素并不是指将数组中的元素移除，而是将元素的值初始化为-1</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040906635.png" alt="image-20210215111738024"></p>
<h3 id="3-基本案例-1"><a href="#3-基本案例-1" class="headerlink" title="3.基本案例"></a>3.基本案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> size 7 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建数组作为基本结构</span></span><br><span class="line"><span class="keyword">int</span> arr[size]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表初始化，将所有元素赋值为-1 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">		arr[i] = <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> key = value % size;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(arr[key] == <span class="number">-1</span>)&#123;	</span><br><span class="line">		arr[key] = value;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d 插入到 arr[%d]\n&quot;</span>, value, key);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;该位置存在冲突&quot;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> key = value % size;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(arr[key] == value)&#123;</span><br><span class="line">		arr[key] = <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;该值不存在&quot;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span> <span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> key = value % size;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(arr[key] == value)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;查有此项&quot;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;查无此项&quot;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印出所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;arr[%d] = %d\n&quot;</span>, i, arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">// 初始化哈希表 </span></span><br><span class="line">	init();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 填充哈希表  </span></span><br><span class="line">	insert(<span class="number">10</span>);</span><br><span class="line">	insert(<span class="number">4</span>);</span><br><span class="line">	insert(<span class="number">2</span>);</span><br><span class="line">	insert(<span class="number">5</span>); </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 打印哈希表</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	print(); </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 删除测试</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	del(<span class="number">5</span>); </span><br><span class="line">	print();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 查询测试</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	search(<span class="number">4</span>); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h3 id="4-哈希冲突（collision）"><a href="#4-哈希冲突（collision）" class="headerlink" title="4.哈希冲突（collision）"></a>4.哈希冲突（collision）</h3><p>如果存在插入元素算法得到得索引相同，会出现哈希冲突的情况</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040906057.png" alt="image-20210215151206845"></p>
<p>以下介绍几种避免哈希冲突的方法</p>
<h3 id="5-线性探测-Linear-Probing"><a href="#5-线性探测-Linear-Probing" class="headerlink" title="5.线性探测(Linear Probing)"></a>5.线性探测(Linear Probing)</h3><p>（1）方法简介：通过<code>key = element % size</code>计算索引，如果该索引为空则直接填入，如果产生了冲突就检查下一个索引即<code>key = (key+1) % size</code>，重复执行该过程直到找到空间</p>
<p>（2）方法示意图</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040906001.png" alt="image-20210215153740661"></p>
<p>空间不足的情况：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040906542.png" alt="image-20210215154203024"></p>
<h3 id="6-单独链表法（separate-chaining）"><a href="#6-单独链表法（separate-chaining）" class="headerlink" title="6.单独链表法（separate chaining）"></a>6.单独链表法（separate chaining）</h3><p>（1）方法简介</p>
<p>单独链表法又被称为开放式哈希表（Open hashing），它采用数据结构中的链表（linked list）来解决哈希冲突的问题，这样的哈希表永远也不会被填满</p>
<p>这种方法使哈希表的每个单元指向具有相同索引值的链表</p>
<p>（2）方法示意图</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040906224.png" alt="image-20210215160449318"></p>
<p>（3）使用案例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> size 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链表节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	<span class="comment">// 存储该节点内容 </span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//  存储下一个节点的地址 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建单独链表（每一个哈希表的索引一条链表）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">chain</span>[<span class="title">size</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表初始化，每一列填入NULL </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">		chain[i] = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表中插入元素 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">	<span class="comment">// 创造新节点存储数据</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">newNode</span> =</span> (struct node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">	newNode-&gt;data = value;</span><br><span class="line">	newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 计算索引（hash key）</span></span><br><span class="line">	<span class="keyword">int</span> key = value % size;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 检查单独链表是否为空</span></span><br><span class="line">	<span class="comment">// 为空则填入新节点 </span></span><br><span class="line">	<span class="keyword">if</span>(chain[key] == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		chain[key] = newNode;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="comment">// 不为空即产生了哈希冲突 </span></span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">// 需要在已有的末端节点后添加新节点</span></span><br><span class="line">		<span class="comment">// 获得指定索引的链表 </span></span><br><span class="line">		struct node *temp = chain[key];</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 遍历链表得到末端节点 </span></span><br><span class="line">		<span class="keyword">while</span>(temp-&gt;next)&#123;</span><br><span class="line">			temp = temp-&gt;next; </span><br><span class="line">		&#125; </span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 在末尾连接上新节点 </span></span><br><span class="line">		temp-&gt;next = newNode; </span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表中搜索元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> key = value % size;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> chain[key];</span><br><span class="line">	<span class="comment">// 遍历链表寻找元素 </span></span><br><span class="line">	<span class="keyword">while</span>(temp)&#123;</span><br><span class="line">		<span class="keyword">if</span>(temp-&gt;data == value)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表中删除元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> key = value % size;</span><br><span class="line">	<span class="comment">// 存储头部节点 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> chain[key],*dealloc;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(temp != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="comment">// 如果需要删除的元素在头部 </span></span><br><span class="line">		<span class="keyword">if</span>(temp-&gt;data == value)&#123;</span><br><span class="line">			dealloc = temp;</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">			<span class="built_in">free</span>(dealloc);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// 遍历链表寻找需要删除的元素 </span></span><br><span class="line">			<span class="keyword">while</span>(temp-&gt;next)&#123;</span><br><span class="line">				<span class="keyword">if</span>(temp-&gt;next-&gt;data == value)&#123;</span><br><span class="line">					dealloc = temp-&gt;next;</span><br><span class="line">					temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">					<span class="built_in">free</span>(dealloc);</span><br><span class="line">					<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">				&#125;</span><br><span class="line">				temp = temp-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印哈希表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> chain[i];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;chain[%d]--&gt;&quot;</span>,i);</span><br><span class="line">			</span><br><span class="line">		<span class="comment">// 打印链表	</span></span><br><span class="line">		<span class="keyword">while</span>(temp)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d--&gt;&quot;</span>, temp-&gt;data);</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> 	<span class="comment">// 初始化哈希表</span></span><br><span class="line">	init();</span><br><span class="line">	 </span><br><span class="line">	<span class="comment">// 填充数据</span></span><br><span class="line">    insert(<span class="number">7</span>);</span><br><span class="line">    insert(<span class="number">0</span>);</span><br><span class="line">    insert(<span class="number">3</span>);</span><br><span class="line">    insert(<span class="number">10</span>);</span><br><span class="line">    insert(<span class="number">4</span>);</span><br><span class="line">    insert(<span class="number">5</span>);  </span><br><span class="line"> 	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> 	print(); </span><br><span class="line"> 	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="comment">// 删除测试</span></span><br><span class="line">	<span class="keyword">if</span>(del(<span class="number">10</span>))&#123;</span><br><span class="line">		print(); </span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;删除项不存在&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"> 	</span><br><span class="line"> 	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><h3 id="1-基本概念-5"><a href="#1-基本概念-5" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>（1）冒泡排序通过重复交换错误顺序的两个数来工作</p>
<p>（2）冒泡排序步骤：</p>
<ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ul>
<p>（3）冒泡排序示意图:</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040906428.gif" alt="“Bubble Sort gif”的图片搜索结果"></p>
<h3 id="2-基本案例-3"><a href="#2-基本案例-3" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换数字函数(此处的参数为地址，可以直接修改主函数中的值)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *xp, <span class="keyword">int</span> *yp)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *xp;</span><br><span class="line">	*xp = *yp;</span><br><span class="line">	*yp = temp;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒泡函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j;</span><br><span class="line">	<span class="comment">// 从头开始的次数 </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123; </span><br><span class="line">	    <span class="comment">// 移动读取数组相邻两个数 </span></span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n-i<span class="number">-1</span>; j++)&#123;</span><br><span class="line">			<span class="comment">// 符合条件，交换数值 </span></span><br><span class="line">			<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">				swap(&amp;arr[j], &amp;arr[j+<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印数组函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAarry</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> arr[] = &#123;<span class="number">64</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">90</span>&#125;; </span><br><span class="line">	<span class="comment">// 计算数组大小 </span></span><br><span class="line">	<span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">	<span class="comment">// 冒泡处理 </span></span><br><span class="line">	bubbleSort(arr, n);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;排序后的数组：\n&quot;</span>);</span><br><span class="line">	printAarry(arr, n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h2 id="快速排序（Quick-sort）"><a href="#快速排序（Quick-sort）" class="headerlink" title="快速排序（Quick sort）"></a>快速排序（Quick sort）</h2><p>参考文章：<a href="https://juejin.cn/post/6844904122538278920">https://juejin.cn/post/6844904122538278920</a></p>
<h3 id="1-基本概念-6"><a href="#1-基本概念-6" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>（1）快速排序是一种分而治之的算法，它会一个元素为枢纽键对数组进行分区，枢纽有以下几种选择，本文以最简单的最后一个元素为枢纽为例</p>
<ul>
<li>始终选择第一个元素作为枢轴</li>
<li>始终选择最后一个元素作为枢轴</li>
<li>选择一个随机元素作为枢轴。</li>
<li>选择中位数作为枢轴</li>
</ul>
<p>（2）实现步骤</p>
<ul>
<li>在给定数组中确定一个元素x作为枢纽</li>
<li>将x放在排序数组中的正确位置</li>
<li>将小于x的元素放在x之前</li>
<li>将大于x的元素放在x之后</li>
<li>去掉枢纽分成两组后重复以上操作</li>
</ul>
<p>以末尾元素为枢纽排序示意图</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040906440.png" alt="image-20210226194704522"></p>
<p>​    （3）将小于x的元素放在x之前，将大于x的元素放在x之后这一步是将一个数组分成两个数组，其运用到了分而治之的思想</p>
<ul>
<li><p>将一个数组分成两个数组的方法为：<br>先从数组右边找到一个比枢轴元素小的元素，将数组的第一个位置赋值为该元素；</p>
</li>
<li><p>再从数组的左边找到一个比枢轴元素大的元素，将从上面取元素的位置赋值为该值；</p>
</li>
<li><p>依次进行，直到左右相遇，把枢轴元素赋值到相遇位置。</p>
<p>示意图如下：</p>
</li>
</ul>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/13/17171276e5f8bb49?imageslim" alt="第一轮排序动态过程"></p>
<h3 id="2-基本案例-4"><a href="#2-基本案例-4" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><p>基本案例中也运用了分而治之的方法，当操作步骤与上面步骤相异但是效果相同</p>
<ul>
<li>选择最后一个元素作为枢纽</li>
<li>从数组左端开始遍历一个数组，先设最左端元素为待交换元素。当遇到比枢纽值小的元素，就将其与待交换元素值相交换，并把下个元素设为待交换元素</li>
<li>完成遍历后，最后交换末尾元素与待交换元素，并返回待交换元素的索引</li>
<li>依据返回的索引将数组分成了两组：左边比枢纽元素小，右边比枢纽元素大</li>
<li>最后再递归分开处理左边数组和右边数组</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>*, <span class="keyword">int</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组大小\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arr[n];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;填入数组数据\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line"></span><br><span class="line">    quickSort(arr,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;快速排序后的数组\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &lt; end)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pIndex = partition(arr, start, end);</span><br><span class="line">        quickSort(arr, start, pIndex<span class="number">-1</span>);</span><br><span class="line">        quickSort(arr, pIndex+<span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pIndex = start;</span><br><span class="line">    <span class="keyword">int</span> pivot = arr[end];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = start; i &lt; end; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; pivot)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(&amp;arr[i], &amp;arr[pIndex]);</span><br><span class="line">            pIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(&amp;arr[end], &amp;arr[pIndex]);</span><br><span class="line">    <span class="keyword">return</span> pIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>算法</tag>
        <tag>入门教程</tag>
      </tags>
  </entry>
  <entry>
    <title>开发原理|深入理解浏览器工作原理</title>
    <url>/2021/10/07/DevPrinciple/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110131222149.webp" alt="Internet Explorer"></p>
<p>浏览器笑话90%都和IE有关，没了IE的浏览器世界总归是少很多乐趣😭</p>
<span id="more"></span>



<h3 id="浏览器架构"><a href="#浏览器架构" class="headerlink" title="浏览器架构"></a>浏览器架构</h3><p>参考资料：<a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#disqus_thread">现代网络浏览器幕后揭秘</a></p>
<h4 id="1-浏览器分层结构"><a href="#1-浏览器分层结构" class="headerlink" title="1.浏览器分层结构"></a>1.浏览器分层结构</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110061003492.png" alt="image-20211006094545491"></p>
<ul>
<li>User Interface（用户界面）：包括工具栏，地址栏，前进后退按钮，书签等（用户界面还可以与桌面环境集成，以提供浏览器会话管理或与其他桌面应用程序的通信）</li>
<li>Brower Engine（浏览器引擎）：在用户界面和渲染引擎之间传送指令</li>
<li>Rendering Engine（渲染引擎）：负责显示请求的内容（解析HTML和CSS渲染在页面上）</li>
<li>Networking（网络）：用于网络调用如HTTP请求（其接口与平台无关，并为所有平台提供底层实现）</li>
<li>JavaScript Interpreter（JavaScript解释器）：用于接解释和执行JavaScript代码</li>
<li>XML Parser（XML 解析器）：将XML文档解析成文档对象模型树（DOM）</li>
<li>Display Backend（用户界面后端）：用于绘制基本的窗口小部件，比如组合框和窗口（其接口与平台无关，底层使用了操作系统的用户界面方法）</li>
<li>Data Persistence（数据持久化）：浏览器内数据库，将各种数据保存在硬盘上（如书签，工具栏，Cookie，缓存等）</li>
</ul>
<h4 id="2-浏览器进程架构"><a href="#2-浏览器进程架构" class="headerlink" title="2.浏览器进程架构"></a>2.浏览器进程架构</h4><p>参考资料：<a href="https://segmentfault.com/a/1190000022633988">浏览器工作原理</a></p>
<h5 id="（1）浏览器多进程"><a href="#（1）浏览器多进程" class="headerlink" title="（1）浏览器多进程"></a>（1）浏览器多进程</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110061103852.png" alt="image-20211006110300456"></p>
<p>单进程的浏览器需要处理的事情过多，极度不稳定和安全——如果多个页面共享一个进程，单某个tab页崩溃，将导致同进程中的其他页面也会崩溃，影响用户体验</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202110061104938.png" alt="image-20211006110439788" style="zoom:67%;">

<p>现代浏览器更多采用多进程架构，进程之间不会共享资源和地址空间，所以不会存在太多安全问题，当然，多进程相对于单进程而言，内存等资源的消耗更大</p>
<h5 id="（2）浏览器主要进程"><a href="#（2）浏览器主要进程" class="headerlink" title="（2）浏览器主要进程"></a>（2）浏览器主要进程</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110061035469.png" alt="img"></p>
<ul>
<li>浏览器进程 (Browser Process)：浏览器主进程（无论打开几个tab，几个弹窗浏览器进程只有一个），负责浏览器的TAB的前进、后退、地址栏、书签栏的工作和处理浏览器的一些不可见的底层操作，比如网络请求和文件访问</li>
<li>渲染进程 (Renderer Process)：浏览器渲染进程（Render 进程），即通常说的浏览器内核，负责一个Tab内的显示相关的工作（页面渲染、脚本执行、事件处理），每个 tab 页的打开都会创建一个 Render 进程，并且互不影响</li>
<li>插件进程 (Plugin Process)：负责控制网页使用到的插件（每种类型的插件对应一个进程，仅当使用该插件时才创建）</li>
<li>GPU进程 (GPU Process)：负责处理整个应用程序的GPU任务（网页、Chrome 的 UI 界面都选择采用 GPU 来绘制）</li>
<li>网络进程（Network Process）：主要负责页面的网络资源加载（在以前的架构中是整合进浏览器进程中作为一个线程，本文的后续内容会将网络这一部分视作线程）</li>
</ul>
<h5 id="（3）进程模式"><a href="#（3）进程模式" class="headerlink" title="（3）进程模式"></a>（3）进程模式</h5><p>浏览器不同的进程模式会对tab进程做不同的处理：</p>
<ul>
<li><strong>Process-per-site *<em>：同一个 *</em>site</strong> 使用一个进程（site即相同注册域名，比如a.baidu.com和b.baidu.com就可以理解为同一个 site）</li>
<li><strong>Process-per-site-instance</strong> (default) ：同一个 <strong>site-instance</strong> 使用一个进程（site-instance即来自同一站点的连接页面，满足<strong>site</strong>的连接且通过a标签或js代码打开的新页面）</li>
<li>*<em>Process-per-tab *</em>： 每个 tab 使用一个进程</li>
<li>*<em>Single process *</em> ：所有 tab 共用一个进程</li>
</ul>
<h5 id="（4）进程间关系"><a href="#（4）进程间关系" class="headerlink" title="（4）进程间关系"></a>（4）进程间关系</h5><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110061104938.png" alt="image-20211006110439788" style="zoom:67%;">

<ul>
<li>用户在浏览器地址栏输入url，并按下Enter</li>
<li><strong>浏览器进程</strong>向URL发送请求，获取这个URL的HTML内容并交给<strong>渲染进程</strong></li>
<li><strong>渲染进程</strong>解析HTML内容，解析遇到网络资源再返回来交给<strong>浏览器进程</strong>进行加载；</li>
<li><strong>渲染进程</strong>同时还通知<strong>浏览器进程</strong>去启动<strong>插件进程</strong>，执行插件代码</li>
<li>解析完成后，<strong>渲染进程</strong>将计算得到的数据帧交给<strong>GPU进程</strong>，<strong>GPU进程</strong>将其转换为图像显示到屏幕上</li>
</ul>
<h3 id="浏览器工作流程"><a href="#浏览器工作流程" class="headerlink" title="浏览器工作流程"></a>浏览器工作流程</h3><p>从我们再浏览器键入一个URL地址，到最后网页呈现在浏览器上，经过了那些过程？</p>
<h4 id="1-浏览器页面加载"><a href="#1-浏览器页面加载" class="headerlink" title="1.浏览器页面加载"></a>1.浏览器页面加载</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110070837877.png" alt="image-20211007083755446"></p>
<p>浏览器进程针对工作的不同有以下的工作线程：</p>
<ul>
<li>UI线程：控制浏览器的按钮与输入框</li>
<li>网络线程：处理网络请求</li>
<li>存储线程：控制文件访问</li>
</ul>
<h5 id="（1）输入处理"><a href="#（1）输入处理" class="headerlink" title="（1）输入处理"></a>（1）输入处理</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110061321788.png" alt="处理输入"></p>
<p>当我们在浏览器的地址栏输入内容按下回车时，<strong>UI 线程</strong>会根据输入内容判断输入内容是<strong>搜索关键字</strong>还是<strong>URL</strong></p>
<p>如果判定为搜索关键字，则跳转到默认搜索引擎的搜索URL</p>
<p>如果判定为URL，则开始请求URL</p>
<h5 id="（2）开始导航"><a href="#（2）开始导航" class="headerlink" title="（2）开始导航"></a>（2）开始导航</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110061321242.png" alt="开始导航"></p>
<p><strong>UI线程将</strong>URL交给网络线程，<strong>网络线程</strong>则负责联系目标主机获取信息（其中发生了DNS域名解析，TLS连接等操作都是计算机网络相关内容）</p>
<h5 id="（3）读取响应"><a href="#（3）读取响应" class="headerlink" title="（3）读取响应"></a>（3）读取响应</h5><img src="/2021/10/07/DevPrinciple/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8/Users\linghao\AppData\Roaming\Typora\typora-user-images\image-20211006133826626.png" alt="image-20211006133826626" style="zoom:80%;">

<p><strong>网络线程</strong>接收到目标主机的响应后，解析HTTP响应报文，响应分为header（响应相关信息）和payload（真实数据内容）两部分</p>
<p>如果状态码为301或302，则需要取得响应头中Location地址，<strong>重新发起请求</strong></p>
<p>如果状态码为200，则可以进行下面的步骤：</p>
<p>浏览器根据响应头中的<code>Content-Type</code>来确定相应主体的媒体类型（MIME Type）：如果是text/html时则将相应数据交给<strong>渲染进程</strong>来进行下一步工作（解析HTML内容等），<code>image/png</code>则调用图片渲染器</p>
<p>读取响应的过程中会有以下的安全机制：</p>
<ul>
<li>浏览器并不完全信任<code>Content-Type</code>，所以当收到响应主体（payload）时，网络线程会在必要时检查数据的前几个字节，以确保数据内容与 header 里标识的数据类型（Content-Type）一致。如果不一致，那么就需要进行 MIME 类型嗅探来猜测该数据的类型</li>
<li>浏览器会进行 <code>Safe Browsing</code>安全检查，如果域名或者请求内容匹配到已知的恶意站点，network thread 会展示一个警告页</li>
<li>网络线程还会做 <code>CORB（Cross Origin Read Blocking）</code>检查来确定那些敏感的跨站数据不会被发送至渲染进程</li>
</ul>
<h5 id="（4）查找渲染进程"><a href="#（4）查找渲染进程" class="headerlink" title="（4）查找渲染进程"></a>（4）查找渲染进程</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110061958151.png" alt="查找渲染进程"></p>
<p><strong>网络线程</strong>确认浏览器可以导航到请求网页后，会通知<strong>UI线程</strong>去查找<strong>渲染进程</strong>进行网页的渲染</p>
<p>考虑到网络请求获取响应需要时间，<strong>UI线程</strong>可以<strong>并行</strong>查找和启动一个<strong>渲染进程</strong>，当<strong>网络线程</strong>接收到数据时，<strong>渲染进程</strong>就已经准备好了</p>
<h5 id="（5）确认导航"><a href="#（5）确认导航" class="headerlink" title="（5）确认导航"></a>（5）确认导航</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110062013638.png" alt="提交导航"></p>
<ul>
<li>数据和渲染进程都准备了，<strong>浏览器进程</strong>会向<strong>渲染进程</strong>发送IPC消息（进程间通信）来确认导航</li>
<li><strong>浏览器进程</strong>将数据发送给<strong>渲染进程</strong></li>
<li><strong>渲染进程</strong>接收到数据后，又发送IPC消息给<strong>浏览器进程</strong>，表明导航已提交，页面开始加载</li>
<li>地址栏会更新，安全指示符更新（地址前面的小锁），访问历史列表（history tab）更新，即可以通过前进后退来切换该页面</li>
</ul>
<h5 id="（6）初始化加载完成"><a href="#（6）初始化加载完成" class="headerlink" title="（6）初始化加载完成"></a>（6）初始化加载完成</h5><p>导航提交后，渲染进程开始加载资源及渲染页面（具体<strong>页面渲染原理</strong>见下文），页面渲染完成后，会向浏览器进程发送IPC消息，这时UI线程停止展示tab加载中图标</p>
<h4 id="2-浏览器页面渲染"><a href="#2-浏览器页面渲染" class="headerlink" title="2.浏览器页面渲染"></a>2.浏览器页面渲染</h4><p>参考资料：</p>
<p><a href="https://blog.csdn.net/weixin_43816287/article/details/115767313">页面渲染流程</a></p>
<p><a href="https://juejin.cn/post/6844904020193067015">浏览器页面的渲染流程</a></p>
<p>浏览器页面渲染步骤：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110070838171.png" alt="image-20211007083830907"></p>
<p><strong>浏览器进程</strong>把数据交给了<strong>渲染进程</strong>，<strong>渲染进程</strong>将HTML/CSS/JS代码，转化为用户可进行交互的web页面</p>
<p><strong>渲染进程</strong>包含以下线程：</p>
<ul>
<li>一个主线程（main thread）</li>
<li>多个工作线程（work thread）</li>
<li>一个合成器线程（compositor thread）</li>
<li>多个光栅化线程（raster thread）</li>
</ul>
<p>浏览器页面渲染进程：</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202110062110095.png" style="zoom:67%;">

<ul>
<li>渲染进程将HTML内容转换为能够读懂的<code>DOM树</code>结构</li>
<li>渲染引擎将CSS样式表转化为浏览器可以理解的<code>styleSheets</code>，计算出DOM节点的样式。</li>
<li>创建<code>布局树</code>，并计算元素的布局信息</li>
<li>对布局树进行分层，并生成<code>分层树</code></li>
<li>为每个图层生成<code>绘制列表</code>，并将其提交到合成线程</li>
<li>合成线程将图层分成<code>图块</code>，并在<code>光栅化线程池</code>中将图块转换成位图</li>
<li>合成线程发送绘制图块命令<code>DrawQuad</code>给浏览器进程</li>
<li>浏览器进程根据DrawQuad消息生成页面，并<code>显示</code>到显示器上</li>
</ul>
<h5 id="（1）构建DOM"><a href="#（1）构建DOM" class="headerlink" title="（1）构建DOM"></a>（1）构建DOM</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110062124865.png" alt="在这里插入图片描述"></p>
<p><strong>渲染进程</strong>接受到导航确认信息后，开始接受来自<strong>浏览器进程</strong>数据（请求响应），渲染进程的<strong>主线程</strong>解析数据化为DOM对象，</p>
<p>构建DOM过程中：</p>
<ul>
<li>子资源加载：解析到图片，CSS，JS脚本等资源，<strong>主线程</strong>逐一交给<strong>浏览器进程</strong>发起请求去获取。为了提升效率，浏览器往往会运行<strong>预加载扫描程序</strong>，如果html中存在<strong>img，link</strong>等标签，预加载扫描程序会把这些请求传递给<strong>浏览器进程</strong>的<strong>网络线程</strong>去下载</li>
<li>Javascript的下载与执行：解析遇到<code>&lt;script&gt;</code>标签，主线程停止对HTML的解析，而去加载执行JS代码（在<code>&lt;script&gt;</code>标签添加上<strong>async</strong>或<strong>defer</strong>等属性，浏览器会异步加载和执行JS代码，而不会阻塞渲染）</li>
</ul>
<h5 id="（2）样式计算"><a href="#（2）样式计算" class="headerlink" title="（2）样式计算"></a>（2）样式计算</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110062125412.png" alt="在这里插入图片描述"></p>
<ul>
<li><strong>主线程</strong>在解析页面时，遇到<code>&lt;style&gt;</code>标签或者<code>&lt;link&gt;</code>标签的CSS资源，会加载CSS代码</li>
<li>根据CSS代码构建styleSheets树</li>
<li>样式计算规则：继承规则（当前标签的样式继承了其所有父标签的样式），层叠规则（多个样式同时作用于该标签时，进行样式层叠）</li>
</ul>
<h5 id="（3）布局"><a href="#（3）布局" class="headerlink" title="（3）布局"></a>（3）布局</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110062125756.png" alt="在这里插入图片描述"></p>
<ul>
<li>对DOM树和styleSheets树进行合并，生成render树（布局树），生成<strong>布局树</strong>时浏览器会遍历<strong>DOM树</strong>所有可见的节点添加到布局树中，而不可见的节点会被忽略掉</li>
<li>渲染进程还需要计算出每个标签对应的<strong>物理位置</strong>并存储在render树中</li>
</ul>
<h5 id="（4）分层"><a href="#（4）分层" class="headerlink" title="（4）分层"></a>（4）分层</h5><img src="/2021/10/07/DevPrinciple/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8/Users\linghao\AppData\Roaming\Typora\typora-user-images\image-20211007091607012.png" alt="image-20211007091607012">

<p>页面上还涉及许多复杂的样式：transform， animation 动画、scroll，z-indexing改变层级等等，浏览器则为这些特殊的节点建立一个对应图层，生成<strong>图层树（LayerTree）</strong>，将这些图层合并在一起，就是一整个页面的样式</p>
<p>分层规则：</p>
<ul>
<li>拥有层叠上下文属性的元素即使用了z-index的元素</li>
<li>需要剪裁的地方也会被创建为图层（当父容器的宽高不足以撑起子容器的宽高，出现滚动条或者设置父容器为overflow :hode 等等，子容器页面就会被裁剪）</li>
</ul>
<h5 id="（5）绘制"><a href="#（5）绘制" class="headerlink" title="（5）绘制"></a>（5）绘制</h5><img src="/2021/10/07/DevPrinciple/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8/Users\linghao\AppData\Roaming\Typora\typora-user-images\image-20211007091651791.png" alt="image-20211007091651791" style="zoom:80%;">

<p>将图层拆分成一条条指令，逐条执行绘制图形</p>
<h5 id="（6）分块"><a href="#（6）分块" class="headerlink" title="（6）分块"></a>（6）分块</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110070943457.png" alt="image-20211007094342822"></p>
<p>当页面内容很长时，页面就会出现滚动条。这时的视口大小有限（在当前屏幕区域能看到的模块就叫视口），在这种情况下要绘制所有图层内容开销太大，所以需要将<strong>图层分成很多图块</strong></p>
<h5 id="（7）光栅化"><a href="#（7）光栅化" class="headerlink" title="（7）光栅化"></a>（7）光栅化</h5><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110062110095.png" style="zoom:67%;">

<ul>
<li>渲染进程将这些图层分成很多图块后，然后按照<strong>视口附近</strong>的<strong>图块</strong>来通过<strong>光栅化</strong>优先生成位图（即屏幕上的像素），所以图块是<strong>光栅化</strong>执行的最小单位</li>
<li>当用户滚动页面时，由于页面各个层都已经被光栅化了，浏览器需要做的只是合成一个新的帧来展示滚动后的效果</li>
<li>之前的生成DOM树、styleSheets树、render树（Layout）、分层(Layer)、绘制（Paint）都是在渲染引起的主线程中运行的， 绘制列表记录好绘制顺序和绘制指令的列表后，将其<strong>提交</strong>给渲染引擎中的<strong>合成线程</strong></li>
<li>合成线程再交给光栅化线程池对图块进行处理</li>
<li>光栅化过程往往使用GPU来加速生成即快速光栅化，生成的位图保存在GPU内存中</li>
</ul>
<h5 id="（8）合成与显示"><a href="#（8）合成与显示" class="headerlink" title="（8）合成与显示"></a>（8）合成与显示</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110071019064.gif" alt="合成的光栅化过程"></p>
<ul>
<li>一旦所有图块都被光栅化，<strong>合成线程</strong>就会生成一个绘制图块的命令——“DrawQuad”，然后将该命令提交给浏览器进程</li>
<li><strong>浏览器进程</strong>里面有一个叫 viz 的组件，用来接收<strong>合成线程</strong>发过来的 DrawQuad 命令，然后根据 DrawQuad 命令，将其页面内容绘制到内存中，最后再将内存显示在屏幕上</li>
</ul>
<h4 id="3-浏览器页面交互"><a href="#3-浏览器页面交互" class="headerlink" title="3.浏览器页面交互"></a>3.浏览器页面交互</h4><h5 id="（1）浏览器对事件处理"><a href="#（1）浏览器对事件处理" class="headerlink" title="（1）浏览器对事件处理"></a>（1）浏览器对事件处理</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110071102089.png" alt="点击事件从浏览器进程路由到渲染进程"></p>
<p><strong>浏览器进程</strong>首先接收到事件信息和事件发生的坐标，随后便把信息传递给<strong>渲染进程</strong>，<strong>渲染进程</strong>根据事件发生的坐标找到<strong>目标对象（target）</strong>，然后运行这个<strong>目标对象</strong>的绑定事件对应的<strong>监听函数（listener）</strong></p>
<h5 id="（2）合成线程接收事件"><a href="#（2）合成线程接收事件" class="headerlink" title="（2）合成线程接收事件"></a>（2）合成线程接收事件</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110071129764.png" alt="非快速滚动区域有用户事件发生"></p>
<p>合成线程接收事件的情况主要针对<strong>页面滚动</strong>相关的事件，合成线程可以独立于主线程之外通过已光栅化的层创建组合帧</p>
<p>当渲染进程中的<strong>合成线程</strong>接收到事件信息，要进行以下判定：</p>
<ul>
<li>页面合成时，合成器线程会标记页面中绑定有<strong>页面滚动</strong>事件处理器的区域为<strong>非快速滚动区域</strong>（non-fast scrollable region)</li>
<li>如果事件发生在这些存在标注的区域，合成线程会把事件信息发送给主线程，等待主线程进行事件处理</li>
<li>如果事件不是发生在这些区域，合成线程则会直接合成新的帧而不用等到主线程的响应</li>
</ul>
<h5 id="（3）查找事件的目标对象"><a href="#（3）查找事件的目标对象" class="headerlink" title="（3）查找事件的目标对象"></a>（3）查找事件的目标对象</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110071138363.png" alt="当整个页面都是非快速滚动区域时页面的事件处理示意图"></p>
<p>当<strong>合成线程</strong>接收到事件信息，判定到事件发生不在非快速滚动区域后，合成器线程会向<strong>主线程</strong>发送这个时间信息，<strong>主线程</strong>获取到事件信息的第一件事就是通过<strong>命中测试（hit test）</strong>去找到事件的目标对象</p>
<p>具体的命中测试流程是遍历在绘制阶段生成的<strong>绘画记录（paint records）</strong>来找到包含了事件发生坐标上的元素对象</p>
<h5 id="（4）事件处理优化"><a href="#（4）事件处理优化" class="headerlink" title="（4）事件处理优化"></a>（4）事件处理优化</h5><p>为了浏览流畅，浏览器需要保证渲染进程的渲染速度与屏幕刷新率一致（大概每秒 60 帧），但是存在某些事件触发频率超过了这个数值（比如wheel，mousewheel，mousemove，pointermove，touchmove，这些连续性的事件一般每秒会触发60~120次）</p>
<p>事件淹没了屏幕刷新的时间轴，导致页面很卡顿：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110071149864.png" alt="事件淹没了屏幕刷新的时间轴，导致页面很卡顿"></p>
<p>假如每一次触发事件都将事件发送到主线程处理，由于屏幕的刷新速率相对来说较低，这样使得主线程会<strong>触发过量</strong>的命中测试以及JS代码，使得性能有了没必要是<strong>损耗</strong></p>
<p>和之前相同的事件轴，可是这次事件被合并并延迟调度了：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110071149521.png" alt="和之前相同的事件轴，可是这次事件被合并并延迟调度了"></p>
<p>浏览器会<strong>合并</strong>这些连续的事件，延迟到下一帧渲染再执行，达到事件处理优化的目的</p>
]]></content>
      <categories>
        <category>开发原理</category>
      </categories>
      <tags>
        <tag>开发原理</tag>
        <tag>深度系列</tag>
        <tag>计算机系统</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>软考笔记|考前专题复习</title>
    <url>/2021/05/28/Exam/%E8%BD%AF%E8%80%83-%E4%B8%93%E9%A2%98%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041211195.png" alt="image-20210904121059575"></p>
<span id="more"></span>



<h2 id="软考专题复习（上午题）"><a href="#软考专题复习（上午题）" class="headerlink" title="软考专题复习（上午题）"></a>软考专题复习（上午题）</h2><h3 id="1-计算机组成原理"><a href="#1-计算机组成原理" class="headerlink" title="1.计算机组成原理"></a>1.计算机组成原理</h3><h4 id="（1）系统可靠性分析"><a href="#（1）系统可靠性分析" class="headerlink" title="（1）系统可靠性分析"></a>（1）系统可靠性分析</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041201180.png" alt="image-20210513190738916"></p>
<ul>
<li>1.串联模型</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041201241.png" alt="image-20210309204541620"></p>
<ul>
<li>2.并联模型</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041201763.png" alt="image-20210309204634998"></p>
<h4 id="（2）海明校验码"><a href="#（2）海明校验码" class="headerlink" title="（2）海明校验码"></a>（2）海明校验码</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041202905.png" alt="image-20210513191206232"></p>
<ul>
<li>确定校验码位数，可以用公式<code>2 ^ r &gt;=  信息位数 + r + 1</code>来求</li>
<li>将选项代入即可求出</li>
</ul>
<h4 id="（3）Cache知识点"><a href="#（3）Cache知识点" class="headerlink" title="（3）Cache知识点"></a>（3）Cache知识点</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041202145.png" alt="image-20210513191540921"></p>
<ul>
<li><p>它位于CPU和主存之间，由硬件实现；容量小，一般在几KB到几MB之间；速度一般比主存快5到10倍</p>
</li>
<li><p>Cache存储器用来存放主存的部分拷贝（副本），无法扩大主存的容量</p>
</li>
</ul>
<h4 id="（4）浮点数运算"><a href="#（4）浮点数运算" class="headerlink" title="（4）浮点数运算"></a>（4）浮点数运算</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041202687.png" alt="image-20210521154057747"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041202491.png" alt="image-20210521154323251"></p>
<p>对阶是小阶向大阶对齐，尾数右移n位</p>
<h4 id="（5）流水线相关计算"><a href="#（5）流水线相关计算" class="headerlink" title="（5）流水线相关计算"></a>（5）流水线相关计算</h4><p><strong>流水线时间计算：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041202529.png" alt="image-20210521155616121"></p>
<ul>
<li>找执行时间最长的指令作为流水线周期</li>
<li>套入执行指令的时间公式（t1……tk指各个步骤耗费事件，n指需要执行的指令条数，k指执行指令的步骤个数）</li>
</ul>
<p><strong>流水线吞吐率计算：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041202753.png" alt="image-20210521155821047"></p>
<h4 id="（6）浮点数编码范围"><a href="#（6）浮点数编码范围" class="headerlink" title="（6）浮点数编码范围"></a>（6）浮点数编码范围</h4><p>题目：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041202297.png" alt="image-20210525083130883"></p>
<p>编码范围：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041202012.png" alt="image-20210308160402815"></p>
<h4 id="（7）奇偶校验"><a href="#（7）奇偶校验" class="headerlink" title="（7）奇偶校验"></a>（7）奇偶校验</h4><ul>
<li>奇偶校验只能查错不能纠错</li>
<li>对于奇偶校验，是由若干位有放信息，再加上一个二进制位（校验位）组成校验码</li>
<li>奇校验“1”的个数为奇数，而偶校验“1”的个数为偶数，以此校验完整性</li>
<li>只有奇数个数据位发生错误，才能发现错误</li>
</ul>
<h3 id="2-系统安全分析与设计"><a href="#2-系统安全分析与设计" class="headerlink" title="2.系统安全分析与设计"></a>2.系统安全分析与设计</h3><h4 id="（1）加密算法应用"><a href="#（1）加密算法应用" class="headerlink" title="（1）加密算法应用"></a>（1）加密算法应用</h4><ul>
<li>RSA是一种对称加密算法，而RSA由于效率问题，一般不直接用于大量的明文加密</li>
<li>SHA-1与MD5属于信息摘要算法,SHA-1与MD5是不能用来加密数据的</li>
<li>MD5是一种摘要算法，经过处理后生成一个128位散列值</li>
<li>RC-5属于非对称加空算法，适合加大量的明文加密</li>
<li>DES是共享密钥加密</li>
</ul>
<p>vb</p>
<h4 id="（2）CA认证"><a href="#（2）CA认证" class="headerlink" title="（2）CA认证"></a>（2）CA认证</h4><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210513193746919.png" alt="image-20210513193746919"></p>
<p>数字证书的产生：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041202376.png" alt="image-20210513194140782"></p>
<h3 id="3-法律法规知识"><a href="#3-法律法规知识" class="headerlink" title="3.法律法规知识"></a>3.法律法规知识</h3><h4 id="（1）基本知识"><a href="#（1）基本知识" class="headerlink" title="（1）基本知识"></a>（1）基本知识</h4><ul>
<li>两人同时授予同一专利权是不可能的</li>
<li>在合同没有规定的情况下，受托方享有著作权</li>
<li>职工的职务作品，职工只享有署名权，单位享有著作权（专利）</li>
</ul>
<h4 id="（2）知识产权"><a href="#（2）知识产权" class="headerlink" title="（2）知识产权"></a>（2）知识产权</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041202730.png" alt="image-20210525085535372"></p>
<h3 id="4-多媒体基础"><a href="#4-多媒体基础" class="headerlink" title="4.多媒体基础"></a>4.多媒体基础</h3><h4 id="（1）音频计算"><a href="#（1）音频计算" class="headerlink" title="（1）音频计算"></a>（1）音频计算</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041202098.png" alt="image-20210513195104250"></p>
<ul>
<li>如果取样速率大于模拟信号最高频率的2倍，则可以用得到的样本中恢复原来的模拟信号</li>
<li><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041202627.png" alt="image-20210513195204442"></li>
</ul>
<h4 id="（2）图像计算"><a href="#（2）图像计算" class="headerlink" title="（2）图像计算"></a>（2）图像计算</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041202945.png" alt="image-20210513195250383"></p>
<ul>
<li><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041202217.png" alt="image-20210513195439014"></li>
</ul>
<h3 id="5-软件工程"><a href="#5-软件工程" class="headerlink" title="5.软件工程"></a>5.软件工程</h3><h4 id="（1）结构化开发"><a href="#（1）结构化开发" class="headerlink" title="（1）结构化开发"></a>（1）结构化开发</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203010.png" alt="image-20210513195714334"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203280.png" alt="image-20210513195725203"></p>
<ul>
<li><p>扇出是指模块直接调用下级模块的个数（扇出大表示模块复杂度高），扇入是指直接调用该模块的上级模块的个数（扇入大表示模块复用程度高）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203088.png" alt="image-20210513195850913"></p>
</li>
</ul>
<ul>
<li><p>工作流程如下：</p>
<ul>
<li>研究、分析和审查<strong>数据流图</strong></li>
<li>由数据流图推导出系统的初始结构图（<strong>接口设计</strong>）</li>
<li>根据分析模型中的实体关系图和数据字典进行<strong>数据设计</strong></li>
<li>在设计的基础上，依旧分析模型中的加工规格说明、状态转换图进行<strong>过程设计</strong>（主要包含对数据结构和算法的设计）</li>
</ul>
</li>
</ul>
<p>结构化分析组成：</p>
<p>结构化方法的分析结果由以下几部分组成:数据流图、数据词典、加工逻辑说明、补充材料（结构图不属于结构化分析的输出）</p>
<h4 id="（2）项目管理"><a href="#（2）项目管理" class="headerlink" title="（2）项目管理"></a>（2）项目管理</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203688.png" alt></p>
<p><strong>解题方法：</strong></p>
<ul>
<li>gantt图优点：进度时间清晰明了</li>
<li>gantt图缺点：不能清晰描述任务间的依赖关系</li>
<li>最少完成时间取决于最长的活动序列（图中最少完成天数为20）</li>
<li>最早开始时间：正向推理，直接从起点出发分析，如果某个活动取决于两个路径，则取时间最长的做最早开始时间（BD最早开始时间为4，HK最早开始时间为10）</li>
<li>最晚开始时间：最早完成时间后从最后一个节点开始逆推得最晚开始时间</li>
<li>松弛时间：指用最少时间（最长的活动序列）减去某活动在的序列长度</li>
</ul>
<h4 id="（3）开发模型特点"><a href="#（3）开发模型特点" class="headerlink" title="（3）开发模型特点"></a>（3）开发模型特点</h4><p><a href="https://www.cnblogs.com/liuawen/p/11913603.html">软件开发模型介绍</a></p>
<p>瀑布模型</p>
<ul>
<li>特点： 阶段间具有顺序性和依赖性，推迟实现的观点</li>
<li>缺点：“瀑布模型是由文档驱动的”,在可运行的软件产品交付给用户之前，用户只能通过文档来了解产品是什么样的。很可能导致最终开发出的软件产品不能真正满足用户的需求</li>
</ul>
<p>快速原型模型</p>
<ul>
<li>特点：开发人员尽可能快地建造出原型系统，以加速软件开发过程，节约软件开发成本</li>
<li>优点：有助于保证用户的真实需要得到满足</li>
</ul>
<p>增量模型：</p>
<ul>
<li>特点：分批地逐步向用户提交产品，每次提交一个满足用户需求子集的可运行的产品</li>
<li>优点：能在较短时间内向用户提交可完成一些有用的工作的产品，逐步增加产品功能可以使用户有较充裕的时间学习和适应新产品</li>
</ul>
<p>螺旋模型：</p>
<ul>
<li>特点：解这种模型的一个简便方法，是把它看做在每个阶段之前都增加了风险分析过程的快速原型模型</li>
<li>优点： 在螺旋模型中维护只是模型的另一个周期，在维护和开发之间并没有本质区别</li>
<li>螺旋模型主要适用于内部开发的大规模软件项目</li>
</ul>
<p>喷泉模型：</p>
<ul>
<li>＂喷泉”这个词体现了面向对象软件开发过程迭代和无缝的特性</li>
</ul>
<p>演化模型：</p>
<ul>
<li>尽量投入使用，并可以再使用过程中不断完善，对于原型模型和演化（迭代）模型，演化模型更合适，原型模型更适用于需求不明确时用以获取需求</li>
</ul>
<h4 id="（4）内聚和耦合分析"><a href="#（4）内聚和耦合分析" class="headerlink" title="（4）内聚和耦合分析"></a>（4）内聚和耦合分析</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203112.png" alt="image-20210514082309282"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203993.png" alt="image-20210514082516907"></p>
<p><strong>内聚</strong></p>
<p>内聚即模块中各个部件的连接紧密程度，内聚程度越高越好</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203794.png" alt="image-20210329090028450"></p>
<p><strong>耦合</strong></p>
<p>耦合即模块间的联系的紧密程度，耦合程度越低越好</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203345.png" alt="image-20210329090217178"></p>
<p>偶然內聚由于内容都昰不相关的，所以必然导致它与外昦多个模块有关联，这也使得模埉间的耦合廈増加</p>
<h4 id="（5）软件测试计算"><a href="#（5）软件测试计算" class="headerlink" title="（5）软件测试计算"></a>（5）软件测试计算</h4><p>McCabe测量法    </p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203832.png" alt="image-20210514085901901"></p>
<p><strong>语句覆盖测试用例计算：</strong></p>
<p>至少执行程序中的所有语句一次，两条路径即可实现</p>
<p><strong>路径覆盖测试用例计算：</strong></p>
<p>执行所有可能得穿过程序得控制流程路径,所有路径覆盖。需要4条路径完成完全覆盖</p>
<p><strong>判定覆盖测试计算：</strong></p>
<p>使程序流程图中每一个真假分支至少被执行一次</p>
<p><strong>环路复杂度计算：</strong></p>
<p>最简计算方法：闭合环路+1（判断条件个数+1）</p>
<p>一般计算方法：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203661.png" alt="image-20210514090247799"></p>
<h4 id="（6）能力成熟度模型集成（CMMI）"><a href="#（6）能力成熟度模型集成（CMMI）" class="headerlink" title="（6）能力成熟度模型集成（CMMI）"></a>（6）能力成熟度模型集成（CMMI）</h4><ul>
<li>CL0（未完成的）:过程域<strong>未执行</strong></li>
<li>CL1（已执行的）:其共性目标是过程将可标识的输入工作产品<strong>转换成</strong>可标识的输出工产品</li>
<li>CL2（已管理的）其共性目标是集中于<strong>已管理</strong>的过程的制度化</li>
<li>CL3（已定义级的）:其共性目标集中于<strong>已定义</strong>的过程的制度化</li>
<li>CL4（定量管理的）:其共性目标集中于<strong>可定量管理</strong>的过程的制度化</li>
<li>CL5（优化的）:使用量化（统计学）手段改变和<strong>优化过程域</strong>，以满足客户的改变和持续改进计划中的过程域的功效</li>
</ul>
<h4 id="（7）软件维护"><a href="#（7）软件维护" class="headerlink" title="（7）软件维护"></a>（7）软件维护</h4><p>软考维护有以下类型：</p>
<ul>
<li>改正性维护：为了识别和纠正软件错误、改正软件性能上的缺陷</li>
<li>适应性维护：在使用过程中，外部环境（新的硬、软件配置）、数据环境（数据库、数据格式、数据输入/输岀方式、数据存储介质）可能发生变化。为使软件适应这些变化而进行的修改</li>
<li>完善性维护：在软件的使用过程中，用户往往会对软件提岀新的功能与性能要求。为了满足这些要求，需要修改或再开发软件，以扩充软件功能、增强软件性能</li>
<li>预防性维护。这是指预先提髙软件的可维护性、可靠性等，为以后进一步改进软件打下良好基础</li>
</ul>
<h3 id="6-编译原理"><a href="#6-编译原理" class="headerlink" title="6.编译原理"></a>6.编译原理</h3><h4 id="（1）正规式"><a href="#（1）正规式" class="headerlink" title="（1）正规式"></a>（1）正规式</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203465.png" alt="image-20210513202920690"></p>
<ul>
<li>a|b ：可解析出a或b</li>
<li>（a|b）*：任意个a,b组合都可以表达出来</li>
</ul>
<h4 id="（2）编译过程"><a href="#（2）编译过程" class="headerlink" title="（2）编译过程"></a>（2）编译过程</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203458.png" alt="image-20210513203037685"></p>
<h4 id="（3）有限自动机状态转换图"><a href="#（3）有限自动机状态转换图" class="headerlink" title="（3）有限自动机状态转换图"></a>（3）有限自动机状态转换图</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203538.png" alt="image-20210514110711386"></p>
<ul>
<li>解析态：找一条从起点到终点的路，路上的数值串起来即得到一个解析态</li>
<li>识别路径：按选项的路径一个个尝试，若能从初态到终态则该选项正确</li>
</ul>
<h4 id="（4）语法树分析"><a href="#（4）语法树分析" class="headerlink" title="（4）语法树分析"></a>（4）语法树分析</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203360.png" alt="image-20210514111329550"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203986.png" alt="image-20210514111253610"></p>
<h3 id="7-操作系统基本原理"><a href="#7-操作系统基本原理" class="headerlink" title="7.操作系统基本原理"></a>7.操作系统基本原理</h3><h4 id="（1）数据传输控制"><a href="#（1）数据传输控制" class="headerlink" title="（1）数据传输控制"></a>（1）数据传输控制</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041203843.png" alt="image-20210513144736846"></p>
<ul>
<li>程序控制方式：对读入的每个字，CPU需要对外设状态进行循环检查，直到确定该字已经在I/O控制器的数据寄存器中</li>
<li>程序中断方式：允许I/O设备主动打断CPU的运行并请求服务，从而“解放”CPU，使得其向I/O控制器发送读命令后可以继续做其他有用的工作</li>
<li>DMA方式：在程序中断方式中，I/O设备与内存之间的数据交换必须要经过CPU中的寄存器，所以速度还是受限，而DMA（直接存储器存取）方式的基本思想是在I/O设备和内存之间<strong>开辟直接的数据交换通路</strong>，彻底“解放” CPU</li>
</ul>
<h4 id="（2）位示图计算"><a href="#（2）位示图计算" class="headerlink" title="（2）位示图计算"></a>（2）位示图计算</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204170.png" alt="image-20210513203333599"></p>
<ul>
<li><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204312.png" alt="image-20210513203438697"></p>
</li>
<li><p>位示图的每一位都表示一个磁盘块的使用情况</p>
</li>
<li><p>物理块数 / 字长即可得需要的字的个数</p>
</li>
<li><p>求字的编号即为（物理号+1） /  字长</p>
</li>
</ul>
<h4 id="（3）死锁问题计算"><a href="#（3）死锁问题计算" class="headerlink" title="（3）死锁问题计算"></a>（3）死锁问题计算</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204209.png" alt="image-20210513203908025"></p>
<ul>
<li>每个进程都分配到资源数（n-1），最后还剩下一个资源逐个等待分配</li>
<li>所以总不发生死锁的资源是 每个进程所需（资源数-1）之和 加1</li>
</ul>
<h4 id="（4）页式存储地址换算"><a href="#（4）页式存储地址换算" class="headerlink" title="（4）页式存储地址换算"></a>（4）页式存储地址换算</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204720.png" alt="image-20210513204201718"></p>
<ul>
<li><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210513211105549.png" alt="image-20210513211105549"></p>
</li>
<li><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204714.png" alt="image-20210313100151803"></p>
</li>
</ul>
<h4 id="（5）前趋图"><a href="#（5）前趋图" class="headerlink" title="（5）前趋图"></a>（5）前趋图</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204402.png" alt="image-20210513211328449"></p>
<ul>
<li>V操作可以唤醒P操作（等待的一方会有一个P操作，等待另一个进程的V操作触发）</li>
<li>箭头指向为V，箭头起始点为P，牢记这点即可解决这类问题（P 操作—&gt; 进程 运行—&gt; V操作）</li>
</ul>
<h4 id="（6）进程管理与PV操作"><a href="#（6）进程管理与PV操作" class="headerlink" title="（6）进程管理与PV操作"></a>（6）进程管理与PV操作</h4><p><strong>题目分析：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204893.png" alt="image-20210521163208973"></p>
<p>信息量应当为单元数，题目是以某日某趟车位一个单元</p>
<p>（a）是申请资源所以为p操作，（b）（c）都是释放资源所以为V操作</p>
<p><strong>PV操作原理：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204857.png" alt="image-20210521163135429"></p>
<p>生产者先P(s1)再V(s2)，而消费者相反，这让保证了放入和取出都不会出错</p>
<h4 id="（8）PV操作与前驱图分析"><a href="#（8）PV操作与前驱图分析" class="headerlink" title="（8）PV操作与前驱图分析"></a>（8）PV操作与前驱图分析</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204353.png" alt="image-20210526104321660"></p>
<ul>
<li>根据前驱图可以分析：P1不需要前趋唤醒，而其参与唤醒后续P2，P3（所以p1运行前不需要写P操作，而其V操作唤醒后续的P操作）</li>
<li>解题时可以对应前驱图找到前驱与后续，对应PV操作的信号量</li>
<li>信号量的标注两个P编号值的和从大到小对应计算（也可以从左到右，从上到下）</li>
</ul>
<h4 id="（7）I-O设备管理"><a href="#（7）I-O设备管理" class="headerlink" title="（7）I/O设备管理"></a>（7）I/O设备管理</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204002.png" alt="image-20210521163731406"></p>
<h3 id="8-面向对象"><a href="#8-面向对象" class="headerlink" title="8.面向对象"></a>8.面向对象</h3><h4 id="（1）UML图分析"><a href="#（1）UML图分析" class="headerlink" title="（1）UML图分析"></a>（1）UML图分析</h4><p><strong>用例图：</strong></p>
<ul>
<li>包含关系（extend）</li>
<li>扩展关系（include）</li>
<li>泛化关系</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204450.png" alt="image-20210411075016076"></p>
<p><strong>类图与对象图：</strong></p>
<p>类图是描述系统中的类，以及各个类之间的关系的静态视图</p>
<ul>
<li><p>填类名</p>
</li>
<li><p>填多重度</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204491.png" alt="image-20210411075231497"></p>
</li>
<li><p>填关系</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204985.png" alt="image-20210411075347236"></p>
</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204847.png" alt="image-20210514092707554"></p>
<p><strong>通信图:</strong></p>
<ul>
<li><p>通信图由三部分组成：对象（Object），链（Link） 和消息（Message）</p>
</li>
<li><p>对象即类的实例 其中aOrder表示实例名，Order表示类名</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204194.png" alt="image-20210514093533116"></p>
</li>
<li><p>链的两端是消息发送者和消息接收者</p>
</li>
<li><p>通信图是通过一系列的消息来描述系统的动态行为</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204085.png" alt="image-20210514093813668"></p>
</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204153.png" alt="image-20210411080106182"></p>
<h4 id="（2）-设计模式分析"><a href="#（2）-设计模式分析" class="headerlink" title="（2）*设计模式分析"></a>（2）*设计模式分析</h4><p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html">图解设计模式</a></p>
<p><strong>各模式特点：</strong></p>
<p>创建型</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204955.png" alt="image-20210401075331145"></p>
<p>结构型</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204504.png" alt="image-20210514100625028"></p>
<p>组合型</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041204249.png" alt="image-20210514100645295"></p>
<p><strong>观察者模式：</strong></p>
<ul>
<li>建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应做出反应</li>
<li>发生改变的对象称为观察目标，而被通知的对象称为观察者</li>
<li>观察者将自己注册到事件，那么具体的事件就知道了自己的观察者</li>
<li>观察者和事件都有自己的抽象，当实现具体的观察者和事件的时侯都要实现相应接口，所以对扩展是开放的</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041205144.png" alt="image-20210514095245429"></p>
<p><strong>状态模式：</strong></p>
<ul>
<li>允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041205041.png" alt="image-20210514110457412"></p>
<h4 id="（3）基础知识"><a href="#（3）基础知识" class="headerlink" title="（3）基础知识"></a>（3）基础知识</h4><p><strong>状态与行为：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041205690.png" alt="image-20210521171208234"></p>
<p><strong>多态含义：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041205169.png" alt="image-20210521171249312"></p>
<p><strong>多态类型：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041205290.png" alt="image-20210526115031968"></p>
<h3 id="9-数据库系统"><a href="#9-数据库系统" class="headerlink" title="9.数据库系统"></a>9.数据库系统</h3><h4 id="（1）封锁协议"><a href="#（1）封锁协议" class="headerlink" title="（1）封锁协议"></a>（1）封锁协议</h4><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041205419.png" alt="image-20210514111808165" style="zoom:200%;">

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041205795.png" alt="image-20210514113124096"></p>
<h4 id="（2）求键"><a href="#（2）求键" class="headerlink" title="（2）求键"></a>（2）求键</h4><p><strong>键的关系：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041205000.png" alt="image-20210514113801142"></p>
<p><strong>求候选键：</strong></p>
<p>只展示快捷方法</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041205088.png" alt="image-20210514114033872"></p>
<h4 id="（3）E-R模型分析"><a href="#（3）E-R模型分析" class="headerlink" title="（3）E-R模型分析"></a>（3）E-R模型分析</h4><p><strong>E-R模型组成：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041205082.png" alt="image-20210514115025317"></p>
<p><strong>联系类型：</strong></p>
<ul>
<li><p>分析联系模式</p>
</li>
<li><p>一个实体型转换为一个关系模式</p>
</li>
<li><p>关系模式个数：一对一型最少的情况为实体数，一对多型最少的情况为实体数，多对多型最少的情况为（实体数 +联系数） </p>
</li>
</ul>
<h4 id="（4）sql语句"><a href="#（4）sql语句" class="headerlink" title="（4）sql语句"></a>（4）sql语句</h4><ul>
<li>查询条件where与Hng的区别要弄清楚Whee是针对单条记录的判断条件，而 Having是针对分组之后的判断条件</li>
</ul>
<h4 id="（5）函数依赖推导"><a href="#（5）函数依赖推导" class="headerlink" title="（5）函数依赖推导"></a>（5）函数依赖推导</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206562.png" alt="image-20210521172502814"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206153.png" alt="image-20210521172552945"></p>
<h4 id="（6）-关系代数表达式"><a href="#（6）-关系代数表达式" class="headerlink" title="（6）*关系代数表达式"></a>（6）*关系代数表达式</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206108.png" alt="image-20210521175255727"></p>
<p><strong>关系代数的9种操作：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206148.png" alt="image-20210521175510573"></p>
<h3 id="10-数据结构"><a href="#10-数据结构" class="headerlink" title="10.数据结构"></a>10.数据结构</h3><h4 id="（1）-图邻接矩阵"><a href="#（1）-图邻接矩阵" class="headerlink" title="（1）*图邻接矩阵"></a>（1）*图邻接矩阵</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206195.png" alt="image-20210521153841784"></p>
<p>邻接矩阵有n*n个点，都需要被遍历</p>
<h4 id="（2）顺序储存二叉树"><a href="#（2）顺序储存二叉树" class="headerlink" title="（2）顺序储存二叉树"></a>（2）顺序储存二叉树</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206896.png" alt="image-20210521174323106"></p>
<p>空节点也会按顺序存进数组中</p>
<h3 id="11-算法运用"><a href="#11-算法运用" class="headerlink" title="11.*算法运用"></a>11.*算法运用</h3><h4 id="（1）动态规划法案例"><a href="#（1）动态规划法案例" class="headerlink" title="（1）动态规划法案例"></a>（1）动态规划法案例</h4><p>这类题跳过文字分析图像，找到突破点，然后再看文字分析</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206169.png" alt="image-20210514160327149"></p>
<p>最短路线为：S11 -&gt; S22 -&gt; S13 （长度为 3+4+1+5+2+3+3 = 21 ）</p>
<p><strong>动态规划法：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206257.png" alt="image-20210411083609174"></p>
<p>动态规划法会把问题拆成多个子问题，然后会有查表步骤</p>
<h4 id="（2）其他算法策略"><a href="#（2）其他算法策略" class="headerlink" title="（2）其他算法策略"></a>（2）其他算法策略</h4><p><strong>分治法：</strong></p>
<p>分治法-&gt;递归技术</p>
<p>（1）分治法使用要求：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206763.png" alt="image-20210411081822777"></p>
<p>分治法的基本运用：二分查找。快速排序</p>
<p><strong>回溯法：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206786.png" alt="image-20210411082526821"></p>
<p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210411082644241.png" alt="image-20210411082644241"></p>
<p>回溯法通过不断回溯参数，把所有可能性都尝试一遍直到</p>
<p><strong>贪心法：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206473.png" alt="image-20210411083313668"></p>
<p>在有限时间找到满意的解（找不到最优解，找到每一步的局部最优解）</p>
<p>通过递归地解决这些子问题然后再将这些子问题的解组合成原问题的解。</p>
<h3 id="12-计算机网络"><a href="#12-计算机网络" class="headerlink" title="12.计算机网络"></a>12.计算机网络</h3><h4 id="（1）域名解析过程"><a href="#（1）域名解析过程" class="headerlink" title="（1）域名解析过程"></a>（1）域名解析过程</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206064.png" alt="image-20210514160917608"></p>
<ul>
<li>本地服务器一般采用递归查询，对客户端负责到底，直到查到结果</li>
<li>其他域名服务器一般会用迭代查询，不断踢皮球</li>
</ul>
<h4 id="（2）分层设计分析"><a href="#（2）分层设计分析" class="headerlink" title="（2）分层设计分析"></a>（2）分层设计分析</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206570.png" alt="image-20210514161610892"></p>
<ul>
<li>不同层的设备与协议<br><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206240.png" alt="image-20210514161305972"></li>
</ul>
<ul>
<li><p>通过网络层及以上设备连接的计算机不在同一局域网</p>
</li>
<li><p>通过数据链路层或物理层的设备连接的计算机在同一局域网中</p>
</li>
</ul>
<h4 id="（3）网络安全管理"><a href="#（3）网络安全管理" class="headerlink" title="（3）网络安全管理"></a>（3）网络安全管理</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206962.png" alt="image-20210521160221698"></p>
<h4 id="（4）网络攻击分类"><a href="#（4）网络攻击分类" class="headerlink" title="（4）网络攻击分类"></a>（4）网络攻击分类</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206796.png" alt="image-20210318211044069"></p>
<h2 id="软考专题复习（下午题）"><a href="#软考专题复习（下午题）" class="headerlink" title="软考专题复习（下午题）"></a>软考专题复习（下午题）</h2><h3 id="1-数据流图分析"><a href="#1-数据流图分析" class="headerlink" title="1.数据流图分析"></a>1.数据流图分析</h3><h4 id="（1）分析实体"><a href="#（1）分析实体" class="headerlink" title="（1）分析实体"></a>（1）分析实体</h4><ul>
<li><p>上下文流图</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041206162.png" alt="image-20210516111959965"></p>
</li>
<li><p>分析实体需要结合文字和上下文流图（外部实体也包括系统外的子系统）</p>
</li>
<li><p>先寻找题目文字中有哪些实体，然后看实体发出和接受的数据，然后即可和数据流图对应起来</p>
</li>
<li><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041207746.png" alt="image-20210516112540903"></p>
</li>
</ul>
<h4 id="（2）分析存储数据"><a href="#（2）分析存储数据" class="headerlink" title="（2）分析存储数据"></a>（2）分析存储数据</h4><ul>
<li><p>0层数据流图</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041207471.png" alt="image-20210516112306633"></p>
</li>
</ul>
<ul>
<li><p>主要看0层数据流图中输入和输出的信息，然后结合文字确定信息在题干中的名称（一般是数据名+表这种形式）</p>
</li>
<li><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041207016.png" alt="image-20210516112548314"></p>
</li>
<li><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041207641.png" alt="image-20210407213739002"></p>
</li>
</ul>
<h4 id="（3）寻找缺少数据流"><a href="#（3）寻找缺少数据流" class="headerlink" title="（3）寻找缺少数据流"></a>（3）寻找缺少数据流</h4><ul>
<li><p>题目往往需要我们在0层数据流图中补充缺失的数据流</p>
</li>
<li><p>以和加工元素为起点（P操作）分析题干文本，分析数据流是否齐全</p>
</li>
<li><p>缺少的数据流有三种类型：P-E  P-P  P-D</p>
</li>
<li><p>往往容易忽略的数据流类型为P-P，可以理解为数据经过一个加工后，又被传到另一个加工进行进一步的加工</p>
</li>
<li><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041207720.png" alt="image-20210516115805196"></p>
</li>
<li><p>保持数据流图平衡</p>
<p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210516143418916.png" alt="image-20210516143418916"></p>
</li>
</ul>
<h3 id="2-E-R模型分析"><a href="#2-E-R模型分析" class="headerlink" title="2*.E-R模型分析"></a>2*.E-R模型分析</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041207329.png" alt="image-20210516144214005"></p>
<p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210516144128568.png" alt="image-20210516144128568"></p>
<h4 id="（1）分析实体及联系类型"><a href="#（1）分析实体及联系类型" class="headerlink" title="（1）分析实体及联系类型"></a>（1）分析实体及联系类型</h4><ul>
<li><p>实体间联系类型</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041207457.png" alt="image-20210408074731356"></p>
</li>
<li><p>寻找题目与“签约”相关文本，可得到签约涉及的三个实体：经理，租客，公寓。其中合同中经理只有一个，而租客和公寓都是多个，可得到联系类型</p>
</li>
</ul>
<h4 id="（2）分析关系模式"><a href="#（2）分析关系模式" class="headerlink" title="（2）分析关系模式"></a>（2）分析关系模式</h4><ul>
<li>补全关系模式需要分析文本中相关的字段（即对象属性）</li>
<li>根据题目中列出的实体找出其所有属性即可</li>
</ul>
<h4 id="（3）新增联系"><a href="#（3）新增联系" class="headerlink" title="（3）新增联系"></a>（3）新增联系</h4><ul>
<li><p>增加一个新的联系类型，需要我们补充其与各个实体间的关系，与（1）（2）是一个逆过程</p>
</li>
<li><p>提取与维修相关的关键对象“维修工维修公寓”，补充E-R图</p>
</li>
<li><p>题干中没有指明联系类型，可根据实际情况，多个维修工对应多个公寓</p>
</li>
<li><p>根据E-R图得到新的关系模式“维修情况”，然后将E-R图转换为关系模式（关键在于找到各相关实体的键）</p>
<p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210516150231262.png" alt="image-20210516150231262"></p>
</li>
<li><p>E-R图转关系模式方法：<a href="https://blog.csdn.net/gaoying_blogs/article/details/16843515?ops_request_misc={" request_id"%3a"161570558016780255285810"%2c"scm"%3a"20140713.130102334.pc_all."}&request_id="161570558016780255285810&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-2-16843515.first_rank_v2_pc_rank_v29&utm_term=E-R模型"">E-R模型转化成关系模型</a></p>
</li>
</ul>
<h3 id="3-UML图分析"><a href="#3-UML图分析" class="headerlink" title="3.*UML图分析"></a>3.*UML图分析</h3><h4 id="（1）设计类分类"><a href="#（1）设计类分类" class="headerlink" title="（1）设计类分类"></a>（1）设计类分类</h4><ul>
<li>实体类：对必须存储信息和相关行为建模的类型（例如:事件、人员或者一些现实生活中的对象。实体类通常都是永久性的，它们所具有的属性和关系是长期需要的，关键词：<strong>储存</strong>，<strong>配置</strong>）</li>
<li>接口类：边界类是系统内部与系统外部的业务主角之间进行交互建模的类（接口类会随着外部环境变化而变化，往往与某种操作相关，关键词：<strong>显示</strong>，<strong>调用</strong>，<strong>发送</strong>）</li>
</ul>
<h4 id="（2）类图分析"><a href="#（2）类图分析" class="headerlink" title="（2）类图分析"></a>（2）类图分析</h4><ul>
<li><p>题目往往要求分析设计用例补充类图中的类名</p>
</li>
<li><p>类图</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041207696.png" alt="image-20210516153900737"></p>
</li>
<li><p>类图中关系</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041207673.png" alt="image-20210411075347236"></p>
<p><strong>关联关系：</strong>如果没有箭头，则表明为双向对的关联关系（关联关系默认不强调方向，表示对象间相互知道，例如：乘车人和车票之间就是一种关联关系）</p>
</li>
</ul>
<p>  <strong>泛化关系：</strong>泛化关系实质是类的继承（表现为继承非抽象类，例如：汽车与SUV之间为泛化关系，箭头指向父类）</p>
<p>​        <strong>实现关系：</strong>实现关系实质也是类的继承（表现为继承抽象类，        箭头指向父类）</p>
<p>​        <strong>依赖关系：</strong>描述一个对象在运行期间会用到另一个对象的关系        （箭头的指向为调用关系）</p>
<ul>
<li><p>类图多重性</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041207176.png" alt="image-20210411075231497"></p>
</li>
</ul>
<ul>
<li>找到未知类与其他类的关系，通过用例文字推理（如：配置信息与x1，x2，x3都有关联，则它们都是配置信息抽象出的类，然后再看它们和其他类的关系）</li>
</ul>
<h4 id="（3）状态图分析"><a href="#（3）状态图分析" class="headerlink" title="（3）状态图分析"></a>（3）状态图分析</h4><ul>
<li><p>状态图相关元素</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041207689.png" alt="image-20210516160923020"></p>
<p>状态转移的线上文字即状态转移的文字</p>
</li>
</ul>
<ul>
<li><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041207393.png" alt="image-20210516160733494"></li>
</ul>
<ul>
<li>题目往往要求补充状态，主要根据状态转移条件结合文本提到的相关状态触发流程分析即可</li>
</ul>
<h3 id="4-C语言程序分析"><a href="#4-C语言程序分析" class="headerlink" title="4.C语言程序分析"></a>4.C语言程序分析</h3><ul>
<li><p>以函数为单位分析，找出函数调用情况</p>
</li>
<li><p>程序代码补充，尽量不写重复代码。上下文可能会有对称的代码</p>
</li>
<li><p>搞明白填写处要实现的功能</p>
</li>
<li><p>算法策略：</p>
<ul>
<li>动态规划法会把问题拆成多个子问题，然后会有查表步骤</li>
<li>分治法的基本运用：二分查找。快速排序</li>
<li>回溯法通过不断回溯参数，吧所有可能性都尝试一遍直到</li>
<li>在有限时间找到满意的解，即局部的最优解（找不到最优解）</li>
</ul>
</li>
<li><p>时间复杂度分析（建议跳过）</p>
</li>
<li><p>程序运行输入输出，可以不看代码，而是从文字中提取出算法实现分析</p>
</li>
</ul>
<h3 id="5-C-程序分析"><a href="#5-C-程序分析" class="headerlink" title="5.C++程序分析"></a>5.C++程序分析</h3><ul>
<li><p>以对象为单位分析，可以结合类图分析程序</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041207178.png" alt="image-20210516194903836"></p>
</li>
<li><p>C++特点：</p>
<ul>
<li>权限修饰符：public:+属性/方法</li>
<li>c++中当定义类对象是指针对象时候，就需要用到 <strong>“-&gt;”</strong> 指向类中的成员；当定义一般对象时候时就需要用到 <strong>“.”</strong> 指向类中的成员</li>
<li>C++中要重写的方法往往用virtual虚函数修饰，有抽象之意</li>
<li>C++的继承：<code>class Dog : public Animal</code>表示Dog继承Animal</li>
</ul>
</li>
</ul>
<ul>
<li><p>从图可得PizzaBuilder缺少buildPart方法，由可以看到PizzaBuilder的子类重写了buildPart，所以可以参照重写的方法补充，因为作为抽象类所有是一个空方法<code>virtual void build Parts</code></p>
</li>
<li><p>补充类内方法中的代码：观察输入参数，观察上下文调用，观察类内属性</p>
</li>
<li><p>主函数中观察上下文生成的对象，确认需要调用的方法</p>
</li>
</ul>
<h3 id="6-Java程序分析"><a href="#6-Java程序分析" class="headerlink" title="6*.Java程序分析"></a>6*.Java程序分析</h3><ul>
<li><p>与C++类似，需要用面向对象的方法结合类图进行分析</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041207628.png" alt="image-20210516202909167"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>考试笔记</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>软考笔记</tag>
        <tag>考试相关</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|MyBatis学习</title>
    <url>/2021/05/07/Java/Java-Mybaits%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041329080.png" alt="image-20210904132917911"></p>
<span id="more"></span>

<h3 id="1-初识MyBatis"><a href="#1-初识MyBatis" class="headerlink" title="1.初识MyBatis"></a>1.初识MyBatis</h3><h4 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h4><ul>
<li>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射</li>
<li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作</li>
<li>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO为数据库中的记录</li>
</ul>
<h4 id="如果获取MyBatis"><a href="#如果获取MyBatis" class="headerlink" title="如果获取MyBatis"></a>如果获取MyBatis</h4><ul>
<li><p>maven添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>github下载源码</p>
</li>
<li><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
</li>
</ul>
<h4 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h4><ul>
<li>数据持久化：持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li>
<li>数据持久化的方法有：数据库（jdbc）,io文件持久化</li>
<li>持久层即完成持久化工作的代码块</li>
</ul>
<h4 id="为什么需要Mybatis"><a href="#为什么需要Mybatis" class="headerlink" title="为什么需要Mybatis"></a>为什么需要Mybatis</h4><ul>
<li><p>帮助程序将数据存入数据库中</p>
</li>
<li><p>方便</p>
</li>
<li><p>传统的JDBC代码太复杂，而Mybatis简化，自动化</p>
</li>
<li><p>优点：</p>
<ul>
<li>简单易学</li>
<li>灵活</li>
<li>sql和代码的分离，提高了可维护性,支持对象与数据库字段的关系映射</li>
<li>提供映射标签</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>通过xml标签，支持编写动态sql</li>
</ul>
</li>
</ul>
<h3 id="2-MyBatis使用流程"><a href="#2-MyBatis使用流程" class="headerlink" title="2.MyBatis使用流程"></a>2.MyBatis使用流程</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><ul>
<li><p>新建数据库</p>
</li>
<li><p>新建项目</p>
<ul>
<li><p>新建一个普通maven项目</p>
</li>
<li><p>删除src文件</p>
</li>
<li><p>导入相关依赖：mysql驱动，mybatis，junit等</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h4 id="创建一个模块"><a href="#创建一个模块" class="headerlink" title="创建一个模块"></a>创建一个模块</h4><ul>
<li>编写mybatis核心配置文件，该配置文件包含对MyBatis系统的核心设置，包含获取数据库连接实例的数据源（DataSource）和决定事务范围和控制方式的事务管理器（TransactionManager）</li>
</ul>
<ul>
<li><p>mybatis配置文件示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--数据库连接的配置信息 驱动 URL 用户名 密码 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 将写好的sql映射文件组成到该处（见代码编写部分） --&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>构建 SqlSessionFactory对象</p>
<ul>
<li>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。</li>
<li>SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得</li>
<li>而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出    SqlSessionFactory 实例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String resource = <span class="string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>获取 SqlSession实例、</p>
<ul>
<li><p>从 SqlSessionFactory 中可以获取 SqlSession实例</p>
</li>
<li><p>SqlSession 提供了在数据库执行 SQL 命令所需的所有方法</p>
</li>
<li><p>我们可以通过SqlSession实例来直接执行已映射的 SQL 语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">  Blog blog = mapper.selectBlog(<span class="number">101</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h4 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h4><ul>
<li><p>实体类</p>
<p>程序中的实体类对应着数据库中的字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String ame;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = Name;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>Dao接口</p>
<p>Dao接口用于操作数据库对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dao</span></span>&#123;</span><br><span class="line">	<span class="function">List&lt;test&gt; <span class="title">getList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>编写sql映射文件</p>
<ul>
<li><p>实现类由原来的Daolmpl（Dao接口实现类）转变为一个Mapper配置文件</p>
</li>
<li><p>namespace：名称空间 ，绑定一个对应的Dao或Mapper接口</p>
</li>
<li><p>id：sql的唯一标识 </p>
</li>
<li><p>resultType：返回值类型 </p>
</li>
<li><p>#{id}：从传递过来的参数中取出id值     </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.mybatis.example.BlogMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlog&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">select * from Blog where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>每个mapper.xml文件都要在Mybatis核心配置文件中注册</p>
<p>​       </p>
<h4 id="执行代码"><a href="#执行代码" class="headerlink" title="执行代码"></a>执行代码</h4><p>Test测试编写：</p>
<ul>
<li>获取SqlSession对象</li>
<li>执行sql（getMapper）</li>
<li>关闭SqlSession</li>
</ul>
<p>可能出现的问题：</p>
<ul>
<li>sql映射配置文件没注册</li>
<li>绑定接口错误</li>
<li>方法名不对</li>
<li>返回类型不对</li>
<li>Maven导出资源问题</li>
</ul>
<h3 id="3-CRUD"><a href="#3-CRUD" class="headerlink" title="3.CRUD"></a>3.CRUD</h3><p>在sql映射文件中编写CRUD</p>
<h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ul>
<li>编写接口（Dao/Mapper）</li>
<li>编写对应接口的sql语句</li>
<li>测试</li>
</ul>
<h4 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h4><p>namespace中的包名要与Dao/mapper接口的包名一致</p>
<h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><ul>
<li>id：对应namespace接口文件中的方法名</li>
<li>resultType：sql语句执行的返回值</li>
<li>parameterType：参数类型</li>
</ul>
<h4 id="insert-update-delete"><a href="#insert-update-delete" class="headerlink" title="insert update delete"></a>insert update delete</h4><p>增删改标签在映射文件中编写sql语句，调用时都需要提交事物</p>
<h4 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h4><ul>
<li>sql映射文件的标签和sql语句要对应</li>
<li>resource绑定mapper需要使用路径</li>
<li>程序配置文件必须符合规范</li>
<li>NullPointerException，没有注册到资源</li>
</ul>
<h4 id="Map参数类型"><a href="#Map参数类型" class="headerlink" title="Map参数类型"></a>Map参数类型</h4><ul>
<li>假设实体类或者数据库中的字段过多，我们可以使用Map作为parameterType的值</li>
<li>Map可以自动填充null</li>
<li>Map传递参数，直接在sql中取出key（多个参数用Map，或者注解）</li>
<li>对象传递参数，在sql中取对象的属性（只有一个基本类型参数下使用）</li>
</ul>
<h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><ul>
<li>Java代码执行时，传递通配符</li>
<li>也可以在在sql拼接中使用通配符</li>
</ul>
<h3 id="4-配置解析"><a href="#4-配置解析" class="headerlink" title="4.配置解析"></a>4.配置解析</h3><h4 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h4><ul>
<li><p>mybatis-config.xml</p>
</li>
<li><p>MyBaits的配置文件包含了会深深影响MyBatis行为的设置和属性信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="环境配置（environments）"><a href="#环境配置（environments）" class="headerlink" title="环境配置（environments）"></a>环境配置（environments）</h4><ul>
<li>尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境</li>
<li>MyBatis默认事务管理器时JDBC，连接池POOLED</li>
</ul>
<h4 id="属性（properties）"><a href="#属性（properties）" class="headerlink" title="属性（properties）"></a>属性（properties）</h4><ul>
<li>我们可以通过properties属性来实现引用外部配置文件，可以在其中增加一些属性配置（如果有同一字段，优先录取外部配置文件的）</li>
<li>这些属性都是可外部配置且动态替换的，既可以在典型的Java属性文件中配置，也可以通过properties的子元素传递</li>
<li>外部配置文件写入数据库连接相关属性</li>
</ul>
<h4 id="类型别名（ypeAliases）"><a href="#类型别名（ypeAliases）" class="headerlink" title="类型别名（ypeAliases）"></a>类型别名（ypeAliases）</h4><ul>
<li>类型别名可为 Java 类型设置一个缩写名字</li>
<li>它仅用于 XML 配置，意在降低冗余的全限定类名书写</li>
<li>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，默认使用 Bean 的首字母小写的非限定类名来作为它的别名</li>
</ul>
<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为</p>
<p>一个配置完整的 settings 元素的示例如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="映射器"><a href="#映射器" class="headerlink" title="映射器"></a>映射器</h4><p>MapperRegistry：注册绑定我们的Mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="生命周期与作用域"><a href="#生命周期与作用域" class="headerlink" title="生命周期与作用域"></a>生命周期与作用域</h4><p>作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题</p>
<p>SqlSessionFactoryBuilder：</p>
<ul>
<li>一旦创建了SqlSessionFactory，就不需要它了</li>
<li>局部变量</li>
</ul>
<p>SqlSessionFactory：</p>
<ul>
<li>数据库连接池</li>
<li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例</li>
<li>SqlSessionFactory最佳作用域是应用作用域</li>
<li>最简单的就是使用单例模式或者静态单例模式 （保证全局只有一个SqlSessionFactory）</li>
</ul>
<p>SqlSession：</p>
<ul>
<li>连接到连接池的一个请求</li>
<li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</li>
<li>用完之后需要赶紧关闭</li>
</ul>
<h3 id="5-ResultMap结果集映射"><a href="#5-ResultMap结果集映射" class="headerlink" title="5.ResultMap结果集映射"></a>5.ResultMap结果集映射</h3><p>当实体类中属性名和数据库中字段名不一致时会找不到对应字段</p>
<p>解决方案：</p>
<ul>
<li>在sql映射中为字段起别名，达到与实体类中属性名一致的目的</li>
<li>通过resultMap结果集映射，让数据库中的字段映射到实体类的属性</li>
</ul>
<h3 id="6-日志"><a href="#6-日志" class="headerlink" title="6.日志"></a>6.日志</h3><h4 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h4><p>如果一个数据库操作出现了异常，我们需要排错，这时候往往要用到日志。MyBatis可以开启日志工厂，具体使用哪个日志实现，在设置中设定</p>
<h4 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h4><ul>
<li><p>log4j简介</p>
<ul>
<li>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件……</li>
<li>可以控制每一条日志的输出格式</li>
<li>通过一个配置文件进行灵活配置，而不需要修改应用代码</li>
</ul>
</li>
<li><p>log4j使用</p>
<ul>
<li>导入log4j依赖</li>
</ul>
</li>
<li><p>写log4j.properties配置文件</p>
<ul>
<li>使用log4j类格式化输出</li>
</ul>
</li>
</ul>
<h3 id="7-分页"><a href="#7-分页" class="headerlink" title="7.分页"></a>7.分页</h3><p>分页可以减少数据处理量</p>
<h4 id="使用Limit分页"><a href="#使用Limit分页" class="headerlink" title="使用Limit分页"></a>使用Limit分页</h4><h4 id="使用Mybatis实现分页"><a href="#使用Mybatis实现分页" class="headerlink" title="使用Mybatis实现分页"></a>使用Mybatis实现分页</h4><ul>
<li>接口</li>
<li>Mapper.xml（sql映射配置文件）</li>
<li>测试</li>
</ul>
<h4 id="RowBounds分页"><a href="#RowBounds分页" class="headerlink" title="RowBounds分页"></a>RowBounds分页</h4><p>不建议在开发中使用</p>
<ul>
<li>接口</li>
<li>mapper.xml</li>
<li>测试</li>
</ul>
<h4 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h4><h3 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8.使用注解开发"></a>8.使用注解开发</h3><h4 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h4><p>面向接口编程：解耦，可拓展，提高复用，分层开发中，上层不用管具体实现</p>
<p>关于接口的理解：</p>
<ul>
<li>接口时定义域实现的分离</li>
<li>接口可以反映系统设计人员对系统的抽象理解</li>
</ul>
<p>三个面向区别：</p>
<ul>
<li>面向对象：考虑问题时，以对象为单位，考虑它属性及方法</li>
<li>面向过程：考虑问题时，以一个事务流程为单位，考虑它的实现</li>
<li>面向接口：体现对系统整体的架构</li>
</ul>
<h4 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h4><p>本质：反射机制实现</p>
<p>底层：动态代理</p>
<ul>
<li>注解在接口实现，取代了sql映射配置文件的功能</li>
<li>需要在核心配置我文件中绑定接口</li>
<li>测试</li>
</ul>
<h4 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h4><ul>
<li><p>多个参数时，所有的参数前面必须加上@Param(“id”)的注解</p>
</li>
<li><p>工具类创建时实现自动提交事务</p>
</li>
<li><p>关于@Param()注解</p>
<ul>
<li><p>基本数据类型或String类型的参数需要加上</p>
</li>
<li><p>引用类型不需要加</p>
</li>
</ul>
</li>
<li><p>#{}相较于${}可以更有效防止注解</p>
</li>
</ul>
<h3 id="9-Lombok"><a href="#9-Lombok" class="headerlink" title="9.Lombok"></a>9.Lombok</h3><p> Lombok是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，通过使用对应的注解，可以在编译源码的时候生成对应的方法</p>
<p>​    </p>
<h3 id="10-多对一处理"><a href="#10-多对一处理" class="headerlink" title="10.多对一处理"></a>10.多对一处理</h3><p>找到一名学生对应的老师（有多个学生是同一个老师）</p>
<h4 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h4><p>类似于sql的子查询</p>
<ul>
<li>查询所有学生信息</li>
<li>根据学生的tid寻找对应老师</li>
</ul>
<h4 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h4><h3 id="11-一对多处理"><a href="#11-一对多处理" class="headerlink" title="11.一对多处理"></a>11.一对多处理</h3><p>找到一名老师对应的多个学生</p>
<h4 id="按照结果嵌套查询"><a href="#按照结果嵌套查询" class="headerlink" title="按照结果嵌套查询"></a>按照结果嵌套查询</h4><h4 id="按照查询嵌套查询"><a href="#按照查询嵌套查询" class="headerlink" title="按照查询嵌套查询"></a>按照查询嵌套查询</h4><h3 id="12-动态SQL"><a href="#12-动态SQL" class="headerlink" title="12.动态SQL"></a>12.动态SQL</h3><p>动态sql就是根据不同条件生成不同的sql语句</p>
<p>所谓动态sql，本质上还是sql语句，只是我们可以在sql层面，去执行一个逻辑代码</p>
<p>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL格式排列组合即可</p>
<h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>根据条件拼接出不同的sql语句</p>
<h4 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise )"></a>choose (when, otherwise )</h4><p>类似于switch语句，匹配符合条件的标签拼接成新的sql语句</p>
<h4 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where, set)"></a>trim (where, set)</h4><ul>
<li><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除</li>
<li><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）</li>
</ul>
<h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）</p>
<h3 id="13-缓存"><a href="#13-缓存" class="headerlink" title="13.缓存"></a>13.缓存</h3><h4 id="缓存简介"><a href="#缓存简介" class="headerlink" title="缓存简介"></a>缓存简介</h4><ul>
<li>存在内存中的临时数据</li>
<li>将用户经常查询的数据放在缓存中，用户去查询数据可以直接在缓存中查询，提高了查询效率，解决了高并发系统的性能问题</li>
<li>使用缓存可以减少与数据库交互次数，减少系统开销，提高系统效率</li>
<li>经常查询而且不经常改变的数据使用缓存</li>
</ul>
<h4 id="Mybaiis缓存"><a href="#Mybaiis缓存" class="headerlink" title="Mybaiis缓存"></a>Mybaiis缓存</h4><ul>
<li>MyBatis包含一个非常强大的查询缓存特性，非常方便定制和配置缓存，极大提高查询效率</li>
<li>MyBatis系统中默认定义两级缓存<ul>
<li>默认情况下，MyBatis开启了一级缓存（SqlSession本地缓存）</li>
<li>二级缓存需要手动开启和配置（基于namespace级别的缓存，我们可以通过Cache接口自定义二级缓存）</li>
</ul>
</li>
</ul>
<h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><ul>
<li>与数据库同异常会话期间查询到的数据会放到本地缓存中</li>
<li>以后需要获取相同数据就可以直接在缓存中拿，而不必查询数据库</li>
</ul>
<p>缓存失效的情况：</p>
<ul>
<li>查询不同的东西</li>
<li>增删改操作会导致刷新缓存</li>
<li>手动清理缓存</li>
</ul>
<h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><p>二级缓存又叫全局缓存，一个命名空间对应一个二级缓存</p>
<p>二级缓存工作机制：</p>
<ul>
<li>一个会话查询的数据会被放在当前会话的一级缓存中</li>
<li>如果会话关闭，这个会话对应的一级缓存就被清除了</li>
<li>但是如果开启了二级缓存，会话关闭后，缓存的数据可以被保存在二级缓存中</li>
<li>新的会话查询就可以从二级缓存中获取内容</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>Java</tag>
        <tag>框架学习</tag>
        <tag>后端</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|SSM框架学习</title>
    <url>/2021/05/10/Java/Java-SSM%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040933389.png" alt="image-20210604151457606"></p>
<span id="more"></span>



<h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><h3 id="1-MCV解析"><a href="#1-MCV解析" class="headerlink" title="1.MCV解析"></a>1.MCV解析</h3><h4 id="MCV简介"><a href="#MCV简介" class="headerlink" title="MCV简介"></a>MCV简介</h4><ul>
<li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范</li>
<li>最典型的MVC就是JSP（视图） + servlet（控制器） + javabean（模型）的模式</li>
<li>Model：提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务</li>
<li>View：负责进行模型的展示，即用户界面</li>
<li>Controller：接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示</li>
</ul>
<h4 id="MCV架构图"><a href="#MCV架构图" class="headerlink" title="MCV架构图"></a>MCV架构图</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040934521.png" alt="image-20210605210445145"></p>
<p><strong>Model1时代：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040934842.png" alt="image-20210605210725858"></p>
<p><strong>Model2时代：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040934260.png" alt="image-20210605210745980"></p>
<h4 id="MVC框架的工作"><a href="#MVC框架的工作" class="headerlink" title="MVC框架的工作"></a>MVC框架的工作</h4><ul>
<li>将url映射到java类或java类的方法 .</li>
<li>封装用户提交的数据 .</li>
<li>处理请求–调用相关的业务处理–封装响应数据 .</li>
<li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li>
</ul>
<h3 id="2-初识Spring-MCV"><a href="#2-初识Spring-MCV" class="headerlink" title="2.初识Spring MCV"></a>2.初识Spring MCV</h3><h4 id="Spring-MCV简介"><a href="#Spring-MCV简介" class="headerlink" title="Spring MCV简介"></a>Spring MCV简介</h4><p>spring mcv特点：</p>
<ul>
<li>轻量级，简单易学</li>
<li>高效 , 基于请求响应的MVC框架</li>
<li>与Spring兼容性好，无缝结合</li>
<li>约定优于配置</li>
<li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li>
<li>简洁灵活</li>
</ul>
<h4 id="Spring-MCV中心控制器"><a href="#Spring-MCV中心控制器" class="headerlink" title="Spring MCV中心控制器"></a>Spring MCV中心控制器</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040934228.png" alt="image-20210605211539442"></p>
<p>Spring MCV  以请求为驱动 , 围绕一个中心Servlet分派请求及提供其他功能，而这个中心就是<strong>DispatcherServlet</strong>(它是继承自HttpServlet 基类)</p>
<h3 id="3-Spring-MCV处理流程"><a href="#3-Spring-MCV处理流程" class="headerlink" title="3.Spring MCV处理流程"></a>3.Spring MCV处理流程</h3><h4 id="Spring-MCV处理流程"><a href="#Spring-MCV处理流程" class="headerlink" title="Spring MCV处理流程"></a>Spring MCV处理流程</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040934444.png" alt="image-20210605212007518"></p>
<p>更加详细的展示如下：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040934219.png" alt="image-20210606152658001"></p>
<p>图上的连线表示SpringMVC框架已提供的技术，而需要进行开发的部分有：</p>
<ul>
<li>Handler处理器到数据库的部分</li>
<li>Handler处理器到模型的部分</li>
<li>视图到模型的部分</li>
<li>视图解析器到视图的部分</li>
</ul>
<h4 id="Spring-MCV处理流程代码实现（配置版）"><a href="#Spring-MCV处理流程代码实现（配置版）" class="headerlink" title="Spring MCV处理流程代码实现（配置版）"></a>Spring MCV处理流程代码实现（配置版）</h4><ul>
<li>编写配置文件</li>
<li>注册DispatcherServlet</li>
<li>添加处理映射器</li>
<li>添加处理适配器</li>
<li>添加视图解析器</li>
<li>编写业务Controller，返回ModelAndView（装数据，封视图）</li>
<li>将Controllor类注册到bean，形成映射</li>
<li>视图渲染显示ModellandView存放的数据</li>
</ul>
<h4 id="Spring-MCV处理流程代码实现（注解版）"><a href="#Spring-MCV处理流程代码实现（注解版）" class="headerlink" title="Spring MCV处理流程代码实现（注解版）"></a>Spring MCV处理流程代码实现（注解版）</h4><ul>
<li><p>实现步骤：</p>
<ul>
<li>新建一个web项目</li>
<li>导入相关jar包</li>
<li>编写web.xml , 注册DispatcherServlet</li>
<li>编写springmvc配置文件</li>
<li>接下来就是去创建对应的控制类 , controller</li>
<li>最后完善前端视图和controller之间的对应</li>
<li>测试运行调试.</li>
</ul>
</li>
<li><p>配置相关：使用springMVC必须配置的三大件：处理器映射器、处理器适配器、视图解析器</p>
</li>
<li><p>通常，我们只需要手动配置视图解析器，而处理器映射器和处理器适配器只需要开启注解驱动即可，而省去了大段的xml配置</p>
</li>
<li><p>解决Maven资源过滤的问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>在pom.xml文件引入相关的依赖</p>
<p>主要有Spring框架核心库、Spring MVC、servlet , JSTL等</p>
</li>
</ul>
<ul>
<li>配置web.xml<ul>
<li>注意web.xml版本问题，要最新版！</li>
<li>注册DispatcherServlet</li>
<li>关联SpringMVC的配置文件</li>
<li>启动级别为1</li>
<li>映射路径为 / 【不要用/*，会404】</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>添加Spring MVC配置文件<ul>
<li>让IOC的注解生效</li>
<li>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …..</li>
<li>MVC的注解驱动</li>
<li>配置视图解析器</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让Spring MVC不处理静态资源 过滤掉一些静态资源，如.css  .js  .html .mp3--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">支持mvc注解驱动</span></span><br><span class="line"><span class="comment">    在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">    要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">    必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">    和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">    这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">    而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问</p>
<ul>
<li><p>创建Controller</p>
<p>使用注解编写控制类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span><span class="comment">//多添加一级访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//真实访问地址 : 项目名/HelloController/hello</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span><span class="comment">//请求路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello,SpringMVC，我是成博&quot;</span>);</span><br><span class="line">        <span class="comment">//会被视图解析器处理，web-inf/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li>
<li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li>
<li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li>
<li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp</li>
</ul>
</li>
</ul>
<ul>
<li><p>创建视图层</p>
<p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="4-Controller的定义"><a href="#4-Controller的定义" class="headerlink" title="4.Controller的定义"></a>4.Controller的定义</h3><h4 id="实现接口Controller定义控制器法"><a href="#实现接口Controller定义控制器法" class="headerlink" title="实现接口Controller定义控制器法"></a>实现接口Controller定义控制器法</h4><p>该方法是较老的方法，而且定义方式比较麻烦，已不再广泛使用</p>
<h4 id="使用注解-Controller法"><a href="#使用注解-Controller法" class="headerlink" title="使用注解@Controller法"></a>使用注解@Controller法</h4><p>@Controller注解类型用于声明Spring类的实例是一个控制器</p>
<p>为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-RestFul-风格"><a href="#5-RestFul-风格" class="headerlink" title="5.RestFul 风格"></a>5.RestFul 风格</h3><h4 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h4><ul>
<li>资源：互联网所有的事物都可以被抽象为资源</li>
<li>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</li>
<li>分别对应 添加、 删除、修改、查询</li>
</ul>
<p>@PathVariable 注解</p>
<p>@PathVariable 注解，可以让方法参数的值对应绑定到一个URL模板变量上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//原来的 :  http://localhost: 8080/add?a=1&amp;b=2</span></span><br><span class="line">    <span class="comment">//RestFul :  http://localhost : 8080/add/1/2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//映射访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> p1, <span class="meta">@PathVariable</span> <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">        <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">        <span class="comment">//返回视图位置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="指定请求类型"><a href="#指定请求类型" class="headerlink" title="指定请求类型"></a>指定请求类型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们还可以使用组合注解指定请求类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@PatchMapping</span></span><br></pre></td></tr></table></figure>



<h3 id="6-SpringMVC的结果跳转"><a href="#6-SpringMVC的结果跳转" class="headerlink" title="6.SpringMVC的结果跳转"></a>6.SpringMVC的结果跳转</h3><h4 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h4><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p>
<p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p>
<h4 id="ServletAPI"><a href="#ServletAPI" class="headerlink" title="ServletAPI"></a>ServletAPI</h4><p>通过设置ServletAPI , 不需要视图解析器 .</p>
<ul>
<li>通过HttpServletResponse进行输出</li>
<li>通过HttpServletResponse实现重定向</li>
<li>通过HttpServletResponse实现转发</li>
</ul>
<h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><ul>
<li>通过SpringMVC来实现转发和重定向 - 无需视图解析器</li>
<li>通过SpringMVC来实现转发和重定向 - 有视图解析器</li>
</ul>
<h3 id="7-数据处理"><a href="#7-数据处理" class="headerlink" title="7.数据处理"></a>7.数据处理</h3><h4 id="处理提交的数据"><a href="#处理提交的数据" class="headerlink" title="处理提交的数据"></a>处理提交的数据</h4><ul>
<li><p>提交的域名称和处理方法的参数名一致</p>
<p>提交数据 : <code>[http://localhost](http://localhost/):8080/hello?name=test</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>提交的域名称和处理方法的参数名不一致</p>
<p>提交数据：<code>[http://localhost](http://localhost/):8080/hello?username=test</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交的是一个对象</p>
<p>如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null</p>
<p>提交数据：<code>http://localhost:8080/user?name=test&amp;id=1&amp;age=15</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h4><ul>
<li>通过ModelAndView：可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转</li>
<li>通过ModelMap：继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性</li>
<li>通过Model：只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解</li>
<li>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了</li>
</ul>
<h2 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h2><h3 id="1-SSM功能"><a href="#1-SSM功能" class="headerlink" title="1.SSM功能"></a>1.SSM功能</h3><p>SSM即Spring + Spring MVC + MyBatis</p>
<ul>
<li>Spring MVC 负责实现MCV设计模式，MyBatis负责数据持久层，Spring负责管理Spring MVC和MyBatis相关的创建和依赖注入</li>
<li>Spring MCV处理的是客户端与Java应用的关系，MyBatis处理的是Java应用与数据库的关系</li>
</ul>
<h3 id="2-SSM整合配置"><a href="#2-SSM整合配置" class="headerlink" title="2.SSM整合配置"></a>2.SSM整合配置</h3><h4 id="Maven添加所需依赖"><a href="#Maven添加所需依赖" class="headerlink" title="Maven添加所需依赖"></a>Maven添加所需依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring JDBC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring AOP --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MyBatis --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MyBatis整合Spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- C3P0 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- JSTL --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h4><p>当我们启动一个web项目容器时，首先非去读取web.xml内的配置</p>
<p>容器加载web.xml的过程</p>
<ul>
<li>首先读取配置文件中<code>&lt;listener&gt; &lt;/listener&gt;</code>和<code>&lt;context-param&gt; &lt;/context-param&gt;</code>两个节点</li>
<li>紧接着，容器创建一个ServletContext(application),这个web项目的所有部分都将共享这个上下文</li>
<li>容器以<code>&lt;context-param&gt;&lt;/context-param&gt;</code>的name作为键，value作为值，将其转化为键值对，存入ServletContext</li>
<li>容器创建<code>&lt;listener&gt;&lt;/listener&gt;</code>中的类实例，根据配置的class类路径<code>&lt;listener-class&gt;</code>来创建监听，在监听中会有初始化方法</li>
</ul>
<p>web.xml中配置SpringMCV，Spring，字符编码过滤器，加载静态资源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 启动Spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring MVC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 字符编码过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 加载静态资源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="spring-xml配置"><a href="#spring-xml配置" class="headerlink" title="spring.xml配置"></a>spring.xml配置</h4><p>spring.xml配置MyBatis和Spring的整合</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 整合MyBatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置MyBatis SqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/southwind/repository/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:config.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描自定义的Mapper接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.southwind.repository&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="config-xml-配置"><a href="#config-xml-配置" class="headerlink" title="config.xml 配置"></a>config.xml 配置</h4><p>config.xml 配置一些 MyBatis 辅助信息，比如打印 SQL 等</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打印SQL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定一个包名，MyBatis会在包名下搜索需要的JavaBean--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.southwind.entity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="springmvc-xml配置"><a href="#springmvc-xml配置" class="headerlink" title="springmvc.xml配置"></a>springmvc.xml配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描业务代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.southwind&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-SSM实现步骤"><a href="#3-SSM实现步骤" class="headerlink" title="3.SSM实现步骤"></a>3.SSM实现步骤</h3><h4 id="创建实体类（Entity）"><a href="#创建实体类（Entity）" class="headerlink" title="创建实体类（Entity）"></a>创建实体类（Entity）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="创建数据访问层（Repository）"><a href="#创建数据访问层（Repository）" class="headerlink" title="创建数据访问层（Repository）"></a>创建数据访问层（Repository）</h4><p>实现dao访问</p>
<ul>
<li><p>UserRepository访问数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li>UserRepository.xml配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.southwind.repository.UserRepository&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="创建服务接口（Service）"><a href="#创建服务接口（Service）" class="headerlink" title="创建服务接口（Service）"></a>创建服务接口（Service）</h4><p>服务层，注入dao主要用来进行业务的逻辑处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="实现服务接口（ServiceImpl）"><a href="#实现服务接口（ServiceImpl）" class="headerlink" title="实现服务接口（ServiceImpl）"></a>实现服务接口（ServiceImpl）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> com.southwind.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="实现控制器（Controller）"><a href="#实现控制器（Controller）" class="headerlink" title="实现控制器（Controller）"></a>实现控制器（Controller）</h4><p>注入服务，映射url</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;list&quot;</span>,userService.findAll());</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>Java</tag>
        <tag>框架学习</tag>
        <tag>后端</tag>
        <tag>SpringMCV</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|基于SSM评论管理系统开发</title>
    <url>/2021/06/30/Java/Java-%E5%9F%BA%E4%BA%8ESSM%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041811913.png" alt="img"></p>
<span id="more"></span>

<h3 id="Maven导入依赖"><a href="#Maven导入依赖" class="headerlink" title="Maven导入依赖"></a>Maven导入依赖</h3><h4 id="1-解决依赖标红问题"><a href="#1-解决依赖标红问题" class="headerlink" title="1.解决依赖标红问题"></a>1.解决依赖标红问题</h4><p><code>java.lang.ClassNotFoundException: Cannot find class: XXX</code></p>
<ul>
<li>在Maven仓库查找是否有对应版本</li>
<li>可以删除标红的版本粗暴解决</li>
<li>如果仍无法解决可以手动下载导入该jar</li>
</ul>
<h4 id="2-解决程序文件包引用问题"><a href="#2-解决程序文件包引用问题" class="headerlink" title="2.解决程序文件包引用问题"></a>2.解决程序文件包引用问题</h4><ul>
<li><p>通过重写构建项目查看导入的错误</p>
</li>
<li><p>参看外部库的包与Maven添加的包是否有重复冲突</p>
</li>
<li><p>使用idea修复，将Maven对应的包添加到类路径</p>
</li>
</ul>
<p>3.SSM常用依赖包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- jsp --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- servlet --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- json --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><h4 id="1-整体架构"><a href="#1-整体架构" class="headerlink" title="1.整体架构"></a>1.整体架构</h4><h4 id="2-主程序分层"><a href="#2-主程序分层" class="headerlink" title="2.主程序分层"></a>2.主程序分层</h4><p>业务逻辑：</p>
<p> <strong>Controller–&gt;service接口–&gt;serviceImpl–&gt;dao接口–&gt;daoImpl–&gt;mapper–&gt;db</strong></p>
<p>执行流程：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041811913.png" alt="img"></p>
<p>而<code>bean/pojo</code>则是实体类作为各层次处理传递的对象：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041811687.png" alt="image-20210629104056016"></p>
<h3 id="相关配置文件"><a href="#相关配置文件" class="headerlink" title="相关配置文件"></a>相关配置文件</h3><h4 id="1-web-xml"><a href="#1-web-xml" class="headerlink" title="1.web.xml"></a>1.web.xml</h4><p>一般放在web文件夹的WEB-INF文件下，用于配置SSM整体的框架配置，以下是常用的配置项</p>
<p>1.启动Spring容器</p>
<p>指向applicationContext.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2.springmvc的前端控制器，拦截所有请求</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring mvc核心：分发servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- spring mvc的配置文件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3.字符编码过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3、字符编码过滤器，一定要放在所有过滤器之前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>4.Rest API配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 4、使用Rest风格的URI，将页面普通的post请求转为指定的delete或者put请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>5.数据包解析配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--HttpPutFormContentFilter：将请求体中的数据解析包装成一个map --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-applicationContext-xml"><a href="#2-applicationContext-xml" class="headerlink" title="2.applicationContext.xml"></a>2.applicationContext.xml</h4><p>整合spring和mybatis配置，一般用于配置数据库连接和数据库实体类，mapper实体类（可用于自动装配）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span> <span class="attr">xmlns:jdbc</span>=<span class="string">&quot;http://www.springframework.org/schema/jdbc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库配置信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描XML配置文件：数据库连接对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对应实体类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pojo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 查找映射配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描Mapper类：映射方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.comments.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-springmvc-xml"><a href="#3-springmvc-xml" class="headerlink" title="3.springmvc.xml"></a>3.springmvc.xml</h4><p>主要用于管理映射关系和视图的定位</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span> <span class="attr">xmlns:jdbc</span>=<span class="string">&quot;http://www.springframework.org/schema/jdbc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描Controller注解，并纳入Spring管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.app.controller&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注解驱动，使访问路径与方法比配通过注解配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置静态页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图定位 --&gt;</span></span><br><span class="line">    &lt;bean</span><br><span class="line">            class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-配置文件处理流程"><a href="#4-配置文件处理流程" class="headerlink" title="4.配置文件处理流程"></a>4.配置文件处理流程</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041811953.png" alt="SSM框架的整合与使用——实现简单的转账系统"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041812536.png" alt="image-20210904181218197"></p>
<h3 id="Bean层"><a href="#Bean层" class="headerlink" title="Bean层"></a>Bean层</h3><p>首先创建实体层，实体层是各层次用于输入输出处理的数据对象可以参照数据库设计所需的对象与属性</p>
<h4 id="1-Java-Bean概念"><a href="#1-Java-Bean概念" class="headerlink" title="1.Java Bean概念"></a>1.Java Bean概念</h4><p>JavaBeans是Java一种特殊的类，既可以是单独的类型，也可以将多个对象封装到一个类中。</p>
<p>在系统设计中，其常常对应数据库的字段抽象</p>
<p>区别于其他的类，Bean一定会有提供getter和setter方法访问对象的每一个私有属性</p>
<h4 id="2-Java-Bean构造方法"><a href="#2-Java-Bean构造方法" class="headerlink" title="2.Java Bean构造方法"></a>2.Java Bean构造方法</h4><h5 id="手动编码"><a href="#手动编码" class="headerlink" title="手动编码"></a>手动编码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.content = content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="数据库生成"><a href="#数据库生成" class="headerlink" title="数据库生成"></a>数据库生成</h5><p>Idea可以通过数据库工具生成Bean实体类</p>
<p>连接好数据库（注意某些版本的mysql需要填写时区，一般我会填为GMT）</p>
<p>依据数据表生成Bean</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041650556.png" alt="image-20210904165034192"></p>
<h5 id="Lombok插件补全"><a href="#Lombok插件补全" class="headerlink" title="Lombok插件补全"></a>Lombok插件补全</h5><p>通过lombok工具，我们只需要在Bean属性添加相关注解，idea会自动为我们生成getter和setter方法</p>
<ul>
<li>idea中安装插件Lombok（最新版idea已捆绑）</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041657535.png" alt="image-20210904165746685"></p>
<ul>
<li>maven中引入lombok包</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>编写Bean与注解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">private long id;</span><br><span class="line"></span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">private String content;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>自动生成方法</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041703886.png" alt="image-20210904170341335"></p>
</li>
</ul>
<h3 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h3><h4 id="1-构建SQL"><a href="#1-构建SQL" class="headerlink" title="1.构建SQL"></a>1.构建SQL</h4><ul>
<li>1.xml映射文件法</li>
</ul>
<p>Dao层（即Mapper层）内有两个文件，Mapper文件创建方法对应到xml文件映射sql语句处理实体类</p>
<p><strong>xml文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这里namespace指向CategoryMapper即可将sql语句与Mapper中的方法绑定 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单独使用xml映射sql语句时，指向是实体类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.app.mapper.CategoryMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Category&quot;</span> &gt;</span></span><br><span class="line">        insert into category_ ( name ) values (#&#123;name&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Category&quot;</span> &gt;</span></span><br><span class="line">        delete from category_ where id= #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;get&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;_int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.app.pojo.Category&quot;</span>&gt;</span></span><br><span class="line">        select * from   category_  where id= #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Category&quot;</span> &gt;</span></span><br><span class="line">        update category_ set name=#&#123;name&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.app.pojo.Category&quot;</span>&gt;</span></span><br><span class="line">        select * from   category_</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>Mapper文件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.app.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.app.pojo.Category;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sql方法映射（可以用注解，也可以与映射到Category.xml文件）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Category category)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Category category)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>2.注解法</p>
<p>直接通过注解将方法映射到sql语句（简单项目推荐这个）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 映射动态的sql语句</span></span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法内填写的是CategoryDynaSqlProvider类中定义的动态sql</span></span><br><span class="line">    <span class="meta">@InsertProvider(type = CategoryDynaSqlProvider.class, method = &quot;add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">add</span><span class="params">(Category category)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteProvider(type = CategoryDynaSqlProvider.class, method = &quot;delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SelectProvider(type = CategoryDynaSqlProvider.class, method = &quot;get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@UpdateProvider(type = CategoryDynaSqlProvider.class, method = &quot;update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Category category)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SelectProvider(type =  CategoryDynaSqlProvider.class, method = &quot;list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>3.动态sql法</li>
</ul>
<p>用Java表示sql语句，达到sql语句动态化效果</p>
<p><strong>SqlProvider文件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 列出所有用户数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">            .SELECT(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            .FROM(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">            .toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得指定id用户数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">            .SELECT(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            .FROM(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">            .WHERE(<span class="string">&quot;id=#&#123;id&#125;&quot;</span>)</span><br><span class="line">            .toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得指定名字用户数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getname</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">            .SELECT(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">            .FROM(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">            .WHERE(<span class="string">&quot;name=#&#123;name&#125;&quot;</span>)</span><br><span class="line">            .toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">            .INSERT_INTO(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">            .VALUES(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;#&#123;name&#125;&quot;</span>)</span><br><span class="line">            .VALUES(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;#&#123;password&#125;&quot;</span>)</span><br><span class="line">            .VALUES(<span class="string">&quot;role&quot;</span>,<span class="string">&quot;#&#123;role&#125;&quot;</span>)</span><br><span class="line">            .toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">            .UPDATE(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">            .SET(<span class="string">&quot;name=#&#123;name&#125;&quot;</span>)</span><br><span class="line">            .SET(<span class="string">&quot;password=#&#123;password&#125;&quot;</span>)</span><br><span class="line">            .SET(<span class="string">&quot;role=#&#123;role&#125;&quot;</span>)</span><br><span class="line">            .WHERE(<span class="string">&quot;id=#&#123;id&#125;&quot;</span>)</span><br><span class="line">            .toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">            .DELETE_FROM(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">            .WHERE(<span class="string">&quot;id=#&#123;id&#125;&quot;</span>)</span><br><span class="line">            .toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>Mapper文件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据库User表操作</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="meta">@InsertProvider(type=UsersSqlProvider.class,method=&quot;add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Users users)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="meta">@DeleteProvider(type=UsersSqlProvider.class,method=&quot;delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找用户</span></span><br><span class="line">    <span class="meta">@SelectProvider(type=UsersSqlProvider.class,method=&quot;get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找用户(按名字)</span></span><br><span class="line">    <span class="meta">@SelectProvider(type=UsersSqlProvider.class,method=&quot;getname&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">getname</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新用户</span></span><br><span class="line">    <span class="meta">@UpdateProvider(type=UsersSqlProvider.class,method=&quot;update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Users users)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列出所有用户</span></span><br><span class="line">    <span class="meta">@SelectProvider(type=UsersSqlProvider.class,method=&quot;list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="2-Mapper的自动装配"><a href="#2-Mapper的自动装配" class="headerlink" title="2.Mapper的自动装配"></a>2.Mapper的自动装配</h4><p>applicationContext配置扫描Mpaper类，Spring自动装配Mapper类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 扫描XML配置文件：数据库连接对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对应实体类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pojo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 查找映射配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/comments/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 扫描Mapper类：映射方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.comments.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-Mapper测试"><a href="#3-Mapper测试" class="headerlink" title="3.Mapper测试"></a>3.Mapper测试</h4><p>mapper层测试方法：其用与serivce层的实现类一样的方法对mapper层进行调用，从而实现对mapper层的测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">// 加载配置文件进行测试</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &#123;&quot;classpath:applicationContext.xml&quot;, &quot;classpath:springMVC.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 注解装配要测试的Mapper类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列出用户测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Users&gt; user = userMapper.list();</span><br><span class="line">        <span class="keyword">for</span>(Users u :user)&#123;</span><br><span class="line">            System.out.println(u.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入用户测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Users user = <span class="keyword">new</span> Users();</span><br><span class="line">        user.setName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        user.setRole(<span class="string">&quot;vistor&quot;</span>);</span><br><span class="line">        userMapper.add(user);</span><br><span class="line">        testList();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="Serivce层"><a href="#Serivce层" class="headerlink" title="Serivce层"></a>Serivce层</h3><p>服务层有serivce接口和serivceimlmpl实现两个文件，该层主要用于调用dao层与数据库交互并为controller层提供服务</p>
<h4 id="1-serivce接口"><a href="#1-serivce接口" class="headerlink" title="1.serivce接口"></a>1.serivce接口</h4><ul>
<li>其函数构成与mapper文件类似（都是一些增删改查的方法），serivce内的函数可以以一些需要用户填写的字段作为参数</li>
<li>但是mapper是面向dao层使用的（与数据库联系）</li>
<li>而serivce是面向controller层使用的（与用户端联系）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Users服务接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列出所有用户</span></span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(String name, String password, String role)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找用户</span></span><br><span class="line">    <span class="function">Users <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找用户(按名字)</span></span><br><span class="line">   <span class="function">Users <span class="title">getname</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id ,String name, String password)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="2-serivceimlmpl实现类"><a href="#2-serivceimlmpl实现类" class="headerlink" title="2.serivceimlmpl实现类"></a>2.serivceimlmpl实现类</h4><ul>
<li>serivce接口的具体实现</li>
<li>注解Service（类似于@Component，@Controller）</li>
<li>将类自动注册到Spring容器，而不需要定义bean</li>
<li>控制类可以直接通过接口调用到其实现类中的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersServiceImpl</span> <span class="keyword">implements</span> <span class="title">UsersService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列出所有用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Users&gt; user = userMapper.list();</span><br><span class="line">        <span class="keyword">for</span>(Users u :user)&#123;</span><br><span class="line">            System.out.println(u.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(String name, String password, String role)</span></span>&#123;</span><br><span class="line">            Users users =  <span class="keyword">new</span> Users();</span><br><span class="line">            users.setName(name);</span><br><span class="line">            users.setPassword(password);</span><br><span class="line">            users.setRole(role);</span><br><span class="line">            userMapper.add(users);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userMapper.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">       Users user = userMapper.get(id);</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找用户(按名字)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">getname</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       Users user =  userMapper.getname(name);</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id ,String name, String password)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Users users =  userMapper.get(id);</span><br><span class="line">        users.setName(name);</span><br><span class="line">        users.setPassword(password);</span><br><span class="line">        userMapper.update(users);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="3-Serivce的自动装配"><a href="#3-Serivce的自动装配" class="headerlink" title="3.Serivce的自动装配"></a>3.Serivce的自动装配</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 扫描Controller注解，并纳入Spring管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.comments.controller&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 扫描service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.comments.service&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>









<h4 id="4-Serivce层测试"><a href="#4-Serivce层测试" class="headerlink" title="4.Serivce层测试"></a>4.Serivce层测试</h4><p>加载配置文件，并装配服务对象进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Service层测试方法</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">// 加载配置文件进行测试</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &#123;&quot;classpath:applicationContext.xml&quot;, &quot;classpath:springMVC.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersServiceImplTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UsersService usersService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        usersService.list();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = usersService.add(<span class="string">&quot;精灵&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="string">&quot;vistor&quot;</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">testGet1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        Users user = usersService.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">testGet2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">         Users user = usersService.getname(<span class="string">&quot;1111&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">testupdate</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = usersService.update(<span class="number">2</span>,<span class="string">&quot;test&quot;</span>,<span class="string">&quot;12345&quot;</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="Json消息体"><a href="#Json消息体" class="headerlink" title="Json消息体"></a>Json消息体</h3><h4 id="1-自定义Json消息体"><a href="#1-自定义Json消息体" class="headerlink" title="1.自定义Json消息体"></a>1.自定义Json消息体</h4><p>建立util文件放入JsonMsg类，用于设置Json返回对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">jsonmsg</span><span class="params">(String staut, String msg)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    jsonObject.put(staut, msg);</span><br><span class="line">    <span class="keyword">return</span> jsonObject.toJSONString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-Fastjson"><a href="#2-Fastjson" class="headerlink" title="2.Fastjson"></a>2.Fastjson</h4><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象</p>
<ul>
<li>添加maven依赖</li>
<li>使用注解获得相应的JSONField / 创建JSON对象输出</li>
</ul>
<h3 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h3><p>负责调用服务层的方法，并映射路径提供给客户端使用</p>
<h4 id="1-请求映射"><a href="#1-请求映射" class="headerlink" title="1.请求映射"></a>1.请求映射</h4><ul>
<li>路径映射</li>
<li>请求方式</li>
<li>Controller默认以返回值去寻找资源，如果配置了jsp则会寻找对应jsp，加上@ResponseBody注解则直接输出返回的内容（如json）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获得指定用户</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/list/&#123;id&#125;&quot;, method = RequestMethod.GET, produces = &quot;application/json; charset=utf-8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getuser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Users res = usersService.get(id);</span><br><span class="line">    <span class="keyword">return</span> JSONObject.toJSONString(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2-请求数据获取"><a href="#2-请求数据获取" class="headerlink" title="2.请求数据获取"></a>2.请求数据获取</h4><ul>
<li><p>数据过滤判断</p>
</li>
<li><p>请求415问题的解决</p>
<p>Java后端不能对POST或PUT发来的form-data,x-www-form-urlencoded的数据进行处理而出现的问题</p>
<p>@RequestBody只能处理通过json发送的请求</p>
</li>
<li><p>POST请求获得数据类型与方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新增用户</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/insert&quot;, method = RequestMethod.POST, produces = &quot;application/json; charset=utf-8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insert</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String,String&gt; params)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// json消息</span></span><br><span class="line">    JsonMsg json = <span class="keyword">new</span> JsonMsg();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 获得要更新用户请求数据</span></span><br><span class="line">    String name = params.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    String password = params.get(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    String role = params.get(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 数据库查询名称</span></span><br><span class="line">    Users users =  usersService.getname(name);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(users == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 参数齐全判断</span></span><br><span class="line">        <span class="keyword">if</span> (name != <span class="keyword">null</span> &amp;&amp; password != <span class="keyword">null</span> &amp;&amp; role != <span class="keyword">null</span>) &#123;</span><br><span class="line">            usersService.add(name, password, role);</span><br><span class="line">            <span class="keyword">return</span> json.jsonmsg(<span class="string">&quot;200&quot;</span>, <span class="string">&quot;新增用户成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> json.jsonmsg(<span class="string">&quot;400&quot;</span>, <span class="string">&quot;参数不齐全&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> json.jsonmsg(<span class="string">&quot;400&quot;</span>, <span class="string">&quot;用户名已重复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<h4 id="3-中文乱码问题"><a href="#3-中文乱码问题" class="headerlink" title="3.中文乱码问题"></a>3.中文乱码问题</h4><ul>
<li><p>参考文章：<a href="https://blog.csdn.net/kalision/article/details/46441081">彻底解决Spring MVC 中文乱码</a></p>
</li>
<li><p>过滤器</p>
<p>在web.xml设置编码过滤器解决编码问题</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 编码过滤器 --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;characterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">        &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;forceEncoding&lt;&#x2F;param-name&gt;</span><br><span class="line">        &lt;param-value&gt;true&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;</span><br><span class="line">&lt;&#x2F;filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;characterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li>produces属性</li>
</ul>
<p>@RequestMapping注解可以设置发送和接收数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/delete/&#123;id&#125;&quot;, method = RequestMethod.DELETE, produces = &quot;application/json; charset=utf-8&quot;)</span></span><br></pre></td></tr></table></figure>





<h4 id="4-Controller自动装配"><a href="#4-Controller自动装配" class="headerlink" title="4.Controller自动装配"></a>4.Controller自动装配</h4><p>如果仅仅是返回json可以配置驱动，如果有jsp页面则需要配置静态页面并且视图定位</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注解驱动，使访问路径与方法匹配通过注解配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置静态页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图定位 --&gt;</span></span><br><span class="line">&lt;bean</span><br><span class="line">        class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="5-Controller层测试"><a href="#5-Controller层测试" class="headerlink" title="5.Controller层测试"></a>5.Controller层测试</h4><ul>
<li>使用mock模拟用户进行测试（比较复杂，一般不建议使用）</li>
<li>运行tomcat服务器后，使用浏览器+postman进行测试</li>
<li><code>System.out.println</code>控制台输出</li>
</ul>
<h3 id="Web服务器添加"><a href="#Web服务器添加" class="headerlink" title="Web服务器添加"></a>Web服务器添加</h3><h4 id="1-添加WEB工件"><a href="#1-添加WEB工件" class="headerlink" title="1.添加WEB工件"></a>1.添加WEB工件</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041759524.png" alt="image-20210904175428011"></p>
<h4 id="2-配置tomcat服务器"><a href="#2-配置tomcat服务器" class="headerlink" title="2.配置tomcat服务器"></a>2.配置tomcat服务器</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041759825.png" alt="image-20210904175840362"></p>
<p>添加刚才创建的工件（注意修改上下文，这里影响访问的url）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041819887.png" alt="image-20210904180030909"></p>
<h4 id="3-测试服务器"><a href="#3-测试服务器" class="headerlink" title="3.测试服务器"></a>3.测试服务器</h4><p>出现端口冲突，可以修改http端口和JMX端口，但要注意修改tomcat的server.xml文件为对应的http端口</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041819682.png" alt="image-20210904180518251"></p>
<p>也可以找到正在运行的端口，然后关闭其进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -aon|findstr 8080</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">taskkill -f -pid 进程编号</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
        <tag>Java</tag>
        <tag>框架学习</tag>
        <tag>后端</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript|编程艺术</title>
    <url>/2020/02/19/JavaScript/JavaScript-%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109042333467.png" alt="image-20210904233318993"></p>
<span id="more"></span>

<p>早期的JavaScript在各个浏览器环境的兼容性很差，编程人员必须编写大量<strong>浏览器嗅探</strong>代码来探测浏览器，几个关键新技术给JavaScript带来了春天。</p>
<p>W3C (万维网联盟)推出的标准化DOM (Document Object Model,<strong>文档对象模型</strong>)，它支持市场上所有常见的浏览器。其次，兴起的Ajax技术，(以DOM和JavaScript语言(以及CSS和XHTML)为基本要素，基于Ajax技术的网站离不开JavaScript和DOM脚本。</p>
<p> 只要运用得当，再注意避开那些经典的JavaScript 陷阱，DOM编程技术就可以成为Web开发工具箱里又一件功能强大甚至是不可或缺的好东西。</p>
<h3 id="JavaScript简史"><a href="#JavaScript简史" class="headerlink" title="JavaScript简史"></a>JavaScript简史</h3><p>Web标准三大件：XHTML (可扩展的超文本标记语言)和CSS (层叠样式表)，DOM（文档对象模型）</p>
<h4 id="JavaScript与DOM"><a href="#JavaScript与DOM" class="headerlink" title="JavaScript与DOM"></a>JavaScript与DOM</h4><p>在JavaScript出现之前，Web浏览器局限于枯燥的文本，在JavaScript出现之后，网页的交互性显著提高。</p>
<h5 id="1-关于JavaScript"><a href="#1-关于JavaScript" class="headerlink" title="1.关于JavaScript"></a>1.关于JavaScript</h5><p>JavaScript是一种脚本语言,JavaScript脚本通常只能通过Web浏览器去完成某种操作而不是如普通意义上的程序那样可以独立运行。</p>
<h5 id="2-关于DOM"><a href="#2-关于DOM" class="headerlink" title="2.关于DOM"></a>2.关于DOM</h5><p>DOM是对文档内容对象化的方法，有面对对象编程的思想。所谓对象就是人们约定俗成的客观事物和描述性的抽象概念，万物皆可对象</p>
<h4 id="Web开发标准"><a href="#Web开发标准" class="headerlink" title="Web开发标准"></a>Web开发标准</h4><h5 id="1-DHTML"><a href="#1-DHTML" class="headerlink" title="1.DHTML"></a>1.DHTML</h5><p>DHTML即动态HTML，DHTML = HTML + CSS + JavaScript</p>
<ul>
<li><p>HTML负责标记网页各部分元素</p>
</li>
<li><p>CSS负责设置各个元素的排布</p>
</li>
<li><p>JavaScript负责实时操控和改变各有关样式</p>
</li>
</ul>
<h5 id="2-相关标准"><a href="#2-相关标准" class="headerlink" title="2.相关标准"></a>2.相关标准</h5><p>DOM的实际用处相当于一种API（应用编程接口），即一组各方共同认可的标准，而不是一种编程语言。</p>
<p>相关语法会应所使用的编程语言而改变，而标准是保持不变的。你可以通过JavaScript来使用DOM，今后也可以通过PHP和Python来使用它</p>
<p>W3C对DOM的定义是:“一个与系统平台和编程语言无关的接口，程序和脚本可以通过这个接口动态地对文档的内容、结构和样式进行访问和修改。”</p>
<h3 id="JavaScript语法"><a href="#JavaScript语法" class="headerlink" title="JavaScript语法"></a>JavaScript语法</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h5 id="1-js的添加方法"><a href="#1-js的添加方法" class="headerlink" title="1.js的添加方法"></a>1.js的添加方法</h5><p>（1）第一种方法是把js代码直接放在html文档中，一般放在最后</p>
<p>（2）最佳的方案是将js代码单独放在一个文件中，用<code>&lt;script&gt;</code>标签的src属性指向该文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;file.js&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="2-语言类型"><a href="#2-语言类型" class="headerlink" title="2.语言类型"></a>2.语言类型</h5><p>程序设计语言有解释型和编译型两大类。</p>
<p>Java和c++等语言需要编译器才能转化为二进制的可执行文件</p>
<p>解释型语言如js，则不需要编译器，它们仅仅需要解释器</p>
<p>编译型语言再编译阶段就会报错，而解释型语言要到执行阶段才能查到错误</p>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="1-基本内容"><a href="#1-基本内容" class="headerlink" title="1.基本内容"></a>1.基本内容</h5><p>变量即会发生变化的值，把值存入变量的操作称为赋值。</p>
<p>值得注意的是js与python一样是无类型语言，它们都允许直接对变量进行赋值而无需声明，其他语言如c语言，java等都要求——先声明，再使用</p>
<p>但是为了编程的规范型，js也往往有对变量做出声明的习惯</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mood;</span><br><span class="line"><span class="keyword">var</span> age;</span><br><span class="line"><span class="keyword">var</span> mood, age;</span><br></pre></td></tr></table></figure>

<p>在js中，变量和其他语法元素名字是区分大小写的</p>
<h5 id="2-命名规则"><a href="#2-命名规则" class="headerlink" title="2.命名规则"></a>2.命名规则</h5><ul>
<li>JavaScript语法不允许变量的名字中包含空格或标点符号(但美元符号“$”例外)</li>
<li>JavaScript变量名允许包含字母、数字、美元符号和下划线字符。为了让比较长的变量名有更好的可读性,可以在变量名中的适当位置插入一个下划线字符</li>
</ul>
<h5 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h5><p>js中无需进行类型声明，字符串型和数值型的赋值语法是一样的。</p>
<p>依据语言是否要对数据类型进行声明把语言分为<strong>强类型</strong>和<strong>弱类型</strong></p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="string">&quot;三&quot;</span>;</span><br><span class="line">age = <span class="number">33</span>;</span><br></pre></td></tr></table></figure>

<p>其在强类型语言中是非法的，但在js语言中完全ok（好像并不是什么好事）</p>
<h5 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h5><p>字符串，数值和布尔值都属于离散值，它们任意时刻就只能有一个值。而数组则可以用一个变量同时存储一组值</p>
<p>（1）数组需要用关键字Array来<strong>声明</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> beatles = <span class="built_in">Array</span>(<span class="number">4</span>); <span class="comment">//确定数组长度</span></span><br><span class="line"><span class="keyword">var</span> bratles = <span class="built_in">Array</span>(); <span class="comment">//不确定长度</span></span><br></pre></td></tr></table></figure>



<p>（2）向数组添加元素的操作称为<strong>填充</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">beatles[<span class="number">0</span>] = <span class="string">&quot;Jhon&quot;</span>; <span class="comment">//通过下标确定存放位置</span></span><br><span class="line"><span class="keyword">var</span> beatles = <span class="built_in">Array</span>(<span class="string">&quot;j&quot;</span>,<span class="string">&quot;p&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> beatles = [<span class="string">&quot;j&quot;</span>,<span class="string">&quot;p&quot;</span>,<span class="string">&quot;r&quot;</span>];</span><br></pre></td></tr></table></figure>

<p>事实上，只需要一对方括号就可以创建我们想要的数组，但是在声明或填充数组时写出Array关键字是一个良好的编程习惯</p>
<p>（3）关联数组</p>
<p>数组的下标可以是字符串，通过各元素的名字来引用它们，提高了脚本的可读性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lennon = <span class="built_in">Array</span>();</span><br><span class="line">lennon[ <span class="string">&quot;name&quot;</span>] = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">lennon[<span class="string">&quot;year&quot;</span>] = <span class="number">1940</span>;</span><br><span class="line">lennon[<span class="string">&quot;living&quot;</span>] = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<p>再用新的数组来存储数组（二维数组的概念）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> beatles = <span class="built_in">Array</span>();</span><br><span class="line">beatles[<span class="number">0</span>] = lennon;</span><br><span class="line"><span class="comment">//则有beatles[0][&quot;year&quot;]值为1940</span></span><br></pre></td></tr></table></figure>



<h5 id="5-操作"><a href="#5-操作" class="headerlink" title="5.操作"></a>5.操作</h5><p>只说一点——js的操作符是真的骚，有很多奇奇怪怪的骚操作。</p>
<h4 id="条件与循环语句"><a href="#条件与循环语句" class="headerlink" title="条件与循环语句"></a>条件与循环语句</h4><p>条件语句与其他语言是一样一样的，都涉及到比较操作符和逻辑操作符</p>
<p>循环语句中for循环最常用于对数组的全体元素进行遍历处理，常常会用到array.length属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> beatles = <span class="built_in">Array</span>(<span class="string">&quot;John&quot;</span> ,<span class="string">&quot;Paul&quot;</span> ,<span class="string">&quot;George&quot;</span> ,<span class="string">&quot;Ringo&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> count = <span class="number">0</span> ; count &lt; beatles.length; count++)&#123;</span><br><span class="line">alert(beatles[ count]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>重复使用的一组语句，可以打包成为一个函数，供我们随时调用。作为种良好的编程习惯，你们应该先对函数做出定义再调用它们。</p>
<h5 id="1-基本内容-1"><a href="#1-基本内容-1" class="headerlink" title="1.基本内容"></a>1.基本内容</h5><p>（1）函数的声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shout</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>



<p>（2）函数的调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shout();</span><br></pre></td></tr></table></figure>



<h5 id="2-参数"><a href="#2-参数" class="headerlink" title="2.参数"></a>2.参数</h5><p>（1）函数接收参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> total = num1 * num2;</span><br><span class="line">alert(total);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以在任意位置调用这个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">multiply(<span class="number">10</span>,<span class="number">2</span>); </span><br></pre></td></tr></table></figure>



<p>（2）函数返回参数</p>
<p>函数不仅仅可以接收数据，还可以返回数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertToCelsius</span>(<span class="params">temp</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = temp - <span class="number">32</span>;</span><br><span class="line">result = result / <span class="number">1.8</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> temp_fahrenheit = <span class="number">95</span>;</span><br><span class="line"><span class="keyword">var</span> temp_celsius = convertToCelsius(temp_ fahrenheit);</span><br><span class="line">alert(temp_celsius);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>函数真正的价值体现在，我们可以把它们当作数据类型来使用——把一个函数的调用结果赋值给一个变量</p>
<h5 id="3-作用域"><a href="#3-作用域" class="headerlink" title="3.作用域"></a>3.作用域</h5><p>在函数内定义的变量是局部变量，在函数外的变量是全局变量。一定要有用var声明变量的习惯，否则会有二义性的隐患</p>
<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>对象是一种非常重要的数据类型，对象里的数据可以通过：属性和方法两种方式访问</p>
<ul>
<li>属性即隶属于特定对象的<strong>变量</strong></li>
<li>方法是只有特定对象才能调用的<strong>函数</strong></li>
</ul>
<p>总而言之，对象是单个实物的抽象，对象是一个容器，封装了属性（property）和方法（method）</p>
<h5 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1.构造函数"></a>1.构造函数</h5><p>所谓构造函数，就是专门用来生成实例对象的函数。它就是对象的模板，描述实例对象的基本结构。一个构造函数，可以生成多个实例对象，这些实例对象都有相同的结构。</p>
<p>js的对象体系是基于构造函数，而其他面向对象语言（c++和java）是基于类（class）的，对象就是类的实例</p>
<p>构造函数就是一个普通的函数，但是有自己的特征和用法。</p>
<p>实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Vehicle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.price = <span class="number">1000</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>Vehicle</code>就是构造函数。为了与普通函数区别，构造函数名字的第一个字母通常大写，构造函数有两大特点：</p>
<ul>
<li>函数体内部使用了<code>this</code>关键字，代表了所要生成的对象实例</li>
<li>生成对象的时候，必须使用<code>new</code>命令。</li>
</ul>
<h5 id="2-new命令"><a href="#2-new命令" class="headerlink" title="2.new命令"></a>2.new命令</h5><p>（1）基本用法</p>
<p><code>new</code>命令的作用，就是执行构造函数，返回一个实例对象</p>
<p>调用对象中的属性和方法都用“点”语法来访问</p>
<p>例子1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Vehicle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.price = <span class="number">1000</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> v = <span class="keyword">new</span> Vehicle(); <span class="comment">//new可以执行构造函数</span></span><br><span class="line">v.price <span class="comment">// 1000</span></span><br></pre></td></tr></table></figure>

<ul>
<li>代码通过<code>new</code>命令，让构造函数<code>Vehicle</code>生成一个实例对象，保存在变量<code>v</code>中</li>
<li>这个新生成的实例对象，从构造函数<code>Vehicle</code>得到了<code>price</code>属性（继承）</li>
<li><code>new</code>命令执行时，构造函数内部的<code>this</code>，就代表了新生成的实例对象，<code>this.price</code>表示实例对象有一个<code>price</code>属性，值是1000（this指向生成的实例对象）</li>
</ul>
<p>例子2带参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Vehicle = <span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.price = p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> v = <span class="keyword">new</span> Vehicle(<span class="number">500</span>);</span><br></pre></td></tr></table></figure>

<p>构造函数本身就是一个普通函数，但是new命令让它焕然一新，没有new命令，this就代表了全局对象</p>
<p>（2）new命令原理</p>
<ul>
<li>创建一个空对象，作为将要返回的对象实例。</li>
<li>将这个空对象的原型，指向构造函数的<code>prototype</code>属性。</li>
<li>将这个空对象赋值给函数内部的<code>this</code>关键字。</li>
<li>开始执行构造函数内部的代码。</li>
</ul>
<p>构造函数内部，<code>this</code>指的是一个新生成的空对象，所有针对<code>this</code>的操作，都会发生在这个空对象上。构造函数之所以叫“构造函数”，就是说这个函数的目的，就是操作一个空对象（即<code>this</code>对象），将其“构造”为需要的样子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Vehicle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.price = <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> Vehicle()) === <span class="number">1000</span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>



<p>如果构造函数内部有<code>return</code>语句，而且<code>return</code>后面跟着一个对象，<code>new</code>命令会返回<code>return</code>语句指定的对象；否则，就会不管<code>return</code>语句，返回<code>this</code>对象。</p>
<p>但是，如果<code>return</code>语句返回的是一个跟<code>this</code>无关的新对象，<code>new</code>命令会返回这个新对象，而不是<code>this</code>对象。这一点需要特别引起注意。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Vehicle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.price = <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">price</span>: <span class="number">2000</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> Vehicle()).price</span><br><span class="line"><span class="comment">// 2000</span></span><br></pre></td></tr></table></figure>



<h5 id="3-内建对象"><a href="#3-内建对象" class="headerlink" title="3.内建对象"></a>3.内建对象</h5><p>即js本身为用户写好的对象，比如我们所熟悉的数组对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> beatles = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">beatles.length;</span><br></pre></td></tr></table></figure>

<p>length就是Array对象的一个写好的属性</p>
<p>除此之外，js常用的内建对象还有Math对象和Date对象</p>
<p>Math对象：主要用于数值得运算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">7.561</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Math</span>.round(num);</span><br><span class="line">alert(num);</span><br></pre></td></tr></table></figure>

<p>上述例子，利用了Math对象得round方法，把十进制数舍入为一个整数</p>
<p>Date对象：用来存储和检索一个特定的日期和时间相关的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var current_date &#x3D; new Date();</span><br><span class="line">var today &#x3D; current_date.getDay();</span><br></pre></td></tr></table></figure>

<p>上述例子可以快速判断给定日期是星期几。</p>
<h5 id="4-宿主对象"><a href="#4-宿主对象" class="headerlink" title="4.宿主对象"></a>4.宿主对象</h5><p>宿主对象，不是js语言本身的，而是由它的运行环境提供的（一般来说都是web浏览器提供的），包括Form，Image，Element等，我们可以通过这些对象获取到给定网页上的对象元素信息。</p>
<p>宿主对象的功能其实于DOM中的document的功能是一样的，所有我们常用DOM而少用宿主对象。</p>
<h5 id="5-prototype-对象"><a href="#5-prototype-对象" class="headerlink" title="5.prototype 对象"></a>5.prototype 对象</h5><p>（1）构造函数的缺点</p>
<p>js是通过构造函数生成新对象，实例对象的属性和方法，可以定义在构造函数内部。每new一次，属性和方法都要重新创造一次</p>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name, color</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.color = color;</span><br><span class="line">  <span class="built_in">this</span>.meow = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;喵喵&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">&#x27;大毛&#x27;</span>, <span class="string">&#x27;白色&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cat2 = <span class="keyword">new</span> Cat(<span class="string">&#x27;二毛&#x27;</span>, <span class="string">&#x27;黑色&#x27;</span>);</span><br><span class="line"></span><br><span class="line">cat1.meow === cat2.meow <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>上述代码中，两个对象都具有相同的meow方法，但是每新建一个实例，就会新建一个<code>meow</code>方法，这无疑浪费了资源。</p>
<p>（2）prototype 属性</p>
<p>为了解决构造函数的缺点，让所有实例对象共享“资源”，节省内存，我们就要用到prototype 属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.color = <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Animal(<span class="string">&#x27;大毛&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cat2 = <span class="keyword">new</span> Animal(<span class="string">&#x27;二毛&#x27;</span>);</span><br><span class="line"></span><br><span class="line">cat1.color <span class="comment">// &#x27;white&#x27;</span></span><br><span class="line">cat2.color <span class="comment">// &#x27;white&#x27;</span></span><br></pre></td></tr></table></figure>

<p>对象cat1和cat2共享color属性，只要修改该属性内容，变动就立刻会体现在所有实例对象上</p>
<p><strong>注意</strong>：</p>
<p>实例对象<code>cat1</code>的<code>color</code>属性改为<code>black</code>，就使得它不再去原型对象读取<code>color</code>属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cat1.color = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">cat1.color <span class="comment">// &#x27;black&#x27;</span></span><br><span class="line">cat2.color <span class="comment">// &#x27;yellow&#x27;</span></span><br><span class="line">Animal.prototype.color <span class="comment">// &#x27;yellow&#x27;;</span></span><br></pre></td></tr></table></figure>



<h5 id="6-Object对象"><a href="#6-Object对象" class="headerlink" title="6.Object对象"></a>6.Object对象</h5><p>js在<code>Object</code>对象上提供了很多方法用于处理面向对象编程的相关操作</p>
<p>（1）Object的读写操作</p>
<p>读取原型对象：getPrototypeOf</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得构造函数原型</span></span><br><span class="line"><span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F();</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(f) === F.prototype <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的原型是 Function.prototype</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(f) === <span class="built_in">Function</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>属性共享setPrototypeOf</p>
<p><code>Object.setPrototypeOf</code>方法为参数对象设置原型，返回该参数对象。它接受两个参数，第一个是现有对象，第二个是原型对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(a, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(a) === b <span class="comment">// true</span></span><br><span class="line">a.x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>Object.setPrototypeOf</code>方法将对象<code>a</code>的原型，设置为对象<code>b</code>，因此<code>a</code>可以共享<code>b</code>的属性。</p>
<p>（2）Object.create() 继承创建实例对象</p>
<p>构造函数作为模板，可以生成实例对象。但是，有时拿不到构造函数，只能拿到一个现有的对象。我们希望以这个现有的对象作为模板，生成新的实例对象，这时就可以使用<code>Object.create()</code>方法。</p>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  name: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  age: <span class="number">38</span>,</span><br><span class="line">  greeting: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hi! I\&#x27;m &#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="built_in">Object</span>.create(person1);</span><br><span class="line"></span><br><span class="line">person2.name <span class="comment">// 张三</span></span><br><span class="line">person2.greeting() <span class="comment">// Hi! I&#x27;m 张三.</span></span><br></pre></td></tr></table></figure>

<p>对象person2继承了person1的属性和方法</p>
<p>（3）获取对象所有属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(<span class="built_in">Date</span>)</span><br><span class="line"><span class="comment">// [&quot;parse&quot;, &quot;arguments&quot;, &quot;UTC&quot;, &quot;caller&quot;, &quot;name&quot;, &quot;prototype&quot;, &quot;now&quot;, &quot;length&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(<span class="built_in">Date</span>) <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Object.getOwnPropertyNames</code>方法返回<code>Date</code>所有自身的属性名</li>
<li>Object.keys只获取那些可以遍历的属性</li>
</ul>
<p>（4）遍历属性</p>
<p>获得对象的所有可遍历属性（不管是自身的还是继承的），可以使用<code>for...in</code>循环</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">p1</span>: <span class="number">123</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="built_in">Object</span>.create(o1, &#123;</span><br><span class="line">  p2: &#123; <span class="attr">value</span>: <span class="string">&quot;abc&quot;</span>, <span class="attr">enumerable</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (p <span class="keyword">in</span> o2) &#123;</span><br><span class="line">  <span class="built_in">console</span>.info(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// p2</span></span><br><span class="line"><span class="comment">// p1</span></span><br></pre></td></tr></table></figure>



<h5 id="7-this关键字"><a href="#7-this关键字" class="headerlink" title="7.this关键字"></a>7.this关键字</h5><p>（1）一般含义</p>
<p>在上述例子中，this可以用在构造函数中，表示实例对象。this总能返回一个对象，简单说，<code>this</code>就是属性或方法“当前”所在的对象。</p>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  describe: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;姓名：&#x27;</span>+ <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.describe()</span><br><span class="line"><span class="comment">// &quot;姓名：张三&quot;</span></span><br></pre></td></tr></table></figure>

<p>this.name表示name属性所在的那个对象。由于<code>this.name</code>是在<code>describe</code>方法中调用，而<code>describe</code>方法所在的当前对象是<code>person</code>，因此<code>this</code>指向<code>person</code>，<code>this.name</code>就是person.name。</p>
<p>（2）this的动态指向</p>
<p>实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;姓名：&#x27;</span>+ <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">  name: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  describe: f</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">  name: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">  describe: f</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A.describe() <span class="comment">// &quot;姓名：张三&quot;</span></span><br><span class="line">B.describe() <span class="comment">// &quot;姓名：李四&quot;</span></span><br></pre></td></tr></table></figure>

<p>函数<code>f</code>内部使用了<code>this</code>关键字，随着<code>f</code>所在的对象不同，<code>this</code>的指向也不同。只要函数被赋给另一个变量，<code>this</code>的指向就会变</p>
<p>网页实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">size</span>=<span class="string">3</span> <span class="attr">onChange</span>=<span class="string">&quot;validate(this, 18, 99);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">obj, lowval, hival</span>)</span>&#123;</span></span><br><span class="line">  if ((obj.value &lt; lowval) || (obj.value &gt; hival))</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;Invalid Value!&#x27;</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码是一个文本输入框，每当用户输入一个值，就会调用<code>onChange</code>回调函数，验证这个值是否在指定范围。this不断指向用户输入的值。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>JavaScript</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP|wordpress仿站</title>
    <url>/2020/06/02/PHP/PHP-wordpress%E4%BB%BF%E7%AB%99%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>最近接了一个用wordpress仿站的项目，本以为很简单，但实际上手后才发现了一些“小”问题，而且中文网上关于wordpress的教程不仅少，而且老，很多都已经不适用于5.x后的版本，现在就把我在开发过程中遇到问题整理成该文</p>
<span id="more"></span>



<h3 id="循环块"><a href="#循环块" class="headerlink" title="循环块"></a>循环块</h3><p>这大概是wordpress最实用的功能了，在把静态网页改成动态网页中发挥极大的作用，使用方法如下：</p>
<h5 id="（1）静态代码"><a href="#（1）静态代码" class="headerlink" title="（1）静态代码"></a>（1）静态代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;jj2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;kiz_zyzx&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/zyzx/zyzx01/201807/t20180709_5038706.html&quot;</span>&gt;</span>中心简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/zyzx/zyzx05/&quot;</span>&gt;</span>科研进展<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/zyzx/zyzx01/zyzx03/&quot;</span>&gt;</span>骨干人才<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/zyzx/zyzx07/&quot;</span>&gt;</span>新闻动态<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/zyzx/zyzx07/zyzx72/&quot;</span>&gt;</span>通知公告<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.yunzhan365.com/bookcase/jvpq/&quot;</span>&gt;</span>中心简报<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    观察静态代码循环的地方，确定循环块</p>
<h5 id="（2）动态代码"><a href="#（2）动态代码" class="headerlink" title="（2）动态代码"></a>（2）动态代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;jj2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;kiz_zyzx&quot;</span>&gt;</span></span><br><span class="line">     &lt;?php query_posts(&#x27;cat=10 &amp; posts_per_page=6&#x27;);</span><br><span class="line">     while (have_posts()) : the_post(); ?&gt;</span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;?php lxtx_post_link(); ?&gt;&quot;</span>&gt;</span>&lt;?php the_title(); ?&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">     &lt;?php endwhile;wp_reset_query(); ?&gt;</span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用   <code>&lt;?php query_posts(&#39;cat=10 &amp; posts_per_page=6&#39;); while (have_posts()) : the_post(); ?&gt;</code>与  <code>&lt;?php endwhile;wp_reset_query(); ?&gt;</code> 夹住要循环的块</li>
<li>cat属性对应后台分类目录id（鼠标悬浮在目录上可在左下角查看），posts_per_page属性对应循环次数</li>
<li>再修改循环块内部的静态内容为动态内容，如<code>&lt;?php the_title(); ?&gt;</code></li>
</ul>
<h3 id="循环分栏"><a href="#循环分栏" class="headerlink" title="循环分栏"></a>循环分栏</h3><p>上面提到了循环块的使用，那有些时候会碰到循环过程中样式的规律性变化，如下图</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041010927.png" alt="在这里插入图片描述"></p>
<p>这时就要用到php输出html元素</p>
<h5 id="（1）静态代码-1"><a href="#（1）静态代码-1" class="headerlink" title="（1）静态代码"></a>（1）静态代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;28&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;kiz_zyzx&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./gkjj/jgjj/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>机构简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;28&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;kiz_zyzx&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./gkjj/szzc/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>所长致辞<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;28&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;kiz_zyzx&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./gkjj/leadership/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>研究所领导<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;28&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;kiz_zyzx&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./gkjj/zzjg/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>组织机构<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>仔细观察静态代码的结构，和其循环有规律的地方，大致简化规律</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>   </span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>   </span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以我们可以想到，循环<td>标签的内容，每循环两次后，用php输出</td><tr>标签</tr></p>
<p>（2）动态代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">         &lt;?php query_posts(&#39;cat&#x3D;8 &amp; posts_per_page&#x3D;5&#39;);</span><br><span class="line">         while (have_posts()) : the_post();</span><br><span class="line">           $count++; ?&gt;</span><br><span class="line">           &lt;td width&#x3D;&quot;50%&quot; height&#x3D;&quot;28&quot; align&#x3D;&quot;left&quot;&gt;</span><br><span class="line">             &lt;table width&#x3D;&quot;100%&quot; border&#x3D;&quot;0&quot; cellpadding&#x3D;&quot;0&quot; cellspacing&#x3D;&quot;0&quot;&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                 &lt;td class&#x3D;&quot;kiz_zyzx&quot;&gt;</span><br><span class="line">                   &lt;a href&#x3D;&quot;&lt;?php the_permalink(); ?&gt;&quot; target&#x3D;&quot;_blank&quot;&gt;&lt;?php 								the_title(); ?&gt;&lt;&#x2F;a&gt;</span><br><span class="line">                 &lt;&#x2F;td&gt;</span><br><span class="line">               &lt;&#x2F;tr&gt;</span><br><span class="line">             &lt;&#x2F;table&gt;</span><br><span class="line">           &lt;&#x2F;td&gt;</span><br><span class="line"></span><br><span class="line">           &lt;?php if ($count &#x3D;&#x3D; 2) &#123;</span><br><span class="line">             echo &#39;&lt;tr&gt;&#39;;</span><br><span class="line">             $count &#x3D; 0;</span><br><span class="line">           &#125; ?&gt;</span><br><span class="line">         &lt;?php endwhile;</span><br><span class="line">         wp_reset_query(); ?&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br></pre></td></tr></table></figure>

<p>用$count记录循环次数，再用条件句<code>if ($count == 2)</code>循环输出tr标签</p>
<h3 id="获取文章首图"><a href="#获取文章首图" class="headerlink" title="获取文章首图"></a>获取文章首图</h3><p>在仿站过程中，往往有需要动态插入图片的地方，这时候往往通过获取文章首图的方法来插入图片</p>
<h5 id="（1）获取图片的函数"><a href="#（1）获取图片的函数" class="headerlink" title="（1）获取图片的函数"></a>（1）获取图片的函数</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">catch_that_image</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$post</span>, <span class="variable">$posts</span>;</span><br><span class="line">    <span class="variable">$first_img</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    ob_start();</span><br><span class="line">    ob_end_clean();</span><br><span class="line">    <span class="variable">$output</span> = preg_match_all(<span class="string">&#x27;/&lt;img.+src=[\&#x27;&quot;]([^\&#x27;&quot;]+)[\&#x27;&quot;].*&gt;/i&#x27;</span>, <span class="variable">$post</span>-&gt;post_content, <span class="variable">$matches</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文章中第一张图片的路径并输出</span></span><br><span class="line">    <span class="variable">$first_img</span> = <span class="variable">$matches</span> [<span class="number">1</span>] [<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//如果文章无图片，获取自定义图片</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$first_img</span>))&#123; </span><br><span class="line">    <span class="variable">$first_img</span> = <span class="string">&quot;&quot;</span>.bloginfo(<span class="string">&#x27;template_url&#x27;</span>).<span class="string">&quot;/images/xx.jpg&quot;</span>;   <span class="comment">//设置默认图片</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$first_img</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把该函数放入function.php文件中</p>
<h5 id="（2）修改静态内容"><a href="#（2）修改静态内容" class="headerlink" title="（2）修改静态内容"></a>（2）修改静态内容</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;tile&quot; style&#x3D;&quot;margin-left:4px;&quot;&gt;</span><br><span class="line">                                                                                          &lt;div class&#x3D;&quot;text&quot;&gt;</span><br><span class="line">                                                                                            &lt;img src&#x3D;&quot;&lt;?php echo catch_that_image() ?&gt;&quot; width&#x3D;240 height&#x3D;160 border&#x3D;0 &#x2F;&gt;</span><br><span class="line">                                                                                            &lt;h2 class&#x3D;&quot;animate-text&quot;&gt; &lt;a href&#x3D;&quot;&lt;?php the_permalink(); ?&gt;&quot; target&#x3D;&quot;_blank&quot;&gt;&lt;?php the_title(); ?&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;</span><br><span class="line">                                                                                         &lt;&#x2F;div&gt;</span><br><span class="line">                                                                                        &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>将静态的图片链接改为<code>&lt;?php echo catch_that_image() ?&gt;</code>,获取文章的首图</p>
<h3 id="插入外部链接"><a href="#插入外部链接" class="headerlink" title="插入外部链接"></a>插入外部链接</h3><p>在仿站过程中，有些地方需要插入外部链接而不是跳转到默认的文章页，这时候需要一个插入外部链接的函数</p>
<h5 id="（1）获取外部链接函数"><a href="#（1）获取外部链接函数" class="headerlink" title="（1）获取外部链接函数"></a>（1）获取外部链接函数</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取外部链接，the_permalink() 替换为out_post_link()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">out_post_link</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$post</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$thePostID</span> = <span class="variable">$post</span>-&gt;ID;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$post_id</span> = get_post(<span class="variable">$thePostID</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$title</span> = <span class="variable">$post_id</span>-&gt;post_title;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$perm</span> = get_permalink(<span class="variable">$post_id</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$post_keys</span> = <span class="keyword">array</span>(); <span class="variable">$post_val</span> = <span class="keyword">array</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$post_keys</span> = get_post_custom_keys(<span class="variable">$thePostID</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$post_keys</span>)) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$post_keys</span> <span class="keyword">as</span> <span class="variable">$pkey</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$pkey</span>==<span class="string">&#x27;out_url&#x27;</span> || <span class="variable">$pkey</span>==<span class="string">&#x27;title_url&#x27;</span> || <span class="variable">$pkey</span>==<span class="string">&#x27;url_title&#x27;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$post_val</span> = get_post_custom_values(<span class="variable">$pkey</span>);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$post_val</span>)) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$link</span> = <span class="variable">$perm</span>;</span><br><span class="line">    </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$link</span> = <span class="variable">$post_val</span>[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$link</span> = <span class="variable">$perm</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$link</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>同样把该函数放在function.php文件</p>
<h5 id="（2）使用方法"><a href="#（2）使用方法" class="headerlink" title="（2）使用方法"></a>（2）使用方法</h5><ul>
<li><p>在需要跳转外部链接的地方插入<code>&lt;?php out_post_link() ?&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;?php lxtx_post_link()?&gt;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&lt;?php echo catch_that_image() ?&gt;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;202003&quot;</span> <span class="attr">border</span>=<span class="string">0</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在wordpress后台相应的文章中插入自定义字段：out_url / title_url / utl_title,内容就填写要跳转的外部链接</p>
</li>
</ul>
<h3 id="面包屑导航"><a href="#面包屑导航" class="headerlink" title="面包屑导航"></a>面包屑导航</h3><h5 id="（1）面包屑函数"><a href="#（1）面包屑函数" class="headerlink" title="（1）面包屑函数"></a>（1）面包屑函数</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cmp_breadcrumbs</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="variable">$delimiter</span> = <span class="string">&#x27;&amp;nbsp;&gt;&amp;nbsp;&#x27;</span>; <span class="comment">// 分隔符</span></span><br><span class="line">  <span class="variable">$before</span> = <span class="string">&#x27;&lt;span class=&quot;top_path&quot;&gt;&#x27;</span>; <span class="comment">// 在当前链接前插入</span></span><br><span class="line">  <span class="variable">$after</span> = <span class="string">&#x27;&lt;/span&gt;&#x27;</span>; <span class="comment">// 在当前链接后插入</span></span><br><span class="line">  <span class="keyword">if</span> (!is_home() &amp;&amp; !is_front_page() || is_paged()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is_category()) &#123; <span class="comment">// 分类 存档</span></span><br><span class="line">      <span class="keyword">global</span> <span class="variable">$wp_query</span>;</span><br><span class="line">      <span class="variable">$cat_obj</span> = <span class="variable">$wp_query</span>-&gt;get_queried_object();</span><br><span class="line">      <span class="variable">$thisCat</span> = <span class="variable">$cat_obj</span>-&gt;term_id;</span><br><span class="line">      <span class="variable">$thisCat</span> = get_category(<span class="variable">$thisCat</span>);</span><br><span class="line">      <span class="variable">$parentCat</span> = get_category(<span class="variable">$thisCat</span>-&gt;parent);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$thisCat</span>-&gt;parent != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable">$cat_code</span> = get_category_parents(<span class="variable">$parentCat</span>, <span class="literal">TRUE</span>, <span class="string">&#x27; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$cat_code</span> = str_replace(<span class="string">&#x27;&lt;a&#x27;</span>, <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot;&#x27;</span>, <span class="variable">$cat_code</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&quot;&gt;&#x27;</span> . single_cat_title(<span class="string">&#x27;&#x27;</span>, <span class="literal">false</span>) . <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_day()) &#123; <span class="comment">// 天 存档</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;a itemprop=&quot;breadcrumb&quot; href=&quot;&#x27;</span> . get_year_link(get_the_time(<span class="string">&#x27;Y&#x27;</span>)) . <span class="string">&#x27;&quot;&gt;&#x27;</span> . get_the_time(<span class="string">&#x27;Y&#x27;</span>) . <span class="string">&#x27;&lt;/a&gt; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;a itemprop=&quot;breadcrumb&quot;  href=&quot;&#x27;</span> . get_month_link(get_the_time(<span class="string">&#x27;Y&#x27;</span>), get_the_time(<span class="string">&#x27;m&#x27;</span>)) . <span class="string">&#x27;&quot;&gt;&#x27;</span> . get_the_time(<span class="string">&#x27;F&#x27;</span>) . <span class="string">&#x27;&lt;/a&gt; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span> . get_the_time(<span class="string">&#x27;d&#x27;</span>) . <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_month()) &#123; <span class="comment">// 月 存档</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;a itemprop=&quot;breadcrumb&quot; href=&quot;&#x27;</span> . get_year_link(get_the_time(<span class="string">&#x27;Y&#x27;</span>)) . <span class="string">&#x27;&quot;&gt;&#x27;</span> . get_the_time(<span class="string">&#x27;Y&#x27;</span>) . <span class="string">&#x27;&lt;/a&gt; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span> . get_the_time(<span class="string">&#x27;F&#x27;</span>) . <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_year()) &#123; <span class="comment">// 年 存档</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span> . get_the_time(<span class="string">&#x27;Y&#x27;</span>) . <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_single() &amp;&amp; !is_attachment()) &#123; <span class="comment">// 文章</span></span><br><span class="line">      <span class="keyword">if</span> (get_post_type() != <span class="string">&#x27;post&#x27;</span>) &#123; <span class="comment">// 自定义文章类型</span></span><br><span class="line">        <span class="variable">$post_type</span> = get_post_type_object(get_post_type());</span><br><span class="line">        <span class="variable">$slug</span> = <span class="variable">$post_type</span>-&gt;rewrite;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&#x27;</span> . <span class="variable">$homeLink</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$slug</span>[<span class="string">&#x27;slug&#x27;</span>] . <span class="string">&#x27;/&quot;&gt;&#x27;</span> . <span class="variable">$post_type</span>-&gt;labels-&gt;singular_name . <span class="string">&#x27;&lt;/a&gt; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&#x27;</span> . the_permalink()  . <span class="string">&#x27;&quot;&gt;&#x27;</span> .wp_trim_words( get_the_title(), <span class="number">6</span> ). <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 文章 post</span></span><br><span class="line">        <span class="variable">$cat</span> = get_the_category();</span><br><span class="line">        <span class="variable">$cat</span> = <span class="variable">$cat</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="variable">$cat_code</span> = get_category_parents(<span class="variable">$cat</span>, <span class="literal">TRUE</span>, <span class="string">&#x27; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$cat_code</span> = str_replace(<span class="string">&#x27;&lt;a&#x27;</span>, <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot;&#x27;</span>, <span class="variable">$cat_code</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&quot;&gt;&#x27;</span> . wp_trim_words( get_the_title(), <span class="number">5</span>) . <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (!is_single() &amp;&amp; !is_page() &amp;&amp; get_post_type() != <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable">$post_type</span> = get_post_type_object(get_post_type());</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span> . <span class="variable">$post_type</span>-&gt;labels-&gt;singular_name . <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_attachment()) &#123; <span class="comment">// 附件</span></span><br><span class="line">      <span class="variable">$parent</span> = get_post(<span class="variable">$post</span>-&gt;post_parent);</span><br><span class="line">      <span class="variable">$cat</span> = get_the_category(<span class="variable">$parent</span>-&gt;ID);</span><br><span class="line">      <span class="variable">$cat</span> = <span class="variable">$cat</span>[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&#x27;</span> . get_permalink(<span class="variable">$parent</span>) . <span class="string">&#x27;&quot;&gt;&#x27;</span> . <span class="variable">$parent</span>-&gt;post_title . <span class="string">&#x27;&lt;/a&gt; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span> .  wp_trim_words( get_the_title(), <span class="number">5</span>). <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_page() &amp;&amp; !<span class="variable">$post</span>-&gt;post_parent) &#123; <span class="comment">// 页面</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&#x27;</span> . the_permalink()  . <span class="string">&#x27;&quot;&gt;&#x27;</span> .wp_trim_words( get_the_title(), <span class="number">5</span> ). <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_page() &amp;&amp; <span class="variable">$post</span>-&gt;post_parent) &#123; <span class="comment">// 父级页面</span></span><br><span class="line">      <span class="variable">$parent_id</span>  = <span class="variable">$post</span>-&gt;post_parent;</span><br><span class="line">      <span class="variable">$breadcrumbs</span> = <span class="keyword">array</span>();</span><br><span class="line">      <span class="keyword">while</span> (<span class="variable">$parent_id</span>) &#123;</span><br><span class="line">        <span class="variable">$page</span> = get_page(<span class="variable">$parent_id</span>);</span><br><span class="line">        <span class="variable">$breadcrumbs</span>[] = <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&#x27;</span> . get_permalink(<span class="variable">$page</span>-&gt;ID) . <span class="string">&#x27;&quot;&gt;&#x27;</span> . wp_trim_words( get_the_title(), <span class="number">5</span> )(<span class="variable">$page</span>-&gt;ID) . <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$parent_id</span>  = <span class="variable">$page</span>-&gt;post_parent;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable">$breadcrumbs</span> = array_reverse(<span class="variable">$breadcrumbs</span>);</span><br><span class="line">      <span class="keyword">foreach</span> (<span class="variable">$breadcrumbs</span> <span class="keyword">as</span> <span class="variable">$crumb</span>) <span class="keyword">echo</span> <span class="variable">$crumb</span> . <span class="string">&#x27; &#x27;</span> . <span class="variable">$delimiter</span> . <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;a class=&quot;top_path CurrChnlCls&quot; href=&quot;&quot;&gt;&#x27;</span> . get_the_title() . <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_search()) &#123; <span class="comment">// 搜索结果</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span>;</span><br><span class="line">      printf(__(<span class="string">&#x27;Search Results for: %s&#x27;</span>, <span class="string">&#x27;cmp&#x27;</span>),  get_search_query());</span><br><span class="line">      <span class="keyword">echo</span>  <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_tag()) &#123; <span class="comment">//标签 存档</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span>;</span><br><span class="line">      printf(__(<span class="string">&#x27;Tag Archives: %s&#x27;</span>, <span class="string">&#x27;cmp&#x27;</span>), single_tag_title(<span class="string">&#x27;&#x27;</span>, <span class="literal">false</span>));</span><br><span class="line">      <span class="keyword">echo</span>  <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_author()) &#123; <span class="comment">// 作者存档</span></span><br><span class="line">      <span class="keyword">global</span> <span class="variable">$author</span>;</span><br><span class="line">      <span class="variable">$userdata</span> = get_userdata(<span class="variable">$author</span>);</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span>;</span><br><span class="line">      printf(__(<span class="string">&#x27;Author Archives: %s&#x27;</span>, <span class="string">&#x27;cmp&#x27;</span>),  <span class="variable">$userdata</span>-&gt;display_name);</span><br><span class="line">      <span class="keyword">echo</span>  <span class="variable">$after</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (is_404()) &#123; <span class="comment">// 404 页面</span></span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$before</span>;</span><br><span class="line">      _e(<span class="string">&#x27;Not Found&#x27;</span>, <span class="string">&#x27;cmp&#x27;</span>);</span><br><span class="line">      <span class="keyword">echo</span>  <span class="variable">$after</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将该函数加入function.php文件中</p>
<p>（2）引用面包屑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 面包屑开始 --&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;top_menu&quot;&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">		$category &#x3D; get_the_category();</span><br><span class="line">		echo $category[0]-&gt;cat_name;</span><br><span class="line">	?&gt;</span><br><span class="line">&lt;&#x2F;span&gt;</span><br><span class="line"></span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line"></span><br><span class="line">&lt;?php if (function_exists(&#39;cmp_breadcrumbs&#39;)) cmp_breadcrumbs(); ?&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- 面包屑结束 --&gt;</span><br></pre></td></tr></table></figure>



<h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3><p>轮播图同样使用到了循环的想法，但在仿站的过程中会遇到把图片链接放在css中的做法，php无法写入css中动态获取图片，这时就可以创建一张图片覆盖到原本要轮播的块上，继承其轮播的特效</p>
<h5 id="（1）静态代码-2"><a href="#（1）静态代码-2" class="headerlink" title="（1）静态代码"></a>（1）静态代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ps_box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pics_switch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pb&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic_box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;pic_banner_001&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic_box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;pic_banner_002&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic_box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;pic_banner_003&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic_box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;pic_banner_004&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;viewArrows prev&quot;</span>&gt;</span>上一张<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;viewArrows next&quot;</span>&gt;</span>下一张<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pics_switch_clients&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li_1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;list-style:none;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li_2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;list-style:none;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li_3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;list-style:none;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li_4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;list-style:none;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="（2）动态代码-1"><a href="#（2）动态代码-1" class="headerlink" title="（2）动态代码"></a>（2）动态代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;pics_switch&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;pb&quot;&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;?php query_posts(&#39;cat&#x3D;7 &amp; posts_per_page&#x3D;4&#39;);</span><br><span class="line">        while (have_posts()) : the_post();?&gt;</span><br><span class="line">  </span><br><span class="line"> &lt;div class&#x3D;&quot;pic_box&quot; &gt; &lt;img src&#x3D;&quot;&lt;?php echo catch_that_image() ?&gt;&quot; &gt;&lt;a class&#x3D;&quot;pic_banner001&quot; target&#x3D;&quot;_blank&quot; href&#x3D;&quot;http:&#x2F;&#x2F;www.kiz.cas.cn&#x2F;&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;?php endwhile;</span><br><span class="line">        wp_reset_query(); ?&gt;               </span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;viewArrows prev&quot;&gt;上一张&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;viewArrows next&quot;&gt;下一张&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;pics_switch_clients&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;li_1&quot; style&#x3D;&quot;list-style:none;&quot;&gt;&lt;span class&#x3D;&quot;current&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;li_2&quot; style&#x3D;&quot;list-style:none;&quot;&gt;&lt;span&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;li_3&quot; style&#x3D;&quot;list-style:none;&quot;&gt;&lt;span&gt;3&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li class&#x3D;&quot;li_4&quot; style&#x3D;&quot;list-style:none;&quot;&gt;&lt;span&gt;4&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>



<h3 id="多级菜单"><a href="#多级菜单" class="headerlink" title="多级菜单"></a>多级菜单</h3><p>来了，一个非常重磅的知识点来了！在开发过程中耗费我最多时间去钻研的东西，再加上中文网上这方面的博客都已经很老而且不太实用了，而本文是基于5.4.1的内容实现三级菜单，我愿称其为中文网wordpress第一文[狗头]</p>
<h5 id="（1）静态内容观察"><a href="#（1）静态内容观察" class="headerlink" title="（1）静态内容观察"></a>（1）静态内容观察</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:1200px;text-align:left;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#14A73C;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/&quot;</span>&gt;</span>首<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/jgsz/&quot;</span>&gt;</span>机构设置<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;sub-nav&quot;</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/jgsz/kyxt/&quot;</span>&gt;</span>科研机构<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/jgsz/glxt/&quot;</span>&gt;</span>管理机构<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/jgsz/zcxt/&quot;</span>&gt;</span>支撑机构与技术平台<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/jgsz/gkxh/&quot;</span>&gt;</span>挂靠学会<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/kycg/&quot;</span>&gt;</span>科研成果<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;sub-nav&quot;</span>&gt;</span>	</span><br><span class="line">        	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/kycg/hjcg/&quot;</span>&gt;</span>获奖<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/kycg/lw/&quot;</span>&gt;</span>论文<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/kycg/zz/&quot;</span>&gt;</span>专著<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.kiz.cas.cn/kycg/zl/&quot;</span>&gt;</span>专利<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">             </span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>





<h5 id="（2）注册菜单"><a href="#（2）注册菜单" class="headerlink" title="（2）注册菜单"></a>（2）注册菜单</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">register_nav_menus(<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;PrimaryMenu&#x27;</span>=&gt;<span class="string">&#x27;导航&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;friendlinks&#x27;</span>=&gt;<span class="string">&#x27;友情链接&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;footer_nav&#x27;</span>=&gt;<span class="string">&#x27;页脚导航&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line">    add_theme_support(<span class="string">&#x27;nav_menus&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在function.php文件中加入该代码，注册菜单的形式menu</p>
<h5 id="（3）动态修改"><a href="#（3）动态修改" class="headerlink" title="（3）动态修改"></a>（3）动态修改</h5><p>菜单的动态修改，实际上就是用php来取代相关块的类（class），由静态观察有最外层的ul为nav，最外层容器div为menu，因为此处的容器有内联css的形式，故不宜取代。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;menu&quot; style&#x3D;&quot;width:1200px;text-align:left;&quot;&gt;</span><br><span class="line"></span><br><span class="line">	&lt;?php</span><br><span class="line">			wp_nav_menu(array(</span><br><span class="line">						&#39;theme_location&#39; &#x3D;&gt; &#39;PrimaryMenu&#39;,</span><br><span class="line">						&#39;menu_class&#39;   &#x3D;&gt; &#39;nav&#39;,   &#x2F;&#x2F;ul节点class值</span><br><span class="line">						&#39;depth&#39; &#x3D;&gt; 0,</span><br><span class="line"></span><br><span class="line">					));</span><br><span class="line">	?&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>



<h5 id="（4）二级菜单"><a href="#（4）二级菜单" class="headerlink" title="（4）二级菜单"></a>（4）二级菜单</h5><p>二级菜单的即里面的<ul>标签带领的这些内容，而wordpress默认使用的类是“sub-menu”</ul></p>
<p>所以只需要把<ul>标签对应的css样式表的选择器（.sub-nav）改为“.sub-menu”即可</ul></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span> <span class="selector-class">.sub-menu</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#006E39</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-class">.sub-menu</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">clear</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#2E7A4A</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#005E31</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-class">.sub-menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="（5）三级菜单"><a href="#（5）三级菜单" class="headerlink" title="（5）三级菜单"></a>（5）三级菜单</h5><p>三级菜单这里我使用最简单的一种方法，修改wp-includes里的文件，默认第三级的类为“third-menu”</p>
<p>修改的文件路径：根目录/wp-includes/class-walker-nav-menu.php</p>
<p>（很多旧文章说的是修改nav-menu-template.php文件）</p>
<p>修改内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start_lvl</span>(<span class="params"> &amp;<span class="variable">$output</span>, <span class="variable">$depth</span> = <span class="number">0</span>, <span class="variable">$args</span> = <span class="literal">null</span> </span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ( <span class="keyword">isset</span>( <span class="variable">$args</span>-&gt;item_spacing ) &amp;&amp; <span class="string">&#x27;discard&#x27;</span> === <span class="variable">$args</span>-&gt;item_spacing ) &#123;</span><br><span class="line">			<span class="variable">$t</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			<span class="variable">$n</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="variable">$t</span> = <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">			<span class="variable">$n</span> = <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$indent</span> = str_repeat( <span class="variable">$t</span>, <span class="variable">$depth</span> );</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 此处添加了一个条件判断，确定菜单层级</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$depth</span> == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="variable">$classes</span> = <span class="keyword">array</span>( <span class="string">&#x27;sub-menu&#x27;</span> );&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$classes</span> = <span class="keyword">array</span>( <span class="string">&#x27;third-menu&#x27;</span> );</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>if($depth == 0)</code>条件句多加了一层third-menu的目录，然后再用修改第二级的方法修改第三级的css样式便大功告成啦！</p>
<h3 id="插件禁用"><a href="#插件禁用" class="headerlink" title="插件禁用"></a>插件禁用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_filter(&#39;site_option_active_sitewide_plugins&#39;, &#39;modify_sitewide_plugins&#39;);</span><br><span class="line"> </span><br><span class="line">function modify_sitewide_plugins($value) &#123;</span><br><span class="line">    global $current_blog;</span><br><span class="line"> </span><br><span class="line">    if( $current_blog-&gt;blog_id &#x3D;&#x3D; 141 ) &#123;</span><br><span class="line">      unset($value[&#39;advanced-custom-fields&#x2F;acf.php&#39;]);</span><br><span class="line">      unset($value[&#39;all-in-one-wp-security-and-firewall&#x2F;wp-security.php&#39;]);</span><br><span class="line">      unset($value[&#39;bulletproof-security&#x2F;bulletproof-security.php&#39;]);</span><br><span class="line">      unset($value[&#39;classic-editor&#x2F;classic-editor.php&#39;]);</span><br><span class="line">      unset($value[&#39;kindeditor-for-wordpress&#x2F;kindeditor.php&#39;]);</span><br><span class="line">      unset($value[&#39;loggedin&#x2F;loggedin.php&#39;]);</span><br><span class="line">      unset($value[&#39;user-role-editor&#x2F;user-role-editor.php&#39;]);</span><br><span class="line">      unset($value[&#39;wp-password-policy-manager&#x2F;wp-password-policy-manager.php&#39;]);</span><br><span class="line">      unset($value[&#39;wp-category-order&#x2F;WPCategoryOrder.php&#39;]);</span><br><span class="line">      unset($value[&#39;wp-statistics&#x2F;wp-statistics.php&#39;]);</span><br><span class="line">      unset($value[&#39;wp-super-cache&#x2F;advanced-cache.php&#39;]);</span><br><span class="line">      unset($value[&#39;taxonomy-terms-order&#x2F;taxonomy-terms-order.php&#39;]);</span><br><span class="line">      unset($value[&#39;ml-slider&#x2F;ml-slider.php&#39;]);</span><br><span class="line">      unset($value[&#39;update&#x2F;index.php&#39;]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<p>本文仿站对象：<a href="http://www.kiz.cas.cn/">http://www.kiz.cas.cn/</a></p>
<p>本文部分参考：<a href="https://wp.rollby.xin/">https://wp.rollby.xin/</a></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
        <tag>框架学习</tag>
        <tag>后端</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>开发原理|后端架构基础知识</title>
    <url>/2021/09/30/DevPrinciple/%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109302345178.jpeg" alt="Image"></p>
<p>抓住9月的尾巴，终于整理完毕🥳。</p>
<span id="more"></span>

<h3 id="互联网架构演化进程"><a href="#互联网架构演化进程" class="headerlink" title="互联网架构演化进程"></a>互联网架构演化进程</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109271633102.jpeg" alt="img"></p>
<h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>参考资料：<a href="https://blog.csdn.net/wangshihuidev/article/details/98896812">https://blog.csdn.net/wangshihuidev/article/details/98896812</a></p>
<h4 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h4><p>但访问系统的用户越来越多，系统资源就需要更多的<strong>CPU</strong>，<strong>内存</strong>去处理请求，需要更大的<strong>网络带宽</strong>去处理数据的传输，需要更多<strong>磁盘空间</strong>存储数据，有以下两种方法：<strong>垂直伸缩 水平伸缩</strong></p>
<h4 id="2-垂直伸缩"><a href="#2-垂直伸缩" class="headerlink" title="2.垂直伸缩"></a>2.垂直伸缩</h4><h5 id="（1）垂直伸缩简介"><a href="#（1）垂直伸缩简介" class="headerlink" title="（1）垂直伸缩简介"></a>（1）垂直伸缩简介</h5><p>垂直伸缩的核心思想是：提升<strong>单台</strong>服务器计算处理的性能（个人主义）</p>
<p>但是单台服务器的<strong>计算处理能力是有限</strong>的，而且也会严重受到计算机硬件水平的制约，即便用更快频率的CPU，更快的网卡，塞更多的磁盘也总会有天花板</p>
<h5 id="（2）垂直伸缩系统优化"><a href="#（2）垂直伸缩系统优化" class="headerlink" title="（2）垂直伸缩系统优化"></a>（2）垂直伸缩系统优化</h5><p>增加CPU后，要进行以下调整以保证计算能力有效增长：</p>
<ul>
<li>开启多线程</li>
<li>调大并发量</li>
<li>防止锁竞争</li>
</ul>
<p>增加内存后后，要进行以下调整以保证服务能力有效增长：</p>
<ul>
<li>调大堆参数</li>
<li>调大本地缓存</li>
</ul>
<p>除此之外对数据库的优化如分表等操作也是一种垂直伸缩</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109271621445.png" alt="在这里插入图片描述"></p>
<h4 id="3-水平伸缩"><a href="#3-水平伸缩" class="headerlink" title="3.水平伸缩"></a>3.水平伸缩</h4><h5 id="（1）水平伸缩简介"><a href="#（1）水平伸缩简介" class="headerlink" title="（1）水平伸缩简介"></a>（1）水平伸缩简介</h5><p>水平伸缩的核心思想是：用<strong>多台</strong>服务器合并进行计算处理（集体主义）</p>
<p>通过多台服务器构成<strong>分布式集群</strong>从而提升系统的整体处理能力</p>
<h5 id="（2）水平伸缩系统优化"><a href="#（2）水平伸缩系统优化" class="headerlink" title="（2）水平伸缩系统优化"></a>（2）水平伸缩系统优化</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109271624231.png" alt="在这里插入图片描述"></p>
<h4 id="4-方案比较"><a href="#4-方案比较" class="headerlink" title="4.方案比较"></a>4.方案比较</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109271621772.png" alt="在这里插入图片描述"></p>
<h4 id="5-分布式架构"><a href="#5-分布式架构" class="headerlink" title="5.分布式架构"></a>5.分布式架构</h4><p>将单体服务进行以下改造，可获得一个简单的高性能系统：</p>
<ul>
<li>数据库与应用分离：系统程序，文件服务，数据库服务部署在不同服务器</li>
<li>加一个缓存：将应用程序需要的热点数据存在缓冲中，而不是每一次都要去连接数据库</li>
<li>多台服务器构成单一服务的集群：如数据库集群，应用程序集群，缓存服务集群</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109271901457.png" alt="img"></p>
<h3 id="缓存架构"><a href="#缓存架构" class="headerlink" title="缓存架构"></a>缓存架构</h3><h4 id="1-计算机中的缓存"><a href="#1-计算机中的缓存" class="headerlink" title="1.计算机中的缓存"></a>1.计算机中的缓存</h4><ul>
<li>CPU和主内存之间有缓存</li>
<li>内存和硬盘之间也有磁盘缓存</li>
<li>在硬盘与网络之间也有某种意义上的缓存</li>
</ul>
<p>缓存的关键指标是<strong>缓存命中率</strong>，其有以下影响要素：</p>
<ul>
<li>缓存键集合大小（键数越少，缓存效率越高）</li>
<li>缓存可使用内存空间（缓存对象越多，缓存命中率越高）</li>
<li>缓存对象生存时间（缓存时间越长，缓存对象被重用的可能性越高）</li>
</ul>
<p>缓存分为两种：一种是通读缓存，一种是旁路缓存</p>
<h4 id="2-通读缓存"><a href="#2-通读缓存" class="headerlink" title="2.通读缓存"></a>2.通读缓存</h4><h5 id="（1）通读缓存简介"><a href="#（1）通读缓存简介" class="headerlink" title="（1）通读缓存简介"></a>（1）通读缓存简介</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109271925956.png" alt="img"></p>
<p>通读缓存：客户端请求通读缓存服务器，若缓存命中则直接返回数据，否则由通读缓存服务器<strong>代理</strong>请求到原始服务器获得数据</p>
<p><strong>客户端连接的是通读缓存</strong>，而不是生成相应的原始服务器，客户端只能通过通读缓存进行<strong>代理</strong>去访问原始服务器</p>
<p>比较常见的通读缓存有：Nginx反向代理缓存，fastly缓存</p>
<h5 id="（2）Nginx反向代理缓存"><a href="#（2）Nginx反向代理缓存" class="headerlink" title="（2）Nginx反向代理缓存"></a>（2）Nginx反向代理缓存</h5><p>Nginx不仅能作为Web Server，还具有反向代理、负载均衡和缓存的功能</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109271938014.png" alt="img"></p>
<h5 id="（3）fastly缓存"><a href="#（3）fastly缓存" class="headerlink" title="（3）fastly缓存"></a>（3）fastly缓存</h5><img src="https://img.alifastly.com/tfs/TB1eV4wKa6qK1RjSZFmXXX0PFXa-1149-1328.png" alt="什麼是fastly" style="zoom: 67%;">

<p>fastly即内容分发网络，它们是一组分布在不同地理位置的服务器。其利用遍布全球各地数据中心的缓存，使用户可以通过最近地点的fastly服务器获得网络内容</p>
<p>可以将fastly理解为遍布大街小巷的ATM机，人们不用去银行排长队而是去离自己最近的ATM去取现金</p>
<h4 id="3-旁路缓存"><a href="#3-旁路缓存" class="headerlink" title="3.旁路缓存"></a>3.旁路缓存</h4><h5 id="（1）旁路缓存简介"><a href="#（1）旁路缓存简介" class="headerlink" title="（1）旁路缓存简介"></a>（1）旁路缓存简介</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109271926138.png" alt="img"></p>
<p>旁路缓存：客户端向访问旁路缓存是否有命中的数据，若没有就自己去访问原始服务器获得数据</p>
<p>旁路缓存通常是一个<strong>独立的键值对存储</strong>（key-value）</p>
<p>比较常见的旁路缓存：Redis</p>
<h5 id="（2）Redis缓存"><a href="#（2）Redis缓存" class="headerlink" title="（2）Redis缓存"></a>（2）Redis缓存</h5><p>参考资料：<a href="https://zhuanlan.zhihu.com/p/315103766">https://zhuanlan.zhihu.com/p/315103766</a></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109272020654.jpeg" alt="img"></p>
<ul>
<li>缓存命中：Redis中有相应数据，直接返回数据</li>
<li>缓存缺失：Redis中没有保存相应数据，需要请求数据库服务器，而且要将缺失数据写入Redis（缓存更新）</li>
</ul>
<h4 id="4-缓存优缺点"><a href="#4-缓存优缺点" class="headerlink" title="4.缓存优缺点"></a>4.缓存优缺点</h4><h5 id="（1）缓存的好处"><a href="#（1）缓存的好处" class="headerlink" title="（1）缓存的好处"></a>（1）缓存的好处</h5><ul>
<li>缓存数据存储在内存中，相比硬盘和网络获取效率更高，响应时间更快，性能更好</li>
<li>降低服务器的负载能力</li>
<li>缓存通常会记录计算结果，缓存也减少CPU的计算消耗加快处理速度</li>
</ul>
<h5 id="（2）缓存的缺点"><a href="#（2）缓存的缺点" class="headerlink" title="（2）缓存的缺点"></a>（2）缓存的缺点</h5><ul>
<li>数据库中的源数据被修改，缓存中的数据变成脏数据</li>
<li>每次写入缓存数据都要标记失效时间</li>
</ul>
<h4 id="5-缓存的合理使用"><a href="#5-缓存的合理使用" class="headerlink" title="5.缓存的合理使用"></a>5.缓存的合理使用</h4><h5 id="（1）缓存关注要点"><a href="#（1）缓存关注要点" class="headerlink" title="（1）缓存关注要点"></a>（1）缓存关注要点</h5><ul>
<li>关注频繁修改的数据，如果一个数据经常被修改，那么使用缓存的价值不大</li>
<li>缓存要有热点，存储空间有限，要选取热门的被访问数据放在缓存</li>
<li>注意缓存雪崩，缓存击穿与缓存穿透</li>
<li>关注缓存的数据一致性</li>
</ul>
<h5 id="（2）缓存异常与解决方案"><a href="#（2）缓存异常与解决方案" class="headerlink" title="（2）缓存异常与解决方案"></a>（2）缓存异常与解决方案</h5><p>参考资料：<a href="https://www.sohu.com/a/473442725_115128">https://www.sohu.com/a/473442725_115128</a></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109272244518.png" alt="img"></p>
<h5 id="（3）缓存雪崩"><a href="#（3）缓存雪崩" class="headerlink" title="（3）缓存雪崩"></a>（3）缓存雪崩</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109272042116.png" alt="img"></p>
<p>缓存雪崩：由于<strong>大量缓存数据过期或redis故障</strong>，大量用户请求无法在redis中处理而是全部打向了数据库，数据库被乱棒打死后（宕机），会引发一系列连锁反应，造成系统崩溃，故称为<strong>雪崩</strong></p>
<p><strong>大量缓存数据过期</strong>应对方法</p>
<ul>
<li>均匀设置过期时间：<strong>避免</strong>将大量数据设为<strong>同一个过期时间</strong>，可以给过期时间加上一个随机数</li>
<li>互斥锁：如果发现访问的数据不在 Redis 里，就加个互斥锁，保证<strong>同一时间内只有一个请求来更新缓存</strong>（互斥锁最好设置<strong>超时时间</strong>，不然如果拿到锁的请求发生阻塞，一直不释放锁，其他请求也拿不到锁，整个系统就无响应了）</li>
<li>双 key 策略：我们对缓存数据可以使用两个 key，一个是 <strong>主 key，会设置过期时间，</strong>一个是 <strong>备 key，不会设置过期</strong>，相当于给缓存数据做了个副本（副本的副本）</li>
<li>后台更新缓存：让缓存<strong>“永久有效”</strong>，并将更新缓存的工作交由后台线程<strong>定时更新</strong>（某些缓存会在系统内存紧张的时候被淘汰，所以不存在真正的永久有效，当业务线程发现缓存数据失效了，过消息队列发送一条消息通知后台线程更新缓存）</li>
<li>通过后台更新缓存进行<strong>缓存预热</strong>，即提取把数据缓存起来而不是等待用户访问才来触发缓存构建</li>
</ul>
<p><strong>Redis 故障宕机</strong>应对方法</p>
<ul>
<li>服务熔断：<strong>服务熔断</strong>机制， 暂停业务应用对缓存服务的访问，直接返回错误</li>
<li>请求限流机制：启用 <strong>请求限流</strong>机制， 只将少部分请求发送到数据库进行处理，再多的请求就在入口直接拒绝服务</li>
<li>构建 Redis 缓存高可靠集群：通过 <strong>主从节点</strong>的方式构建 Redis 缓存高可靠集群，如果 Redis 缓存的主节点故障宕机，<strong>从节点可以切换成为主节点</strong>，继续提供缓存服务</li>
</ul>
<h5 id="（4）缓存击穿"><a href="#（4）缓存击穿" class="headerlink" title="（4）缓存击穿"></a>（4）缓存击穿</h5><img src="https://p6.itc.cn/q_70/images03/20210622/e18ac966425f4dfe9533dd6a127b0fbb.png" alt="img">

<p>缓存击穿：如果缓存中的 <strong>某个热点数据过期</strong>了，此时大量的请求访问了该热点数据，就无法从缓存中读取，直接访问数据库，数据库很容易就被高并发的请求冲垮，这就是 <strong>缓存击穿</strong>的问题</p>
<p>缓存击穿应对方法（也是前面提到的两种方法）</p>
<ul>
<li>互斥锁：保证同一时间只有一个业务线程更新缓存，未能获取互斥锁的请求，要么等待锁释放后重新读取缓存，要么就返回空值或者默认值</li>
<li>后台更新缓存：不给热点数据设置过期时间，由后台异步更新缓存，或者在热点数据准备要过期前，提前通知后台线程更新缓存以及重新设置过期时间</li>
</ul>
<h5 id="（5）缓存穿透"><a href="#（5）缓存穿透" class="headerlink" title="（5）缓存穿透"></a>（5）缓存穿透</h5><img src="https://p9.itc.cn/q_70/images03/20210622/a1b8b0927ad7484286fa965e9dc90a09.png" alt="img">

<p>缓存穿透：用户访问的数据即不在缓存中，也不在数据库中，有以下两种诱因：</p>
<ul>
<li>业务误操作，缓存中的数据和数据库中的数据都被误删除了</li>
<li>黑客恶意攻击，故意大量访问某些读取不存在数据的业务</li>
</ul>
<p>缓存传递应对方法</p>
<ul>
<li>非法请求的限制：在API网关处筛选请求，如果判断出是恶意请求就直接返回错误，避免进一步访问缓存和数据库</li>
<li>缓存空值或者默认值：针对查询的数据，在缓存中设置一个空值或者默认值，这样后续请求就可以从缓存中读取到空值或者默认值，返回给应用，而不会继续查询数据库</li>
<li>布隆过滤器：在写入数据数据时使用布隆过滤器做个标记，通过查询布隆过滤器可以快速判断数据是否存在，避免通过查询数据库来判断数据是否存在（Redis本身也是支持布隆过滤器的）</li>
</ul>
<h5 id="（6）缓存数据一致性"><a href="#（6）缓存数据一致性" class="headerlink" title="（6）缓存数据一致性"></a>（6）缓存数据一致性</h5><p>参考资料：<a href="https://blog.51cto.com/u_14983647/2548012">https://blog.51cto.com/u_14983647/2548012</a></p>
<p>缓存与数据库存在一致性问题的根本原因是：多个线程同时操作相同数据</p>
<p>在<strong>读</strong>的情况下表现为两个同时查询缓存的线程<strong>同时不命中</strong>，在写的情况下表现为多个线程并发回写缓存的值不同，发生<strong>缓存和数据库不一致</strong></p>
<p>有以下几种不同的写入策略</p>
<ul>
<li><p>先更新数据库，再更新缓存（普通低并发）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109280831554.png" alt="8 张图带你分析 Redis 与 MySQL 数据一致性问题_mysql_05"></p>
<p>更新mysql成功，更新redis缓存失败会造成<strong>数据不一致</strong></p>
</li>
</ul>
<ul>
<li><p>先删除缓存，再写入数据库（低并发优化）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109280833664.png" alt="8 张图带你分析 Redis 与 MySQL 数据一致性问题_redis_06"></p>
<p>先将缓存删除，下个进程再请求更新后的数据库来更新缓存，这种方案只适合低并发中使用，在高并发中一旦下一个进程在前一个进程更新数据库前就去更新缓存，那缓存中放入的依旧是旧数据</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109280843114.png" alt="8 张图带你分析 Redis 与 MySQL 数据一致性问题_数据一致性_07"></p>
</li>
<li><p>延时双删策略</p>
</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109280844096.png" alt="8 张图带你分析 Redis 与 MySQL 数据一致性问题_数据一致性_08"></p>
<p>先将缓存删除，在更新数据库后再次删除缓存，可以很快解决不一致的问题，但是仍然有第二次删除错误，多写多读高并发情况下对 MySQL访问的压力（这时候其实可以加入消息队列异步解决，后面会讲到<strong>异步架构</strong>）</p>
<ul>
<li>直接操作缓存，定期写入sql（适合高并发）</li>
</ul>
<img src="https://bigsai.oss-cn-shanghai.aliyuncs.com/img/image-20201106192531468.png" alt="8 张图带你分析 Redis 与 MySQL 数据一致性问题_redis_09" style="zoom: 50%;">

<p>在高并发的情况下，最佳的方法是直接更新缓存，将缓存定期更新到数据库</p>
<h3 id="异步架构"><a href="#异步架构" class="headerlink" title="异步架构"></a>异步架构</h3><h4 id="1-异步架构简介"><a href="#1-异步架构简介" class="headerlink" title="1.异步架构简介"></a>1.异步架构简介</h4><h5 id="（1）需求"><a href="#（1）需求" class="headerlink" title="（1）需求"></a>（1）需求</h5><p>缓存实际上更多解决了<strong>读</strong>的问题，因为缓存很难保证数据的持久性和一致性，所以我们通常不会将数据直接写入缓存中，而是写入 RDBMAS 等数据中，这时候我们使用<strong>消息队列</strong>的<strong>异步架构</strong>提升系统的<strong>写</strong>的性能</p>
<h5 id="（2）同步架构与异步架构"><a href="#（2）同步架构与异步架构" class="headerlink" title="（2）同步架构与异步架构"></a>（2）同步架构与异步架构</h5><p>同步架构：应用程序调用服务时，阻塞进程等待服务完成，直到返回服务结果才会继续执行</p>
<img src="https://mmbiz.qpic.cn/mmbiz_png/NdsdouZwicac3O5p5TVPt4OwoCeI8CEaIibdELIzMiaRPrmvKlcZjMYAtPI749qIqO07O4PxJNtEg8yV9wsdHUkpw/640?wx_fmt=png" alt="img" style="zoom:67%;">



<p>这样的阻塞会带来以下问题：</p>
<ul>
<li>不能释放占用的系统资源，导致系统资源不足，影响系统性能</li>
<li>无法快速给用户响应结果</li>
</ul>
<p>异步架构：应用程序将调用信息发给消息队列就直接返回，应用程序收到返回后继续执行，快速响应用户释放资源。有专门的消费队列程序从中消息队列取出消息发送给邮箱服务器最后将返回结果通知消息队列</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109281929483.png" alt="img"></p>
<ul>
<li></li>
</ul>
<h4 id="2-消息队列"><a href="#2-消息队列" class="headerlink" title="2.消息队列"></a>2.消息队列</h4><h5 id="（1）消息队列模型"><a href="#（1）消息队列模型" class="headerlink" title="（1）消息队列模型"></a>（1）消息队列模型</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109281946207.png" alt="img"></p>
<p>消息队列模型有三个角色：</p>
<ul>
<li>生产者：产生数据封装发给消息队列</li>
<li>消息队列：存储接收到的消息</li>
<li>消费者：从消息队列中取出数据，消费数据</li>
</ul>
<h5 id="（2）消费模式"><a href="#（2）消费模式" class="headerlink" title="（2）消费模式"></a>（2）消费模式</h5><p>参考资料：<a href="https://segmentfault.com/a/1190000019411260">https://segmentfault.com/a/1190000019411260</a></p>
<ul>
<li><p>点对点模式：不可重复消费，Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202109281957502.jpeg" alt="img" style="zoom:67%;">





</li>
</ul>
<ul>
<li><p>订阅模式：可以重复消费，发布到topic的消息会被所有订阅者消费</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202109281957275.jpeg" alt="img" style="zoom: 60%;">



</li>
</ul>
<h5 id="（3）消息队列的优点"><a href="#（3）消息队列的优点" class="headerlink" title="（3）消息队列的优点"></a>（3）消息队列的优点</h5><ul>
<li><strong>实现异步处理，提升处理性能</strong>：不再阻塞客户端程序，提高客户端程序的处理性能</li>
<li><strong>可以让系统获得更好的伸缩性</strong>：耗时的任务可以通过分布式消息队列，向多台消费者服务器并行发送消息，然后在很多台消费者服务器上<strong>并行处理消息</strong>，也就是说可以在多台物理服务器上运行消费者</li>
<li><strong>可以平衡流量峰值，削峰填谷</strong>：通过消息队列的缓冲，将访问的高峰消掉，而将访问的低谷填平，使系统处在一个最佳的处理状态之下，不会对系统的负载产生太大的冲击</li>
<li><strong>失败隔离和自我修复</strong>：生产者不直接依赖消费者，所以分布式消息队列可以将消费者系统产生的错误异常与生产者系统隔离开来，生产者不受消费者失败的影响</li>
<li><strong>生产者和消费者的代码实现解耦合</strong>：多个生产者发布消息，多个消费者处理消息，共同完成完整的业务处理逻辑，但是它们的不需要直接的交互调用，没有代码的依赖耦合</li>
</ul>
<h4 id="3-异步架构总结"><a href="#3-异步架构总结" class="headerlink" title="3.异步架构总结"></a>3.异步架构总结</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109281953133.png" alt="img"></p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡是一种将请求分发到不同服务器以分散高并发计算压力的策略</p>
<h4 id="1-负载均衡方案"><a href="#1-负载均衡方案" class="headerlink" title="1.负载均衡方案"></a>1.负载均衡方案</h4><p>参考资料：<a href="https://segmentfault.com/a/1190000022328323">https://segmentfault.com/a/1190000022328323</a></p>
<h5 id="（1）HTTP重定向负载均衡"><a href="#（1）HTTP重定向负载均衡" class="headerlink" title="（1）HTTP重定向负载均衡"></a>（1）HTTP重定向负载均衡</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109282037827.png" alt="img"></p>
<p>用户请求到HTTP重定向负载均衡服务器，用一套负载均衡算法<strong>计算到后端服务器的地址</strong>，然后将新的地址给用户浏览器，浏览器收到重定向响应后发送请求到新的应用服务器从而实现负载均衡</p>
<p>缺点：</p>
<ul>
<li>加大请求的工作量，用户端要进行两次请求</li>
<li>集群IP地址需要暴露在公网，安全性低</li>
</ul>
<h5 id="（2）DNS负载均衡"><a href="#（2）DNS负载均衡" class="headerlink" title="（2）DNS负载均衡"></a>（2）DNS负载均衡</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109282038685.png" alt="img"></p>
<p>用户通过浏览器发起HTTP请求的时候，DNS 通过对域名进行解析得到 IP 地址，用户委托协议栈的 IP 地址建立HTTP 连接访问真正的服务器，不同的用户进行域名解析将会获取不同的IP地址从而实现负载均衡</p>
<ul>
<li>通过 <strong>DNS 解析</strong>获取负载均衡集群某台服务器的<strong>地址</strong></li>
<li>不用每次都请求负载的ip,可以<strong>缓存</strong>起来，重复使用，提高性能</li>
<li>DNS不用暴露实际计算的服务器IP（不是采用重定向的方式暴露在浏览器，而且做了二次负载均衡，内网的IP不会暴露出来）</li>
</ul>
<h5 id="（3）反向代理负载均衡"><a href="#（3）反向代理负载均衡" class="headerlink" title="（3）反向代理负载均衡"></a>（3）反向代理负载均衡</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109282040480.png" alt="img"></p>
<p>客户端请求反向代理服务器，服务器根据算法得到负载的IP，由反向代理服务器代理客户端请求内网的应用服务器集群，最后将结果返回给客户端</p>
<p>常用的反向代理有：nignx，apache</p>
<p>基于http层做的负载均衡，是一个比较重的协议，效率略低，一般适用于比较小的集群，10+规模</p>
<h5 id="（4）IP负载均衡"><a href="#（4）IP负载均衡" class="headerlink" title="（4）IP负载均衡"></a>（4）IP负载均衡</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109290839127.png" alt="img"></p>
<p>客户端请求负载均衡服务器，服务器修改目标IP为内网机器的IP，最后返回响应数据并修改响应地址为公网ip</p>
<p>对网络层的IP地址进行替换，不需要在http层工作，直接在操作系统内核的IP数据包中替换地址。效率比基于HTTP层的反向代理高</p>
<p>请求和响应度需要经过负载均衡服务器进行ip层替换，响应数据会成为后期的瓶颈</p>
<h5 id="（5）数据链路负载均衡"><a href="#（5）数据链路负载均衡" class="headerlink" title="（5）数据链路负载均衡"></a>（5）数据链路负载均衡</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109282038248.png" alt="img"></p>
<p>客户端请求负载均衡服务器，负载均衡服务器替换mac地址应用服务器，ip为负载均衡服务器ip，计算服务器直接响应数据到客户端；</p>
<p>解决响应数据体量过大效率低的问题，通过修改数据链路层的mac地址，ip使用的是虚拟IP，来实现负载均衡</p>
<p>该负载均衡方式吞吐量高，适合大型互联网公司使用</p>
<h4 id="2-负载均衡算法"><a href="#2-负载均衡算法" class="headerlink" title="2.负载均衡算法"></a>2.负载均衡算法</h4><p>参考资料：</p>
<p><a href="http://www.zhengdexing.org/2019/04/16/LoadBalancing">负载均衡算法介绍</a></p>
<p><a href="https://segmentfault.com/a/1190000022799223">负载均衡算法实现</a></p>
<h5 id="（1）轮询访问"><a href="#（1）轮询访问" class="headerlink" title="（1）轮询访问"></a>（1）轮询访问</h5><p>将请求按照顺序轮流的分配到服务器上，均衡的对待每一台后端的服务器,不关心服务器的的连接数和负载情况，可能导致性能高的服务器无法完全发挥实力，性能低的服务器无法承载过大的负载</p>
<p>如下图：来自客户端的6个请求被均匀分发给两台应用服务器</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109290902293.png" alt="img"></p>
<h5 id="（2）随机访问"><a href="#（2）随机访问" class="headerlink" title="（2）随机访问"></a>（2）随机访问</h5><p>根据服务器列表的大小来随机获取其中的一台来访问，随着调用量的增大，实际效果越来越近似于平均分配到没一台服务器，和轮询的效果类似，比较适合服务器性能差不多的场景</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109290912846.png" alt="img"></p>
<h5 id="（3）加权轮询"><a href="#（3）加权轮询" class="headerlink" title="（3）加权轮询"></a>（3）加权轮询</h5><p>加权轮询是在轮询的基础上，根据服务器的性能差异，为服务器赋予一定的权值，性能高的服务器分配更高的权值</p>
<p>如下图：来自客户端的请求按5:1的权重分发给两台应用服务器</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109290907944.png" alt="img"></p>
<h5 id="（4）最少连接"><a href="#（4）最少连接" class="headerlink" title="（4）最少连接"></a>（4）最少连接</h5><p>由于每个请求的连接时间不一样，使用轮询或者加权轮询算法的话，可能会让一台服务器当前连接数过大，而另一台服务器的连接过小，造成负载不均衡，这时我们可以采用最少连接算法：将请求发送给当前最少连接数的服务器上</p>
<p>如下图：当前服务器1当前连接数最小，那么最新的请求将会发给服务器1</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109290913344.png" alt="img"></p>
<p>在最少连接的基础上，也有加权最少连接算法：根据服务器的性能为每台服务器分配权重以计算出每台服务器能处理的连接数</p>
<h5 id="（5）源地址哈希法"><a href="#（5）源地址哈希法" class="headerlink" title="（5）源地址哈希法"></a>（5）源地址哈希法</h5><p>源地址哈希通过对客户端 IP 计算哈希值之后，再对服务器数量取模得到目标服务器的序号。可以保证同一 IP 的客户端的请求会转发到同一台服务器上，用来实现会话粘滞（让用户在一次会话周期内的所有请求始终转发到一台特定的后端服务器上，这种机制也称为粘滞会话）<img src="https://raw.staticdn.net/Autovy/Image/master/img/202109290915683.png" alt="img"></p>
<h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>参考资料：<a href="https://www.cnblogs.com/linuxk/p/9366838.html">https://www.cnblogs.com/linuxk/p/9366838.html</a></p>
<h4 id="1-数据库主从复制"><a href="#1-数据库主从复制" class="headerlink" title="1.数据库主从复制"></a>1.数据库主从复制</h4><h5 id="（1）一主多重"><a href="#（1）一主多重" class="headerlink" title="（1）一主多重"></a>（1）一主多重</h5><p>为了降低数据库的压力，数据库服务器常常使用<strong>一主多重</strong>结构，对于<strong>容灾、可扩展性和高可用性</strong>，都是有好处，一主多重结构主要依赖于<strong>主从复制</strong>与<strong>读写分离</strong></p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202109291452911.png" alt="image-20210929145219480" style="zoom:67%;">



<h5 id="（2）主从复制"><a href="#（2）主从复制" class="headerlink" title="（2）主从复制"></a>（2）主从复制</h5><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTM0OTUzOS8yMDE4MDcvMTM0OTUzOS0yMDE4MDcyNTE2NDY0Njk1MS05NTkzODQ4MS5wbmc" alt="img">

<p>主从复制即要让主库和从库的数据一致，其实现步骤为：</p>
<ul>
<li>从库IO线程通过主库创建的授权用户连接上master</li>
<li>应用程序发送SQL更新命令到主库，主库将该命令同步记录到Binlog中</li>
<li>主库IO线程对从库IO线程的请求进行验证后，将命令和下一个指定更新的位置（position）发送到从库</li>
<li>从库接收更新日志后加入到自己的RelayLog文件末端，并将读取到的主库Binlog文件名和position记录到master.info文件</li>
<li>从库SQL线程检测到RelayLog中的内容有更新，会立刻解析内容并执行解析后的SQL语句</li>
</ul>
<h5 id="（3）读写分离"><a href="#（3）读写分离" class="headerlink" title="（3）读写分离"></a>（3）读写分离</h5><p>主从复制需要时间，向主库写入数据后，如果直接从从库读取，很可能读不到最新值，所以读写分离主要用于对实时性要求不高的业务场景</p>
<ul>
<li>数据库主机负责读写操作，从机只负责读操作</li>
<li>数据库主机通过复制将数据同步到从机，每台数据库服务器都存储了所有的业务数据</li>
<li>应用服务器将写操作发给数据库主机，将读操作发给数据库从机</li>
</ul>
<h4 id="2-数据库分片"><a href="#2-数据库分片" class="headerlink" title="2.数据库分片"></a>2.数据库分片</h4><p>参考资料<a href="https://segmentfault.com/a/1190000015627336">https://segmentfault.com/a/1190000015627336</a></p>
<h5 id="（1）分片简介"><a href="#（1）分片简介" class="headerlink" title="（1）分片简介"></a>（1）分片简介</h5><p>分片是解决数据库存储容量限制的直接途径。分片包括<strong>垂直分片</strong>与<strong>水平分片</strong>两种方式</p>
<h5 id="（2）垂直分片"><a href="#（2）垂直分片" class="headerlink" title="（2）垂直分片"></a>（2）垂直分片</h5><p>垂直分片又叫纵向分割，把原有数据库切分成按业务多个数据库。垂直拆分后业务清晰，拆分规则明确，系统之间容易整合与扩展</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109291543889.png" alt="图片描述"></p>
<h5 id="（3）水平分片"><a href="#（3）水平分片" class="headerlink" title="（3）水平分片"></a>（3）水平分片</h5><p>水平分片又叫横向分割，即以表中的数据行记录为单位，把原有逻辑数据库切分成多个物理数据库分片，表数据记录分布存储在各个分片上</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109291545069.png" alt="图片描述"></p>
<p>常用水平分片的规则：哈希取模算法<code>H(Key(OrderId)) = Hash(Key(OrderId))%N</code>，将键值相同的行放在一个数据库中</p>
<h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>参考资料：<a href="https://leetcode-cn.com/circle/article/7qT9CA/">https://leetcode-cn.com/circle/article/7qT9CA/</a></p>
<h4 id="1-搜索引擎架构"><a href="#1-搜索引擎架构" class="headerlink" title="1.搜索引擎架构"></a>1.搜索引擎架构</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109291608846.png" alt="img"></p>
<h4 id="2-搜索引擎工作原理分析"><a href="#2-搜索引擎工作原理分析" class="headerlink" title="2.搜索引擎工作原理分析"></a>2.搜索引擎工作原理分析</h4><h5 id="（1）搜集"><a href="#（1）搜集" class="headerlink" title="（1）搜集"></a>（1）搜集</h5><p>网络爬虫的起点是一组优质的种子网页的链接（新浪主页，腾讯主页等），通过广度优先遍历不断遍历这些网页，爬取网页内容，提取其中的链接，并又将这些链接加入待爬队列中，重复上面操作（递归了属于是）</p>
<p><strong>待爬url队列：</strong></p>
<p>待爬取的url放入Redis中，保证高性能。Redis开启持久化功能，支持断点续爬，即便Redis寄了，也可以从上一个待爬url重新开始爬</p>
<p><strong>url判重：</strong></p>
<p>为了避免网页被重复爬取，我们使用布隆过滤器（上面应对缓存穿透也提到过，可以快速判断数据是否存在数据库中）进行去重操作</p>
<p>布隆过滤器由「初始值都为 0 的位图数组」和「 N 个哈希函数」两部分组成，将数据（url）经过多个哈希函数处理用位图数组表示，查询url是否被爬过时，只要查到位图数组对应的值是否全为1，只要有一个0，就认为该url未被爬过</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109291639347.png" alt="img"></p>
<p>布隆过滤器由于是基于哈希函数实现查找的，高效查找的同时存在哈希冲突的可能性，<strong>查询布隆过滤器说数据存在，并不一定证明该数据被处理过，但是查询到数据不存在，这个数据一定是没有处理过的</strong>，针对这种情况我们可以通过<strong>调整布隆过滤器的哈希函数</strong>或其<strong>底层的位图大小</strong>来尽可能地降低误判的概率，至于发生误判的少量url，let it go！（就是这么粗暴）</p>
<p><strong>网页存储文件：</strong></p>
<p>网页信息存储文件</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109291654266.png" alt="img"></p>
<p>网页id-url对应文件</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109291654439.png" alt="img"></p>
<h5 id="（2）预处理"><a href="#（2）预处理" class="headerlink" title="（2）预处理"></a>（2）预处理</h5><p>参考资料：<a href="https://mah93.github.io/2019/08/08/string-matching/">字符串匹配算法</a></p>
<p>爬取完一个网页的html代码后，需要将<code>&lt;script&gt;,&lt;style&gt;,&lt;option&gt;</code>这些无用的标签及标签包含的内容给去掉，然后把其他标签也去掉但是保留里面的内容，最后得到<strong>纯文本</strong>（内容包含用户要搜索的关键词），所以我们需要使用<strong>字符串匹配算法</strong>对html内容进行<strong>预处理</strong>，对于字符串匹配算法这里列个清单自己去查罢 :(</p>
<p>单模式串匹配算法：</p>
<ul>
<li>BF算法</li>
<li>RK算法</li>
<li>BM算法</li>
<li>KMP算法</li>
</ul>
<p>上面的查询算法查询单个字符串效率确实不错，但是我们要一次性查出<code>&lt;script&gt;,&lt;style&gt;,&lt;option&gt;</code>这些字段串，多模式串匹配算法更加高效</p>
<p>多模式串匹配算法：</p>
<ul>
<li>AC自动机</li>
</ul>
<h5 id="（3）分词并创建倒排索引"><a href="#（3）分词并创建倒排索引" class="headerlink" title="（3）分词并创建倒排索引"></a>（3）分词并创建倒排索引</h5><p><strong>分词：</strong></p>
<p>预处理获得纯文本后，要对文本内容进行分词即把一段文本切分为一个个词。英语的分词比较简单，每一个单词基本都是用空格隔开的，中文的分词比较难分割，一般是根据现成的词库进行匹配，有兴趣可以研究一下github上有名的<a href="https://github.com/fxsjy/jieba">jieba</a>分词开源库</p>
<p><strong>组织：</strong></p>
<p>分词后，将单词与网页信息存储文件（文档）对应起来组成以下矩阵</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109291737670.png" alt="img"></p>
<p><strong>倒排索引：</strong></p>
<p>再按照单词-文档组织起来就叫做<strong>倒排索引</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109291955544.png" alt="img"></p>
<p>这样我们只要搜索<strong>单词</strong>，就能找到单词对应的<strong>文档id</strong>，从而定位url（上面分词+倒排索引的处理流程，就是 ElasticSearch 搜索引擎干的事，也是 ES 能达到毫秒级响应的关键）</p>
<p><strong>排序：</strong></p>
<p>根据词语我们获得了一组网页的id，那哪些网页应该排在前面呢？</p>
<p>Google使用了一种叫做”<strong>PageRank</strong>“的算法，通过计算每个网页的权重，并按照权重排序。它以网页之间的超链接个数和质量作为主要因素粗略地分析网页重要性以便对其进行打分。</p>
<p>在PageRank中，如果网页A包含网页B说明A认可了B，即为页面B投了一票</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109292017540.png" alt="img"></p>
<p>如上图：ABCD 初始值都为1，然后根据关系计算权重。比如此时B包含了AD两个网页，那么权重1被分为两个1/2分别给A和D，此时A包含BCD，那么此时A页面新的权重为1/2 + 1/3 + 1 = 11/6</p>
<p>此外还有通过<strong>词频TF</strong>进行排序</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109292024700.png" alt="img"></p>
<h5 id="（4）查询过程"><a href="#（4）查询过程" class="headerlink" title="（4）查询过程"></a>（4）查询过程</h5><ul>
<li>用户输入搜索内容，首先经过分词器处理</li>
<li>按获得的词语去倒排索引里查询相应文档</li>
<li>得到网页id后，去网页存储文件中提取出网页的链接和内容，再按权重从大到小排序即可</li>
</ul>
<h5 id="（5）寻找热门搜索字符串"><a href="#（5）寻找热门搜索字符串" class="headerlink" title="（5）寻找热门搜索字符串"></a>（5）寻找热门搜索字符串</h5><p>现在的搜索引擎还有一项功能：搜索提示词，其主要利用Trie树来实现（字典树，前缀树，单词查询树），如下图</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109292042845.png" alt="img"></p>
<p>这颗多叉树表示了关键字集合 <code>[&quot;to&quot;，&quot;tea&quot;，&quot;ted&quot;，&quot;ten&quot;，&quot;a&quot;，&quot;i&quot;，&quot;in&quot;, &quot;inn&quot;]</code>，</p>
<p>一般搜索引擎会维护一个词库，假设这个词库由所有搜索次数大于某个阈值（如 1000）的字符串组成，我们就可以用这个词库构建一颗 Trie 树，这样当用户输入字母的时候，就可以以这个字母作为前缀去 Trie 树中查找</p>
<p>哪如何获得热门的搜索提示词放在最前面呢？</p>
<p>通常在实现Trie树的时候，会在节点结构中设置一个标志，用来标记该结点处是否构成一个单词，该标记也可以设置为<strong>搜索次数</strong></p>
<p>依次遍历 Trie 树的节点，将节点（字符串+次数）传给一个<strong>小顶堆</strong>，根据搜索次数不断调整小顶堆，这样遍历完 Trie 树的节点后，小顶堆里的 10 个节点即是最热门的搜索字符</p>
<h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><h4 id="1-软件架构"><a href="#1-软件架构" class="headerlink" title="1.软件架构"></a>1.软件架构</h4><p>参考资料：<a href="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/">四种软件架构</a></p>
<h5 id="（1）单体架构"><a href="#（1）单体架构" class="headerlink" title="（1）单体架构"></a>（1）单体架构</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109121533917.png" alt="image-20210912153357714"></p>
<p>典型的三级架构，前端(Web/手机端)+中间业务逻辑层+数据库层</p>
<p>单体架构出现的问题：</p>
<ul>
<li>代码分支管理困难</li>
<li>新增功能麻烦</li>
<li>容易耗尽数据库连接</li>
</ul>
<h5 id="（2）分布式架构"><a href="#（2）分布式架构" class="headerlink" title="（2）分布式架构"></a>（2）分布式架构</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109121532105.png" alt="img"></p>
<p>将一个大的系统划分为多个业务模块，业务模块分别部署在不同的服务器上，各个业务模块之间通过接口进行数据交互。数据库也大量采用分布式数据库，通过LVS/Nginx代理应用，将用户请求均衡的负载到不同的服务器上</p>
<h5 id="（3）微服务架构"><a href="#（3）微服务架构" class="headerlink" title="（3）微服务架构"></a>（3）微服务架构</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109121533619.png" alt="img"></p>
<p>将系统拆分成很多小应用（微服务），微服务可以部署在不同的服务器上，也可以部署在相同的服务器不同的容器上。当应用的故障不会影响到其他应用，单应用的负载也不会影响到其他应用</p>
<p>微服务的特点：</p>
<ul>
<li>大应用拆分为小模块</li>
<li>小模块不属于集群中</li>
<li>通过远程调用的方式依赖各个独立的模块完成业务的处理</li>
</ul>
<p>这些小模块就是一个微服务了</p>
<h4 id="2-微服务技术选型"><a href="#2-微服务技术选型" class="headerlink" title="2.微服务技术选型"></a>2.微服务技术选型</h4><p>参考资料：<a href="https://xie.infoq.cn/article/23d55563fdda52771571807e9">2020微服务架构技术选型</a></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109292309972.png" alt="img"></p>
<p>微服务的内容有点庞大😰，各种技术选型方案也很多，可以查看我的前一篇博文（SpringCloud + Netflix OSS）做一个了解：<a href="https://autovy.github.io/2021/09/20/Java/Java-SpringCloud/">Java|SpringCloud + Netflix OSS Demo</a></p>
<h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><h4 id="1-高可用简介"><a href="#1-高可用简介" class="headerlink" title="1.高可用简介"></a>1.高可用简介</h4><p>系统高可用意味着在一台服务器挂掉的情况下，系统仍然无中断地执行其功能的能力</p>
<h4 id="2-高可用策略"><a href="#2-高可用策略" class="headerlink" title="2.高可用策略"></a>2.高可用策略</h4><h5 id="（1）冗余备份"><a href="#（1）冗余备份" class="headerlink" title="（1）冗余备份"></a>（1）冗余备份</h5><p>冗余备份是指复制关键部件或者系统的主要功能，当意外发生时，可以快速安全地恢复原有的系统，在一定的范围内保障业务的正常运行</p>
<h5 id="（2）负载均衡"><a href="#（2）负载均衡" class="headerlink" title="（2）负载均衡"></a>（2）负载均衡</h5><p>负载均衡也可以保证高可用，使用多台服务器分担一台服务器的压力，负载均衡服务器一旦发现集群中某台服务器出现问题，立刻停止对其的请求分发</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109300822419.png" alt="img"></p>
<h5 id="（3）限流降级"><a href="#（3）限流降级" class="headerlink" title="（3）限流降级"></a>（3）限流降级</h5><p>限流是对部分请求进行丢弃处理，保证大部分的用户可以正常的请求完成任务</p>
<p>降级即可以屏蔽部分当前看来不是很有用的任务</p>
<h5 id="（5）异地多活"><a href="#（5）异地多活" class="headerlink" title="（5）异地多活"></a>（5）异地多活</h5><p>参考资料：<a href="https://zhuanlan.zhihu.com/p/32009822">饿了么异地多活技术实现</a></p>
<p>大型的系统多会在各个地方部署数据中心，采用异地多活的多机房策略</p>
<p>异地多活下，各个地域独立隔离，业务流量可以不均等的分配到各个地域和可用区里面</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109300837226.jpeg" alt="img"></p>
<ul>
<li>gzs是一个全局的（所有机房都可以访问的）服务，保存和推送sharding信息。</li>
<li>API router复制路由外网流量</li>
<li>SOAProxy实现跨机房调用</li>
<li>强一致数据库 / 数据库层的拦截 由DAL实现（图上没展示）</li>
<li>DRC实现Mqsql的双向复制</li>
</ul>
<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><h4 id="1-数据加密"><a href="#1-数据加密" class="headerlink" title="1.数据加密"></a>1.数据加密</h4><p>参考资料：<a href="https://www.jianshu.com/p/94dc5186746d">对称加密、单向加密和非对称加密</a></p>
<h5 id="（1）单向散列加密"><a href="#（1）单向散列加密" class="headerlink" title="（1）单向散列加密"></a>（1）单向散列加密</h5><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109300857948.png" alt="img">



<p>单向加密有以下特征：</p>
<ul>
<li>输入一样，输出必然相同</li>
<li>雪崩效应，输入的微小改变，将会引起结果的巨大变化</li>
<li>定长输出，无论原始数据多大，结果大小都是相同的</li>
<li>不可逆，无法根据特征码还原原来的数据</li>
</ul>
<p>常用的单向加密算法有：MD5，SHA，CRC</p>
<p>单向加密通常应用在用户密码加密中，经过加密后的密码存储在数据库中，即便被脱库了也无法解密出密码（鉴于有些用户会用一些弱密码，容易被彩虹表暴杀，索引单向加密常常也要加一点盐）</p>
<h5 id="（2）对称加密"><a href="#（2）对称加密" class="headerlink" title="（2）对称加密"></a>（2）对称加密</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109300857192.png" alt="img"></p>
<p>采用单钥密码的加密方法，同一个密钥可以同时用来加密和解密</p>
<p>对称加密有以下特点：</p>
<ul>
<li>加密方和解密方使用同一个密钥</li>
<li>加密解密的速度比较快，适合数据比较长时的使用</li>
<li>密钥传输的过程不安全，且容易被破解，密钥管理也比较麻烦</li>
</ul>
<p>常用的对称加密算法有：DES，3DES，AES，Blowfish</p>
<h5 id="（3）非对称加密"><a href="#（3）非对称加密" class="headerlink" title="（3）非对称加密"></a>（3）非对称加密</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109300857820.png" alt></p>
<p>非对称密钥加密也称为公钥加密，由一对公钥和私钥组成。公钥是从私钥提取出来的</p>
<p>可以用公钥加密，再用私钥解密，这种情形一般用于公钥加密；也可以用私钥加密，用公钥解密，常用于数字签名</p>
<p>非对称加密的<strong>主要功能就是加密和数字签名</strong></p>
<p>常用的非对称加密：RSA，DSA，ECC</p>
<h4 id="2-HTTP攻击与防护"><a href="#2-HTTP攻击与防护" class="headerlink" title="2.HTTP攻击与防护"></a>2.HTTP攻击与防护</h4><h5 id="（1）SQL注入"><a href="#（1）SQL注入" class="headerlink" title="（1）SQL注入"></a>（1）SQL注入</h5><p>SQL注入是攻击者在提交请求参数的时候，包含了恶意的SQL脚本</p>
<p>一阶sql注入：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109301727816.png" alt="image-20210930172727417"></p>
<p>二阶sql注入：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109301728597.png" alt="image-20210930172812394"></p>
<p>SQL注入防御方法（来源于wiki）：</p>
<ul>
<li>在设计应用程序时，完全使用<a href="https://zh.wikipedia.org/wiki/參數化查詢">参数化查询</a>（Parameterized Query）来设计资料访问功能（最有效的方式）</li>
<li>在组合SQL字符串时，先针对所传入的参数加入其他字符（将单引号字符前加上转义字符）。</li>
<li>如果使用<a href="https://zh.wikipedia.org/wiki/PHP">PHP</a>开发网页程序的话，需加入转义字符之功能（自动将所有的网页传入参数，将单引号字符前加上转义字符）。</li>
<li>使用php开发，可写入html特殊函数，可正确阻挡<a href="https://zh.wikipedia.org/wiki/XSS">XSS</a>攻击。</li>
<li>其他，使用其他更安全的方式连接SQL数据库。例如已修正过SQL注入问题的数据库连接组件，例如<a href="https://zh.wikipedia.org/wiki/ASP.NET">ASP.NET</a>的SqlDataSource对象或是 <a href="https://zh.wikipedia.org/wiki/语言集成查询">LINQ</a> to SQL。</li>
<li>增强<a href="https://zh.wikipedia.org/w/index.php?title=Web_application_firewall&action=edit&redlink=1">WAF</a>的防御力</li>
</ul>
<h5 id="（2）XSS攻击"><a href="#（2）XSS攻击" class="headerlink" title="（2）XSS攻击"></a>（2）XSS攻击</h5><p>跨站点脚本攻击，攻击者通过构造恶意的浏览器脚本文件注入到网页上，使其在其他用户的浏览器运行进而进行攻击</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109301732875.png" alt="xss.gif"></p>
<p>XSS攻击防御方法：</p>
<ul>
<li>过滤特殊字符</li>
<li>使用HTTP头指定类型即，可强行指定输出内容为文本或JavaScript脚本（顺便指定了内容编码），而非可以引发攻击的HTML</li>
</ul>
<h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><p>参考资料：<a href="https://www.hadoopdoc.com/hdfs/hdfs-tutorial">https://www.hadoopdoc.com/hdfs/hdfs-tutorial</a></p>
<p>（本文只做简单介绍，大数据的内容也挺多的，有兴趣的可以点入上面链接深入学习）</p>
<h4 id="1-文件存储HDFS架构"><a href="#1-文件存储HDFS架构" class="headerlink" title="1.文件存储HDFS架构"></a>1.文件存储HDFS架构</h4><h5 id="（1）HDFS简介"><a href="#（1）HDFS简介" class="headerlink" title="（1）HDFS简介"></a>（1）HDFS简介</h5><p>HDFS是一种分布式文件系统，设计用于在商用硬件上商用，管理数以千计的服务器，数以万计的磁盘，将大规模的服务器资源当做一个单一的出承诺函系统进行管理，操作大批量数据就像使用普通文件系统一样</p>
<h5 id="（2）HDFS节点"><a href="#（2）HDFS节点" class="headerlink" title="（2）HDFS节点"></a>（2）HDFS节点</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109302252992.png" alt="HDFS架构图"></p>
<ul>
<li>Namenode会规范客户端对文件的访问，它维护和管理Slave节点，并把读写任务分配给Slave节点（部署在高可靠的硬件上面）</li>
<li>Datanode负责数据存储，它是真正干活的节点，比如响应客户端的数据读写请求，根据Namenode的指令创建和删除block（可以部署在价格低廉的商用机器上）</li>
</ul>
<h5 id="（3）HDFS进程"><a href="#（3）HDFS进程" class="headerlink" title="（3）HDFS进程"></a>（3）HDFS进程</h5><p>HDFS有2个守护进程：</p>
<ul>
<li><strong>Namenode</strong>：该进程运行在master节点上，Namenode节点存储元数据，比如文件名，块数量，块副本数量，块的存储位置，以及块ID等</li>
<li><strong>Datanode</strong>：该进程运行在Slave节点，这些节点是真正对数据进行处理和存储的节点</li>
</ul>
<h5 id="（4）HDFS数据存储"><a href="#（4）HDFS数据存储" class="headerlink" title="（4）HDFS数据存储"></a>（4）HDFS数据存储</h5><p><img src="/2021/09/30/DevPrinciple/%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/C:%5CUsers%5Clinghao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210930225658950.png" alt="image-20210930225658950"></p>
<p>把文件写入到HDFS的时候，HDFS会把文件分割成很多分片，也就是块（block），文件分割成块之后，HDFS会把他们以分布式方式存储在集群的不多节点上</p>
<h5 id="（5）HDFS机架感知"><a href="#（5）HDFS机架感知" class="headerlink" title="（5）HDFS机架感知"></a>（5）HDFS机架感知</h5><p>为了数据容错，NameNode把块的副本放在多个机架上，NameNode尽量会在每个机架都存储至少一个块副本，这样如果其中一个机架发生故障，系统还是可用的</p>
<p>机架感知策略的目的是提升数据可用性、可靠性和网络带宽利用率</p>
<h5 id="（6）HDFS架构"><a href="#（6）HDFS架构" class="headerlink" title="（6）HDFS架构"></a>（6）HDFS架构</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109301755744.jpeg" alt="HDFS 1.0 架构图"></p>
<ul>
<li><p>Namenode负责存储元数据而Datanode负责存储实际的数据。执行任何任务，客户端都得和Namenode进行交互，因为Namenode是整个集群的中心</p>
</li>
<li><p>Datanode是把数据存储在本地磁盘的，它会定期给Namenode发送心跳信息，以此来表明自己处在工作状态，Datanode还会根据副本因子负责把block拷贝到其他Datanode</p>
</li>
</ul>
<h4 id="2-大数据处理框架"><a href="#2-大数据处理框架" class="headerlink" title="2.大数据处理框架"></a>2.大数据处理框架</h4><h5 id="（1）Mapreduce"><a href="#（1）Mapreduce" class="headerlink" title="（1）Mapreduce"></a>（1）Mapreduce</h5><p>MapReduce 是 Hadoop 生态下面的计算层，它把任务分割成小任务并分发到集群的机器上并行执行，其分为Map和Reduce两个阶段</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109302309030.png" alt="img"></p>
<p>map和reduce进程在分布式集群中启动过程如下：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109302313905.png" alt="img"></p>
<h5 id="（2）Hive"><a href="#（2）Hive" class="headerlink" title="（2）Hive"></a>（2）Hive</h5><p>Hive 是一个架构在 Hadoop 之上的数据仓库基础工具，它可以处理结构化和半结构化数据，它使得查询和分析存储在 Hadoop 上的数据变得非常方便</p>
<p>有了 Hive，你只要开发简单的 SQL 查询就可以达到 MapReduce 作业同样的查询功能</p>
<p><img src="https://www.hadoopdoc.com/media/editor/file_1570081501000_20191003134501543078.png" alt="Hive架构组件"></p>
<h5 id="（3）Spark"><a href="#（3）Spark" class="headerlink" title="（3）Spark"></a>（3）Spark</h5><p>Spark 是一种高效且多用途的集群计算平台，它提供了一整套开发 API，包括流计算、机器学习或者SQL并支持支持批处理和流处理</p>
<p>Spark已经逐步替代MapReduce、Hive、Storm 等传统的大数据计算框架</p>
<p><img src="https://www.hadoopdoc.com/media/editor/file_1571152729000_20191015231852727918.png" alt="spark运行架构及流程"></p>
<p>Spark应用程序涉及了driver，master，worker三个节点：</p>
<ul>
<li>Driver：运行Application的main函数并创建SparkContext（运行环境），Driver同时负责将SparkContext关闭</li>
<li>Worker：集群中任何一个可以运行spark应用代码的节点</li>
<li>Executor：一个应用程序运行的监控和执行容器</li>
</ul>
<h5 id="（4）Flink"><a href="#（4）Flink" class="headerlink" title="（4）Flink"></a>（4）Flink</h5><p>参考资料：<a href="https://flink.apache.org/zh/">Apache Flink</a></p>
<p>Apache Flink 是一个框架和分布式处理引擎，用于在<em>无边界和有边界</em>数据流上进行有状态的计算。Flink 能在所有常见集群环境中运行，并能以内存速度和任意规模进行计算</p>
<p>作为流式数据流执行引擎，针对数据流的分布式计算提供数据分布，数据通信以及容错机制等功能。同时Flink也提供了机器学习库，图计算库等</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109302330786.png" alt="image-20210930233007590"></p>
]]></content>
      <categories>
        <category>开发原理</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>开发原理</tag>
        <tag>深度系列</tag>
      </tags>
  </entry>
  <entry>
    <title>Go|Go语言修炼手册</title>
    <url>/2021/09/08/Go/Go%E8%AF%AD%E8%A8%80%E4%BF%AE%E7%82%BC%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109070837021.jpeg" alt="img"></p>
<p>Go的吉祥物Gopher也太可爱了叭！！！</p>
<span id="more"></span>

<p>参考文章：</p>
<p>Go语言标准库：<a href="https://studygolang.com/pkgdoc">https://studygolang.com/pkgdoc</a></p>
<p>Go案例代码：<a href="https://gobyexample-cn.github.io/">https://gobyexample-cn.github.io/</a></p>
<p>Go语言学习手册：<a href="https://www.topgoer.com/">https://www.topgoer.com/</a></p>
<h3 id="HelloGo"><a href="#HelloGo" class="headerlink" title="HelloGo"></a>HelloGo</h3><h4 id="1-Golang的主要特征"><a href="#1-Golang的主要特征" class="headerlink" title="1.Golang的主要特征"></a>1.Golang的主要特征</h4><ul>
<li><p>自动立即回收</p>
</li>
<li><p>更丰富的内置类型</p>
</li>
<li><p>函数多返回值</p>
</li>
<li><p>错误处理</p>
</li>
<li><p>匿名函数和闭包</p>
</li>
<li><p>类型和接口</p>
</li>
<li><p>并发编程</p>
</li>
<li><p>反射</p>
</li>
<li><p>语言交互性</p>
</li>
</ul>
<h4 id="2-第一个Go程序"><a href="#2-第一个Go程序" class="headerlink" title="2.第一个Go程序"></a>2.第一个Go程序</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要导入main包才能运行main函数</span></span><br><span class="line"><span class="comment">// 而且一个项目中只能有一个文件导入main包使用main函数（类似于C语言）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;HelloGo&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="3-Go的值运算"><a href="#3-Go的值运算" class="headerlink" title="3.Go的值运算"></a>3.Go的值运算</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Value 数据值的一些运算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Value</span><span class="params">()</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;go&quot;</span>+<span class="string">&quot;lang&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;go&quot;</span>,<span class="string">&quot;lang&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;1+1=&quot;</span>, <span class="number">1</span>+<span class="number">1</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;7.0/3.0&quot;</span>)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>)</span><br><span class="line">	fmt.Println(<span class="literal">true</span> || <span class="literal">false</span>)</span><br><span class="line">	fmt.Println(!<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109070857530.png" alt="image-20210907085705239"></p>
<h3 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h3><h4 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h4><h5 id="（1）标准声明"><a href="#（1）标准声明" class="headerlink" title="（1）标准声明"></a>（1）标准声明</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Go语言用var声明变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// go推断变量类型</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;TestString&quot;</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  变量名后声明变量类型</span></span><br><span class="line"><span class="keyword">var</span> b, c <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">fmt.Println(b, c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">true</span></span><br><span class="line">fmt.Println(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明变量赋给默认值</span></span><br><span class="line"><span class="keyword">var</span> e <span class="keyword">int</span></span><br><span class="line">fmt.Println(e)</span><br></pre></td></tr></table></figure>



<h5 id="（2）批量声明"><a href="#（2）批量声明" class="headerlink" title="（2）批量声明"></a>（2）批量声明</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a <span class="keyword">string</span></span><br><span class="line">    b <span class="keyword">int</span></span><br><span class="line">    c <span class="keyword">bool</span></span><br><span class="line">    d <span class="keyword">float32</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h5 id="（3）短变量声明"><a href="#（3）短变量声明" class="headerlink" title="（3）短变量声明"></a>（3）短变量声明</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 化简写法声明字符串变量f（相当于 var f string = &quot;apple&quot;）</span></span><br><span class="line">f := <span class="string">&quot;apple&quot;</span></span><br><span class="line">fmt.Println(f)</span><br></pre></td></tr></table></figure>



<h4 id="2-常量"><a href="#2-常量" class="headerlink" title="2.常量"></a>2.常量</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明恒定值</span></span><br><span class="line"><span class="keyword">const</span> s <span class="keyword">string</span> = <span class="string">&quot;constant&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constants</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	fmt.Println(s)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> n  = <span class="number">500000</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> d = <span class="number">3e20</span> / n</span><br><span class="line"></span><br><span class="line">	fmt.Println(d)</span><br><span class="line">	<span class="comment">// 转换类型</span></span><br><span class="line">	fmt.Println(<span class="keyword">int64</span>(d))</span><br><span class="line">	<span class="comment">// 数学运算</span></span><br><span class="line">	fmt.Println(math.Sin(n))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>常量的声明只是将变量声明中的<code>var</code>更改为<code>const</code></p>
<h3 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h3><h4 id="1-数组Array"><a href="#1-数组Array" class="headerlink" title="1.数组Array"></a>1.数组Array</h4><h5 id="（1）声明默认数组"><a href="#（1）声明默认数组" class="headerlink" title="（1）声明默认数组"></a>（1）声明默认数组</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明默认数组</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line"><span class="comment">// 数组元素赋值</span></span><br><span class="line">a[<span class="number">4</span>] = <span class="number">100</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(a[<span class="number">4</span>])</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(a))</span><br></pre></td></tr></table></figure>



<h5 id="（2）声明并初始化数组"><a href="#（2）声明并初始化数组" class="headerlink" title="（2）声明并初始化数组"></a>（2）声明并初始化数组</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明并初始化数组</span></span><br><span class="line">b:= [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="comment">// ...即让程序自动读取数组大小</span></span><br><span class="line">c:= [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">fmt.Println(b, c)</span><br></pre></td></tr></table></figure>



<h5 id="（3）声明二维数组"><a href="#（3）声明二维数组" class="headerlink" title="（3）声明二维数组"></a>（3）声明二维数组</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明二维数组</span></span><br><span class="line"><span class="keyword">var</span> twoD [<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++&#123;</span><br><span class="line">    <span class="keyword">for</span> j:=<span class="number">0</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">    	twoD[i][j] = i + j</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(twoD)</span><br></pre></td></tr></table></figure>



<h4 id="2-切片Slice"><a href="#2-切片Slice" class="headerlink" title="2.切片Slice"></a>2.切片Slice</h4><h5 id="（1）切片简介"><a href="#（1）切片简介" class="headerlink" title="（1）切片简介"></a>（1）切片简介</h5><ul>
<li>切片是 Go 中的一种关键数据类型（引用类型），它为序列提供了比数组更强大的接口</li>
<li>切片的长度可以改变，因此，切片是一个可变的数组</li>
<li>切片遍历方式和数组一样，可以用len()求长度。表示可用元素数量，读写操作不能超过该限制</li>
</ul>
<h5 id="（2）切片一般声明"><a href="#（2）切片一般声明" class="headerlink" title="（2）切片一般声明"></a>（2）切片一般声明</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明切片（让数组长度为空即形成切片）</span></span><br><span class="line"><span class="keyword">var</span> s1 []<span class="keyword">int</span></span><br><span class="line">s2 := []<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(s1, s2)</span><br></pre></td></tr></table></figure>



<h5 id="（3）make创建"><a href="#（3）make创建" class="headerlink" title="（3）make创建"></a>（3）make创建</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明非0长度的空片，需要用内置的make函数</span></span><br><span class="line"><span class="comment">// make([]type, len, cap):len（长度），cap（容量即为切片最长长度，可选）</span></span><br><span class="line"><span class="comment">// cap可以求出slice最大扩张容量，不能超出数组限制。len(slice) &gt;= len(array)，其中array是slice引用的数组</span></span><br><span class="line">s3 := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">fmt.Println(s3)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s3),<span class="built_in">cap</span>(s3))</span><br></pre></td></tr></table></figure>



<h5 id="（4）切片赋值与追加"><a href="#（4）切片赋值与追加" class="headerlink" title="（4）切片赋值与追加"></a>（4）切片赋值与追加</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切片赋值（虽然切片可以自动扩容，但是取索引时不会扩容）</span></span><br><span class="line">s3[<span class="number">0</span>] = <span class="string">&quot;a&quot;</span></span><br><span class="line">s3[<span class="number">4</span>] = <span class="string">&quot;b&quot;</span></span><br><span class="line">fmt.Println(s3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向切片中追加元素（必须接受返回值，在追加时可能使切片的容量增大）</span></span><br><span class="line">s3 = <span class="built_in">append</span>(s3, <span class="string">&quot;d&quot;</span>)</span><br><span class="line">s3 = <span class="built_in">append</span>(s3, <span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>)</span><br><span class="line"><span class="comment">// 切片可以追加其他切片或数组使用...解压缩</span></span><br><span class="line">s3 = <span class="built_in">append</span>(s3, s3...)</span><br><span class="line">fmt.Println(s3)</span><br></pre></td></tr></table></figure>



<h5 id="（5）切片复制"><a href="#（5）切片复制" class="headerlink" title="（5）切片复制"></a>（5）切片复制</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切片复制</span></span><br><span class="line">c := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(s3))</span><br><span class="line"><span class="built_in">copy</span>(c, s3)</span><br><span class="line">fmt.Println(c)</span><br></pre></td></tr></table></figure>



<h5 id="（6）由数组或切片获得切片"><a href="#（6）由数组或切片获得切片" class="headerlink" title="（6）由数组或切片获得切片"></a>（6）由数组或切片获得切片</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 由数组或切片获得切片</span></span><br><span class="line"><span class="comment">// 获得s3的5，6元素</span></span><br><span class="line">l := s3[<span class="number">5</span>:<span class="number">7</span>]</span><br><span class="line">fmt.Println(l)</span><br><span class="line"><span class="comment">// 去掉切片最后一个元素</span></span><br><span class="line">l = s3[:<span class="built_in">len</span>(s3)<span class="number">-1</span>]</span><br><span class="line">fmt.Println(l)</span><br></pre></td></tr></table></figure>



<h4 id="3-Map"><a href="#3-Map" class="headerlink" title="3.Map"></a>3.Map</h4><h5 id="（1）map的创建"><a href="#（1）map的创建" class="headerlink" title="（1）map的创建"></a>（1）map的创建</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建空地图（键类型为string，值类型为int）</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br></pre></td></tr></table></figure>



<h5 id="（2）map初始化"><a href="#（2）map初始化" class="headerlink" title="（2）map初始化"></a>（2）map初始化</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map初始化</span></span><br><span class="line">n := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;foo&quot;</span>:<span class="string">&quot;str1&quot;</span>, <span class="string">&quot;bar&quot;</span>:<span class="string">&quot;str2&quot;</span>&#125;</span><br><span class="line">fmt.Println(n)</span><br></pre></td></tr></table></figure>



<h5 id="（3）map赋值与取值"><a href="#（3）map赋值与取值" class="headerlink" title="（3）map赋值与取值"></a>（3）map赋值与取值</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map键值对赋值</span></span><br><span class="line">m[<span class="string">&quot;k1&quot;</span>] = <span class="number">7</span></span><br><span class="line">m[<span class="string">&quot;k2&quot;</span>] = <span class="number">10</span></span><br><span class="line"><span class="comment">// map的键为整型时区别于数组</span></span><br><span class="line">m1[<span class="number">1</span>] = <span class="string">&quot;test1&quot;</span></span><br><span class="line">m1[<span class="number">10</span>] = <span class="string">&quot;test2&quot;</span></span><br><span class="line">fmt.Println(m)</span><br><span class="line">fmt.Println(m1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line">v1 := m[<span class="string">&quot;k1&quot;</span>]</span><br><span class="line">fmt.Println(v1)</span><br></pre></td></tr></table></figure>

<p>不存在取值的返回：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不存在的键值默认返回为0，加上_,返回fasle（下划线用来忽略结果，也可以理解为那个位置本应赋给某个值，但是咱们不需要这个值）</span></span><br><span class="line">prs := m[<span class="string">&quot;k2&quot;</span>]</span><br><span class="line">_,prs2 := m[<span class="string">&quot;k2&quot;</span>]</span><br><span class="line">fmt.Println(prs, prs2)</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109070940900.png" alt="image-20210907094003976"></p>
<h5 id="（4）map删除操作"><a href="#（4）map删除操作" class="headerlink" title="（4）map删除操作"></a>（4）map删除操作</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除（map限定，不存在的键自动略过不报错）</span></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">&quot;k2&quot;</span>)</span><br><span class="line">fmt.Println(m)</span><br></pre></td></tr></table></figure>





<h3 id="基本流程控制"><a href="#基本流程控制" class="headerlink" title="基本流程控制"></a>基本流程控制</h3><h4 id="1-if语句"><a href="#1-if语句" class="headerlink" title="1.if语句"></a>1.if语句</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">If</span><span class="params">(str <span class="keyword">string</span>)</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// if语句</span></span><br><span class="line">	<span class="keyword">if</span> str==<span class="string">&quot;IfA&quot;</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;a条件&quot;</span>)</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;其他条件&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 声明可以先于条件</span></span><br><span class="line">	<span class="keyword">if</span> str = <span class="string">&quot;IfA&quot;</span>; str==<span class="string">&quot;IfA&quot;</span>&#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;a条件满足&quot;</span>)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-switch语句"><a href="#2-switch语句" class="headerlink" title="2.switch语句"></a>2.switch语句</h4><h5 id="（1）使用变量作为判定条件"><a href="#（1）使用变量作为判定条件" class="headerlink" title="（1）使用变量作为判定条件"></a>（1）使用变量作为判定条件</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// switch基本案例,使用变量作为判定条件</span></span><br><span class="line">i := <span class="number">2</span></span><br><span class="line">fmt.Println(<span class="string">&quot;write&quot;</span>, i, <span class="string">&quot;as&quot;</span>)</span><br><span class="line">    <span class="keyword">switch</span> i &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;one&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;two&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;three&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="（2）使用函数返回的变量值作为expression"><a href="#（2）使用函数返回的变量值作为expression" class="headerlink" title="（2）使用函数返回的变量值作为expression"></a>（2）使用函数返回的变量值作为expression</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用函数返回的变量值作为expression</span></span><br><span class="line"><span class="comment">// Weekday返回周数（weekday类型）</span></span><br><span class="line"><span class="keyword">switch</span> time.Now().Weekday()&#123;</span><br><span class="line">    <span class="keyword">case</span> time.Saturday, time.Sunday:</span><br><span class="line">    fmt.Println(<span class="string">&quot;weekend&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;weekday&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（3）使用函数返回值的变量作为constant-expression"><a href="#（3）使用函数返回值的变量作为constant-expression" class="headerlink" title="（3）使用函数返回值的变量作为constant-expression"></a>（3）使用函数返回值的变量作为constant-expression</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用函数返回值的变量作为constant-expression</span></span><br><span class="line">t := time.Now()</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> t.Hour() &gt;= <span class="number">6</span> &amp;&amp; t.Hour() &lt; <span class="number">8</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;清晨&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> t.Hour() &gt;= <span class="number">8</span> &amp;&amp; t.Hour() &lt; <span class="number">12</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;早上&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;其他时间&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-for语句"><a href="#3-for语句" class="headerlink" title="3.for语句"></a>3.for语句</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">For</span><span class="params">()</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	i := <span class="number">1</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 只要i小于等于3就一直执行循环</span></span><br><span class="line">	<span class="keyword">for</span> i &lt;= <span class="number">3</span>&#123;</span><br><span class="line">		fmt.Println(i)</span><br><span class="line">		i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 经典for语句初始/条件/后循环</span></span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">7</span>; j &lt;= <span class="number">9</span>; j++&#123;</span><br><span class="line">		fmt.Println(j)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 无条件for循环等待break终止</span></span><br><span class="line">	<span class="keyword">for</span>&#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;loop&quot;</span>)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> n:= <span class="number">0</span>; n &lt;= <span class="number">5</span>; n++&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 复数进入下个循环</span></span><br><span class="line">		<span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(n)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-Range语句"><a href="#4-Range语句" class="headerlink" title="4.Range语句"></a>4.Range语句</h4><h5 id="（1）Range简介"><a href="#（1）Range简介" class="headerlink" title="（1）Range简介"></a>（1）Range简介</h5><ul>
<li>range类似迭代器操作，返回 (索引, 值) 或 (键, 值)</li>
<li>range 格式可以对 slice、map、数组、字符串等进行迭代循环</li>
</ul>
<h5 id="（2）数组遍历"><a href="#（2）数组遍历" class="headerlink" title="（2）数组遍历"></a>（2）数组遍历</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">nums := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="comment">//range会提供索引和值，这里我们不需要索引所以用占位符代替</span></span><br><span class="line"><span class="keyword">for</span> _, num := <span class="keyword">range</span> nums&#123;</span><br><span class="line">sum += num</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br></pre></td></tr></table></figure>



<h5 id="（3）map遍历"><a href="#（3）map遍历" class="headerlink" title="（3）map遍历"></a>（3）map遍历</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历map</span></span><br><span class="line">kvs := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;Ava&quot;</span>, <span class="string">&quot;b&quot;</span>:<span class="string">&quot;Bella&quot;</span>, <span class="string">&quot;c&quot;</span>:<span class="string">&quot;Carol&quot;</span>, <span class="string">&quot;d&quot;</span>:<span class="string">&quot;Diana&quot;</span>, <span class="string">&quot;e&quot;</span>:<span class="string">&quot;Eileen&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> kvs&#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s : %s\n&quot;</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历键</span></span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> kvs&#123;</span><br><span class="line">	fmt.Println(k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历值</span></span><br><span class="line"><span class="keyword">for</span> _,v := <span class="keyword">range</span> kvs&#123;</span><br><span class="line">	fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="1-多参数"><a href="#1-多参数" class="headerlink" title="1.多参数"></a>1.多参数</h4><h5 id="（1）两参数"><a href="#（1）两参数" class="headerlink" title="（1）两参数"></a>（1）两参数</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数接受两个int参数，返回值为int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">plus</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（2）同类型多参数"><a href="#（2）同类型多参数" class="headerlink" title="（2）同类型多参数"></a>（2）同类型多参数</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接受多个同类型参数时</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">plusPlus</span><span class="params">(a, b, c <span class="keyword">int</span>)</span> <span class="title">string</span></span>&#123;</span><br><span class="line">	<span class="comment">// 使用strconv包将整型转换成字符串（强制类型转换会出现乱码）</span></span><br><span class="line">	a1 := strconv.Itoa(a)</span><br><span class="line">	b1 := strconv.Itoa(b)</span><br><span class="line">	c1 := strconv.Itoa(c)</span><br><span class="line">	<span class="keyword">return</span> a1 + b1 + c1</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（3）可变参数"><a href="#（3）可变参数" class="headerlink" title="（3）可变参数"></a>（3）可变参数</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可变参数（不定数量参数）,只能作为最后的参数项</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(str <span class="keyword">string</span>, nums ...<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">		fmt.Println(str, nums)</span><br><span class="line">		total := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> _,num := <span class="keyword">range</span> nums&#123;</span><br><span class="line">			total += num</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		fmt.Println(total)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2-多返回值"><a href="#2-多返回值" class="headerlink" title="2.多返回值"></a>2.多返回值</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多个返回值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">vals</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	add := a + b</span><br><span class="line">	sub := a - b</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> add, sub</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="3-闭包函数"><a href="#3-闭包函数" class="headerlink" title="3.闭包函数"></a>3.闭包函数</h4><h5 id="（1）声明"><a href="#（1）声明" class="headerlink" title="（1）声明"></a>（1）声明</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匿名函数形成闭包</span></span><br><span class="line"><span class="comment">// 匿名函数常用于赋给变量，像普通变量一样传递操作</span></span><br><span class="line"><span class="comment">// 闭包最终效果就是将闭包赋予变量后，通过调用变量调用闭包函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intSeq</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	i := <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		i++</span><br><span class="line">		<span class="keyword">return</span> i</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（2）调用"><a href="#（2）调用" class="headerlink" title="（2）调用"></a>（2）调用</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量赋予闭包，变量可以作为函数使用</span></span><br><span class="line">nextInt := intSeq()</span><br><span class="line"><span class="comment">// intSeq()输出的是原对象指针</span></span><br><span class="line">fmt.Println(intSeq())</span><br><span class="line">fmt.Println(nextInt())</span><br><span class="line">fmt.Println(nextInt())</span><br><span class="line">nextInt2 := intSeq()</span><br><span class="line">fmt.Println(nextInt2())</span><br></pre></td></tr></table></figure>



<h5 id="（3）结果"><a href="#（3）结果" class="headerlink" title="（3）结果"></a>（3）结果</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109071006085.png" alt="image-20210907100638778"></p>
<h4 id="4-递归函数"><a href="#4-递归函数" class="headerlink" title="4.递归函数"></a>4.递归函数</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归计算阶乘</span></span><br><span class="line"><span class="comment">// 递归函数特征</span></span><br><span class="line"><span class="comment">// 1.子问题须与原始问题为同样的事，且更为简单。</span></span><br><span class="line"><span class="comment">// 2.不能无限制地调用本身，须有个出口，化简为非递归状况处理。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fact</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">0</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> n * fact(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><h4 id="1-函数中的指针参数"><a href="#1-函数中的指针参数" class="headerlink" title="1.函数中的指针参数"></a>1.函数中的指针参数</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通参数是将值传递给函数，相当于复制了副本</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">zeroval</span><span class="params">(ival <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">		ival = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用指针作为参数，函数直接操作参数的内存地址</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">zeroptr</span><span class="params">(iptr *<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	fmt.Println(iptr)</span><br><span class="line">	<span class="comment">// 引用当前地址的值并修改</span></span><br><span class="line">	*iptr = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-调用与运行结果"><a href="#2-调用与运行结果" class="headerlink" title="2.调用与运行结果"></a>2.调用与运行结果</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i := <span class="number">1</span></span><br><span class="line"></span><br><span class="line">zeroval(i)</span><br><span class="line">fmt.Println(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取变量地址作为参数</span></span><br><span class="line">zeroptr(&amp;i)</span><br><span class="line">fmt.Println(i)</span><br><span class="line">fmt.Println(&amp;i)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109071015209.png" alt="image-20210907101514269"></p>
<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><h4 id="1-结构体简介"><a href="#1-结构体简介" class="headerlink" title="1.结构体简介"></a>1.结构体简介</h4><p>Go语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。Go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性</p>
<h4 id="2-结构体实例化"><a href="#2-结构体实例化" class="headerlink" title="2.结构体实例化"></a>2.结构体实例化</h4><h5 id="（1）声明结构体"><a href="#（1）声明结构体" class="headerlink" title="（1）声明结构体"></a>（1）声明结构体</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构体是字段的类型化集合，它们可以将数据组合在一起形成记录</span></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（2）结构体实例化"><a href="#（2）结构体实例化" class="headerlink" title="（2）结构体实例化"></a>（2）结构体实例化</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构体实例化方法</span></span><br><span class="line">fmt.Println(person&#123;<span class="string">&quot;Bob&quot;</span>, <span class="number">20</span>&#125;)</span><br><span class="line">s := person&#123;name: <span class="string">&quot;Sean&quot;</span>, age: <span class="number">50</span>&#125;</span><br><span class="line">fmt.Println(s.name)</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109071025874.png" alt="image-20210907102546338"></p>
<h5 id="（3）结构体地址"><a href="#（3）结构体地址" class="headerlink" title="（3）结构体地址"></a>（3）结构体地址</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构体地址</span></span><br><span class="line">fmt.Println(&amp;person&#123;name: <span class="string">&quot;Ava&quot;</span>&#125;)</span><br><span class="line">sp := &amp;s</span><br><span class="line">fmt.Println(sp)</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109071034851.png" alt="image-20210907103421612"></p>
<h4 id="3-构造函数"><a href="#3-构造函数" class="headerlink" title="3.构造函数"></a>3.构造函数</h4><h5 id="（1）构造方法"><a href="#（1）构造方法" class="headerlink" title="（1）构造方法"></a>（1）构造方法</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// newPerson给定的名称一个新的person结构体</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPerson</span><span class="params">(name <span class="keyword">string</span>)</span> *<span class="title">person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 声明新的结构体并赋值</span></span><br><span class="line">	p := person&#123;name:name&#125;</span><br><span class="line">	p.age = <span class="number">42</span></span><br><span class="line">	<span class="comment">// 返回新结构体的位置</span></span><br><span class="line">	<span class="keyword">return</span> &amp;p</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（2）调用与结果"><a href="#（2）调用与结果" class="headerlink" title="（2）调用与结果"></a>（2）调用与结果</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(newPerson(<span class="string">&quot;Bella&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109071039908.png" alt="image-20210907103904793"></p>
<h4 id="4-结构体方法"><a href="#4-结构体方法" class="headerlink" title="4.结构体方法"></a>4.结构体方法</h4><ul>
<li>对于普通函数，接收者为值类型时，不能将指针类型的数据直接传递，反之亦然</li>
<li>对于方法（如struct的方法），接收者为值类型时，可以直接用指针类型的变量调用方法</li>
<li>为了减少内存开销，一般用指针类型作为接收者，用指针变量调用方法</li>
</ul>
<h5 id="（1）定义结构体"><a href="#（1）定义结构体" class="headerlink" title="（1）定义结构体"></a>（1）定义结构体</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义结构体的方法</span></span><br><span class="line"><span class="keyword">type</span> rect <span class="keyword">struct</span> &#123;</span><br><span class="line">	width, height <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（2）指针接收类型方法"><a href="#（2）指针接收类型方法" class="headerlink" title="（2）指针接收类型方法"></a>（2）指针接收类型方法</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指针接收器类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *rect)</span> <span class="title">area</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> r.width * r.height</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值类型调用方法</span></span><br><span class="line">fmt.Println(<span class="string">&quot;area&quot;</span>, r.area())</span><br><span class="line"><span class="comment">// 指针类型调用方法</span></span><br><span class="line">rp := &amp;r</span><br><span class="line">fmt.Println(<span class="string">&quot;area&quot;</span>, rp.area())</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109071105125.png" alt="image-20210907110512031"></p>
<h5 id="（3）值接收类型方法"><a href="#（3）值接收类型方法" class="headerlink" title="（3）值接收类型方法"></a>（3）值接收类型方法</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值接收器类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r rect)</span> <span class="title">perim</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span> * r.width + <span class="number">2</span> * r.height</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值类型调用方法</span></span><br><span class="line">fmt.Println(<span class="string">&quot;perim&quot;</span>, r.perim())</span><br><span class="line"><span class="comment">// 指针类型调用方法</span></span><br><span class="line">fmt.Println(<span class="string">&quot;perim&quot;</span>, rp.perim())</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109071108661.png" alt="image-20210907110638342"></p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="1-接口简介"><a href="#1-接口简介" class="headerlink" title="1.接口简介"></a>1.接口简介</h4><ul>
<li>接口（interface）定义了一个对象的行为规范，只定义规范不实现，由具体的对象来实现规范的细节</li>
<li>interface是一组method的集合，是duck-type programming的一种体现。接口做的事情就像是定义一个协议（规则）</li>
</ul>
<h4 id="2-接口的实现"><a href="#2-接口的实现" class="headerlink" title="2.接口的实现"></a>2.接口的实现</h4><h5 id="（1）定义接口"><a href="#（1）定义接口" class="headerlink" title="（1）定义接口"></a>（1）定义接口</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// go语言提倡面向接口编程</span></span><br><span class="line"><span class="comment">// 接口是一种抽象类型，定义对象的行为规范</span></span><br><span class="line"><span class="keyword">type</span> Gemoetry <span class="keyword">interface</span> &#123;</span><br><span class="line">	area() <span class="keyword">float64</span></span><br><span class="line">	perim() <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（2）构建结构体（用于生成对象）"><a href="#（2）构建结构体（用于生成对象）" class="headerlink" title="（2）构建结构体（用于生成对象）"></a>（2）构建结构体（用于生成对象）</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构建结构体</span></span><br><span class="line"><span class="keyword">type</span> rect2 <span class="keyword">struct</span> &#123;</span><br><span class="line">	width, height <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> circle <span class="keyword">struct</span> &#123;</span><br><span class="line">	radius <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="（3）结构体的方法实现接口"><a href="#（3）结构体的方法实现接口" class="headerlink" title="（3）结构体的方法实现接口"></a>（3）结构体的方法实现接口</h5><p>只要对象实现了接口中所有的方法，就是实现了这个接口</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只要对象实现了接口中所有的方法，就是实现了这个接口（不需要显性声明）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r rect2)</span> <span class="title">area</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> r.width * r.height</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r rect2)</span> <span class="title">perim</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span>*r.width + <span class="number">2</span>*r.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c circle)</span> <span class="title">area</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> math.Pi * c.radius * c.radius</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c circle)</span> <span class="title">perim</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span> * math.Pi * c.radius</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（4）-结构体实例化生成对象"><a href="#（4）-结构体实例化生成对象" class="headerlink" title="（4） 结构体实例化生成对象"></a>（4） 结构体实例化生成对象</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现接口后，接口类型变量可以存储所有实现该接口的实例</span></span><br><span class="line"><span class="keyword">var</span> x Gemoetry</span><br><span class="line"></span><br><span class="line">x = rect2&#123;width: <span class="number">3</span>, height: <span class="number">4</span>&#125;</span><br><span class="line">fmt.Println(x.area())</span><br><span class="line">fmt.Println(x.perim())</span><br><span class="line"></span><br><span class="line">x = circle&#123;radius:<span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(x.area())</span><br><span class="line">fmt.Println(x.perim())</span><br></pre></td></tr></table></figure>



<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>go语言通过显式的返回值传递错误</p>
<h4 id="1-内置接口返回错误信息"><a href="#1-内置接口返回错误信息" class="headerlink" title="1.内置接口返回错误信息"></a>1.内置接口返回错误信息</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数arg，返回值类型int，error</span></span><br><span class="line"><span class="comment">// 使用内置接口返回错误信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(arg <span class="keyword">int</span>)</span><span class="params">(<span class="keyword">int</span>, error)</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> arg == <span class="number">42</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>, errors.New(<span class="string">&quot;can&#x27;t work&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> arg + <span class="number">3</span>, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-自定义结构体"><a href="#2-自定义结构体" class="headerlink" title="2.自定义结构体"></a>2.自定义结构体</h4><h5 id="（1）定义结构体-1"><a href="#（1）定义结构体-1" class="headerlink" title="（1）定义结构体"></a>（1）定义结构体</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义结构体实现 Error ()方法，可以显示表示错误</span></span><br><span class="line"><span class="keyword">type</span> argError <span class="keyword">struct</span>&#123;</span><br><span class="line">	arg <span class="keyword">int</span></span><br><span class="line">	prob <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（2）定义结构体方法"><a href="#（2）定义结构体方法" class="headerlink" title="（2）定义结构体方法"></a>（2）定义结构体方法</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义结构体的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *argError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%d - %s&quot;</span>, e.arg, e.prob)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（3）异常测试方法"><a href="#（3）异常测试方法" class="headerlink" title="（3）异常测试方法"></a>（3）异常测试方法</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数arg，返回值类型int，error</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">(arg <span class="keyword">int</span>)</span><span class="params">(<span class="keyword">int</span>, error)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> arg == <span class="number">42</span>&#123;</span><br><span class="line">		<span class="comment">// 实例化argError返回指针error（执行函数Error）</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>, &amp;argError&#123;arg, <span class="string">&quot;cam&#x27;t work with it&quot;</span>&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> arg + <span class="number">3</span>, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（4）测试用例"><a href="#（4）测试用例" class="headerlink" title="（4）测试用例"></a>（4）测试用例</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r,e = f2(<span class="number">42</span>)</span><br><span class="line">fmt.Println(r, e)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109072134201.png" alt="image-20210907213437028"></p>
<h3 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h3><h4 id="1-Goroutines（协程）"><a href="#1-Goroutines（协程）" class="headerlink" title="1.Goroutines（协程）"></a>1.Goroutines（协程）</h4><h5 id="（1）协程简介"><a href="#（1）协程简介" class="headerlink" title="（1）协程简介"></a>（1）协程简介</h5><ul>
<li><code>go func()</code>这种形式即可实现创建一个新的协程执行函数</li>
<li>一般函数调用是阻塞主线程的，即为同步；而使用协程调用函数，则会与主线程，其他协程一起运行，则是一个异步的过程</li>
<li>在并发编程中，不能用顺序执行语句的同步思维。在多个程序同时运行时，要考虑到各个协程开始的时间和结束的时间决定的运行结果，各个协程对同一数据的同时操作，各个协程任务同步，以及主线程结束后会关闭其他协程（不管其任务是否执行完毕）的问题</li>
</ul>
<h5 id="（2）运行案例"><a href="#（2）运行案例" class="headerlink" title="（2）运行案例"></a>（2）运行案例</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(from <span class="keyword">string</span>)</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++&#123;</span><br><span class="line">		fmt.Println(from, <span class="string">&quot;:&quot;</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Goroutines</span><span class="params">()</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 一般调用同步运行</span></span><br><span class="line">	f(<span class="string">&quot;direct&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将函数放到goroutine运行（Go程序会智能地将 goroutine 中的任务合理地分配给每个CPU）</span></span><br><span class="line">	<span class="keyword">go</span> f(<span class="string">&quot;goroutine&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 为匿名函数启动一个goroutine（最后完成调用）</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">		fmt.Println(msg)</span><br><span class="line">	&#125;(<span class="string">&quot;going&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 必须设置等待，使主线程阻塞，否则main()执行完后goroutine也一同结束了</span></span><br><span class="line">	time.Sleep(time.Millisecond)</span><br><span class="line">	fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109080742743.png" alt="image-20210908074235644"></p>
<h4 id="2-Channels（通道）"><a href="#2-Channels（通道）" class="headerlink" title="2.Channels（通道）"></a>2.Channels（通道）</h4><h5 id="（1）通道简介"><a href="#（1）通道简介" class="headerlink" title="（1）通道简介"></a>（1）通道简介</h5><ul>
<li>通过goroutines可以实现函数并发运行，而这些并发执行的函数可以通过channels交换数据</li>
<li>默认情况下，通道是无缓冲的（阻塞通道），无缓冲的通道必须有接收才能发送</li>
<li>使用make函数初始化通道的时候为其指定通道的容量即可生成有缓冲通道</li>
</ul>
<h5 id="（2）通道的发送与接收"><a href="#（2）通道的发送与接收" class="headerlink" title="（2）通道的发送与接收"></a>（2）通道的发送与接收</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// channel是一种类型，一种引用类型</span></span><br><span class="line"><span class="comment">// 声明并初始化channel（声明的通道后需要使用make函数初始化之后才能使用）</span></span><br><span class="line">messages := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">fmt.Println(reflect.TypeOf(messages), messages)</span><br><span class="line"></span><br><span class="line"><span class="comment">// goroutines中函数将信息发送到messages通道</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;messages &lt;- <span class="string">&quot;ping&quot;</span>&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收信息</span></span><br><span class="line">msg := &lt;-messages</span><br><span class="line">fmt.Println(reflect.TypeOf(msg), msg)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109080812902.png" alt="image-20210908081215613"></p>
<h5 id="（3）无缓冲通道"><a href="#（3）无缓冲通道" class="headerlink" title="（3）无缓冲通道"></a>（3）无缓冲通道</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认情况下，通道是无缓冲的（阻塞通道），无缓冲的通道必须有接收才能发送</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">ch &lt;- <span class="number">10</span></span><br><span class="line">fmt.Println(<span class="string">&quot;发送成功&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109080814350.png" alt="image-20210908081412049"></p>
<p>无缓冲通道原理图：</p>
<p>无缓冲相当于小区没有快递点，快递员必须亲自把这个物品送到你的手上</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109080815152.png" alt="img"></p>
<h5 id="（4）有缓冲通道"><a href="#（4）有缓冲通道" class="headerlink" title="（4）有缓冲通道"></a>（4）有缓冲通道</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用make函数初始化通道的时候为其指定通道的容量即可生成有缓冲通道</span></span><br><span class="line"><span class="comment">// 有缓冲通道（相当于设置了快递点）</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line">ch &lt;- <span class="number">10</span></span><br><span class="line">ch &lt;- <span class="number">20</span></span><br><span class="line">fmt.Println(<span class="string">&quot;发送成功&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>有缓冲通道原理图：</p>
<p>有缓冲通道相当于小区有个菜鸟驿站（非广告）或代收点帮你存快递，需要时再去取快递</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109080819934.png" alt="img"></p>
<h5 id="（5）信道同步"><a href="#（5）信道同步" class="headerlink" title="（5）信道同步"></a>（5）信道同步</h5><p>在协程中存在着主线程结束后不管子协程有没有完成任务仍然让其强制下班的问题</p>
<p>虽然可以通过时间延迟让主线程嗯等，但是这种硬性处理方式浪费资源</p>
<p>通过信道，我们可以让主线程等待子协程发送任务完成的信号再结束自己的生命</p>
<p>子协程任务：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 信道同步</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(done <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span>&#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;working&quot;</span>)</span><br><span class="line">	time.Sleep(time.Second)</span><br><span class="line">	fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">    <span class="comment">// 发送任务完成的信号到通道</span></span><br><span class="line">	done &lt;- <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主线程的运行：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 信道同步</span></span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> worker(done)</span><br><span class="line"><span class="comment">// 阻塞接收，等待goroutine完成</span></span><br><span class="line">&lt;- done</span><br></pre></td></tr></table></figure>



<h5 id="（6）单向通道"><a href="#（6）单向通道" class="headerlink" title="（6）单向通道"></a>（6）单向通道</h5><p>将通道作为参数在多个任务函数间传递时，限制通道在函数中只能发送或只能接收</p>
<p>单向通道通信方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送通道 chan &lt;- int 接收通道 &lt;- chan int</span></span><br><span class="line"><span class="comment">// 发送信息到pings通道</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ping</span><span class="params">(pings <span class="keyword">chan</span>&lt;-<span class="keyword">string</span>, msg <span class="keyword">string</span>)</span></span>  &#123;</span><br><span class="line">	pings &lt;- msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收pings通道的信息， 发送到pongs通道</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pong</span><span class="params">(pings &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>, pongs <span class="keyword">chan</span>&lt;-<span class="keyword">string</span>)</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">		msg := &lt;-pings</span><br><span class="line">		pongs &lt;- msg</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单向通道的使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单向信道</span></span><br><span class="line">pings := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">pongs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 发送信息到pings通道</span></span><br><span class="line">ping(pings, <span class="string">&quot;passed message&quot;</span>)</span><br><span class="line"><span class="comment">// 接收pings通道的信息， 发送到pongs通道</span></span><br><span class="line">pong(pings, pongs)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收pongs信道信息并发送</span></span><br><span class="line">fmt.Println(&lt;-pongs)</span><br></pre></td></tr></table></figure>



<h4 id="3-通道操作"><a href="#3-通道操作" class="headerlink" title="3.通道操作"></a>3.通道操作</h4><h5 id="（1）通道关闭"><a href="#（1）通道关闭" class="headerlink" title="（1）通道关闭"></a>（1）通道关闭</h5><p>通道关闭这个信息也可以被接收到</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Close</span><span class="params">()</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	jobs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">5</span>)</span><br><span class="line">	done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 工作协程接收来自Close协程的信息，当接受完毕后关闭jobs通道</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			<span class="comment">// 接受到more为fasle说明通道被关闭了，发送信息的任务已经结束</span></span><br><span class="line">			j, more := &lt;-jobs</span><br><span class="line">			<span class="keyword">if</span> more &#123;</span><br><span class="line">				fmt.Println(<span class="string">&quot;received job&quot;</span>, j)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				fmt.Println(<span class="string">&quot;received all jobs&quot;</span>)</span><br><span class="line">				<span class="comment">// 完成全部任务后通知close协程</span></span><br><span class="line">				done &lt;- <span class="literal">true</span></span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 向jobs通道发送信息</span></span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++&#123;</span><br><span class="line">		jobs &lt;- j</span><br><span class="line">		fmt.Println(<span class="string">&quot;sent job&quot;</span>, j)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 关闭通道</span></span><br><span class="line">	<span class="built_in">close</span>(jobs)</span><br><span class="line">	fmt.Println(<span class="string">&quot;sent all job&quot;</span>)</span><br><span class="line">	<span class="comment">// close协程接收到完成的信号关闭close协程</span></span><br><span class="line">	<span class="comment">// 使得主协程能随工作协程同步结束,可以防止主协程运行完成了,工作协程未完成接收就一起随主协程关闭的情况</span></span><br><span class="line">	&lt;-done</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081521451.png" alt="image-20210908152110310"></p>
<h5 id="（2）通道数据遍历"><a href="#（2）通道数据遍历" class="headerlink" title="（2）通道数据遍历"></a>（2）通道数据遍历</h5><p>通过range语句也可以遍历通道的数据，但是要先关闭掉通道</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ChannelsRange</span><span class="params">()</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 通道数据遍历</span></span><br><span class="line">	queue := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">3</span>)</span><br><span class="line">	queue &lt;- <span class="string">&quot;one&quot;</span></span><br><span class="line">	queue &lt;- <span class="string">&quot;two&quot;</span></span><br><span class="line">	<span class="comment">// 遍历前要先关闭通道(让循环的迭代在2后结束)</span></span><br><span class="line">	<span class="built_in">close</span>(queue)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 通道关闭后仍然可以接收到信息(无法发送信息)</span></span><br><span class="line">	<span class="keyword">for</span> elem := <span class="keyword">range</span> queue&#123;</span><br><span class="line">		fmt.Println(elem)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h4 id="4-select"><a href="#4-select" class="headerlink" title="4.select"></a>4.select</h4><h5 id="（1）同时响应多个通道的操作"><a href="#（1）同时响应多个通道的操作" class="headerlink" title="（1）同时响应多个通道的操作"></a>（1）同时响应多个通道的操作</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启任务1</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">	time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">	c1 &lt;- <span class="string">&quot;one&quot;</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启任务2</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">	time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">	c2 &lt;- <span class="string">&quot;two&quot;</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用select可以同时响应多个通道的操作，从而实现从多个通道接收数据（本质也是对各个通道扫描）</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++&#123;</span><br><span class="line">	<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> msg1 := &lt;- c1:</span><br><span class="line">			fmt.Println(msg1)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> msg2 := &lt;- c2:</span><br><span class="line">			fmt.Println(msg2)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109080853240.png" alt="image-20210908085306965"></p>
<h5 id="（2）非阻塞发送接收"><a href="#（2）非阻塞发送接收" class="headerlink" title="（2）非阻塞发送接收"></a>（2）非阻塞发送接收</h5><p>这里所谓的非阻塞是指通过select的default让主线程进入默认分支</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用select实现通道非阻塞发送接收</span></span><br><span class="line">messages := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">signals := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非阻塞接收</span></span><br><span class="line"><span class="keyword">select</span>&#123;</span><br><span class="line">	<span class="comment">// 成功读到数据到msg</span></span><br><span class="line">	<span class="keyword">case</span> msg := &lt;-messages:</span><br><span class="line">		fmt.Println(<span class="string">&quot;received message&quot;</span>, msg)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;no message received&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msg := <span class="string">&quot;hi&quot;</span></span><br><span class="line"><span class="comment">// 非阻塞发送</span></span><br><span class="line"><span class="keyword">select</span>&#123;</span><br><span class="line">	<span class="comment">// 成功发送数据到messages</span></span><br><span class="line">	<span class="keyword">case</span> messages &lt;- msg:</span><br><span class="line">		fmt.Println(<span class="string">&quot;sent message&quot;</span>, msg)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;no message sent&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> msg := &lt;- messages:</span><br><span class="line">		fmt.Println(<span class="string">&quot;received message&quot;</span>, msg)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> sig := &lt;- signals:</span><br><span class="line">		fmt.Println(<span class="string">&quot;received signal&quot;</span>, sig)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;no activity&quot;</span>)</span><br><span class="line">		&#125;	</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109080905553.png" alt="image-20210908090500412"></p>
<h5 id="（3）超时操作"><a href="#（3）超时操作" class="headerlink" title="（3）超时操作"></a>（3）超时操作</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 超时对于一个需要连接外部资源，或者有耗时较长的操作的程序而言是很重要的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Timeouts</span><span class="params">()</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">		c1 &lt;- <span class="string">&quot;res 1&quot;</span></span><br><span class="line"></span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="comment">// 等待结果</span></span><br><span class="line">		<span class="keyword">case</span> res := &lt;- c1:</span><br><span class="line">			fmt.Println(res)</span><br><span class="line">		<span class="comment">// 等待超时后发送的值</span></span><br><span class="line">		<span class="keyword">case</span> &lt;-time.After(<span class="number">1</span> * time.Second):</span><br><span class="line">			fmt.Println(<span class="string">&quot;timeout 1&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5-定时器"><a href="#5-定时器" class="headerlink" title="5.定时器"></a>5.定时器</h4><h5 id="（1）定时器Timer"><a href="#（1）定时器Timer" class="headerlink" title="（1）定时器Timer"></a>（1）定时器Timer</h5><p>定时器的作用与time.Sleep类似，不同的是time.Sleep硬性规定等待一定时间才能继续进程,而定时器可以在触发前取消掉</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Timer</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	<span class="comment">// 定时器表示在未来某一时刻的独立事件</span></span><br><span class="line">	time1 := time.NewTimer(<span class="number">2</span> * time.Second)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 阻塞直到定时器的通道C发送定时器失效的值</span></span><br><span class="line">	&lt;- time1.C</span><br><span class="line">	fmt.Println(<span class="string">&quot;Timer 1 fired&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用定时器与time.Sleep不同之处在于:</span></span><br><span class="line">	<span class="comment">// time.Sleep硬性规定等待一定时间才能继续进程,而定时器可以在触发前取消掉</span></span><br><span class="line">	time2 := time.NewTimer(time.Second)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		&lt;- time2.C</span><br><span class="line">		fmt.Println(<span class="string">&quot;Time 2 fired&quot;</span>)</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 停止定时器</span></span><br><span class="line">	stop2 := time2.Stop()</span><br><span class="line">	<span class="keyword">if</span> stop2 &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Timer 2 stopped&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081529584.png" alt="image-20210908152938454"></p>
<h5 id="（2）打点器Ticker"><a href="#（2）打点器Ticker" class="headerlink" title="（2）打点器Ticker"></a>（2）打点器Ticker</h5><p>定时器用于执行一次时使用,而打点器用于在固定时间间隔重复执行而准备</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Ticker</span><span class="params">()</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义打点器</span></span><br><span class="line">	ticker := time.NewTicker(<span class="number">500</span> * time.Millisecond)</span><br><span class="line">	done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="comment">// 不断运行,直到从主协程接收到done</span></span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			<span class="keyword">select</span> &#123;</span><br><span class="line">				<span class="keyword">case</span> &lt;- done:</span><br><span class="line">					<span class="keyword">return</span></span><br><span class="line">				<span class="keyword">case</span> t := &lt;- ticker.C:</span><br><span class="line">					fmt.Println(<span class="string">&quot;Tick at&quot;</span>, t)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打点器一共运行2000ms,每一次500ms,可以粗略算出运行4次</span></span><br><span class="line">	time.Sleep(<span class="number">2000</span> * time.Millisecond)</span><br><span class="line">	<span class="comment">// 停止打点器并结束子协程</span></span><br><span class="line">	ticker.Stop()</span><br><span class="line">	done &lt;- <span class="literal">true</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;Ticker stopped&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081532259.png" alt="image-20210908153237860"></p>
<h5 id="（3）速率限制"><a href="#（3）速率限制" class="headerlink" title="（3）速率限制"></a>（3）速率限制</h5><p>速率限制是控制服务资源利用和质量的重要机制。 基于协程、通道和打点器，Go 优雅的支持速率限制</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RateLimiting</span><span class="params">()</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	requests := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">5</span>)</span><br><span class="line">	<span class="keyword">for</span> i:= <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++&#123;</span><br><span class="line">		requests &lt;- i</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(requests)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 速率限制调度器设置</span></span><br><span class="line">    <span class="comment">// tick是NewTicker的封装，只提供对Ticker的通道的访问</span></span><br><span class="line">	limiter := time.Tick(<span class="number">200</span> * time.Millisecond)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> req := <span class="keyword">range</span> requests&#123;</span><br><span class="line">		<span class="comment">// 让请求每200ms执行一次</span></span><br><span class="line">		&lt;-limiter</span><br><span class="line">		fmt.Println(<span class="string">&quot;request&quot;</span>, req, time.Now())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 速率限制方案允许短暂的并发请求，并同时保留总体速率限制</span></span><br><span class="line">	<span class="comment">// 填充通道表示允许的爆发</span></span><br><span class="line">	burstyLimiter := <span class="built_in">make</span>(<span class="keyword">chan</span> time.Time, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 每200ms新的值到burstyLimiter中，直到达到 3 个的限制。</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++&#123;</span><br><span class="line">		burstyLimiter &lt;- time.Now()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> t := <span class="keyword">range</span> time.Tick(<span class="number">200</span> * time.Millisecond)&#123;</span><br><span class="line">			burstyLimiter &lt;- t</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 模拟5个传入请求</span></span><br><span class="line">	busstyRequests := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">5</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++&#123;</span><br><span class="line">		busstyRequests &lt;- i</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(busstyRequests)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 受益于burstyLimiter 的爆发（bursts）能力，前 3 个请求可以快速完成</span></span><br><span class="line">	<span class="keyword">for</span> req := <span class="keyword">range</span> busstyRequests&#123;</span><br><span class="line">		&lt;- burstyLimiter</span><br><span class="line">		fmt.Println(<span class="string">&quot;request&quot;</span>, req, time.Now())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-Goroutine池"><a href="#6-Goroutine池" class="headerlink" title="6.Goroutine池"></a>6.Goroutine池</h4><p>工作池实质上时生产者消费者模型，其可以有效控制gorouine的数量</p>
<p>工作池中有工人（处理工作的协程），有两条流水线（传递工作的通道与传递结果的通道）</p>
<h5 id="（1）创建工作池"><a href="#（1）创建工作池" class="headerlink" title="（1）创建工作池"></a>（1）创建工作池</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数：任务编号id，从通道接收工作jobs，发送结果到res通道</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">workers</span><span class="params">(id <span class="keyword">int</span>, jobs &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>, res <span class="keyword">chan</span>&lt;- <span class="keyword">int</span> )</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> j := <span class="keyword">range</span> jobs&#123;</span><br><span class="line"></span><br><span class="line">			fmt.Println(<span class="string">&quot;worker&quot;</span>, id, <span class="string">&quot;started job&quot;</span>, j)</span><br><span class="line">			time.Sleep(time.Second)</span><br><span class="line">			fmt.Println(<span class="string">&quot;worker&quot;</span>, id, <span class="string">&quot;finnished job&quot;</span>, j)</span><br><span class="line">			res &lt;- j * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（2）使用工作池"><a href="#（2）使用工作池" class="headerlink" title="（2）使用工作池"></a>（2）使用工作池</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WorkerPools</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> numJob = <span class="number">5</span></span><br><span class="line">	jobs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, numJob)</span><br><span class="line">	results := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, numJob)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建三个worker任务（初始时阻塞的，因为还没有传递任务）</span></span><br><span class="line">	<span class="comment">// 三个workers任务并行执行（即工作池有三位工具人，两条流水线）</span></span><br><span class="line">	<span class="keyword">for</span> w := <span class="number">1</span>; w &lt;= <span class="number">3</span>; w++&#123;</span><br><span class="line">		<span class="keyword">go</span> workers(w, jobs, results)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 发送信息到jobs</span></span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= numJob; j++&#123;</span><br><span class="line">		jobs &lt;- j</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 关闭通道，表示发送完毕</span></span><br><span class="line">	<span class="built_in">close</span>(jobs)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 收集worker的返回值，确保所有worker协程都已经完成</span></span><br><span class="line">	<span class="keyword">for</span> a := <span class="number">1</span>; a &lt;= numJob; a++&#123;</span><br><span class="line">		&lt;-results</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081546666.png" alt="image-20210908154642399"></p>
<h4 id="7-Sync"><a href="#7-Sync" class="headerlink" title="7.Sync"></a>7.Sync</h4><h5 id="（1）WaitGroup"><a href="#（1）WaitGroup" class="headerlink" title="（1）WaitGroup"></a>（1）WaitGroup</h5><p>在前面的例子中</p>
<ul>
<li>为了同步子协程与主线程我们通过传递done来让主线程等等子协程</li>
<li>为了让主线程等待工作池内的子协程完成任务我们通过收集返回结果来实现同步</li>
<li>这次我们用 sync.WaitGroup来实现并发任务的同步，其内部维护着一个计数器（每个计数器对应一个并发任务）</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sync.WaitGroup来实现并发任务的同步，其内部维护着一个计数器（每个计数器对应一个并发任务）</span></span><br><span class="line"><span class="comment">// WaitGroup 必须通过指针传递给函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">workerA</span><span class="params">(id <span class="keyword">int</span>, wg *sync.WaitGroup)</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 延迟调用wg的Done方法（相当于直到return后才执行），计数器减1（当计数器为0，表明所有的并发任务完成）</span></span><br><span class="line">	<span class="keyword">defer</span> wg.Done()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Worker %d starting\n&quot;</span>, id)</span><br><span class="line">	time.Sleep(time.Second)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Worker %d done\n&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WaitGroup</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	<span class="comment">// WaitGroup 用于等待该函数启动的所有协程</span></span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">		<span class="comment">// 递增wg计数器</span></span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="comment">// 启动多个协程任务，并传递其wg计数器</span></span><br><span class="line">		<span class="keyword">go</span> workerA(i, &amp;wg)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 阻塞（主协程）至计数器变为0（所有并发协程已完成）结束</span></span><br><span class="line">	wg.Wait()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081630685.png" alt="image-20210908163034514"></p>
<h4 id="8-并发安全"><a href="#8-并发安全" class="headerlink" title="8.并发安全"></a>8.并发安全</h4><p>在工作池中我们使用通道之间的通信管理状态，下面我们使用atomic原子技术和互斥锁技术管理状态保证并发安全</p>
<p>这里以多协程并发访问同一变量作为并发安全问题的案例</p>
<h5 id="（1）互斥锁"><a href="#（1）互斥锁" class="headerlink" title="（1）互斥锁"></a>（1）互斥锁</h5><p>在一个协程操作对资源上锁，其他协程无法访问到该资源，保证了</p>
<p>只有一个协程可以访问共享资源</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Mutexes</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	<span class="comment">// 访问对象</span></span><br><span class="line">	<span class="keyword">var</span> state = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// mutex同步对state的访问</span></span><br><span class="line">	<span class="keyword">var</span> mutex = &amp;sync.Mutex&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 追踪读写操作的数量</span></span><br><span class="line">	<span class="keyword">var</span> readOps <span class="keyword">uint64</span></span><br><span class="line">	<span class="keyword">var</span> writeOps <span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> r := <span class="number">0</span>; r &lt; <span class="number">100</span>; r++&#123;</span><br><span class="line">		<span class="comment">// 启动100个协程做读取操作，每个协程以每 1ms 一次的频率来重复读取 state</span></span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			total := <span class="number">0</span></span><br><span class="line">			<span class="keyword">for</span>&#123;</span><br><span class="line">				<span class="comment">// 生成键对map进行访问（生成在5之间的随机数）</span></span><br><span class="line">				key := rand.Intn(<span class="number">5</span>)</span><br><span class="line">				<span class="comment">// 互斥锁保证该协程对map独占访问</span></span><br><span class="line">				mutex.Lock()</span><br><span class="line">				<span class="comment">// 读取选定键的值</span></span><br><span class="line">				total += state[key]</span><br><span class="line">				<span class="comment">// 解开互斥锁</span></span><br><span class="line">				mutex.Unlock()</span><br><span class="line">				<span class="comment">// 读操作增加1</span></span><br><span class="line">				atomic.AddUint64(&amp;readOps, <span class="number">1</span>)</span><br><span class="line">				time.Sleep(time.Millisecond)</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;()</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> w := <span class="number">0</span>; w &lt; <span class="number">10</span>; w++&#123;</span><br><span class="line">		<span class="comment">// 启动10个协程模拟写入操作</span></span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			<span class="comment">// 与读取的协程类似</span></span><br><span class="line">			key := rand.Intn(<span class="number">5</span>)</span><br><span class="line">			val := rand.Intn(<span class="number">100</span>)</span><br><span class="line">			mutex.Lock()</span><br><span class="line">			state[key] = val</span><br><span class="line">			mutex.Unlock()</span><br><span class="line">			<span class="comment">// 写操作增加1</span></span><br><span class="line">			atomic.AddUint64(&amp;writeOps, <span class="number">1</span>)</span><br><span class="line">			time.Sleep(time.Millisecond)</span><br><span class="line"></span><br><span class="line">		&#125;()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 让这 10 个协程对 state 和 mutex 的操作持续 1 s（主进程阻塞）</span></span><br><span class="line">	time.Sleep(time.Second)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 展示最终操作数</span></span><br><span class="line">	readOpsFinal := atomic.LoadUint64(&amp;readOps)</span><br><span class="line">	fmt.Println(<span class="string">&quot;readOps:&quot;</span>, readOpsFinal)</span><br><span class="line">	writeOpsFianl := atomic.LoadUint64(&amp;writeOps)</span><br><span class="line">	fmt.Println(<span class="string">&quot;writeOps:&quot;</span>, writeOpsFianl)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 关闭对state的操作，展示最后结束时的state</span></span><br><span class="line">	mutex.Lock()</span><br><span class="line">	fmt.Println(<span class="string">&quot;state:&quot;</span>, state)</span><br><span class="line">	mutex.Unlock()</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081711312.png" alt="image-20210908171059061"></p>
<h5 id="（2）atomic（原子操作）"><a href="#（2）atomic（原子操作）" class="headerlink" title="（2）atomic（原子操作）"></a>（2）atomic（原子操作）</h5><p>加锁操作因为涉及内核态的上下文切换会比较耗时、代价比较高。针对基本数据类型我们还可以使用原子操作来保证并发安全</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Atomic</span><span class="params">()</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置原子计数器</span></span><br><span class="line">	<span class="keyword">var</span> ops <span class="keyword">uint64</span></span><br><span class="line">	<span class="comment">// 设置非原子计数器</span></span><br><span class="line">	<span class="keyword">var</span> opn <span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// waitgroup等待协程完成工作</span></span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">50</span>; i++&#123;</span><br><span class="line">		<span class="comment">// 增加协程计数器</span></span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 开启协程进行原子操作</span></span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			<span class="keyword">for</span> c := <span class="number">0</span>; c &lt; <span class="number">1000</span>; c++&#123;</span><br><span class="line">				<span class="comment">// 原子操作增加计数器数值，各协程操作同一数据时之间不会互相干扰</span></span><br><span class="line">				atomic.AddUint64(&amp;ops, <span class="number">1</span>)</span><br><span class="line">				<span class="comment">// 非原子计数，各协程相互干扰</span></span><br><span class="line">				opn++</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 增加操作结束后，协程计数器-1</span></span><br><span class="line">			wg.Done()</span><br><span class="line">		&#125;()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 等待直到所有协程完成</span></span><br><span class="line">	wg.Wait()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 安全访问ops（此时无协程写入内容）</span></span><br><span class="line">	<span class="comment">// 此外atomic.LoadUint64 之类的函数，在原子更新的同时安全地读取它们</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;ops&quot;</span>, ops)</span><br><span class="line">	fmt.Println(<span class="string">&quot;opn&quot;</span>, opn)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081652041.png" alt="image-20210908165217871"></p>
<h5 id="（3）状态协程"><a href="#（3）状态协程" class="headerlink" title="（3）状态协程"></a>（3）状态协程</h5><p>互斥锁中通过锁定让state跨多个go协程同步访问<br>这里我们通过内建协程和通道同步的特性来实现同样的效果<br>通过通信使每个数据仅被单个协程所拥有，即通过通信实现共享内存</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构体封装写入与读取的请求</span></span><br><span class="line"><span class="keyword">type</span> readOp <span class="keyword">struct</span> &#123;</span><br><span class="line">	key <span class="keyword">int</span></span><br><span class="line">	resp <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> writeOp <span class="keyword">struct</span> &#123;</span><br><span class="line">	key <span class="keyword">int</span></span><br><span class="line">	value <span class="keyword">int</span></span><br><span class="line">	resp <span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SatefulGoroutines</span><span class="params">()</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> readOps <span class="keyword">uint64</span></span><br><span class="line">	<span class="keyword">var</span> writeOps <span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建readOp，writeOp类型的通道</span></span><br><span class="line">	<span class="comment">// 其他协程将通过 reads 和 writes 通道来发布 读 和 写 请求</span></span><br><span class="line">	reads := <span class="built_in">make</span>(<span class="keyword">chan</span> readOp)</span><br><span class="line">	writes := <span class="built_in">make</span>(<span class="keyword">chan</span> writeOp)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 拥有state的协程（私有），其可以不断接收读写通道的信息</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="comment">// state为该协程私有，其他协程（包括主协程都不能访问）</span></span><br><span class="line">		<span class="keyword">var</span> state = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			<span class="keyword">select</span>&#123;</span><br><span class="line">				<span class="comment">// 其他协程进行读操作，返回map键对应的值</span></span><br><span class="line">				<span class="keyword">case</span> read := &lt;-reads:</span><br><span class="line">					read.resp &lt;- state[read.key]</span><br><span class="line">				<span class="comment">// 其他协程进行写操作，返回成功</span></span><br><span class="line">				<span class="keyword">case</span> write := &lt;-writes:</span><br><span class="line">					state[write.key] = write.value</span><br><span class="line">					write.resp &lt;- <span class="literal">true</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 启动100个协程通过reads通道发起读请求</span></span><br><span class="line">	<span class="keyword">for</span> r := <span class="number">0</span>; r &lt; <span class="number">100</span>; r++&#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			<span class="keyword">for</span>&#123;</span><br><span class="line">				<span class="comment">// 构造read请求</span></span><br><span class="line">				read := readOp&#123;</span><br><span class="line">					key: rand.Intn(<span class="number">5</span>),</span><br><span class="line">					resp: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>),</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// read请求发送reads通道中进行读操作</span></span><br><span class="line">				reads &lt;- read</span><br><span class="line">				<span class="comment">// 通过给定的resp通道接收结果</span></span><br><span class="line">				&lt;- read.resp</span><br><span class="line">				atomic.AddUint64(&amp;readOps, <span class="number">1</span>)</span><br><span class="line">				time.Sleep(time.Millisecond)</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&#125;()</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 以相同方法启动10个写操作</span></span><br><span class="line">	<span class="keyword">for</span> w := <span class="number">0</span>; w &lt; <span class="number">10</span>; w++&#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			<span class="keyword">for</span>&#123;</span><br><span class="line">				write := writeOp&#123;</span><br><span class="line">					key: rand.Intn(<span class="number">5</span>),</span><br><span class="line">					value: rand.Intn(<span class="number">100</span>),</span><br><span class="line">					resp: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>),</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				writes &lt;- write</span><br><span class="line">				&lt;- write.resp</span><br><span class="line">				atomic.AddUint64(&amp;writeOps, <span class="number">1</span>)</span><br><span class="line">				time.Sleep(time.Millisecond)</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&#125;()</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 让协程们跑1s（阻塞主协程）</span></span><br><span class="line">	time.Sleep(time.Second)</span><br><span class="line">	readOpsFinal := atomic.LoadUint64(&amp;readOps)</span><br><span class="line">	fmt.Println(<span class="string">&quot;readOps&quot;</span>, readOpsFinal)</span><br><span class="line">	writeOpsFinal := atomic.LoadUint64(&amp;writeOps)</span><br><span class="line">	fmt.Println(<span class="string">&quot;writeOps&quot;</span>, writeOpsFinal)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081719227.png" alt="image-20210908171921079"></p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="1-自定义排序"><a href="#1-自定义排序" class="headerlink" title="1.自定义排序"></a>1.自定义排序</h4><p>这里自定义按字符串长度排序</p>
<p>同过实现go提供的sort.Interface接口来实现</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义函数实现自定义排序</span></span><br><span class="line"><span class="keyword">type</span> byLength []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现byLength结构体的对象是实现了sort.Interface接口的所有方法</span></span><br><span class="line"><span class="comment">// 这样我们就可以使用 sort 包的通用 Sort 方法了</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s byLength)</span>  <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">len</span>(s)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s byLength)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	s[i], s[j] = s[j], s[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// less方法控制实际的自定义排序逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s byLength)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="comment">// 按长度排序字符串</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">len</span>(s[i]) &lt; <span class="built_in">len</span>(s[j])</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sorting</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	asoul := []<span class="keyword">string</span>&#123;<span class="string">&quot;Ava&quot;</span>, <span class="string">&quot;Bella&quot;</span>, <span class="string">&quot;Eileen&quot;</span>,<span class="string">&quot;Carol&quot;</span>, <span class="string">&quot;Diana&quot;</span>&#125;</span><br><span class="line">	<span class="comment">// 将asoul强转换为byLength类型</span></span><br><span class="line">	<span class="comment">// Sort调用实现结构的对象</span></span><br><span class="line">	sort.Sort(byLength(asoul))</span><br><span class="line">	fmt.Println(asoul)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081723322.png" alt="image-20210908172335154"></p>
<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><p>JSON的编码解码即序列化与反序列化</p>
<p>我们常用byte和string作为数据和json表示形式的中介</p>
<p>编码过程：go的其他数据类型 -&gt; byte（字节数组） -&gt; json</p>
<p> 解码过程：json -&gt; byte（字节数组） -&gt; go的其他数据类型（map[string]interface{} / 自定义类型）</p>
<h4 id="2-构造结构体"><a href="#2-构造结构体" class="headerlink" title="2.构造结构体"></a>2.构造结构体</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造json类型的结构体</span></span><br><span class="line"><span class="comment">// 必须以大写字母开头的字段才是可导出的。</span></span><br><span class="line"><span class="keyword">type</span> res <span class="keyword">struct</span> &#123;</span><br><span class="line">	Page <span class="keyword">int</span></span><br><span class="line">	Fruits []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-编码"><a href="#3-编码" class="headerlink" title="3.编码"></a>3.编码</h4><p>将Go的数据转换为JSON，go的数据在编码后是byte[]类型，所以要转换成string类型才能打印出字符串</p>
<h5 id="（1）map类型编码"><a href="#（1）map类型编码" class="headerlink" title="（1）map类型编码"></a>（1）map类型编码</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map类型json编码</span></span><br><span class="line">mapD := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">&quot;apple&quot;</span>:<span class="number">5</span>, <span class="string">&quot;lettuce&quot;</span>:<span class="number">7</span>&#125;</span><br><span class="line">mapB, _ := json.Marshal(mapD)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(mapB))</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081736704.png" alt="image-20210908173628386"></p>
<h5 id="（2）自定义类型编码"><a href="#（2）自定义类型编码" class="headerlink" title="（2）自定义类型编码"></a>（2）自定义类型编码</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构体实例化</span></span><br><span class="line"><span class="comment">// 结构体实例化赋值时，可以赋予地址也可以赋予值（得到一样的结果）</span></span><br><span class="line"><span class="comment">// 但是赋予地址可以减少系统开销</span></span><br><span class="line">res1D := &amp;res&#123;</span><br><span class="line">	Page: <span class="number">1</span>,</span><br><span class="line">	Fruits: []<span class="keyword">string</span>&#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;peach&quot;</span>, <span class="string">&quot;pear&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// json可自动编码自定义类型，编码的输出只有可导出的字段</span></span><br><span class="line">res1B, _ := json.Marshal(res1D)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(res1B))</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081734771.png" alt="image-20210908173448648"></p>
<h4 id="4-解码"><a href="#4-解码" class="headerlink" title="4.解码"></a>4.解码</h4><p>将JSON转换为Go语言可以读取的数据类型，</p>
<h5 id="（1）map类型接收"><a href="#（1）map类型接收" class="headerlink" title="（1）map类型接收"></a>（1）map类型接收</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解码过程</span></span><br><span class="line"><span class="comment">// 构造json</span></span><br><span class="line">byt := []<span class="keyword">byte</span>(<span class="string">`&#123;&quot;num&quot;:6.13, &quot;strs&quot;:[&quot;a&quot;, &quot;b&quot;]&#125;`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供Json包存放解码数据的变量（键为string，值为任意的map）</span></span><br><span class="line"><span class="keyword">var</span> dat <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对数据进行解码</span></span><br><span class="line"><span class="comment">// if语句进行错误检查</span></span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(byt, &amp;dat); err != <span class="literal">nil</span>&#123;</span><br><span class="line">	<span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出解码后的dat</span></span><br><span class="line">fmt.Println(dat)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了使用map中的值，我们需要进行恰当的类型转换</span></span><br><span class="line">num := dat[<span class="string">&quot;num&quot;</span>].(<span class="keyword">float64</span>)</span><br><span class="line">fmt.Println(num)</span><br><span class="line"><span class="comment">// 访问嵌套的值</span></span><br><span class="line">strs := dat[<span class="string">&quot;strs&quot;</span>].([]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">str1 := strs[<span class="number">1</span>].(<span class="keyword">string</span>)</span><br><span class="line">fmt.Println(str1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081743780.png" alt="image-20210908174316707"></p>
<h5 id="（2）自定义数据类型接收"><a href="#（2）自定义数据类型接收" class="headerlink" title="（2）自定义数据类型接收"></a>（2）自定义数据类型接收</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将json解码为自定义数据类型（增加类型安全性）,推荐的解码方式</span></span><br><span class="line"><span class="comment">// ``可以定义字符串，且其内可以有双引号&quot;&quot;</span></span><br><span class="line">str := <span class="string">`&#123;&quot;page&quot;: 1, &quot;fruits&quot;: [&quot;apple&quot;, &quot;peach&quot;]&#125;`</span></span><br><span class="line">fmt.Println(reflect.TypeOf(str))</span><br><span class="line"></span><br><span class="line">res := res&#123;&#125;</span><br><span class="line"><span class="comment">// 将str转换为byte数组类型，后将其解码放在res类型的结构体中</span></span><br><span class="line">json.Unmarshal([]<span class="keyword">byte</span>(str), &amp;res)</span><br><span class="line">fmt.Println(res)</span><br><span class="line">fmt.Println(res.Fruits[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081744858.png" alt="image-20210908174428706"></p>
<h5 id="（3）Encode接收"><a href="#（3）Encode接收" class="headerlink" title="（3）Encode接收"></a>（3）Encode接收</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们还可以将os.Stdout 一样直接将 JSON 编码流传输到 os.Writer 甚至 HTTP 响应体</span></span><br><span class="line"><span class="comment">// 创建一个将数据写入*Encoder（可以接收信息）</span></span><br><span class="line">enc := json.NewEncoder(os.Stdout)</span><br><span class="line">d := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">&quot;apple&quot;</span>: <span class="number">5</span>, <span class="string">&quot;lettuce&quot;</span>: <span class="number">7</span>&#125;</span><br><span class="line"><span class="comment">// 将json编码写入输出流输出</span></span><br><span class="line">enc.Encode(d)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081745019.png" alt="image-20210908174505894"></p>
<h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><h4 id="1-单元测试命名规则"><a href="#1-单元测试命名规则" class="headerlink" title="1.单元测试命名规则"></a>1.单元测试命名规则</h4><ul>
<li>文件名必须以xx_test.go命名</li>
<li>方法必须是Test开头</li>
<li>方法参数必须 t *testing.T</li>
<li>测试例与被测试对象要放在一个包中</li>
<li>使用go test执行单元测试（idea可以直接运行测试例）</li>
</ul>
<h4 id="2-被测对象"><a href="#2-被测对象" class="headerlink" title="2.被测对象"></a>2.被测对象</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IntMin 主程序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IntMin</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> a &lt; b&#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> b</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-一般测试例"><a href="#3-一般测试例" class="headerlink" title="3.一般测试例"></a>3.一般测试例</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TestIntMinBasic 测试程序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestIntMinBasic</span><span class="params">(t *testing.T)</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">	ans := IntMin(<span class="number">2</span>, <span class="number">-2</span>)</span><br><span class="line">	<span class="keyword">if</span> ans != <span class="number">-2</span>&#123;</span><br><span class="line">		<span class="comment">// t.Error*会报告测试失败的信息，然后立即终止测试</span></span><br><span class="line">		<span class="comment">// t.Fail*会报告测试失败的信息，然后立即终止测试</span></span><br><span class="line">		t.Errorf(<span class="string">&quot;IntMin(2, -2) = %d; want -2&quot;</span>, ans)</span><br><span class="line">	&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">		fmt.Println(ans)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="4-表驱动测试例"><a href="#4-表驱动测试例" class="headerlink" title="4.表驱动测试例"></a>4.表驱动测试例</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TestIntMinTableDriven 单元测试可以重复，所以会经常使用表驱动风格编写单元测试</span></span><br><span class="line"><span class="comment">// 表中列出了输入数据，预期输出，使用循环，遍历并执行测试逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestIntMinTableDriven</span><span class="params">(t *testing.T)</span></span>  &#123;</span><br><span class="line">	<span class="keyword">var</span> tests = []<span class="keyword">struct</span> &#123;</span><br><span class="line">		a, b <span class="keyword">int</span></span><br><span class="line">		want <span class="keyword">int</span></span><br><span class="line">	&#125;&#123;</span><br><span class="line">		&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">		&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">		&#123;<span class="number">2</span>, <span class="number">-2</span>, <span class="number">-2</span>&#125;,</span><br><span class="line">		&#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">		&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line"></span><br><span class="line">		testname := fmt.Sprintf(<span class="string">&quot;%d, %d&quot;</span>, tt.a, tt.b)</span><br><span class="line">		<span class="comment">// t.Run运行一个子测试，每一个子测试对应表中一行数据</span></span><br><span class="line">		t.Run(testname, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span>&#123;</span><br><span class="line">			ans := IntMin(tt.a, tt.b)</span><br><span class="line">			<span class="keyword">if</span> ans != tt.want&#123;</span><br><span class="line">				t.Errorf(<span class="string">&quot;got %d, want %d&quot;</span>, ans, tt.want)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="HTTP客户端"><a href="#HTTP客户端" class="headerlink" title="HTTP客户端"></a>HTTP客户端</h3><h4 id="1-GET请求"><a href="#1-GET请求" class="headerlink" title="1.GET请求"></a>1.GET请求</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// go向服务端发送GET请求</span></span><br><span class="line"></span><br><span class="line">resp1, err := http.Get(<span class="string">&quot;https://search.bilibili.com/&quot;</span>)</span><br><span class="line"><span class="comment">// 捕捉错误</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">	<span class="built_in">panic</span>(err)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 延迟关闭请求服务</span></span><br><span class="line"><span class="keyword">defer</span> resp1.Body.Close()</span><br><span class="line"></span><br><span class="line">fmt.Println(resp1)</span><br><span class="line"><span class="comment">// 打印返回的请求状态</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Response status&quot;</span>, resp1.Status)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印响应的内容</span></span><br><span class="line"><span class="comment">// 使用ioutil读取数据（读取返回的是字节数组）</span></span><br><span class="line">body, err := ioutil.ReadAll(resp1.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(err)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(body))</span><br></pre></td></tr></table></figure>



<h4 id="2-带参数GET请求"><a href="#2-带参数GET请求" class="headerlink" title="2.带参数GET请求"></a>2.带参数GET请求</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// go向服务端发送带参数GET请求</span></span><br><span class="line">apiurl := <span class="string">&quot;https://search.bilibili.com/all&quot;</span></span><br><span class="line"><span class="comment">// 构造get请求表单</span></span><br><span class="line">data := url.Values&#123;&#125;</span><br><span class="line">data.Set(<span class="string">&quot;keyword&quot;</span>, <span class="string">&quot;Autovy&quot;</span>)</span><br><span class="line">data.Set(<span class="string">&quot;from_source&quot;</span>, <span class="string">&quot;webtop_search&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合参数构造请求结构体</span></span><br><span class="line">u, err := url.ParseRequestURI(apiurl)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// url编码</span></span><br><span class="line">u.RawQuery = data.Encode()</span><br><span class="line"><span class="comment">// 生成带参数url</span></span><br><span class="line">fmt.Println(u.String())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行http请求（下面的步骤与一般的get请求一致）</span></span><br><span class="line"><span class="comment">// 其实也可以把带参数的url直接进行请求😅</span></span><br><span class="line">resp2, err := http.Get(u.String())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;post failed, err:%v\n&quot;</span>, err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp2.Body.Close()</span><br><span class="line"></span><br><span class="line">b, err := ioutil.ReadAll(resp2.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;get resp failed,err:%v\n&quot;</span>, err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(b))</span><br></pre></td></tr></table></figure>



<h4 id="3-POST请求"><a href="#3-POST请求" class="headerlink" title="3.POST请求"></a>3.POST请求</h4><h5 id="（1）发送from-data"><a href="#（1）发送from-data" class="headerlink" title="（1）发送from-data"></a>（1）发送from-data</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造表单</span></span><br><span class="line">data2 := url.Values&#123;</span><br><span class="line">	<span class="string">&quot;name&quot;</span>:       &#123;<span class="string">&quot;Autovy&quot;</span>&#125;,</span><br><span class="line">	<span class="string">&quot;occupation&quot;</span>: &#123;<span class="string">&quot;programmar&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送表单</span></span><br><span class="line">resp, err := http.PostForm(<span class="string">&quot;https://httpbin.org/post&quot;</span>, data2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕捉异常</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	<span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码返回的信息</span></span><br><span class="line"><span class="keyword">var</span> res <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">json.NewDecoder(resp.Body).Decode(&amp;res)</span><br><span class="line">fmt.Println(res[<span class="string">&quot;form&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109082013606.png" alt="image-20210908201313448"></p>
<h5 id="（2）发送json"><a href="#（2）发送json" class="headerlink" title="（2）发送json"></a>（2）发送json</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造json数据</span></span><br><span class="line">values := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Ava&quot;</span>, <span class="string">&quot;occupation&quot;</span>: <span class="string">&quot;Gamer&quot;</span>&#125;</span><br><span class="line">json_data, err := json.Marshal(values)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	<span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// post发送json数据</span></span><br><span class="line">resp3, err := http.Post(<span class="string">&quot;https://httpbin.org/post&quot;</span>, <span class="string">&quot;application/json&quot;</span>, bytes.NewBuffer(json_data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	<span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码返回信息</span></span><br><span class="line"><span class="keyword">var</span> res2 <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">json.NewDecoder(resp3.Body).Decode(&amp;res2)</span><br><span class="line">fmt.Println(res2[<span class="string">&quot;json&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109082013186.png" alt="image-20210908201329065"></p>
<h3 id="HTTP服务端"><a href="#HTTP服务端" class="headerlink" title="HTTP服务端"></a>HTTP服务端</h3><p>服务端构造处理请求的函数handler</p>
<p>handler 函数有两个参数，http.ResponseWriter 和 http.Request</p>
<h4 id="1-普通服务"><a href="#1-普通服务" class="headerlink" title="1.普通服务"></a>1.普通服务</h4><h5 id="（1）处理http请求"><a href="#（1）处理http请求" class="headerlink" title="（1）处理http请求"></a>（1）处理http请求</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  我们需要读取的 HTTP 请求 header 中的所有内容，并将他们输出至 response body</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">headers</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> name, headers := <span class="keyword">range</span> req.Header &#123;</span><br><span class="line">		<span class="keyword">for</span> _, h := <span class="keyword">range</span> headers &#123;</span><br><span class="line">			fmt.Fprintf(w, <span class="string">&quot;%v: %v\n&quot;</span>, name, h)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（2）函数注册到路由"><a href="#（2）函数注册到路由" class="headerlink" title="（2）函数注册到路由"></a>（2）函数注册到路由</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">&quot;/headers&quot;</span>, headers)</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们调用 ListenAndServe 并带上端口和 handler。nil表示使用我们刚刚设置的默认路由器</span></span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8090&quot;</span>, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081934116.png" alt="image-20210908193457887"></p>
<h4 id="2-接受GET请求参数"><a href="#2-接受GET请求参数" class="headerlink" title="2.接受GET请求参数"></a>2.接受GET请求参数</h4><h5 id="（1）处理get请求"><a href="#（1）处理get请求" class="headerlink" title="（1）处理get请求"></a>（1）处理get请求</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理带参数的get请求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span>  &#123;</span><br><span class="line">	<span class="comment">// 延迟关闭响应</span></span><br><span class="line">	<span class="keyword">defer</span> r.Body.Close()</span><br><span class="line">	<span class="comment">// 接受url的参数</span></span><br><span class="line">	data := r.URL.Query()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 输出内容到页面</span></span><br><span class="line">	answer := <span class="string">`&#123;&quot;status&quot; : &quot;ok&quot;&#125;`</span></span><br><span class="line">	w.Write([]<span class="keyword">byte</span>(answer))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取请求链接中的参数</span></span><br><span class="line">	fmt.Fprintln( w ,data.Get(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">	fmt.Fprintln( w ,data.Get(<span class="string">&quot;age&quot;</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（2）函数注册到路由-1"><a href="#（2）函数注册到路由-1" class="headerlink" title="（2）函数注册到路由"></a>（2）函数注册到路由</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">&quot;/get&quot;</span>, getHandler)</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们调用 ListenAndServe 并带上端口和 handler。nil表示使用我们刚刚设置的默认路由器</span></span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8090&quot;</span>, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109081941217.png" alt="image-20210908194148189"></p>
<h4 id="3-接受POST请求参数"><a href="#3-接受POST请求参数" class="headerlink" title="3.接受POST请求参数"></a>3.接受POST请求参数</h4><h5 id="（1）处理post请求函数"><a href="#（1）处理post请求函数" class="headerlink" title="（1）处理post请求函数"></a>（1）处理post请求函数</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// post请求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span>  &#123;</span><br><span class="line">	<span class="keyword">defer</span> r.Body.Close()</span><br><span class="line">	<span class="comment">// 请求类型为application/x-www-form-urlencoded时解析form数据</span></span><br><span class="line">	r.ParseForm()</span><br><span class="line">	<span class="comment">// 打印form数据</span></span><br><span class="line">	fmt.Println(r.PostForm)</span><br><span class="line">	fmt.Println(r.PostForm.Get(<span class="string">&quot;name&quot;</span>), r.PostForm.Get(<span class="string">&quot;age&quot;</span>))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2. 请求类型是application/json时从r.Body读取数据</span></span><br><span class="line">	b, err := ioutil.ReadAll(r.Body)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Fprintln(w, <span class="keyword">string</span>(b))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（2）函数注册到路由-2"><a href="#（2）函数注册到路由-2" class="headerlink" title="（2）函数注册到路由"></a>（2）函数注册到路由</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">&quot;/post&quot;</span>, postHandler)</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们调用 ListenAndServe 并带上端口和 handler。nil表示使用我们刚刚设置的默认路由器</span></span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8090&quot;</span>, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>



<h5 id="（3）请求类型为application-x-www-form-urlencoded"><a href="#（3）请求类型为application-x-www-form-urlencoded" class="headerlink" title="（3）请求类型为application/x-www-form-urlencoded"></a>（3）请求类型为application/x-www-form-urlencoded</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109070739852.png" alt="image-20210907073940923"></p>
<p>运行结果：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109070740152.png" alt="image-20210907074031817"></p>
<h5 id="（3）请求类型为application-json"><a href="#（3）请求类型为application-json" class="headerlink" title="（3）请求类型为application/json"></a>（3）请求类型为application/json</h5><p>服务端可以进行反序列化操作得到json内的数据</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109070744119.png" alt="image-20210907074448963"></p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109082024169.jpg" alt="cute"></p>
<p>快乐生活，快乐工作，快乐学习</p>
<p><code>os.Exit(1)</code></p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>后端</tag>
        <tag>Go</tag>
        <tag>面向接口</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|JavaWeb入门讲解</title>
    <url>/2021/09/14/Java/Java-JavaWeb%E5%85%A5%E9%97%A8%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109140841902.png" alt="pngkey.com-java-logo-png-2232144"></p>
<span id="more"></span>



<h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ul>
<li>学会本地搭建环境，运行springboot项目</li>
<li>了解javaweb开发基本技术与工具使用</li>
<li>了解spring重要概念</li>
<li>清楚基本的开发架构</li>
<li>学会开发Springboot入门实例</li>
<li>学会开发SpringBoot JPA 持久层支持实例</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://autovy.github.io/JavaWebDemo.zip">Demo下载</a></p>
<p><a href="https://mybatis.org/mybatis-3/zh/index.html">MyBatis中文文档</a></p>
<p><a href="https://lfvepclr.gitbooks.io/spring-framework-5-doc-cn/content/">Spring Framework 5 中文文档</a></p>
<p><a href="https://www.docs4dev.com/docs/zh/spring-boot/2.1.1.RELEASE/reference/boot-documentation.html">SpringBoot中文文档</a></p>
<p><a href="https://www.docs4dev.com/docs/zh/spring-cloud/Greenwich.RELEASE/reference/">SpringCloud中文文档</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744">廖雪峰Java教程博客</a></p>
<p><a href="https://autovy.github.io/2021/06/30/Java/Java-%E5%9F%BA%E4%BA%8ESSM%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/">autovy博客：基于SSM评论管理系统开发</a></p>
<h3 id="基本工具的使用"><a href="#基本工具的使用" class="headerlink" title="基本工具的使用"></a>基本工具的使用</h3><h4 id="IDE推荐"><a href="#IDE推荐" class="headerlink" title="IDE推荐"></a>IDE推荐</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109110902451.png" alt="image-20210911090207325"></p>
<p>推荐JetBrains公司的IDE全家桶，保持风格一致，减少对IDE的学习成本</p>
<p>使用<a href="https://www.jetbrains.com/toolbox-app/">toolbox</a>下载更方便</p>
<h4 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h4><p>使用构建工具管理java项目的依赖项并实现自动化构建</p>
<h5 id="（1）基本介绍"><a href="#（1）基本介绍" class="headerlink" title="（1）基本介绍"></a>（1）基本介绍</h5><p>Maven </p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109110852517.png" alt="Apache_Maven_logo.svg"></p>
<p>Ant</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202109110848712.png" alt="1024px-Apache-Ant-logo.svg" style="zoom: 50%;">







<p>Gradle</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109110847529.png" alt="Gradle_logo"></p>
<h5 id="（2）比较"><a href="#（2）比较" class="headerlink" title="（2）比较"></a>（2）比较</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109110854847.png" alt="image-20210911085448524"></p>
<ul>
<li>Ant：纯java编写，需要自定义构建过程</li>
<li>Maven：实现了自动化构建，并内置了依赖管理</li>
<li>Gradle：Gradle结合了前两者的优点，是Android Studio指定构建工具</li>
</ul>
<p>通过自动化构建工具，springboot大大减少了依赖项的添加工作</p>
<h5 id="（3）Maven结构"><a href="#（3）Maven结构" class="headerlink" title="（3）Maven结构"></a>（3）Maven结构</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109110937736.jpeg" alt="img"></p>
<h5 id="（4）Maven基本使用操作"><a href="#（4）Maven基本使用操作" class="headerlink" title="（4）Maven基本使用操作"></a>（4）Maven基本使用操作</h5><p>IDEA创建Maven项目：</p>
<ul>
<li>左边选择Maven</li>
<li>创建空Maven项目</li>
</ul>
<p>查看配置文件pom.xml：</p>
<p>配置jar包的仓库地址</p>
<p>maven的仓库默认在国外，这里可以更换为阿里云的仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> # 仓库地址       <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>添加依赖项：</p>
<p>在mvnrepository查找依赖项：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p>
<p>查找并复制junit 4.12的依赖配置信息</p>
<p>增加依赖标签<code>&lt;dependencies&gt;</code>后</p>
<p>在idea中导入依赖项</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109110954913.png" alt="image-20210911095458093"></p>
<p>查看外部库：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109110955224.png" alt="image-20210911095520948"></p>
<h4 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h4><p>Web服务器一般指网站服务器，是指驻留于[因特网]上某种类型计算机的程序，可以处理浏览器等Web客户端的请求并返回相应响应</p>
<h5 id="（1）Tomcat介绍"><a href="#（1）Tomcat介绍" class="headerlink" title="（1）Tomcat介绍"></a>（1）Tomcat介绍</h5><p>Java学习中常常使用<strong>Tomcat</strong>，这个个小型、轻量级的支持JSP和Servlet 技术的Web服务器，新版的springboot直接就内嵌了这个web服务器放在了启动项中</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202109111020941.png" alt="img" style="zoom: 25%;">



<h5 id="（2）Tomcat下载"><a href="#（2）Tomcat下载" class="headerlink" title="（2）Tomcat下载"></a>（2）Tomcat下载</h5><p>新版的springboot已内嵌tomcat，不需要再下载，所以这块做简单的介绍，了解一下运行的原理就好</p>
<p>官网下载：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p>
<h5 id="（3）Tomcat运行"><a href="#（3）Tomcat运行" class="headerlink" title="（3）Tomcat运行"></a>（3）Tomcat运行</h5><ul>
<li><p>新建文件html文件在webapps\www文件夹</p>
</li>
<li><p>启动bin/startup.bat</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109111044774.png" alt="image-20210911104424694"></p>
</li>
<li><p>访问<code>http://127.0.0.1:8080/www/test.html</code></p>
</li>
</ul>
<p>tomcat的默认端口是8080端口，所以springboot启动的网页服务默认也是8080端口</p>
<h5 id="（4）Tomcat修改端口"><a href="#（4）Tomcat修改端口" class="headerlink" title="（4）Tomcat修改端口"></a>（4）Tomcat修改端口</h5><p>网页的默认端口使80端口</p>
<ul>
<li>查看文件<code>conf\server.xml</code></li>
<li>修改端口为80端口</li>
<li>重新启动bin/startup.bat</li>
<li>80端口占用问题</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 参看端口号含80的条目</span><br><span class="line">netstat -ano|findstr &quot;80&quot;</span><br><span class="line"></span><br><span class="line">// 根据pid查询对应的应用程序</span><br><span class="line">tasklist|findstr &quot;1828&quot;</span><br><span class="line"></span><br><span class="line">// 杀死进程</span><br><span class="line">taskkill /f /pid 1828</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果是被系统占用，可以进入服务中心<code>services.msc</code>，停止或禁用SQL Server Reporting Services (MSSQLSERVER) （日志服务，一般用不上）</p>
</li>
<li><p>访问<code>http://127.0.0.1/www/test.html</code></p>
</li>
</ul>
<h4 id="本地数据库环境搭建"><a href="#本地数据库环境搭建" class="headerlink" title="本地数据库环境搭建"></a>本地数据库环境搭建</h4><h5 id="（1）PHPstudy介绍"><a href="#（1）PHPstudy介绍" class="headerlink" title="（1）PHPstudy介绍"></a>（1）PHPstudy介绍</h5><p>phpstudy集成了web服务（apache和nginx）,数据库服务（mysql），还有数据库缓存工具redis等。</p>
<p>能比较方便得搭建本地环境（如果没有docker进行容器化的话，确实是最佳选择）</p>
<p>下载地址：<a href="https://www.xp.cn/">https://www.xp.cn/</a></p>
<h5 id="（2）创建数据库"><a href="#（2）创建数据库" class="headerlink" title="（2）创建数据库"></a>（2）创建数据库</h5><p>这里使用mysql8.0.12版本</p>
<p>无代码创建好数据库</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109111420500.png" alt="image-20210911142052336"></p>
<h5 id="（3）数据库连接"><a href="#（3）数据库连接" class="headerlink" title="（3）数据库连接"></a>（3）数据库连接</h5><p>在idea中连接数据库，测试连接后出现时区问题则填写<code>GMT</code>等时区,推荐使用<code>serverTimezone=Asia/Shanghai</code></p>
<p>创建数据表student，可在类型处填入长度例如<code>char(20)</code></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109111444220.png" alt="image-20210911144428199"></p>
<h3 id="J2EE"><a href="#J2EE" class="headerlink" title="J2EE"></a>J2EE</h3><p>Java EE是一系列技术标准所组成的平台，它定义了动态Web页面功能（Servlet和Jsp）、商业组件（EJB）、异步消息传输机制（JMS）、名称和目录定位服务（JNDI）、数据库访问（JDBC）、与子系统的连接器（JCA）和安全服务等</p>
<p>这里主要介绍Servlet（服务端程序，可处理请求生成动态web内容），JDBC（数据库访问连接），java的web开发框架都是在此基础上的延拓</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109132024561.png" alt="image-20210913202431607"></p>
<h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><h5 id="（1）浏览器访问Servlet流程"><a href="#（1）浏览器访问Servlet流程" class="headerlink" title="（1）浏览器访问Servlet流程"></a>（1）浏览器访问Servlet流程</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109111454488.png" alt="image-20210911145431318"></p>
<h5 id="（2）Servlet-demo-开发"><a href="#（2）Servlet-demo-开发" class="headerlink" title="（2）Servlet demo 开发"></a>（2）Servlet demo 开发</h5><p>1.新建一个空maven的项目</p>
<p>2.maven导入Servlet依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3.编写Servlet类</p>
<p>编写Servlet类接收请求，返回内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 继承Servlet提供的http处理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写doGet方法，处理get请求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 捕捉http请求异常</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 返回响应输出到页面</span></span><br><span class="line">            response.getWriter().println(<span class="string">&quot;&lt;h1&gt;Hello Servlet&lt;h1&gt;&quot;</span>);</span><br><span class="line">            response.getWriter().println(<span class="keyword">new</span> Date().toString());</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4.编写web.xml配置文件</p>
<p>编写web.xml配置Servlet</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109111532343.png" alt="image-20210911153159249"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置servlet信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置http处理类与url映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>5.将Servlet部署到tomcat上</p>
<p>打开模块设置(F4) &gt;  工件  &gt;  创建web工件</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109111539001.png" alt="image-20210911153909470"></p>
<p>添加配置 &gt; tomcat本地服务器 &gt; 添加刚刚创建的工件 &gt; 注意修改应用程序上下文（影响访问的url）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109111541291.png" alt="image-20210911154152177"></p>
<p>开启服务进行测试</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109111556434.png" alt="image-20210911155646449"></p>
<h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><p><strong>JDBC</strong> (<strong>J</strong>ava <strong>D</strong>ata<strong>B</strong>ase <strong>C</strong>onnection) 是通过JAVA访问数据库</p>
<h5 id="（1）Java连接数据库流程"><a href="#（1）Java连接数据库流程" class="headerlink" title="（1）Java连接数据库流程"></a>（1）Java连接数据库流程</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109111653998.png" alt="undefined"></p>
<h5 id="（2）JDBC查询数据库开发"><a href="#（2）JDBC查询数据库开发" class="headerlink" title="（2）JDBC查询数据库开发"></a>（2）JDBC查询数据库开发</h5><p>1.新建一个空maven的项目</p>
<p>2.添加mysql-connector-java依</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>3.注意开启phpstudy的mysql服务，并在idea中连接，记录jdbc链接</p>
<p>4.编写JDBC查询demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 导入数据库驱动包</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 建立与数据库的连接</span></span><br><span class="line">            <span class="comment">// 数据库名称， 账号，密码</span></span><br><span class="line">            Connection c = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建Statement，用于执行sql语句</span></span><br><span class="line">            Statement s = c.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 编写sql语句</span></span><br><span class="line">            String sql  = <span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行sql语句，并返回结果</span></span><br><span class="line">            ResultSet res = s.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理返回结果</span></span><br><span class="line">            <span class="keyword">while</span>(res.next())&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> id = res.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String name = res.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">                System.out.printf(<span class="string">&quot;%d.%s\n&quot;</span>, id, name);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 捕捉数据库加载异常</span></span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 捕捉数据库连接异常</span></span><br><span class="line">        <span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="（3）JDBC-ORM-持久化存储"><a href="#（3）JDBC-ORM-持久化存储" class="headerlink" title="（3）JDBC ORM 持久化存储"></a>（3）JDBC ORM 持久化存储</h5><p>ORM=Object Relationship Database Mapping</p>
<p>对象和关系数据库的映射 简单说，<strong>一个对象</strong>，对应数据库里的<strong>一条记录</strong>，使用Java对象来将数据库内的数据持久化</p>
<p>JDBC 是面向 SQL 的，使用起来比较繁琐。所以就有了 ORM 框架，建立了 Java 对象与数据库表之间的映射关系，可以通过直接操作对象来实现持久化，简化了操作的繁杂度</p>
<p>java目前流行的数据库访问框架都是ORM框架</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109132026779.jpeg" alt="img"></p>
<p>1.创建Student类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般将一个数据表抽象为一个类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将表中的字段作为类的属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供外界操作属性的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在idea中实体类的创建有以下三种方法：</p>
<ul>
<li><p>选定类的字段生成setter和getter方法</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109200954096.png" alt="image-20210920095441605"></p>
</li>
</ul>
<ul>
<li><p>使用数据库工具创建实体类</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041650556.png" alt="image-20210904165034192" style="zoom: 67%;">



</li>
</ul>
<ul>
<li>使用Lombok工具自动生成getter和setter方法</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041657535.png" alt="image-20210904165746685"></p>
<p>2.修改demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 导入数据库驱动包</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 建立与数据库的连接</span></span><br><span class="line">            <span class="comment">// 数据库名称， 账号，密码</span></span><br><span class="line">            Connection c = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建Statement，用于执行sql语句</span></span><br><span class="line">            Statement s = c.createStatement();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// &gt;&gt;&gt;&gt;&gt;&gt; 修改sql语句</span></span><br><span class="line">            String sql  = <span class="string">&quot;select * from student where id = 1&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行sql语句，并返回结果</span></span><br><span class="line">            ResultSet res = s.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//  &gt;&gt;&gt;&gt;去掉while处理返回结果</span></span><br><span class="line">            <span class="keyword">if</span>(res.next())&#123;</span><br><span class="line">                <span class="comment">//&gt;&gt;&gt;&gt;&gt;&gt; 实例化一个对象，用于存储一条数据</span></span><br><span class="line">                Student student = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将数据库中的值存储在对象中</span></span><br><span class="line">                student.setId(res.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                student.setName(res.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                System.out.println(student);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 捕捉数据库加载异常</span></span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 捕捉数据库连接异常</span></span><br><span class="line">        <span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3.打断点参看student对象</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109111751277.png" alt="image-20210911175137132"></p>
<h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><h4 id="Spring重要概念"><a href="#Spring重要概念" class="headerlink" title="Spring重要概念"></a>Spring重要概念</h4><p>参考资料：<a href="https://blog.csdn.net/qq_40587575/article/details/79901550">https://blog.csdn.net/qq_40587575/article/details/79901550</a></p>
<h5 id="（1）IoC与DI概念"><a href="#（1）IoC与DI概念" class="headerlink" title="（1）IoC与DI概念"></a>（1）IoC与DI概念</h5><p>IoC：</p>
<ul>
<li>Ioc—Inversion of Control，即“控制反转”</li>
<li>在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制</li>
<li>IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由<strong>IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找</strong></li>
</ul>
<table>
<thead>
<tr>
<th>Ioc特点</th>
<th>传统java程序</th>
<th>Ioc设计</th>
</tr>
</thead>
<tbody><tr>
<td>控制</td>
<td>在对象内部通过new进行创建对象，是程序主动去创建依赖对象</td>
<td>IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建</td>
</tr>
<tr>
<td>反转</td>
<td>由我们自己在对象中主动控制去直接获取依赖对象，也就是正转</td>
<td>反转则是由容器来帮忙创建及注入依赖对象，对象只是被动的接受依赖对象</td>
</tr>
</tbody></table>
<p>DI：</p>
<ul>
<li>DI—Dependency Injection，即“依赖注入”</li>
<li>组件之间依赖关系由容器在运行期决定，由容器动态的将某个依赖关系注入到组件之中</li>
<li>通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现</li>
<li>“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”</li>
</ul>
<h5 id="（2）IoC与DI概念图例"><a href="#（2）IoC与DI概念图例" class="headerlink" title="（2）IoC与DI概念图例"></a>（2）IoC与DI概念图例</h5><p>传统的java程序</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109120728738.png" alt="image-20210912072844684"></p>
<p>使用了loC/DI的程序</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109120729641.png" alt="image-20210912072938515"></p>
<h5 id="（3）Spring的应用"><a href="#（3）Spring的应用" class="headerlink" title="（3）Spring的应用"></a>（3）Spring的应用</h5><p>只需要理解一点：Spring帮我们完成了类的创建，多个类的合作的工作，即将IoC容器与其在其中注册的类看作黑盒，通过<strong>注解</strong>和<strong>配置文件</strong>，可以让类在平台上注册，而这些注册的类叫<strong>Bean</strong>，我们要做的工作实际上就是注册类和拿到IoC装配好的类</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109120939057.png" alt="image-20210912093936648"></p>
<h5 id="（4）Spring模块"><a href="#（4）Spring模块" class="headerlink" title="（4）Spring模块"></a>（4）Spring模块</h5><p>参考资料：</p>
<p><a href="https://blog.csdn.net/u010648555/article/details/76299467">Spring常用注解</a></p>
<p><a href="https://blog.csdn.net/qq_44543508/article/details/103718958">Spring的@bean注解</a></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109121039116.png" alt="spring-overview"></p>
<p>Spring提供了一堆组件，通过拼接这些组件我们可以组装出web应用（比较经典的缝合怪有：SSI，SSH，SSM，他们的首字母就代表Spring）</p>
<p>Spring怎么知道应该把哪些Java类当成bean注册到容器中呢？<br>使用配置文件或者注解的方式进行标识需要处理的java类!</p>
<p>放在具体的实例中可以这样理解：将数据库的配置信息注册在容器中，在需要访问数据库的对象中用户通过注解（java程序中的特殊标记）让该对象依赖注入了数据库配置信息，从而可以访问到数据库；</p>
<h4 id="开发架构"><a href="#开发架构" class="headerlink" title="开发架构"></a>开发架构</h4><h5 id="（1）业务逻辑"><a href="#（1）业务逻辑" class="headerlink" title="（1）业务逻辑"></a>（1）业务逻辑</h5><p><strong>Controller–&gt;service接口–&gt;serviceImpl–&gt;dao接口–&gt;daoImpl–&gt;mapper–&gt;db</strong></p>
<h5 id="（2）执行流程"><a href="#（2）执行流程" class="headerlink" title="（2）执行流程"></a>（2）执行流程</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041811913.png" alt="img"></p>
<p>而<code>pojo</code>则是实体类作为各层次处理传递的对象：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041811687.png" alt="image-20210629104056016"></p>
<h5 id="（3）各层职能"><a href="#（3）各层职能" class="headerlink" title="（3）各层职能"></a>（3）各层职能</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109120951753.png" alt="image-20210912095119480"></p>
<ul>
<li>dao/mapper层即数据持久层，dao层的作用为访问数据库，向数据库发送sql语句，完成数据的增删改查任务</li>
<li>service层调用dao层的接口进行业务逻辑应用的处理，封装Service层的业务逻辑有利于业务逻辑的独立性和重复利用性</li>
<li>controller层即控制层，控制请求和响应，负责前后端交互 controller层主要调用Service层里面的接口控制具体的业务流程</li>
<li>view层即视图层，用户可以看到并操作，可以理解为前端</li>
</ul>
<h4 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h4><p>SpringBoot让Spring应用更加轻量化，并简化了了配置，实现自动化配置</p>
<p>Spring Boot是一个基于Spring的套件，它帮我们预组装了Spring的一系列组件，以便以尽可能少的代码和配置来开发基于Spring的Java应用程序</p>
<p>总而言之，Springboot是Spring的一套快速开发整合包</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109140739880.gif" alt="img"></p>
<h5 id="（1）SpringBoot启动原理"><a href="#（1）SpringBoot启动原理" class="headerlink" title="（1）SpringBoot启动原理"></a>（1）SpringBoot启动原理</h5><p>参考资料：</p>
<p><a href="https://www.cnblogs.com/theRhyme/p/11057233.html">https://www.cnblogs.com/theRhyme/p/11057233.html</a></p>
<p><a href="https://juejin.cn/post/6895341123816914958#heading-1">https://juejin.cn/post/6895341123816914958#heading-1</a></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109111934807.png" alt="img"></p>
<ul>
<li><p>启动过程中，将注册类装配到Ioc容器，到时候我们可以直接获得装配好的类</p>
</li>
<li><p>反射：通过反射，我们可以在运行时获得程序或程序集中每一个类型的成员和成员的信息。程序中一般的对象的类型都是在编译期就确定下来的，而 Java 反射机制可以动态地创建对象并调用其属性，这样的对象的类型在编译期是未知的</p>
</li>
<li><p>@ComponentScan ：<strong>扫描所在类的package</strong>；告诉Spring扫描哪个包下面类，加载符合条件的组件(比如@Component和@Repository以及@RestController，@Service等类)</p>
</li>
<li><p>@EnableAutoConfiguration：<strong>开启自动配置</strong>；经过层层调用，最终通过loadSpringFactories()方法加载META-INF/spring.factories中的配置类</p>
</li>
<li><p>@SpringBootConfiguration：<strong>标注当前类是配置类</strong>；将当前类内声明的一个或多个以@Bean注解标记的方法的实例纳入到spring容器中，并且实例名就是方法名</p>
</li>
</ul>
<h5 id="（2）SpringBoot-Web-Demo"><a href="#（2）SpringBoot-Web-Demo" class="headerlink" title="（2）SpringBoot Web Demo"></a>（2）SpringBoot Web Demo</h5><p>1.新建Spring Initializr项目</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109111939355.png" alt="image-20210911193904203"></p>
<p>2.勾选web模块</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109111940650.png" alt="image-20210911194039612"></p>
<p>3.查看pom.xml</p>
<p>查看pom.xml等待依赖下载完毕（springboot内置的依赖项过多，下载时间较长，start-web简化了Maven的依赖加载）</p>
<p>4.查看SpringbootApplication.java文件</p>
<p>项目创建好之后，就自带一个SpringbootApplication, 其被@SpringBootApplication 所标记，表示这个是一个Springboot 应用，其为Springboot 应用的入口</p>
<p>5.新建web文件存放控制器</p>
<p>新建HelloController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注解为控制器</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注解为映射url</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello SpringBoot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里就相当于实现了Servlet的功能：处理http请求，返回响应内容</p>
<p>而这里的注解就相当于实现了Servlet的web.xml配置文件的功能</p>
<p>注解是java一个强大的特性，简单来说可以理解为代码中的特殊标记，开发人员可以在不改变原有代码情况下，在源代码中嵌入补充信息</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109112001559.png" alt="image-20210911200155436"></p>
<p>6.运行测试</p>
<p>访问链接：<code>http://localhost:8080/hello</code></p>
<p>感觉少了什么……我的tomcat呢？好像没有配web服务器😰</p>
<p>原来tomcat已经内嵌在SpringbootApplication中一起启动了</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109112009212.png" alt="image-20210911200952174"></p>
<p>也可以看到依赖项中也加载了tomcat，Tomcat的属性都在<code>org.springframework.boot.autoconfigure.web.ServerProperties</code>配置类中做了定义</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109112026994.png" alt="image-20210911202642854"></p>
<p>7.修改端口和上下文</p>
<p>在<code>resources/application.properties</code>文件修改配置（可以修改端口和上下文以及视图定位）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">80</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/test</span></span><br></pre></td></tr></table></figure>



<p>测试访问<code>http://localhost/test/hello</code>，如果出现了端口占用情况，可以参考tomcat的处理方法</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109112044412.png" alt="image-20210911204412242"></p>
<h5 id="（3）持久层支持"><a href="#（3）持久层支持" class="headerlink" title="（3）持久层支持"></a>（3）持久层支持</h5><p><strong>Hibernate</strong></p>
<p>Hibernate是jpa的具体实现，springboot默认使用的就是Hibernate，可以让我们不写一句sql，便于移植，同时也缺乏灵活性</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202109140808602.png" alt="image-20210912105841614" style="zoom:50%;">



<p><strong>MyBatis</strong></p>
<p>MyBatis也是一个持久化框架，不完全是一个ORM框架（Mybatis是将java方法与sql语句关联起来，而没有将java对象与数据库关联起来）不是依照的JPA规范，可以进行更细致的SQL优化，比较灵活适合处理大量数据的业务，推荐学习</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109121103990.png" alt="@mybatis"></p>
<h5 id="（4）SpringBoot-JPA-Demo"><a href="#（4）SpringBoot-JPA-Demo" class="headerlink" title="（4）SpringBoot  JPA Demo"></a>（4）SpringBoot  JPA Demo</h5><p>JPA(Java Persistence API)是Sun官方提出的Java持久化规范，用来方便大家操作数据库</p>
<p>1.准备数据库，参考本地服务器环境搭建章节</p>
<p>2.在前一个demo中进行修改（或新建一个spring项目）</p>
<p>3.增加对mysql和jpa的支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jpa--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>



<p>4.修改springboot配置文件，连接数据库</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库配置信息（注意配置数据库的编码和时区）</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">test</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"># 数据库连接驱动</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>



<p>5.根据orm创建实体类Entity</p>
<p>实体层是各层次用于输入输出处理的数据对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span> <span class="comment">// 标记为实体类</span></span><br><span class="line"><span class="meta">@Table(name = &quot;student&quot;)</span> <span class="comment">// 表明类对应的表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 类的私有属性</span></span><br><span class="line">  <span class="meta">@Id</span> <span class="comment">// 标记为主键</span></span><br><span class="line">  <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span> <span class="comment">// 表明为自增长方式</span></span><br><span class="line">  <span class="meta">@Column(name = &quot;id&quot;)</span> <span class="comment">// 表明对应的数据库字段名</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="meta">@Column(name = &quot;name&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="meta">@Column(name = &quot;age&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提供外界操作属性的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>6.编写DAO层</p>
<p>DAO与选择的数据库框架有关</p>
<p>DAO层提供与数据库交互的接口，继承JpaRepository父接口,提供了一系列操作数据库方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 继承JpaRepository父接口,提供了一系列操作数据库方法</span></span><br><span class="line"><span class="comment">// 并且提供了泛型&lt;类 , 主键类型&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDAO</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Student</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>7.编写Service层</p>
<p>定义会用到的操作数据库接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义会用到的操作数据库接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找所有</span></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">listAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 查找指定id</span></span><br><span class="line">    <span class="function">Student <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>实现接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现接口中具体的操作数据库的方法</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServicempl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StudentDAO studentDAO;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">listAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentDAO.findAll();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentDAO.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>8.编写控制器</p>
<p>负责调用服务层的方法，并映射路径提供给客户端使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">// 注解为控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 自动装配service层</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StudentServicempl studentServicempl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 存储数据库返回的列表</span></span><br><span class="line">        List&lt;Student&gt; list = studentServicempl.listAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出的字符串</span></span><br><span class="line">        String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历列表,获得对象属性的值</span></span><br><span class="line">        <span class="keyword">for</span> (Student item: list) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 拼接为字符串输出</span></span><br><span class="line">            str += item.getId() + <span class="string">&quot;.&quot;</span> + item.getName() + <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 映射get url</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Student student = studentServicempl.get(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> student.getName() + student.getId();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>9.编写单元测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试controller层</span></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    WebApplicationContext context;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(context);</span><br><span class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(context).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">&quot;/list&quot;</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andDo(MockMvcResultHandlers.print())</span><br><span class="line">                .andReturn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试Dao层</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StudentDAO dao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; students = dao.findAll();</span><br><span class="line">        <span class="keyword">for</span>(Student student : students)&#123;</span><br><span class="line">            System.out.println(student.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试service层</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StudentServicempl studentServicempl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; students = studentServicempl.listAll();</span><br><span class="line">        <span class="keyword">for</span>(Student student : students)&#123;</span><br><span class="line">            System.out.println(student.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（5）SpringBoot-Mybatis-Demo"><a href="#（5）SpringBoot-Mybatis-Demo" class="headerlink" title="（5）SpringBoot  Mybatis  Demo"></a>（5）SpringBoot  Mybatis  Demo</h5><p>修改JPA Demo的dao层与实体类，为service提供操作数据库的方法，有注解法和xml两种方式</p>
<p>这里采用比较方便的注解法</p>
<ul>
<li><p>修改Dao，映射sql语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标注为mybatis的mapper接口</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDAO</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用@Select注解表示调用方法会去执行对应的sql语句</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from student&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from student where id= #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Student <span class="title">getById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>修改pojo</p>
<p>Mybatis是将java方法与sql语句关联起来，而没有将java对象与数据库关联起来。所以不需要注解实体类与数据库的联系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">long</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





</li>
</ul>
<h3 id="SpringCloud-Netflix"><a href="#SpringCloud-Netflix" class="headerlink" title="SpringCloud Netflix"></a>SpringCloud Netflix</h3><h4 id="分布式与集群"><a href="#分布式与集群" class="headerlink" title="分布式与集群"></a>分布式与集群</h4><h5 id="（1）微服务概念"><a href="#（1）微服务概念" class="headerlink" title="（1）微服务概念"></a>（1）微服务概念</h5><p>微服务简单来说，一个springboot就是一个微服务，不同的是这个springboot只做一项单纯的任务</p>
<h5 id="（2）服务注册"><a href="#（2）服务注册" class="headerlink" title="（2）服务注册"></a>（2）服务注册</h5><p>springcloud有个微服务注册中eureka server，通过它把微服务注册起来以供来调用</p>
<h5 id="（3）服务访问"><a href="#（3）服务访问" class="headerlink" title="（3）服务访问"></a>（3）服务访问</h5><p>微服务直接可以通过注册中心的定位相互访问</p>
<h5 id="（4）分布式概念"><a href="#（4）分布式概念" class="headerlink" title="（4）分布式概念"></a>（4）分布式概念</h5><p> 简单说，原来是在一个 springboot里就完成的事情，现在分布在多个 springboot里做，这就是初步具备分布式雏形了</p>
<ul>
<li>如果我要更新数据微服务，视图微服务是不受影响的</li>
<li>可以让不同的团队开发不同的微服务，他们之间只要约定好接口，彼此之间是低耦合的。</li>
<li>如果视图微服务挂了，数据微服务依然可以继续使用<br>等等</li>
</ul>
<h5 id="（5）集群"><a href="#（5）集群" class="headerlink" title="（5）集群"></a>（5）集群</h5><p>提供相同功能，只是端口不一样的微服务称为集群</p>
<ul>
<li>比起一个 springboot, 两个springboot 可以分别部署在两个不同的机器上，那么理论上来说，能够承受的负载就是 x 2. 这样系统就具备通过横向扩展而提高性能的机制</li>
<li>如果 8001 挂了，还有 8002 继续提供微服务，这就叫做高可用 </li>
</ul>
<h4 id="SpringCloud介绍"><a href="#SpringCloud介绍" class="headerlink" title="SpringCloud介绍"></a>SpringCloud介绍</h4><p>参考资料：<a href="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/">四种软件架构</a></p>
<h5 id="（1）单体架构"><a href="#（1）单体架构" class="headerlink" title="（1）单体架构"></a>（1）单体架构</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109121533917.png" alt="image-20210912153357714"></p>
<p>典型的三级架构，前端(Web/手机端)+中间业务逻辑层+数据库层</p>
<h5 id="（2）分布式架构"><a href="#（2）分布式架构" class="headerlink" title="（2）分布式架构"></a>（2）分布式架构</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109121532105.png" alt="img"></p>
<p>将一个大的系统划分为多个业务模块，业务模块分别部署在不同的服务器上，各个业务模块之间通过接口进行数据交互。数据库也大量采用分布式数据库，通过LVS/Nginx代理应用，将用户请求均衡的负载到不同的服务器上</p>
<h5 id="（3）微服务架构"><a href="#（3）微服务架构" class="headerlink" title="（3）微服务架构"></a>（3）微服务架构</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109121533619.png" alt="img"></p>
<p>将系统拆分成很多小应用（微服务），微服务可以部署在不同的服务器上，也可以部署在相同的服务器不同的容器上。当应用的故障不会影响到其他应用，单应用的负载也不会影响到其他应用</p>
<h5 id="（4）SpringCloud基本组成"><a href="#（4）SpringCloud基本组成" class="headerlink" title="（4）SpringCloud基本组成"></a>（4）SpringCloud基本组成</h5><p>Spring将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包</p>
<p>SpringCloud 就是一套工具，帮助我们很容易地搭建出这么一个 集群和分布式的架子出来，Spring Cloud 专注于为典型用例提供良好的开箱即用体验，并为其他用户提供可扩展性机制</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109121619055.png" alt="img"></p>
<ul>
<li>Spring Cloud Netflix：cloud各项服务依赖与它，与各种Netflix OSS组件集成，组成微服务的核心，它的主要有组成有Eureka, Hystrix, Zuul</li>
<li>Eureka注册中心服务：SpringCloud服务中心，云端服务发现，一个基于 REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移</li>
<li>Microservice：微服务，在springcloud可以简单理解为专职做一项任务的springboot，微服务之间可以通过Ribbon和Feign两种方式进行微服务之间的访问（Feign是主流方式）</li>
<li>Zipkin链路跟踪：从属于Spring Cloud Sleuth（日志收集工具包），为SpringCloud应用实现了一种分布式追踪解决方案，可以查看微服务之间的复杂的调用关系</li>
<li>Config Server 配置服务器：俗称配置中心，配置管理工具包，让你可以把配置放到远程服务器（比如集中放在git），集中化管理集群配置</li>
<li>Bus 消息总线：事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Config Server 联合，再使用RabbitMQ实现热部署（所谓热部署即不需要重启微服务，对配置信息自动更新）</li>
<li>断路器Hystrix：容错管理工具，旨在通过熔断机制控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力，简单来说就是提供异常或错误的处理微服务，比如说某个微服务寄了，断路器就可以调用其他微服务顶上（一般是错误处理的微服务）</li>
<li>Hystrix dashboard 断路器监控：通过turbine将集群中多个实例汇聚在一起，对微服务进行断路器监控</li>
<li>网关Zuul：Zuul 是在云平台上提供动态路由,监控,弹性,安全等边缘服务的框架，通过网关简化了对各个服务的访问：不再需要记录各个微服务的地址和端口，而是通过网关去访问他们</li>
</ul>
<h4 id="Springcloud-启动测试"><a href="#Springcloud-启动测试" class="headerlink" title="Springcloud 启动测试"></a>Springcloud 启动测试</h4><h5 id="（1）项目启动"><a href="#（1）项目启动" class="headerlink" title="（1）项目启动"></a>（1）项目启动</h5><ul>
<li><p>启动RabbitMQ（访问<a href="http://127.0.0.1:15672/#即已开启）">http://127.0.0.1:15672/#即已开启）</a></p>
</li>
<li><p>启动链路追踪服务器（这里开启的端口要与微服务中的配置一致）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar zipkin-server-2.10.1-exec.jar  --server.port=8050 --zipkin.collector.rabbitmq.addresses=localhost</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问配置仓库<a href="https://github.com/Autovy/SpringCloudConfig/（也可以在config-server模块的配置文件修改成自己的仓库）">https://github.com/Autovy/SpringCloudConfig/（也可以在config-server模块的配置文件修改成自己的仓库）</a></p>
</li>
<li><p>运行EurekaServerApplication，启动注册中心服务（端口为8761）</p>
</li>
<li><p>运行ConfigServerApplication，启动配置服务器（端口为8030）</p>
</li>
<li><p>运行ProductDataServiceApplication，启动数据微服务（端口填写8001，8002形成集群）</p>
</li>
<li><p>运行ProductViewServiceFeignApplication，启动视图微服务（端口可填写8012，8013）</p>
</li>
<li><p>运行ProductServiceHystrixDashboardApplication，开启断路器监控，监控单个微服务（端口为8020）</p>
</li>
<li><p>运行ProductServiceTurbineApplication，开启聚合断路器监控以监控集群（端口为8021）</p>
</li>
<li><p>运行视图微服务里的 AccessViewService 来周期性地访问 <code>http://127.0.0.1:8012/products</code> 和 <code>http://127.0.0.1:8013/products</code>，以提供监控数据</p>
</li>
<li><p>运行ProductServiceZuulApplication，开启网关服务（端口为8060）</p>
</li>
</ul>
<h5 id="（2）测试服务注册中心"><a href="#（2）测试服务注册中心" class="headerlink" title="（2）测试服务注册中心"></a>（2）测试服务注册中心</h5><p>打开链接<a href="http://127.0.0.1:8761/，即可查看到注册服务中心Eureka">http://127.0.0.1:8761/，即可查看到注册服务中心Eureka</a></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191356386.png" alt="image-20210919135602819"></p>
<h5 id="（3）测试数据微服务"><a href="#（3）测试数据微服务" class="headerlink" title="（3）测试数据微服务"></a>（3）测试数据微服务</h5><p>打开链接<a href="http://127.0.0.1:8001/products">http://127.0.0.1:8001/products</a> 和 <a href="http://127.0.0.1:8002/products">http://127.0.0.1:8002/products</a> 都可以访问到返回的数据</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191358031.png" alt="image-20210919135818137"></p>
<h5 id="（4）测试视图微服务"><a href="#（4）测试视图微服务" class="headerlink" title="（4）测试视图微服务"></a>（4）测试视图微服务</h5><p>打开链接<a href="http://127.0.0.1:8012/products">http://127.0.0.1:8012/products</a> 和 <a href="http://127.0.0.1:8013/products">http://127.0.0.1:8013/products</a> 可以访问到视图页面，并且可以发现视图微服务会随机选择端口访问数据微服务实现负载均衡</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191401332.png" alt="image-20210919140106927"></p>
<h5 id="（5）测试服务链路追踪"><a href="#（5）测试服务链路追踪" class="headerlink" title="（5）测试服务链路追踪"></a>（5）测试服务链路追踪</h5><p>打开链接<a href="http://127.0.0.1:8050/zipkin/dependency/">http://127.0.0.1:8050/zipkin/dependency/</a> 即可访问到</p>
<p>Zipkin链路跟踪服务页面，即可看到微服务间的访问关系</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191404204.png" alt="image-20210919140414948"></p>
<h5 id="（6）测试Bus消息总线"><a href="#（6）测试Bus消息总线" class="headerlink" title="（6）测试Bus消息总线"></a>（6）测试Bus消息总线</h5><p>可访问<a href="http://127.0.0.1:8030/version/dev查看到配置服务器的信息">http://127.0.0.1:8030/version/dev查看到配置服务器的信息</a></p>
<p>访问视图查看当前版本号</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191407817.png" alt="image-20210919140727703"></p>
<p>修改配置服务器git上的版本号，这里我的仓库地址为<a href="https://github.com/Autovy/SpringCloudConfig/">https://github.com/Autovy/SpringCloudConfig/</a></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191411510.png" alt="image-20210919141137143"></p>
<p>启动视图微服务中的FreshConfigUtil使用 post 的方式访问 <a href="http://localhost:8012/actuator/bus-refresh">http://localhost:8012/actuator/bus-refresh</a> 地址，更新配置信息</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191414604.png" alt="image-20210919141416336"></p>
<p>最后再查看视图上的更新</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191415873.png" alt="image-20210919141503558"></p>
<p>可以访问RabbitMQ页面：<a href="http://127.0.0.1:15672/，查看队列，连接，还有交换机">http://127.0.0.1:15672/，查看队列，连接，还有交换机</a></p>
<h5 id="（7）测试Hystrix断路器及其监控"><a href="#（7）测试Hystrix断路器及其监控" class="headerlink" title="（7）测试Hystrix断路器及其监控"></a>（7）测试Hystrix断路器及其监控</h5><p>打开链接<a href="http://localhost:8020/hystrix即可进入Hystrix断路器的监控入口">http://localhost:8020/hystrix即可进入Hystrix断路器的监控入口</a></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191417418.png" alt="image-20210919141754328"></p>
<p>框内输入<a href="http://localhost:8012/actuator/hystrix.stream即可对8012端口的视图微服务进行监控">http://localhost:8012/actuator/hystrix.stream即可对8012端口的视图微服务进行监控</a></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191419460.png" alt="image-20210919141940229"></p>
<p>框内输入<a href="http://localhost:8021/turbine.stream即可实现对整个集群的视图微服务进行监控">http://localhost:8021/turbine.stream即可实现对整个集群的视图微服务进行监控</a></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191421059.png" alt="image-20210919142137829"></p>
<p><strong>停止数据微服务</strong>ProductDataServiceApplication集群，触发断路器：</p>
<p>访问视图可得</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191429890.png" alt="image-20210919142903819"></p>
<p>访问单个微服务监控页面可得</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191432572.png" alt="image-20210919143250565"></p>
<p>访问聚合集群微服务监控页面可得</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191431299.png" alt="image-20210919143120242"></p>
<h5 id="（8）网关测试"><a href="#（8）网关测试" class="headerlink" title="（8）网关测试"></a>（8）网关测试</h5><p>可以在zuul的配置文件中修改微服务的访问路由，我绑定的路由如下：</p>
<p><a href="http://localhost:8060/api-data/products">http://localhost:8060/api-data/products</a> ：访问数据微服务集群</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191358031.png" alt="image-20210919135818137"></p>
<p><a href="http://localhost:8060/api-view/products">http://localhost:8060/api-view/products</a> ：访问视图微服务集群</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191426987.png" alt="image-20210919142625877"></p>
<p>可以发现其访问集群的端口也是负载均衡的</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>Java</tag>
        <tag>框架学习</tag>
        <tag>后端</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|SpringCloud + Netflix OSS Demo</title>
    <url>/2021/09/20/Java/Java-SpringCloud/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109201109518.png" alt="image-20210920110949198"></p>
<p>Netflix OSS已在新版的SpringCloud中移除了，SpringCloud Netflix已经落后版本了🤯，但是不妨通过其掌握微服务的思想，理解SpringCloud的核心思想，核心组件</p>
<span id="more"></span>

<h4 id="分布式与集群"><a href="#分布式与集群" class="headerlink" title="分布式与集群"></a>分布式与集群</h4><h5 id="（1）微服务概念"><a href="#（1）微服务概念" class="headerlink" title="（1）微服务概念"></a>（1）微服务概念</h5><p>微服务简单来说，一个springboot就是一个微服务，不同的是这个springboot只做一项单纯的任务</p>
<h5 id="（2）服务注册"><a href="#（2）服务注册" class="headerlink" title="（2）服务注册"></a>（2）服务注册</h5><p>springcloud有个微服务注册中eureka server，通过它把微服务注册起来以供来调用</p>
<h5 id="（3）服务访问"><a href="#（3）服务访问" class="headerlink" title="（3）服务访问"></a>（3）服务访问</h5><p>微服务直接可以通过注册中心的定位相互访问</p>
<h5 id="（4）分布式概念"><a href="#（4）分布式概念" class="headerlink" title="（4）分布式概念"></a>（4）分布式概念</h5><p> 简单说，原来是在一个 springboot里就完成的事情，现在分布在多个 springboot里做，这就是初步具备分布式雏形了</p>
<ul>
<li>如果我要更新数据微服务，视图微服务是不受影响的</li>
<li>可以让不同的团队开发不同的微服务，他们之间只要约定好接口，彼此之间是低耦合的。</li>
<li>如果视图微服务挂了，数据微服务依然可以继续使用<br>等等</li>
</ul>
<h5 id="（5）集群"><a href="#（5）集群" class="headerlink" title="（5）集群"></a>（5）集群</h5><p>提供相同功能，只是端口不一样的微服务称为集群</p>
<ul>
<li>比起一个 springboot, 两个springboot 可以分别部署在两个不同的机器上，那么理论上来说，能够承受的负载就是 x 2. 这样系统就具备通过横向扩展而提高性能的机制</li>
<li>如果 8001 挂了，还有 8002 继续提供微服务，这就叫做高可用 </li>
</ul>
<h4 id="SpringCloud介绍"><a href="#SpringCloud介绍" class="headerlink" title="SpringCloud介绍"></a>SpringCloud介绍</h4><p>参考资料：<a href="https://crimsonromance.github.io/2019/03/23/%E5%9B%9B%E7%A7%8D%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%9A%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E3%80%81Serverless%E6%9E%B6%E6%9E%84/">四种软件架构</a></p>
<h5 id="（1）单体架构"><a href="#（1）单体架构" class="headerlink" title="（1）单体架构"></a>（1）单体架构</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109121533917.png" alt="image-20210912153357714"></p>
<p>典型的三级架构，前端(Web/手机端)+中间业务逻辑层+数据库层</p>
<h5 id="（2）分布式架构"><a href="#（2）分布式架构" class="headerlink" title="（2）分布式架构"></a>（2）分布式架构</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109121532105.png" alt="img"></p>
<p>将一个大的系统划分为多个业务模块，业务模块分别部署在不同的服务器上，各个业务模块之间通过接口进行数据交互。数据库也大量采用分布式数据库，通过LVS/Nginx代理应用，将用户请求均衡的负载到不同的服务器上</p>
<h5 id="（3）微服务架构"><a href="#（3）微服务架构" class="headerlink" title="（3）微服务架构"></a>（3）微服务架构</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109121533619.png" alt="img"></p>
<p>将系统拆分成很多小应用（微服务），微服务可以部署在不同的服务器上，也可以部署在相同的服务器不同的容器上。当应用的故障不会影响到其他应用，单应用的负载也不会影响到其他应用</p>
<h5 id="（4）SpringCloud组成"><a href="#（4）SpringCloud组成" class="headerlink" title="（4）SpringCloud组成"></a>（4）SpringCloud组成</h5><p>SpringCloud 就是一套工具，帮助我们很容易地搭建出这么一个 集群和分布式的架子出来，Spring Cloud 专注于为典型用例提供良好的开箱即用体验，并为其他用户提供可扩展性机制</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109121619055.png" alt="img"></p>
<ul>
<li>Spring Cloud Netflix：cloud各项服务依赖与它，与各种Netflix OSS组件集成，组成微服务的核心，它的主要有组成有Eureka, Hystrix, Zuul</li>
<li>Eureka注册中心服务：SpringCloud服务中心，云端服务发现，一个基于 REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移</li>
<li>Microservice：微服务，在springcloud可以简单理解为专职做一项任务的springboot，微服务之间可以通过Ribbon和Feign两种方式进行微服务之间的访问（Feign是主流方式）</li>
<li>Zipkin链路跟踪：从属于Spring Cloud Sleuth（日志收集工具包），为SpringCloud应用实现了一种分布式追踪解决方案，可以查看微服务之间的复杂的调用关系</li>
<li>Config Server 配置服务器：俗称配置中心，配置管理工具包，让你可以把配置放到远程服务器（比如集中放在git），集中化管理集群配置</li>
<li>Bus 消息总线：事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Config Server 联合，再使用RabbitMQ实现热部署（所谓热部署即不需要重启微服务，对配置信息自动更新）</li>
<li>断路器Hystrix：容错管理工具，旨在通过熔断机制控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力，简单来说就是提供异常或错误的处理微服务，比如说某个微服务寄了，断路器就可以调用其他微服务顶上（一般是错误处理的微服务）</li>
<li>Hystrix dashboard 断路器监控：通过turbine将集群中多个实例汇聚在一起，对微服务进行断路器监控</li>
<li>网关Zuul：Zuul 是在云平台上提供动态路由,监控,弹性,安全等边缘服务的框架，通过网关简化了对各个服务的访问：不再需要记录各个微服务的地址和端口，而是通过网关去访问他们</li>
</ul>
<h4 id="Springcloud-启动测试"><a href="#Springcloud-启动测试" class="headerlink" title="Springcloud 启动测试"></a>Springcloud 启动测试</h4><h5 id="（1）项目启动"><a href="#（1）项目启动" class="headerlink" title="（1）项目启动"></a>（1）项目启动</h5><ul>
<li><p>启动RabbitMQ（访问<a href="http://127.0.0.1:15672/#">http://127.0.0.1:15672/#</a> 即已开启）</p>
</li>
<li><p>启动链路追踪服务器（这里开启的端口要与微服务中的配置一致）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar zipkin-server-2.10.1-exec.jar  --server.port=8050 --zipkin.collector.rabbitmq.addresses=localhost</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问配置仓库<a href="https://github.com/Autovy/SpringCloudConfig/">https://github.com/Autovy/SpringCloudConfig/</a> （也可以在config-server模块的配置文件修改成自己的仓库）</p>
</li>
<li><p>运行EurekaServerApplication，启动注册中心服务（端口为8761）</p>
</li>
<li><p>运行ConfigServerApplication，启动配置服务器（端口为8030）</p>
</li>
<li><p>运行ProductDataServiceApplication，启动数据微服务（端口填写8001，8002形成集群）</p>
</li>
<li><p>运行ProductViewServiceFeignApplication，启动视图微服务（端口可填写8012，8013）</p>
</li>
<li><p>运行ProductServiceHystrixDashboardApplication，开启断路器监控，监控单个微服务（端口为8020）</p>
</li>
<li><p>运行ProductServiceTurbineApplication，开启聚合断路器监控以监控集群（端口为8021）</p>
</li>
<li><p>运行视图微服务里的 AccessViewService 来周期性地访问 <code>http://127.0.0.1:8012/products</code> 和 <code>http://127.0.0.1:8013/products</code>，以提供监控数据</p>
</li>
<li><p>运行ProductServiceZuulApplication，开启网关服务（端口为8060）</p>
</li>
</ul>
<h5 id="（2）测试服务注册中心"><a href="#（2）测试服务注册中心" class="headerlink" title="（2）测试服务注册中心"></a>（2）测试服务注册中心</h5><p>打开链接<a href="http://127.0.0.1:8761/">http://127.0.0.1:8761/</a>   ，即可查看到注册服务中心Eureka</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191356386.png" alt="image-20210919135602819"></p>
<h5 id="（3）测试数据微服务"><a href="#（3）测试数据微服务" class="headerlink" title="（3）测试数据微服务"></a>（3）测试数据微服务</h5><p>打开链接<a href="http://127.0.0.1:8001/products">http://127.0.0.1:8001/products</a> 和 <a href="http://127.0.0.1:8002/products">http://127.0.0.1:8002/products</a> 都可以访问到返回的数据</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191358031.png" alt="image-20210919135818137"></p>
<h5 id="（4）测试视图微服务"><a href="#（4）测试视图微服务" class="headerlink" title="（4）测试视图微服务"></a>（4）测试视图微服务</h5><p>打开链接<a href="http://127.0.0.1:8012/products">http://127.0.0.1:8012/products</a> 和 <a href="http://127.0.0.1:8013/products">http://127.0.0.1:8013/products</a> 可以访问到视图页面，并且可以发现视图微服务会随机选择端口访问数据微服务实现负载均衡</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191401332.png" alt="image-20210919140106927"></p>
<h5 id="（5）测试服务链路追踪"><a href="#（5）测试服务链路追踪" class="headerlink" title="（5）测试服务链路追踪"></a>（5）测试服务链路追踪</h5><p>打开链接<a href="http://127.0.0.1:8050/zipkin/dependency/">http://127.0.0.1:8050/zipkin/dependency/</a>  即可访问到</p>
<p>Zipkin链路跟踪服务页面，即可看到微服务间的访问关系</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191404204.png" alt="image-20210919140414948"></p>
<h5 id="（6）测试Bus消息总线"><a href="#（6）测试Bus消息总线" class="headerlink" title="（6）测试Bus消息总线"></a>（6）测试Bus消息总线</h5><p>可访问<a href="http://127.0.0.1:8030/version/dev">http://127.0.0.1:8030/version/dev</a> 查看到配置服务器的信息</p>
<p>访问视图查看当前版本号</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191407817.png" alt="image-20210919140727703"></p>
<p>修改配置服务器git上的版本号，这里我的仓库地址为<a href="https://github.com/Autovy/SpringCloudConfig/">https://github.com/Autovy/SpringCloudConfig/</a></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191411510.png" alt="image-20210919141137143"></p>
<p>启动视图微服务中的FreshConfigUtil使用 post 的方式访问 <a href="http://localhost:8012/actuator/bus-refresh">http://localhost:8012/actuator/bus-refresh</a>  地址，更新配置信息</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191414604.png" alt="image-20210919141416336"></p>
<p>最后再查看视图上的更新</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191415873.png" alt="image-20210919141503558"></p>
<p>可以访问RabbitMQ页面：<a href="http://127.0.0.1:15672/">http://127.0.0.1:15672/</a> ，查看队列，连接，还有交换机</p>
<h5 id="（7）测试Hystrix断路器及其监控"><a href="#（7）测试Hystrix断路器及其监控" class="headerlink" title="（7）测试Hystrix断路器及其监控"></a>（7）测试Hystrix断路器及其监控</h5><p>打开链接<a href="http://localhost:8020/hystrix">http://localhost:8020/hystrix</a> 即可进入Hystrix断路器的监控入口</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191417418.png" alt="image-20210919141754328"></p>
<p>框内输入<a href="http://localhost:8012/actuator/hystrix.stream">http://localhost:8012/actuator/hystrix.stream</a> 即可对8012端口的视图微服务进行监控</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191419460.png" alt="image-20210919141940229"></p>
<p>框内输入<a href="http://localhost:8021/turbine.stream">http://localhost:8021/turbine.stream</a> 即可实现对整个集群的视图微服务进行监控</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191421059.png" alt="image-20210919142137829"></p>
<p><strong>停止数据微服务</strong>ProductDataServiceApplication集群，触发断路器：</p>
<p>访问视图可得</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191429890.png" alt="image-20210919142903819"></p>
<p>访问单个微服务监控页面可得</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191432572.png" alt="image-20210919143250565"></p>
<p>访问聚合集群微服务监控页面可得</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191431299.png" alt="image-20210919143120242"></p>
<h5 id="（8）网关测试"><a href="#（8）网关测试" class="headerlink" title="（8）网关测试"></a>（8）网关测试</h5><p>可以在zuul的配置文件中修改微服务的访问路由，我绑定的路由如下：</p>
<p><a href="http://localhost:8060/api-data/products">http://localhost:8060/api-data/products</a>  ：访问数据微服务集群</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191358031.png" alt="image-20210919135818137"></p>
<p><a href="http://localhost:8060/api-view/products">http://localhost:8060/api-view/products</a>  ：访问视图微服务集群</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109191426987.png" alt="image-20210919142625877"></p>
<p>可以发现其访问集群的端口也是负载均衡的</p>
<h4 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h4><h5 id="（1）需求"><a href="#（1）需求" class="headerlink" title="（1）需求"></a>（1）需求</h5><p>通过服务注册中心管理微服务，并且让微服务直接可以相互定位交流</p>
<h5 id="（2）相关依赖"><a href="#（2）相关依赖" class="headerlink" title="（2）相关依赖"></a>（2）相关依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        添加eureka服务端--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="（3）相关配置"><a href="#（3）相关配置" class="headerlink" title="（3）相关配置"></a>（3）相关配置</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># eureka服务配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sring微服务模块命名</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>hostname: localhost 表示主机名称</li>
<li>registerWithEureka：false 表示是否注册到服务器。 因为它本身就是服务器，所以就无需把自己注册到服务器</li>
<li>fetchRegistry: false 表示是否获取服务器的注册信息，和上面同理，这里也设置为 false</li>
<li>defaultZone： <code>http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</code> 自己作为服务器，公布出来的地址。 比如后续某个微服务要把自己注册到 eureka server, 那么就要使用这个地址： <a href="http://localhost:8761/eureka/">http://localhost:8761/eureka/</a></li>
</ul>
<h5 id="（4）服务启动"><a href="#（4）服务启动" class="headerlink" title="（4）服务启动"></a>（4）服务启动</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">// 注解标注为Eureka服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置默认端口</span></span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8761</span>;</span><br><span class="line">        <span class="comment">// 启动EurekaServer管理页面</span></span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(EurekaServerApplication.class)</span><br><span class="line">                .properties(<span class="string">&quot;server.port=&quot;</span> + port)</span><br><span class="line">                .run(args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h4><h5 id="（1）需求-1"><a href="#（1）需求-1" class="headerlink" title="（1）需求"></a>（1）需求</h5><p>微服务要做集群，这就意味着，会有多个微服务实例。 在业务上有时候需要修改一些配置信息，比如说 版本信息，倘若没有配置服务， 那么就需要挨个修改微服务，挨个重新部署微服务，这样就比较麻烦。</p>
<p>我们可以把这些配置信息放在一个公共的地方，比如git，然后通过配置服务器把它获取下来，然后微服务再从配置服务器上取下来</p>
<h5 id="（2）git准备"><a href="#（2）git准备" class="headerlink" title="（2）git准备"></a>（2）git准备</h5><p>在github上新建仓库，并创建respo目录，在目录下添加 product-view-service-feign-dev.properties文件并写入版本信息</p>
<p>如我创建的仓库：<a href="https://github.com/Autovy/SpringCloudConfig">https://github.com/Autovy/SpringCloudConfig</a></p>
<h5 id="（3）相关依赖"><a href="#（3）相关依赖" class="headerlink" title="（3）相关依赖"></a>（3）相关依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- eureka客户端注册依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springboot web支持 --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置服务支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="（4）相关配置"><a href="#（4）相关配置" class="headerlink" title="（4）相关配置"></a>（4）相关配置</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置微服务名与配置服务器的配置信息（这里用git作为配置服务器）</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/Autovy/SpringCloudConfig/</span> <span class="comment">#github仓库地址</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">respo</span>  <span class="comment"># 仓库下的目录</span></span><br><span class="line">          <span class="attr">default-label:</span> <span class="string">main</span>  <span class="comment"># 分支名改为了main</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置注册中性的地址要与Eureka的配置对应</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>





<h5 id="（5）服务启动"><a href="#（5）服务启动" class="headerlink" title="（5）服务启动"></a>（5）服务启动</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span>  <span class="comment">// 注解标注为Eureka客户端，实现注册</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span>  <span class="comment">// 使用该注解表明该springboot是个配置服务器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8030</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(ConfigServerApplication.class)</span><br><span class="line">                .properties(<span class="string">&quot;server.port=&quot;</span>+port)</span><br><span class="line">                .run(args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><h5 id="（1）-RabbitMQ的介绍"><a href="#（1）-RabbitMQ的介绍" class="headerlink" title="（1） RabbitMQ的介绍"></a>（1） RabbitMQ的介绍</h5><p>通过RabbitMQ与消息总线Bus实现配置服务器热部署即自动更新配置信息</p>
<p>RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。</p>
<p><code>AMQP</code>(<code>Advanced Message Queuing Protocol</code>)，顾名思义，它是一个消息协议，能够使得遵循该协议的客户端和消息中间件(<code>Broker</code>)进行通讯</p>
<h5 id="（2）RabbitMQ安装"><a href="#（2）RabbitMQ安装" class="headerlink" title="（2）RabbitMQ安装"></a>（2）RabbitMQ安装</h5><p>首先要安装erlang，并配置环境，才继续安装RabbitMQ</p>
<p>配置插件后重启RabbitMQ</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109160921566.png" alt="image-20210916092150386"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109160922543.png" alt="image-20210916092243391"></p>
<h5 id="（3）RabbitMQ页面无法访问问题"><a href="#（3）RabbitMQ页面无法访问问题" class="headerlink" title="（3）RabbitMQ页面无法访问问题"></a>（3）RabbitMQ页面无法访问问题</h5><p>一般来说开启了RabbitMQ服务后，可以通过链接<a href="http://127.0.0.1:15672/进行访问">http://127.0.0.1:15672/进行访问</a></p>
<p>如果页面无法访问到，可以自行下列语句重新生成相关配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net stop rabbitmq &amp;&amp; rabbitmq-server -detached &amp;&amp; net start rabbitmq</span><br></pre></td></tr></table></figure>

<p>这样即可访问到RabbitMQ的页面（用户与密码默认为guest/guest）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109160935154.png" alt="image-20210916093536018"></p>
<h5 id="（4）消息路由过程"><a href="#（4）消息路由过程" class="headerlink" title="（4）消息路由过程"></a>（4）消息路由过程</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109160946397.png" alt="image-20210916094610081"></p>
<p>消息<code>(message)</code>发布给交换机<code>(Exchange)</code></p>
<p><code>Exchange</code>相当于邮局或者信箱，它接收到消息后会根据不同的规则(称为<code>Bindings</code>)来确定要发给哪个队列<code>(queue)</code></p>
<p>最后AMQP代理会将消息投递给订阅了此队列的消费者，或者是消费者依据需求自行获取</p>
<h5 id="（5）模式分类"><a href="#（5）模式分类" class="headerlink" title="（5）模式分类"></a>（5）模式分类</h5><p>RabbitMQ提供了四种Exchange模式：fanout,direct,topic,header 。header在实际使用中很少用到，故我们只介绍前面三种</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109160953038.png" alt="img"></p>
<ul>
<li>Direct 模式就是指定队列模式， 消息来了，只发给指定的 Queue, 其他Queue 都收不到</li>
<li>Topic 模式就是主题模式，Queue 按照某种主题分类接收消息</li>
<li>Fanout 模式就是广播模式，消息来了，会发给所有的队列</li>
</ul>
<p>在本项目中，我们让config-server去git获取最新配置信息，并将该信息广播给集群中的所有视图微服务</p>
<h4 id="断路器监控"><a href="#断路器监控" class="headerlink" title="断路器监控"></a>断路器监控</h4><h5 id="（1）需求-2"><a href="#（1）需求-2" class="headerlink" title="（1）需求"></a>（1）需求</h5><p>前面我们了解了断路器， 当数据服务不可用的时候， 断路器就会发挥作用</p>
<p>而我们可以使用断路器监控来可视化断路器运行情况</p>
<h5 id="（2）相关依赖-1"><a href="#（2）相关依赖-1" class="headerlink" title="（2）相关依赖"></a>（2）相关依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在eureka注册微服务依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加web支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 消息总线依赖，用于访问路径/actuator/bus-refresh --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 增加断路器依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 增加断路器依赖监控面板依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="（3）相关配置-1"><a href="#（3）相关配置-1" class="headerlink" title="（3）相关配置"></a>（3）相关配置</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置微服务并命名</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hystrix-dashboard</span></span><br></pre></td></tr></table></figure>



<h5 id="（4）服务启动-1"><a href="#（4）服务启动-1" class="headerlink" title="（4）服务启动"></a>（4）服务启动</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceHystrixDashboardApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8020</span>;</span><br><span class="line">        <span class="keyword">if</span>(!NetUtil.isUsableLocalPort(port)) &#123;</span><br><span class="line">            System.err.printf(<span class="string">&quot;端口%d被占用了，无法启动%n&quot;</span>, port );</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造服务</span></span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(ProductServiceHystrixDashboardApplication.class)</span><br><span class="line">                .properties(<span class="string">&quot;server.port=&quot;</span> + port)</span><br><span class="line">                .run(args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="断路器聚合监控"><a href="#断路器聚合监控" class="headerlink" title="断路器聚合监控"></a>断路器聚合监控</h4><h5 id="（1）需求-3"><a href="#（1）需求-3" class="headerlink" title="（1）需求"></a>（1）需求</h5><p>上面的内容只能针对一个微服务进行断路器监控，但是一个微服务通常由多个实例组成，监控起来十分不方便；springcloud提供了turbine可以把一个集群里的多个实例汇聚在一个turbine里，这样就能够在集群层面进行监控了</p>
<h5 id="（2）相关依赖-2"><a href="#（2）相关依赖-2" class="headerlink" title="（2）相关依赖"></a>（2）相关依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在eureka注册微服务依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消息总线依赖，用于访问路径/actuator/bus-refresh --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 增加断路器依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 增加断路器依赖监控面板依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 增加turbine --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="（3）相关配置-2"><a href="#（3）相关配置-2" class="headerlink" title="（3）相关配置"></a>（3）相关配置</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">turbine</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置turbine</span></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line">  <span class="attr">aggregator:</span></span><br><span class="line">    <span class="attr">cluster-config:</span> <span class="string">default</span></span><br><span class="line">  <span class="comment"># 配置Eureka中的serviceId列表，表明监控哪些服务</span></span><br><span class="line">  <span class="comment">#（这样就会把微服务名称为product-view-service-feign的实例信息收集起来）</span></span><br><span class="line">  <span class="attr">app-config:</span> <span class="string">product-view-service-feign</span></span><br><span class="line">  <span class="attr">cluster-name-expression:</span> <span class="string">new</span> <span class="string">String(&quot;default&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置注册中性的地址要与Eureka的配置对应（注册）</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>





<h5 id="（4）服务启动-2"><a href="#（4）服务启动-2" class="headerlink" title="（4）服务启动"></a>（4）服务启动</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 启动类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableTurbine</span> <span class="comment">// 开启Turbine</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceTurbineApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8021</span>;</span><br><span class="line">        <span class="keyword">if</span>(!NetUtil.isUsableLocalPort(port))&#123;</span><br><span class="line">            System.err.printf(<span class="string">&quot;端口%d被占用，无法启动%n&quot;</span>, port);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(ProductServiceTurbineApplication.class)</span><br><span class="line">                .properties(<span class="string">&quot;server.port=&quot;</span>+ port)</span><br><span class="line">                .run(args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="网关Zuul"><a href="#网关Zuul" class="headerlink" title="网关Zuul"></a>网关Zuul</h4><h5 id="（1）需求-4"><a href="#（1）需求-4" class="headerlink" title="（1）需求"></a>（1）需求</h5><p>微服务有可能放在不同的 ip 地址上，有可能是不同的端口</p>
<p>为了访问他们，就需要记录这些地址和端口。 而地址和端口都可能会变化，这就增加了访问者的负担</p>
<p>这时候我们就可以通过网关简化对微服务的访问，仅需要一个地址一个端口就可以实现对一个微服务集群的访问</p>
<h5 id="（2）相关依赖-3"><a href="#（2）相关依赖-3" class="headerlink" title="（2）相关依赖"></a>（2）相关依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 微服务注册中心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web服务支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 增加zuul网关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="（3）相关配置-3"><a href="#（3）相关配置-3" class="headerlink" title="（3）相关配置"></a>（3）相关配置</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">product-service-zuul</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置注册中性的地址要与Eureka的配置对应（注册）</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对zuul进行路由映射</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">api-a:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-data/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">PRODUCT-DATA-SERVICE</span></span><br><span class="line">    <span class="attr">api-b:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-view/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">PRODUCT-VIEW-SERVICE-FEIGN</span></span><br></pre></td></tr></table></figure>



<h5 id="（4）服务启动-3"><a href="#（4）服务启动-3" class="headerlink" title="（4）服务启动"></a>（4）服务启动</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 启动类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">// 网关服务</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">// 注册服务客户端</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductServiceZuulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8060</span>;</span><br><span class="line">        <span class="keyword">if</span>(!NetUtil.isUsableLocalPort(port))&#123;</span><br><span class="line">            System.err.printf(<span class="string">&quot;端口%d被占用了，无法启动%d&quot;</span>, port);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(ProductServiceZuulApplication.class)</span><br><span class="line">                .properties(<span class="string">&quot;server.port=&quot;</span> + port)</span><br><span class="line">                .run(args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="数据微服务"><a href="#数据微服务" class="headerlink" title="数据微服务"></a>数据微服务</h4><h5 id="（1）需求-5"><a href="#（1）需求-5" class="headerlink" title="（1）需求"></a>（1）需求</h5><p>访问数据库为视图微服务提供数据（在本项目中为了配置方便，不设dao层直接在service层提供假数据），真正意义上完整的springboot</p>
<h5 id="（2）相关依赖-4"><a href="#（2）相关依赖-4" class="headerlink" title="（2）相关依赖"></a>（2）相关依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- eureka客户端 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web服务用于提供控制层 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--增加zipkin，使服务可以被追踪到--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="（3）相关配置-4"><a href="#（3）相关配置-4" class="headerlink" title="（3）相关配置"></a>（3）相关配置</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置微服务名与配置服务链路追踪</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">product-data-service</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:8050</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置注册中性的地址要与Eureka的配置对应</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>



<h5 id="（4）实体类"><a href="#（4）实体类" class="headerlink" title="（4）实体类"></a>（4）实体类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 默认构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 利用该构造方法，可以声明一个由默认值的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（5）服务层"><a href="#（5）服务层" class="headerlink" title="（5）服务层"></a>（5）服务层</h5><p>不接入dao层，直接在服务层提供假数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务层（这里不接入dao层，而是提供假数据）</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得配置中的端口号</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    String port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Product&gt; ps = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 提供假数据，list方法没有对应dao层相应的数据库操作方法</span></span><br><span class="line">        ps.add(<span class="keyword">new</span> Product(<span class="number">1</span>,<span class="string">&quot;product a from port:&quot;</span>+port, <span class="number">50</span>));</span><br><span class="line">        ps.add(<span class="keyword">new</span> Product(<span class="number">2</span>,<span class="string">&quot;product b from port:&quot;</span>+port, <span class="number">150</span>));</span><br><span class="line">        ps.add(<span class="keyword">new</span> Product(<span class="number">3</span>,<span class="string">&quot;product c from port:&quot;</span>+port, <span class="number">250</span>));</span><br><span class="line">        <span class="keyword">return</span> ps;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（6）控制层"><a href="#（6）控制层" class="headerlink" title="（6）控制层"></a>（6）控制层</h5><p>接入服务层并映射路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 自动装配服务层</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 映射url路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/products&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">products</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 调用服务层的方法</span></span><br><span class="line">        List&lt;Product&gt; ps = productService.list();</span><br><span class="line">        <span class="keyword">return</span> ps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（7）服务启动"><a href="#（7）服务启动" class="headerlink" title="（7）服务启动"></a>（7）服务启动</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">// 服务注册中心客户端，微服务注册</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDataServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 让用户输入端口号，开启多个服务形成集群</span></span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入开启服务的端口号：&quot;</span>);</span><br><span class="line">        Scanner strpost = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        port = strpost.nextInt();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动ProductDataService服务</span></span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(ProductDataServiceApplication.class)</span><br><span class="line">                .properties(<span class="string">&quot;server.port=&quot;</span> + port)</span><br><span class="line">                .run(args);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置zipkin:在启动类里配置 Sampler 抽样策略： ALWAYS_SAMPLE 表示持续抽样*/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sampler <span class="title">defaultSampler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Sampler.ALWAYS_SAMPLE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="视图微服务"><a href="#视图微服务" class="headerlink" title="视图微服务"></a>视图微服务</h4><h5 id="（1）需求-6"><a href="#（1）需求-6" class="headerlink" title="（1）需求"></a>（1）需求</h5><p>访问数据微服务（这里主要用feign的方式），将数据发送到视图层展示</p>
<h5 id="（2）相关依赖-5"><a href="#（2）相关依赖-5" class="headerlink" title="（2）相关依赖"></a>（2）相关依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 服务注册依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--支持 Feign 方式的微服务访问--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web支持依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图层依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--增加zipkin，使服务可以被追踪到--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 增加一个 spring-cloud-starter-config 用于访问配置服务器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消息总线依赖，用于访问路径/actuator/bus-refresh --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用于支持rabbitmq --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用于支持断路器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="（3）相关配置-5"><a href="#（3）相关配置-5" class="headerlink" title="（3）相关配置"></a>（3）相关配置</h5><p>这里的微服务由于要通过rabbitMQ访问到配置服务器，需要系统层面上的配置，故需要两个配置文件：<strong>bootstrap.yml 和 application.yml</strong></p>
<p>参考资料：<a href="https://www.jianshu.com/p/c955c44ae534">application.yml与bootstrap.yml的区别</a></p>
<ul>
<li>bootstrap.yml 和 application.yml 都可以用来配置参数</li>
<li>bootstrap.yml 用来程序引导时执行，应用于更加早期配置信息读取。可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。一旦bootStrap.yml 被加载，则内容不会被覆盖</li>
<li>application.yml 可以用来定义应用级别的， 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等</li>
</ul>
<p><strong>bootstrap.yml文件</strong></p>
<p>主要提供了 serviceId: config-server, 这个是配置服务器在 eureka server 里的服务名称，这样就可以定位 config-server了</p>
<p>在注册服务中心的注册也移到了bootstrap.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 config-server（服务端）的信息</span></span><br><span class="line"><span class="attr">spring :</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">config-server</span></span><br><span class="line">    <span class="comment"># 增加总线配置</span></span><br><span class="line">    <span class="attr">bus:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">trace:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 新增rabbitMQ配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置注册中心的地址要与Eureka的配置对应（注册）</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>application.yml文件</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置微服务名与配置服务链路追踪</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">product-view-service-feign</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:8050</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 配置thymeleaf</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">    <span class="attr">encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">      <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启断路器</span></span><br><span class="line"><span class="attr">feign.hystrix.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增路径访问允许，这样才能访问 /actuator/bus-refresh,用于访问配置服务器更新配置信息</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">      <span class="attr">cors:</span></span><br><span class="line">        <span class="attr">allowed-origins:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">        <span class="attr">allowed-methods:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="（4）实体类-1"><a href="#（4）实体类-1" class="headerlink" title="（4）实体类"></a>（4）实体类</h5><p>与数据微服务的一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（5）客户端"><a href="#（5）客户端" class="headerlink" title="（5）客户端"></a>（5）客户端</h5><p>视图微服务作为客户端去访问数据微服务这个服务端，并利用断路器提供访问失败后的异常处理信息</p>
<p><strong>Feign客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Feign 客户端， 通过 注解方式访问PRODUCT-DATA-SERVICE服务的 products路径</span></span><br><span class="line"><span class="comment">// 如果访问的 PRODUCT-DATA-SERVICE 不可用的话，就调用 ProductClientFeignHystrix 来进行反馈信息</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;PRODUCT-DATA-SERVICE&quot;, fallback = ProductClientFeignHystrix.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductClientFeign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;products&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>Hystrix断路器处理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现了 ProductClientFeign 接口，并提供了 list() 方法</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductClientFeignHystrix</span> <span class="keyword">implements</span>  <span class="title">ProductClientFeign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Product&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        res.add(<span class="keyword">new</span> Product(<span class="number">0</span>, <span class="string">&quot;产品数据微服务不可用&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（6）服务层"><a href="#（6）服务层" class="headerlink" title="（6）服务层"></a>（6）服务层</h5><p>接入客户端，自动装配客户端请求到的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProductClientFeign productClientFeign;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务类的数据从ProductClientRibbon（客户端）中获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productClientFeign.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="（7）控制层"><a href="#（7）控制层" class="headerlink" title="（7）控制层"></a>（7）控制层</h5><p>接入服务层，映射访问路径，发送数据到视图层并输出视图</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在配置服务器获得版本号</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;version&#125;&quot;)</span></span><br><span class="line">    String version;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制器将数据放入product.html</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/products&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">products</span><span class="params">(Model m)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Product&gt; ps = productService.list();</span><br><span class="line">        <span class="comment">// 发送到视图</span></span><br><span class="line">        m.addAttribute(<span class="string">&quot;version&quot;</span>, version);</span><br><span class="line">        m.addAttribute(<span class="string">&quot;ps&quot;</span>, ps);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;products&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="（8）视图层"><a href="#（8）视图层" class="headerlink" title="（8）视图层"></a>（8）视图层</h5><p>使用thymeleaf可接入java动态化数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>products<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">border-collapse</span>:collapse;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>:<span class="number">400px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>:<span class="number">20px</span> auto;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-tag">td</span>,<span class="selector-tag">th</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>:<span class="number">1px</span> solid gray;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;workingArea&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>产品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;p: $&#123;ps&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;p.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;p.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;p.price&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;version&#125;&quot;</span> &gt;</span>how2j springcloud version unknown<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="（9）网络访问"><a href="#（9）网络访问" class="headerlink" title="（9）网络访问"></a>（9）网络访问</h5><p><strong>更新配置信息</strong></p>
<p>使用 post 的方式访问配置服务器的 <a href="http://localhost:8012/actuator/bus-refresh">http://localhost:8012/actuator/bus-refresh</a> 地址，用于更新配置信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用 post 的方式访问 http://localhost:8012/actuator/bus-refresh 地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreshConfigUntil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 增加请求头</span></span><br><span class="line">          HashMap&lt;String, String&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">          headers.put(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 因为要去git获取，还要刷新config-server, 会比较卡，所以一般会要好几秒才能完成</span></span><br><span class="line">          System.out.println(<span class="string">&quot;请耐心等待&quot;</span>);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 发送post请求</span></span><br><span class="line">          String result = HttpUtil.createPost(<span class="string">&quot;http://localhost:8012/actuator/bus-refresh&quot;</span>)</span><br><span class="line">                  .addHeaders(headers).execute().body();</span><br><span class="line"></span><br><span class="line">          System.out.println(<span class="string">&quot;result&quot;</span> + result);</span><br><span class="line">          System.out.println(<span class="string">&quot;refresh 完成&quot;</span>);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>提供监控数据</strong></p>
<p>不断对视图层进行访问，以提供断路器监控的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个不断访问视图服务的类，以便在监控中观察到现象</span></span><br><span class="line"><span class="comment">// 访问集群的8012和8013端口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessViewService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">            access(<span class="number">8012</span>);</span><br><span class="line">            access(<span class="number">8013</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String html = HttpUtil.get(String.format(<span class="string">&quot;http://127.0.0.1:%d/products&quot;</span>, port));</span><br><span class="line">            System.out.println(<span class="string">&quot;html length:&quot;</span> + html.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d地址的视图服务无法访问%n&quot;</span>, port);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="（10）服务启动"><a href="#（10）服务启动" class="headerlink" title="（10）服务启动"></a>（10）服务启动</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">// 注册服务中信息注册客户端</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>   <span class="comment">//表明使用Feign方式</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">// 共享信息给断路监控器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductViewServiceFeignApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增加rabbitmq是否启动判断</span></span><br><span class="line">        <span class="keyword">int</span> rabbitMQPort = <span class="number">5672</span>;</span><br><span class="line">        <span class="keyword">if</span>(NetUtil.isUsableLocalPort(rabbitMQPort))&#123;</span><br><span class="line">            System.err.printf(<span class="string">&quot;未在端口%d发现rabbitMQ服务，请检查&quot;</span>, rabbitMQPort);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 让用户输入端口号，开启多个服务形成集群</span></span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入开启服务的端口号：&quot;</span>);</span><br><span class="line">        Scanner strpost = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        port = strpost.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(ProductViewServiceFeignApplication.class)</span><br><span class="line">                .properties(<span class="string">&quot;server.port=&quot;</span> + port)</span><br><span class="line">                .run(args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置zipkon:在启动类里配置 Sampler 抽样策略： ALWAYS_SAMPLE 表示持续抽样*/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sampler <span class="title">defaultSampler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Sampler.ALWAYS_SAMPLE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
        <tag>Java</tag>
        <tag>框架学习</tag>
        <tag>后端</tag>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编|汇编语言学习</title>
    <url>/2021/03/06/Hardware/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041134246.jpeg" alt="img"></p>
<span id="more"></span>



<h2 id="汇编基础知识"><a href="#汇编基础知识" class="headerlink" title="汇编基础知识"></a>汇编基础知识</h2><h3 id="1-CPU对存储器的读写"><a href="#1-CPU对存储器的读写" class="headerlink" title="1.CPU对存储器的读写"></a>1.CPU对存储器的读写</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041130473.png" alt="image-20210307172937120"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041237607.png" alt="image-20210307173115319"></p>
<h3 id="2-地址总线"><a href="#2-地址总线" class="headerlink" title="2.地址总线"></a>2.地址总线</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041130721.png" alt="image-20210307173818234"></p>
<h3 id="3-数据总线"><a href="#3-数据总线" class="headerlink" title="3.数据总线"></a>3.数据总线</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131528.png" alt="image-20210307174352688"></p>
<h3 id="4-PC中各类存储器的逻辑连接"><a href="#4-PC中各类存储器的逻辑连接" class="headerlink" title="4.PC中各类存储器的逻辑连接"></a>4.PC中各类存储器的逻辑连接</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131369.png" alt="image-20210307175417668"></p>
<h2 id="CPU工作原理"><a href="#CPU工作原理" class="headerlink" title="CPU工作原理"></a>CPU工作原理</h2><h3 id="1-寄存器概述"><a href="#1-寄存器概述" class="headerlink" title="1.寄存器概述"></a>1.寄存器概述</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131138.png" alt="image-20210307190658768"></p>
<h3 id="2-通用寄存器"><a href="#2-通用寄存器" class="headerlink" title="2.通用寄存器"></a>2.通用寄存器</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131824.png" alt="image-20210307190849268"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131863.png" alt="image-20210307190909058"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131208.png" alt="image-20210307191017012"></p>
<p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210307191351945.png" alt="image-20210307191351945"> </p>
<h3 id="3-基础汇编指令"><a href="#3-基础汇编指令" class="headerlink" title="3.基础汇编指令"></a>3.基础汇编指令</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131386.png" alt="image-20210307191802493"></p>
<ul>
<li>但寄存器超过了4位数（十六进制），只会保留4位的内容</li>
<li>ax寄存器也可以拆成al，ah两块存储</li>
</ul>
<h3 id="4-CPU内部逻辑结构"><a href="#4-CPU内部逻辑结构" class="headerlink" title="4.CPU内部逻辑结构"></a>4.CPU内部逻辑结构</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131210.png" alt="image-20210307193135190"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131248.png" alt="image-20210307193654830"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131898.png" alt="image-20210307193826865"></p>
<p><strong>地址加法器工作原理：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131672.png" alt="image-20210307194023535"></p>
<h3 id="5-16位结构的CPU"><a href="#5-16位结构的CPU" class="headerlink" title="5.16位结构的CPU"></a>5.16位结构的CPU</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131032.png" alt="image-20210307193239847"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131408.png" alt="image-20210307195014762"></p>
<h3 id="6-段寄存器"><a href="#6-段寄存器" class="headerlink" title="6.段寄存器"></a>6.段寄存器</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131639.png" alt="image-20210307195535155"></p>
<p><strong>CPU工作流程：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131793.png" alt="image-20210307195700302"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131479.png" alt="image-20210307195911736"></p>
<p><strong>修改CS，IP指令：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131296.png" alt="image-20210307200416031"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131432.png" alt="image-20210307200445852"></p>
<h3 id="7-代码段"><a href="#7-代码段" class="headerlink" title="7.代码段"></a>7.代码段</h3><p><img src="/2021/03/06/Hardware/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Clinghao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210307200924999.png" alt="image-20210307200924999"></p>
<h2 id="内存访问"><a href="#内存访问" class="headerlink" title="内存访问"></a>内存访问</h2><h3 id="1-内存中字的存储"><a href="#1-内存中字的存储" class="headerlink" title="1.内存中字的存储"></a>1.内存中字的存储</h3><p>CPU中，用16位寄存器来存储一个字。高8位存放高位字节，低8位存放低位字节</p>
<p>字单元：存放一个字型数据（16位）的内存单元，由两个地址连续的内存单元组成</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131569.png" alt="image-20210308205927102"></p>
<p>0号是低地址单元，1号是高地址单元</p>
<p>（1）0地址单元中存放的字节型数据是多少？    20H</p>
<p>（2）0地址字单元中存放的字型数据是多少？    4E20H</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131272.png" alt="image-20210308210201087"></p>
<h3 id="2-DS寄存器与地址"><a href="#2-DS寄存器与地址" class="headerlink" title="2.DS寄存器与地址"></a>2.DS寄存器与地址</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131656.png" alt="image-20210308211025318"></p>
<p>读取内存单元数据到寄存器中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 以下三条指令将1000H（1000:0）地址中的数据读到al</span><br><span class="line"># 先将目标地址放入通用寄存器 </span><br><span class="line">mov bx, 1000H</span><br><span class="line"># 经过通用寄存器将地址信息传送给ds（8086CPU不支持将数据直接送入段寄存器）</span><br><span class="line">mov ds, bx</span><br><span class="line"># 后面的代码可以自动索引到目标段地址是1000H（ds相当于栈的指针）</span><br><span class="line"># [0]指偏移地址是0，直接读取到1000H的数据（传送8位数据）</span><br><span class="line">mov al,[0]  </span><br><span class="line"></span><br><span class="line"># 下面这样则是将数据从寄存器送入内存单元（传送16位数据）</span><br><span class="line">mov [0],cx</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131464.png" alt="image-20210308212241728"></p>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="1-mov"><a href="#1-mov" class="headerlink" title="1.mov"></a>1.mov</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131008.png" alt="image-20210309215735409"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将数据b放入ax寄存器中</span><br><span class="line">mov ax, b</span><br><span class="line"># ax寄存器中的内容放入bx寄存器中</span><br><span class="line">mov bx, ax</span><br><span class="line"># 内存单元里的内容存入ax寄存器中（内存单元的地址是根据ds + 偏移地址得到）</span><br><span class="line">mov ax, [0]</span><br><span class="line"># ax的内容存入内存单元中</span><br><span class="line">mov [0], ax</span><br><span class="line"># ax中存入的地址传入ds中</span><br><span class="line">mov ds ax</span><br></pre></td></tr></table></figure>



<h3 id="2-add与sub"><a href="#2-add与sub" class="headerlink" title="2.add与sub"></a>2.add与sub</h3><p>add，sub指令同mov一样，都有两个操作对象</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131551.png" alt="image-20210310192221575"></p>
<p>注意add和sub的对象不能有段寄存器</p>
<h2 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h2><h3 id="1-数据段概念"><a href="#1-数据段概念" class="headerlink" title="1.数据段概念"></a>1.数据段概念</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131137.png" alt="image-20210310192835140"></p>
<h3 id="2-读取数据段"><a href="#2-读取数据段" class="headerlink" title="2.读取数据段"></a>2.读取数据段</h3><p>（1）读取数据段中前三个单元中的字节数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax, 123BH</span><br><span class="line"># 将123BH送入ds，作为数据段的段地址</span><br><span class="line">mov ds, ax</span><br><span class="line"># al存放累加的结果</span><br><span class="line">mov al, 0</span><br><span class="line"># 利用偏移地址读取数据段的单元</span><br><span class="line">add al, [0]</span><br><span class="line">add al, [1]</span><br><span class="line">add al, [2]</span><br></pre></td></tr></table></figure>



<p>（2）累加数据段中前三个单元中的字型数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax, 123BH</span><br><span class="line"># 将123BH送入ds，作为数据段的段地址</span><br><span class="line">mov ds, ax</span><br><span class="line"># ax存放累加的结果</span><br><span class="line">mov ax, 0</span><br><span class="line"># 利用偏移地址读取数据段的单元</span><br><span class="line">add ax, [0] </span><br><span class="line">add ax, [2]</span><br><span class="line">add ax, [4]</span><br></pre></td></tr></table></figure>

<p>注意：一个字型数据占两个单元，所以偏移地址是0，2，4</p>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><p><img src="/2021/03/06/Hardware/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Clinghao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210310200637543.png" alt="image-20210310200637543"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131648.png" alt="image-20210310200840950"></p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="1-CPU提供的栈机制"><a href="#1-CPU提供的栈机制" class="headerlink" title="1.CPU提供的栈机制"></a>1.CPU提供的栈机制</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131193.png" alt="image-20210310201357424"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131423.png" alt="image-20210310201518098"></p>
<h3 id="2-push指令执行过程"><a href="#2-push指令执行过程" class="headerlink" title="2.push指令执行过程"></a>2.push指令执行过程</h3><p>先移动指针再放入数据</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131921.png" alt="image-20210310202248384"></p>
<p>任何时刻ss:sp指向栈顶元素，如果栈的最低部字单元地址位1000:000E，当栈为空时，SP=0100H</p>
<h3 id="3-pop指令执行过程"><a href="#3-pop指令执行过程" class="headerlink" title="3.pop指令执行过程"></a>3.pop指令执行过程</h3><p>先弹出数据再移动指针 </p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131463.png" alt="image-20210310203836597"></p>
<h3 id="4-栈顶超界问题"><a href="#4-栈顶超界问题" class="headerlink" title="4.栈顶超界问题"></a>4.栈顶超界问题</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041131473.png" alt="image-20210310205502760"></p>
<h3 id="5-push和pop指令"><a href="#5-push和pop指令" class="headerlink" title="5.push和pop指令"></a>5.push和pop指令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 通用寄存器</span><br><span class="line"># 将寄存器中的数据入栈</span><br><span class="line">push ax</span><br><span class="line"># 用一个寄存器接受出栈的数据</span><br><span class="line">pop bx</span><br><span class="line"></span><br><span class="line"># 段寄存器</span><br><span class="line"># 将一个段寄存器中的数据入栈</span><br><span class="line">push ds</span><br><span class="line"># 用一个段寄存器接受出栈数据</span><br><span class="line">pop es</span><br><span class="line"></span><br><span class="line"># 内存单元（栈操作都是以字为单位，cpu会从ds中取出段地址加上指令中的偏移地址</span><br><span class="line"># 将一个内存单元的字入栈</span><br><span class="line">push [0]</span><br><span class="line"># 用一个内存字单元接收栈的数据</span><br><span class="line">pop [2]</span><br></pre></td></tr></table></figure>



<h3 id="6-栈的实例"><a href="#6-栈的实例" class="headerlink" title="6.栈的实例"></a>6.栈的实例</h3><p>将10000H~1000FH这段空间当作栈，初始状态为空，将AX，BX，DS的数据入栈</p>
<p>栈中的空间地址为ss:sp（即ss段地址*10加上sp偏移地址）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 设置栈</span><br><span class="line"># 我们要用ss来定义一个栈，因为ss是段寄存器，所以要使用ax进行中转</span><br><span class="line"># 分析储存空间的地址，sp指向第一个字单元时为000EH，则栈的初始段地址为1000H</span><br><span class="line">mov ax, 1000H</span><br><span class="line">mov ss, ax</span><br><span class="line"># 设置栈顶指针，因为栈为空，所以初始化位置要向下移动一位，sp + 2（向下移动加，向上移动减）</span><br><span class="line">mov sp, 0010H</span><br><span class="line"># 填入数据，sp自动减2</span><br><span class="line">push ax</span><br><span class="line">push bx</span><br><span class="line">push ds</span><br></pre></td></tr></table></figure>

<p>   <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132991.png" alt="image-20210310221157701"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132336.png" alt="image-20210310221459106"></p>
<h2 id="栈段"><a href="#栈段" class="headerlink" title="栈段"></a>栈段</h2><p>数据段：ds ，代码段：cs， 栈段：ss（这些仅仅是我们编程时的一种安排）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132272.png" alt="image-20210311092016168"></p>
<h2 id="汇编程序"><a href="#汇编程序" class="headerlink" title="汇编程序"></a>汇编程序</h2><h3 id="1-指令"><a href="#1-指令" class="headerlink" title="1.指令"></a>1.指令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:abc</span><br><span class="line"></span><br><span class="line">abc segment</span><br><span class="line">	mov ax, 2</span><br><span class="line">	add ax, ax</span><br><span class="line">	add ax, ax</span><br><span class="line">	</span><br><span class="line">	mov ax, 4c00H</span><br><span class="line">	int 21H</span><br><span class="line">	</span><br><span class="line">abc ends</span><br><span class="line"></span><br><span class="line">end	</span><br></pre></td></tr></table></figure>

<ul>
<li><p>汇编指令：有对应的机器码的指令，可以被编译成机器指令，最终为CPU所执行</p>
</li>
<li><p>伪指令：没有对应的机器码的指令，最终不被CPU所执行，伪指令是由编译器来执行的指令 </p>
</li>
<li><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132241.png" alt="image-20210314085001805"></p>
</li>
<li><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132432.png" alt="image-20210314085047189"></p>
</li>
<li><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132063.png" alt="image-20210314085131609"></p>
</li>
<li><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132321.png" alt="image-20210314085229218"></p>
</li>
<li><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132720.png" alt="image-20210314085411000"></p>
</li>
</ul>
<h3 id="2-程序"><a href="#2-程序" class="headerlink" title="2.程序"></a>2.程序</h3><p>程序：源代码中最终由计算机执行，处理的指令或数据</p>
<p>程序经编译连接后变成机器码</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132992.png" alt="image-20210314085547911"></p>
<h3 id="3-标号"><a href="#3-标号" class="headerlink" title="3.标号"></a>3.标号</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132602.png" alt="image-20210314085832394"></p>
<h3 id="4-程序返回"><a href="#4-程序返回" class="headerlink" title="4.程序返回"></a>4.程序返回</h3><p>（1）原理</p>
<p>DOS是一个单任务操作系统</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132824.png" alt="image-20210314090132826"></p>
<p>（2）实现</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132975.png" alt="image-20210314090243007"></p>
<p>（3）总结</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132665.png" alt="image-20210314090331563"></p>
<h3 id="5-汇编程序流程图"><a href="#5-汇编程序流程图" class="headerlink" title="5.汇编程序流程图"></a>5.汇编程序流程图</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132892.png" alt="image-20210314094246362"></p>
<h3 id="6-程序执行过程的跟踪"><a href="#6-程序执行过程的跟踪" class="headerlink" title="6.程序执行过程的跟踪"></a>6.程序执行过程的跟踪</h3><p>（1）exe文件程序加载过程</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132122.png" alt="image-20210314100412638"></p>
<p>（2）跟踪方法</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132657.png" alt="image-20210314101510698"></p>
<p>（3）总结</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132997.png" alt="image-20210314101055085"></p>
<h2 id="BX-和loop指令"><a href="#BX-和loop指令" class="headerlink" title="[BX]和loop指令"></a>[BX]和loop指令</h2><h3 id="1-bx"><a href="#1-bx" class="headerlink" title="1.[bx]"></a>1.[bx]</h3><p>（1）编译器环境下的偏移地址</p>
<p>在debug模式下可以用[0]表示偏移地址，编译器是无法读取[0]的，而是把它当作数值，所以我们需要用[bx]来表示偏移地址</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132648.png" alt="image-20210314170113276"></p>
<p>  在编译器中无法识别<code>mov ax, [0]</code>，但是可以加上段地址从而获得准确地址<code>mov ax, ds:[0]</code></p>
<p>（2）指令案例</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132137.png" alt="image-20210314170739068"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132490.png" alt="image-20210314170845019"></p>
<p>（3）案例分析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 建立段寄存器寻址，保证编译器可以找到存放代码的段：codesg</span><br><span class="line">assume cs:codesg</span><br><span class="line">; 定义codesg段,里面存放代码</span><br><span class="line">codesg segment</span><br><span class="line"></span><br><span class="line">; 定义程序</span><br><span class="line">demo: </span><br><span class="line">	; 为ds赋值为2000H</span><br><span class="line">	mov ax, 2000H</span><br><span class="line">	mov ds, ax</span><br><span class="line">	mov bx, 1000H</span><br><span class="line">	; 将地址2000:1000处的值赋给ax</span><br><span class="line">	mov ax, [bx]</span><br><span class="line">	; bx自增1</span><br><span class="line">	inc bx</span><br><span class="line">	inc bx</span><br><span class="line">	; 将ax的值存到2000:1002</span><br><span class="line">	mov [bx], ax</span><br><span class="line">	inc bx</span><br><span class="line">	inc bx</span><br><span class="line">	mov [bx], ax</span><br><span class="line">	inc bx</span><br><span class="line">	; 将ax中的低字节al存入内存单元</span><br><span class="line">	mov [bx], al</span><br><span class="line">	inc bx</span><br><span class="line">	mov [bx], al</span><br><span class="line">	</span><br><span class="line">	; 程序返回</span><br><span class="line">	mov ax, 4C00H</span><br><span class="line">	int 21H</span><br><span class="line"></span><br><span class="line">; 结束段	</span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">; 结束程序</span><br><span class="line">end demo; 	</span><br></pre></td></tr></table></figure>



<h3 id="2-loop指令"><a href="#2-loop指令" class="headerlink" title="2.loop指令"></a>2.loop指令</h3><p>  （1）基础知识</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132608.png" alt="image-20210314190421088"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132987.png" alt="image-20210314211437586"></p>
<p>（2）实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">	mov ax, 2</span><br><span class="line">	mov cx, 11</span><br><span class="line">	</span><br><span class="line">s: add ax, ax</span><br><span class="line">	; 跳到地址s处</span><br><span class="line">	loop s</span><br><span class="line">	</span><br><span class="line">	mov ax，4C00H</span><br><span class="line">	int 21H</span><br><span class="line">	</span><br><span class="line">code ends</span><br><span class="line">end	</span><br></pre></td></tr></table></figure>

<ul>
<li><p>标号</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132783.png" alt="image-20210314191625503"></p>
</li>
<li><p>loop s</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132340.png" alt="image-20210314191714300"></p>
</li>
</ul>
<p>（3）循环调试方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">	</span><br><span class="line">	; 汇编语言的源程序中数值不能以字母开头，所以要在前面加个0</span><br><span class="line">	mov ax, 0ffffH</span><br><span class="line">	mov ds, ax</span><br><span class="line">	mov bx, 6</span><br><span class="line">	mov ax, [bx]</span><br><span class="line">	</span><br><span class="line">	mov dx, 0</span><br><span class="line">	</span><br><span class="line">	mov cx, 3</span><br><span class="line">	</span><br><span class="line">s:	add dx, ax</span><br><span class="line">	loop s	</span><br><span class="line">	</span><br><span class="line">	mov ax, 4c00H</span><br><span class="line">	int 21H</span><br><span class="line">code ends</span><br><span class="line">end	</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;相关命令</span><br><span class="line">-r ;查看寄存器中所存内容</span><br><span class="line">-u 076c:0 ;读取指定地址块的代码（翻译成汇编指令）</span><br><span class="line">-d 076c:0 ;读取指定地址块的16进制数</span><br><span class="line">-t ;执行一条指令，地址为CS:0000</span><br><span class="line">-g 0014 ;执行到某条指令（地址为cs:0014），可以执行到循环结束后的指令</span><br><span class="line">-p ;直接执行完循环</span><br></pre></td></tr></table></figure>



<h3 id="3-loop和-bx-的联合应用"><a href="#3-loop和-bx-的联合应用" class="headerlink" title="3.loop和[bx]的联合应用"></a>3.loop和[bx]的联合应用</h3><p><strong>要求：</strong></p>
<p>计算ffff:0 ~ ffff:b 单元中的数据的和，结果存储在dx中</p>
<p><strong>分析：</strong></p>
<p>（1）存储大小分析</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132531.png" alt="image-20210317192256653"></p>
<p>（2）存储位置分析</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132055.png" alt="image-20210317192341116"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132289.png" alt="image-20210317192452107"></p>
<p>（3）做法总结</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041132474.png" alt="image-20210317192606076"></p>
<img src="/2021/03/06/Hardware/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/Users\linghao\AppData\Roaming\Typora\typora-user-images\image-20210317192816740.png" alt="image-20210317192816740" style="zoom:200%;">



<p>（4）程序案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">	; 设置段地址</span><br><span class="line">	mov ax, 0ffffh</span><br><span class="line">	mov ds, ax</span><br><span class="line">	mov bx, 0</span><br><span class="line">	</span><br><span class="line">	; 设置最终存放寄存器dx</span><br><span class="line">	mov dx, 0</span><br><span class="line">	; 循环次数的寄存器cx</span><br><span class="line">	mov cx, 12</span><br><span class="line">	</span><br><span class="line">	; 循环过程中的al（8位寄存器）充当搬运工</span><br><span class="line">s:	mov al [bx]</span><br><span class="line">	mov ah, 0</span><br><span class="line">	add dx, ax</span><br><span class="line">	inc bx</span><br><span class="line">	loop s</span><br><span class="line">	</span><br><span class="line">	mov ax, 4c00h</span><br><span class="line">	int 21h</span><br><span class="line">	</span><br><span class="line">code ends</span><br><span class="line">end	</span><br></pre></td></tr></table></figure>



<h2 id="多段程序"><a href="#多段程序" class="headerlink" title="多段程序"></a>多段程序</h2><h3 id="1-在代码段中使用数据"><a href="#1-在代码段中使用数据" class="headerlink" title="1.在代码段中使用数据"></a>1.在代码段中使用数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">	; dw定义一段连续的数据</span><br><span class="line">	dw 0123H, 0456H, 0789H, 0defh, 0fedh, 0cbah, 0987h</span><br><span class="line">	; cpu会从start标记出开始存储代码并执行</span><br><span class="line">start:</span><br><span class="line">	mov bx, 0</span><br><span class="line">	mov ax, 0</span><br><span class="line">	mov cx, 8</span><br><span class="line"> s: add ax, cs:[bx]</span><br><span class="line">	add bx,2</span><br><span class="line">	loop s</span><br><span class="line">	</span><br><span class="line">	mov ax, 4c00h</span><br><span class="line">	int 21h</span><br><span class="line">	</span><br><span class="line">code ends</span><br><span class="line">end	start</span><br></pre></td></tr></table></figure>

<p> dw定义一段连续的数据</p>
<p>但是cpu会从start标记出开始存储代码并执行</p>
<h3 id="2-在代码段中使用栈"><a href="#2-在代码段中使用栈" class="headerlink" title="2.在代码段中使用栈"></a>2.在代码段中使用栈</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 利用栈将程序中定义的数据逆序存放</span><br><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">	; dw定义一个字单元，在cs:0~cs:15中存放</span><br><span class="line">	dw 0123h, 0456H, 0789h,0abch, 0defh, 0fedh, 0cbah, 0987h</span><br><span class="line">	; dw定义8个字型数据，把这段空间当作栈来使用</span><br><span class="line">	dw 0,0,0,0,0,0,0,0</span><br><span class="line">	</span><br><span class="line">	start: 	mov ax, cs</span><br><span class="line">		mov ss, ax</span><br><span class="line">		; 栈顶ss:sp 指向 cs:32</span><br><span class="line">		mov sp, 32</span><br><span class="line">		; 初始化偏移地址，设置循环次数</span><br><span class="line">		mov bx, 0</span><br><span class="line">		mov cx, 8</span><br><span class="line">	</span><br><span class="line">	; 循环将数据入栈 </span><br><span class="line">	s:	push cs:[bx]</span><br><span class="line">		add bx, 2</span><br><span class="line">		loop s</span><br><span class="line">		</span><br><span class="line">	mov bx, 0</span><br><span class="line">	mov cx, 8</span><br><span class="line">	</span><br><span class="line">	; 循环将数据出栈，顺序变换</span><br><span class="line">		s0:	pop cs:[bx]</span><br><span class="line">		add bx, 2</span><br><span class="line">		loop s0</span><br><span class="line">		</span><br><span class="line">	mov ax, 4c00h</span><br><span class="line">	int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start	</span><br></pre></td></tr></table></figure>



<h3 id="3-将数据，代码，栈放入不同的段"><a href="#3-将数据，代码，栈放入不同的段" class="headerlink" title="3.将数据，代码，栈放入不同的段"></a>3.将数据，代码，栈放入不同的段</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 分段存储代码，数据，栈</span><br><span class="line">assume cs:code, ds:data, ss:stack</span><br><span class="line"></span><br><span class="line">; 数据段存储</span><br><span class="line">data segment</span><br><span class="line">	; dw定义一个字单元，在cs:0~cs:15中存放</span><br><span class="line">	dw 0123h, 0456H, 0789h,0abch, 0defh, 0fedh, 0cbah, 0987h</span><br><span class="line">data ends	</span><br><span class="line">	</span><br><span class="line">; 栈段存储	</span><br><span class="line">stack segment</span><br><span class="line">	dw 0,0,0,0,0,0,0,0</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; 代码段储存</span><br><span class="line">code segment</span><br><span class="line">	; 标记start，cpu就会将code段内容当作指令执行	</span><br><span class="line">	start: 	mov ax, stack</span><br><span class="line">		; 设置ss指向stack，并设置栈顶ss:sp 指向 stack:16</span><br><span class="line">		mov ss, ax</span><br><span class="line">		mov sp, 16</span><br><span class="line">		</span><br><span class="line">		; ds指向data段</span><br><span class="line">		mov ax, data</span><br><span class="line">		mov ds, ax</span><br><span class="line">		; ds：bx 指向data段第一个单元</span><br><span class="line">		mov bx, 0</span><br><span class="line">		mov cx, 8</span><br><span class="line">	</span><br><span class="line">	; 循环将数据入栈 </span><br><span class="line">	s:	push cs:[bx]</span><br><span class="line">		add bx, 2</span><br><span class="line">		loop s</span><br><span class="line">		</span><br><span class="line">	mov bx, 0</span><br><span class="line">	mov cx, 8</span><br><span class="line">	</span><br><span class="line">	; 循环将数据出栈，顺序变换</span><br><span class="line">		s0:	pop cs:[bx]</span><br><span class="line">		add bx, 2</span><br><span class="line">		loop s0</span><br><span class="line">		</span><br><span class="line">	mov ax, 4c00h</span><br><span class="line">	int 21h</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start	</span><br></pre></td></tr></table></figure>



<h3 id="4-编写，调试多段程序"><a href="#4-编写，调试多段程序" class="headerlink" title="4.编写，调试多段程序"></a>4.编写，调试多段程序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 分段存储代码，数据，栈</span><br><span class="line">assume cs:code, ds:data, ss:stack</span><br><span class="line"></span><br><span class="line">; 数据段存储</span><br><span class="line">data segment</span><br><span class="line">	; dw定义一个字单元，在cs:0~cs:15中存放</span><br><span class="line">	dw 0123h, 0456H, 0789h,0abch, 0defh, 0fedh, 0cbah, 0987h</span><br><span class="line">data ends	</span><br><span class="line">	</span><br><span class="line">; 栈段存储	</span><br><span class="line">stack segment</span><br><span class="line">	dw 0,0,0,0,0,0,0,0</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">			; 将stack链接到ss，确定了栈段的存储空间</span><br><span class="line">start:		mov ax, stack</span><br><span class="line">			mov ss, ax</span><br><span class="line">			; 找到空间后，因为要存16个字节，所以移动栈指针到栈底</span><br><span class="line">			mov sp, 16</span><br><span class="line">			</span><br><span class="line">			; 将data链接到ds，确定了代码段的存储空间</span><br><span class="line">			mov ax, data</span><br><span class="line">			mov ds, ax</span><br><span class="line">			</span><br><span class="line">			; 栈操作，将数据段的数据压入栈</span><br><span class="line">			push ds:[0]</span><br><span class="line">			push ds:[2]</span><br><span class="line">			</span><br><span class="line">			; 弹出栈</span><br><span class="line">			pop ds:[2]</span><br><span class="line">			pop ds:[0]</span><br><span class="line">			</span><br><span class="line">	</span><br><span class="line">			mov ax, 4c00h</span><br><span class="line">			int 21h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<ul>
<li>无论段中要存放多少数据，程序分配的段的空间都是16的倍数（比如我们要在ds中存储2个字，其实际占有空间仍然为16）</li>
<li>程序是从上到下为段编排地址，ss，ds，cs只是人为安排的段地址，程序一视同仁地处理</li>
<li>start可以确定代码段中的指令可以被执行</li>
</ul>
<h2 id="更灵活的定位内存地址"><a href="#更灵活的定位内存地址" class="headerlink" title="更灵活的定位内存地址"></a>更灵活的定位内存地址</h2><h3 id="1-and和or指令"><a href="#1-and和or指令" class="headerlink" title="1.and和or指令"></a>1.and和or指令</h3><p>（1）and（与运算，类乘法）应用</p>
<p>​    使操作对象的相应位设为0</p>
<p>（2）or（或运算，类加法）应用</p>
<p>​    使操作对象的相应位设为0</p>
<h3 id="2-字符数据"><a href="#2-字符数据" class="headerlink" title="2.字符数据"></a>2.字符数据</h3><p>汇编程序中的字符会被编译器转换为相对应的ASCII码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code, ds:data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">	; dw定义字型数据（可存16位），db定义字节型数据（可存8位，每个字符对应的ASCII码就是8位的）</span><br><span class="line">	db &#39;unIt&#39;</span><br><span class="line">	db &#39;foRK&#39;</span><br><span class="line">	</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start: 	mov al, &#39;a&#39;</span><br><span class="line">		mov bx, &#39;b&#39;</span><br><span class="line"></span><br><span class="line">		mov ax, 4c00h</span><br><span class="line">		int 21h</span><br><span class="line">		</span><br><span class="line">code ends</span><br><span class="line">end start		</span><br></pre></td></tr></table></figure>

<p>相关规律：</p>
<ul>
<li>大小写字母的转换：小写字母减20H可以转换为其对应的大写字母</li>
<li>小写字母的的ASCII大于61H，我们可以通过61H来判断大小写字母</li>
<li>一个字母，将第5位置置0，它将变为大写字母（and运算）；将第5位置置1，它将变为小写字母（or运算）</li>
</ul>
<h3 id="3-大小写转换"><a href="#3-大小写转换" class="headerlink" title="3.大小写转换"></a>3.大小写转换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 大小写字母转换</span><br><span class="line">assume cs:code, ds:data</span><br><span class="line"></span><br><span class="line">; 存储字符串</span><br><span class="line">data segment</span><br><span class="line">	</span><br><span class="line">	db &#39;AutoVY&#39;</span><br><span class="line">	db &#39;HelloWorld&#39;</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start: 	mov ax, data</span><br><span class="line">		mov ds, ax</span><br><span class="line">		</span><br><span class="line">		; 将&#39;AutoVY&#39;全部转为大写</span><br><span class="line">		; ds:bx, 指向&quot;AutoVY&quot;第一个字母</span><br><span class="line">		mov bx, 0</span><br><span class="line">		; 因为AutoVY有6个字母，所以要循环6次</span><br><span class="line">		mov cx, 6</span><br><span class="line">		</span><br><span class="line">		; 逐个读取字符</span><br><span class="line">		s0: mov al, [bx]</span><br><span class="line">			; 将字符与11011111b做与运算，将第5位置0，转换为大写字母</span><br><span class="line">			and al, 11011111b</span><br><span class="line">			; 将转换后的ASCII码写回原单元</span><br><span class="line">			mov [bx], al</span><br><span class="line">			</span><br><span class="line">			; bx自增1，指向下个字母</span><br><span class="line">			inc bx</span><br><span class="line">			loop s0</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		; 将&#39;HelloWorld&#39;全部转为小写</span><br><span class="line">		; ds:bx, 指向&quot;HelloWorld&quot;第一个字母</span><br><span class="line">		mov bx, 6</span><br><span class="line">		; 因为HelloWorld有10个字母，所以要循环10次</span><br><span class="line">		mov cx, 10</span><br><span class="line">		</span><br><span class="line">		; 逐个读取字符</span><br><span class="line">		s1: mov al, [bx]</span><br><span class="line">			; 将字符与00100000b做或运算，将第5位置1，转换为小写字母</span><br><span class="line">			or al, 11011111b</span><br><span class="line">			; 将转换后的ASCII码写回原单元</span><br><span class="line">			mov [bx], al</span><br><span class="line">			</span><br><span class="line">			; bx自增1，指向下个字母</span><br><span class="line">			inc bx</span><br><span class="line">			loop s1</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<h3 id="4-bx-idata"><a href="#4-bx-idata" class="headerlink" title="4.[bx+idata]"></a>4.[bx+idata]</h3><p>不改变bx，更加方便获得后续地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 大小写字母转换</span><br><span class="line">assume cs:code, ds:data</span><br><span class="line"></span><br><span class="line">; 存储字符串</span><br><span class="line">data segment</span><br><span class="line">	</span><br><span class="line">	db &#39;AutoVY&#39;</span><br><span class="line">	db &#39;HelloWorld&#39;</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">; 改进程序，以数组的方式处理数据</span><br><span class="line">start: 	mov ax, data</span><br><span class="line">		mov ds, ax</span><br><span class="line">		mov bx, 0</span><br><span class="line">		</span><br><span class="line">		mov cx, 5</span><br><span class="line">		; 定位第一个字符串字符</span><br><span class="line">	s:  mov al, [bx]</span><br><span class="line">		and al, 11011111b</span><br><span class="line">		mov [bx], al</span><br><span class="line">		</span><br><span class="line">		; 定位第二个字符串的字符</span><br><span class="line">		mov al, [6+bx]</span><br><span class="line">		or al, 00100000b</span><br><span class="line">		mov [6+bx], al</span><br><span class="line">		</span><br><span class="line">		inc bx</span><br><span class="line">		loop s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>





<h3 id="5-SI和DI"><a href="#5-SI和DI" class="headerlink" title="5.SI和DI"></a>5.SI和DI</h3><p>SI和DI与bx的功能相似，起到了补充bx的作用，常常用于复制数据的场景</p>
<p>我们用ds:si指向要复制的原始数据，用ds:di指向复制的目的空间</p>
<p><strong>优化前：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 利用SI和DI将字符串复制到其后面的数据区</span><br><span class="line">assume cs:code, ds:data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">	db &#39;hello,world&#39;</span><br><span class="line">	db &#39;...........&#39;</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:  mov ax, data</span><br><span class="line">		mov ds, ax</span><br><span class="line">		; ds:si指向要复制的原始数据，用ds:di指向复制的目的空间</span><br><span class="line">		mov si, 0</span><br><span class="line">		mov di, 16</span><br><span class="line">		mov cx, 8</span><br><span class="line">		</span><br><span class="line">		; 复制</span><br><span class="line">	s:  mov ax, [si]</span><br><span class="line">		; 粘贴</span><br><span class="line">		mov [di], ax</span><br><span class="line">			</span><br><span class="line">		; 移动偏移地址</span><br><span class="line">		add si, 2</span><br><span class="line">		add di, 2</span><br><span class="line">			</span><br><span class="line">		loop s	</span><br><span class="line">		</span><br><span class="line">	mov ax, 4c00h</span><br><span class="line">	int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<p><strong>优化后：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 利用SI和[bx+idata]将字符串复制到其后面的数据区</span><br><span class="line">assume cs:code, ds:data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">	db &#39;hello,world&#39;</span><br><span class="line">	db &#39;...........&#39;</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:  mov ax, data</span><br><span class="line">		mov ds, ax</span><br><span class="line">		; ds:si指向要复制的原始数据</span><br><span class="line">		mov si, 0</span><br><span class="line">		mov cx, 8</span><br><span class="line">		</span><br><span class="line">		; 0[si]即[si+0],复制ds:si中的数据</span><br><span class="line">	s:  mov ax, 0[si]</span><br><span class="line">		; 16[si]即[si+16]，将数据粘贴到ds:(si+16)</span><br><span class="line">		mov 16[si], ax</span><br><span class="line">			</span><br><span class="line">		; 移动偏移地址</span><br><span class="line">		add si, 2</span><br><span class="line">			</span><br><span class="line">		loop s	</span><br><span class="line">		</span><br><span class="line">	mov ax, 4c00h</span><br><span class="line">	int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<h3 id="6-bx-si-和-bx-di"><a href="#6-bx-si-和-bx-di" class="headerlink" title="6.[bx+si]和[bx+di]"></a>6.[bx+si]和[bx+di]</h3><p> [bx+si]的偏移地址为<code>(bx)+(si)</code>，也可以写成<code>[bx][si]</code></p>
<p>[bx+si+idata]的偏移地址为<code>(bx)+(si)+(idata)</code>，也可以写成<code>idata[bx][si]</code></p>
<h2 id="寻址方式应用"><a href="#寻址方式应用" class="headerlink" title="寻址方式应用"></a>寻址方式应用</h2><h3 id="1-bx-si-应用"><a href="#1-bx-si-应用" class="headerlink" title="1.[bx+si]应用"></a>1.[bx+si]应用</h3><p>双重循环需要共用一个CX，造成在内层的时候覆盖了外层循环的循环计数值</p>
<p>所以我们应该每次开始内层循环时，将外层循环的cx数值保存起来，在执行外层loop前，再恢复</p>
<ul>
<li>当循环内，bx寄存器未被使用，我们可以用bx寄存器临时储存外层循环的cx</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 将数据段中每个单词都改写成大写字母</span><br><span class="line">assume cs:code, ds:data</span><br><span class="line"></span><br><span class="line">; 共有四行数据，且每一行占了16个字节</span><br><span class="line">data segment</span><br><span class="line">db &#39;ibm             &#39;</span><br><span class="line">db &#39;dec             &#39;</span><br><span class="line">db &#39;vim             &#39;</span><br><span class="line">db &#39;dos             &#39;</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">; 利用[bx+si]双重循环访问数据（类似于二维数组）</span><br><span class="line">code segment</span><br><span class="line">start:  mov ax, data</span><br><span class="line">		mov ds, ax</span><br><span class="line">		; bx定位行</span><br><span class="line">		mov bx, 0</span><br><span class="line">		</span><br><span class="line">		mov cx, 4</span><br><span class="line">		</span><br><span class="line">		; 用dx临时存放外层循环的值</span><br><span class="line">	s0: mov dx, cx</span><br><span class="line">		; si定位列 </span><br><span class="line">		mov si, 0</span><br><span class="line">		; 覆盖cx的值</span><br><span class="line">		mov cx, 3</span><br><span class="line">		s:	mov al, [bx+si]</span><br><span class="line">			and al, 11011111b</span><br><span class="line">			mov al, [bx+si], al</span><br><span class="line">			</span><br><span class="line">			inc si</span><br><span class="line">		loop s</span><br><span class="line">		</span><br><span class="line">	add bx, 16</span><br><span class="line">	; 在进行外层循环前恢复外层循环的cx值</span><br><span class="line">	mov cx, dx</span><br><span class="line">	loop s0	</span><br><span class="line">	</span><br><span class="line">	mov ax, 4c00h</span><br><span class="line">	int 21h</span><br><span class="line">code ends</span><br><span class="line">end start	</span><br></pre></td></tr></table></figure>



<ul>
<li>cpu的寄存器数量有限容易撞车,我们也可以将暂存的数据放入内容单元中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 将数据段中每个单词都改写成大写字母</span><br><span class="line">assume cs:code, ds:data</span><br><span class="line"></span><br><span class="line">; 共有四行数据，且每一行占了16个字节</span><br><span class="line">data segment</span><br><span class="line">db &#39;ibm             &#39;</span><br><span class="line">db &#39;dec             &#39;</span><br><span class="line">db &#39;vim             &#39;</span><br><span class="line">db &#39;dos             &#39;</span><br><span class="line">; 定义一个字用来保存cx</span><br><span class="line">dw 0</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">; 利用[bx+si]双重循环访问数据（类似于二维数组）</span><br><span class="line">code segment</span><br><span class="line">start:  mov ax, data</span><br><span class="line">		mov ds, ax</span><br><span class="line">		; bx定位行</span><br><span class="line">		mov bx, 0</span><br><span class="line">		</span><br><span class="line">		mov cx, 4</span><br><span class="line">		</span><br><span class="line">		; 将外层循环的cx值保存在data:40H的单元中</span><br><span class="line">	s0: mov ds:[40H], cx</span><br><span class="line">		; si定位列 </span><br><span class="line">		mov si, 0</span><br><span class="line">		; 覆盖cx的值</span><br><span class="line">		mov cx, 3</span><br><span class="line">		s:	mov al, [bx+si]</span><br><span class="line">			and al, 11011111b</span><br><span class="line">			mov al, [bx+si], al</span><br><span class="line">			</span><br><span class="line">			inc si</span><br><span class="line">		loop s</span><br><span class="line">		</span><br><span class="line">	add bx, 16</span><br><span class="line">	; 在进行外层循环前从内存单元中恢复外层循环的cx值</span><br><span class="line">	mov cx, dx</span><br><span class="line">	loop s0	</span><br><span class="line">	</span><br><span class="line">	mov ax, 4c00h</span><br><span class="line">	int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<ul>
<li><p>把暂存的数据单个放入内存单元的时候，我们必须要记住数据放到的单元的位置，这样程序会造成混乱；我们能尝试使用栈来存储这些数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 将数据段中每个单词都改写成大写字母</span><br><span class="line">assume cs:code, ds:data, ss:stack</span><br><span class="line"></span><br><span class="line">; 共有四行数据，且每一行占了16个字节</span><br><span class="line">data segment</span><br><span class="line">db &#39;ibm             &#39;</span><br><span class="line">db &#39;dec             &#39;</span><br><span class="line">db &#39;vim             &#39;</span><br><span class="line">db &#39;dos             &#39;</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">; 定义一个段,用来作为栈段，用来储存一些临时数据</span><br><span class="line">stack segment</span><br><span class="line">	dw 0,0,0,0,0,0,0,0</span><br><span class="line"></span><br><span class="line">stack ends	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; 利用[bx+si]双重循环访问数据（类似于二维数组）</span><br><span class="line">code segment</span><br><span class="line">start:  mov ax, data</span><br><span class="line">		mov ds, ax</span><br><span class="line">		; bx定位行</span><br><span class="line">		mov bx, 0</span><br><span class="line">		</span><br><span class="line">		mov cx, 4</span><br><span class="line">		</span><br><span class="line">		; 外层循环的cx值压入栈中</span><br><span class="line">	s0: push cx</span><br><span class="line">		mov dx, cx</span><br><span class="line">		; si定位列</span><br><span class="line">		mov si, 0</span><br><span class="line">		; 内层循环覆盖cx的值</span><br><span class="line">		mov cx, 3</span><br><span class="line">		s:	mov al, [bx+si]</span><br><span class="line">			and al, 11011111b</span><br><span class="line">			mov al, [bx+si], al</span><br><span class="line">			</span><br><span class="line">			inc si</span><br><span class="line">		loop s</span><br><span class="line">		</span><br><span class="line">	add bx, 16</span><br><span class="line">	; 在进行外层循环前通过弹出栈中数据恢复外层循环的cx值</span><br><span class="line">	pop cx</span><br><span class="line">	loop s0	</span><br><span class="line">	</span><br><span class="line">	mov ax, 4c00h</span><br><span class="line">	int 21h</span><br><span class="line">code ends</span><br><span class="line">end start	</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="1-寻址寄存器"><a href="#1-寻址寄存器" class="headerlink" title="1.寻址寄存器"></a>1.寻址寄存器</h3><ul>
<li>在8086CPU中，只有bx，bp，si，di这四个寄存器可以用于内存单元的寻找</li>
<li>bx，bp，si，di这四个寄存器可以单个出现，或只能以以下四种组合出现：bx和si，bx和di，bp和si，bp和di</li>
<li>bp寄存器，当指令没有显性给出段地址，段地址默认为ss</li>
</ul>
<h3 id="2-数据位置"><a href="#2-数据位置" class="headerlink" title="2.数据位置"></a>2.数据位置</h3><p>（1）数据位置可以在三个位置：cpu内部，内存，端口</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041133833.png" alt="image-20210322162735142"></p>
<p>（2）数据位置的表达</p>
<ul>
<li>立即数（idata）: 如<code>mov ax, 1</code>，执行前在cpu的指令缓存器中</li>
<li>寄存器：如：<code>mov ax, bx</code>执行，数据在寄存器中</li>
<li>段地址（SA）和偏移地址（EA）：指令要处理的数据在内存中</li>
</ul>
<h3 id="3-寻址方式"><a href="#3-寻址方式" class="headerlink" title="3.寻址方式"></a>3.寻址方式</h3><ul>
<li>直接寻址：[idata]</li>
<li>寄存器间接寻址：[bx]</li>
<li>寄存器相对寻址：<code>[bx].idata（用于结构体）</code>；<code>idata[si]（用于数组）</code>；<code>[bx][idata]（用于二维数组）</code></li>
<li>基址变址寻址：<code>[bx][si]（用于二维数组）</code></li>
<li>相对基址变址寻址：<code>idata[bx][si](用于二维数组)</code></li>
</ul>
<p>常用方式（对比C语言）：我们可以用<code>[bx+idata+si]</code>的方式来访问结构体，bx对应整个结构体，idata对应结构体中的某一个数据项，用si定位数据项中的每一个元素</p>
<p>c语言：dec.cp[i] =&gt; 汇编：bx.10h[si]</p>
<h3 id="4-数据长度"><a href="#4-数据长度" class="headerlink" title="4.数据长度"></a>4.数据长度</h3><ul>
<li>通过寄存器指明要处理的数据尺寸，例如：<code>mov ax,1</code>,ax申请了16位的长度</li>
<li>通过操作符<code>x ptr</code>指明内存单元长度，如<code>word ptr</code>，<code>byte ptr</code>，常用于没有寄存器时访问内存单元</li>
<li>指令默认访问数据大小，如<code>push[1000H]</code>，默认处理字单元</li>
</ul>
<h3 id="5-div指令"><a href="#5-div指令" class="headerlink" title="5.div指令"></a>5.div指令</h3><p>（1）基本原则</p>
<p>​    <img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210322195732483.png" alt="image-20210322195732483"></p>
<p>除数（当除数为8位时，当除数为16位时）：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041133674.png" alt="image-20210322200100086"></p>
<p>（2）解析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; (al)&#x3D;(ax)&#x2F;((ds)*16+0)的商</span><br><span class="line">; (ah)&#x3D;(ax)&#x2F;((ds)*16+0)的余数</span><br><span class="line">div byte ptr ds[0]</span><br><span class="line"></span><br><span class="line">; (ax)&#x3D;[(dx)*10000H+(ax)]&#x2F;((es)*16+0)的商</span><br><span class="line">; (dx)&#x3D;[(dx)*10000H+(ax)]&#x2F;((es)*16+0)的余数</span><br><span class="line">div word ptr es:[0]</span><br><span class="line"></span><br><span class="line">; (al)&#x3D;(ax)&#x2F;((ds)*16+(bx)+(si)+8)的商</span><br><span class="line">; (al)&#x3D;(ax)&#x2F;((ds)*16+(bx)+(si)+8)的余数</span><br><span class="line">div byte ptr [bx+si+8]</span><br></pre></td></tr></table></figure>



<p>（3） 案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 计算100001&#x2F;100</span><br><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">	; 被除数100001转换为十六进制为186A1H，超过了16位（ax存不下）</span><br><span class="line">	; 所以我们用dx存储16位溢出的1</span><br><span class="line">	mov dx, 1</span><br><span class="line">	; ax储存16位数据</span><br><span class="line">	mov ax, 86A1H</span><br><span class="line">	</span><br><span class="line">	; 除数100，转换成十六进制为64,虽然8位可以存放</span><br><span class="line">	; 但是按照被除数为32位，除数为16位的规则，我们只能用一整个bx存储</span><br><span class="line">	mov bx,100</span><br><span class="line">	</span><br><span class="line">	; div指令会自动读取被除数(dx)*10000H+(ax)</span><br><span class="line">	; 除以bx</span><br><span class="line">	div bx</span><br><span class="line">	</span><br><span class="line">	; 程序返回</span><br><span class="line">	mov ax, 4c00h</span><br><span class="line">	int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<h3 id="6-伪指令dd"><a href="#6-伪指令dd" class="headerlink" title="6.伪指令dd"></a>6.伪指令dd</h3><p>前面我们用db定义字节型数据（8位），dw定义字型数据（16位）</p>
<p>我们用dd定义dword（dobule word 双字，32位）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; div计算data段中第一个数据除以第二个数据的商放在第三个数据的储存单元中</span><br><span class="line">assume cs:code,ds:data</span><br><span class="line"></span><br><span class="line">; 定义数据段</span><br><span class="line">data segment</span><br><span class="line">	; 被除数，dword类型（32位），需要用dx和ax存储</span><br><span class="line">	dd 100001</span><br><span class="line">	; 除数</span><br><span class="line">	dw 100</span><br><span class="line">	; 商</span><br><span class="line">	dw 0</span><br><span class="line">data ends	</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:	mov ax, data</span><br><span class="line">		mov ds, ax</span><br><span class="line">		</span><br><span class="line">		; 将ds:0（即第一个数据的低16位）中的数据存入ax中</span><br><span class="line">		mov ax, ds:[0]</span><br><span class="line">		</span><br><span class="line">		; 将ds:2（即第一个数据的高16位）中的数据存入dx中</span><br><span class="line">		mov dx, ds:[2]</span><br><span class="line">		</span><br><span class="line">		; 用dx:ax中的32位数据除以ds:4（即第二个数据，16位）中的字型数据</span><br><span class="line">		div word ptr ds:[4]</span><br><span class="line">		</span><br><span class="line">		; 将商存储在ds:6中</span><br><span class="line">		mov ds:[6],ax</span><br><span class="line"></span><br><span class="line">			; 程序返回</span><br><span class="line">		mov ax, 4c00h</span><br><span class="line">		int 21h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<h3 id="7-dup"><a href="#7-dup" class="headerlink" title="7.dup"></a>7.dup</h3><ul>
<li><p>dup是一个操作符</p>
</li>
<li><p>dup会与db，dw，dd等数据定义的伪指令配合使用，用来进行数据的重复</p>
</li>
<li><p>使用案例：<code>db 3 dup(0)</code>定义了三个字节，且值都为0,相当于<code>db 0,0,0</code></p>
</li>
</ul>
<h2 id="转移指令原理"><a href="#转移指令原理" class="headerlink" title="转移指令原理"></a>转移指令原理</h2><p>8086CPU的转移指令有以下几类</p>
<ul>
<li><p>无条件转移指令（jmp）</p>
</li>
<li><p>条件转移指令</p>
</li>
<li><p>循环指令（loop）</p>
</li>
<li><p>过程（相当于高级语言的函数）</p>
</li>
<li><p>中断</p>
</li>
</ul>
<h3 id="1-操作offset"><a href="#1-操作offset" class="headerlink" title="1.操作offset"></a>1.操作offset</h3><p>offset为伪指令，offset取得标号的偏移地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">; 将s的一条指令复制到s0</span><br><span class="line">; ---------------------------</span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">; 复制对象</span><br><span class="line">;-------------------------</span><br><span class="line">s:	mov ax, bx</span><br><span class="line">	; 获得s指令的偏移地址存在si中</span><br><span class="line">	mov si, offset s</span><br><span class="line">	; 获得s0指令的偏移地址存在di中</span><br><span class="line">	mov di, offset s0</span><br><span class="line">	</span><br><span class="line">	; 从cs:[si]中复制出指令内容</span><br><span class="line">	mov ax, cs:[si]</span><br><span class="line">	; 粘贴给cs:[di]</span><br><span class="line">	mov cs:[di], ax</span><br><span class="line"></span><br><span class="line">; 粘贴对象	</span><br><span class="line">;----------------------	</span><br><span class="line">; nop是空指令，一个可占一个字节（因为要复制的指令是两字节的，所以这里要两个nop）</span><br><span class="line">s0: nop</span><br><span class="line">	nop</span><br><span class="line">	</span><br><span class="line">code ends</span><br><span class="line">end s</span><br></pre></td></tr></table></figure>



<h3 id="2-jmp指令"><a href="#2-jmp指令" class="headerlink" title="2.jmp指令"></a>2.jmp指令</h3><p>jmp可以无条件转移，可以只修改IP，也可以同时修改CS和IP</p>
<p>jmp指令参数：</p>
<ul>
<li>转移目标地址</li>
<li>转移的距离</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:	mov ax, 0</span><br><span class="line">		; jmp转移到标记s处</span><br><span class="line">		jmp short s</span><br><span class="line">		add ax, 1</span><br><span class="line">		add ax, ax</span><br><span class="line">        </span><br><span class="line">		s:inc ax</span><br><span class="line">code ends</span><br><span class="line">end start		</span><br><span class="line">		</span><br></pre></td></tr></table></figure>



<p>（1）<strong>jmp short 标号</strong></p>
<ul>
<li>功能为（IP）= （IP） +  8位位移</li>
<li>8位位移= 标号处地址 - jmp指令后第一个字节地址</li>
<li>short表示位移为8位位移</li>
<li>8位位移的范围位-128~127</li>
</ul>
<p>（2）<strong>jmp near ptr 标号</strong></p>
<ul>
<li>(IP) = (IP) + 16</li>
<li>16位位移= 标号处地址 - jmp指令后第一个字节地址</li>
<li>段内近转移</li>
</ul>
<p>（3）<strong>jmp far ptr 标号</strong></p>
<ul>
<li>段间转移，又称远转移</li>
</ul>
<p>（4）jmp 16位寄存器</p>
<p>（5）jmp word ptr 内存单元地址</p>
<ul>
<li>读取内存单元存放的偏移地址，并跳转</li>
<li>段内转移</li>
</ul>
<p>（6）jmp dword ptr 内存单元地址</p>
<ul>
<li><p>内存单元存放两个字，高地址处的字存放目的段地址，低地址处是转移的目标地址</p>
</li>
<li><p>段间转移</p>
</li>
</ul>
<h3 id="3-jcxz指令"><a href="#3-jcxz指令" class="headerlink" title="3.jcxz指令"></a>3.jcxz指令</h3><p>有条件跳转指令，所有有条件跳转指令都是短转移，在对应的机器码中包含转移的位移，而不是目的地址</p>
<p> （1）jcxz指令操作</p>
<ul>
<li>当(cx) = 0 时， （IP）= （IP） +  8位位移</li>
<li>当（cx）!= 0 时，程序向下执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 在内存2000H段查找第一个值为0的字节，找到后将其偏移地址存储在dx中</span><br><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:	mov ax, 2000H</span><br><span class="line">		mov ds, ax</span><br><span class="line">		mov bx,0</span><br><span class="line">		</span><br><span class="line">; 循环查找内存</span><br><span class="line">; ----------------------------</span><br><span class="line">	; cx存放16位（字），但是要求按8位（字节）处理，所以要分高低位分别存储</span><br><span class="line">	s:  mov ch, 0</span><br><span class="line">		mov cl, [bx]</span><br><span class="line">		; jcxz 放在cx寄存器后，一旦cx&#x3D;0，即跳转到ok段</span><br><span class="line">		jcxz ok</span><br><span class="line">		; 不符合条件，bx自增找到下一个单元，利用jmp形成循环</span><br><span class="line">		inc bx</span><br><span class="line">		jmp short s</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">; 查找到后运行</span><br><span class="line">; ------------------	</span><br><span class="line">	ok: mov dx, bx</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">		mov ax,4c00h</span><br><span class="line">		int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start		</span><br></pre></td></tr></table></figure>



<h3 id="4-loop指令"><a href="#4-loop指令" class="headerlink" title="4.loop指令"></a>4.loop指令</h3><p>loop指令也是有条件跳转指令</p>
<p>loop指令操作</p>
<ul>
<li>(cx) = (cx) - 1</li>
<li>当(cx) != 0 ，（IP）= （IP） +  8位位移</li>
<li>当(cx) = 0 时，程序向下运行</li>
</ul>
<h2 id="函数相关指令"><a href="#函数相关指令" class="headerlink" title="函数相关指令"></a>函数相关指令</h2><p>call，ret指令都是转移指令，他们都同时修改IP或同时修改CS和IP</p>
<h3 id="1-ret和retf"><a href="#1-ret和retf" class="headerlink" title="1.ret和retf"></a>1.ret和retf</h3><p>（1）ret指令</p>
<p>​    ret指令使用栈中的数据，修改IP内容，实现近转移</p>
<p>​    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">; 申请栈的空间</span><br><span class="line">stack segment</span><br><span class="line">	</span><br><span class="line">	db 16 dup (0)</span><br><span class="line"></span><br><span class="line">stack ends	</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">	mov ax, 4c00h</span><br><span class="line">	int 21h</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">	; 定位栈段位置</span><br><span class="line">	mov ax, stack</span><br><span class="line">	mov ss, ax</span><br><span class="line">	; 确定栈顶指针</span><br><span class="line">	mov sp, 16</span><br><span class="line">	mov ax, 0</span><br><span class="line">	; 将ax值放入供ret使用</span><br><span class="line">	push ax</span><br><span class="line">	; 这一句好像没什么用</span><br><span class="line">	mov bx, 0</span><br><span class="line">	; 利用栈中的数据，IP修改为0</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<p>（2）retf指令</p>
<p>​    retf指令用栈中的数据，修改CS和IP的内容，从而实现远转移</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">	</span><br><span class="line">	db 16 dup (0)</span><br><span class="line"></span><br><span class="line">stack ends	</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">	mov ax, 4c00h</span><br><span class="line">	int 21h</span><br><span class="line">start:</span><br><span class="line">	mov ax, stack</span><br><span class="line">	mov ss, ax</span><br><span class="line">	mov sp,16</span><br><span class="line">	</span><br><span class="line">	mov ax, 0</span><br><span class="line">	; 这里的栈需要cs，和IP两个参数</span><br><span class="line">	push cs</span><br><span class="line">	push ax</span><br><span class="line">	</span><br><span class="line">	mov bx, 0</span><br><span class="line">	; 利用栈中的值取出cs:ip并跳转</span><br><span class="line">	retf</span><br><span class="line">	</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<h3 id="2-call指令"><a href="#2-call指令" class="headerlink" title="2.call指令"></a>2.call指令</h3><p>call指令操作</p>
<ul>
<li><p>将当前IP或CS和IP压入栈中</p>
</li>
<li><p>jmp转移</p>
</li>
<li><p>16位位移=“标号”处地址 - call指令后的第一个字节的地址</p>
</li>
</ul>
<h3 id="3-call和ret的配合使用"><a href="#3-call和ret的配合使用" class="headerlink" title="3.call和ret的配合使用"></a>3.call和ret的配合使用</h3><p>类似于函数，call调用子程序，执行完后通过ret返回到主程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:	</span><br><span class="line">		mov ax, 1</span><br><span class="line">		; 确定循环次数</span><br><span class="line">		mov cx, 3</span><br><span class="line">		; 这里的call完成了两个操作</span><br><span class="line">		; 将下一个指令的IP压入栈中</span><br><span class="line">		; 跳转到s标记处</span><br><span class="line">		call s</span><br><span class="line">		mov bx, ax</span><br><span class="line">		mov ax, 4c00h</span><br><span class="line">		int 21</span><br><span class="line">	</span><br><span class="line">	; 循环3次相加ax</span><br><span class="line">	s:  add ax, ax</span><br><span class="line">		loop s</span><br><span class="line">		; 循环结束后，从栈中读到IP，然后跳转会mov bx, ax 句 </span><br><span class="line">		ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<p>4.mul指令</p>
<p>mul相乘的两个数，要么是8位的，要么都是16位</p>
<ul>
<li>8位：处理对象放在AL中和8位寄存器或内存字节单元中，结果在AX中</li>
<li>16位：处理对象放在AX中和16位寄存器或内存字单元中，结果DX（高位），AX（低位）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 乘法使用案例，计算100*10000</span><br><span class="line">; 因为乘数中的10000大于了255，所以必须做16位乘法</span><br><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:	</span><br><span class="line">		mov ax, 100</span><br><span class="line">		mov bx, 10000</span><br><span class="line">		; mul会自动读取ax中的值作为其中一个乘数</span><br><span class="line">		mul bx	</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<h3 id="4-批量数据的传递"><a href="#4-批量数据的传递" class="headerlink" title="4.批量数据的传递"></a>4.批量数据的传递</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 利用子程序将data段中的字符串转换为大写</span><br><span class="line">assume cs:code</span><br><span class="line">; 利用内存空间传递批量数据作为参数</span><br><span class="line">data segment</span><br><span class="line">	db &#39;TestText&#39;</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">		mov ax, data</span><br><span class="line">		; ds:si指向字符串（批量数据）所在空间的首地址</span><br><span class="line">		mov ds, ax</span><br><span class="line">		mov si, 0</span><br><span class="line">		</span><br><span class="line">		; 字符串长度决定循环次数</span><br><span class="line">		mov cx, 8</span><br><span class="line">		call change</span><br><span class="line">		</span><br><span class="line">		mov ax, 4c00h</span><br><span class="line">		int 21h</span><br><span class="line">		</span><br><span class="line">change: </span><br><span class="line">		and byte ptr [si], 11011111b</span><br><span class="line">		inc si</span><br><span class="line">		loop change</span><br><span class="line">		ret	</span><br><span class="line">		</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<p>上面这个利用了内存批量传参，使用栈也可以达到同样效果</p>
<h3 id="5-解决除法溢出问题"><a href="#5-解决除法溢出问题" class="headerlink" title="5.解决除法溢出问题"></a>5.解决除法溢出问题</h3><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210326155529547.png" alt="image-20210326155529547"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 解决除法溢出问题，F4240H&#x2F;0AH</span><br><span class="line">assume cs:code, ss:stack</span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">		mov ax, stack</span><br><span class="line">		mov ss, ax</span><br><span class="line">		mov sp, 10h</span><br><span class="line">		; 被除数低16位</span><br><span class="line">		mov ax, 4240h</span><br><span class="line">		; 被除数高16位</span><br><span class="line">		mov dx, 0fh</span><br><span class="line">		; 除数</span><br><span class="line">		mov cx, 0ah</span><br><span class="line">		</span><br><span class="line">		call divdw</span><br><span class="line">		</span><br><span class="line">		mov ax, 4c00h</span><br><span class="line">		int 21h</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">divdw:	; 子程序定义开始</span><br><span class="line"></span><br><span class="line">		; 低16位入栈保存</span><br><span class="line">		push ax</span><br><span class="line">		</span><br><span class="line">		; 高16位放到ax中进行处理</span><br><span class="line">		mov ax, dx</span><br><span class="line">		</span><br><span class="line">		; dx置零</span><br><span class="line">		mov dx, 0</span><br><span class="line">		</span><br><span class="line">		; H&#x2F;N，用高位除以除数</span><br><span class="line">		div cx</span><br><span class="line">		</span><br><span class="line">		; ax,bx的值为H&#x2F;N的商，这时候dx的值为H&#x2F;N的余数</span><br><span class="line">		mov bx, ax</span><br><span class="line">		</span><br><span class="line">		; 从栈中恢复低16位</span><br><span class="line">		pop ax</span><br><span class="line">		</span><br><span class="line">		; L&#x2F;N，dx默认为被除数的高16位，ax为低16位</span><br><span class="line">		div cx</span><br><span class="line">		</span><br><span class="line">		; 将余数放到cx中</span><br><span class="line">		mov cx, dx</span><br><span class="line">		</span><br><span class="line">		; 将结果高16位放到dx中，结果的低16位在ax中</span><br><span class="line">		mov dx, bx</span><br><span class="line">		</span><br><span class="line">		; 子程序结束</span><br><span class="line">		ret</span><br></pre></td></tr></table></figure>



<h2 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h2><p>flag寄存器按位起作用，每一位都有专门的含义</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041133329.png" alt="image-20210327093649958"></p>
<p>在debug中查看标志寄存器</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041133817.png" alt="image-20210327095901036"></p>
<h3 id="1-ZF标志"><a href="#1-ZF标志" class="headerlink" title="1.ZF标志"></a>1.ZF标志</h3><p>ZF为零标志位，记录相关指令执行后的计算结果是否为0</p>
<ul>
<li>结果为0，ZF=1</li>
<li>结果不为0，ZF=0</li>
</ul>
<h3 id="2-PF标志"><a href="#2-PF标志" class="headerlink" title="2.PF标志"></a>2.PF标志</h3><p>PF为奇偶标志位，记录指令执行后，结果的二进制位中1的个数</p>
<ul>
<li>为偶数，PF=1</li>
<li>为奇数，PF=0</li>
</ul>
<h3 id="3-SF标志"><a href="#3-SF标志" class="headerlink" title="3.SF标志"></a>3.SF标志</h3><p>SF为符号标志位，记录相关指令执行后的的结果</p>
<ul>
<li><p>结果为负，SF=1</p>
</li>
<li><p>结果为正，SF=0</p>
</li>
<li><p>SF标志是CPU对有符号数运算结果的一种记录</p>
<p>对同一个二进制数据，计算机可以把它当作无符号数据来运算，也可以当作有符号数据来运算</p>
</li>
</ul>
<p>当CPU在执行add等指令时，实际上就包括了了两层含义（当作有符号处理/当作无符号处理）</p>
<h3 id="4-CF标志"><a href="#4-CF标志" class="headerlink" title="4.CF标志"></a>4.CF标志</h3><p>CF为进位标志位，针对无符号数，记录运算的进位值，也记录借位</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041133267.png" alt="image-20210327095644658"></p>
<h3 id="5-OF标志"><a href="#5-OF标志" class="headerlink" title="5.OF标志"></a>5.OF标志</h3><p>OF为溢出标志位，针对有符号数</p>
<ul>
<li>结果溢出则为1</li>
<li>结果不溢出则为0</li>
<li>在进行有符号数的运算时发生了溢出，那么运算的结果是不正确的</li>
</ul>
<h3 id="6-adc指令"><a href="#6-adc指令" class="headerlink" title="6.adc指令"></a>6.adc指令</h3><p>abc为带进位加法指令，利用CF位上的进位值</p>
<p><code>abc ax, bx</code> 实现功能：(ax) = (ax) + (bx) + CF</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; adc和add指令相配合可以对更大的数据进行加法运算</span><br><span class="line">; add ax, bx</span><br><span class="line">add al, bl</span><br><span class="line">abc ah, bh</span><br></pre></td></tr></table></figure>



<h3 id="7-sbb指令"><a href="#7-sbb指令" class="headerlink" title="7.sbb指令"></a>7.sbb指令</h3><p>sbb为带借位减法指令，利用CF上的借位值</p>
<p><code>sbb ax, bx</code>实现的功能：(ax) = (ax) - (bx) - CF</p>
<h3 id="8-cmp指令"><a href="#8-cmp指令" class="headerlink" title="8.cmp指令"></a>8.cmp指令</h3><p>cmp指令为比较指令，对标志寄存器产生影响。<code>cmp ax, ax</code>实现的功能：做(ax)-(ax)运算，运算结果不保存，仅对flag的相关位产生影响</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041133199.png" alt="image-20210327103947535"></p>
<h3 id="9-检测比较结果的条件转移指令"><a href="#9-检测比较结果的条件转移指令" class="headerlink" title="9.检测比较结果的条件转移指令"></a>9.检测比较结果的条件转移指令</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041133793.png" alt="image-20210327152053172"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041133283.png" alt="image-20210327152141824"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 比较条件语句(cmp和je配合使用)</span><br><span class="line">; (ah)&#x3D;(bh)则(ah)&#x3D;(ah)+(ah),否则(ah)&#x3D;(ah)+(bh)</span><br><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">		; cmp 比较ah和bh</span><br><span class="line">		cmp ah, bh</span><br><span class="line">		; je做相等检测（相当于&#x3D;&#x3D;）,如果符合则跳转到s处</span><br><span class="line">		je s</span><br><span class="line">		; 无跳转正常向下执行</span><br><span class="line">		add ah, bh</span><br><span class="line">		; 跳转以绕开符合条件执行的语句</span><br><span class="line">		jmp short ok</span><br><span class="line">	; 条件符合后执行	</span><br><span class="line">	s:	add ah, ah</span><br><span class="line">	; 跳回到第一句，反复循环</span><br><span class="line">	ok: ret	</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 统计data段中数值为8的字节的个数，用ax保存统计结果</span><br><span class="line">assume ds:data, cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">		</span><br><span class="line">		db 8,11,8,1,8,5,63,38</span><br><span class="line">		</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">		mov ax, data</span><br><span class="line">		mov ds, ax</span><br><span class="line">		; ds:bx指向数据段第一个字节</span><br><span class="line">		mov bx, 0</span><br><span class="line">		</span><br><span class="line">		; 初始化累加器</span><br><span class="line">		mov ax, 0</span><br><span class="line">		; 由多少个数据决定循环次数</span><br><span class="line">		mov cx, 8</span><br><span class="line">	</span><br><span class="line">	    </span><br><span class="line">	s: 	; 和8进行比较</span><br><span class="line">		cmp byte ptr [bx], 8</span><br><span class="line">		; 不相等直接到下一个循环</span><br><span class="line">		jne next</span><br><span class="line">		; 相等ax计数</span><br><span class="line">		inc ax</span><br><span class="line">	</span><br><span class="line">   next:</span><br><span class="line">		; 移动地址，并进行下一次的比较</span><br><span class="line">		inc bx</span><br><span class="line">		loop s</span><br><span class="line">		</span><br><span class="line">		mov ax, 4c00h</span><br><span class="line">		int 21</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code ends		</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<h3 id="10-DF标志和串传送指令"><a href="#10-DF标志和串传送指令" class="headerlink" title="10.DF标志和串传送指令"></a>10.DF标志和串传送指令</h3><p>DF为方向标志位</p>
<ul>
<li><p>DF为0，每次操作后si，di递增</p>
</li>
<li><p>DF为1，每次操作后si，di递减</p>
</li>
</ul>
<p>（1）movsb</p>
<p>以字节为单位传送，将ds:si指向的内存单元中的字节送入es:di中，然后根据标志寄存器DF位的值，将si和di递增或递减</p>
<p>（2）movsw</p>
<p>以字为单位传送，将ds:si指向的内存单元中的字送入es:di中，然后根据标志寄存器DF位的值，将si和di递增或递减2</p>
<p>（3）rep movsb</p>
<p>​    rep根据cx的值，重复执行后面的串传送指令</p>
<p>（4）DF设置指令</p>
<p>​    cld指令：将DF置0</p>
<p>​    std指令：将DF置1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 利用串传输指令，将data段中的第一个字符复制到它后面的空间</span><br><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">	</span><br><span class="line">	db &#39;Welcome to masm!&#39;</span><br><span class="line">	db 16 dup (0)</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">		mov ax, data</span><br><span class="line">		mov ds, ax</span><br><span class="line">		; 设置ds:si指向data:0，读取位置</span><br><span class="line">		mov si, 0</span><br><span class="line">		mov es, ax</span><br><span class="line">		; 设置es:di指向data:16，存储位置</span><br><span class="line">		mov di, 16</span><br><span class="line">		; 设置rep循环16次(总共有16个字符，一个字符一字节)</span><br><span class="line">		mov cx, 16</span><br><span class="line">		</span><br><span class="line">		; 设置DF&#x3D;0，正向传送</span><br><span class="line">		cld</span><br><span class="line">		; 以字节为单位传送，将ds:si指向的内存单元中的字节送入es:di中</span><br><span class="line">		; 并且si，di自增1</span><br><span class="line">		rep movsb</span><br><span class="line">		</span><br><span class="line">		mov ax, 4c00h</span><br><span class="line">		int 21h</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start	</span><br></pre></td></tr></table></figure>



<h3 id="11-pushf和popf"><a href="#11-pushf和popf" class="headerlink" title="11.pushf和popf"></a>11.pushf和popf</h3><p>pushf：将标志寄存器的值压栈</p>
<p>popf：从栈中弹出数据，送入标志寄存器中</p>
<h2 id="内中断"><a href="#内中断" class="headerlink" title="内中断"></a>内中断</h2><h3 id="1-中断基础知识"><a href="#1-中断基础知识" class="headerlink" title="1.中断基础知识"></a>1.中断基础知识</h3><p><strong>中断分类：</strong></p>
<p>外部中断，内部中断，软件中断</p>
<p><strong>中断向量表：</strong></p>
<p>存放着256个中断源所对应的中断处理程序的入口</p>
<p><strong>中断过程：</strong></p>
<ul>
<li>获得中断类型码N</li>
<li>标志寄存器的值入栈（保护标志位）：pushf</li>
<li>设置标志寄存器的TF和IF位为0 ：TF=0，IF=0</li>
<li>CS内容入栈：push CS</li>
<li>IP内容入栈： push IP</li>
<li>从内存地址为中断类型码<em>4和中断类型码\</em>4+2的两个字单元中读取中断程序入口地址设置IP和CS：(IP)=(N*4)，(CS)=(N*4+2)</li>
</ul>
<h3 id="2-中断处理程序"><a href="#2-中断处理程序" class="headerlink" title="2.中断处理程序"></a>2.中断处理程序</h3><p>处理步骤：</p>
<ul>
<li>保存用到的寄存器</li>
<li>处理中断</li>
<li>恢复用到的寄存器</li>
<li>用iret指令返回（恢复保存起来的IP，CS和标志位寄存器）</li>
</ul>
<p>当发生除法溢出时，默认产生0号中断信息，从而引发中断过程</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041133001.png" alt="image-20210327173957758"></p>
<p>修改默认的中断，令中断表的0号指向200:0处，中断程序就变为了200:0处存储的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax, 0</span><br><span class="line">mov es, ax</span><br><span class="line">mov word ptr es:[0*4], 200h</span><br><span class="line">mov word ptr es:[0*4+2], 0</span><br></pre></td></tr></table></figure>



<h3 id="3-单步中断"><a href="#3-单步中断" class="headerlink" title="3.单步中断"></a>3.单步中断</h3><p>单步中断的中断类型码为1，则它引发的中断过程如下：</p>
<ul>
<li>取得中断类型码1</li>
<li>标志寄存器入栈，TF，IF设置为0</li>
<li>CS，IP入栈</li>
<li>(IP)=(1*4)，(CS)=(1*4+2)</li>
</ul>
<p>debug使用T命令时，将TF设置为1，引发单步中断</p>
<h2 id="int中断"><a href="#int中断" class="headerlink" title="int中断"></a>int中断</h2><p>CPU执行int n 指令，相当于调用一个n号中断的中断过程</p>
<h3 id="1-基本案例"><a href="#1-基本案例" class="headerlink" title="1.基本案例"></a>1.基本案例</h3><p>（1）安装程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 安装中断7ch的中断例程</span><br><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">; 通过串传送，将程序安装（复制）到安全的内存中（0:200）</span><br><span class="line">; -----------------------------		</span><br><span class="line">		mov ax,cs</span><br><span class="line">		mov ds, ax</span><br><span class="line">		; 设置ds:si指向源地址</span><br><span class="line">		mov si, offset sqs</span><br><span class="line">		</span><br><span class="line">		mov ax, 0</span><br><span class="line">		mov es, ax</span><br><span class="line">		; 设置es:di指向目的地址</span><br><span class="line">		mov di, 200h</span><br><span class="line">		; 计算出传输长度（循环次数）</span><br><span class="line">		mov cx, offset sqrend - offset sqr</span><br><span class="line">		; 设置传输方向为正</span><br><span class="line">		cld</span><br><span class="line">		; 传输</span><br><span class="line">		rep movsb</span><br><span class="line"></span><br><span class="line">; 设置中断向量表</span><br><span class="line">;-----------------------------------		</span><br><span class="line">		mov ax, 0</span><br><span class="line">		mov es, ax</span><br><span class="line">		mov word ptr es:[7ch*4], 200h</span><br><span class="line">		mov word ptr es:[7ch*4+2], 0</span><br><span class="line">		</span><br><span class="line">		mov ax, 4c00h</span><br><span class="line">		int 21h</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">	; 中断后运行的程序（这里是求a的平方）	</span><br><span class="line">	sqr:</span><br><span class="line">		mul ax</span><br><span class="line">		; 用iret指令返回（恢复保存起来的IP，CS和标志位寄存器），保证中断结束后继续执行原来的主程序</span><br><span class="line">		iret</span><br><span class="line">	</span><br><span class="line">	; 设置一个空指令，方便计算上面程序的长度 		</span><br><span class="line">	sqrend: </span><br><span class="line">		nop</span><br><span class="line">        </span><br><span class="line">code ends</span><br><span class="line">end start        </span><br></pre></td></tr></table></figure>



<p>（2）调用程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 调用中断例程,求2*3256^2</span><br><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">		mov ax, 3456</span><br><span class="line">		; 调用中断7ch的中断例程，计算出ax数据的平方</span><br><span class="line">		int 7ch</span><br><span class="line">		</span><br><span class="line">		; 存放结果，结果乘以2</span><br><span class="line">		add ax, ax</span><br><span class="line">		adc dx, dx</span><br><span class="line">		</span><br><span class="line">		mov ax, 4c00h</span><br><span class="line">		</span><br><span class="line">		int 21h</span><br><span class="line">		</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>CPU可以直接读写3个地方的数据：</p>
<ul>
<li><p>CPU内部寄存器</p>
</li>
<li><p>内存单元</p>
</li>
<li><p>端口</p>
</li>
</ul>
<h3 id="1-端口的读写"><a href="#1-端口的读写" class="headerlink" title="1.端口的读写"></a>1.端口的读写</h3><p>对0-255以内的端口进行读写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">in al, 20h 		;从20h端口读入一个字节</span><br><span class="line">out 20h, al		;从20h端口写入一个字节</span><br></pre></td></tr></table></figure>



<p>对255-65535位的端口进行读写，端口号放在dx中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov dx, 3f8h</span><br><span class="line">in ax, dx		; 读入一个字</span><br><span class="line">out dx, ax		; 写入一个字</span><br></pre></td></tr></table></figure>



<h3 id="2-shl和shr指令"><a href="#2-shl和shr指令" class="headerlink" title="2.shl和shr指令"></a>2.shl和shr指令</h3><p>（1）shl左移指令</p>
<ul>
<li>将一个寄存器或内存单元中的数据向左移位</li>
<li>将最后移出的一位写入CF中</li>
<li>最低位用0补充</li>
<li>如果移动的位数大于1，必须将移动位数放在cl中：<code>shl al, cl</code></li>
<li>将X逻辑左移一位，相当于执行：X=X*2</li>
</ul>
<p>（2）shr右移指令</p>
<ul>
<li>将一个寄存器或内存单元中的数据向右移位</li>
<li>将最后移出的一位写入CF中</li>
<li>最高位用0补充</li>
<li>如果移动的位数大于1，必须将移动位数放在cl中：<code>shr al, cl</code></li>
<li>将X逻辑左移一位，相当于执行：X=X/2</li>
</ul>
<h3 id="3-读取RAM芯片数据"><a href="#3-读取RAM芯片数据" class="headerlink" title="3.读取RAM芯片数据"></a>3.读取RAM芯片数据</h3><p>（1）CMOS RAM芯片与端口</p>
<ul>
<li><p>70h为地址端口，存放要访问的CMOS RAM单元的地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 在70h写入要访问单元的地址</span><br><span class="line">mov al, 8</span><br><span class="line">out 70h, al</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>71h为数据端口，存放从选定的CMOS RAM单元中读取的数据，或者写入到其中的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; 在71h读取指定单元中的数据</span><br><span class="line">in al, 71h</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="外中断"><a href="#外中断" class="headerlink" title="外中断"></a>外中断</h2><p>CPU通过端口和外部设备进行联系</p>
<h3 id="1-外中断信息"><a href="#1-外中断信息" class="headerlink" title="1.外中断信息"></a>1.外中断信息</h3><p>（1）外中断源有两类：</p>
<ul>
<li>可屏蔽中断</li>
<li>不可屏蔽中断</li>
</ul>
<p>（2）当CPU检测到可屏蔽中断信息时</p>
<ul>
<li>如果IF=1，则CPU在执行完当前指令后响应中断，引发中断过程</li>
<li>如果IF=0，则不响应可屏蔽中断</li>
</ul>
<p>（3）设置IF指令</p>
<ul>
<li>sti，用于设置IF=1</li>
<li>cli，用于设置IF=0</li>
</ul>
<h3 id="2-键盘处理过程"><a href="#2-键盘处理过程" class="headerlink" title="2.键盘处理过程"></a>2.键盘处理过程</h3><p>（1）键盘触发中断原理</p>
<ul>
<li>一般按下一个键时产生的扫描码为通码，松开一个键产生的扫描码为断码（扫描码会送入60H）</li>
<li>扫描码长度为一个字节，通码第7位为0，断码第7位为1</li>
<li>断码 = 通码 + 80H</li>
<li>如果是字符键的扫描码，将该扫描码和其对应的字符码送入键盘缓冲区</li>
</ul>
<p>（2）键盘输入的处理过程</p>
<ul>
<li>键盘产生扫描码</li>
<li>扫描码送入60h端口</li>
<li>一旦侦测到60h端口有动静，引发9号中断</li>
<li>CPU执行int 9 中断例程处理键盘输入</li>
</ul>
<h2 id="直接定值表"><a href="#直接定值表" class="headerlink" title="直接定值表"></a>直接定值表</h2><h3 id="1-描述了单位长度的标号"><a href="#1-描述了单位长度的标号" class="headerlink" title="1.描述了单位长度的标号"></a>1.描述了单位长度的标号</h3><p>（1）地址标号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; a,b这里代表地址</span><br><span class="line">a: db 1, 2, 3, 4</span><br><span class="line">b: dw 0</span><br><span class="line"></span><br><span class="line">; a，b的使用，获得偏移地址</span><br><span class="line">mov si, offset a</span><br><span class="line">mov bx, offset b</span><br></pre></td></tr></table></figure>



<p>（2）地址+长度标号（数据标号）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">; a描述了地址code:0，并描述了从这个地址开始，以后的内存单元都是字节单元</span><br><span class="line">a db 1, 2, 3, 4</span><br><span class="line">b dw 0</span><br><span class="line"></span><br><span class="line">; a，b可以代表段中的内存单元</span><br><span class="line">; 相当于mov ax, cs:[4]</span><br><span class="line">mov ax, b</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>硬件开发</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>汇编语言</tag>
        <tag>底层原理</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP|php与mysql</title>
    <url>/2020/05/31/PHP/PHP-php%E4%B8%8Emysql/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041008686.png" alt="image-20210904100806527"></p>
<span id="more"></span>

<h3 id="使用PHP"><a href="#使用PHP" class="headerlink" title="使用PHP"></a>使用PHP</h3><h4 id="了解PHP"><a href="#了解PHP" class="headerlink" title="了解PHP"></a>了解PHP</h4><h5 id="1-php含义"><a href="#1-php含义" class="headerlink" title="1.php含义"></a>1.php含义</h5><p>PHP是一种服务器端脚本语言,它是专门为Web而设计的。在一个HTML页面中,你可以嵌入PHP代码,这些代码在每次页面被访问时执行。PHP代码将在Web服务器中被解释并且生成HTML或访问者看到的其他输出。</p>
<h5 id="2-php优点"><a href="#2-php优点" class="headerlink" title="2.php优点"></a>2.php优点</h5><p>■高性能</p>
<p>■可扩展性</p>
<p>■与许多不同数据库系统的接口</p>
<p>■内置许多常见Web任务所需的函数库</p>
<p>■低成本</p>
<p>■容易学习和使用</p>
<p>■对面向对象的高度支持</p>
<p>■可移植性</p>
<p>■开发方法的灵活性</p>
<p>■源代码可供使用</p>
<p>■技术支持和文档可供使用</p>
<h4 id="案例引入"><a href="#案例引入" class="headerlink" title="案例引入"></a>案例引入</h4><h5 id="1-html表单"><a href="#1-html表单" class="headerlink" title="1.html表单"></a>1.html表单</h5><p>（1）代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;test.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span> =<span class="string">&quot;#cccccc&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span> = <span class="string">&quot;150&quot;</span>&gt;</span>Item<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span> = <span class="string">&quot;15&quot;</span>&gt;</span>Quantity<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Tires<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span> &gt;</span></span><br><span class="line">                              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;tireqty&quot;</span> <span class="attr">size</span> = <span class="string">&quot;3&quot;</span> <span class="attr">maxlength</span> = <span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>oil<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span> &gt;</span></span><br><span class="line">                              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;oilqqty&quot;</span> <span class="attr">size</span> = <span class="string">&quot;3&quot;</span> <span class="attr">maxlength</span> = <span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          </span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Spark<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span> &gt;</span></span><br><span class="line">                              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;sparkqty&quot;</span> <span class="attr">size</span> = <span class="string">&quot;3&quot;</span> <span class="attr">maxlength</span> = <span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;Submit&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">          <span class="tag">&lt;/<span class="name">table</span>&gt;</span>          </span><br><span class="line">          <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）实现效果：</p>
<p>（3）代码解析：</p>
<ul>
<li><p>html表格由<table>标签定义，每个表格均有若干行（由 <tr> 标签定义），每行被分割为若干单元格（由 <td> 标签定义）。字母 td 指表格数据（table data），表格的表头使用 <th> 标签进行定义。</th></td></tr></table></p>
</li>
<li><p>html表单<form>,用于收集用户信息</form></p>
</li>
<li><p>表单元素<input>,根据type属性有不同类型，根据name定义表单域</p>
</li>
</ul>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>定义常规文本输入。</td>
</tr>
<tr>
<td>radio</td>
<td>定义单选按钮输入（选择多个选择之一）</td>
</tr>
<tr>
<td>submit</td>
<td>定义提交按钮（提交表单）</td>
</tr>
</tbody></table>
<ul>
<li>Action属性</li>
</ul>
<p><em>action 属性</em>定义在提交表单时执行的动作。向服务器提交表单的通常做法是使用提交按钮。通常，表单会被提交到 web 服务器上的网页。也可以指定某个服务器脚本来处理表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;test.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>html中表单域的名称可以沿用在php中，并反映输入该域的数据</p>
<ul>
<li>Method 属性</li>
</ul>
<p><em>method 属性<em>规定在提交表单时所用的 HTTP 方法（</em>GET</em> 或 <em>POST</em>）</p>
<h5 id="2-表单处理"><a href="#2-表单处理" class="headerlink" title="2.表单处理"></a>2.表单处理</h5><p>PHP脚本在web服务器上解释执行后，脚本输出代替了脚本本身，变成了纯html，用户的浏览器并不需要理解PHP</p>
<h5 id="3-在html中嵌入php"><a href="#3-在html中嵌入php" class="headerlink" title="3.在html中嵌入php"></a>3.在html中嵌入php</h5><p>（1）PHP标记</p>
<p>常用风格：<code>&lt;?php ?&gt;</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;hello world&lt;/p&gt;&#x27;</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>（2）php注释</p>
<p>多行注释：<code>/*  */</code></p>
<p>单行注释：<code>// 或 #</code></p>
<p>（3）注意php环境的搭建，如果是用phpstudy搭建，执行php文件应放在www文件中并且执行文件的url为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;文件名</span><br></pre></td></tr></table></figure>



<h5 id="4-添加动态内容"><a href="#4-添加动态内容" class="headerlink" title="4.添加动态内容"></a>4.添加动态内容</h5><p>使用服务器端脚本语言的主要原因就是能够为站点用户提供动态内容。这是一个非常重要的应用，因为根据用户需求或随着时间的推进而变化的内容可以使得用户不断地访问这个站点。</p>
<p>案例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">          &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;时间&quot;</span>;</span><br><span class="line">          <span class="keyword">echo</span> date(<span class="string">&#x27;H:i,jS F Y&#x27;</span>);</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">&lt;/h2&gt;       </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>（1）使用date()函数</p>
<ul>
<li>date()函数需要一个传递格式化字符串的变量,字符串的每一个字母都表示日期和时间的一部分</li>
<li>H是24小时格式的小时，i是分钟，如果小时数和分钟数是个位数，需要在前面补0</li>
<li>j是该月的日期，不需要前面的补0</li>
<li>而s表示顺序后缀（在这个例子中，是“th”）</li>
<li>F是月份的全称</li>
</ul>
<h5 id="5-访问表单变量"><a href="#5-访问表单变量" class="headerlink" title="5.访问表单变量"></a>5.访问表单变量</h5><p>（1）不同风格的表单变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$tireqty</span>						<span class="comment">// short style</span></span><br><span class="line"><span class="variable">$_POST</span>[<span class="string">&#x27;tireqty&#x27;</span>]				<span class="comment">//medium style</span></span><br><span class="line"><span class="variable">$HTTP_POST_VARSt</span>[<span class="string">&#x27;tireqty&#x27;</span>]	    <span class="comment">//1ong style</span></span><br></pre></td></tr></table></figure>

<p>注意：php变量一定要以$开头</p>
<p>（2）不同风格的比较：</p>
<ul>
<li><strong>简短风格：</strong>使用方便，但也容易造成安全问题，只推荐新手使用。脚本的变量名和表单域名是一样的，如同向一个函数传递参数，不需要再声明变量</li>
<li><strong>中等风格：</strong>开发中推荐使用，不会产生安全问题。中等风格涉及了从$_POST、$_GET或$_REQUEST数组之一检索变量。$_GET或$_POST数组之一都可以保存表单变量的细节。通过POST或GET方法及其组合方式提交的所有数据都可以通过$_REQUEST数组获得。这些数组被称为超级全局变量</li>
<li><strong>冗长风格：</strong>已经被弃用</li>
</ul>
<p>（3）案例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>     </span><br><span class="line">          <span class="variable">$tireqty</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;tireqty&#x27;</span>];</span><br><span class="line">          <span class="variable">$oilqty</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;oilqty&#x27;</span>];</span><br><span class="line">          <span class="variable">$sparkqty</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;sparkqty&#x27;</span>];</span><br><span class="line"></span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&#x27;&lt;p&gt;show&lt;/p&gt;&#x27;</span>;</span><br><span class="line">          <span class="keyword">echo</span> <span class="variable">$tireqty</span>. <span class="string">&#x27;tires&lt;br /&gt;&#x27;</span>;</span><br><span class="line">          <span class="keyword">echo</span> <span class="variable">$oilqty</span>. <span class="string">&#x27;oil&lt;br /&gt;&#x27;</span>;</span><br><span class="line">          <span class="keyword">echo</span> <span class="variable">$sparkqty</span>. <span class="string">&#x27;spark plugs&lt;br /&gt;&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>把表单域传来的值赋值到新的变量上。</p>
<h4 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h4><h5 id="1-变量类型"><a href="#1-变量类型" class="headerlink" title="1.变量类型"></a>1.变量类型</h5><p>php的数据类型由赋给变量的值决定,当然我们也可以强制类型转换</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ test1 = <span class="number">1</span>;</span><br><span class="line">$ test2 = (<span class="keyword">float</span>)<span class="variable">$test2</span>;</span><br></pre></td></tr></table></figure>

<p>test1是整数型，而test2是浮点数型</p>
<h5 id="2-常量的使用"><a href="#2-常量的使用" class="headerlink" title="2.常量的使用"></a>2.常量的使用</h5><p>变量可变，常量固定不变，一般使用define函数定义常量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">define(<span class="string">&#x27;Test1&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">define(<span class="string">&#x27;Test2&#x27;</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure>

<p>引用常量时，不需要$号，所以常用大写来区分常量和变量</p>
<p>除了自定义的常量外，还有php预定义的许多常量，我们可以通过<code>phpinfo()</code>函数查看</p>
<h5 id="3-变量作用域"><a href="#3-变量作用域" class="headerlink" title="3.变量作用域"></a>3.变量作用域</h5><h4 id="php特供操作符"><a href="#php特供操作符" class="headerlink" title="php特供操作符"></a>php特供操作符</h4><h5 id="1-字符串操作符"><a href="#1-字符串操作符" class="headerlink" title="1.字符串操作符"></a>1.字符串操作符</h5><p>点操作符将两个字符串连在一起</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&quot;BOb&#x27;s&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&quot;home&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$a</span>.<span class="variable">$b</span>;</span><br></pre></td></tr></table></figure>



<h5 id="2-执行操作符"><a href="#2-执行操作符" class="headerlink" title="2.执行操作符"></a>2.执行操作符</h5><p>php将````之间的命令当作服务器端的命令行来执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$out</span> = `dir c:`;</span><br><span class="line"><span class="keyword">echo</span> `&lt;pre&gt; `.<span class="variable">$out</span>.` &lt;/pre&gt; `</span><br></pre></td></tr></table></figure>



<h5 id="3-数组操作符"><a href="#3-数组操作符" class="headerlink" title="3.数组操作符"></a>3.数组操作符</h5><p>php可以直接操作一整个数组，如比较联合比较等</p>
<h5 id="4-类型操作符"><a href="#4-类型操作符" class="headerlink" title="4.类型操作符"></a>4.类型操作符</h5><p><code>instanceof</code>操作符允许检查一个对象是否是特定类的实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">class test();</span><br><span class="line"><span class="variable">$mytest</span> = <span class="keyword">new</span> test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$mytest</span> <span class="keyword">instanceof</span> test)</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;yes&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h4 id="可变函数测试"><a href="#可变函数测试" class="headerlink" title="可变函数测试"></a>可变函数测试</h4><p>可变函数用于测试和操作变量，比较实用的用法是可以测试用户输入的表单数据是否正确</p>
<h5 id="1-测试和设置变量类型"><a href="#1-测试和设置变量类型" class="headerlink" title="1.测试和设置变量类型"></a>1.测试和设置变量类型</h5><p>（1）获取和设置变量类型</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">56</span>;</span><br><span class="line"><span class="keyword">echo</span> gettype(<span class="variable">$a</span>).<span class="string">&#x27;&lt;br/&gt;&#x27;</span>; <span class="comment">//获取a的变量类型</span></span><br><span class="line">settype(<span class="variable">$a</span>, <span class="string">&#x27;double&#x27;</span>);    <span class="comment">//将a的变量类型重置为double型</span></span><br></pre></td></tr></table></figure>



<p>（2）变量类型测试</p>
<table>
<thead>
<tr>
<th>测试函数名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>is_ array()</td>
<td>检查变量是否是数组</td>
</tr>
<tr>
<td>is_float()</td>
<td>检查变量是否为浮点数</td>
</tr>
<tr>
<td>is_int()</td>
<td>检查变量是否为整数</td>
</tr>
<tr>
<td>is_ string()</td>
<td>检查变量是否是字符串</td>
</tr>
<tr>
<td>is_ object()</td>
<td>检查变量是否是一个对象</td>
</tr>
<tr>
<td>is_null()</td>
<td>检查变量是否是为null</td>
</tr>
</tbody></table>
<p>（3）变量状态测试</p>
<ul>
<li>isset() : 测试一个变量是否存在</li>
<li>unset() :销毁一个变量</li>
<li>empty() : 测试一个变量是否存在，以及它的值是否为非空和非零</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;isset($test):&#x27;</span>.<span class="keyword">isset</span>(<span class="variable">$test</span>). <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;empty($test):&#x27;</span>.<span class="keyword">empty</span>(<span class="variable">$test</span>). <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>但$test存在时：</strong></p>
<p>isset()函数无论表单域填入什么或空白，都会返回1；</p>
<p>empty()函数但填入0或空值，返回0；</p>
<p><strong>但$test不存在时：</strong></p>
<p>isset()函数返回0；</p>
<p>empty()函数返回1；</p>
<h4 id="switch语句的使用"><a href="#switch语句的使用" class="headerlink" title="switch语句的使用"></a>switch语句的使用</h4><h5 id="1-html选择器"><a href="#1-html选择器" class="headerlink" title="1.html选择器"></a>1.html选择器</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span>选择一个项<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span> = <span class="string">&quot;find&quot;</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> = <span class="string">&quot;a&quot;</span>&gt;</span> 选项1 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> = <span class="string">&quot;b&quot;</span>&gt;</span> 选项2 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> = <span class="string">&quot;c&quot;</span>&gt;</span> 选项3 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> = <span class="string">&quot;d&quot;</span>&gt;</span> 选项4 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">td</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<p>select是一个html选择器表单标签，变量名为find，选项值有a，b，c，d，以下使用php的switch语句来处理这些数据（当然if语句也可）</p>
<h5 id="2-switch语句与选择器的交互"><a href="#2-switch语句与选择器的交互" class="headerlink" title="2.switch语句与选择器的交互"></a>2.switch语句与选择器的交互</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(<span class="variable">$find</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;a&quot;</span> :<span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;test1&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;b&quot;</span> :<span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;test2&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;c&quot;</span> :<span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;test3&quot;</span>; <span class="keyword">break</span>;    </span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;d&quot;</span> :<span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;test4&quot;</span>; <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>值得注意的是switch语句和if语句不同，switch语句实质是比较并跳转到符合条件的语句，并向下执行直到遇到break</p>
<h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><h5 id="1-php循环用法"><a href="#1-php循环用法" class="headerlink" title="1.php循环用法"></a>1.php循环用法</h5><p>（1）简化重复有规律的html代码，在wordpress主题开发中很常见的用法</p>
<p>（2）动态创建变量名称，依次访问每一个表单域</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="variable">$numnames</span>; <span class="variable">$i</span>++)(</span><br><span class="line"><span class="variable">$temp</span>=<span class="string">&quot;names<span class="subst">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$temp</span>.<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h4 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h4><h5 id="1-一般形式"><a href="#1-一般形式" class="headerlink" title="1.一般形式"></a>1.一般形式</h5><ul>
<li>break：终止一个循环</li>
<li>continue ：进行下一次循环</li>
<li>exit：结束php语句</li>
</ul>
<h5 id="2-可替换的控制结构语法"><a href="#2-可替换的控制结构语法" class="headerlink" title="2.可替换的控制结构语法"></a>2.可替换的控制结构语法</h5><p>如endif，endswitch， endwhile，endforeach</p>
<p>（1）一般写法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$test</span> == <span class="number">0</span>)&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（2）使用替代写法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$test</span> == <span class="number">0</span>):</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line"><span class="keyword">endif</span>;</span><br></pre></td></tr></table></figure>



<h3 id="数据存储和检索"><a href="#数据存储和检索" class="headerlink" title="数据存储和检索"></a>数据存储和检索</h3><h4 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h4><p>（1）将数据写入一个文件,有以下3步操作</p>
<ul>
<li>打开这个文件。如果文件不存在,需要先创建它。</li>
<li>将数据写入这个文件。</li>
<li>关闭这个文件</li>
</ul>
<p>（2）从一个文件中读出数据,也有以下3步操作</p>
<ul>
<li>打开这个文件。如果这个文件不能打开(例如,文件不存在),就应该意识到这一点并且正确地退出。</li>
<li>从文件中读出数据</li>
<li>关闭这个文件。</li>
</ul>
<h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p>在php中打开一个文件，可以使用fopen()函数，打开一个文件时，还需要指定文件模式（如何使用它）</p>
<h5 id="1-选择文件模式"><a href="#1-选择文件模式" class="headerlink" title="1.选择文件模式"></a>1.选择文件模式</h5><p>所谓文件模式，即用于决定如何处理来自其他人或脚本的请求，以及一种用来检查是否有权访问特定文件的方法</p>
<p>当你打开一个文件，你可以对它有三种操作选择：</p>
<ul>
<li>打开文件只是为了读它的内容（只读） /  写些内容（只写）/又读又写（读和写）</li>
<li>写一个文件时，你可以选择覆盖所有文件内容 / 追加到文件末尾</li>
<li>如果在某些区分二进制和纯文本的系统上写文件，还需要指定采用方式</li>
</ul>
<h5 id="2-fopen-打开文件"><a href="#2-fopen-打开文件" class="headerlink" title="2.fopen()打开文件"></a>2.fopen()打开文件</h5><p>（1）案例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$DOCUMENT_ROOT</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;$DOCUMENT_ROOT&#x27;</span>];</span><br><span class="line"><span class="variable">$fp</span> = fopen(<span class="string">&quot;<span class="subst">$DOCUMENT_ROOT</span>/../orders/orders.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>以下对fopen()所需参数进行解析</p>
<p>（2）文件路径参数</p>
<ul>
<li><code>$_SERVER[&#39;$DOCUMENT_ROOT&#39;]</code>是php的内置函数，使路径指向web服务器文档树的根</li>
<li>..表示文档根目录的父目录，描述了一个相对文档根目录文件的文件系统位置，表示相对路径</li>
<li>完善父目录下的路径</li>
</ul>
<p>目录的间隔号在windows平台还可以使用反斜线，但这也意味着代码只能在windows上运行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$fp</span> = fopen(<span class="string">&quot;<span class="subst">$DOCUMENT_ROOT</span>\\..\\orders\\orders.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>（3）文件模式</p>
<p>之前也有介绍过文件模式基本内容，网上也有很多相关表格整理，这里不多写</p>
<p>该图截自PHP与MySQL开发一书</p>
<p>一般采用的文件模式，都是追加模式（以及推荐二进制模式）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$fp</span> = fopen(<span class="string">&quot;<span class="subst">$DOCUMENT_ROOT</span>\\..\\orders\\orders.txt&quot;</span>, <span class="string">&#x27;ab&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h5 id="3-通过FTP或HTTP打开文件"><a href="#3-通过FTP或HTTP打开文件" class="headerlink" title="3.通过FTP或HTTP打开文件"></a>3.通过FTP或HTTP打开文件</h5><p>php除了可以打开一个本地文件进行操作外，还可以通过fopen()函数通过FTP或HTTP协议打开文件</p>
<ul>
<li><p>在php.ini文件中,可以通过关闭allow_url_ fopen指令来禁用这个功能。如果在使用该函数打开一个远程文件时遇到问题,请检查php.ini文件</p>
</li>
<li><p>如果使用的文件名是以ftp://开始的， fopen()函数将建立一个连接到指定服务器的被动模式，并返回一个指向文件开始的指针</p>
</li>
<li><p>如果使用的文件名是以http://开始的fopen()函数将建立一个到指定服务器的HTTP连接，并返回一个指向HTTP响应的指针</p>
</li>
</ul>
<h5 id="4-文件打开错误处理"><a href="#4-文件打开错误处理" class="headerlink" title="4.文件打开错误处理"></a>4.文件打开错误处理</h5><p>文件打开错误，往往是因为用户权限不足，这时候就要抑制php本身的报错，构造让用户感到友好的错误信息</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@ <span class="variable">$fp</span> = fopen(<span class="string">&quot;<span class="subst">$DOCUMENT_ROOT</span>\\..\\orders\\orders.txt&quot;</span>, <span class="string">&#x27;ab&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$fp</span>)&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;&lt;strong&gt;略略略，就不给你看&lt;/p&gt;&lt;/strong&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><h5 id="1-fwrite的参数"><a href="#1-fwrite的参数" class="headerlink" title="1.fwrite的参数"></a>1.fwrite的参数</h5><p>php写文件相对简单，一般使用fwrite()函数，使用案例如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">fwrite(<span class="variable">$fp</span>, <span class="variable">$strings</span>);</span><br></pre></td></tr></table></figure>

<p>这个函数告诉php将<code>$strings</code>的字符串写入<code>$fp</code>指向的文件中。</p>
<p>此外还有一个可选的参数length是最大写入字符数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">fwrite(<span class="variable">$fp</span>, <span class="variable">$strings</span>, strlen(strings));</span><br></pre></td></tr></table></figure>

<p>php内置的strlen()函数可获得字符串长度，这里其实是多此一举的，一般情况写入字符串会一直写到字符串末尾</p>
<h4 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">fclose(<span class="variable">$fp</span>);</span><br></pre></td></tr></table></figure>

<p>如果该文件被成功关闭，函数就会返回一个true值，反之则返回false</p>
<h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><p>读文件这个操作实际上要实现：打开文件，读文件，关闭文件这些流程</p>
<ul>
<li>以只读模式打开文件<code>$fp = fopen(&quot;$DOCUMENT_ROOT/../orders/orders.txt&quot;, &#39;rb&#39;);</code></li>
<li>读取文件内容直到末尾，用<code>while(!feof($fp))</code>，feof函数表示文件末尾，但文件指针指向文件末尾时，它将返回true</li>
<li>每次读取一行数据，可以使用fgets()函数：<code>$order = fgets($fp, 999);</code>fgets()函数将一直读到\n符或结束符EOF；此外fgets()函数的一个变体fgetss()也非常实用，它可以过滤php和html标记，也可以在参数中额外添加其他任何特殊标记</li>
<li>读取整个文件，readfile(),fpassthru(),file()</li>
</ul>
<h4 id="更好的数据存储方式"><a href="#更好的数据存储方式" class="headerlink" title="更好的数据存储方式"></a>更好的数据存储方式</h4><p>相对于普通文件存储数据，更加有效主流的方式是使用数据库管理系统（DBMS),而比较常见的是MySql数据库（RDBMS）,其有以下优点</p>
<ul>
<li>RDBMS提供了比普通文件更快的数据访问</li>
<li>RDBMS可以很容易地查找并检索满足特定条件的数据集合</li>
<li>RDBMS具有内置的处理并发访问的机制</li>
<li>RDBMS可以随机访问数据</li>
<li>RDBMS具有内置的权限系统</li>
</ul>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="数字索引数组"><a href="#数字索引数组" class="headerlink" title="数字索引数组"></a>数字索引数组</h4><h5 id="1-数组初始化"><a href="#1-数组初始化" class="headerlink" title="1.数组初始化"></a>1.数组初始化</h5><p>实际上php的数组和其他变量一样，它并不需要预先初始和声明，第一次使用时就会自动创建，而且数组大小会根据元素多少而动态变化（这和其他编程语言有很大的区别）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$products</span> = <span class="keyword">array</span>(<span class="string">&#x27;Tires&#x27;</span>, <span class="string">&#x27;oil&#x27;</span>, <span class="string">&#x27;Spark&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>array()实际上是语言结构而不是函数</p>
<p>还有php内置的数字数组和字母数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$odds</span> = range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>); <span class="comment">//1~10，间隔为2</span></span><br><span class="line"><span class="variable">$letters</span> = range(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;z&#x27;</span>) <span class="comment">//a~z数组</span></span><br></pre></td></tr></table></figure>



<h5 id="2-访问数组内容"><a href="#2-访问数组内容" class="headerlink" title="2.访问数组内容"></a>2.访问数组内容</h5><p>（1）访问方法</p>
<p>非常经典地采用数字下标的索引法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span>  <span class="string">&quot;<span class="subst">$products</span>[0] <span class="subst">$products</span>[1] <span class="subst">$products</span>[2] <span class="subst">$products</span>[3] &quot;</span></span><br></pre></td></tr></table></figure>

<p>值得注意的是，php的变量和数组一般都要放在双引号外，即便php有很强的字符串解析能力</p>
<p>（2）循环访问</p>
<p>经典访问法：for循环</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">3</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$products</span>[<span class="variable">$i</span>].<span class="string">&quot;&quot;</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>php内置专门访问数组的方法：foreach</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$products</span> <span class="keyword">as</span> <span class="variable">$current</span>)&#123;</span><br><span class="line"></span><br><span class="line">	exho <span class="variable">$current</span>.<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h4><h5 id="1-数组初始化-1"><a href="#1-数组初始化-1" class="headerlink" title="1.数组初始化"></a>1.数组初始化</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$prices</span> = <span class="keyword">array</span>(<span class="string">&#x27;Tires&#x27;</span> =&gt; <span class="number">100</span>, <span class="string">&#x27;oil&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;Spark&#x27;</span> =&gt; <span class="number">4</span>);</span><br></pre></td></tr></table></figure>



<h5 id="2-访问数组元素"><a href="#2-访问数组元素" class="headerlink" title="2.访问数组元素"></a>2.访问数组元素</h5><p>（1）访问的下标，由默认的数字变成对应关联字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$prices</span>[<span class="string">&#x27;Tires&#x27;</span>] <span class="comment">//100</span></span><br></pre></td></tr></table></figure>



<p>（2）循环访问</p>
<p>由于关联数字的索引不是数字，当然是不能使用for循环的计算器来操作，但是我们可以用<code>foreach()</code>或<code>list()</code>或<code>each()</code></p>
<p><strong>foreach方法</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$prices</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$key</span>.<span class="string">&quot; - &quot;</span> .<span class="variable">$value</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$key指代了索引，$value指代了关联值</p>
<p><strong>each方法</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="variable">$element</span> = each(<span class="variable">$prices</span>))&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$element</span>[<span class="string">&#x27;key&#x27;</span>]. <span class="string">&quot;-&quot;</span>.<span class="variable">$element</span>[<span class="string">&#x27;value&#x27;</span>].<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>each函数会返回数组当前元素，并将下一个元素作为当前元素，直到达到数组末尾</p>
<p><strong>list方法</strong></p>
<p>list是比较常用的方法，因为它更容易阅读</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">reset(<span class="variable">$prices</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">list</span>(<span class="variable">$product</span>, <span class="variable">$price</span>) = each(<span class="variable">$prices</span>))&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$product</span> - <span class="subst">$price</span> &lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>reset()将元素设置到数组开始，允许再次遍历数组</li>
<li>each()将$prices数组中提出当前元素作为数组返回，并指向下一个元素</li>
<li>list()将从each()返回的数组变成名为$product，$price的新变量</li>
</ul>
<h4 id="数组操作符"><a href="#数组操作符" class="headerlink" title="数组操作符"></a>数组操作符</h4><p>php特供数组操作，依旧不予整理，直接贴书里的图</p>
<h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><h5 id="1-普通一维数组排序"><a href="#1-普通一维数组排序" class="headerlink" title="1.普通一维数组排序"></a>1.普通一维数组排序</h5><p>（1）按字母升序来排序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$products</span> = <span class="keyword">array</span>(<span class="string">&#x27;Tires&#x27;</span>, <span class="string">&#x27;oil&#x27;</span>, <span class="string">&#x27;Spark&#x27;</span>);</span><br><span class="line">sort(<span class="variable">$products</span>);</span><br></pre></td></tr></table></figure>

<p>值得注意的是，sort()函数的排序区分大小写</p>
<p>（2）按数字升序来排序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$prices</span> = <span class="keyword">array</span>(<span class="number">100</span>, <span class="number">10</span>, <span class="number">4</span>);</span><br><span class="line">sort(<span class="variable">$prices</span>);</span><br></pre></td></tr></table></figure>



<p>（3）指定排序类型</p>
<p>sort()函数还有一个可选参数用于指定排序类型</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">SORT_REGULAR  <span class="comment">//默认</span></span><br><span class="line">SORT_NUMERIC  <span class="comment">//数字类型</span></span><br><span class="line">SORT_STRING   <span class="comment">//字符串类型</span></span><br></pre></td></tr></table></figure>



<h5 id="2-关联数组排序"><a href="#2-关联数组排序" class="headerlink" title="2.关联数组排序"></a>2.关联数组排序</h5><p>（1）按值排序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$prices</span> = <span class="keyword">array</span>(<span class="string">&#x27;Tires&#x27;</span> =&gt; <span class="number">100</span>, <span class="string">&#x27;oil&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;Spark&#x27;</span> =&gt; <span class="number">4</span>);</span><br><span class="line">asort(<span class="variable">$prices</span>);</span><br></pre></td></tr></table></figure>



<p>（2）按关键字排序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$prices</span> = <span class="keyword">array</span>(<span class="string">&#x27;Tires&#x27;</span> =&gt; <span class="number">100</span>, <span class="string">&#x27;oil&#x27;</span> =&gt; <span class="number">10</span>, <span class="string">&#x27;Spark&#x27;</span> =&gt; <span class="number">4</span>);</span><br><span class="line">ksort(<span class="variable">$prices</span>);</span><br></pre></td></tr></table></figure>



<h5 id="3-反向排序"><a href="#3-反向排序" class="headerlink" title="3.反向排序"></a>3.反向排序</h5><p>在之前提到的函数中加个‘“r”：rsort(), arsort(), krsort()</p>
<h4 id="二维数组排序"><a href="#二维数组排序" class="headerlink" title="二维数组排序"></a>二维数组排序</h4><p>需要自定义一个排序函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params"><span class="variable">$x</span>, <span class="variable">$y</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$x</span>[<span class="number">1</span>] == <span class="variable">$y</span>[<span class="number">1</span>])&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$x</span>[<span class="number">1</span>] &lt; <span class="variable">$y</span>[<span class="number">1</span>])&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usort(<span class="variable">$products</span>, <span class="string">&#x27;compare&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>索引为1，所以按字母排序</p>
<p>如果要反向排序时，就要交换+1，-1</p>
<h4 id="其他实用的数组函数"><a href="#其他实用的数组函数" class="headerlink" title="其他实用的数组函数"></a>其他实用的数组函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>shuffle()</td>
<td>使一个数组的元素随机排列</td>
</tr>
<tr>
<td>array_reverse()</td>
<td>返回一个顺序相反的数组</td>
</tr>
<tr>
<td>each(),current(),reset(),end(),next(),pos(),prev()</td>
<td>用于浏览数组的函数</td>
</tr>
<tr>
<td>array_walk()</td>
<td>以相同方式使用或修改数组中每一个元素</td>
</tr>
<tr>
<td>count(),sizeof()</td>
<td>统计数组元素的个数</td>
</tr>
<tr>
<td>array_count_values()</td>
<td>统计特定值在数组中出现的频率，返回一个以元素作为关键字，频率作为值得关联数组</td>
</tr>
<tr>
<td>extract()</td>
<td>将数组转换为标量变量，即让key = value</td>
</tr>
</tbody></table>
<h3 id="字符串操作与正则表达式"><a href="#字符串操作与正则表达式" class="headerlink" title="字符串操作与正则表达式"></a>字符串操作与正则表达式</h3><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><p>通常我们会对用户输入的字符串（来自于html的表单）进行整理</p>
<h5 id="1-字符串的整理"><a href="#1-字符串的整理" class="headerlink" title="1.字符串的整理"></a>1.字符串的整理</h5><p>实现目标：清理字符串多余的空格</p>
<p>实现方法：</p>
<p>（1）trim()函数去除字符串开始位置和结束位置空格，并返回结果字符串，默认去除字符\n, \r, \t,  \0, 和空格</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span> = trim(<span class="variable">$_post</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br></pre></td></tr></table></figure>



<p>（2）ltrim(), rtrim()函数类似于trim()函数，但是ltrim()只处理字符串左边，rtrim()函数只处理字符串右边</p>
<h5 id="2-格式化字符串以便显示"><a href="#2-格式化字符串以便显示" class="headerlink" title="2.格式化字符串以便显示"></a>2.格式化字符串以便显示</h5><p>（1）使用HTML格式化：n12br()函数</p>
<p>n12br()函数用<code>&lt;br/&gt;</code>标签代替字符串中的换行符，这对于一个长字符串在浏览器显示十分有用</p>
<p>html忽略空行，如果不使用n12br()，文本将成行显示</p>
<p>（2）为打印输出而格式化字符</p>
<p>php支持echo 和 print结构 打印字符串，print结构有返回值。除此之外php还有与C语言类似的打印函数printf() 和 sprintf(),实现一些更加复杂的格式</p>
<p>基本用法与C语言类似</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">printf(<span class="string">&quot;order is %s.&quot;</span>, <span class="variable">$total</span>);</span><br></pre></td></tr></table></figure>

<p> 和C语言一样，printf()函数还有一些实用的参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">%[<span class="string">&#x27;padding-character&#x27;</span>][-][width][.precision]type</span><br></pre></td></tr></table></figure>

<ul>
<li>“padding-character”,用于填充变量直到所指定的宽度，默认为空格</li>
<li>“-“用于指明该域的数据为左对齐</li>
<li>“width”，为被替换的变量留下多少字符空间</li>
<li>“.precision”指明小数点显示的位数</li>
</ul>
<p><strong>转换说明类型码</strong></p>
<h5 id="3-改变字符串的字母大小写"><a href="#3-改变字符串的字母大小写" class="headerlink" title="3.改变字符串的字母大小写"></a>3.改变字符串的字母大小写</h5><p>实际上应用的场合并不多</p>
<p>字符串大小写转换函数</p>
<h5 id="4-格式化字符串以便存储"><a href="#4-格式化字符串以便存储" class="headerlink" title="4.格式化字符串以便存储"></a>4.格式化字符串以便存储</h5><p>格式化字符，除了用于打印到html页面，还可以应用于存储到数据库。</p>
<p>（1）问题的出现</p>
<p>在数据库中，某些数据的引号字符，反斜杠和NULL字符会被解释为控制符，因此我们需要找到一种标记或转义它们的方法，以便数据库可以理解它们的意思</p>
<p>（2）解决问题的原理</p>
<p>要对这些字符进行转义处理，只需要在它们面前加一个反斜杠</p>
<p>（3）php的解决方法</p>
<p>php专门提供了两个用于转义字符串的函数，在将任何字符串存入数据库之前可以使用addslashes()将它们格式化（实际上就是为这些特殊字符加上反斜杠），而Stripslashes()会移除这些反斜杠</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$feedback</span> = addslashes(trim(<span class="variable">$_POST</span>[<span class="string">&#x27;feedback&#x27;</span>]));</span><br></pre></td></tr></table></figure>



<h4 id="连接分割字符串"><a href="#连接分割字符串" class="headerlink" title="连接分割字符串"></a>连接分割字符串</h4><p>通常我们想查看字符串的各个部分。例如，查看句子中的英文单词，或者将一个域名或电子邮件地址分割成一个个部分，这时候就要用到几个字符串函数或者正则表达式函数来实现</p>
<h5 id="1-一些常用连接字符串函数"><a href="#1-一些常用连接字符串函数" class="headerlink" title="1.一些常用连接字符串函数"></a>1.一些常用连接字符串函数</h5><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>explode()</td>
<td>指定分隔字符将字符串本身分割成小块，并返回到一个数组中</td>
<td><code>$email_array = explode(&#39;@&#39;, $email);</code></td>
</tr>
<tr>
<td>impldoe(),join()</td>
<td>功能和函数explode()相反，用字符将数组里的元素连接起来</td>
<td><code>$new_email = implode(&#39;@&#39;, $email_array);</code></td>
</tr>
<tr>
<td>strtok()</td>
<td>将字符串分割成子字符串，可规定多个分割字符</td>
<td><code>$token = strtok($string, &quot; &quot;);</code></td>
</tr>
<tr>
<td>substr()</td>
<td>访问一个字符串给定起点和终点的子字符串，注意第一个字符从0开始</td>
<td><code>substr($test, 5, -13);</code></td>
</tr>
</tbody></table>
<h4 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h4><p>php可以直接使用“==”来比较两个字符是否相等，但有些时候我们还需要更加复杂的比较</p>
<h5 id="1-常用的比较字符串函数"><a href="#1-常用的比较字符串函数" class="headerlink" title="1.常用的比较字符串函数"></a>1.常用的比较字符串函数</h5><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>strcmp()</td>
<td>对两个字符串进行比较，相等则返回0，按字典顺序大于则返回正数，小于则返回负数，区分大小写</td>
<td>无</td>
</tr>
<tr>
<td>strcasecmp()</td>
<td>功能与strcmp()基本一致，但是区分大小写</td>
<td>无</td>
</tr>
<tr>
<td>strnatcmp()</td>
<td>不是按照字典顺序来比较而是按自然顺序来比较</td>
<td>无</td>
</tr>
<tr>
<td>strlen()</td>
<td>检查字符串长度</td>
<td>echo strlen(“hello”);</td>
</tr>
</tbody></table>
<h4 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h4><p>很多情况下我们需要在字符串中提取子字符串关键字，这里我们就需要用一些特定的字符串函数对一个字符串进行搜索</p>
<h5 id="1-常用字符串匹配函数"><a href="#1-常用字符串匹配函数" class="headerlink" title="1.常用字符串匹配函数"></a>1.常用字符串匹配函数</h5><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>strstr()</td>
<td>在字符串中查找匹配的字符串或字符，并返回一个子字符串，如果出现不止一个目标关键字，则从第一个出现的开始返回</td>
<td><code>strstr($feedback, &#39;shop&#39;)</code></td>
</tr>
<tr>
<td>stropos()</td>
<td>在字符串中查找匹配的字符串或字符,默认返回第一个子字符串出现的位置，也可以指定查询位置</td>
<td><code>echo strpos($test, &quot;o&quot;, 5);</code></td>
</tr>
<tr>
<td>strrpos()</td>
<td>在字符串中查找匹配的字符串或字符,并返回最后子字符串出现的位置</td>
<td>无</td>
</tr>
<tr>
<td>str_replace()</td>
<td>可以通过数组的方式来传递所有参数，可以很好地完成字符串的替换</td>
<td><code>$feedback = str_replace($offcolor, &quot;%!@*&quot;, $feedback);</code>//$offcolor数组是屏蔽关键词，“”内的是屏蔽用语，$feedback是屏蔽的字符串对象</td>
</tr>
<tr>
<td>substr_replace()</td>
<td>在给定位置中查找和替换特定的子字符串,length表示php停止操作的位置</td>
<td><code>$test = substr_replace($test, &#39;X&#39;, -1);</code></td>
</tr>
</tbody></table>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>之前我们所使用的字符串函数只适用于精确匹配，如果希望完成一些更复杂的匹配模式，我们需要用到正则表达式来取代之前函数提到的功能，比如如果有多个匹配关键词，要使用多个字符串函数，而正则表达式可以一步到位</p>
<h5 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h5><p>正则表达式是一种描述一段文本模式的方法，匹配正则表达式更有点像 strstr（）匹配，而不像相等比较：例如，字符串“shop”匹配正则表达式“shop”。它也可以匹配正则表达式“h”，“ho”等。此外还可以指定表达式的元意。</p>
<h5 id="2-字符集和类"><a href="#2-字符集和类" class="headerlink" title="2.字符集和类"></a>2.字符集和类</h5><p>字符集可以用于匹配属特定类型的任何字符;事实上它们是一种通配符。</p>
<p>（1）我们可以用字符作为一个通配符来代替除换行符（\n）之外的任一个字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">.at <span class="comment">//可以匹配到cat，mat，#at</span></span><br><span class="line">[a-z]at <span class="comment">//限定了字符一定是字母，故无法匹配到#at   </span></span><br><span class="line">[aeiou]at <span class="comment">//限定前面只能是元音字母</span></span><br><span class="line">[a-zA-Z]at <span class="comment">//限定只允许大小写字母</span></span><br><span class="line">[^a-z]at   <span class="comment">//匹配任何字母以外的字符    </span></span><br></pre></td></tr></table></figure>

<p>任何一个方括号[]内的内容都是一个字符类—— 一个被匹配字符所属的字符集合，方括号表达式只匹配一个字符</p>
<p>（2）其他常用字符集</p>
<h5 id="3-重复"><a href="#3-重复" class="headerlink" title="3.重复"></a>3.重复</h5><p>当我们想指定某个字符串或字符类出现不止一次，可以用*表示重复了0-n次，用+表示重复了1-n次。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[[:alnum:]]+  <span class="comment">//表示至少有一个字母字符</span></span><br></pre></td></tr></table></figure>



<h5 id="4-子表达式"><a href="#4-子表达式" class="headerlink" title="4.子表达式"></a>4.子表达式</h5><p>通常，我们往往会将一个表达式分隔为几个表达式，用以表示至少这些字符串中有一个需要精准匹配。可以使用圆括号来表示</p>
<p>（1）一般形式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(very)*large <span class="comment">//可以匹配到large, very large, very very large</span></span><br></pre></td></tr></table></figure>

<p>（2）子表达式计数</p>
<p>可以用花括号的表达式指定内容允许重复的次数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(very)&#123;<span class="number">1</span>,<span class="number">3</span>&#125; <span class="comment">//允许重复1-3次</span></span><br><span class="line">(very)&#123;<span class="number">3</span>&#125;   <span class="comment">//重复三次</span></span><br><span class="line">(very)&#123;<span class="number">2</span>,&#125;  <span class="comment">//至少重复2次</span></span><br></pre></td></tr></table></figure>



<h5 id="5-定位字符串的开始或末尾"><a href="#5-定位字符串的开始或末尾" class="headerlink" title="5.定位字符串的开始或末尾"></a>5.定位字符串的开始或末尾</h5><p>脱字符号、（^）用于正则表达式的开始，表示子字符串必须出现在被搜索字符串的开始处，字符“s”用于正则表达式的末尾，表示子字符串必须出现在字符串的末尾</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">^bob  <span class="comment">//从字符串开始处匹配bob</span></span><br><span class="line">com$  <span class="comment">//匹配com出现在末尾的字符串</span></span><br><span class="line">^[a-z]$  <span class="comment">//匹配只包含a-z之间一个字符的字符串</span></span><br></pre></td></tr></table></figure>



<h5 id="6-分支"><a href="#6-分支" class="headerlink" title="6.分支"></a>6.分支</h5><p>正则表达式用一条竖线表示多种选择</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">com|edu|net <span class="comment">//表示匹配com或edu或net </span></span><br></pre></td></tr></table></figure>



<h5 id="7-匹配特殊字符"><a href="#7-匹配特殊字符" class="headerlink" title="7.匹配特殊字符"></a>7.匹配特殊字符</h5><p>（1）要匹配特殊字符需要对它们进行转义，即在它们前面加一个反斜杠（\）。</p>
<p>（2）php中应将正则表达式放在一个单引号字符串中，使用双引号会带来一些不必要的复杂性</p>
<h5 id="8-正则表达式特殊字符"><a href="#8-正则表达式特殊字符" class="headerlink" title="8.正则表达式特殊字符"></a>8.正则表达式特殊字符</h5><h5 id="9-使用正则表达式的php函数"><a href="#9-使用正则表达式的php函数" class="headerlink" title="9.使用正则表达式的php函数"></a>9.使用正则表达式的php函数</h5><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
<th>案例</th>
</tr>
</thead>
<tbody><tr>
<td>ereg()</td>
<td>该函数搜索字符串 search，在 pattern中寻找与正则表达式相匹配的字符串，并将它们存储在数组 matches中</td>
<td><code>ereg(&#39;^[a-zA-z0-9_\-\.]+$&#39;,$email)</code></td>
</tr>
<tr>
<td>ereg_replace()</td>
<td>该函数在字符串 search中查找正则表达式 pattern的字符串，并且用字符串 replacement来替换</td>
<td><code>ereg_ replace(string pattern, string replacement, string search);</code></td>
</tr>
<tr>
<td>split()</td>
<td>该函数将字符search分割成符合正则表达式模式的子字符串,然后将子字符串返回到数组中</td>
<td>`$arr = split(‘.</td>
</tr>
</tbody></table>
<h3 id="代码重用与函数编写"><a href="#代码重用与函数编写" class="headerlink" title="代码重用与函数编写"></a>代码重用与函数编写</h3><h4 id="代码复用的好处"><a href="#代码复用的好处" class="headerlink" title="代码复用的好处"></a>代码复用的好处</h4><p><del>代码复用主要是程序员用于摸鱼偷懒（bushi）</del>，软件工程师的一个目标就是重复使用代码来避免编写新的代码，一个新的项目往往是这样创建的：将已有的可重新利用的组件进行组合，并将新的开发难度降低到最小。</p>
<p>主要优点如下：</p>
<ul>
<li>降低成本</li>
<li>更加可靠</li>
<li>保持一致</li>
</ul>
<h4 id="引用函数库"><a href="#引用函数库" class="headerlink" title="引用函数库"></a>引用函数库</h4><p>PHP有两个非常重要的语句，require()或include()语句可以将一个文件载入PHP脚本中，通常这个文件包含任何希望在一个脚本中输出的内容（PHP语句，文本，html标记，PHP函数或PHP类），实际上，它们的功能类似于C语言的#include语句</p>
<h5 id="1-文件拓展名和require-函数"><a href="#1-文件拓展名和require-函数" class="headerlink" title="1.文件拓展名和require()函数"></a>1.文件拓展名和require()函数</h5><p>require()可以载入文件，即将请求的文件替代内容后，继续执行脚本。我们约定载入文件的拓展名命名为“php”。在实际运用中，如果web页面具有一致的外观，可以在php中使用require()语句将模板加入页面。</p>
<h4 id="PHP中使用函数"><a href="#PHP中使用函数" class="headerlink" title="PHP中使用函数"></a>PHP中使用函数</h4><p>函数说一个给出了调用接口的自包含模板，它可以执行任务，还可以返回结果</p>
<h5 id="1-函数调用"><a href="#1-函数调用" class="headerlink" title="1.函数调用"></a>1.函数调用</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">phpinfo(); <span class="comment">//无参数，输出php版本</span></span><br><span class="line">function_name(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">function_name(<span class="string">&#x27;$num&#x27;</span>); <span class="comment">//有参数,参数的填写应注意函数原型</span></span><br></pre></td></tr></table></figure>

<p>一个具有多个可选值的函数，要按照从右到左顺序使用默认值</p>
<p>变量名区分大小写，函数名不区分大小写</p>
<h5 id="2-函数声明"><a href="#2-函数声明" class="headerlink" title="2.函数声明"></a>2.函数声明</h5><p>函数声明以关键字function开始，然后给出函数名称和必要的参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>内置函数在所有php脚本都可以用，但是如果声明了自己的函数，就只能在声明了它们的脚本使用。将经常用到的函数包含在一个文件中是一个很好的解决方案，然后再使用require()引用。</p>
<p>如果希望在一个函数退出php并输入html脚本，可以使用一个封闭的php标记再编写html脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_function</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">	my <span class="function"><span class="keyword">function</span> <span class="title">was</span> <span class="title">called</span></span></span><br><span class="line"><span class="function">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="function">	</span></span><br><span class="line">    $name;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可变函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span>(); <span class="comment">//以name变量的值作为函数名称</span></span><br></pre></td></tr></table></figure>



<h5 id="3-函数作用域"><a href="#3-函数作用域" class="headerlink" title="3.函数作用域"></a>3.函数作用域</h5><ul>
<li>函数内部声明的变量只能再在该函数内用，这是函数作用域或者说是局部变量</li>
<li>在函数外部声明的变量作用在从该语句开始的整个文档，这是全局作用域</li>
<li>require()和include()不影响作用域</li>
</ul>
<h4 id="使用参数"><a href="#使用参数" class="headerlink" title="使用参数"></a>使用参数</h4><h5 id="1-参数设置"><a href="#1-参数设置" class="headerlink" title="1.参数设置"></a>1.参数设置</h5><p>函数中可以设置参数默认值，变成可选项</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_table2</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$border</span>=<span class="number">1</span>; <span class="variable">$cellpadding</span>=<span class="number">4</span></span>)</span>&#123;</span><br><span class="line">	…</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">create_table2(<span class="variable">$my_array</span>);</span><br></pre></td></tr></table></figure>



<h5 id="2-参数帮助器"><a href="#2-参数帮助器" class="headerlink" title="2.参数帮助器"></a>2.参数帮助器</h5><p><code>func_num_arg()</code> ：返回参数的个数</p>
<p><code>func_get_args()</code> :返回参数组成的数组</p>
<h5 id="3-参数的引用传递和值传递"><a href="#3-参数的引用传递和值传递" class="headerlink" title="3.参数的引用传递和值传递"></a>3.参数的引用传递和值传递</h5><p>一般来说，函数参数的传递是值传递，当传递一个参数时，函数内会新建一个变量来存储原来变量的副本，无论怎么修改也不会影响原来的变量</p>
<p>所以我们可以使用引用传递（类似于C语言的指针），这时函数不会创建一个新的变量，而是获得了一个原来变量的引用指向原来的值，任何对该引用的修改都会影响原始变量值。</p>
<p>在参数面前加一个地址符’&amp;’，指定该参数为引用传递</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params">&amp;<span class="variable">$value</span>, <span class="variable">$amount</span> = <span class="number">1</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="variable">$value</span> = <span class="variable">$value</span> + <span class="variable">$amount</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Return关键字的运用"><a href="#Return关键字的运用" class="headerlink" title="Return关键字的运用"></a>Return关键字的运用</h4><h5 id="1-终止函数的执行"><a href="#1-终止函数的执行" class="headerlink" title="1.终止函数的执行"></a>1.终止函数的执行</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">larger</span>(<span class="params"><span class="variable">$x</span>, <span class="variable">$y</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>((!<span class="keyword">isset</span>(<span class="variable">$x</span>)) || (!<span class="keyword">isset</span>(<span class="variable">$y</span>)))&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$x</span>&gt;=<span class="variable">$y</span>)&#123;	</span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$x</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;			</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$y</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>isset语句可以判断一个变量是否被创建并赋值，如果没有则报错，并return结束函数执行</p>
<h5 id="2-从函数返回一个值"><a href="#2-从函数返回一个值" class="headerlink" title="2.从函数返回一个值"></a>2.从函数返回一个值</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">larger</span>(<span class="params"><span class="variable">$x</span>, <span class="variable">$y</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>((!<span class="keyword">isset</span>(<span class="variable">$x</span>)) || (!<span class="keyword">isset</span>(<span class="variable">$y</span>)))&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$x</span>&gt;=<span class="variable">$y</span>)&#123;	</span><br><span class="line">		 <span class="keyword">return</span> <span class="variable">$x</span>;			</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">		 <span class="keyword">return</span> <span class="variable">$y</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h4><p>递归 函数就是自己调用自己，适用于浏览动态数据结构（连接列表和树）,而且比循环慢也占用更多的内存，所以基本很少用（虽然递归的代码更简短，美观）</p>
<h3 id="PHP的面向对象"><a href="#PHP的面向对象" class="headerlink" title="PHP的面向对象"></a>PHP的面向对象</h3><h4 id="PHP创建类，属性和操作"><a href="#PHP创建类，属性和操作" class="headerlink" title="PHP创建类，属性和操作"></a>PHP创建类，属性和操作</h4><h5 id="1-类的结构"><a href="#1-类的结构" class="headerlink" title="1.类的结构"></a>1.类的结构</h5><p>我们用<code>class</code>声明类，声明属性变量时要用public, private, protected这些关键字，这与变量的作用域有关。声明类的操作则用声明函数的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2.构造函数"></a>2.构造函数</h5><p>大多数类都有一种称为构造函数的特殊操作。其作用为当创建一个对象时会自动调用构造函数，所以常常用于设置属性的初始值或创建该对象的其他对象</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">classname</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$param</span></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;hello&#x27;</span>.<span class="variable">$param</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造函数的函数名一定为<code>__construct</code></p>
<h5 id="3-析构函数"><a href="#3-析构函数" class="headerlink" title="3.析构函数"></a>3.析构函数</h5><p>与构造函数相对，其作用是在销毁一个类时执行的操作或完成的一些功能。析构函数的函数名称为<code>__destruct()</code>不能带任何参数</p>
<h4 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h4><p>创建一个对象即实例化了一个类。可以使用”new“来创建一个类，需要指定创建的对象属于哪一个类，并通过构造函数提供所需的参数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">classname</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$param</span></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;hello&#x27;</span>.<span class="variable">$param</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> classname(<span class="string">&quot;first&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> classname(<span class="string">&quot;second&quot;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="使用类的属性"><a href="#使用类的属性" class="headerlink" title="使用类的属性"></a>使用类的属性</h3><h5 id="1-内部访问类"><a href="#1-内部访问类" class="headerlink" title="1.内部访问类"></a>1.内部访问类</h5><p>如果一个类的操作需要设置或访问该类的某个变量，我们可以用一个特殊的指针——$this 来实现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">classname</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$attribute</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">operation</span>(<span class="params"><span class="variable">$param</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">$this</span>-&gt;attribute = <span class="variable">$param</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;attribute;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-外部访问类"><a href="#2-外部访问类" class="headerlink" title="2.外部访问类"></a>2.外部访问类</h5><p>（1）直接访问</p>
<p>通过访问修饰符直接范围属性</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> student();</span><br><span class="line"><span class="variable">$a</span>-&gt;name = <span class="string">&quot;hao&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>-&gt;name;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但通常来说，从类的外部直接访问类的属性是糟糕的想法</p>
<p>（2）推荐方案</p>
<p>我们可以通过<code>__get()</code>和<code>__set()</code>来实现对属性的访问，其案例如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$att</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;<span class="variable">$name</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">    	</span><br><span class="line">        <span class="keyword">$this</span>-&gt;<span class="variable">$name</span> = <span class="variable">$value</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> student();</span><br><span class="line"><span class="variable">$a</span>-&gt;att = <span class="number">5</span>;    <span class="comment">//间接调用了__set()函数将name的参数值设为att，并将$value的值设为5</span></span><br></pre></td></tr></table></figure>

<p>之所以这样设置一个访问入口，就是要实现对保存的数据进行检查，确保数据是有意义的，可以修改一下<code>__set()</code>函数的条件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>((<span class="variable">$name</span> = <span class="string">&quot;att&quot;</span>) &amp;&amp; (<span class="variable">$value</span> &gt;= <span class="number">0</span>))</span><br><span class="line">    	<span class="keyword">$this</span>-&gt;<span class="variable">$name</span> = <span class="variable">$value</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="控制访问"><a href="#控制访问" class="headerlink" title="控制访问"></a>控制访问</h4><p>访问修饰符用于控制属性和方法的可见性</p>
<ul>
<li>默认选项是public()，公有的属性或方法可以在类的内部和外部进行访问</li>
<li>private访问修饰符意味着被标记的属性或方法只能在类的内部进行访问，也可以选择使得部分方法成为私有的,例如,如果某些方法只是在类内部使用的工具性函数。私有的属性和方法将不会被继承</li>
<li>protected访问修饰符意味着被标记的属性或方法只能在类内部进行访问。它也存在于任何子类</li>
</ul>
<h4 id="类操作的调用"><a href="#类操作的调用" class="headerlink" title="类操作的调用"></a>类操作的调用</h4><p>与属性的调用类似</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">classname</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">oper1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">oper2</span>(<span class="params"><span class="variable">$param1</span>, <span class="variable">$param2</span></span>)</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> classname();</span><br><span class="line"><span class="variable">$a</span>-&gt;oper1();</span><br><span class="line"><span class="variable">$a</span>-&gt;oper2(<span class="number">12</span>, <span class="string">&quot;test&quot;</span>);  <span class="comment">//先指定对象才能调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$a</span>-&gt;oper1();</span><br><span class="line"><span class="variable">$y</span> = <span class="variable">$a</span>-&gt;oper2(<span class="number">12</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//捕获返回值</span></span><br></pre></td></tr></table></figure>



<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="1-继承基本操作"><a href="#1-继承基本操作" class="headerlink" title="1.继承基本操作"></a>1.继承基本操作</h5><p>我们用<code>extends</code>来表明继承关系。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$attribute2</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">operation2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$attribute1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">operation1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>B类具有A类所有的属性和操作,另外还有自己的一个属性和一个操作。注意继承是单向的！</p>
<h5 id="2-选择性继承"><a href="#2-选择性继承" class="headerlink" title="2.选择性继承"></a>2.选择性继承</h5><p>我们可以使用private和protected访问修饰符控制需要继承的内容。</p>
<p>private：外部不可见，且不能继承</p>
<p>protected：外部不可见，但是可以继承</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">operational</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">operationa2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operationa3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">$this</span>-&gt;operation1();  <span class="comment">//该操作为A类私有，无法调用，会报错</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;operation2();  <span class="comment">//只允许内部调用该操作		</span></span><br><span class="line">		<span class="keyword">$this</span>-&gt;operation3();	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-重载"><a href="#3-重载" class="headerlink" title="3.重载"></a>3.重载</h5><p>子类中可以声明新的属性和操作，我们也可以重复声明父类中有的属性和操作。一般用于子类属性赋予一个与父类不同的默认值，或修改父类中的操作。这种操作叫重载。</p>
<p>子类重载的属性和操作不会影响到父类</p>
<p>重载后，我们仍然可以用<code>parent</code>关键字调用父类操作的初始版本，但是使用的是当前类的属性值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parent</span>::operation();</span><br></pre></td></tr></table></figure>



<h5 id="4-禁止继承和重载"><a href="#4-禁止继承和重载" class="headerlink" title="4.禁止继承和重载"></a>4.禁止继承和重载</h5><p>我们可以使用<code>final</code>禁止一个类中的某个操作或属性的重载，也可以直接禁止一个类的重载</p>
<h5 id="5-多重继承"><a href="#5-多重继承" class="headerlink" title="5.多重继承"></a>5.多重继承</h5><p>大多数的面向对象语言都不支持多重继承，php也一样（C++是支持多重继承的典型）。不支持多重继承即每一个类只能继承一个父类，一个只能有一个爸爸，一个爸爸却能有多个儿子</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>后端</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP|Thinkphp学习</title>
    <url>/2021/03/28/PHP/PHP-thinkphp5/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041014601.jpeg" alt="img"></p>
<span id="more"></span>

<h2 id="URL解析模式"><a href="#URL解析模式" class="headerlink" title="URL解析模式"></a>URL解析模式</h2><h3 id="1-URL解析"><a href="#1-URL解析" class="headerlink" title="1.URL解析"></a>1.URL解析</h3><p>（1）分析</p>
<p>tp应用入口：<code>https://severName/index.php/模块/控制器/操作/参数/值/</code></p>
<ul>
<li><strong>serverName：</strong>在本地为<code>localhost/tp5/public/</code>，部署后映射为域名</li>
<li><strong>模块：</strong>位于根目录下的application下，默认下有一个index目录，它就是一个模块   </li>
<li><strong>控制器：</strong>在上面index目录（index模块）下有一个controller控制器目录，其中的Index.php就是一个控制器</li>
<li><strong>操作：</strong>在控制器的类中的方法就是操作如上面Index.php中的两个方法：<code>index()，hello()</code></li>
<li><strong>参数 值</strong>：是对应上面操作的，如果操作有参数，则可以通过url传参</li>
</ul>
<p>（2）实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件位置：/tp5/appliction/test/controller/Abc.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 命名空间，索引到test模块的控制器文件</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">test</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="comment">// 类要与文件名相同，且首字母要大写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abc</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"><span class="variable">$name</span>=<span class="string">&#x27;world&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>.<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>访问案例：<a href="http://localhost/tp5/public/index.php/test/abc/hello/">http://localhost/tp5/public/index.php/test/abc/hello/</a></p>
</li>
<li><p>控制器名的首字母要大写如：Index，Abc。<strong>注意</strong>：如果控制器名初始化时首字母没有大写，之后改过来也无法生效了</p>
</li>
<li><p>如果方法的参数为$name，则url操作后面一定要加上<code>/参数/值/</code></p>
</li>
<li><p>注意url的最后要有/</p>
</li>
</ul>
<p>（3）关于环境</p>
<p>修改apache配置文件，开启伪静态，即可将index.php省略</p>
<h2 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h2><h3 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1.目录结构"></a>1.目录结构</h3><p>tp5默认为多模块结构</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041015470.png" alt="image-20210330203720332"></p>
<ul>
<li><p>模块下的类库文件命名空间统一为：app\模块名：<code>namespace app\test\controller\Index</code>;</p>
</li>
<li><p>当只有一个模块时，可以绑定这个模块:从而省略<strong>模块名</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件位置：tp5/public/index.php</span></span><br><span class="line">Container::get(<span class="string">&#x27;app&#x27;</span>)-&gt;bind(<span class="string">&#x27;test&#x27;</span>)-&gt;run()-&gt;send();</span><br></pre></td></tr></table></figure>

<p>访问链接为：<a href="http://localhost/tp5/public/index.php/abc/hello">http://localhost/tp5/public/index.php/abc/hello</a></p>
</li>
</ul>
<ul>
<li><p>当只有一个模块，一个控制器时，可以绑定模块和控制器，从而省略<strong>模块/控制器</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件位置：tp5/public/index.php</span></span><br><span class="line"></span><br><span class="line">Container::get(<span class="string">&#x27;app&#x27;</span>)-&gt;bind(<span class="string">&#x27;test/abc&#x27;</span>)-&gt;run()-&gt;send();</span><br></pre></td></tr></table></figure>

<p>访问链接为：<a href="http://localhost/tp5/public/index.php/hello">http://localhost/tp5/public/index.php/hello</a></p>
</li>
</ul>
<h3 id="2-空模块"><a href="#2-空模块" class="headerlink" title="2.空模块"></a>2.空模块</h3><p>通过环境变量设置空模块，将不存在的目录统一指向指定目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件位置：tp5/config/app.php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的空模块名</span></span><br><span class="line"><span class="string">&#x27;empty_module&#x27;</span>           =&gt; <span class="string">&#x27;404&#x27;</span>,</span><br></pre></td></tr></table></figure>

<p>空模块只有在多模块开启，没有绑定模块情况下生效</p>
<h3 id="3-环境变量"><a href="#3-环境变量" class="headerlink" title="3.环境变量"></a>3.环境变量</h3><p>tp5提供了一个类库Env来获取环境变量，如：<code>return env(&#39;app_path&#39;)</code></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041015869.png" alt="image-20210330210525103"></p>
<h2 id="控制器定义"><a href="#控制器定义" class="headerlink" title="控制器定义"></a>控制器定义</h2><h3 id="1-控制器要点"><a href="#1-控制器要点" class="headerlink" title="1.控制器要点"></a>1.控制器要点</h3><ul>
<li>可以继承控制器基类，方便使用功能，但不是必要的</li>
<li>如果控制器名有两个大写字母，如：class HelloWorld用<code>public/hello_world</code>这样的方式访问</li>
<li>如果想改变根命名app，可以在根目录创建.env文件写上键值对，如：<code>app_namespace=application</code></li>
</ul>
<h3 id="2-渲染方式"><a href="#2-渲染方式" class="headerlink" title="2.渲染方式"></a>2.渲染方式</h3><p>（1）初始化渲染</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化渲染内容（无论有没有调用都会渲染出来）,必须是继承了Controller</span></span><br><span class="line"><span class="comment">// 初始化中不能返回，只能用echo来输出</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parent</span>::initialize(); <span class="comment">// <span class="doctag">TODO:</span> Change the autogenerated stub</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;https://www.baidu.com/img/flexible/logo/pc/result.png&quot;  /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（2）输出数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">arr</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 建立数组</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>=&gt;<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>=&gt;<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>=&gt;<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出数组，不能直接返回数组，需要转换为json格式</span></span><br><span class="line">    <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（3）输出html模板</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模板输出，输出的是该模块文件下视图文件中的html文件</span></span><br><span class="line"><span class="comment">// 控制器名和视图目录下放html文件的对应</span></span><br><span class="line"><span class="comment">// 方法名和html文件名对应</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="控制器操作"><a href="#控制器操作" class="headerlink" title="控制器操作"></a>控制器操作</h2><h3 id="1-前置操作"><a href="#1-前置操作" class="headerlink" title="1.前置操作"></a>1.前置操作</h3><p>可以灵活控制的页面初始化方法，需要继承至Controller类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">test</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="comment">// 前置操作，即页面初始化，可以灵活控制是否渲染指定的初始化方法</span></span><br><span class="line"><span class="comment">// ---------------------------------------------------</span></span><br><span class="line"><span class="comment">// 需要继承controller类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Before</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置$beforeActionList属性绑定前置方法</span></span><br><span class="line"><span class="comment">//-------------------------------------------</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$beforeActionList</span>=[</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>,                            <span class="comment">// 允许该控制器下所有的方法触发frist前置方法</span></span><br><span class="line">        <span class="string">&#x27;second&#x27;</span> =&gt; [<span class="string">&#x27;except&#x27;</span>=&gt;<span class="string">&#x27;one&#x27;</span>],      <span class="comment">// 除了one这个方法，其他方法都允许触发</span></span><br><span class="line">        <span class="string">&#x27;third&#x27;</span> =&gt; [<span class="string">&#x27;only&#x27;</span> =&gt; <span class="string">&#x27;one, two&#x27;</span>]   <span class="comment">// 仅允许one，two两个方法触发</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对应的前置方法（初始化方法）,这些方法是无法直接访问的</span></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;frist&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;second&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">third</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;third&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建可调用的方法（前置方法作用对象）</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-跳转和重定向"><a href="#2-跳转和重定向" class="headerlink" title="2.跳转和重定向"></a>2.跳转和重定向</h3><p>Controller类提供了两个跳转方法：success(msg,url)和error(msg)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">test</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Url</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转条件设置</span></span><br><span class="line"><span class="comment">// ------------------------------</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$flag</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转触发</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;flag)&#123;</span><br><span class="line">            <span class="comment">// 不指定url，默认返回上一层</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;success(<span class="string">&#x27;访问成功&#x27;</span>, <span class="string">&#x27;../test/before/one&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 自动后退到上一页</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;error(<span class="string">&#x27;访问失败了&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>成功和失败都有一个固定的页面模板：’thinkphp/tpl/dispatch_jump.tpl’；</li>
<li>在config/app.php配置文件中可修改跳转页面对应的模板</li>
</ul>
<h3 id="3-空方法和空控制器"><a href="#3-空方法和空控制器" class="headerlink" title="3.空方法和空控制器"></a>3.空方法和空控制器</h3><p>（1）空方法    </p>
<p>在控制器中使用_empty方法可以自动拦截不存在的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 空链接（空方法） 拦截</span></span><br><span class="line"><span class="comment">// ------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_empty</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$string</span> = <span class="string">&#x27;此方法不存在:&#x27;</span>.<span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;error(<span class="variable">$string</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>（2）空控制器</p>
<p>在控制器文件下创建Error.php控制器，则可以处理控制器不存在的异常</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">test</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制器不存在异常处理</span></span><br><span class="line"><span class="comment">// ----------------------------</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;当前控制器不存在&#x27;</span>.<span class="variable">$request</span>-&gt;controller();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="数据库与模型"><a href="#数据库与模型" class="headerlink" title="数据库与模型"></a>数据库与模型</h2><h3 id="1-连接数据库"><a href="#1-连接数据库" class="headerlink" title="1.连接数据库"></a>1.连接数据库</h3><ul>
<li><p>thinkphp 采用内置抽象层将不同的数据库进行封装处理</p>
</li>
<li><p>数据抽象层基于PDO模式，无需针对不同的数据库编写相应的代码</p>
</li>
<li><p>数据库的连接是在config的database.php配置文件下修改连接信息</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据库类型</span></span><br><span class="line"><span class="string">&#x27;type&#x27;</span>            =&gt; <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line"><span class="comment">// 服务器地址</span></span><br><span class="line"><span class="string">&#x27;hostname&#x27;</span>        =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="comment">// 数据库名</span></span><br><span class="line"><span class="string">&#x27;database&#x27;</span>        =&gt; <span class="string">&#x27;tp_data&#x27;</span>,</span><br><span class="line"><span class="comment">// 用户名</span></span><br><span class="line"><span class="string">&#x27;username&#x27;</span>        =&gt; <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="comment">// 密码</span></span><br><span class="line"><span class="string">&#x27;password&#x27;</span>        =&gt; <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line"><span class="comment">// 端口</span></span><br><span class="line"><span class="string">&#x27;hostport&#x27;</span>        =&gt; <span class="string">&#x27;&#x27;</span>,</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="2-控制器访问"><a href="#2-控制器访问" class="headerlink" title="2.控制器访问"></a>2.控制器访问</h3><p>在控制器中直接调用db类的方法查询数据库</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按表名查找数据库，必须加上前缀</span></span><br><span class="line"><span class="comment">// ------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getone</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = Db::table(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  自动加上索引内的前缀</span></span><br><span class="line"><span class="comment">// ----------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">gettwo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-模型访问"><a href="#3-模型访问" class="headerlink" title="3.模型访问"></a>3.模型访问</h3><p>Model就是用来处理和配置数据库的相关信息</p>
<p>在模块中创建model文件夹，然后创建与表名对应的类（首字母大写）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">data</span>\<span class="title">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模型名类名与数据库的表名保持一致</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">console</span>\<span class="title">command</span>\<span class="title">Make</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置好model与数据表的对应后，即可在控制器利用模型访问数据库</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用模型访问数据库</span></span><br><span class="line"><span class="comment">// ---------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getmod</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = User::select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><h3 id="1-查询一条数据"><a href="#1-查询一条数据" class="headerlink" title="1.查询一条数据"></a>1.查询一条数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询一条数据</span></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// find()默认查询第一条语句</span></span><br><span class="line">        <span class="variable">$data</span> = Db::table(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;find();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        <span class="comment">// 输出最近执行的sql语句</span></span><br><span class="line">        <span class="keyword">echo</span> Db::getLastSql();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// where返回特定条件数据</span></span><br><span class="line">        <span class="variable">$data2</span> = Db::table(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="number">3</span>)-&gt;find();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data2</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        <span class="comment">// 输出最近执行的sql语句</span></span><br><span class="line">        <span class="keyword">echo</span> Db::getLastSql();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-数据查询异常处理"><a href="#2-数据查询异常处理" class="headerlink" title="2.数据查询异常处理"></a>2.数据查询异常处理</h3><p>主要使用findOrFail()抛出一个错误，catch语句才能捕捉到异常</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据不存在时异常处理</span></span><br><span class="line"><span class="comment">// -----------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"><span class="variable">$id</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 异常捕捉</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="variable">$data</span> = Db::table(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$id</span>)-&gt;findOrFail();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (DataNotFoundException <span class="variable">$e</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;查询不到数据！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-查询多例数据"><a href="#3-查询多例数据" class="headerlink" title="3.查询多例数据"></a>3.查询多例数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询多列数据</span></span><br><span class="line"><span class="comment">// --------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = Db::table(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;select();</span><br><span class="line">    <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-返回指定数据"><a href="#4-返回指定数据" class="headerlink" title="4.返回指定数据"></a>4.返回指定数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定返回数据查询</span></span><br><span class="line"><span class="comment">// --------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">four</span>(<span class="params"><span class="variable">$id</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// value方法指定返回字段的值</span></span><br><span class="line">        <span class="variable">$data1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$id</span>)-&gt;value(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">        <span class="comment">// 字符串</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$data1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// column方法返回指定列，并指定某字段作为索引</span></span><br><span class="line">        <span class="variable">$data2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;column(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data2</span>);</span><br><span class="line">    </span><br><span class="line">    	<span class="comment">// field返回指定列，还可以继续通过where进一步筛选（ column不行）</span></span><br><span class="line">    	 <span class="variable">$data1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;field(<span class="string">&#x27;id&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="comment">// 字符串</span></span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$data1</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="链式查询"><a href="#链式查询" class="headerlink" title="链式查询"></a>链式查询</h2><h3 id="1-查询规则"><a href="#1-查询规则" class="headerlink" title="1.查询规则"></a>1.查询规则</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询规则</span></span><br><span class="line"><span class="comment">// ----------------------------------------------</span></span><br><span class="line">    <span class="comment">//只要还是数据库对象都可以继续使用链式查询</span></span><br><span class="line">    <span class="comment">// 用find()和select()方法时结果查询，输出不再是对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        print_r(Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="number">3</span>)-&gt;order(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-链式的应用"><a href="#2-链式的应用" class="headerlink" title="2.链式的应用"></a>2.链式的应用</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存实例避免资源浪费（链式查询的特点，可以保存对象）</span></span><br><span class="line"><span class="comment">// --------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 保存数据库对象</span></span><br><span class="line">        <span class="variable">$user</span> = Db::name(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过上面一个对象分别进行查询</span></span><br><span class="line">        <span class="comment">// 但是要清除针对这个对象所有的链式查询项，才能下次查询</span></span><br><span class="line">        <span class="variable">$data1</span> = <span class="variable">$user</span>-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="number">3</span>)-&gt;find();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data1</span>).<span class="string">&#x27;:&#x27;</span>.Db::getLastSql();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不清除链式查询项的情况</span></span><br><span class="line">        <span class="variable">$data2</span> = <span class="variable">$user</span>-&gt;select();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data2</span>).<span class="string">&#x27;:&#x27;</span>.Db::getLastSql();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清除链式查询项的情况</span></span><br><span class="line">        <span class="variable">$data3</span> = <span class="variable">$user</span>-&gt;removeOption(<span class="string">&#x27;where&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data3</span>).<span class="string">&#x27;:&#x27;</span>.Db::getLastSql();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="增删改数据库"><a href="#增删改数据库" class="headerlink" title="增删改数据库"></a>增删改数据库</h2><h3 id="1-单条插入操作"><a href="#1-单条插入操作" class="headerlink" title="1.单条插入操作"></a>1.单条插入操作</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单条插入操作</span></span><br><span class="line"><span class="comment">// ------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入的数据</span></span><br><span class="line">        <span class="variable">$data</span>=[</span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;鲸落&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行数据插入的两种方式</span></span><br><span class="line">        <span class="variable">$insert</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;insert(<span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$insert2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;data(<span class="variable">$data</span>)-&gt;insert();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入成功返回值为插入数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$insert</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-批量插入操作"><a href="#2-批量插入操作" class="headerlink" title="2.批量插入操作"></a>2.批量插入操作</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批量插入操作</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insertall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span>=[</span><br><span class="line"></span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;autovy&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;233&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$insert</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;insertAll(<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$insert</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-数据修改"><a href="#3-数据修改" class="headerlink" title="3.数据修改"></a>3.数据修改</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据修改</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = [</span><br><span class="line">          <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;李白&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">34</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="number">4</span>)-&gt;update(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-函数处理数据修改"><a href="#4-函数处理数据修改" class="headerlink" title="4.函数处理数据修改"></a>4.函数处理数据修改</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用mysql函数进行数据修改</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = [</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span> =&gt; Db::raw(<span class="string">&#x27;UPPER(username)&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span> =&gt; Db::raw(<span class="string">&#x27;id + 10&#x27;</span>)</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="number">3</span>)-&gt;update(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-删除数据"><a href="#5-删除数据" class="headerlink" title="5.删除数据"></a>5.删除数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认根据id进行删除，也可以用where方法指定字段删除</span></span><br><span class="line">        <span class="comment">// 删除一条</span></span><br><span class="line">        Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;delete(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除多条</span></span><br><span class="line">        Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;delete([<span class="number">1</span>,<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h2><h3 id="1-比较查询"><a href="#1-比较查询" class="headerlink" title="1.比较查询"></a>1.比较查询</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比较查询</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 输出id != 10的数据</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;&lt;&gt;&#x27;</span>,<span class="number">10</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-模糊查询"><a href="#2-模糊查询" class="headerlink" title="2.模糊查询"></a>2.模糊查询</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模糊查询（即模糊查询字符串）</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模糊查询，密码（password）以12345开头的数据</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;whereLike(<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;12345%&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-区间查询"><a href="#3-区间查询" class="headerlink" title="3.区间查询"></a>3.区间查询</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 区间查询</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询id为1-10之间的数据</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;whereBetween(<span class="string">&#x27;id&#x27;</span>,[<span class="number">1</span>,<span class="number">10</span>])-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-多条查询"><a href="#4-多条查询" class="headerlink" title="4.多条查询"></a>4.多条查询</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多条查询</span></span><br><span class="line"><span class="comment">// ------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">four</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询id为7,8,10的数据</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;whereIn(<span class="string">&#x27;id&#x27;</span>,[<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>])-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-自定义查询"><a href="#5-自定义查询" class="headerlink" title="5.自定义查询"></a>5.自定义查询</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义查询（可以自己构建sql查询语句）</span></span><br><span class="line"><span class="comment">// ----------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">five</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询id为7,8,10的数据</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;whereExp(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;In(7,8,9)&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><h3 id="1-数值计算查询"><a href="#1-数值计算查询" class="headerlink" title="1.数值计算查询"></a>1.数值计算查询</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 聚合查询</span></span><br><span class="line"><span class="comment">// -----------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算数值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 数量计算</span></span><br><span class="line">       <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;count();</span><br><span class="line">       <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 最值计算</span></span><br><span class="line">        <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;max(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result2</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 平均值计算</span></span><br><span class="line">        <span class="variable">$result3</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;avg(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result3</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据综合计算</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;sum(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-闭包查询"><a href="#2-闭包查询" class="headerlink" title="2.闭包查询"></a>2.闭包查询</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子查询</span></span><br><span class="line"><span class="comment">// ----------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fetchSql:不执行sql语句，返回sql语句</span></span><br><span class="line">        <span class="variable">$result1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;fetchSql(<span class="literal">true</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result1</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// buildSql:不执行sql语句，返回sql语句，相比fetchSql不需要写select()</span></span><br><span class="line">        <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;buildSql(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result2</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 利用子查询，闭包查询实现多表查询</span></span><br><span class="line">        <span class="comment">// sql实现：SELECT * FROM tp_user WHERE id in (SELECT id FROM tp_two WHERE gender = &#x27;男&#x27;);</span></span><br><span class="line">        <span class="variable">$result3</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$query</span>-&gt;name(<span class="string">&#x27;two&#x27;</span>)-&gt;field(<span class="string">&#x27;id&#x27;</span>)-&gt;where(<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">        &#125;)-&gt;select();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result3</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="常用链式方法"><a href="#常用链式方法" class="headerlink" title="常用链式方法"></a>常用链式方法</h2><h3 id="1-where-：条件输出"><a href="#1-where-：条件输出" class="headerlink" title="1.where()：条件输出"></a>1.where()：条件输出</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// where()链式方法</span></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关联数组设置多个查询条件</span></span><br><span class="line">        <span class="variable">$result1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where([</span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; <span class="number">123456</span>,</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span> =&gt; [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">        ])-&gt;select();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$result1</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 索引数组查询</span></span><br><span class="line">        <span class="comment">// 组装复杂数据，通过变量传递</span></span><br><span class="line">        <span class="variable">$map</span>[] = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;between&#x27;</span>, [<span class="number">7</span>,<span class="number">10</span>]];</span><br><span class="line">        <span class="variable">$map</span>[] = [<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;=&#x27;</span>, <span class="number">123456</span>];</span><br><span class="line">        <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="variable">$map</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$result2</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符串形式传递查询</span></span><br><span class="line">        <span class="variable">$result3</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id in (7,10) and password=123456 &#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">echo</span>  json_encode(<span class="variable">$result3</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-field-：指定字段输出"><a href="#2-field-：指定字段输出" class="headerlink" title="2.field() ：指定字段输出"></a>2.field() ：指定字段输出</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// field()链式方法</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------------------</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询指定字段</span></span><br><span class="line">            <span class="variable">$result1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;field(<span class="string">&#x27;id,username&#x27;</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result1</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// field()方法中设置mysql函数</span></span><br><span class="line">            <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;field(<span class="string">&#x27;sum(id)&#x27;</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result2</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 屏蔽掉指定字段</span></span><br><span class="line">            <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;field(<span class="string">&#x27;password&#x27;</span>,<span class="literal">true</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result2</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-limit-：限制输出条数"><a href="#3-limit-：限制输出条数" class="headerlink" title="3.limit()：限制输出条数"></a>3.limit()：限制输出条数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// limit()链式方法</span></span><br><span class="line"><span class="comment">// --------------------------------------------------------</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"><span class="variable">$num</span>=<span class="number">3</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 限制输出数据个数</span></span><br><span class="line">            <span class="variable">$result1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;limit(<span class="variable">$num</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result1</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分页模式输出数据，但要严格计算开始位置</span></span><br><span class="line">            <span class="comment">//如：limit(2,5)：从第3条开始显示5条数据</span></span><br><span class="line">            <span class="comment">// 第一页</span></span><br><span class="line">            <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;limit(<span class="number">0</span>,<span class="variable">$num</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result2</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">            <span class="comment">//第二页</span></span><br><span class="line">            <span class="variable">$result3</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;limit(<span class="variable">$num</span>,<span class="variable">$num</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result3</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-page-：输出分页"><a href="#4-page-：输出分页" class="headerlink" title="4.page()：输出分页"></a>4.page()：输出分页</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// page()链式方法</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------------------------</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">four</span>(<span class="params"><span class="variable">$page</span>=<span class="number">1</span>,<span class="variable">$num</span>=<span class="number">3</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环输出页面</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$page</span>; <span class="variable">$page</span>&lt;<span class="number">5</span>; <span class="variable">$page</span>++)&#123;</span><br><span class="line">                <span class="comment">// page()分页方法，优化了limit()方法，无需进行分页条数计算</span></span><br><span class="line">                <span class="variable">$result1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;page(<span class="variable">$page</span>, <span class="variable">$num</span>)-&gt;select();</span><br><span class="line">                <span class="comment">// 但数据为空，跳出循环</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$result1</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">echo</span> json_encode(<span class="variable">$result1</span>);</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-group-：数据分组"><a href="#5-group-：数据分组" class="headerlink" title="5.group()：数据分组"></a>5.group()：数据分组</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// group()链式方法</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">five</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对某字段进行分组然后统计（按性别分组统计id平均数）</span></span><br><span class="line">            <span class="variable">$result</span> = Db::name(<span class="string">&#x27;two&#x27;</span>)-&gt;group(<span class="string">&#x27;gender&#x27;</span>)-&gt;field(<span class="string">&#x27;gender, avg(id)&#x27;</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="6-having-：分组条件输出"><a href="#6-having-：分组条件输出" class="headerlink" title="6.having()：分组条件输出"></a>6.having()：分组条件输出</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// having()链式方法</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------------</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">six</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对分组后的数据进行筛选</span></span><br><span class="line">            <span class="variable">$result</span> = Db::name(<span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">                    -&gt;group(<span class="string">&#x27;gender&#x27;</span>)</span><br><span class="line">                    -&gt;field(<span class="string">&#x27;gender, avg(id) as avg&#x27;</span>)</span><br><span class="line">                    -&gt;having(<span class="string">&#x27;avg(id)&lt;10&#x27;</span>)</span><br><span class="line">                    -&gt;select();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h2 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h2><h3 id="1-模型设置"><a href="#1-模型设置" class="headerlink" title="1.模型设置"></a>1.模型设置</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果控制器中的类名和model的类名相同，就需要引入,设置别名</span></span><br><span class="line"><span class="comment">// 也可以加入后缀以示区分</span></span><br><span class="line"><span class="keyword">use</span> \<span class="title">app</span>\<span class="title">mod</span>\<span class="title">model</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">UseModel</span>;</span><br></pre></td></tr></table></figure>



<h3 id="2-模型操作"><a href="#2-模型操作" class="headerlink" title="2.模型操作"></a>2.模型操作</h3><p>（1）构建模型：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模型名会自动对应到数据表</span></span><br><span class="line"><span class="comment">// 模型类与表名的差别：1.去除前缀tp_，2.变成大驼峰式命名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置模型的方式</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改变主键</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$pk</span> = <span class="string">&#x27;username&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置其他表</span></span><br><span class="line">        <span class="comment">// User默认绑定了数据库中tp_user这张表，但是也可以让其指向其他表</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">&#x27;tp_two&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模型初始化，与控制器初始化类似，可以初始化渲染内容</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;hello,world&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（2）控制器调用模型进行操作：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  使用模型基本操作数据库</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$result</span> = UseModel::select();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改主键后删除</span></span><br><span class="line"><span class="comment">// -----------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 但主键为id时，可以生效</span></span><br><span class="line">        UseModel::destroy(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主键改为username后，做删除操作</span></span><br><span class="line">        UseModel::destroy(<span class="string">&#x27;李白&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以通过数据库类去操作数据库，但是这样无法使用模型的事件功能</p>
<h2 id="模型添加与删除"><a href="#模型添加与删除" class="headerlink" title="模型添加与删除"></a>模型添加与删除</h2><h3 id="1-插入一条数据"><a href="#1-插入一条数据" class="headerlink" title="1.插入一条数据"></a>1.插入一条数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用模型进行数据添加（一条）</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个模型实例</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入操作，返回布尔值</span></span><br><span class="line">        <span class="variable">$insert</span> = <span class="variable">$user</span>-&gt;save([</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Emiria&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;486&#x27;</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新增后，可输出主键</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$user</span>-&gt;id.<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$insert</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-批量插入数据"><a href="#2-批量插入数据" class="headerlink" title="2.批量插入数据"></a>2.批量插入数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用模型批量插入数据</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insertall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个模型实例</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置数据</span></span><br><span class="line">        <span class="variable">$dataAll</span> =[</span><br><span class="line"></span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Emiria&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;486&#x27;</span></span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Subaru&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;EMT&#x27;</span></span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Eem&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;486&#x27;</span></span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入全部数据，返回插入数据对象</span></span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$user</span>-&gt;saveAll(<span class="variable">$dataAll</span>);</span><br><span class="line">        print_r(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-delete-删除数据"><a href="#3-delete-删除数据" class="headerlink" title="3.delete()删除数据"></a>3.delete()删除数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据删除delete()方法</span></span><br><span class="line"><span class="comment">// -------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定主键值然后删除，返回布尔值</span></span><br><span class="line">        <span class="variable">$user</span> = UseModel::get(<span class="number">41</span>)-&gt;delete();</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$user</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-destroy-删除数据"><a href="#4-destroy-删除数据" class="headerlink" title="4.destroy()删除数据"></a>4.destroy()删除数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据删除destroy()方法</span></span><br><span class="line"><span class="comment">// -------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态方法调用destroy()方法，通过主键删除数据</span></span><br><span class="line">        UseModel::destroy(<span class="number">41</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 也可以进行批量删除</span></span><br><span class="line">        UseModel::destroy([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-条件删除"><a href="#5-条件删除" class="headerlink" title="5.条件删除"></a>5.条件删除</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件删除</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过数据库类的条件查询删除</span></span><br><span class="line">        UseModel::where(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="number">10</span>)-&gt;delete();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 闭包方式删除</span></span><br><span class="line">        UseModel::destroy(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>)</span>&#123;</span><br><span class="line">           <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="number">10</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="模型更新与查询"><a href="#模型更新与查询" class="headerlink" title="模型更新与查询"></a>模型更新与查询</h2><h3 id="1-数据修改"><a href="#1-数据修改" class="headerlink" title="1.数据修改"></a>1.数据修改</h3><p>（1）get方法获取然后修改</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get方法获取数据，然后修改</span></span><br><span class="line"><span class="comment">// 字段出错，没有报错 :(</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// get方法获取主键</span></span><br><span class="line">    <span class="variable">$user</span> = UseModel::get(<span class="number">8</span>);</span><br><span class="line">    <span class="variable">$user</span>-&gt;username = <span class="string">&#x27;鲨掉&#x27;</span>;</span><br><span class="line">    <span class="variable">$user</span>-&gt;password = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">    <span class="comment">// 最后通过save()方法保存修改</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$user</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（2）where()+find()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// where方法结合find()方法获得数据，然后修改</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$user</span> = UseModel::where(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;Eem&#x27;</span>)-&gt;find();</span><br><span class="line">    <span class="variable">$user</span>-&gt;password = <span class="string">&#x27;Subaru!&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$user</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（3）save批量修改数据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接利用save更新数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$user</span>-&gt;save([</span><br><span class="line">        <span class="comment">// 更新的数据</span></span><br><span class="line">        <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;1234&#x27;</span></span><br><span class="line"></span><br><span class="line">    ], [</span><br><span class="line">        <span class="comment">// 定位数据条件</span></span><br><span class="line">        <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用saveAll()方法批量修改数据</span></span><br><span class="line"><span class="comment">// saveAll方法只能通过主键（放在第一位）进行更新</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">four</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line">    <span class="variable">$user</span>-&gt;saveAll([</span><br><span class="line"></span><br><span class="line">        [<span class="string">&#x27;id&#x27;</span>=&gt; <span class="number">7</span>, <span class="string">&#x27;username&#x27;</span>=&gt; <span class="string">&#x27;test1&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;id&#x27;</span>=&gt; <span class="number">8</span>, <span class="string">&#x27;username&#x27;</span>=&gt; <span class="string">&#x27;test2&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;id&#x27;</span>=&gt; <span class="number">9</span>, <span class="string">&#x27;username&#x27;</span>=&gt; <span class="string">&#x27;test3&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>（4）静态方法更新</p>
<p>​    </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用数据库类库的静态方法进行修改</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = [</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;李白&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">34</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    UseModel::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="number">4</span>)-&gt;update(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-数据查询"><a href="#2-数据查询" class="headerlink" title="2.数据查询"></a>2.数据查询</h3><p>模型：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模型名会自动对应到数据表</span></span><br><span class="line"><span class="comment">// 模型类与表名的差别：1.去除前缀tp_，2.变成大驼峰式命名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 从模型内部获取数据（即把在控制器进行的数据库操作移植到模型）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_password</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 返回某个字段</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::where(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="number">10</span>)-&gt;find()-&gt;getAttr(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>控制器：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据查询</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">five</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get()方法查询</span></span><br><span class="line">        <span class="variable">$user</span> = UseModel::get(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$user</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find()方法查询</span></span><br><span class="line">        <span class="variable">$user</span> = UseModel::where(<span class="string">&#x27;id&#x27;</span>,<span class="number">9</span>)-&gt;find();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$user</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从模型内部获取数据（即把在控制器进行的数据库操作移植到模型）</span></span><br><span class="line">        <span class="comment">// 控制器直接调用模型类的方法</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$user</span>-&gt;get_password();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态查询</span></span><br><span class="line">        <span class="variable">$user</span> = UseModel::getById(<span class="string">&#x27;40&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$user</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="模型获取器与修改器"><a href="#模型获取器与修改器" class="headerlink" title="模型获取器与修改器"></a>模型获取器与修改器</h2><h3 id="1-获取器"><a href="#1-获取器" class="headerlink" title="1.获取器"></a>1.获取器</h3><p>（1）模型获取器</p>
<p>在模型中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取器，修改返回字段的值（针对查询操作）</span></span><br><span class="line"><span class="comment">// -----------------------------------</span></span><br><span class="line">    <span class="comment">// 自动获取指定字段的值，get(字段名)Attr</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getStatusAttr</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 过滤器（必须包含该字段所有可能的内容）</span></span><br><span class="line">        <span class="variable">$myGet</span>=[<span class="number">1</span>=&gt;<span class="string">&#x27;正常&#x27;</span>, <span class="number">0</span>=&gt;<span class="string">&#x27;禁用&#x27;</span>, <span class="number">-1</span>=&gt;<span class="string">&#x27;删除&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$myGet</span>[<span class="variable">$value</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>在控制器中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 经过模型的获取器，返回数据</span></span><br><span class="line"><span class="comment">// -----------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$user</span> = UseModel::get(<span class="number">41</span>);</span><br><span class="line">        <span class="comment">// 输出原始值</span></span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$user</span>-&gt;getData());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出经过获取器过滤的值</span></span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$user</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>（2）动态获取器</p>
<p>​    </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动态获取器，直接在控制端过滤数据</span></span><br><span class="line"><span class="comment">// --------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// withAttr方法：指定字段，然后调用方法</span></span><br><span class="line">        <span class="variable">$result</span> = UseModel::withAttr(<span class="string">&#x27;password&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> md5(<span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line">        &#125;)-&gt;select();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>（3）获取器优先级比较</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取器优先级比较</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 模型获取器比动态获取器优先级高</span></span><br><span class="line">    <span class="comment">// 对同一字段过滤时，动态获取器返回值会覆盖模型获取器的返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// withAttr方法：指定字段，然后调用方法</span></span><br><span class="line">        <span class="variable">$result</span> = UseModel::withAttr(<span class="string">&#x27;status&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在模型里的正常，禁止等值会被这里的获取器a，b等值覆盖</span></span><br><span class="line">            <span class="variable">$myGet</span>=[<span class="number">1</span>=&gt;<span class="string">&#x27;a&#x27;</span>, <span class="number">0</span>=&gt;<span class="string">&#x27;b&#x27;</span>, <span class="number">-1</span>=&gt;<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$myGet</span>[<span class="variable">$value</span>];</span><br><span class="line"></span><br><span class="line">        &#125;)-&gt;select();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-修改器"><a href="#2-修改器" class="headerlink" title="2.修改器"></a>2.修改器</h3><p>在模型中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改器，修改插入的值（针对插入操作）</span></span><br><span class="line"><span class="comment">// ------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPasswordAttr</span>(<span class="params"><span class="variable">$vaule</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> md5(<span class="variable">$vaule</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在控制器中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 经过修改器，插入数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">four</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个模型实例</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入操作，返回布尔值</span></span><br><span class="line">        <span class="variable">$insert</span> = <span class="variable">$user</span>-&gt;save([</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Emiria&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;qweee&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="模型搜索器和数据集"><a href="#模型搜索器和数据集" class="headerlink" title="模型搜索器和数据集"></a>模型搜索器和数据集</h2><h3 id="1-模型搜索器"><a href="#1-模型搜索器" class="headerlink" title="1.模型搜索器"></a>1.模型搜索器</h3><p>模型搜索器用于封装字段（或搜索标识）的查询表达式</p>
<h3 id="2-模型数据集"><a href="#2-模型数据集" class="headerlink" title="2.模型数据集"></a>2.模型数据集</h3><p>模型数据集由all()和select()方法返回数据集对象</p>
<h2 id="模型自动时间戳和只读字段"><a href="#模型自动时间戳和只读字段" class="headerlink" title="模型自动时间戳和只读字段"></a>模型自动时间戳和只读字段</h2><h3 id="1-模型自动时间戳"><a href="#1-模型自动时间戳" class="headerlink" title="1.模型自动时间戳"></a>1.模型自动时间戳</h3><p>系统自动创建和更新时间</p>
<h3 id="2-模型只读字段"><a href="#2-模型只读字段" class="headerlink" title="2.模型只读字段"></a>2.模型只读字段</h3><p>设置只读字段，该字段无法被修改</p>
<h2 id="模型类型转换和数据完成"><a href="#模型类型转换和数据完成" class="headerlink" title="模型类型转换和数据完成"></a>模型类型转换和数据完成</h2><h3 id="1-模型类型转换"><a href="#1-模型类型转换" class="headerlink" title="1.模型类型转换"></a>1.模型类型转换</h3><p>通过在模型段设置写入或读取时字段类型进行转换</p>
<h3 id="2-模型数据完成"><a href="#2-模型数据完成" class="headerlink" title="2.模型数据完成"></a>2.模型数据完成</h3><p>模型中的数据可以通过auto，insert，update三种形式完成，设置自动填入默认值</p>
<h2 id="模型查询范围和输出"><a href="#模型查询范围和输出" class="headerlink" title="模型查询范围和输出"></a>模型查询范围和输出</h2><h3 id="1-模型查询范围"><a href="#1-模型查询范围" class="headerlink" title="1.模型查询范围"></a>1.模型查询范围</h3><p>在模型段创建一个封装的查询或写入方法，方便控制器端调用（自定义查询）</p>
<h3 id="2-模型输出方式"><a href="#2-模型输出方式" class="headerlink" title="2.模型输出方式"></a>2.模型输出方式</h3><p>包括：模板输出，数组输出，Json输出</p>
<h2 id="JSON字段"><a href="#JSON字段" class="headerlink" title="JSON字段"></a>JSON字段</h2><h3 id="1-数据库JSON"><a href="#1-数据库JSON" class="headerlink" title="1.数据库JSON"></a>1.数据库JSON</h3><p>在数据库的字段中，设数据类型为json类型，然后可以通过数组写入</p>
<h3 id="2-模型JSON"><a href="#2-模型JSON" class="headerlink" title="2.模型JSON"></a>2.模型JSON</h3><p>使用模型的方法新增包含json数据的字段</p>
<h2 id="软删除"><a href="#软删除" class="headerlink" title="软删除"></a>软删除</h2><p>软删除不是真正删除数据，而是给数据设置一个标记</p>
<h3 id="1-数据库软删除"><a href="#1-数据库软删除" class="headerlink" title="1.数据库软删除"></a>1.数据库软删除</h3><p>创建一个软删除时间的字段，填入时间标记</p>
<h3 id="2-模型软删除"><a href="#2-模型软删除" class="headerlink" title="2.模型软删除"></a>2.模型软删除</h3><p>一般推荐使用模型端进行软删除</p>
<h2 id="模板引擎和视图渲染"><a href="#模板引擎和视图渲染" class="headerlink" title="模板引擎和视图渲染"></a>模板引擎和视图渲染</h2><h3 id="1-模板引擎"><a href="#1-模板引擎" class="headerlink" title="1.模板引擎"></a>1.模板引擎</h3><p>模板引擎渲染视图</p>
<p>模板引擎分成两种，一种是内置的，一种外置作为插件引入的（我们使用内置即可）</p>
<h3 id="2-视图渲染"><a href="#2-视图渲染" class="headerlink" title="2.视图渲染"></a>2.视图渲染</h3><p>通过控制器，把模板引擎的模板页面（视图渲染）加载进来</p>
<h2 id="视图赋值和过滤"><a href="#视图赋值和过滤" class="headerlink" title="视图赋值和过滤"></a>视图赋值和过滤</h2><h3 id="1-视图赋值"><a href="#1-视图赋值" class="headerlink" title="1.视图赋值"></a>1.视图赋值</h3><p>在视图中给模板页面传递值</p>
<h3 id="2-视图过滤"><a href="#2-视图过滤" class="headerlink" title="2.视图过滤"></a>2.视图过滤</h3><p>对模板输入的变量进行过滤</p>
<h2 id="模板变量输出"><a href="#模板变量输出" class="headerlink" title="模板变量输出"></a>模板变量输出</h2><h3 id="1-变量输出"><a href="#1-变量输出" class="headerlink" title="1.变量输出"></a>1.变量输出</h3><p>当模板文件位置创建好后，输出控制器为变量赋值，然后通过<code>&#123;$name&#125;</code>这样的方式在模板输出变量值</p>
<h3 id="2-其他输出"><a href="#2-其他输出" class="headerlink" title="2.其他输出"></a>2.其他输出</h3><h2 id="模板中函数的使用和运算符"><a href="#模板中函数的使用和运算符" class="headerlink" title="模板中函数的使用和运算符"></a>模板中函数的使用和运算符</h2><p>在前端模板页面使用函数和运算符达到灵活地渲染出动态数据</p>
<h3 id="1-使用函数"><a href="#1-使用函数" class="headerlink" title="1.使用函数"></a>1.使用函数</h3><p>提供一些函数方法对数据进行过滤处理，使用管道符进行调用</p>
<h3 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2.运算符"></a>2.运算符</h3><p>在模板中可以对数据进行运算处理</p>
<h2 id="模板的循环标签"><a href="#模板的循环标签" class="headerlink" title="模板的循环标签"></a>模板的循环标签</h2><p>模板循环输出循环块，动态输出数据</p>
<h3 id="1-foreach循环"><a href="#1-foreach循环" class="headerlink" title="1.foreach循环"></a>1.foreach循环</h3><p>控制器通过模型把数据列表筛选出来，再传递到视图，然后再将其渲染出来</p>
<h3 id="2-volist循环"><a href="#2-volist循环" class="headerlink" title="2.volist循环"></a>2.volist循环</h3><p>volist也是将查询的到的数据集通过循环的方式进行输出</p>
<h3 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a>3.for循环</h3><p>for循环可以通过起始和终止值，结合步长实现循环</p>
<h2 id="模板的比较和定义"><a href="#模板的比较和定义" class="headerlink" title="模板的比较和定义"></a>模板的比较和定义</h2><h3 id="1-比较标签"><a href="#1-比较标签" class="headerlink" title="1.比较标签"></a>1.比较标签</h3><p>{eq}{/eq}标签，比较两个值是否相同，相同即输出包含内容</p>
<p>还存在其他不同的标签代替不同的关系运算符对变量进行比较</p>
<h3 id="2-定义标签"><a href="#2-定义标签" class="headerlink" title="2.定义标签"></a>2.定义标签</h3><p>在模板页面定义一个变量，可以使用{assgin}标签，</p>
<h2 id="模板的条件判断标签"><a href="#模板的条件判断标签" class="headerlink" title="模板的条件判断标签"></a>模板的条件判断标签</h2><h3 id="1-switch标签"><a href="#1-switch标签" class="headerlink" title="1.switch标签"></a>1.switch标签</h3><p>实现多个条件判断</p>
<h3 id="2-if标签"><a href="#2-if标签" class="headerlink" title="2.if标签"></a>2.if标签</h3><p>基本条件判断语句</p>
<h3 id="3-范围标签"><a href="#3-范围标签" class="headerlink" title="3.范围标签"></a>3.范围标签</h3><p>{in}和{notin}，判断值是否存在或不存在指定的数据列表中</p>
<h3 id="4-是否存在标签"><a href="#4-是否存在标签" class="headerlink" title="4.是否存在标签"></a>4.是否存在标签</h3><p>是否存在：{present}和{notpresent}判断变量是否已经定义赋值</p>
<p>是否为空：{empty}和{notempty}判断变量是否为空值;</p>
<h2 id="模板的加载包含输出"><a href="#模板的加载包含输出" class="headerlink" title="模板的加载包含输出"></a>模板的加载包含输出</h2><h3 id="1-包含文件"><a href="#1-包含文件" class="headerlink" title="1.包含文件"></a>1.包含文件</h3><p>使用{include}标签加载公用重复的文件，比如头部，尾部和导航部分</p>
<h3 id="2-输出替换"><a href="#2-输出替换" class="headerlink" title="2.输出替换"></a>2.输出替换</h3><p>在模板中常常需要调用一些静态文件，比如css/js。直接写完整的路径引入，比较冗长，所以需要把这些路径整理打包</p>
<h3 id="3-文件加载"><a href="#3-文件加载" class="headerlink" title="3.文件加载"></a>3.文件加载</h3><p>传统方式调用css或js文件时，采用link和script标签实现。tp5提供了{load}标签的方法加载css和js文件</p>
<h2 id="模板的布局和继承"><a href="#模板的布局和继承" class="headerlink" title="模板的布局和继承"></a>模板的布局和继承</h2><h3 id="1-模板布局"><a href="#1-模板布局" class="headerlink" title="1.模板布局"></a>1.模板布局</h3><p>默认不支持模板布局功能，需要在配置文件中开启</p>
<h3 id="2-模板继承"><a href="#2-模板继承" class="headerlink" title="2.模板继承"></a>2.模板继承</h3><p>模板继承的布局方法更加灵活，把内容和样式分离</p>
<h2 id="路由介绍和定义"><a href="#路由介绍和定义" class="headerlink" title="路由介绍和定义"></a>路由介绍和定义</h2><h3 id="1-路由简介"><a href="#1-路由简介" class="headerlink" title="1.路由简介"></a>1.路由简介</h3><p>路由的作用是让url地址更将规范优雅（tp的默认url确实有点过分了）</p>
<p>设置路由对url的检验，验证等一系列操作提供了极大的便利性</p>
<h3 id="2-路由定义"><a href="#2-路由定义" class="headerlink" title="2.路由定义"></a>2.路由定义</h3><p>为url自定义路由规则，让url访问更加简洁和优雅( •̀ ω •́ )✧</p>
<p>在route文件下定制自己专属的路由规则</p>
<h2 id="路由的变量规则和闭包"><a href="#路由的变量规则和闭包" class="headerlink" title="路由的变量规则和闭包"></a>路由的变量规则和闭包</h2><h3 id="1-变量规则"><a href="#1-变量规则" class="headerlink" title="1.变量规则"></a>1.变量规则</h3><p>用户可以通过自定义的路由进行传值，我们通过设置变量规则对输入的值进行过滤出来</p>
<h3 id="2-闭包支持"><a href="#2-闭包支持" class="headerlink" title="2.闭包支持"></a>2.闭包支持</h3><p>闭包支持可以让用户通过url直接执行语句，不需要通过控制器和方法</p>
<h2 id="路由的地址和缓存"><a href="#路由的地址和缓存" class="headerlink" title="路由的地址和缓存"></a>路由的地址和缓存</h2><h3 id="1-路由地址"><a href="#1-路由地址" class="headerlink" title="1.路由地址"></a>1.路由地址</h3><p>路由的地址一般为：控制器/方法，如果是多模块则为：模块/控制器/方法</p>
<h3 id="2-路由缓存"><a href="#2-路由缓存" class="headerlink" title="2.路由缓存"></a>2.路由缓存</h3><p>开启路由缓存可以极高提高性能，需要在部署环境下才有效果</p>
<h2 id="路由的参数和快捷路由"><a href="#路由的参数和快捷路由" class="headerlink" title="路由的参数和快捷路由"></a>路由的参数和快捷路由</h2><h3 id="1-路由参数"><a href="#1-路由参数" class="headerlink" title="1.路由参数"></a>1.路由参数</h3><p>设置路由时，可以设置第三个数组参数，主要实施匹配检测和行为执行（比如检测文件类型，绑定到模型）</p>
<h3 id="2-快捷路由"><a href="#2-快捷路由" class="headerlink" title="2.快捷路由"></a>2.快捷路由</h3><p>快捷路由可以快速给控制器注册路由，还可以更加不同的请求类型设置前缀</p>
<h2 id="路由分组和注解"><a href="#路由分组和注解" class="headerlink" title="路由分组和注解"></a>路由分组和注解</h2><h3 id="1-路由分组"><a href="#1-路由分组" class="headerlink" title="1.路由分组"></a>1.路由分组</h3><p>将相同前缀的路由合并分组，这样可以简化路由定义，提高匹配效率</p>
<p>使用group方法进行分组路由注册</p>
<h3 id="2-注解路由"><a href="#2-注解路由" class="headerlink" title="2.注解路由"></a>2.注解路由</h3><p>tp5提供了一个可以在注解中直接创建路由的方式（默认关闭），在控制器写入路由注解可以达到在router.php写路由同样的效果</p>
<h2 id="路由MISS和跨域请求"><a href="#路由MISS和跨域请求" class="headerlink" title="路由MISS和跨域请求"></a>路由MISS和跨域请求</h2><h3 id="1-MISS路由"><a href="#1-MISS路由" class="headerlink" title="1.MISS路由"></a>1.MISS路由</h3><p>开启强制路由功能，匹配不到相应规则时自动跳转到MISS（控制器中的miss方法）</p>
<h3 id="2-跨域请求"><a href="#2-跨域请求" class="headerlink" title="2.跨域请求"></a>2.跨域请求</h3><p>但不同域名进行跨域请求时，由于浏览器的安全限制，会被拦截</p>
<p>在路由中使用allowCrossDomain()方法可以解除跨域的限制（在restful api 这种前后端分离的架构上，这点尤为重要）</p>
<p>把域名限制添加到头部中可以限制访问的域名</p>
<h2 id="路由的绑定和别名"><a href="#路由的绑定和别名" class="headerlink" title="路由的绑定和别名"></a>路由的绑定和别名</h2><h3 id="1-路由绑定"><a href="#1-路由绑定" class="headerlink" title="1.路由绑定"></a>1.路由绑定</h3><p> 路由绑定可以简化URL和路由规则的定义，可以绑定到模块/控制器/操作</p>
<h3 id="2-路由别名"><a href="#2-路由别名" class="headerlink" title="2.路由别名"></a>2.路由别名</h3><p>给控制器起一个别名，可以通过别名自动生成一系列规则</p>
<h2 id="资源路由"><a href="#资源路由" class="headerlink" title="资源路由"></a>资源路由</h2><p>采用固定的常用方法来实现简化URL功能</p>
<p>系统提供一个命令，方便开发者快速生成一个资源控制器（自动生成包括显示，增删改查等多个操作方法）</p>
<h2 id="域名路由"><a href="#域名路由" class="headerlink" title="域名路由"></a>域名路由</h2><h3 id="1-域名路由"><a href="#1-域名路由" class="headerlink" title="1.域名路由"></a>1.域名路由</h3><p>在电脑host文件中，添加域名映射</p>
<h3 id="2-域名绑定"><a href="#2-域名绑定" class="headerlink" title="2.域名绑定"></a>2.域名绑定</h3><p>在配置文件app.php中可以设置根域名，如果实际域名不符，会解析失败（默认自动获取）</p>
<h2 id="路由的URL生成"><a href="#路由的URL生成" class="headerlink" title="路由的URL生成"></a>路由的URL生成</h2><p>之前的URL都是我们手动设置的，tp5提供了一套自动生成的方法（控制器的方法中写入）</p>
<h2 id="请求对象和信息"><a href="#请求对象和信息" class="headerlink" title="请求对象和信息"></a>请求对象和信息</h2><h3 id="1-请求对象的获取"><a href="#1-请求对象的获取" class="headerlink" title="1.请求对象的获取"></a>1.请求对象的获取</h3><p>（1）继承控制器基类时，会自动被注入Request请求对象的功能</p>
<p>（2）自行注入Request请求对象（依赖注入）</p>
<p>（3）facade方式：应用于没有进行依赖注入的场合</p>
<p>（4）使用助手函数request()方法</p>
<h2 id="请求变量"><a href="#请求变量" class="headerlink" title="请求变量"></a>请求变量</h2><h3 id="1-请求变量"><a href="#1-请求变量" class="headerlink" title="1.请求变量"></a>1.请求变量</h3><p>Request对象支持全局变量的检测，获取和安全过滤（主要作用对象是url）</p>
<h3 id="2-助手函数"><a href="#2-助手函数" class="headerlink" title="2.助手函数"></a>2.助手函数</h3><p>使用助手函数对Request对象提供的方法进行简化</p>
<h3 id="请求类型与请求头"><a href="#请求类型与请求头" class="headerlink" title="请求类型与请求头"></a>请求类型与请求头</h3><h3 id="1-请求类型"><a href="#1-请求类型" class="headerlink" title="1.请求类型"></a>1.请求类型</h3><p>我们用method()方法判断Request的请求类型</p>
<h3 id="2-Http头信息"><a href="#2-Http头信息" class="headerlink" title="2.Http头信息"></a>2.Http头信息</h3><p>使用header()方法输出http头信息，返回是数组类型</p>
<h2 id="伪静态-参数绑定-请求缓存"><a href="#伪静态-参数绑定-请求缓存" class="headerlink" title="伪静态-参数绑定-请求缓存"></a>伪静态-参数绑定-请求缓存</h2><h3 id="1-伪静态"><a href="#1-伪静态" class="headerlink" title="1.伪静态"></a>1.伪静态</h3><p>伪静态技术是指展示出来的是以html一类的静态页面形式，但其实是用动态脚本来处理的。</p>
<h3 id="2-参数绑定"><a href="#2-参数绑定" class="headerlink" title="2.参数绑定"></a>2.参数绑定</h3><p>参数绑定功能：即通过url进行数据传参</p>
<h3 id="3-请求缓存"><a href="#3-请求缓存" class="headerlink" title="3.请求缓存"></a>3.请求缓存</h3><p>请求缓存仅对GET请求有效，并设置有效期</p>
<h2 id="响应重定向和文件下载"><a href="#响应重定向和文件下载" class="headerlink" title="响应重定向和文件下载"></a>响应重定向和文件下载</h2><h3 id="1-响应操作"><a href="#1-响应操作" class="headerlink" title="1.响应操作"></a>1.响应操作</h3><p>（1）响应输出：return, json, view</p>
<p>（2）response方法可以设置第二参数：状态码，也可以调code()方法返回状态码</p>
<p>（3）通过header()设置头文件</p>
<h3 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2.重定向"></a>2.重定向</h3><p>使用redirect()方法可以实现页面重定向，需要return执行（即页面跳转）</p>
<h3 id="3-文件下载"><a href="#3-文件下载" class="headerlink" title="3.文件下载"></a>3.文件下载</h3><p>文件和图片下载都可以使用download()方法即可，路径为实际路径</p>
<h2 id="容器和依赖注入"><a href="#容器和依赖注入" class="headerlink" title="容器和依赖注入"></a>容器和依赖注入</h2><h3 id="1-依赖注入"><a href="#1-依赖注入" class="headerlink" title="1.依赖注入"></a>1.依赖注入</h3><p>依赖注入本质上是指对类的依赖通过构造器完成自动注入</p>
<p>依赖注入：即允许通过类的方法传递对象，并约束了对象类型,二传递的对象背后的那个类被自动绑定并且实例化了</p>
<p>由于控制器的参数都来自于URL请求，普通变量通过参数绑定自动获取，对象变量则是通过依赖注入生成</p>
<h3 id="2-容器"><a href="#2-容器" class="headerlink" title="2.容器"></a>2.容器</h3><p>依赖注入的类统一由容器管理的，大多数情况下是自动绑定和自动实例化</p>
<p>在容器中可以通过bind()和app()来实现手动的绑定和实例化</p>
<h2 id="Facade"><a href="#Facade" class="headerlink" title="Facade"></a>Facade</h2><h3 id="1-创建静态调用"><a href="#1-创建静态调用" class="headerlink" title="1.创建静态调用"></a>1.创建静态调用</h3><p>facade即门面设计模式，为容器的类提供了一种静态调用模式（比如之前使用的Request::，Route::，Db::等等）</p>
<p>在common文件创建容器，在facade文件创建静态调用方法对应common的方法</p>
<h3 id="2-facade核心类库"><a href="#2-facade核心类库" class="headerlink" title="2.facade核心类库"></a>2.facade核心类库</h3><p>上面仅仅是展示了facade运行的原理，在实际运用中我们使用系统提供的facade核心类库即可</p>
<h2 id="钩子和行为"><a href="#钩子和行为" class="headerlink" title="钩子和行为"></a>钩子和行为</h2><h3 id="1-概念理解"><a href="#1-概念理解" class="headerlink" title="1.概念理解"></a>1.概念理解</h3><p>行为：当执行到路由时，对路由的设置进行一系列的检测，这种就叫行为</p>
<p>钩子（事件）：行为执行的位置点，触发点</p>
<h3 id="2-实例展示"><a href="#2-实例展示" class="headerlink" title="2.实例展示"></a>2.实例展示</h3><p>在behavior文件夹下，存放行为类，行为类中设置一个入口方法run()，只要钩子被触发就会执行</p>
<p>钩子需要在配置文件中的tags.php设置，把行为注册到其中</p>
<p>我们也可以在tags.php自定义自己的钩子</p>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="1-定义中间件"><a href="#1-定义中间件" class="headerlink" title="1.定义中间件"></a>1.定义中间件</h3><p>中间件与钩子类似，主要用于拦截和过滤HTTP请求（如URL重定向，权限验证），并进行相应处理</p>
<p>通过命令行，在应用目录下生成一个中间件文件</p>
<p>在配置文件夹下设置中间件配置文件：middleware.php（默认说没有的）</p>
<h3 id="2-前-后置中间件"><a href="#2-前-后置中间件" class="headerlink" title="2.前/后置中间件"></a>2.前/后置中间件</h3><p>前置中间件就是请求阶段进行拦截验证，比如登录判断，跳转，权限等</p>
<p>后置中间件就是请求完毕后在进行验证，比如写入日志</p>
<h3 id="3-路由中间件"><a href="#3-路由中间件" class="headerlink" title="3.路由中间件"></a>3.路由中间件</h3><p>给路由使用的中间件，当检测到路由含指定条件，就触发这个中间件</p>
<h3 id="4-控制器中间件"><a href="#4-控制器中间件" class="headerlink" title="4.控制器中间件"></a>4.控制器中间件</h3><p>可以在控制器中注册中间件，控制器必须继承Controller基类</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="1-异常处理"><a href="#1-异常处理" class="headerlink" title="1.异常处理"></a>1.异常处理</h3><p>（1）使用Exception手动抛出异常</p>
<p>（2）try……cacth对异常捕捉并抛出</p>
<p>（3）用HttpException手动抛出http异常</p>
<p>（4）系统上线要关闭调试模式，进入部署环境下，可以在配置文件设置http错误页面    </p>
<h2 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h2><p>日志处理由Log类完成，记录所有程序中运行的错误记录</p>
<p>系统的报错会自动存入日志中，我们也可以手动添加日志</p>
<h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><h3 id="1-验证器"><a href="#1-验证器" class="headerlink" title="1.验证器"></a>1.验证器</h3><p>系统提供了一条命令直接生成验证器类</p>
<p>在类中我们可以设置规则，定义错误信息</p>
<p>默认情况下，一旦数据验证不符合规则，就会立即停止验证进行返回</p>
<h3 id="2-验证规则"><a href="#2-验证规则" class="headerlink" title="2.验证规则"></a>2.验证规则</h3><p>验证规则有字符串模式和数组模式两种</p>
<p>独立验证（手动调用验证类），直接在控制器中设置验证规则而无需通过验证器</p>
<p>独立验证支持闭包模式，部支持属性方式和多规则方式</p>
<h3 id="3-验证场景"><a href="#3-验证场景" class="headerlink" title="3.验证场景"></a>3.验证场景</h3><p>有时我们并不希望所有的字段都得到验证，这是可以设置一个$scene属性，用来限定场景验证</p>
<p>比如做插入操作时验证3个字段，而做修改操作时只验证两个字段</p>
<h3 id="4-路由验证"><a href="#4-路由验证" class="headerlink" title="4.路由验证"></a>4.路由验证</h3><p>在路由的参数来调用验证类进行验证，和字段验证一样</p>
<p>在路由中绑定验证器</p>
<p>也可以在路由中写入独立的验证器</p>
<h2 id="验证静态调用和令牌"><a href="#验证静态调用和令牌" class="headerlink" title="验证静态调用和令牌"></a>验证静态调用和令牌</h2><h3 id="1-静态调用"><a href="#1-静态调用" class="headerlink" title="1.静态调用"></a>1.静态调用</h3><p>使用facade模式进行调用验证，非常适合单个数据验证</p>
<h3 id="2-表单令牌"><a href="#2-表单令牌" class="headerlink" title="2.表单令牌"></a>2.表单令牌</h3><p>表单令牌就是在表单中增加一个隐藏字段，随机生成一串字符，确认提交的表单不是伪造</p>
<p>这种随机产生的字符和服务器的seesion进行对比，通过则是合法表单</p>
<h2 id="独立验证和内置规则"><a href="#独立验证和内置规则" class="headerlink" title="独立验证和内置规则"></a>独立验证和内置规则</h2><h3 id="1-独立验证"><a href="#1-独立验证" class="headerlink" title="1.独立验证"></a>1.独立验证</h3><p>除了之前提过的独立验证，系统还提供了make方法实现独立验证（tp6废弃）</p>
<h3 id="2-内置规则"><a href="#2-内置规则" class="headerlink" title="2.内置规则"></a>2.内置规则</h3><p>内置规则说系统准备的常用验证规则，而且严格区分大小写</p>
<h2 id="数据库与模型-1"><a href="#数据库与模型-1" class="headerlink" title="数据库与模型"></a>数据库与模型</h2><h2 id="Seesion"><a href="#Seesion" class="headerlink" title="Seesion"></a>Seesion</h2><p>session第一次调用时，会按照config/seesion.php进行初始化</p>
<p>也可以在控制器中设置初始化</p>
<p>使用::set()和::get()方法设置seesion的存取</p>
<p>助手函数也有对应的替代方法</p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>cookie在配置文件cookie.php中会自行初始化</p>
<p>::set()创建一个基本cookie</p>
<h2 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h2><p>数据库操作和模型操作，都使用paginate()方法来实现</p>
<h2 id="上传功能"><a href="#上传功能" class="headerlink" title="上传功能"></a>上传功能</h2><p>Request::file方法文件接收文件，然后调用move方法将文件移动到指定文件夹</p>
<p>可以设置验证器，用于验证文件大小类型等</p>
<p>默认情况下，上传文件是按时间生成命名的</p>
<h2 id="数据库和模型的事件"><a href="#数据库和模型的事件" class="headerlink" title="数据库和模型的事件"></a>数据库和模型的事件</h2><h3 id="1-数据库事件"><a href="#1-数据库事件" class="headerlink" title="1.数据库事件"></a>1.数据库事件</h3><p>当对数据库进行增删改查时，可以触发一些事件进行额外操作，它们可以部署在构造方法中等待激活执行</p>
<p>在控制器端，事件一般可以写在构造方法中，统一管理</p>
<h3 id="2-模型事件"><a href="#2-模型事件" class="headerlink" title="2.模型事件"></a>2.模型事件</h3><p>在模型端，创建init()方法，写入模型事件，可以使用event或快捷方式</p>
<h2 id="关联模型"><a href="#关联模型" class="headerlink" title="关联模型"></a>关联模型</h2><p>关联模型，就是将表与表之间进行关联和对象化，更高效的操作数据</p>
<h3 id="1-一对一关联"><a href="#1-一对一关联" class="headerlink" title="1.一对一关联"></a>1.一对一关联</h3><p>（1）hasOne模式</p>
<p>模型端使用hasone方法创建一对一关联关系，参数1为附表名，参数2为外键，参数3为主键</p>
<p>hasOmne模型适合主表关联附表</p>
<p>在关联表中，-&gt;profile属性方式可以修改数据，删除数据，-&gt;profile()方法方式可以新增数据</p>
<h3 id="2-一对多关联"><a href="#2-一对多关联" class="headerlink" title="2.一对多关联"></a>2.一对多关联</h3><p>hansMany适合主表关联附表，实现一对多查询，可以查多个重复外键的数据</p>
<p>使用-&gt;profile()方法模式加上where可以进一步筛选数据</p>
<p>也可以通过has()和haswhere()通过关联附表查询主表</p>
<h3 id="3-关联预载入"><a href="#3-关联预载入" class="headerlink" title="3.关联预载入"></a>3.关联预载入</h3><p>在关联查询中，当查询次数过大时，我们可以使用关联预载入进行封装，使多次查询变成一次查询</p>
<p>使用with方式进行关联</p>
<p>关联预载入减少查询次数提高了性能，但不支持多次调用</p>
<h3 id="4-关联统计和输出"><a href="#4-关联统计和输出" class="headerlink" title="4.关联统计和输出"></a>4.关联统计和输出</h3><p>关联统计：</p>
<ul>
<li>使用withCount()方法可以统计主表关联附表的个数</li>
<li>使用withMax()等统计主表关于附表的字段统计</li>
</ul>
<p>关联输出：</p>
<p>隐藏，显示，添加主表字段或附属表字段，然后输出</p>
<h3 id="5-多对多关联查询"><a href="#5-多对多关联查询" class="headerlink" title="5.多对多关联查询"></a>5.多对多关联查询</h3><p>一对一场景：一个用户对应一个档案资料（至少两张表）</p>
<p>一对多场景：一个用户可以有多条评论（至少两张表）</p>
<p>多对多场景：一个用户对应多个角色，而一个角色对应多个用户（至少三张表）</p>
<p>多对多关联使用belongsToMany方法，填入其他两个附表模型信息作为参数</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>框架学习</tag>
        <tag>后端</tag>
        <tag>thinkphp</tag>
      </tags>
  </entry>
  <entry>
    <title>软考笔记|知识点全集收录</title>
    <url>/2021/05/22/Exam/%E8%BD%AF%E8%80%83-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%94%B6%E5%BD%95/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041216019.png" alt="image-20210904121613781"></p>
<span id="more"></span>



<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="七层模型"><a href="#七层模型" class="headerlink" title="七层模型"></a>七层模型</h3><h4 id="1-局域网与广域网差异"><a href="#1-局域网与广域网差异" class="headerlink" title="1.局域网与广域网差异"></a>1.局域网与广域网差异</h4><p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041137786.png" alt="image-20210306191127428"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li><p>分析那两台计算机属于同一个局域网</p>
</li>
<li><p>Q和R通过物理层的集线器连接，在同一局域网</p>
</li>
<li><p>P和Q,R通过数据链路层的网桥连接，在同一局域网</p>
</li>
<li><p>S和T通过物理层的交换机连接，在同一局域网</p>
</li>
<li><p>P和S,T通过网络层的路由器连接，不在同一局域网，所以只能在局域网进行的广播无法联系这两组成员，所以答案为B</p>
</li>
</ul>
<p><strong>笔记：</strong></p>
<ul>
<li><p>广播是在同一局域网内计算机传播信息的方法</p>
</li>
<li><p>通过网络层的设备让局域网连接上互联网</p>
</li>
<li><p>不同层的设备与协议</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041137287.png" alt="image-20210306192055182"></p>
</li>
</ul>
<h3 id="网络技术标准与协议"><a href="#网络技术标准与协议" class="headerlink" title="网络技术标准与协议"></a>网络技术标准与协议</h3><h4 id="1-DNS协议"><a href="#1-DNS协议" class="headerlink" title="1.DNS协议"></a>1.DNS协议</h4><p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041137257.png" alt="image-20210306193542004"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li>观察DNS服务器关系，对查询负责到底，还会主动询问其他服务器反馈结果的是递归查询（如图本地域名服务器和中介域名服务器）</li>
<li>不主动询问其他服务器，而是把知道域名对应关系的服务器信息告诉给本地域名服务器，让它去访问，这时迭代查询</li>
</ul>
<p><strong>笔记：</strong></p>
<ul>
<li><p>本地服务器一般采用递归查询，对客户端负责到底，直到查到结果</p>
</li>
<li><p>其他域名服务器一般会用迭代查询，不断踢皮球</p>
</li>
</ul>
<h3 id="网络规划和设计"><a href="#网络规划和设计" class="headerlink" title="网络规划和设计"></a>网络规划和设计</h3><h4 id="1-分层设计"><a href="#1-分层设计" class="headerlink" title="1.分层设计"></a>1.分层设计</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041137296.png" alt="image-20210306195501191"></p>
<h3 id="IP地址与子网划分"><a href="#IP地址与子网划分" class="headerlink" title="IP地址与子网划分"></a>IP地址与子网划分</h3><h4 id="1-子网划分（已知子网个数）"><a href="#1-子网划分（已知子网个数）" class="headerlink" title="1.子网划分（已知子网个数）"></a>1.子网划分（已知子网个数）</h4><p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041137272.png" alt="image-20210307095029964"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li>将IP地址转为二进制，按分类获得初始的网络号，对应子网掩码为1（本题为B类，则前16位为初始的网络号）</li>
<li>划分子网时，需要取部分主机号当作子网号，因<code>2 ^ 5 &gt; 27</code>,则还需要取5个主机号，对应子网掩码为1</li>
<li>最后再将子网掩码转成十进制</li>
<li><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041137576.png" alt="image-20210307094820312"></li>
</ul>
<p><strong>笔记：</strong></p>
<ul>
<li><p>子网掩码基本概念</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041137471.png" alt="image-20210307094031854"></p>
</li>
<li><p>A类IP地址前8个为网络号，B类IP地址前16个为网络号，C类IP地址前24个为网络号（一共32个编号，去掉网络号，剩下的为主机号）</p>
</li>
</ul>
<h4 id="2-子网划分（已知主机数）"><a href="#2-子网划分（已知主机数）" class="headerlink" title="2.子网划分（已知主机数）"></a>2.子网划分（已知主机数）</h4><p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041137186.png" alt="image-20210307095210384"></p>
<ul>
<li>将IP地址转为二进制，按分类获得初始的网络号，对应子网掩码为1（本题为B类，则前16位为初始的网络号）</li>
<li>已知每个子网内主机个数有700台，即需要主机号个数大于700；因有<code>2 ^ 10 - 2 &gt; 700</code>，则 有主机号要有10位</li>
<li>最后再将子网掩码转成十进制</li>
<li><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041137491.png" alt="image-20210307095545832"></li>
</ul>
<h4 id="3-无分类编址"><a href="#3-无分类编址" class="headerlink" title="3.无分类编址"></a>3.无分类编址</h4><p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041137050.png" alt="image-20210307095750040"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li>可以有20个网络号，还有12个为主机号，网络号相同的主机即可说明在同一子网</li>
<li>C类子网前面24个为网络号，该公司中用了20个作为网路号，则剩下4个用于子网的网络号</li>
<li>4个子网号，可以得到<code>2 ^ 4 = 16</code> ，可以有16个子网</li>
</ul>
<p><strong>笔记：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041137616.png" alt="image-20210307100306416"></p>
<h4 id="4-特殊IP地址"><a href="#4-特殊IP地址" class="headerlink" title="4.特殊IP地址"></a>4.特殊IP地址</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041138358.png" alt="image-20210307100907310"></p>
<h2 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h2><h3 id="数据的表示"><a href="#数据的表示" class="headerlink" title="数据的表示"></a>数据的表示</h3><h4 id="1-进制转换"><a href="#1-进制转换" class="headerlink" title="1.进制转换"></a>1.进制转换</h4><p>（1）十进制转二进制（短除法）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041138089.png" alt="image-20210308154845157"></p>
<p>（2）二进制转八进制，十六进制（分割法）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041138576.png" alt="image-20210308154929141"></p>
<h4 id="2-编码问题"><a href="#2-编码问题" class="headerlink" title="2.编码问题"></a>2.编码问题</h4><p> <strong>题目:</strong><br><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041138921.png" alt="image-20210308155706170"></p>
<p><strong>笔记：</strong></p>
<ul>
<li><p>数值的二进制编码有八位，第一位作为符号位，符号位为0为正数，符号位为1为负数</p>
</li>
<li><p>正数的原码，反码，补码相等，补码符号位取反得移码</p>
</li>
<li><p>负数的原码在正数的基础上把符号位改成1；负数原码符号位不变，其他位取反即可得反码；反码加1得补码，补码符号位取反得移码</p>
</li>
<li><p>运算中，应该使用补码和移码进行运算</p>
</li>
<li><p>数值表示范围</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041138609.png" alt="image-20210308160402815"></p>
</li>
</ul>
<h4 id="3-浮点数运算"><a href="#3-浮点数运算" class="headerlink" title="3.浮点数运算"></a>3.浮点数运算</h4><p><strong>解题步骤：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041138471.png" alt="image-20210308162314904"></p>
<p><strong>笔记：</strong></p>
<ul>
<li>对阶的时候，低价转向高阶</li>
<li>结果格式化即保证小数点前的数不为0且小于10</li>
</ul>
<h3 id="计算机结构"><a href="#计算机结构" class="headerlink" title="计算机结构"></a>计算机结构</h3><h4 id="1-主机结构图"><a href="#1-主机结构图" class="headerlink" title="1.主机结构图"></a>1.主机结构图</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041138991.png" alt="image-20210308163334215"></p>
<h4 id="2-计算机体系结构分类法——Flynn"><a href="#2-计算机体系结构分类法——Flynn" class="headerlink" title="2.计算机体系结构分类法——Flynn"></a>2.计算机体系结构分类法——Flynn</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041138103.png" alt="image-20210308163719991"></p>
<h3 id="计算机指令"><a href="#计算机指令" class="headerlink" title="计算机指令"></a>计算机指令</h3><h4 id="1-指令系统比较"><a href="#1-指令系统比较" class="headerlink" title="1.指令系统比较"></a>1.指令系统比较</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041138291.png" alt></p>
<h3 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h3><h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041138336.png" alt="image-20210308164610404"></p>
<h4 id="2-流水线计算"><a href="#2-流水线计算" class="headerlink" title="2.流水线计算"></a>2.流水线计算</h4><p> <strong>题目：</strong><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041138537.png" alt="image-20210308165648795"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li>找执行时间最长的指令作为流水线周期</li>
<li>套入执行指令的时间公式（t1……tk指各个步骤耗费事件，n指需要执行的指令条数，k指执行指令的步骤个数）</li>
</ul>
<h4 id="3-流水线吞吐率计算"><a href="#3-流水线吞吐率计算" class="headerlink" title="3.流水线吞吐率计算"></a>3.流水线吞吐率计算</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041138482.png" alt="image-20210308170423685"></p>
<h4 id="4-流水线加速比"><a href="#4-流水线加速比" class="headerlink" title="4.流水线加速比"></a>4.流水线加速比</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041138523.png" alt="image-20210308170615554"></p>
<h4 id="5-流水线的效率"><a href="#5-流水线的效率" class="headerlink" title="5.流水线的效率"></a>5.流水线的效率</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041138864.png" alt="image-20210308170745307"></p>
<ul>
<li>n个任务占用的时空区：（所有步骤执行花费时间和）* n</li>
<li>k个流水线的总的时空区：流水线花费时间 * k</li>
</ul>
<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><h4 id="1-层次化存储结构"><a href="#1-层次化存储结构" class="headerlink" title="1.层次化存储结构"></a>1.层次化存储结构</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041139642.png" alt="image-20210308172202705"></p>
<h4 id="2-Cache基本内容"><a href="#2-Cache基本内容" class="headerlink" title="2.Cache基本内容"></a>2.Cache基本内容</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041139617.png" alt="image-20210308173547113"></p>
<ul>
<li>t3：系统平均周期</li>
<li>h：Cache访问命中率</li>
<li>t2：主存储器周期时间</li>
<li>t1：Cache周期时间</li>
</ul>
<h4 id="3-局部性原理"><a href="#3-局部性原理" class="headerlink" title="3.局部性原理"></a>3.局部性原理</h4><p>参考博文：<a href="https://blog.csdn.net/iva_brother/article/details/80463702?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161520232616780261983624%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=161520232616780261983624&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~hot_rank-2-80463702.pc_v1_rank_blog_v1&amp;utm_term=%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86">https://blog.csdn.net/iva_brother/article/details/80463702?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161520232616780261983624%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=161520232616780261983624&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~hot_rank-2-80463702.pc_v1_rank_blog_v1&amp;utm_term=%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86</a></p>
<h3 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h3><h4 id="1-分类"><a href="#1-分类" class="headerlink" title="1.分类"></a>1.分类</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041139728.png" alt="image-20210308192530991"></p>
<h4 id="2-编址"><a href="#2-编址" class="headerlink" title="2.编址"></a>2.编址</h4><p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041139025.png" alt="image-20210308192610605"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li><p>地址单元数 = 内存地址之差 + 1</p>
</li>
<li><p>K = 1024</p>
</li>
<li><p>112K * 16 = 28 * X，求X即为所得</p>
</li>
</ul>
<h3 id="磁盘结构与参数"><a href="#磁盘结构与参数" class="headerlink" title="磁盘结构与参数"></a>磁盘结构与参数</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041139722.png" alt="image-20210308202506958"></p>
<p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041139449.png" alt="image-20210309202746496">  </p>
<p><strong>解题过程：</strong></p>
<ul>
<li><p>最长的情况：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041139088.png" alt="image-20210309203546207"></p>
</li>
<li><p>由于磁头读取完数据后，数据要花3ms的时间来处理，由于是单缓存区，下个数据没地方处理，所以磁盘要转完一圈回来读取下个数据</p>
</li>
<li><p>（33 + 3 ）* 10 + 6 = 366</p>
</li>
<li><p>最优情况，信息处理完的同时，磁头转到的下个数据头处，只需要转两圈即可读取所有数据f</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041139401.png" alt="image-20210309203623231"></p>
</li>
</ul>
<h3 id="计算机总线"><a href="#计算机总线" class="headerlink" title="计算机总线"></a>计算机总线</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041139991.png" alt="image-20210309204026006"></p>
<h3 id="系统可靠性分析"><a href="#系统可靠性分析" class="headerlink" title="系统可靠性分析"></a>系统可靠性分析</h3><p>R为失效率</p>
<h4 id="1-串联模型"><a href="#1-串联模型" class="headerlink" title="1.串联模型"></a>1.串联模型</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041139281.png" alt="image-20210309204541620"></p>
<h4 id="2-并联模型"><a href="#2-并联模型" class="headerlink" title="2.并联模型"></a>2.并联模型</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041139352.png" alt="image-20210309204634998"></p>
<h4 id="3-模冗余系统与混合模型"><a href="#3-模冗余系统与混合模型" class="headerlink" title="3.模冗余系统与混合模型"></a>3.模冗余系统与混合模型</h4><p>冗余模型，多个模块进行同样计算，取多数的运算结果作为最终结果</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041139393.png" alt="image-20210309204934942"></p>
<h3 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h3><h4 id="1-检错和纠错机制"><a href="#1-检错和纠错机制" class="headerlink" title="1.检错和纠错机制"></a>1.检错和纠错机制</h4><p>码距：整个编码系统中任意两个码字的最小距离</p>
<p>提高码距可以提高达到检错，纠错的效果</p>
<h4 id="2-循环校验码CRC"><a href="#2-循环校验码CRC" class="headerlink" title="2.循环校验码CRC"></a>2.循环校验码CRC</h4><p>在传输数据后面加上一串校验码，用来检验数据</p>
<p>（1）模2除法（按位做异或操作）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041139282.png" alt="image-20210309210000564"></p>
<p>（2）题目</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041139695.png" alt="image-20210309210210553"></p>
<p>（3）解题步骤</p>
<ul>
<li><p>生成多项式转成二进制形式，看对应二进制位是0还是1（11011）</p>
</li>
<li><p>进行编码时在原始报文后面加（多项式二进制位数-1）个0</p>
</li>
<li><p>进行模二运算后得到的余数即为CRC</p>
</li>
<li><p>CRC代替上一加入的0，最后生成编码后的报文</p>
</li>
</ul>
<h4 id="3-海明校验码"><a href="#3-海明校验码" class="headerlink" title="3.海明校验码"></a>3.海明校验码</h4><p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041140026.png" alt="image-20210309211131147"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li>确定校验码位数，可以用公式<code>2 ^ r &gt;=  信息位数 + r + 1</code>来求</li>
<li>校验码的填入位置为2的n次方</li>
<li>填入信息位</li>
<li>下面计算校验码的内容</li>
<li>将位数转换成2进制相加的形式，再把它们涉及到的信息位做异或操作得对应校验位</li>
<li>下面时纠错机制</li>
<li>正确校验位与错误的校验位做异或操作，为1的为即为出错位，出错位取反即可纠正</li>
</ul>
<h2 id="操作系统基本原理"><a href="#操作系统基本原理" class="headerlink" title="操作系统基本原理"></a>操作系统基本原理</h2><h3 id="操作系统基本知识"><a href="#操作系统基本知识" class="headerlink" title="操作系统基本知识"></a>操作系统基本知识</h3><h4 id="1-操作系统概述"><a href="#1-操作系统概述" class="headerlink" title="1.操作系统概述"></a>1.操作系统概述</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041140506.png" alt="image-20210312074736657"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041140190.png" alt="image-20210312074751379"></p>
<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="1-进程的状态"><a href="#1-进程的状态" class="headerlink" title="1.进程的状态"></a>1.进程的状态</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041143955.png" alt="image-20210312075411086"></p>
<p>三态模型现在已经升级到五态模型</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041143456.png" alt="image-20210312080355516"></p>
<h4 id="2-进程的同步与互斥"><a href="#2-进程的同步与互斥" class="headerlink" title="2.进程的同步与互斥"></a>2.进程的同步与互斥</h4><p> <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041143298.png" alt="image-20210312141729903"></p>
<p>互斥问题：生产者和消费者，只能有一个人进入市场操作</p>
<p>同步问题：生产者必须要等待消费者使用完市场资源，才能继续操作市场</p>
<h4 id="3-PV操作"><a href="#3-PV操作" class="headerlink" title="3.PV操作"></a>3.PV操作</h4><p>（1）PV操作原理</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041143185.png" alt="image-20210312142146098"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041143209.png" alt="image-20210312143331131"></p>
<p>P操作代表请求、申请、锁定、占用的资源</p>
<p>V操作代表释放资源，V操作可以唤醒P操作</p>
<p>（2）PV操作例题</p>
<p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041143611.png" alt="image-20210312143437728"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li><p>分析流程图，购书者进程与收银员进程有同步关系</p>
</li>
<li><p>分析可得，收银员要收费必须要购书者付款来唤醒，且付款为V操作，收费为P操作</p>
</li>
<li><p>收费过程中，购书者也要等到收银员完成操作才能离开书店，所以这时候购书者会有一个P操作等待收银员完成收费的V操作触发</p>
</li>
<li><p>总而言之，等待的一方会有一个P操作，等待另一个进程的V操作触发</p>
</li>
</ul>
<h4 id="4-PV操作与前趋图"><a href="#4-PV操作与前趋图" class="headerlink" title="4.PV操作与前趋图"></a>4.PV操作与前趋图</h4><p> <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041143730.png" alt="image-20210312160701203"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li><p>在前趋图的路径上标上S1-S4</p>
</li>
<li><p>前趋图的S路径的头为V操作，末端为P操作（箭头指向为V，箭头起始点为P）</p>
</li>
<li><p>则易得a为V(S1)，b为V(S2)，c为P(S1)，P(S2)……</p>
</li>
</ul>
<h4 id="5-死锁问题"><a href="#5-死锁问题" class="headerlink" title="5.死锁问题"></a>5.死锁问题</h4><p>参考文章：<a href="https://blog.csdn.net/hd12370/article/details/82814348?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161554879916780255272251%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161554879916780255272251&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-1-82814348.first_rank_v2_pc_rank_v29&amp;utm_term=%E6%AD%BB%E9%94%81">https://blog.csdn.net/hd12370/article/details/82814348?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161554879916780255272251%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161554879916780255272251&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-1-82814348.first_rank_v2_pc_rank_v29&amp;utm_term=%E6%AD%BB%E9%94%81</a></p>
<p>（1）死锁概念</p>
<p>​    所谓死锁，是指多个进程在运行过程中因争夺资源而造成的一    种僵局，当进程处于这种僵持状态时，若无外力作用，它们都    将无法再向前推进。</p>
<p>​        <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041143794.png" alt="image-20210312162421562"></p>
<p>​    </p>
<p>（2）不发生死锁计算</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041143721.png" alt="image-20210312162740249"></p>
<p>​        </p>
<p><strong>解题步骤：</strong></p>
<ul>
<li>每个进程都分配到资源数（n-1），最后还剩下一个资源逐个等待分配</li>
<li>所以总不发生死锁的资源是 每个进程所需（资源数-1）之和 加1</li>
</ul>
<p>（3）死锁的条件</p>
<ul>
<li>互斥条件：进程要求对所分配的资源进行排它性控制，即在一段时间内某资源仅为一进程所占用。</li>
<li>请求和保持条件：当进程因请求资源而阻塞时，对已获得的资源保持不放。</li>
<li>不剥夺条件：进程已获得的资源在未使用完之前，不能剥夺，只能在使用完时由自己释放。</li>
<li>环路等待条件：在发生死锁时，必然存在一个进程–资源的环形链。</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144480.png" alt="image-20210312193446990"></p>
<p>（4）死锁的预防</p>
<ul>
<li>资源一次性分配：一次性分配所有资源，这样就不会再有请求了：（破坏请求条件）</li>
<li>只要有一个资源得不到分配，也不给这个进程分配其他的资源：（破坏请保持条件）</li>
<li>可剥夺资源：即当某进程获得了部分资源，但得不到其它资源，则释放已占有的资源（破坏不可剥夺条件）</li>
</ul>
<p>（5）死锁的避免</p>
<ul>
<li><p>资源有序分配法：系统给每类资源赋予一个编号，每一个进程按编号递增的顺序请求资源，释放则相反（破坏环路等待条件），资源利用率比较低</p>
</li>
<li><p>银行家算法：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144314.png" alt="image-20210312194338267"></p>
</li>
</ul>
<p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144153.png" alt="image-20210312194446263"></p>
<ul>
<li><p>计算系统扣除分配给各个进程的资源后剩余的资源</p>
</li>
<li><p>算得R1=2，R2=1，R3=0</p>
</li>
<li><p>逐个计算每个进程还需资源数，比系统剩余资源数多的往后排</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144321.png" alt="image-20210313094046147"></p>
</li>
<li><p>一个进程完成后会释放资源供下个进程使用</p>
</li>
</ul>
<h3 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h3><h4 id="1-分区存储组织"><a href="#1-分区存储组织" class="headerlink" title="1.分区存储组织"></a>1.分区存储组织</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144210.png" alt="image-20210313094709268"></p>
<ul>
<li>首次适应算法：选择第一块空白内存</li>
<li>最佳适应算法：选择空白内存中小且资源够用的</li>
<li>最差适应算法：选择空白内存中最大的</li>
<li>循环首次适应法：将空白块连成一个环，按顺序依次选择其中一个</li>
</ul>
<h4 id="2-页式存储组织"><a href="#2-页式存储组织" class="headerlink" title="2.页式存储组织"></a>2.页式存储组织</h4><p>（1）基本概念</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144481.png" alt="image-20210313100151803"></p>
<p><strong>页式存储特点：</strong></p>
<ul>
<li>优点：利用率高，碎片小，分配及管理简单</li>
<li>缺点：增加了系统开销，可能产生抖动现象</li>
</ul>
<h4 id="3-页式存储地址换算"><a href="#3-页式存储地址换算" class="headerlink" title="3.页式存储地址换算"></a>3.页式存储地址换算</h4><p>（1）基本思路</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144282.png" alt="image-20210313100613841"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144306.png" alt="image-20210313100941223"></p>
<p>（2）例题</p>
<p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144137.png" alt="image-20210313100709517"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li>利用页面大小将分开逻辑地址为：页号，页内地址</li>
<li>页面大小为4K = 2 ^ 12，则页内地址为12位，则高于12位的部分为页号</li>
<li>则有逻辑地址5A29中，5为页号，A29为页内地址</li>
<li>逻辑地址的业内地址和物理地址的块地址相同</li>
<li>根据页号5查表得块号（页帧号）为6</li>
<li>淘汰页号需要在内存里面（即又页帧号得）的页号中选择，然后选择其中范围位为0的1</li>
</ul>
<h4 id="4-段式存储组织"><a href="#4-段式存储组织" class="headerlink" title="4.段式存储组织"></a>4.段式存储组织</h4><p>（1）基本概念</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144232.png" alt="image-20210313102504217"></p>
<p><strong>段式存储特点：</strong></p>
<p>优点：多道程序共享内存，各段程序修改互不影响</p>
<p>缺点：内存利用率低，内存碎片浪费大</p>
<h4 id="5-段式存储地址换算"><a href="#5-段式存储地址换算" class="headerlink" title="5.段式存储地址换算"></a>5.段式存储地址换算</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144736.png" alt="image-20210313102837273"></p>
<h4 id="6-段页式存储"><a href="#6-段页式存储" class="headerlink" title="6.段页式存储"></a>6.段页式存储</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144187.png" alt="image-20210313102935041"></p>
<h4 id="7-页面置换算法"><a href="#7-页面置换算法" class="headerlink" title="7.页面置换算法"></a>7.页面置换算法</h4><p>（1）页面置换典型算法</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144250.png" alt="image-20210313112624921"></p>
<p>（2）先进先出算法（<strong>FIFO</strong>）</p>
<p>​    <strong>基本思路：</strong> <strong>当需要淘汰一个页面时，总是选择驻留主存时间最长的页面进行淘汰，即先进入主存的页面先淘汰</strong>。其理由是：最早调入主存的页面不再被使用的可能性最大。 即优先淘汰最早进入内存的页面。（往前看）</p>
<p>（3）最近最少使用算法（<strong>LRU</strong>）</p>
<p><strong>基本思路：</strong>利用局部性原理，根据一个作业在执行过程中过去的页面访问历史来推测未来的行为。它认为过去一段时间里不曾被访问过的页面，在最近的将来可能也不会再被访问。所以，这种算法的实质是：<strong>当需要淘汰一个页面时，总是选择在最近一段时间内最久不用的页面予以淘汰</strong>。 即淘汰最近最长时间未访问过的页面（往前看）</p>
<p>（4）例题</p>
<p><strong>两种算法比较：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144578.png" alt="image-20210313113550052"></p>
<p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144778.png" alt="image-20210313113911134"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li>没有使用快表，每读一次程序的块都需要在内存中查表才能读取相应内存块，所以每一块都要进行两次内存的访问（查和读取）</li>
<li>6块 * 2 = 12 (内存访问次数)</li>
<li>指令产生只一次中断，数据横跨两个页面所以有两次中断，所以总缺页中断 = 1 + 2*2 = 5</li>
</ul>
<h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="1-索引文件结构"><a href="#1-索引文件结构" class="headerlink" title="1.索引文件结构"></a>1.索引文件结构</h4><p>（1）原理图</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041144089.png" alt="image-20210313114859091"></p>
<p>（2）例题</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041145620.png" alt="image-20210313114927467"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li>0~4号逻辑块采用直接索引，可在图中看出他们的物理块号为50-89</li>
<li>5号处则是采用了一级地址，经过一层的地址索引，可得到5号存在58的物理号，6号则存在59的物理号中</li>
<li>因为一个物理为1K，每个地址存四个字节，所以每个盘块可以存256个地址</li>
<li>5 + 256 = 261，第一个盘已经存满，所以261号正好存在第二个盘的开始187号</li>
</ul>
<h4 id="2-文件和树形目录结构"><a href="#2-文件和树形目录结构" class="headerlink" title="2.文件和树形目录结构"></a>2.文件和树形目录结构</h4><p>（1）基本概念</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041145512.png" alt="image-20210313120118190"></p>
<h4 id="3-空闲存储空间管理"><a href="#3-空闲存储空间管理" class="headerlink" title="3.空闲存储空间管理"></a>3.空闲存储空间管理</h4><p>（1）基本方法：</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041145434.png" alt="image-20210313120413285"></p>
<p>​    其中位数图法比较重要</p>
<p>（2）位示图法</p>
<p>​    <strong>题目：</strong></p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041145810.png" alt="image-20210313120529830"></p>
<p>​    <strong>解题步骤：</strong></p>
<ul>
<li>(4195 + 1) / 32   = 131.125，所以前131个填满，当前物理块占的位在第132个字中</li>
<li>系统要占用物理块应该在该处填1，可算得在132字中，0位置位4192，所以3位置对应了4195</li>
<li><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041145776.png" alt="image-20210313121126473"></li>
</ul>
<h3 id="设备管理："><a href="#设备管理：" class="headerlink" title="设备管理："></a>设备管理：</h3><h4 id="1-数据传输控制"><a href="#1-数据传输控制" class="headerlink" title="1.数据传输控制"></a>1.数据传输控制</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041145752.png" alt="image-20210313121420639"></p>
<ul>
<li>程序控制方式：对读入的每个字，CPU需要对外设状态进行循环检查，直到确定该字已经在I/O控制器的数据寄存器中</li>
<li>程序中断方式：允许I/O设备主动打断CPU的运行并请求服务，从而“解放”CPU，使得其向I/O控制器发送读命令后可以继续做其他有用的工作</li>
<li>DMA方式：在程序中断方式中，I/O设备与内存之间的数据交换必须要经过CPU中的寄存器，所以速度还是受限，而DMA（直接存储器存取）方式的基本思想是在I/O设备和内存之间开辟直接的数据交换通路，彻底“解放” CPU</li>
</ul>
<h4 id="2-虚设备与SPOOLING技术"><a href="#2-虚设备与SPOOLING技术" class="headerlink" title="2.虚设备与SPOOLING技术"></a>2.虚设备与SPOOLING技术</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041145786.png" alt="image-20210313122125573"></p>
<h3 id="微内核操作系统"><a href="#微内核操作系统" class="headerlink" title="微内核操作系统"></a>微内核操作系统</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041145049.png" alt="image-20210313122222620"></p>
<h2 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h2><h3 id="三级模式-两级映射"><a href="#三级模式-两级映射" class="headerlink" title="三级模式-两级映射"></a>三级模式-两级映射</h3><h4 id="1-原理图"><a href="#1-原理图" class="headerlink" title="1.原理图"></a>1.原理图</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041145129.png" alt="image-20210314143038668"></p>
<h4 id="2-三级模型"><a href="#2-三级模型" class="headerlink" title="2.三级模型"></a>2.三级模型</h4><ul>
<li>用户级数据库–&gt; 外模式(反映了数据库系统的用户观)，它是某个或某几个用户所看到的数据库的数据视图，是与某一应用有关的数据的逻辑表示【视图】</li>
<li>概念级数据库–&gt; 概念模式（反映了数据库系统的整体观），它是由数据库设计者综合所有用户的数据，按照统一的观点构造的全局逻辑结构，是对数据库中全部数据的逻辑结构和特征的总体描述，是所有用户的公共数据视图(全局视图)【表】</li>
<li>物理级数据库 –&gt; 内模式（反映了数据库系统的存储观），它是数据库中全体数据的内部表示或底层描述，描述了数据在存储介质上的存储方式和物理结构，对应着实际存储在外存储介质上的数据库</li>
</ul>
<h4 id="3-两级映射"><a href="#3-两级映射" class="headerlink" title="3.两级映射"></a>3.两级映射</h4><ul>
<li>概念模式/内模式的映像：实现概念模式到内模式之间的相互转换</li>
<li>外模式/概念模式的映像：实现外模式到概念模式之间的相互转换</li>
</ul>
<h3 id="数据库的设计过程"><a href="#数据库的设计过程" class="headerlink" title="数据库的设计过程"></a>数据库的设计过程</h3><h4 id="1-设计流程图"><a href="#1-设计流程图" class="headerlink" title="1.设计流程图"></a>1.设计流程图</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041146383.png" alt="image-20210314145042759"></p>
<h4 id="2-E-R模型"><a href="#2-E-R模型" class="headerlink" title="2.E-R模型"></a>2.E-R模型</h4><p>（1）E-R模型实例</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041146833.png" alt="image-20210314145321377"></p>
<p>（2）E-R图集成方法</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041146911.png" alt="image-20210314145646133"></p>
<p>（3）E-R模型转关系模式</p>
<p>参考文章：<a href="https://blog.csdn.net/gaoying_blogs/article/details/16843515?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161570558016780255285810%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161570558016780255285810&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-2-16843515.first_rank_v2_pc_rank_v29&amp;utm_term=E-R%E6%A8%A1%E5%9E%8B">https://blog.csdn.net/gaoying_blogs/article/details/16843515?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161570558016780255285810%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161570558016780255285810&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-2-16843515.first_rank_v2_pc_rank_v29&amp;utm_term=E-R%E6%A8%A1%E5%9E%8B</a></p>
<p>​    <strong>题目：</strong></p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041146768.png" alt="image-20210314145957620"></p>
<p>​    <strong>解题步骤：</strong></p>
<ul>
<li>分析联系模式：均为多对多模式</li>
<li>所以最少的关系模式为（实体数 +联系数）即4个</li>
</ul>
<p>​    <strong>笔记：</strong></p>
<ul>
<li><p>一个实体型转换为一个关系模式</p>
</li>
<li><p>关系模式个数：一对一型最少的情况为实体数，一对多型最少的情况为实体数，多对多型最少的情况为（实体数 +联系数） </p>
</li>
</ul>
<h4 id="3-关系代数"><a href="#3-关系代数" class="headerlink" title="3.关系代数"></a>3.关系代数</h4><p>（1）关系代数基本运算</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041146874.png" alt="image-20210314151722551"></p>
<p>​    </p>
<p>（2）关系表案例</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041146258.png" alt="image-20210314151914046"></p>
<p>（3）并，交，差运算</p>
<p>​    <strong>并：</strong></p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041146726.png" alt="image-20210314151946909"></p>
<p>​    <strong>交：</strong></p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041147387.png" alt="image-20210314152007727"></p>
<p>​    <strong>差：</strong></p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041147425.png" alt="image-20210314152031086"></p>
<p>​    </p>
<p>（4）笛卡尔积</p>
<p>​    笛卡尔积的字段前3个来自于S1表，后3个来自于S2表</p>
<p>​    笛卡尔积数据实际上是S1,S2两张表的数据进行排列组合（3*3）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041147560.png" alt="image-20210314152223121"></p>
<p>（5）投影，选择</p>
<p>​    <strong>投影：</strong>投影是选列操作（sql语句中的select）</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041147600.png" alt="image-20210314152652982"></p>
<p>​    <strong>选择：</strong>选择某一行（sql语句中的where）</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041147817.png" alt="image-20210314152709163"></p>
<p>（6）联接</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041147633.png" alt="image-20210314153548698"></p>
<p>​    </p>
<p>无条件时做自然联接（相同字段做等值）</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041147977.png" alt="image-20210314153340961"></p>
<p>​    </p>
<h3 id="规范化理论"><a href="#规范化理论" class="headerlink" title="规范化理论"></a>规范化理论</h3><h4 id="1-函数依赖"><a href="#1-函数依赖" class="headerlink" title="1.函数依赖"></a>1.函数依赖</h4><p>例如y=f(x)，x有唯一对应的y则称y函数依赖于x，记作x-&gt;y</p>
<p>（1）部分函数依赖</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041151027.png" alt="image-20210314164841918"></p>
<p>（2）传递函数依赖</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041151802.png" alt="image-20210314165058634"></p>
<h4 id="2-价值与用途"><a href="#2-价值与用途" class="headerlink" title="2.价值与用途"></a>2.价值与用途</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041151521.png" alt="image-20210314193504624"></p>
<p>（1）非规范关系模式案例</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041152794.png" alt="image-20210314193830269">    </p>
<p>（2）<strong>数据冗余：</strong>每一名学生的学号、姓名、系名、系主任这些数据重复多次。每个系与对应的系主任的数据也重复多次——数据冗余过大</p>
<p>（3）<strong>更新异常：</strong>假如李小明转系到法律系，那么为了保证数据库中数据的一致性，需要修改三条记录中系与系主任的数据</p>
<p>（4）<strong>插入异常：</strong>假如学校新建了一个系，但是暂时还没有招收任何学生（比如3月份就新建了，但要等到8月份才招生），那么是无法将系名与系主任的数据单独地添加到数据表中去的    </p>
<p>（5）<strong>删除异常：</strong>假如将某个系中所有学生相关的记录都删除，那么所有系与系主任的数据也就随之消失了（一个系所有学生都没有了，并不表示这个系就没有了）</p>
<h4 id="3-键"><a href="#3-键" class="headerlink" title="3.键"></a>3.键</h4><p>（1）键的关系</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041152273.png" alt="image-20210314194550086"></p>
<p>（2）求候选键</p>
<p>参考文章：<a href="https://blog.csdn.net/as4589sd/article/details/109080855?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161572346216780357243624%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161572346216780357243624&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-6-109080855.first_rank_v2_pc_rank_v29&amp;utm_term=%E6%B1%82%E5%80%99%E9%80%89%E9%94%AE">https://blog.csdn.net/as4589sd/article/details/109080855?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161572346216780357243624%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161572346216780357243624&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-6-109080855.first_rank_v2_pc_rank_v29&amp;utm_term=%E6%B1%82%E5%80%99%E9%80%89%E9%94%AE</a></p>
<p><strong>题目：</strong> </p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041152811.png" alt="image-20210314195241953"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li>将关系模式转换为有向图的模式，从依赖集入手</li>
<li>找到入度为0的属性，然后从该节点开始尝试遍历有向图，如果可以遍历完则该节点为候选键</li>
<li>如果没有入度为0的节点，尝试找既有入度又有出度的节点，如果能遍历完则该节点为候选键</li>
</ul>
<p><strong>笔记：</strong></p>
<ul>
<li><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041152361.png" alt="image-20210314195211462"></li>
</ul>
<h4 id="4-范式"><a href="#4-范式" class="headerlink" title="4.范式"></a>4.范式</h4><p>（1）逐步优化流程图</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041152553.png" alt="image-20210314201120528"></p>
<p>（2）第一范式</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041152888.png" alt="image-20210314201405320"></p>
<p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041152535.png" alt="image-20210314201436636"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li>表中高级职称人数可以分为教授和副教授两个数据项，则不符合第一范式</li>
<li>移除高级职称人数一栏，教授，副教授和系名称同一行即可</li>
</ul>
<p>（3）第二范式</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041152601.png" alt="image-20210314201834412"></p>
<p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041152081.png" alt="image-20210314202011517"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li><p>主键为SN0（学号）与CN0（课程号）的组合键，因为CN0不需要SN0也能确定CREDIT（学分），所以该表存在部分依赖，不符合第一范式</p>
</li>
<li><p>解决方案：将存在部分依赖的项单独建立另一个表，这里是去掉CREDIT一列，和CN0构建另一个表</p>
</li>
</ul>
<p>（4）第三范式</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041152826.png" alt="image-20210314202803052"></p>
<p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041152943.png" alt="image-20210314202833312"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li>非主键中DN0可以确定DNAME，DNAME可以确定LOCATION，所以存在传递依赖，所以不符合第三范式</li>
<li>解决方案：去掉DNAME 与 LOCATION两列，与DN0构建另一个表</li>
</ul>
<p>（5）BC范式</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041152792.png" alt="image-20210314203724832"></p>
<p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041152025.png" alt="image-20210314203737248"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li><p>找出候选键SJ组合键，SP组合键</p>
</li>
<li><p>列出函数依赖：SJ -&gt; T，T-&gt;J，左边的绝对因素中T不是候选键，所以不符合BC范式</p>
</li>
</ul>
<h4 id="5-规范化理论例题"><a href="#5-规范化理论例题" class="headerlink" title="5.规范化理论例题"></a>5.规范化理论例题</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041152074.png" alt="image-20210315080859705"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li>不属于第三范式的情况有：不符合第三范式； 不符合第二范式；题目中明显不存在部分依赖，所以符合第二范式。</li>
<li>要把员工和部门联系起来</li>
</ul>
<h4 id="6-模式分解"><a href="#6-模式分解" class="headerlink" title="6.模式分解"></a>6.模式分解</h4><p>（1）保持函数依赖分解</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041152754.png" alt="image-20210315082410502"></p>
<p>（2）无损分解</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153504.png" alt="image-20210315082432388"></p>
<p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210315082440481.png" alt="image-20210315082440481"></p>
<p>（3）推理法</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153218.png" alt="image-20210315082810615"></p>
<p>是无损分解，可以进行表格联接来进行还原</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153921.png" alt="image-20210315082927373"></p>
<p>（4）表格法</p>
<p><strong>题目：</strong></p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153183.png" alt="image-20210315083425454"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li><p>写成初始表，第一行列出函数依赖中所有的项，第一列列出要分解出的项；然后按行看，是分解项的子项，填入an（n=所处列数）；非子项的填入bmn（m=行数，n=列数）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153458.png" alt="image-20210315083758834"></p>
</li>
<li><p>然后根据函数依赖修改填b的子项</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153241.png" alt="image-20210315084125906"></p>
</li>
</ul>
<p>（5）公式法</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153450.png" alt="image-20210315084311126"></p>
<p><strong>题目：</strong></p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153097.png" alt="image-20210315084336470"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li>该方法只适用于分解成两个的情况</li>
<li>两个集合做交集和差集，并构建出两个关系模式，其中之一能成立，则可证明为无损分解</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153512.png" alt="image-20210315084620536"></p>
<h3 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h3><h4 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153759.png" alt="image-20210315090346349"></p>
<h4 id="2-存在问题"><a href="#2-存在问题" class="headerlink" title="2.存在问题"></a>2.存在问题</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153232.png" alt="image-20210315194405718"></p>
<ul>
<li><strong>丢失更新：</strong>两者同时更新某个数据，后者执行的结果会覆盖前者</li>
<li><strong>不可重复读：</strong>前后验算的结果可能会因其中一个数据的更新而变得不同</li>
<li><strong>读”脏“数据：</strong>读取了临时值</li>
</ul>
<h4 id="3-封锁协议"><a href="#3-封锁协议" class="headerlink" title="3.封锁协议"></a>3.封锁协议</h4><p>参考文章：<a href="https://www.cnblogs.com/conanpeng/p/12854299.html">https://www.cnblogs.com/conanpeng/p/12854299.html</a></p>
<p>为了解决并发控制出现的以上问题，我们采用<strong>封锁协议</strong>来解决</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153115.png" alt="image-20210315195107429"></p>
<h3 id="数据库完整性约束"><a href="#数据库完整性约束" class="headerlink" title="数据库完整性约束"></a>数据库完整性约束</h3><h4 id="1-约束类型"><a href="#1-约束类型" class="headerlink" title="1.约束类型"></a>1.约束类型</h4><p>​    主要用于过滤数据，保证数据可靠性</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153081.png" alt="image-20210315200708816"></p>
<h4 id="2-数据库约束简介"><a href="#2-数据库约束简介" class="headerlink" title="2.数据库约束简介"></a>2.数据库约束简介</h4><ul>
<li>实体完整性约束：如用户设置主键，该字段的值不能重复也不能为空</li>
<li>参照完整性约束：如外键，可以和另一个表中的数据比对，可以为空，但是填入数据在参照表中不存在就需要弹出信息</li>
<li>用户自定义完整性：用户自定义填入数据的类型</li>
<li>触发器：触发器是运行在数据库中的脚本，表的操作事件触发表上的触发器的执行，可以用来过滤不符合条件的数据</li>
</ul>
<h3 id="数据库安全"><a href="#数据库安全" class="headerlink" title="数据库安全"></a>数据库安全</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153383.png" alt="image-20210315201555152"></p>
<h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><h4 id="1-备份类型"><a href="#1-备份类型" class="headerlink" title="1.备份类型"></a>1.备份类型</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153872.png" alt="image-20210315204913135"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153442.png" alt="image-20210315205054584"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153665.png" alt="image-20210315205442073"></p>
<h4 id="2-备份方式对比"><a href="#2-备份方式对比" class="headerlink" title="2.备份方式对比"></a>2.备份方式对比</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041153473.png" alt="image-20210315204939376"></p>
<h4 id="3-日志文件"><a href="#3-日志文件" class="headerlink" title="3.日志文件"></a>3.日志文件</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154993.png" alt="image-20210315205518921"></p>
<h4 id="4-数据库故障与恢复"><a href="#4-数据库故障与恢复" class="headerlink" title="4.数据库故障与恢复"></a>4.数据库故障与恢复</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154657.png" alt="image-20210315205646104"></p>
<h3 id="数据仓库与数据挖掘"><a href="#数据仓库与数据挖掘" class="headerlink" title="数据仓库与数据挖掘"></a>数据仓库与数据挖掘</h3><h4 id="1-关联图"><a href="#1-关联图" class="headerlink" title="1.关联图"></a>1.关联图</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154777.png" alt="image-20210315205934016"></p>
<h4 id="2-数据挖掘分类"><a href="#2-数据挖掘分类" class="headerlink" title="2.数据挖掘分类"></a>2.数据挖掘分类</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154728.png" alt="image-20210315210714712"></p>
<h3 id="反规范化"><a href="#反规范化" class="headerlink" title="反规范化"></a>反规范化</h3><h4 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154459.png" alt="image-20210315210849763"></p>
<h4 id="2-技术手段"><a href="#2-技术手段" class="headerlink" title="2.技术手段"></a>2.技术手段</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154153.png" alt="image-20210315210908917"></p>
<h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><h4 id="1-数据比较"><a href="#1-数据比较" class="headerlink" title="1.数据比较"></a>1.数据比较</h4><p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154393.png" alt="image-20210315211214538"></p>
<h4 id="2-大数据处理系统特征"><a href="#2-大数据处理系统特征" class="headerlink" title="2.大数据处理系统特征"></a>2.大数据处理系统特征</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154971.png" alt="image-20210315211251951"></p>
<h2 id="系统安全分析与设计"><a href="#系统安全分析与设计" class="headerlink" title="系统安全分析与设计"></a>系统安全分析与设计</h2><h3 id="信息系统安全属性"><a href="#信息系统安全属性" class="headerlink" title="信息系统安全属性"></a>信息系统安全属性</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154546.png" alt="image-20210318202510615"></p>
<h3 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h3><h4 id="1-对称加密"><a href="#1-对称加密" class="headerlink" title="1.对称加密"></a>1.对称加密</h4><p>​    加密和解密使用同样的密钥</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154761.png" alt="image-20210318203018930"></p>
<h4 id="2-非对称加密技术"><a href="#2-非对称加密技术" class="headerlink" title="2.非对称加密技术"></a>2.非对称加密技术</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154529.png" alt="image-20210318203037879"></p>
<h3 id="信息摘要"><a href="#信息摘要" class="headerlink" title="信息摘要"></a>信息摘要</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154676.png" alt="image-20210318203513688"></p>
<h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154442.png" alt="image-20210318204118305"></p>
<h3 id="数字信封与PGP"><a href="#数字信封与PGP" class="headerlink" title="数字信封与PGP"></a>数字信封与PGP</h3><h4 id="1-数字信封"><a href="#1-数字信封" class="headerlink" title="1.数字信封"></a>1.数字信封</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154465.png" alt="image-20210318205002055"></p>
<h4 id="2-PGP"><a href="#2-PGP" class="headerlink" title="2.PGP"></a>2.PGP</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154753.png" alt="image-20210318205018048"></p>
<h3 id="设置加密系统"><a href="#设置加密系统" class="headerlink" title="设置加密系统"></a>设置加密系统</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154504.png" alt="image-20210318210102213"></p>
<h3 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h3><h4 id="1-网络各层次安全保障"><a href="#1-网络各层次安全保障" class="headerlink" title="1.网络各层次安全保障"></a>1.网络各层次安全保障</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154177.png" alt="image-20210318210512632"></p>
<h4 id="2-网络威胁与攻击"><a href="#2-网络威胁与攻击" class="headerlink" title="2.网络威胁与攻击"></a>2.网络威胁与攻击</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154162.png" alt="image-20210318211044069"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154515.png" alt="image-20210318211147834"></p>
<h4 id="3-防火墙技术"><a href="#3-防火墙技术" class="headerlink" title="3.防火墙技术"></a>3.防火墙技术</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041155666.png" alt="image-20210318211223131"></p>
<h2 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h2><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p>高级语言类型：解释型语言，编译型语言</p>
<h4 id="1-编译过程"><a href="#1-编译过程" class="headerlink" title="1.编译过程"></a>1.编译过程</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154410.png" alt="image-20210321154849368"></p>
<h3 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h3><h4 id="1-文法样式"><a href="#1-文法样式" class="headerlink" title="1.文法样式"></a>1.文法样式</h4><p>一个形式文法是一个有序四元组G=(V,T,S,P)</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154098.png" alt="image-20210321155251742"></p>
<p>非终结符为大写字母，终结符为小写字母</p>
<h4 id="2-文法类型"><a href="#2-文法类型" class="headerlink" title="2.文法类型"></a>2.文法类型</h4><p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041154708.png" alt="image-20210321155416921"></p>
<h3 id="语法推导树"><a href="#语法推导树" class="headerlink" title="语法推导树"></a>语法推导树</h3><p>（1）特征</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041155242.png" alt="image-20210321155710879"></p>
<p>（2）案例    </p>
<p><strong>题目：</strong></p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041155018.png" alt="image-20210321155732680"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li><code>&#123;a,b&#125;为终结符，&#123;S,A&#125;为非终结符</code></li>
<li>由题可写出以下的推导式子：<code>S-&gt;aAS，S-&gt;a，A-&gt;SbA，A-&gt;SS，A-&gt;ba</code></li>
<li>因为a，b不能推导出任何式子，所以a，b为终结符</li>
<li>将式子展开成推导树</li>
</ul>
<h3 id="有限自动机"><a href="#有限自动机" class="headerlink" title="有限自动机"></a>有限自动机</h3><h4 id="1-原理解析"><a href="#1-原理解析" class="headerlink" title="1.原理解析"></a>1.原理解析</h4><p>有限自动机使用状态转换图表示的</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041155098.png" alt="image-20210321162009480"></p>
<p>该图中S为起点，f为终点（终点有两个圈）</p>
<img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210321162104442.png" alt="image-20210321162104442" style="zoom:200%;">

<p>解析态：找一条从起点到终点的路，路上的数值串起来即得到一个解析态</p>
<h4 id="2-例题"><a href="#2-例题" class="headerlink" title="2.例题"></a>2.例题</h4><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210321164053206.png" alt="image-20210321164053206"></p>
<p>按选项的路径一个个尝试，若能从A到C则该选项正确</p>
<h3 id="正规式"><a href="#正规式" class="headerlink" title="正规式"></a>正规式</h3><p>有限自动机除了可以用上面的状态转换图表示，也可以使用正规式来表达</p>
<p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041155753.png" alt="image-20210321162604694"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li>根据上面的推导式逐个尝试推导（1）中的选项，D选项无法被推导出来</li>
<li>（2）可以根据（1）中不能被推导的D选项判断，（2）中的选项可以推导出D的都会被排除</li>
</ul>
<p><strong>笔记：</strong></p>
<ul>
<li>a|b ：可解析出a或b</li>
<li>（a|b）*：任意个a,b组合都可以表达出来</li>
</ul>
<h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><h4 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041155344.png" alt="image-20210321164325199"></p>
<p>类似于树的遍历</p>
<h4 id="2-案例"><a href="#2-案例" class="headerlink" title="2.案例"></a>2.案例</h4><p><strong>题目：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041155367.png" alt="image-20210321164655382"></p>
<p><strong>解题步骤：</strong></p>
<ul>
<li><p>先由表达式构造树（括号表示先后顺序）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041156651.png" alt="image-20210321164705393"></p>
</li>
<li><p>再按要求遍历这颗树</p>
</li>
</ul>
<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>函数调用有两种类型</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041156601.png" alt="image-20210321164852542"></p>
<h3 id="保护期限"><a href="#保护期限" class="headerlink" title="保护期限"></a>保护期限</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041156649.png" alt="image-20210324171458649"></p>
<h3 id="知识产权人确定"><a href="#知识产权人确定" class="headerlink" title="知识产权人确定"></a>知识产权人确定</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041156250.png" alt="image-20210324171631453"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041156225.png" alt="image-20210324171752251"></p>
<h3 id="侵权判断"><a href="#侵权判断" class="headerlink" title="侵权判断"></a>侵权判断</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041156074.png" alt="image-20210324171953843"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041156161.png" alt="image-20210324172046092"></p>
<h2 id="标准化基础知识"><a href="#标准化基础知识" class="headerlink" title="标准化基础知识"></a>标准化基础知识</h2><h3 id="标准分类"><a href="#标准分类" class="headerlink" title="标准分类"></a>标准分类</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041156169.png" alt="image-20210324172153824"></p>
<h3 id="标准编号"><a href="#标准编号" class="headerlink" title="标准编号"></a>标准编号</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041156146.png" alt="image-20210324172322316"></p>
<h2 id="多媒体基础"><a href="#多媒体基础" class="headerlink" title="多媒体基础"></a>多媒体基础</h2><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041156280.png" alt="image-20210324172825384"></p>
<h3 id="媒体种类"><a href="#媒体种类" class="headerlink" title="媒体种类"></a>媒体种类</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041156354.png" alt="image-20210324174143278"></p>
<h3 id="多媒体计算"><a href="#多媒体计算" class="headerlink" title="多媒体计算"></a>多媒体计算</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157778.png" alt="image-20210324174211249"></p>
<h4 id="1-图像容量计算"><a href="#1-图像容量计算" class="headerlink" title="1.图像容量计算"></a>1.图像容量计算</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157089.png" alt="image-20210324174349827"></p>
<ul>
<li><p>位数为24位，则为3个字节，存储容量为：<code>1600*1200*3B</code></p>
</li>
<li><p>需要化单位为MB，可得一张相片存储的容量</p>
</li>
<li><p>再用总容量除以单位容量</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157527.png" alt="image-20210324174826746"></p>
</li>
</ul>
<h4 id="2-音频容量计算"><a href="#2-音频容量计算" class="headerlink" title="2.音频容量计算"></a>2.音频容量计算</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157255.png" alt="image-20210324174938000"></p>
<ul>
<li>44.1 * 16 * 2 = 1411.2</li>
<li>注意单位即可</li>
</ul>
<h4 id="3-视频容量计算"><a href="#3-视频容量计算" class="headerlink" title="3.视频容量计算"></a>3.视频容量计算</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157026.png" alt="image-20210324175128277"></p>
<ul>
<li>6.4 * 30  * 10 = 1920</li>
</ul>
<h3 id="常见多媒体标准"><a href="#常见多媒体标准" class="headerlink" title="常见多媒体标准"></a>常见多媒体标准</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157145.png" alt="image-20210324175312991"></p>
<h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><h4 id="1-压缩原理"><a href="#1-压缩原理" class="headerlink" title="1.压缩原理"></a>1.压缩原理</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157489.png" alt="image-20210324175859604"></p>
<h4 id="2-有损压缩与无损压缩"><a href="#2-有损压缩与无损压缩" class="headerlink" title="2.有损压缩与无损压缩"></a>2.有损压缩与无损压缩</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157521.png" alt="image-20210324180217920"></p>
<h2 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h2><h3 id="软件开发模型"><a href="#软件开发模型" class="headerlink" title="软件开发模型"></a>软件开发模型</h3><h4 id="1-瀑布模型（SDLC）"><a href="#1-瀑布模型（SDLC）" class="headerlink" title="1.瀑布模型（SDLC）"></a>1.瀑布模型（SDLC）</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157337.png" alt="image-20210329081750551"></p>
<p>适用：需求明确，二次开发</p>
<p>缺陷：需求阶段不明确</p>
<h4 id="2-原型演变"><a href="#2-原型演变" class="headerlink" title="2.原型演变"></a>2.原型演变</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157328.png" alt="image-20210329082152578"></p>
<p>原型针对需求不明确的情况，开发一个简易的展示系统</p>
<p>3.增量模型与螺旋模型</p>
<p>（1）增量模型</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157432.png" alt="image-20210329083037136"></p>
<p>（2）螺旋模型</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157009.png" alt="image-20210329083021339"></p>
<p>特点：风险分析</p>
<h4 id="3-V模型-喷泉模型-RAD"><a href="#3-V模型-喷泉模型-RAD" class="headerlink" title="3.V模型 喷泉模型 RAD"></a>3.V模型 喷泉模型 RAD</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157978.png" alt="image-20210329083142428"></p>
<p><strong>V模型特点</strong>：进行多次测试，需求分析阶段就同步写验收测试和系统测试计划，概要设计阶段同步写集成测试计划，详细设计阶段同步写单元测试计划</p>
<p><strong>喷泉模型特点：</strong>面向对象模型</p>
<p><strong>RAD：</strong>快速构建系统</p>
<h4 id="3-构件组装模型（CBSD）"><a href="#3-构件组装模型（CBSD）" class="headerlink" title="3.构件组装模型（CBSD）"></a>3.构件组装模型（CBSD）</h4><p>模块做成构件，最后组装成系统</p>
<p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210329084052347.png" alt="image-20210329084052347"></p>
<p>特点：提高代码复用性</p>
<h4 id="4-敏捷开发方法"><a href="#4-敏捷开发方法" class="headerlink" title="4.敏捷开发方法"></a>4.敏捷开发方法</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157737.png" alt="image-20210329084130260"></p>
<p>适用场景：适合小项目 </p>
<h3 id="信息系统开发方法"><a href="#信息系统开发方法" class="headerlink" title="信息系统开发方法"></a>信息系统开发方法</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157674.png" alt="image-20210329084528060"></p>
<ul>
<li>结构化方法：开发流程不灵活</li>
<li>面向对象：复用性强</li>
</ul>
<h3 id="需求开发"><a href="#需求开发" class="headerlink" title="需求开发"></a>需求开发</h3><h4 id="1-需求分类和需求获取"><a href="#1-需求分类和需求获取" class="headerlink" title="1.需求分类和需求获取"></a>1.需求分类和需求获取</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157361.png" alt="image-20210329084949330"></p>
<h3 id="结构化设计"><a href="#结构化设计" class="headerlink" title="结构化设计"></a>结构化设计</h3><h4 id="1-基本原则"><a href="#1-基本原则" class="headerlink" title="1.基本原则"></a>1.基本原则</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157616.png" alt="image-20210329085644093"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157499.png" alt="image-20210329085707972"></p>
<p>模块独立性的衡量指标：高内聚，低耦合</p>
<h4 id="2-内聚和耦合"><a href="#2-内聚和耦合" class="headerlink" title="2.内聚和耦合"></a>2.内聚和耦合</h4><p>（1）内聚</p>
<p>内聚即模块中各个部件的连接紧密程度，内聚程度越高越好</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157225.png" alt="image-20210329090028450"></p>
<p>（2）耦合</p>
<p>耦合即模块间的联系的紧密程度，耦合程度越低越好</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157378.png" alt="image-20210329090217178"></p>
<h4 id="3-系统结构"><a href="#3-系统结构" class="headerlink" title="3.系统结构"></a>3.系统结构</h4><p>变换型系统结构</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157808.png" alt="image-20210329090443055"></p>
<h3 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h3><h4 id="1-测试原则与类型"><a href="#1-测试原则与类型" class="headerlink" title="1.测试原则与类型"></a>1.测试原则与类型</h4><p>（1）测试原则</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157171.png" alt="image-20210329165202071"></p>
<p>（2） 测试类型</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157906.png" alt="image-20210329165221282"></p>
<h4 id="2-测试用例设计"><a href="#2-测试用例设计" class="headerlink" title="2.测试用例设计"></a>2.测试用例设计</h4><p>（1）黑盒测试法（只看输入输出，内部不管）</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041157522.png" alt="image-20210329165642740"></p>
<ul>
<li>等价类划分：划分同样类型的逻辑</li>
<li>边界值分析：边界值测试</li>
</ul>
<p>（2）白盒测试</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158012.png" alt="image-20210329165725137"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158643.png" alt="image-20210329165739431"></p>
<ul>
<li><p>路径测试:执行所有可能得穿过程序得控制流程路径,所有路径覆盖</p>
</li>
<li><p>语句测试:至少执行程序中的所有语句一次</p>
</li>
<li><p>条件测试:至少执行程序中的每一分支一次</p>
</li>
</ul>
<h4 id="3-测试阶段"><a href="#3-测试阶段" class="headerlink" title="3.测试阶段"></a>3.测试阶段</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158145.png" alt="image-20210329170209413"></p>
<p>单元测试（内部单个模块测试）-&gt; 集成测试（模块组装联系起来测试）-&gt; 确认测试（确认需求） -&gt; 系统测试</p>
<h4 id="4-McCabe复杂度"><a href="#4-McCabe复杂度" class="headerlink" title="4.McCabe复杂度"></a>4.McCabe复杂度</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158809.png" alt="image-20210329170925116"></p>
<p>  复杂度 = 判断框 + 1</p>
<p>有向图转成键线图：</p>
<ul>
<li>分叉处抽象为节点</li>
</ul>
<h3 id="系统运行与维护"><a href="#系统运行与维护" class="headerlink" title="系统运行与维护"></a>系统运行与维护</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158000.png" alt="image-20210329171507631"></p>
<h3 id="软件过程改进"><a href="#软件过程改进" class="headerlink" title="软件过程改进"></a>软件过程改进</h3><h4 id="1-CMMI"><a href="#1-CMMI" class="headerlink" title="1.CMMI"></a>1.CMMI</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158971.png" alt="image-20210329172027421"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158882.png" alt="image-20210329172034566"></p>
<h4 id="2-项目管理"><a href="#2-项目管理" class="headerlink" title="2.项目管理"></a>2.项目管理</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158033.png" alt="image-20210329172414687"></p>
<p>（1）gantt图</p>
<p><strong>题目:</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158529.png" alt="image-20210329172506560"></p>
<p><strong>解题方法：</strong></p>
<ul>
<li><p>gantt图优点：进度时间清晰明了</p>
</li>
<li><p>gantt图缺点：不能清晰描述任务间的依赖关系</p>
</li>
<li><p>最早开始时间：正向推理，完成最早开始时间后从最后一个节点开始逆推得最晚开始时间</p>
</li>
</ul>
<h4 id="3-风险管理"><a href="#3-风险管理" class="headerlink" title="3.风险管理"></a>3.风险管理</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158035.png" alt="image-20210329173325006"></p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="1-UML基础"><a href="#1-UML基础" class="headerlink" title="1.UML基础"></a>1.UML基础</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158963.png" alt="image-20210401073147043"></p>
<h3 id="2-面向对象设计原则"><a href="#2-面向对象设计原则" class="headerlink" title="2.面向对象设计原则"></a>2.面向对象设计原则</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158785.png" alt="image-20210401073901860"></p>
<ul>
<li><p>单一职责原则：只有一个工作职责</p>
</li>
<li><p>开放-封闭原则：尽量不修改原有类，而是创建新的类</p>
</li>
<li><p>李氏替换原则：不要重写父类，而是使用子类</p>
</li>
<li><p>依赖倒置原则：针对接口，易于扩展和升级</p>
</li>
</ul>
<h3 id="3-设计模式的概念"><a href="#3-设计模式的概念" class="headerlink" title="3.设计模式的概念"></a>3.设计模式的概念</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158659.png" alt="image-20210401074902454"></p>
<ul>
<li>架构模式：最高决策，全局看方案（框架）</li>
<li>设计模型：构建设计</li>
<li>惯用法：与语言相关</li>
</ul>
<h3 id="4-设计模式的分类"><a href="#4-设计模式的分类" class="headerlink" title="4.设计模式的分类"></a>4.设计模式的分类</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158329.png" alt="image-20210401075141629"></p>
<p>关于设计模式可参考文章：<a href="https://www.runoob.com/design-pattern/abstract-factory-pattern.html">https://www.runoob.com/design-pattern/abstract-factory-pattern.html</a></p>
<h3 id="5-创建型模式"><a href="#5-创建型模式" class="headerlink" title="5.创建型模式"></a>5.创建型模式</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158281.png" alt="image-20210401075331145"></p>
<ul>
<li>抽象工厂：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品</li>
<li>构建器模式：一些基本部件不会变，而其组合经常变化的时候（去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的”套餐”）</li>
<li>工厂模式：我们明确地计划不同条件下创建不同实例时（您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现）</li>
<li>原型模式：利用已有的一个原型对象，快速地生成和原型对象一样的实例（细胞分裂）</li>
<li>单例模式：当您想控制实例数目，节省系统资源的时候（Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行）</li>
</ul>
<h3 id="6-结构型模式"><a href="#6-结构型模式" class="headerlink" title="6.结构型模式"></a>6.结构型模式</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158763.png" alt="image-20210401081127485"></p>
<ul>
<li>适配器模式：主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的（美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V）</li>
<li>桥接模式：把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合（墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的）</li>
<li>组合模式：树枝和叶子实现统一接口，树枝内部组合该接口（算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数）</li>
<li>装饰模式：在不想增加很多子类的情况下扩展类（ 1、扩展一个类的功能。 2、动态增加功能，动态撤销）</li>
<li>外观模式： 客户端不需要知道系统内部的复杂联系，整个系统只需提供一个”接待员”即可</li>
</ul>
<h3 id="7-行为模式"><a href="#7-行为模式" class="headerlink" title="7.行为模式"></a>7.行为模式</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041158311.png" alt="image-20210401082208514"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041159386.png" alt="image-20210401082903101"></p>
<ul>
<li><p>职责链模式：有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定</p>
</li>
<li><p>命令模式：在某些场合，比如要对行为进行”记录、撤销/重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将”行为请求者”与”行为实现者”解耦？将一组行为抽象为对象，可以实现二者之间的松耦合</p>
</li>
</ul>
<h2 id="数据流图（DFD）"><a href="#数据流图（DFD）" class="headerlink" title="数据流图（DFD）"></a>数据流图（DFD）</h2><h3 id="1-数据流图基本概念"><a href="#1-数据流图基本概念" class="headerlink" title="1.数据流图基本概念"></a>1.数据流图基本概念</h3><p>（1）数据流图组成</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041159952.png" alt="image-20210407213739002"></p>
<p>（2）数据流图分层</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041159858.png" alt="image-20210407214121210"></p>
<p>结构化开发</p>
<h3 id="2-数据字典"><a href="#2-数据字典" class="headerlink" title="2.数据字典"></a>2.数据字典</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041159801.png" alt="image-20210407214322138"></p>
<h3 id="3-数据流图平衡原则"><a href="#3-数据流图平衡原则" class="headerlink" title="3.数据流图平衡原则"></a>3.数据流图平衡原则</h3><p>（1）父图于子图的 平衡</p>
<p>（2）子图内的平衡</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041159609.png" alt="image-20210407214827079"></p>
<h3 id="4-数据流图解题技巧"><a href="#4-数据流图解题技巧" class="headerlink" title="4.数据流图解题技巧"></a>4.数据流图解题技巧</h3><p>（1）题目分点解析</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041159680.png" alt="image-20210407215045201"></p>
<p>（2）利用数据平衡原则检查</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041159507.png" alt="image-20210407215232985"></p>
<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="1-数据库设计流程"><a href="#1-数据库设计流程" class="headerlink" title="1.数据库设计流程"></a>1.数据库设计流程</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041159440.png" alt="image-20210408074600325"></p>
<h3 id="2-ER模型"><a href="#2-ER模型" class="headerlink" title="2.ER模型"></a>2.ER模型</h3><p>（1）实体间联系类型</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041159777.png" alt="image-20210408074731356"></p>
<p>（2）ER图与关系模型的转换</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041159578.png" alt="image-20210408074840849"></p>
<h2 id="UML建模"><a href="#UML建模" class="headerlink" title="UML建模"></a>UML建模</h2><h3 id="1-用例图"><a href="#1-用例图" class="headerlink" title="1.用例图"></a>1.用例图</h3><ul>
<li>包含关系（extend）</li>
<li>扩展关系（include）</li>
<li>泛化关系</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041159282.png" alt="image-20210411075016076"></p>
<h3 id="2-类图与对象图"><a href="#2-类图与对象图" class="headerlink" title="2.类图与对象图"></a>2.类图与对象图</h3><ul>
<li><p>填类名</p>
</li>
<li><p>填多重度</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041159598.png" alt="image-20210411075231497"></p>
</li>
<li><p>填关系</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041200666.png" alt="image-20210411075347236"></p>
</li>
</ul>
<h3 id="3-顺序图"><a href="#3-顺序图" class="headerlink" title="3.顺序图"></a>3.顺序图</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041159652.png" alt="image-20210411075622175"></p>
<h3 id="4-活动图"><a href="#4-活动图" class="headerlink" title="4.活动图"></a>4.活动图</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041159297.png" alt="image-20210411075717523"></p>
<h3 id="5-状态图"><a href="#5-状态图" class="headerlink" title="5.状态图"></a>5.状态图</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041200177.png" alt="image-20210411075843370"></p>
<h3 id="6-通信图"><a href="#6-通信图" class="headerlink" title="6.通信图"></a>6.通信图</h3><p>顺序图另一种表达方式</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041200089.png" alt="image-20210411080106182"></p>
<h2 id="数据结构及算法运用"><a href="#数据结构及算法运用" class="headerlink" title="数据结构及算法运用"></a>数据结构及算法运用</h2><h3 id="1-分治法"><a href="#1-分治法" class="headerlink" title="1.分治法"></a>1.分治法</h3><p>分治法-&gt;递归技术</p>
<p>（1）分治法使用要求：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041200389.png" alt="image-20210411081822777"></p>
<p>分治法的基本运用：二分查找。快速排序</p>
<h3 id="2-回溯法"><a href="#2-回溯法" class="headerlink" title="2.回溯法"></a>2.回溯法</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041200843.png" alt="image-20210411082526821"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041200522.png" alt="image-20210411082644241"></p>
<p>回溯法通过不断回溯参数，吧所有可能性都尝试一遍直到</p>
<h3 id="3-贪心法"><a href="#3-贪心法" class="headerlink" title="3.贪心法"></a>3.贪心法</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041200609.png" alt="image-20210411083313668"></p>
<p>在有限时间找到满意的解（找不到最优解）</p>
<h3 id="4-动态规划法"><a href="#4-动态规划法" class="headerlink" title="4.动态规划法"></a>4.动态规划法</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041200769.png" alt="image-20210411083609174"></p>
<p>动态规划法会把问题拆成多个子问题，然后会有查表步骤</p>
]]></content>
      <categories>
        <category>考试笔记</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>软考笔记</tag>
        <tag>考试相关</tag>
      </tags>
  </entry>
  <entry>
    <title>硬件开发|stm32使用案例</title>
    <url>/2021/06/18/Hardware/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-stm32%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109041048103.png" alt="image-20210904104854742"></p>
<span id="more"></span>

<h3 id="GPIO库导入"><a href="#GPIO库导入" class="headerlink" title="GPIO库导入"></a>GPIO库导入</h3><p>添加<code>USE_STDPERIPH_DRIVER</code>到C/C++配置中</p>
<h3 id="点亮LED"><a href="#点亮LED" class="headerlink" title="点亮LED"></a>点亮LED</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个GPIO信息结构体（静态变量）</span></span><br><span class="line"><span class="keyword">static</span> GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1.打开GPIOB组的时钟（降低功耗）选择对应外设 */</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 配置开启端口号</span></span><br><span class="line">	<span class="comment">/* 2.配置为输出推挽（多个IO使用位或添加） */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;			<span class="comment">//引脚选择</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	<span class="comment">//端口输出速率（功耗）</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	<span class="comment">//端口模式：推挽输出</span></span><br><span class="line">	GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 选择外设并控制端口号输出信号</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		GPIO_ResetBits(GPIOB, GPIO_Pin_0);	<span class="comment">// PB1低电平</span></span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>定义GPIO_InitTypeDef类型结构体，可修改其端口配置</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109051306282.png" alt="image-20210618200840443"></p>
</li>
<li><p>GPIO_Init函数选择输出外设，并指向端口配置</p>
</li>
<li><p>GPIO_ResetBits选择外设与端口，并输出低电平</p>
</li>
<li><p>GPIO_setBits选择外设与端口，并输出高电平</p>
</li>
</ul>
<h3 id="蜂鸣器"><a href="#蜂鸣器" class="headerlink" title="蜂鸣器"></a>蜂鸣器</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个GPIO信息结构体（静态变量）</span></span><br><span class="line"><span class="keyword">static</span> GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">5000000</span>;</span><br><span class="line">	<span class="keyword">while</span>(i--);	<span class="comment">// 没有任何意义，只是为了消耗时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 蜂鸣器初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BEEP_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/* 1.打开GPIOB组的时钟（降低功耗）选择对应外设 */</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 2.配置为输出推挽（多个IO使用位或添加） */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;			<span class="comment">//引脚选择</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	<span class="comment">//端口输出速率（功耗）</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	<span class="comment">//端口模式：推挽输出</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 3.给蜂鸣器初始化电平（不响）</span></span><br><span class="line">	GPIO_SetBits(GPIOA, GPIO_Pin_1);	<span class="comment">// 不响</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	BEEP_Init();	<span class="comment">// 初始化蜂鸣器</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		GPIO_ResetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">		delay();	<span class="comment">// 延时一段时间</span></span><br><span class="line">		</span><br><span class="line">		GPIO_SetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">		delay();	<span class="comment">// 延时一段时间</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>切换外设为A则可以选择到蜂鸣器（以开发板手册为准）</li>
</ul>
<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个GPIO信息结构体（静态变量）</span></span><br><span class="line"><span class="keyword">static</span> GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_ALL GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">5000000</span>;</span><br><span class="line">	<span class="keyword">while</span>(i--);	<span class="comment">// 没有任何意义，只是为了消耗时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LED初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/* 1.打开GPIOB组的时钟（降低功耗） */</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 2.关闭JTAG引脚映射（PA13/14/15 PB3/4）  */</span></span><br><span class="line">    GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 3.配置为输出推挽（多个IO使用位或添加） */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = LED_ALL;			<span class="comment">//引脚选择</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	<span class="comment">//端口输出速率（功耗）</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	<span class="comment">//端口模式：推挽输出</span></span><br><span class="line">	GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 4.初始化电平（不亮）</span></span><br><span class="line">	GPIO_SetBits(GPIOB, LED_ALL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按键初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KEY_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/* 1.打开GPIO组的时钟（降低功耗） */</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 2.配置为输入（多个IO使用位或添加） */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;			<span class="comment">//引脚选择</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	<span class="comment">// 按钮开关使用浮空输入模式</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LED_Init();		<span class="comment">// 初始化LED</span></span><br><span class="line">	KEY_Init();		<span class="comment">// 初始化按键</span></span><br><span class="line">	GPIO_SetBits(GPIOB, GPIO_Pin_1);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_7)==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			GPIO_ResetBits(GPIOB, GPIO_Pin_1);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			GPIO_SetBits(GPIOB, GPIO_Pin_1);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>浮空输入_IN_FLOATING ——浮空输入，IO的电平状态是不确定的，完全由外部输入决定；如果在该引脚悬空的情况下，读取该端口的电平是不确定的；</li>
<li>带上拉输入IPU——IO内部上拉电阻输入  ==悬空时，处于高电平状态</li>
<li>带下拉输入<em>IPD—— IO内部下拉电阻输入 ==悬空时，处于低电平状态</em></li>
<li>模拟输入AIN ——应用ADC模拟输入，或者低功耗下省电</li>
</ul>
<h3 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h3><h4 id="（1）串口通信电路连接"><a href="#（1）串口通信电路连接" class="headerlink" title="（1）串口通信电路连接"></a>（1）串口通信电路连接</h4><p>串口通信电路连接：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109051307840.png" alt="image-20210622112304168"></p>
<ul>
<li>12，78 为蓝牙串口（手机app）</li>
<li>34为串口调试</li>
<li>56 stm32芯片</li>
</ul>
<p>通讯对象将两边引脚短接即可</p>
<h4 id="（2）重写printf函数"><a href="#（2）重写printf函数" class="headerlink" title="（2）重写printf函数"></a>（2）重写printf函数</h4><p>重写printf函数使其可以将文本输出到串口</p>
<p>输出字符串到串口：</p>
<ul>
<li>配置相关库：</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109051307778.png" alt="image-20210622114338205"></p>
<ul>
<li>重新定义fputc函数，让printf输出数据到串口1<img src="https://raw.staticdn.net/Autovy/Image/master/img/202109051307727.png" alt="image-20210622114454922"></li>
</ul>
<h4 id="（3）串口单字符发送"><a href="#（3）串口单字符发送" class="headerlink" title="（3）串口单字符发送"></a>（3）串口单字符发送</h4><p>（芯片与串口通信）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO信息结构体初始化</span></span><br><span class="line"><span class="comment">// 配置IO口结构体</span></span><br><span class="line">GPIO_InitTypeDef   GPIO_InitStructure;</span><br><span class="line"><span class="comment">// 配置中断结构体</span></span><br><span class="line">EXTI_InitTypeDef   EXTI_InitStructure;</span><br><span class="line"><span class="comment">// 配置中断优先级结构体</span></span><br><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line"><span class="comment">// 配置串口结构题</span></span><br><span class="line">USART_InitTypeDef USART_InitStructure; </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置串口1--&gt;PA9+PA10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usart1_init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1.使能GPIO外设、IO复用时钟、USART2时钟 PA9 和PA10</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//2.配置GPIO + 初始化GPIO</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//  PA2   TX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//复用推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; <span class="comment">//  PA3   RX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  <span class="comment">//浮空输入   PA10  RX</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.配置USART1 + 初始化USART1</span></span><br><span class="line">	USART_InitStructure.USART_BaudRate = bound;<span class="comment">//波特率</span></span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//数据位8位</span></span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//停止位1位</span></span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶检验</span></span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line">	USART_Init(USART1, &amp;USART_InitStructure);		<span class="comment">//把配置信息加载到串口2</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//4.配置NVIC + 初始化NVIC </span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		<span class="comment">//选择串口2的中断</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>;		<span class="comment">//设置抢占优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			<span class="comment">//使能串口2的中断</span></span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);						<span class="comment">//把配置信息加载到中断</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//5.使能串口中断</span></span><br><span class="line">	USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//接收到数据触发中断</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//6.使能串口</span></span><br><span class="line">	USART_Cmd(USART1,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单字符发送到串口</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">    <span class="comment">// 配置串口比特率</span></span><br><span class="line">	usart1_init(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		USART_SendData(USART1,<span class="string">&#x27;h&#x27;</span>);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">		</span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		USART_SendData(USART1,<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">	</span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		USART_SendData(USART1,<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">	</span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		USART_SendData(USART1,<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">		</span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		USART_SendData(USART1,<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">		</span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		USART_SendData(USART1,<span class="string">&#x27;\r&#x27;</span>);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">	</span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		USART_SendData(USART1,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">		</span><br><span class="line">		delay();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="（4）使用printf发送字符串到串口"><a href="#（4）使用printf发送字符串到串口" class="headerlink" title="（4）使用printf发送字符串到串口"></a>（4）使用printf发送字符串到串口</h4><p>（芯片与串口通信）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO信息结构体初始化</span></span><br><span class="line"><span class="comment">// 配置IO口结构体</span></span><br><span class="line">GPIO_InitTypeDef   GPIO_InitStructure;</span><br><span class="line"><span class="comment">// 配置中断结构体</span></span><br><span class="line">EXTI_InitTypeDef   EXTI_InitStructure;</span><br><span class="line"><span class="comment">// 配置中断优先级结构体</span></span><br><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line"><span class="comment">// 配置串口结构题</span></span><br><span class="line">USART_InitTypeDef USART_InitStructure; </span><br><span class="line"></span><br><span class="line"><span class="comment">//重定义fputc函数---》每次发送一个字符到</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> ch, FILE *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//发送字符到串口1</span></span><br><span class="line">	USART_SendData(USART1,ch);</span><br><span class="line">	<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置串口1--&gt;PA9+PA10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usart1_init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1.使能GPIO外设、IO复用时钟、USART2时钟 PA9 和PA10</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//2.配置GPIO + 初始化GPIO</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//  PA2   TX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//复用推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; <span class="comment">//  PA3   RX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  <span class="comment">//浮空输入   PA10  RX</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.配置USART1 + 初始化USART1</span></span><br><span class="line">	USART_InitStructure.USART_BaudRate = bound;<span class="comment">//波特率</span></span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//数据位8位</span></span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//停止位1位</span></span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶检验</span></span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line">	USART_Init(USART1, &amp;USART_InitStructure);		<span class="comment">//把配置信息加载到串口2</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//4.配置NVIC + 初始化NVIC </span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		<span class="comment">//选择串口2的中断</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>;		<span class="comment">//设置抢占优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			<span class="comment">//使能串口2的中断</span></span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);						<span class="comment">//把配置信息加载到中断</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//5.使能串口中断</span></span><br><span class="line">	USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//接收到数据触发中断</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//6.使能串口</span></span><br><span class="line">	USART_Cmd(USART1,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// printf发送字符串到串口</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	usart1_init(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123; </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;good\r\n&quot;</span>);</span><br><span class="line">		delay();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="（5）手机蓝牙与芯片通信"><a href="#（5）手机蓝牙与芯片通信" class="headerlink" title="（5）手机蓝牙与芯片通信"></a>（5）手机蓝牙与芯片通信</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO信息结构体体初始化</span></span><br><span class="line">GPIO_InitTypeDef   GPIO_InitStructure;</span><br><span class="line">EXTI_InitTypeDef   EXTI_InitStructure;</span><br><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure; <span class="comment">//串口配置的信息结构体</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//led-》GPIO信息结构体初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//关闭引脚JTAG复用功能--&gt;PA13、PA14、PA15、PB3、PB4</span></span><br><span class="line">	RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* GPIOB Periph clock enable */</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Configure PD0 and PD2 in output pushpull mode */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = <span class="number">0xff</span> ;<span class="comment">//GPIO_Pin_0~GPIO_Pin_7</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//设置运行频率50MHz</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; <span class="comment">//设置推挽输出</span></span><br><span class="line">	GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_SetBits(GPIOB, <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">10000</span>; j++);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置串口1--&gt;PA9+PA10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usart1_init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1.使能GPIO外设、IO复用时钟、USART2时钟 PA9 和PA10</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//2.配置GPIO + 初始化GPIO</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//  PA2   TX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//复用推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; <span class="comment">//  PA3   RX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  <span class="comment">//浮空输入   PA10  RX</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.配置USART1 + 初始化USART1</span></span><br><span class="line">	USART_InitStructure.USART_BaudRate = bound;<span class="comment">//波特率</span></span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//数据位8位</span></span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//停止位1位</span></span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶检验</span></span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line">	USART_Init(USART1, &amp;USART_InitStructure);		<span class="comment">//把配置信息加载到串口2</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//4.配置NVIC + 初始化NVIC </span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		<span class="comment">//选择串口2的中断</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>;		<span class="comment">//设置抢占优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			<span class="comment">//使能串口2的中断</span></span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);						<span class="comment">//把配置信息加载到中断</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//5.使能串口中断</span></span><br><span class="line">	USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//接收到数据触发中断</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//6.使能串口</span></span><br><span class="line">	USART_Cmd(USART1,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	usart1_init(<span class="number">9600</span>);</span><br><span class="line">	led_init();</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;	</span><br><span class="line">		delay();</span><br><span class="line">        <span class="comment">// data接收来自蓝牙通信的数据（手机app）</span></span><br><span class="line">		<span class="keyword">if</span>(data == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			GPIO_ResetBits(GPIOB, GPIO_Pin_0);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(data == <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			GPIO_SetBits(GPIOB, GPIO_Pin_0);			</span><br><span class="line">		&#125;		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//串口1中断服务函数（可以让主函数中断其他事物回来处理串口1，从而接收到蓝牙发送的数据data）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//判断中断是否产生</span></span><br><span class="line">	<span class="keyword">if</span>( USART_GetITStatus(USART1,USART_IT_RXNE) == SET )<span class="comment">//如果接收到数据</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//接收数据</span></span><br><span class="line">		data = USART_ReceiveData(USART1);<span class="comment">//接收从USART2发送过来的中断，每次接收1个字节</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>( USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line">		<span class="comment">//发送字符到串口1</span></span><br><span class="line">		<span class="comment">//USART_SendData(USART1,n);</span></span><br><span class="line">		<span class="comment">//while(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span></span><br><span class="line">	</span><br><span class="line">		<span class="comment">//清空中断标志位</span></span><br><span class="line">		USART_ClearITPendingBit(USART1,USART_IT_RXNE);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="液晶屏显示"><a href="#液晶屏显示" class="headerlink" title="液晶屏显示"></a>液晶屏显示</h3><h4 id="（1）工具函数与文件"><a href="#（1）工具函数与文件" class="headerlink" title="（1）工具函数与文件"></a>（1）工具函数与文件</h4><h5 id="液晶显示工具包"><a href="#液晶显示工具包" class="headerlink" title="液晶显示工具包"></a>液晶显示工具包</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* oled.c文件实现液晶屏文字显示 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oledfont.h&quot;</span>  	 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SysTick.h&quot;</span></span></span><br><span class="line">  	   </span><br><span class="line">u8 OLED_GRAM[<span class="number">128</span>][<span class="number">8</span>];	 </span><br><span class="line"></span><br><span class="line"><span class="comment">//更新显存到LCD		 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Refresh_Gram</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u8 i,n;		    </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)  </span><br><span class="line">	&#123;  </span><br><span class="line">		OLED_WR_Byte (<span class="number">0xb0</span>+i,OLED_CMD);    <span class="comment">//设置页地址（0~7）</span></span><br><span class="line">		OLED_WR_Byte (<span class="number">0x00</span>,OLED_CMD);      <span class="comment">//设置显示位置—列低地址</span></span><br><span class="line">		OLED_WR_Byte (<span class="number">0x10</span>,OLED_CMD);      <span class="comment">//设置显示位置—列高地址   </span></span><br><span class="line">		<span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); </span><br><span class="line">	&#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向SSD1306写入一个字节。</span></span><br><span class="line"><span class="comment">//dat:要写入的数据/命令</span></span><br><span class="line"><span class="comment">//cmd:数据/命令标志 0,表示命令;1,表示数据;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_WR_Byte</span><span class="params">(u8 dat,u8 cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	u8 i;			  </span><br><span class="line">	OLED_RS=cmd; <span class="comment">//写命令 </span></span><br><span class="line">	OLED_CS=<span class="number">0</span>;		  </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">	&#123;			  </span><br><span class="line">		OLED_SCLK=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(dat&amp;<span class="number">0x80</span>)OLED_SDIN=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> OLED_SDIN=<span class="number">0</span>;</span><br><span class="line">		OLED_SCLK=<span class="number">1</span>;</span><br><span class="line">		dat&lt;&lt;=<span class="number">1</span>;   </span><br><span class="line">	&#125;				 </span><br><span class="line">	OLED_CS=<span class="number">1</span>;		  </span><br><span class="line">	OLED_RS=<span class="number">1</span>;   	  </span><br><span class="line">&#125; </span><br><span class="line"> 	  </span><br><span class="line"><span class="comment">//开启OLED显示    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Display_On</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0X14</span>,OLED_CMD);  <span class="comment">//DCDC ON</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0XAF</span>,OLED_CMD);  <span class="comment">//DISPLAY ON</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭OLED显示     </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Display_Off</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0X10</span>,OLED_CMD);  <span class="comment">//DCDC OFF</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0XAE</span>,OLED_CMD);  <span class="comment">//DISPLAY OFF</span></span><br><span class="line">&#125;		</span><br><span class="line"></span><br><span class="line"><span class="comment">//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Clear</span><span class="params">(<span class="keyword">void</span>)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">	u8 i,n;  </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)<span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)OLED_GRAM[n][i]=<span class="number">0X00</span>;  </span><br><span class="line">	OLED_Refresh_Gram();<span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//画点 </span></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="comment">//t:1 填充 0,清空				   </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_DrawPoint</span><span class="params">(u8 x,u8 y,u8 t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u8 pos,bx,temp=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;<span class="number">127</span>||y&gt;<span class="number">63</span>)<span class="keyword">return</span>;<span class="comment">//超出范围了.</span></span><br><span class="line">	pos=<span class="number">7</span>-y/<span class="number">8</span>;</span><br><span class="line">	bx=y%<span class="number">8</span>;</span><br><span class="line">	temp=<span class="number">1</span>&lt;&lt;(<span class="number">7</span>-bx);</span><br><span class="line">	<span class="keyword">if</span>(t)OLED_GRAM[x][pos]|=temp;</span><br><span class="line">	<span class="keyword">else</span> OLED_GRAM[x][pos]&amp;=~temp;	    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x1,y1,x2,y2 填充区域的对角坐标</span></span><br><span class="line"><span class="comment">//确保x1&lt;=x2;y1&lt;=y2 0&lt;=x1&lt;=127 0&lt;=y1&lt;=63	 	 </span></span><br><span class="line"><span class="comment">//dot:0,清空;1,填充	  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Fill</span><span class="params">(u8 x1,u8 y1,u8 x2,u8 y2,u8 dot)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">	u8 x,y;  </span><br><span class="line">	<span class="keyword">for</span>(x=x1;x&lt;=x2;x++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(y=y1;y&lt;=y2;y++)OLED_DrawPoint(x,y,dot);</span><br><span class="line">	&#125;													    </span><br><span class="line">	OLED_Refresh_Gram();<span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在指定位置显示一个字符,包括部分字符</span></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="comment">//mode:0,反白显示;1,正常显示				 </span></span><br><span class="line"><span class="comment">//size:选择字体 16/12 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowChar</span><span class="params">(u8 x,u8 y,u8 chr,u8 size,u8 mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;      			    </span><br><span class="line">	u8 temp,t,t1;</span><br><span class="line">	u8 y0=y;</span><br><span class="line">	u8 csize=(size/<span class="number">8</span>+((size%<span class="number">8</span>)?<span class="number">1</span>:<span class="number">0</span>))*(size/<span class="number">2</span>);		<span class="comment">//得到字体一个字符对应点阵集所占的字节数</span></span><br><span class="line">	chr=chr-<span class="string">&#x27; &#x27;</span>;<span class="comment">//得到偏移后的值		 </span></span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;csize;t++)</span><br><span class="line">    &#123;   </span><br><span class="line">		<span class="keyword">if</span>(size==<span class="number">12</span>)temp=asc2_1206[chr][t]; 	 	<span class="comment">//调用1206字体</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(size==<span class="number">16</span>)temp=asc2_1608[chr][t];	<span class="comment">//调用1608字体</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(size==<span class="number">24</span>)temp=asc2_2412[chr][t];	<span class="comment">//调用2412字体</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span>;								<span class="comment">//没有的字库</span></span><br><span class="line">        <span class="keyword">for</span>(t1=<span class="number">0</span>;t1&lt;<span class="number">8</span>;t1++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(temp&amp;<span class="number">0x80</span>)OLED_DrawPoint(x,y,mode);</span><br><span class="line">			<span class="keyword">else</span> OLED_DrawPoint(x,y,!mode);</span><br><span class="line">			temp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">			y++;</span><br><span class="line">			<span class="keyword">if</span>((y-y0)==size)</span><br><span class="line">			&#123;</span><br><span class="line">				y=y0;</span><br><span class="line">				x++;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;  	 </span><br><span class="line">    &#125;          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//m^n函数</span></span><br><span class="line"><span class="function">u32 <span class="title">mypow</span><span class="params">(u8 m,u8 n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u32 result=<span class="number">1</span>;	 </span><br><span class="line">	<span class="keyword">while</span>(n--)result*=m;    </span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;				  </span><br><span class="line"><span class="comment">//显示2个数字</span></span><br><span class="line"><span class="comment">//x,y :起点坐标	 </span></span><br><span class="line"><span class="comment">//len :数字的位数</span></span><br><span class="line"><span class="comment">//size:字体大小</span></span><br><span class="line"><span class="comment">//mode:模式	0,填充模式;1,叠加模式</span></span><br><span class="line"><span class="comment">//num:数值(0~4294967295);	 		  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowNum</span><span class="params">(u8 x,u8 y,u32 num,u8 len,u8 size)</span></span></span><br><span class="line"><span class="function"></span>&#123;         	</span><br><span class="line">	u8 t,temp;</span><br><span class="line">	u8 enshow=<span class="number">0</span>;						   </span><br><span class="line">	<span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">	&#123;</span><br><span class="line">		temp=(num/mypow(<span class="number">10</span>,len-t<span class="number">-1</span>))%<span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span>(enshow==<span class="number">0</span>&amp;&amp;t&lt;(len<span class="number">-1</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(temp==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				OLED_ShowChar(x+(size/<span class="number">2</span>)*t,y,<span class="string">&#x27; &#x27;</span>,size,<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> enshow=<span class="number">1</span>; </span><br><span class="line">		 	 </span><br><span class="line">		&#125;</span><br><span class="line">	 	OLED_ShowChar(x+(size/<span class="number">2</span>)*t,y,temp+<span class="string">&#x27;0&#x27;</span>,size,<span class="number">1</span>); </span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//显示字符串</span></span><br><span class="line"><span class="comment">//x,y:起点坐标  </span></span><br><span class="line"><span class="comment">//size:字体大小 </span></span><br><span class="line"><span class="comment">//*p:字符串起始地址 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowString</span><span class="params">(u8 x,u8 y,<span class="keyword">const</span> u8 *p,u8 size)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">    <span class="keyword">while</span>((*p&lt;=<span class="string">&#x27;~&#x27;</span>)&amp;&amp;(*p&gt;=<span class="string">&#x27; &#x27;</span>))<span class="comment">//判断是不是非法字符!</span></span><br><span class="line">    &#123;       </span><br><span class="line">        <span class="keyword">if</span>(x&gt;(<span class="number">128</span>-(size/<span class="number">2</span>)))&#123;x=<span class="number">0</span>;y+=size;&#125;</span><br><span class="line">        <span class="keyword">if</span>(y&gt;(<span class="number">64</span>-size))&#123;y=x=<span class="number">0</span>;OLED_Clear();&#125;</span><br><span class="line">        OLED_ShowChar(x,y,*p,size,<span class="number">1</span>);	 </span><br><span class="line">        x+=size/<span class="number">2</span>;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;  </span><br><span class="line">	</span><br><span class="line">&#125;	</span><br><span class="line"><span class="comment">//初始化SSD1306					    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; 	 				 	 					    </span><br><span class="line">	GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line">  	  </span><br><span class="line">	RCC_APB2PeriphClockCmd(	RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOC, ENABLE );</span><br><span class="line">		  </span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;</span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 <span class="comment">//推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);						    	 </span><br><span class="line"> 	GPIO_SetBits(GPIOA,GPIO_Pin_4|GPIO_Pin_6|GPIO_Pin_3);	<span class="comment">//拉高电平</span></span><br><span class="line">		  </span><br><span class="line">	OLED_WR_Byte(<span class="number">0xAE</span>,OLED_CMD); <span class="comment">//关闭显示</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xD5</span>,OLED_CMD); <span class="comment">//设置时钟分频因子,震荡频率</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">80</span>,OLED_CMD);   <span class="comment">//[3:0],分频因子;[7:4],震荡频率</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA8</span>,OLED_CMD); <span class="comment">//设置驱动路数</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0X3F</span>,OLED_CMD); <span class="comment">//默认0X3F(1/64) </span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xD3</span>,OLED_CMD); <span class="comment">//设置显示偏移</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0X00</span>,OLED_CMD); <span class="comment">//默认为0</span></span><br><span class="line"></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x40</span>,OLED_CMD); <span class="comment">//设置显示开始行 [5:0],行数.</span></span><br><span class="line">													    </span><br><span class="line">	OLED_WR_Byte(<span class="number">0x8D</span>,OLED_CMD); <span class="comment">//电荷泵设置</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x14</span>,OLED_CMD); <span class="comment">//bit2，开启/关闭</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x20</span>,OLED_CMD); <span class="comment">//设置内存地址模式</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x02</span>,OLED_CMD); <span class="comment">//[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA1</span>,OLED_CMD); <span class="comment">//段重定义设置,bit0:0,0-&gt;0;1,0-&gt;127;</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xC0</span>,OLED_CMD); <span class="comment">//设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]-&gt;COM0;N:驱动路数</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xDA</span>,OLED_CMD); <span class="comment">//设置COM硬件引脚配置</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x12</span>,OLED_CMD); <span class="comment">//[5:4]配置</span></span><br><span class="line">		 </span><br><span class="line">	OLED_WR_Byte(<span class="number">0x81</span>,OLED_CMD); <span class="comment">//对比度设置</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xEF</span>,OLED_CMD); <span class="comment">//1~255;默认0X7F (亮度设置,越大越亮)</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xD9</span>,OLED_CMD); <span class="comment">//设置预充电周期</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xf1</span>,OLED_CMD); <span class="comment">//[3:0],PHASE 1;[7:4],PHASE 2;</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xDB</span>,OLED_CMD); <span class="comment">//设置VCOMH 电压倍率</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x30</span>,OLED_CMD); <span class="comment">//[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;</span></span><br><span class="line"></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA4</span>,OLED_CMD); <span class="comment">//全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA6</span>,OLED_CMD); <span class="comment">//设置显示方式;bit0:1,反相显示;0,正常显示	    						   </span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xAF</span>,OLED_CMD); <span class="comment">//开启显示	 </span></span><br><span class="line">	OLED_Clear();</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h5 id="精准延时工具包"><a href="#精准延时工具包" class="headerlink" title="精准延时工具包"></a>精准延时工具包</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*SysTick.c文件实现精准延时函数*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SysTick.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> u8  fac_us=<span class="number">0</span>;							<span class="comment">//us延时倍乘数			   </span></span><br><span class="line"><span class="keyword">static</span> u16 fac_ms=<span class="number">0</span>;							<span class="comment">//ms延时倍乘数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化延迟函数</span></span><br><span class="line"><span class="comment">//SYSTICK的时钟固定为AHB时钟的1/8</span></span><br><span class="line"><span class="comment">//SYSCLK:系统时钟频率</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Init</span><span class="params">(u8 SYSCLK)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); </span><br><span class="line">	fac_us=SYSCLK/<span class="number">8</span>;					</span><br><span class="line">	fac_ms=(u16)fac_us*<span class="number">1000</span>;				   </span><br><span class="line">&#125;								    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u32 nus)</span></span></span><br><span class="line"><span class="function"></span>&#123;		</span><br><span class="line">	u32 temp;	    	 </span><br><span class="line">	SysTick-&gt;LOAD=nus*fac_us; <span class="comment">//时间加载	  		 </span></span><br><span class="line">	SysTick-&gt;VAL=<span class="number">0x00</span>;        <span class="comment">//清空计数器</span></span><br><span class="line">	SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk ;          <span class="comment">//开始倒数	 </span></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		temp=SysTick-&gt;CTRL;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(temp&amp;<span class="number">0x01</span>&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)));<span class="comment">//等待时间到达   </span></span><br><span class="line">	SysTick-&gt;CTRL&amp;=~SysTick_CTRL_ENABLE_Msk;       <span class="comment">//关闭计数器</span></span><br><span class="line">	SysTick-&gt;VAL =<span class="number">0X00</span>;       <span class="comment">//清空计数器	 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时nms</span></span><br><span class="line"><span class="comment">//注意nms的范围</span></span><br><span class="line"><span class="comment">//SysTick-&gt;LOAD为24位寄存器,所以,最大延时为:</span></span><br><span class="line"><span class="comment">//nms&lt;=0xffffff*8*1000/SYSCLK</span></span><br><span class="line"><span class="comment">//SYSCLK单位为Hz,nms单位为ms</span></span><br><span class="line"><span class="comment">//对72M条件下,nms&lt;=1864 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u16 nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;	 		  	  </span><br><span class="line">	u32 temp;		   </span><br><span class="line">	SysTick-&gt;LOAD=(u32)nms*fac_ms;<span class="comment">//时间加载(SysTick-&gt;LOAD为24bit)</span></span><br><span class="line">	SysTick-&gt;VAL =<span class="number">0x00</span>;           <span class="comment">//清空计数器</span></span><br><span class="line">	SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk ;          <span class="comment">//开始倒数  </span></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		temp=SysTick-&gt;CTRL;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(temp&amp;<span class="number">0x01</span>&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)));<span class="comment">//等待时间到达   </span></span><br><span class="line">	SysTick-&gt;CTRL&amp;=~SysTick_CTRL_ENABLE_Msk;       <span class="comment">//关闭计数器</span></span><br><span class="line">	SysTick-&gt;VAL =<span class="number">0X00</span>;       <span class="comment">//清空计数器	  	    </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="（2）数字与字母显示"><a href="#（2）数字与字母显示" class="headerlink" title="（2）数字与字母显示"></a>（2）数字与字母显示</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">1000</span>;</span><br><span class="line">	u8 buf[<span class="number">10</span>] = <span class="string">&quot;ZhangSan&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	SysTick_Init(<span class="number">72</span>);	<span class="comment">// 初始化延时（72MHz芯片主频）</span></span><br><span class="line">	OLED_Init();	<span class="comment">//  初始化OLED</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">			</span><br><span class="line">		OLED_ShowNum(<span class="number">0</span>,<span class="number">0</span>,num,<span class="number">4</span>,<span class="number">16</span>);<span class="comment">//显示数字 </span></span><br><span class="line">		OLED_ShowString(<span class="number">0</span>,<span class="number">16</span>,buf,<span class="number">16</span>); </span><br><span class="line">		OLED_ShowChar(<span class="number">50</span>,<span class="number">0</span>,<span class="string">&#x27;S&#x27;</span>, <span class="number">16</span>, <span class="number">1</span>);</span><br><span class="line">		OLED_Refresh_Gram();    <span class="comment">//更新数据到OLED  </span></span><br><span class="line">		</span><br><span class="line">			</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>调用SysTick_Init()函数延时规定的时间</p>
</li>
<li><p>调用oled.c定义的OLED_ShowNum等方法</p>
</li>
<li><p>相关参数可以查看oled.c内的定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//x,y :起点坐标	</span></span><br><span class="line"><span class="comment">// num or char : 要显示的数据内容或地址</span></span><br><span class="line"><span class="comment">// len字长（一般填16）</span></span><br><span class="line"><span class="comment">// size：字体大小（一般填16）</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="（3）汉字显示"><a href="#（3）汉字显示" class="headerlink" title="（3）汉字显示"></a>（3）汉字显示</h4><h5 id="延时工具包"><a href="#延时工具包" class="headerlink" title="延时工具包"></a>延时工具包</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////// 	 </span></span><br><span class="line"><span class="comment">//如果使用ucos,则包括下面的头文件即可.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_UCOS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;includes.h&quot;</span>					<span class="comment">//ucos 使用	  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> u8  fac_us=<span class="number">0</span>;<span class="comment">//us延时倍乘数</span></span><br><span class="line"><span class="keyword">static</span> u16 fac_ms=<span class="number">0</span>;<span class="comment">//ms延时倍乘数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_CRITICAL_METHOD 	<span class="comment">//如果OS_CRITICAL_METHOD定义了,说明使用ucosII了.</span></span></span><br><span class="line"><span class="comment">//systick中断服务函数,使用ucos时用到</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;				   </span><br><span class="line">	OSIntEnter();		<span class="comment">//进入中断</span></span><br><span class="line">    OSTimeTick();       <span class="comment">//调用ucos的时钟服务程序               </span></span><br><span class="line">    OSIntExit();        <span class="comment">//触发任务切换软中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化延迟函数</span></span><br><span class="line"><span class="comment">//当使用ucos的时候,此函数会初始化ucos的时钟节拍</span></span><br><span class="line"><span class="comment">//SYSTICK的时钟固定为HCLK时钟的1/8</span></span><br><span class="line"><span class="comment">//SYSCLK:系统时钟</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_init</span><span class="params">()</span>	 </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_CRITICAL_METHOD 	<span class="comment">//如果OS_CRITICAL_METHOD定义了,说明使用ucosII了.</span></span></span><br><span class="line">	u32 reload;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);	<span class="comment">//选择外部时钟  HCLK/8</span></span><br><span class="line">	fac_us=SystemCoreClock/<span class="number">8000000</span>;	<span class="comment">//为系统时钟的1/8  </span></span><br><span class="line">	 </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_CRITICAL_METHOD 	<span class="comment">//如果OS_CRITICAL_METHOD定义了,说明使用ucosII了.</span></span></span><br><span class="line">	reload=SystemCoreClock/<span class="number">8000000</span>;		<span class="comment">//每秒钟的计数次数 单位为K	   </span></span><br><span class="line">	reload*=<span class="number">1000000</span>/OS_TICKS_PER_SEC;<span class="comment">//根据OS_TICKS_PER_SEC设定溢出时间</span></span><br><span class="line">							<span class="comment">//reload为24位寄存器,最大值:16777216,在72M下,约合1.86s左右	</span></span><br><span class="line">	fac_ms=<span class="number">1000</span>/OS_TICKS_PER_SEC;<span class="comment">//代表ucos可以延时的最少单位	   </span></span><br><span class="line">	SysTick-&gt;CTRL|=SysTick_CTRL_TICKINT_Msk;   	<span class="comment">//开启SYSTICK中断</span></span><br><span class="line">	SysTick-&gt;LOAD=reload; 	<span class="comment">//每1/OS_TICKS_PER_SEC秒中断一次	</span></span><br><span class="line">	SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk;   	<span class="comment">//开启SYSTICK    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">	fac_ms=(u16)fac_us*<span class="number">1000</span>;<span class="comment">//非ucos下,代表每个ms需要的systick时钟数   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;								    </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_CRITICAL_METHOD	<span class="comment">//使用了ucos</span></span></span><br><span class="line"><span class="comment">//延时nus</span></span><br><span class="line"><span class="comment">//nus为要延时的us数.		    								   </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u32 nus)</span></span></span><br><span class="line"><span class="function"></span>&#123;		</span><br><span class="line">	u32 ticks;</span><br><span class="line">	u32 told,tnow,tcnt=<span class="number">0</span>;</span><br><span class="line">	u32 reload=SysTick-&gt;LOAD;	<span class="comment">//LOAD的值	    	 </span></span><br><span class="line">	ticks=nus*fac_us; 			<span class="comment">//需要的节拍数	  		 </span></span><br><span class="line">	tcnt=<span class="number">0</span>;</span><br><span class="line">	told=SysTick-&gt;VAL;        	<span class="comment">//刚进入时的计数器值</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		tnow=SysTick-&gt;VAL;	</span><br><span class="line">		<span class="keyword">if</span>(tnow!=told)</span><br><span class="line">		&#123;	    </span><br><span class="line">			<span class="keyword">if</span>(tnow&lt;told)tcnt+=told-tnow;<span class="comment">//这里注意一下SYSTICK是一个递减的计数器就可以了.</span></span><br><span class="line">			<span class="keyword">else</span> tcnt+=reload-tnow+told;	    </span><br><span class="line">			told=tnow;</span><br><span class="line">			<span class="keyword">if</span>(tcnt&gt;=ticks)<span class="keyword">break</span>;<span class="comment">//时间超过/等于要延迟的时间,则退出.</span></span><br><span class="line">		&#125;  </span><br><span class="line">	&#125;; 									    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时nms</span></span><br><span class="line"><span class="comment">//nms:要延时的ms数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u16 nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="keyword">if</span>(OSRunning==TRUE)<span class="comment">//如果os已经在跑了	    </span></span><br><span class="line">	&#123;		  </span><br><span class="line">		<span class="keyword">if</span>(nms&gt;=fac_ms)<span class="comment">//延时的时间大于ucos的最少时间周期 </span></span><br><span class="line">		&#123;</span><br><span class="line">   			OSTimeDly(nms/fac_ms);<span class="comment">//ucos延时</span></span><br><span class="line">		&#125;</span><br><span class="line">		nms%=fac_ms;				<span class="comment">//ucos已经无法提供这么小的延时了,采用普通方式延时    </span></span><br><span class="line">	&#125;</span><br><span class="line">	delay_us((u32)(nms*<span class="number">1000</span>));	<span class="comment">//普通方式延时,此时ucos无法启动调度.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span><span class="comment">//不用ucos时</span></span></span><br><span class="line"><span class="comment">//延时nus</span></span><br><span class="line"><span class="comment">//nus为要延时的us数.		    								   </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u32 nus)</span></span></span><br><span class="line"><span class="function"></span>&#123;		</span><br><span class="line">	u32 temp;	    	 </span><br><span class="line">	SysTick-&gt;LOAD=nus*fac_us; <span class="comment">//时间加载	  		 </span></span><br><span class="line">	SysTick-&gt;VAL=<span class="number">0x00</span>;        <span class="comment">//清空计数器</span></span><br><span class="line">	SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk ;          <span class="comment">//开始倒数	 </span></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		temp=SysTick-&gt;CTRL;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(temp&amp;<span class="number">0x01</span>&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)));<span class="comment">//等待时间到达   </span></span><br><span class="line">	SysTick-&gt;CTRL&amp;=~SysTick_CTRL_ENABLE_Msk;       <span class="comment">//关闭计数器</span></span><br><span class="line">	SysTick-&gt;VAL =<span class="number">0X00</span>;       <span class="comment">//清空计数器	 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时nms</span></span><br><span class="line"><span class="comment">//注意nms的范围</span></span><br><span class="line"><span class="comment">//SysTick-&gt;LOAD为24位寄存器,所以,最大延时为:</span></span><br><span class="line"><span class="comment">//nms&lt;=0xffffff*8*1000/SYSCLK</span></span><br><span class="line"><span class="comment">//SYSCLK单位为Hz,nms单位为ms</span></span><br><span class="line"><span class="comment">//对72M条件下,nms&lt;=1864 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u16 nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;	 		  	  </span><br><span class="line">	u32 temp;		   </span><br><span class="line">	SysTick-&gt;LOAD=(u32)nms*fac_ms;<span class="comment">//时间加载(SysTick-&gt;LOAD为24bit)</span></span><br><span class="line">	SysTick-&gt;VAL =<span class="number">0x00</span>;           <span class="comment">//清空计数器</span></span><br><span class="line">	SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk ;          <span class="comment">//开始倒数  </span></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		temp=SysTick-&gt;CTRL;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(temp&amp;<span class="number">0x01</span>&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)));<span class="comment">//等待时间到达   </span></span><br><span class="line">	SysTick-&gt;CTRL&amp;=~SysTick_CTRL_ENABLE_Msk;       <span class="comment">//关闭计数器</span></span><br><span class="line">	SysTick-&gt;VAL =<span class="number">0X00</span>;       <span class="comment">//清空计数器	  	    </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="液晶显示工具包-1"><a href="#液晶显示工具包-1" class="headerlink" title="液晶显示工具包"></a>液晶显示工具包</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oledfont.h&quot;</span>  	 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="comment">//OLED的显存</span></span><br><span class="line"><span class="comment">//存放格式如下.</span></span><br><span class="line"><span class="comment">//[0]0 1 2 3 ... 127	</span></span><br><span class="line"><span class="comment">//[1]0 1 2 3 ... 127	</span></span><br><span class="line"><span class="comment">//[2]0 1 2 3 ... 127	</span></span><br><span class="line"><span class="comment">//[3]0 1 2 3 ... 127	</span></span><br><span class="line"><span class="comment">//[4]0 1 2 3 ... 127	</span></span><br><span class="line"><span class="comment">//[5]0 1 2 3 ... 127	</span></span><br><span class="line"><span class="comment">//[6]0 1 2 3 ... 127	</span></span><br><span class="line"><span class="comment">//[7]0 1 2 3 ... 127 			   </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> OLED_MODE==1</span></span><br><span class="line"><span class="comment">//向SSD1106写入一个字节。</span></span><br><span class="line"><span class="comment">//dat:要写入的数据/命令</span></span><br><span class="line"><span class="comment">//cmd:数据/命令标志 0,表示命令;1,表示数据;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_WR_Byte</span><span class="params">(u8 dat,u8 cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DATAOUT(dat);	    </span><br><span class="line">	<span class="keyword">if</span>(cmd)</span><br><span class="line">	  OLED_DC_Set();</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	  OLED_DC_Clr();		   </span><br><span class="line">	OLED_CS_Clr();</span><br><span class="line">	OLED_WR_Clr();	 </span><br><span class="line">	OLED_WR_Set();</span><br><span class="line">	OLED_CS_Set();	  </span><br><span class="line">	OLED_DC_Set();	 </span><br><span class="line">&#125; 	    	    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">//向SSD1106写入一个字节。</span></span><br><span class="line"><span class="comment">//dat:要写入的数据/命令</span></span><br><span class="line"><span class="comment">//cmd:数据/命令标志 0,表示命令;1,表示数据;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_WR_Byte</span><span class="params">(u8 dat,u8 cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	u8 i;			  </span><br><span class="line">	<span class="keyword">if</span>(cmd)</span><br><span class="line">	  OLED_DC_Set();</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	  OLED_DC_Clr();		  </span><br><span class="line">	OLED_CS_Clr();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">	&#123;			  </span><br><span class="line">		OLED_SCLK_Clr();</span><br><span class="line">		<span class="keyword">if</span>(dat&amp;<span class="number">0x80</span>)</span><br><span class="line">		   OLED_SDIN_Set();</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		   OLED_SDIN_Clr();</span><br><span class="line">		OLED_SCLK_Set();</span><br><span class="line">		dat&lt;&lt;=<span class="number">1</span>;   </span><br><span class="line">	&#125;				 		  </span><br><span class="line">	OLED_CS_Set();</span><br><span class="line">	OLED_DC_Set();   	  </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OLED_Set_Pos</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> x, <span class="keyword">unsigned</span> <span class="keyword">char</span> y)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">	OLED_WR_Byte(<span class="number">0xb0</span>+y,OLED_CMD);</span><br><span class="line">	OLED_WR_Byte(((x&amp;<span class="number">0xf0</span>)&gt;&gt;<span class="number">4</span>)|<span class="number">0x10</span>,OLED_CMD);</span><br><span class="line">	OLED_WR_Byte((x&amp;<span class="number">0x0f</span>)|<span class="number">0x01</span>,OLED_CMD); </span><br><span class="line">&#125;   	  </span><br><span class="line"><span class="comment">//开启OLED显示    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Display_On</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0X14</span>,OLED_CMD);  <span class="comment">//DCDC ON</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0XAF</span>,OLED_CMD);  <span class="comment">//DISPLAY ON</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭OLED显示     </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Display_Off</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0X10</span>,OLED_CMD);  <span class="comment">//DCDC OFF</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0XAE</span>,OLED_CMD);  <span class="comment">//DISPLAY OFF</span></span><br><span class="line">&#125;		   			 </span><br><span class="line"><span class="comment">//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Clear</span><span class="params">(<span class="keyword">void</span>)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">	u8 i,n;		    </span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)  </span><br><span class="line">	&#123;  </span><br><span class="line">		OLED_WR_Byte (<span class="number">0xb0</span>+i,OLED_CMD);    <span class="comment">//设置页地址（0~7）</span></span><br><span class="line">		OLED_WR_Byte (<span class="number">0x00</span>,OLED_CMD);      <span class="comment">//设置显示位置—列低地址</span></span><br><span class="line">		OLED_WR_Byte (<span class="number">0x10</span>,OLED_CMD);      <span class="comment">//设置显示位置—列高地址   </span></span><br><span class="line">		<span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)OLED_WR_Byte(<span class="number">0</span>,OLED_DATA); </span><br><span class="line">	&#125; <span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在指定位置显示一个字符,包括部分字符</span></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="comment">//mode:0,反白显示;1,正常显示				 </span></span><br><span class="line"><span class="comment">//size:选择字体 16/12 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowChar</span><span class="params">(u8 x,u8 y,u8 chr)</span></span></span><br><span class="line"><span class="function"></span>&#123;      	</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> c=<span class="number">0</span>,i=<span class="number">0</span>;	</span><br><span class="line">		c=chr-<span class="string">&#x27; &#x27;</span>;<span class="comment">//得到偏移后的值			</span></span><br><span class="line">		<span class="keyword">if</span>(x&gt;Max_Column<span class="number">-1</span>)&#123;x=<span class="number">0</span>;y=y+<span class="number">2</span>;&#125;</span><br><span class="line">		<span class="keyword">if</span>(SIZE ==<span class="number">16</span>)</span><br><span class="line">			&#123;</span><br><span class="line">			OLED_Set_Pos(x,y);	</span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">			OLED_WR_Byte(F8X16[c*<span class="number">16</span>+i],OLED_DATA);</span><br><span class="line">			OLED_Set_Pos(x,y+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">			OLED_WR_Byte(F8X16[c*<span class="number">16</span>+i+<span class="number">8</span>],OLED_DATA);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;	</span><br><span class="line">				OLED_Set_Pos(x,y+<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">				OLED_WR_Byte(F6x8[c][i],OLED_DATA);</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//m^n函数</span></span><br><span class="line"><span class="function">u32 <span class="title">oled_pow</span><span class="params">(u8 m,u8 n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u32 result=<span class="number">1</span>;	 </span><br><span class="line">	<span class="keyword">while</span>(n--)result*=m;    </span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;				  </span><br><span class="line"><span class="comment">//显示2个数字</span></span><br><span class="line"><span class="comment">//x,y :起点坐标	 </span></span><br><span class="line"><span class="comment">//len :数字的位数</span></span><br><span class="line"><span class="comment">//size:字体大小</span></span><br><span class="line"><span class="comment">//mode:模式	0,填充模式;1,叠加模式</span></span><br><span class="line"><span class="comment">//num:数值(0~4294967295);	 		  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowNum</span><span class="params">(u8 x,u8 y,u32 num,u8 len,u8 size)</span></span></span><br><span class="line"><span class="function"></span>&#123;         	</span><br><span class="line">	u8 t,temp;</span><br><span class="line">	u8 enshow=<span class="number">0</span>;						   </span><br><span class="line">	<span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">	&#123;</span><br><span class="line">		temp=(num/oled_pow(<span class="number">10</span>,len-t<span class="number">-1</span>))%<span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span>(enshow==<span class="number">0</span>&amp;&amp;t&lt;(len<span class="number">-1</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(temp==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				OLED_ShowChar(x+(size/<span class="number">2</span>)*t,y,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> enshow=<span class="number">1</span>; </span><br><span class="line">		 	 </span><br><span class="line">		&#125;</span><br><span class="line">	 	OLED_ShowChar(x+(size/<span class="number">2</span>)*t,y,temp+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//显示一个字符号串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowString</span><span class="params">(u8 x,u8 y,u8 *chr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> j=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (chr[j]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">	&#123;		OLED_ShowChar(x,y,chr[j]);</span><br><span class="line">			x+=<span class="number">8</span>;</span><br><span class="line">		<span class="keyword">if</span>(x&gt;<span class="number">120</span>)&#123;x=<span class="number">0</span>;y+=<span class="number">2</span>;&#125;</span><br><span class="line">			j++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示汉字--no表示行数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowCHinese</span><span class="params">(u8 x,u8 y,u8 no)</span></span></span><br><span class="line"><span class="function"></span>&#123;      			    </span><br><span class="line">	u8 t,adder=<span class="number">0</span>;</span><br><span class="line">	OLED_Set_Pos(x,y);	</span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">16</span>;t++)</span><br><span class="line">		&#123;</span><br><span class="line">				OLED_WR_Byte(Hzk[<span class="number">2</span>*no][t],OLED_DATA);</span><br><span class="line">				adder+=<span class="number">1</span>;</span><br><span class="line">     &#125;	</span><br><span class="line">		OLED_Set_Pos(x,y+<span class="number">1</span>);	</span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">16</span>;t++)</span><br><span class="line">			&#123;	</span><br><span class="line">				OLED_WR_Byte(Hzk[<span class="number">2</span>*no+<span class="number">1</span>][t],OLED_DATA);</span><br><span class="line">				adder+=<span class="number">1</span>;</span><br><span class="line">      &#125;					</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***********功能描述：显示显示BMP图片128×64起始点坐标(x,y),x的范围0～127，y为页的范围0～7*****************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_DrawBMP</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> x0, <span class="keyword">unsigned</span> <span class="keyword">char</span> y0,<span class="keyword">unsigned</span> <span class="keyword">char</span> x1, <span class="keyword">unsigned</span> <span class="keyword">char</span> y1,<span class="keyword">unsigned</span> <span class="keyword">char</span> BMP[])</span></span></span><br><span class="line"><span class="function"></span>&#123; 	</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">char</span> x,y;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(y1%<span class="number">8</span>==<span class="number">0</span>) y=y1/<span class="number">8</span>;      </span><br><span class="line">  <span class="keyword">else</span> y=y1/<span class="number">8</span>+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(y=y0;y&lt;y1;y++)</span><br><span class="line">	&#123;</span><br><span class="line">		OLED_Set_Pos(x0,y);</span><br><span class="line">    <span class="keyword">for</span>(x=x0;x&lt;x1;x++)</span><br><span class="line">	    &#123;      </span><br><span class="line">	    	OLED_WR_Byte(BMP[j++],OLED_DATA);	    	</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化SSD1306					    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; 	</span><br><span class="line"> </span><br><span class="line"> 	 </span><br><span class="line"> 	GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"> 	</span><br><span class="line"> 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);	 <span class="comment">//使能A端口时钟</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6| GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_7;	 </span><br><span class="line"> 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 <span class="comment">//推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//速度50MHz</span></span><br><span class="line"> 	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);	  <span class="comment">//初始化GPIOD3,6</span></span><br><span class="line"> 	GPIO_SetBits(GPIOA,GPIO_Pin_5|GPIO_Pin_7|GPIO_Pin_4);	</span><br><span class="line">	</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);	 <span class="comment">//使能A端口时钟</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;	 </span><br><span class="line"> 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 <span class="comment">//推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//速度50MHz</span></span><br><span class="line"> 	GPIO_Init(GPIOB, &amp;GPIO_InitStructure);	  <span class="comment">//初始化GPIOD3,6</span></span><br><span class="line">	</span><br><span class="line"> 	GPIO_SetBits(GPIOB,GPIO_Pin_8);	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  OLED_RST_Set();</span><br><span class="line">	delay_ms(<span class="number">100</span>);</span><br><span class="line">	OLED_RST_Clr();</span><br><span class="line">	delay_ms(<span class="number">200</span>);</span><br><span class="line">	OLED_RST_Set(); </span><br><span class="line">					  </span><br><span class="line">	OLED_WR_Byte(<span class="number">0xAE</span>,OLED_CMD);<span class="comment">//--turn off oled panel</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x00</span>,OLED_CMD);<span class="comment">//---set low column address</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x10</span>,OLED_CMD);<span class="comment">//---set high column address</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x40</span>,OLED_CMD);<span class="comment">//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x81</span>,OLED_CMD);<span class="comment">//--set contrast control register</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xCF</span>,OLED_CMD); <span class="comment">// Set SEG Output Current Brightness</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA1</span>,OLED_CMD);<span class="comment">//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xC8</span>,OLED_CMD);<span class="comment">//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA6</span>,OLED_CMD);<span class="comment">//--set normal display</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA8</span>,OLED_CMD);<span class="comment">//--set multiplex ratio(1 to 64)</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x3f</span>,OLED_CMD);<span class="comment">//--1/64 duty</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xD3</span>,OLED_CMD);<span class="comment">//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x00</span>,OLED_CMD);<span class="comment">//-not offset</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xd5</span>,OLED_CMD);<span class="comment">//--set display clock divide ratio/oscillator frequency</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x80</span>,OLED_CMD);<span class="comment">//--set divide ratio, Set Clock as 100 Frames/Sec</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xD9</span>,OLED_CMD);<span class="comment">//--set pre-charge period</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xF1</span>,OLED_CMD);<span class="comment">//Set Pre-Charge as 15 Clocks &amp; Discharge as 1 Clock</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xDA</span>,OLED_CMD);<span class="comment">//--set com pins hardware configuration</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x12</span>,OLED_CMD);</span><br><span class="line">	OLED_WR_Byte(<span class="number">0xDB</span>,OLED_CMD);<span class="comment">//--set vcomh</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x40</span>,OLED_CMD);<span class="comment">//Set VCOM Deselect Level</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x20</span>,OLED_CMD);<span class="comment">//-Set Page Addressing Mode (0x00/0x01/0x02)</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x02</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x8D</span>,OLED_CMD);<span class="comment">//--set Charge Pump enable/disable</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0x14</span>,OLED_CMD);<span class="comment">//--set(0x10) disable</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA4</span>,OLED_CMD);<span class="comment">// Disable Entire Display On (0xa4/0xa5)</span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xA6</span>,OLED_CMD);<span class="comment">// Disable Inverse Display On (0xa6/a7) </span></span><br><span class="line">	OLED_WR_Byte(<span class="number">0xAF</span>,OLED_CMD);<span class="comment">//--turn on oled panel</span></span><br><span class="line">	</span><br><span class="line">	OLED_WR_Byte(<span class="number">0xAF</span>,OLED_CMD); <span class="comment">/*display ON*/</span> </span><br><span class="line">	OLED_Clear();</span><br><span class="line">	OLED_Set_Pos(<span class="number">0</span>,<span class="number">0</span>); 	</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>



<h5 id="中断优先工具包"><a href="#中断优先工具包" class="headerlink" title="中断优先工具包"></a>中断优先工具包</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);	<span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>串口通信配置工具包</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span>	  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加入以下代码,支持printf函数,而不需要选择use MicroLIB	  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> import(__use_no_semihosting)             </span></span><br><span class="line"><span class="comment">//标准库需要的支持函数                 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">FILE</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">	<span class="keyword">int</span> handle; </span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">FILE __stdout;       </span><br><span class="line"><span class="comment">//定义_sys_exit()以避免使用半主机模式    </span></span><br><span class="line">_sys_exit(<span class="keyword">int</span> x) </span><br><span class="line">&#123; </span><br><span class="line">	x = x; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//重定义fputc函数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> ch, FILE *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;      </span><br><span class="line">	<span class="keyword">while</span>((USART1-&gt;SR&amp;<span class="number">0X40</span>)==<span class="number">0</span>);<span class="comment">//循环发送,直到发送完毕   </span></span><br><span class="line">    USART1-&gt;DR = (u8) ch;      </span><br><span class="line">	<span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用microLib的方法*/</span></span><br><span class="line"> <span class="comment">/* </span></span><br><span class="line"><span class="comment">int fputc(int ch, FILE *f)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	USART_SendData(USART1, (uint8_t) ch);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET) &#123;&#125;	</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">    return ch;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">int GetKey (void)  &#123; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    while (!(USART1-&gt;SR &amp; USART_FLAG_RXNE));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    return ((int)(USART1-&gt;DR &amp; 0x1FF));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> EN_USART1_RX   <span class="comment">//如果使能了接收</span></span></span><br><span class="line"><span class="comment">//串口1中断服务程序</span></span><br><span class="line"><span class="comment">//注意,读取USARTx-&gt;SR能避免莫名其妙的错误   	</span></span><br><span class="line">u8 USART_RX_BUF[USART_REC_LEN];     <span class="comment">//接收缓冲,最大USART_REC_LEN个字节.</span></span><br><span class="line"><span class="comment">//接收状态</span></span><br><span class="line"><span class="comment">//bit15，	接收完成标志</span></span><br><span class="line"><span class="comment">//bit14，	接收到0x0d</span></span><br><span class="line"><span class="comment">//bit13~0，	接收到的有效字节数目</span></span><br><span class="line">u16 USART_RX_STA=<span class="number">0</span>;       <span class="comment">//接收状态标记	  </span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uart_init</span><span class="params">(u32 bound)</span></span>&#123;</span><br><span class="line">    <span class="comment">//GPIO端口设置</span></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	USART_InitTypeDef USART_InitStructure;</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	 </span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1|RCC_APB2Periph_GPIOA|RCC_APB2Periph_AFIO, ENABLE);	<span class="comment">//使能USART1，GPIOA时钟以及复用功能时钟</span></span><br><span class="line">     <span class="comment">//USART1_TX   PA.9</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//PA.9</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	<span class="comment">//复用推挽输出</span></span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//USART1_RX	  PA.10</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;<span class="comment">//浮空输入</span></span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStructure);  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//Usart1 NVIC 配置</span></span><br><span class="line"></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">3</span> ;<span class="comment">//抢占优先级3</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">3</span>;		<span class="comment">//子优先级3</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			<span class="comment">//IRQ通道使能</span></span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);	<span class="comment">//根据指定的参数初始化VIC寄存器</span></span><br><span class="line">  </span><br><span class="line">   <span class="comment">//USART 初始化设置</span></span><br><span class="line"></span><br><span class="line">	USART_InitStructure.USART_BaudRate = bound;<span class="comment">//一般设置为9600;</span></span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//字长为8位数据格式</span></span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//一个停止位</span></span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶校验位</span></span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	<span class="comment">//收发模式</span></span><br><span class="line"></span><br><span class="line">    USART_Init(USART1, &amp;USART_InitStructure); <span class="comment">//初始化串口</span></span><br><span class="line">    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);<span class="comment">//开启中断</span></span><br><span class="line">    USART_Cmd(USART1, ENABLE);                    <span class="comment">//使能串口 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span>                	<span class="comment">//串口1中断服务程序</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	u8 Res;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_TICKS_PER_SEC	 	<span class="comment">//如果时钟节拍数定义了,说明要使用ucosII了.</span></span></span><br><span class="line">	OSIntEnter();    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  <span class="comment">//接收中断(接收到的数据必须是0x0d 0x0a结尾)</span></span><br><span class="line">		&#123;</span><br><span class="line">		Res =USART_ReceiveData(USART1);<span class="comment">//(USART1-&gt;DR);	//读取接收到的数据</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>((USART_RX_STA&amp;<span class="number">0x8000</span>)==<span class="number">0</span>)<span class="comment">//接收未完成</span></span><br><span class="line">			&#123;</span><br><span class="line">			<span class="keyword">if</span>(USART_RX_STA&amp;<span class="number">0x4000</span>)<span class="comment">//接收到了0x0d</span></span><br><span class="line">				&#123;</span><br><span class="line">				<span class="keyword">if</span>(Res!=<span class="number">0x0a</span>)USART_RX_STA=<span class="number">0</span>;<span class="comment">//接收错误,重新开始</span></span><br><span class="line">				<span class="keyword">else</span> USART_RX_STA|=<span class="number">0x8000</span>;	<span class="comment">//接收完成了 </span></span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="comment">//还没收到0X0D</span></span><br><span class="line">				&#123;	</span><br><span class="line">				<span class="keyword">if</span>(Res==<span class="number">0x0d</span>)USART_RX_STA|=<span class="number">0x4000</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">					USART_RX_BUF[USART_RX_STA&amp;<span class="number">0X3FFF</span>]=Res ;</span><br><span class="line">					USART_RX_STA++;</span><br><span class="line">					<span class="keyword">if</span>(USART_RX_STA&gt;(USART_REC_LEN<span class="number">-1</span>))USART_RX_STA=<span class="number">0</span>;<span class="comment">//接收数据错误,重新开始接收	  </span></span><br><span class="line">					&#125;		 </span><br><span class="line">				&#125;</span><br><span class="line">			&#125;   		 </span><br><span class="line">     &#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_TICKS_PER_SEC	 	<span class="comment">//如果时钟节拍数定义了,说明要使用ucosII了.</span></span></span><br><span class="line">	OSIntExit();  											 </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>	</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>支持中断处理串口通信</li>
<li>支持printf输出内容到串口</li>
</ul>
<h5 id="文字取模添加"><a href="#文字取模添加" class="headerlink" title="文字取模添加"></a>文字取模添加</h5><p>在oledfont.h可以看到字符串的16进制对应，我们也可以取模然后添加汉字</p>
<h5 id="汉字显示"><a href="#汉字显示" class="headerlink" title="汉字显示"></a>汉字显示</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bmp.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u8 t;</span><br><span class="line">		delay_init();	    	 <span class="comment">//延时函数初始化	  </span></span><br><span class="line">		NVIC_Configuration(); 	 <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级 	LED_Init();			 </span></span><br><span class="line">    	<span class="comment">//LED端口初始化</span></span><br><span class="line">		OLED_Init();			<span class="comment">//初始化OLED  </span></span><br><span class="line">		OLED_Clear()  	; </span><br><span class="line">		t=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line">	&#123;		</span><br><span class="line">		OLED_Clear();</span><br><span class="line">	<span class="comment">//	LED_ON;</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//中</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">18</span>,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//景</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">36</span>,<span class="number">0</span>,<span class="number">2</span>);<span class="comment">//园</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">54</span>,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//电</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">72</span>,<span class="number">0</span>,<span class="number">4</span>);<span class="comment">//子</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">90</span>,<span class="number">0</span>,<span class="number">5</span>);<span class="comment">//科</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">108</span>,<span class="number">0</span>,<span class="number">6</span>);<span class="comment">//技</span></span><br><span class="line">		</span><br><span class="line">		OLED_ShowCHinese(<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>);<span class="comment">//佛</span></span><br><span class="line">		OLED_ShowCHinese(<span class="number">18</span>,<span class="number">6</span>,<span class="number">8</span>);<span class="comment">//科</span></span><br><span class="line">		OLED_ShowString(<span class="number">0</span>,<span class="number">3</span>,(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="string">&quot;1.3&#x27; OLED TEST&quot;</span>);</span><br><span class="line">	&#125;	  </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="温度测量"><a href="#温度测量" class="headerlink" title="温度测量"></a>温度测量</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO信息结构体体初始化</span></span><br><span class="line">GPIO_InitTypeDef   GPIO_InitStructure;</span><br><span class="line">EXTI_InitTypeDef   EXTI_InitStructure;</span><br><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure; <span class="comment">//串口配置的信息结构体</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> dht11_data[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重定义fputc函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> ch, FILE *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//发送字符到串口1</span></span><br><span class="line">	USART_SendData(USART1,ch);</span><br><span class="line">	<span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//延时100ms ，计数72000000次时间过了1s  , 计数72000次时间过了1ms,计数72次表示时间过了1us</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	SysTick-&gt;LOAD = <span class="number">72000</span>*x; <span class="comment">//把计数值加载到LOAD寄存器 ---&gt;每次计数100ms</span></span><br><span class="line"></span><br><span class="line">	SysTick-&gt;VAL = <span class="number">0</span>; <span class="comment">//清空VAL寄存器的计数值</span></span><br><span class="line"></span><br><span class="line">	SysTick-&gt;CTRL |= <span class="number">0x1</span>&lt;&lt;<span class="number">0</span>; <span class="comment">//开始计时,打开定时器把CTRL的第0位置1</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">0</span> == (SysTick-&gt;CTRL &amp; (<span class="number">0x1</span>&lt;&lt;<span class="number">16</span>)) ); <span class="comment">//判断CTRL是否为1，如果为1表示计时时间到了</span></span><br><span class="line">	</span><br><span class="line">	SysTick-&gt;CTRL &amp;= ~(<span class="number">0x1</span>&lt;&lt;<span class="number">0</span>); <span class="comment">//关闭定时器，把CTRL的第0位清零</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//微妙级别延时</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	SysTick-&gt;LOAD = <span class="number">72</span>*x; <span class="comment">//把计数值加载到LOAD寄存器 ---&gt;每次计数100ms</span></span><br><span class="line"></span><br><span class="line">	SysTick-&gt;VAL = <span class="number">0</span>; <span class="comment">//清空VAL寄存器的计数值</span></span><br><span class="line"></span><br><span class="line">	SysTick-&gt;CTRL |= <span class="number">0x1</span>&lt;&lt;<span class="number">0</span>; <span class="comment">//开始计时,打开定时器把CTRL的第0位置1</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">0</span> == (SysTick-&gt;CTRL &amp; (<span class="number">0x1</span>&lt;&lt;<span class="number">16</span>)) ); <span class="comment">//判断CTRL是否为1，如果为1表示计时时间到了</span></span><br><span class="line">	</span><br><span class="line">	SysTick-&gt;CTRL &amp;= ~(<span class="number">0x1</span>&lt;&lt;<span class="number">0</span>); <span class="comment">//关闭定时器，把CTRL的第0位清零</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//led-》GPIO信息结构体初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//关闭引脚JTAG复用功能--&gt;PA13、PA14、PA15、PB3、PB4</span></span><br><span class="line">	RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* GPIOB Periph clock enable */</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Configure PD0 and PD2 in output pushpull mode */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = <span class="number">0xff</span> ;<span class="comment">//GPIO_Pin_0~GPIO_Pin_7</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//设置运行频率50MHz</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; <span class="comment">//设置推挽输出</span></span><br><span class="line">	GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">	</span><br><span class="line">	GPIO_SetBits(GPIOB, <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">10000</span>; j++);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置串口1--&gt;PA9+PA10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usart1_init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1.使能GPIO外设、IO复用时钟、USART2时钟 PA9 和PA10</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//2.配置GPIO + 初始化GPIO</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//  PA2   TX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//复用推挽输出</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; <span class="comment">//  PA3   RX</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  <span class="comment">//浮空输入   PA10  RX</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.配置USART1 + 初始化USART1</span></span><br><span class="line">	USART_InitStructure.USART_BaudRate = bound;<span class="comment">//波特率</span></span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//数据位8位</span></span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//停止位1位</span></span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶检验</span></span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line">	USART_Init(USART1, &amp;USART_InitStructure);		<span class="comment">//把配置信息加载到串口2</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//4.配置NVIC + 初始化NVIC </span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		<span class="comment">//选择串口2的中断</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>;		<span class="comment">//设置抢占优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			<span class="comment">//使能串口2的中断</span></span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);						<span class="comment">//把配置信息加载到中断</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//5.使能串口中断</span></span><br><span class="line">	USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//接收到数据触发中断</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//6.使能串口</span></span><br><span class="line">	USART_Cmd(USART1,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//把PB15设置为输出模式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_PA15_outputmode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/* GPIOB Peripheral clock enable 使能对应GPIO组的硬件时钟，使能第B组的硬件时钟*/</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* Configure PB15 in output pushpull mode */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;		<span class="comment">//选择15号引脚</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;		<span class="comment">//选择输出模式</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	<span class="comment">//设置运行速度为100MHz</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把PB15设置为输入模式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_PA15_inputmode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* GPIOB Periph clock enable */</span></span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Configure PD0 and PD2 in output pushpull mode */</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15; </span><br><span class="line">	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//设置运行频率50MHz</span></span><br><span class="line">	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; <span class="comment">//设置推挽输出</span></span><br><span class="line">	GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MCU请求dht11发送数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask_dht11_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//请求dht11发送数据</span></span><br><span class="line">	set_PA15_outputmode(); <span class="comment">//--》设置为输出模式</span></span><br><span class="line">	GPIO_ResetBits(GPIOA,  GPIO_Pin_15);</span><br><span class="line">	delay_ms(<span class="number">20</span>);</span><br><span class="line">	GPIO_SetBits(GPIOA, GPIO_Pin_15);</span><br><span class="line"></span><br><span class="line">	delay_us(<span class="number">30</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//判断dht11是否有回应--》在一定的时间内没有回应，就要重新请求数据</span></span><br><span class="line">	set_PA15_inputmode();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//超时控制--》设置100us</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(i&lt;<span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(<span class="number">0</span> == GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15))</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		delay_us(<span class="number">1</span>);</span><br><span class="line">		i++;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	 <span class="comment">//如果超时，就结束函数</span></span><br><span class="line">	<span class="keyword">if</span>(i&gt;= <span class="number">100</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">	</span><br><span class="line">	i=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//检测低电平持续时间--》也要设置超时控制</span></span><br><span class="line">	<span class="keyword">while</span>(i&lt;<span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">if</span>(<span class="number">1</span> == GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15))</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		delay_us(<span class="number">1</span>);</span><br><span class="line">		i++;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	 <span class="comment">//如果超时，就结束函数</span></span><br><span class="line">	<span class="keyword">if</span>(i&gt;= <span class="number">100</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每次读取一个字节数据</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">read_dht11_data_1byte</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> data=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//等待高电平时间持续结束</span></span><br><span class="line">	<span class="comment">//while(1 == PAin(15));</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span> ==  GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15));</span><br><span class="line">	<span class="comment">//读取8bit数据--》合成一个unsigned char 数据</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//判断是1还是0--&gt;等待低电平时间持续结束</span></span><br><span class="line">		<span class="keyword">while</span>( <span class="number">0</span> == GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15));</span><br><span class="line">		delay_us(<span class="number">40</span>);</span><br><span class="line">		<span class="comment">//40us后，仍然是高电平，该bit则为1</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="number">1</span> == GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15))</span><br><span class="line">		&#123;</span><br><span class="line">			data |=  <span class="number">1</span>&lt;&lt; (<span class="number">7</span>-i); <span class="comment">//先读到是高位		</span></span><br><span class="line">		&#125;</span><br><span class="line">		 <span class="comment">//等待高电平时间持续结束</span></span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span> == GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> data;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取全部数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_dht11_all_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="comment">//不断请求dht11发送数据</span></span><br><span class="line">	<span class="keyword">while</span>( <span class="number">-1</span> == ask_dht11_data());</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">		dht11_data[i]= read_dht11_data_1byte();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//判断校验和</span></span><br><span class="line">	<span class="keyword">if</span>(dht11_data[<span class="number">4</span>] == dht11_data[<span class="number">0</span>]+dht11_data[<span class="number">1</span>]+dht11_data[<span class="number">2</span>]+dht11_data[<span class="number">3</span>])</span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化系统定时器时钟--》时钟频率为72MHz</span></span><br><span class="line">	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);</span><br><span class="line">	led_init();</span><br><span class="line"></span><br><span class="line">	usart1_init(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">		delay();</span><br><span class="line">		<span class="comment">//if(data == &#x27;D&#x27;)</span></span><br><span class="line">		<span class="comment">//&#123;</span></span><br><span class="line">			<span class="comment">//读取温湿度数据 成功</span></span><br><span class="line">			<span class="keyword">if</span>(<span class="number">1</span> == read_dht11_all_data())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;H:%d.%d T:%d.%d\r\n&quot;</span>, dht11_data[<span class="number">0</span>],dht11_data[<span class="number">1</span>], dht11_data[<span class="number">2</span>],dht11_data[<span class="number">3</span>]);</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//&#125;</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//串口1中断服务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//判断中断是否产生</span></span><br><span class="line">	<span class="keyword">if</span>( USART_GetITStatus(USART1,USART_IT_RXNE) == SET )<span class="comment">//如果接收到数据</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//接收数据</span></span><br><span class="line">		data = USART_ReceiveData(USART1);<span class="comment">//接收从USART2发送过来的中断</span></span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>( USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//清空中断标志位</span></span><br><span class="line">		USART_ClearITPendingBit(USART1,USART_IT_RXNE);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>硬件开发</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>stm32</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|知识框架</title>
    <url>/2021/04/11/Java/Java-%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040947723.png" alt="image-20210904094723369"></p>
<span id="more"></span>

<h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><h3 id="计算机硬件介绍"><a href="#计算机硬件介绍" class="headerlink" title="计算机硬件介绍"></a>计算机硬件介绍</h3><h4 id="1-CPU"><a href="#1-CPU" class="headerlink" title="1.CPU"></a>1.CPU</h4><p>中央处理器从内存获取指令，然后执行这些指令</p>
<p>每台计算机都有一个内部时钟，以固定速度发射电子脉冲，时钟速度越快，在给定的时间段内可以执行更多的指令（计量单位为HZ）</p>
<h4 id="2-计算机发展规律"><a href="#2-计算机发展规律" class="headerlink" title="2.计算机发展规律"></a>2.计算机发展规律</h4><ul>
<li>摩尔定律</li>
<li>安迪-比尔定律</li>
<li>反摩尔定律</li>
</ul>
<h4 id="3-存储设备"><a href="#3-存储设备" class="headerlink" title="3.存储设备"></a>3.存储设备</h4><p>内存中的信息在断电后丢失，所有我们要将程序和数据永久保存在存储设备上</p>
<p>存储设备有下面三种</p>
<ul>
<li><p>磁盘驱动器</p>
</li>
<li><p>光盘驱动器</p>
</li>
<li><p>USB闪存驱动器</p>
</li>
</ul>
<h4 id="4-内存"><a href="#4-内存" class="headerlink" title="4.内存"></a>4.内存</h4><p>计算机最基本的存储单元是字节（byte），每个字节有8个比特（bit）构成</p>
<p>内存（RAM）用于存储程序及程序所需要的数据</p>
<p>一个程序和它的数据在被CPU执行前必须移到计算机内存中</p>
<h4 id="5-通信设备"><a href="#5-通信设备" class="headerlink" title="5.通信设备"></a>5.通信设备</h4><p>电脑可以通过通信设备</p>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>操作系统是运行在计算机上最重要的程序，管理和控制计算机的活动</p>
<h3 id="万维网"><a href="#万维网" class="headerlink" title="万维网"></a>万维网</h3><p>万维网即world wide web，简称web</p>
<p>web客户端可以访问浏览web服务器上的页面</p>
<p>web通过一个全局统一资源标识符（URL）标识</p>
<p>web通过超文本传输协议（http）传输给用户</p>
<h2 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h2><h3 id="Java语言应用场景"><a href="#Java语言应用场景" class="headerlink" title="Java语言应用场景"></a>Java语言应用场景</h3><h4 id="1-JavaEE（spring）"><a href="#1-JavaEE（spring）" class="headerlink" title="1.JavaEE（spring）"></a>1.JavaEE（spring）</h4><h4 id="2-大数据（spark）"><a href="#2-大数据（spark）" class="headerlink" title="2.大数据（spark）"></a>2.大数据（spark）</h4><h4 id="3-安卓开发"><a href="#3-安卓开发" class="headerlink" title="3.安卓开发"></a>3.安卓开发</h4><h3 id="Java开发介绍"><a href="#Java开发介绍" class="headerlink" title="Java开发介绍"></a>Java开发介绍</h3><h4 id="1-软件开发介绍"><a href="#1-软件开发介绍" class="headerlink" title="1.软件开发介绍"></a>1.软件开发介绍</h4><p>（1）软件开发</p>
<p>软件集一系列按照特定顺序组织的计算机数据和指令的集合。有系统软件和应用软件之分</p>
<p>（2）人机交互方式</p>
<ul>
<li>图形化界面：GUI</li>
<li>命令行方式：CLI</li>
</ul>
<h4 id="2-Java技术体系平台"><a href="#2-Java技术体系平台" class="headerlink" title="2.Java技术体系平台"></a>2.Java技术体系平台</h4><ul>
<li>Java SE：面向桌面级应用的Java平台</li>
<li>Java EE：面向web应用程序</li>
<li>Java ME：面向移动终端</li>
</ul>
<h4 id="3-Java语言特点"><a href="#3-Java语言特点" class="headerlink" title="3.Java语言特点"></a>3.Java语言特点</h4><ul>
<li>面向对象：类与对象</li>
<li>健壮性：提供一个相对安全的内存管理和访问机制</li>
<li>跨平台性：java语言编写的应用程序可以运行在不同的系统平台上（通过jvm实现）</li>
</ul>
<h4 id="4-Java两种核心机制"><a href="#4-Java两种核心机制" class="headerlink" title="4.Java两种核心机制"></a>4.Java两种核心机制</h4><ul>
<li>Java虚拟机（JVM）：JVM是一个虚拟计算机，具有指令集使用不同的存储区域，负责执行指令，管理数据，内存，寄存器（屏蔽底层运行平台的差别，实现“”一次编译，处处运行“）</li>
<li>垃圾收集机制：java系统级线性跟踪存储空间的分配情况，并在JVM空闲时，检测并释放可被释放的存储空间</li>
</ul>
<h4 id="5-Java环境"><a href="#5-Java环境" class="headerlink" title="5.Java环境"></a>5.Java环境</h4><ul>
<li>JDK：Java开发工具包，其中包含了JRE，其中包含了编译工具（javac）和打包工具（jar）</li>
<li>JRE：java运行环境，包括了JVM和java的核心类库</li>
<li>使用JDK开发java程序，交给JRE运行</li>
<li>JDK &gt; JRE &gt; JVM</li>
</ul>
<h2 id="Java基本语法"><a href="#Java基本语法" class="headerlink" title="Java基本语法"></a>Java基本语法</h2><h3 id="关键字与保留字"><a href="#关键字与保留字" class="headerlink" title="关键字与保留字"></a>关键字与保留字</h3><h4 id="1-关键字"><a href="#1-关键字" class="headerlink" title="1.关键字"></a>1.关键字</h4><p>定义：在java语言中用作专门用途的字符串（单词）</p>
<p>特点：关键字所有字母为小写</p>
<p>功能：定影数据类型，定义流程控制，定义访问权限修饰，定义类函数变量修饰符，定义类与类之间关系，定义建立引用判断实例，异常处理，包</p>
<h4 id="2-保留字"><a href="#2-保留字" class="headerlink" title="2.保留字"></a>2.保留字</h4><p>现有Java版本尚未使用，但后续版本可能作为关键字使用，命名标识符时避免使用这些保留字</p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>对变量，方法和类的命名使用的字符序列，称为标识符</p>
<p>合法标识符规则，命名规范</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量即内存中一个存储区域，该区域的数据可以在同一类型范围内不断变化</p>
<p>变量时程序最基础的存储单元，包含变量类型，变量名和存储的值</p>
<p>Java的每个变量必须先声明后使用</p>
<ul>
<li></li>
</ul>
<h4 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h4><p>（1）基本数据类型</p>
<ul>
<li><p>数值型：整数类型（byte,short,int,long），浮点类型（float,double）</p>
</li>
<li><p>字符型（char）</p>
</li>
<li><p>布尔型（boolean）</p>
</li>
</ul>
<p>（2）引用数据类型</p>
<ul>
<li><p>类（class）（字符串变量的声明就是用类来声明）</p>
</li>
<li><p>接口（interface）</p>
</li>
<li><p>数组（array）</p>
</li>
</ul>
<p>（3）声明位置分类变量</p>
<ul>
<li>成员变量：方法体外，类体内声明的变量</li>
<li>局部变量：方法体内部声明的变量</li>
</ul>
<h4 id="2-整型类型"><a href="#2-整型类型" class="headerlink" title="2.整型类型"></a>2.整型类型</h4><p>整型默认使用int型，当遇到不足以表达较大的数，才使用long，声明long类型常量，需要后加”L”</p>
<h4 id="3-浮点数类型"><a href="#3-浮点数类型" class="headerlink" title="3.浮点数类型"></a>3.浮点数类型</h4><p>浮点数类型常量默认使用double型，声明float型常量，需要后加”F”</p>
<h4 id="4-基本数据类型转换"><a href="#4-基本数据类型转换" class="headerlink" title="4.基本数据类型转换"></a>4.基本数据类型转换</h4><ul>
<li>自动转换类型：容量小的类型自动转换为容量大的数据类型</li>
<li>byte,short,char -&gt; int -&gt; long -&gt; float -&gt; double</li>
<li>在多种类型数据混合运算时，系统首先自动间=将所有数据转换成容量最大的数据类型，然后进行计算</li>
<li>强类型转换：自动类型转换的逆过程，可以将容量大的数据类型转换成容量小的数据类型（如将字符串转换为int类）</li>
</ul>
<h4 id="5-引用数据类型"><a href="#5-引用数据类型" class="headerlink" title="5.引用数据类型"></a>5.引用数据类型</h4><p>引用数据类型包括：类（如String类）,接口，数组</p>
<p>​    String类：</p>
<ul>
<li>String属于引用数据类型</li>
<li>声明String类型变量使用一对””</li>
<li>String可以和8种基本数据类型做运行（字符串连接运算）</li>
</ul>
<h4 id="6-变量赋值"><a href="#6-变量赋值" class="headerlink" title="6.变量赋值"></a>6.变量赋值</h4><ul>
<li>如果变量是基本数据类型，此时赋值的变量是所保存的数据值</li>
<li>如果变量是引用数据类型，此时赋值的变量所保存的数据的地址值</li>
</ul>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h4><p>加减乘除，取余，自增，自减，字符串连接</p>
<h4 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2.赋值运算符"></a>2.赋值运算符</h4><ul>
<li>当”=“号两侧数据类型不一致时，可以使用自动类型转换或者使用强制类型转换原则进行处理</li>
<li>支持连续赋值</li>
<li>可以使用扩展赋值运算符：+=，-=，*=，/=，%=</li>
</ul>
<h4 id="3-比较运算符"><a href="#3-比较运算符" class="headerlink" title="3.比较运算符"></a>3.比较运算符</h4><ul>
<li><p>比较运算符的结果都是Boolean型</p>
</li>
<li><p>Java有个特殊的比较运算符：instanceof，可以检查是否为类的对象</p>
</li>
</ul>
<h4 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h4><ul>
<li>与或非等等</li>
<li>逻辑运算符操作的都是boolean类型的变量</li>
</ul>
<h4 id="5-位运算符"><a href="#5-位运算符" class="headerlink" title="5.位运算符"></a>5.位运算符</h4><p>类型：</p>
<ul>
<li>左移右移</li>
<li>与运算</li>
<li>或运算</li>
<li>取反</li>
</ul>
<p>交换两数的方法：</p>
<ul>
<li>定义临时变量法</li>
<li>相加法</li>
<li>位运算符法</li>
</ul>
<h4 id="6-三元运算符"><a href="#6-三元运算符" class="headerlink" title="6.三元运算符"></a>6.三元运算符</h4><ul>
<li>结构：(条件表达式)? 表达式1 : 表达式2</li>
<li>返回结果为Boolean类型</li>
<li>凡是可以使用三元运算符的地方，都可以转换为if-else，但是优先使用三元运算符</li>
</ul>
<h3 id="程序流程控制"><a href="#程序流程控制" class="headerlink" title="程序流程控制"></a>程序流程控制</h3><h4 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1.顺序结构"></a>1.顺序结构</h4><p>程序从上到下逐条执行，中间没有任何判断和跳转</p>
<h4 id="2-分支结构"><a href="#2-分支结构" class="headerlink" title="2.分支结构"></a>2.分支结构</h4><p>（1）根据条件，选择性执行某段代码</p>
<ul>
<li>if-elseif-else</li>
<li>switch-case</li>
<li>switch-case可以转换为if-elseif-else</li>
</ul>
<p>，优先使用switch-case</p>
<p>（2）switch-case-default:</p>
<ul>
<li>根据switch表达式中的值，依次匹配各个case中的常量，一旦匹配成功跳转到相应的case语句中</li>
<li>一旦执行到break，跳出switch-case结构</li>
<li>switch的表达式中，只能是如下的6种数据类型之一：byte，short，char，int，String类型</li>
</ul>
<h4 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3.循环结构"></a>3.循环结构</h4><p>（1）根据循环条件，重复性执行某段代码</p>
<ul>
<li>for循环</li>
<li>while循环</li>
<li>do-while循环</li>
</ul>
<p>（2）循环语句四个组成部分：</p>
<ul>
<li>初始化部分</li>
<li>循环条件部分</li>
<li>循环体部分</li>
<li>迭代部分</li>
</ul>
<p>​    执行过程:初始化 -&gt;  循环条件 -&gt; 循环体 -&gt; 迭代 -&gt;  循环-&gt;条件 -&gt; 循环体 -&gt; 迭代 -&gt; …… -&gt;  循环条件</p>
<p>（3）for循环结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(初始化; 循环条件; 迭代) &#123;循环体&#125;</span><br></pre></td></tr></table></figure>

<p>​    不在循环条件内限制次数的结构：for( ; ; )</p>
<p>（4）while循环结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始化</span><br><span class="line">while(循环条件)&#123;循环体;迭代&#125;</span><br></pre></td></tr></table></figure>

<p>​    不在循环条件内限制次数的结构：while(true)</p>
<p>（5）do-while循环结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始化</span><br><span class="line">do&#123; 循环体;迭代;&#125;while(循环条件)</span><br></pre></td></tr></table></figure>



<p>​    do-while的执行过程与for，while不同，会至少执行一次循环体</p>
<p>​    执行过程: 初始化 -&gt;  循环体 -&gt; 迭代-&gt;  循环条件-&gt;  循环体 -&gt; 迭代-&gt;  ……</p>
<p>（6）结束循环方式</p>
<ul>
<li>循环条件中返回false</li>
<li>循环体中执行break：结束当前循环</li>
<li>循环体中执行continue：结束当次循环</li>
<li>break和coninue在多重循环中，可以通过指定标识结束循环（默认跳出包裹关键字的最近一层循环）</li>
</ul>
<h4 id="4-Scanner输入"><a href="#4-Scanner输入" class="headerlink" title="4.Scanner输入"></a>4.Scanner输入</h4><p>从用户输入处获得不同类型的变量，需要用到Scanner类</p>
<ul>
<li>导入Scanner的包</li>
<li>Scanner实例化</li>
<li>调用Scanner类相关方法来获取指定类型的变量</li>
</ul>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="1-数组概述"><a href="#1-数组概述" class="headerlink" title="1.数组概述"></a>1.数组概述</h4><p>（1）数组是多个相同类型数据按照一定顺序排列的集合，并使用一个名字命名，通过编号的方式对数据进行统一管理</p>
<p>（2）数组相关概念：数组名，元素，索引，数组长度</p>
<p>（3）数组特点：</p>
<ul>
<li>数组本身是引用数据类型，数组中的元素可以是任意数据类型</li>
<li>创建数据对象会在内存中开辟一整块连续的空间，而数组名中引用的是这块连续空间的首地址</li>
<li>数组的长度一旦确定，就不能修改</li>
</ul>
<h4 id="2-一维数组的使用"><a href="#2-一维数组的使用" class="headerlink" title="2.一维数组的使用"></a>2.一维数组的使用</h4><p>（1）数组的声明与初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">int</span> [] ids</span><br><span class="line"><span class="comment">// 静态初始化</span></span><br><span class="line">ids = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>&#125;</span><br><span class="line"><span class="comment">// 动态初始化：初始化与赋值分离</span></span><br><span class="line">String[] names = <span class="keyword">new</span> String[<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>（2）调用数组指定位置元素</p>
<p>（3）获取数组长度</p>
<p>（4）数组遍历</p>
<p>（5）数组元素默认初始化值</p>
<p>（6）数组的内存解析</p>
<p>​    内存结构：</p>
<ul>
<li>栈（局部变量）</li>
<li>堆（对象，数组）</li>
<li>方法区（常量池，静态域）</li>
</ul>
<h4 id="3-多维数据的使用"><a href="#3-多维数据的使用" class="headerlink" title="3.多维数据的使用"></a>3.多维数据的使用</h4><p>Java语言里提供多维数组的语法</p>
<p>从数组底层运行机制来看，其实没有多维数组</p>
<p>（1）二维数组的声明与初始化</p>
<p>（2）调用数组指定位置的元素</p>
<p>（3）获取数组长度</p>
<p>（4）遍历二维数组</p>
<p>（5）数组元素默认初始化</p>
<p>​    外层数组初始化为地址值</p>
<p>​    内存元素初始化与一维数组初始化情况相同</p>
<p>（6）二维数组内存解析</p>
<h4 id="4-数组算法"><a href="#4-数组算法" class="headerlink" title="4.数组算法"></a>4.数组算法</h4><p>（1）数组元素赋值</p>
<p>​    二维数组打印杨辉三角</p>
<p>（2）数组元素计算</p>
<ul>
<li>求最值</li>
<li>求和</li>
<li>求平均值</li>
</ul>
<p>（3）数组复制，反转，查找</p>
<ul>
<li>​    java的数组间可以直接赋值，相当于把原数组地址备份了。这两个数组地址值相同，都指向了堆空间唯一的数组实体，这样不能称作数组的复制</li>
<li>数组的赋值，备份数组应当申请出与原数组相同大小的空间后，一一赋值</li>
<li>数组反转，使正数n的数与倒数n的数交换</li>
<li>查找：线性查找，二分查找（必须有序）</li>
</ul>
<p>（4）数组排序</p>
<p>​    排序算法分类：</p>
<ul>
<li>内部排序：排序过程都在内存中完成</li>
<li>外部排序：数据量巨大，必须借助外部存储器完成排序</li>
</ul>
<h4 id="5-数组工具类"><a href="#5-数组工具类" class="headerlink" title="5.数组工具类"></a>5.数组工具类</h4><p>Arrays即操作数组的工具类，包含了用来操作数组的各种方法</p>
<ul>
<li>判断数组相等</li>
<li>输出数组</li>
<li>指定值填充到数组中</li>
<li>对数组进行排序</li>
<li>二分查找数组</li>
</ul>
<h4 id="6-数组常见异常"><a href="#6-数组常见异常" class="headerlink" title="6.数组常见异常"></a>6.数组常见异常</h4><ul>
<li>数组角标越界异常</li>
<li>空指针异常</li>
</ul>
<h2 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h2><p>Java面向对象学习的三条主线：</p>
<ul>
<li>Java类及类的成员：属性，方法，构造器，代码块，内部类</li>
<li>面向对象三大特征：封装性，继承性，多态性（抽象性）</li>
<li>关键字</li>
</ul>
<h3 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h3><h4 id="1-面向过程与面向对象"><a href="#1-面向过程与面向对象" class="headerlink" title="1.面向过程与面向对象"></a>1.面向过程与面向对象</h4><p>面向过程：强调功能行为以函数为最小单位，考虑怎么做</p>
<p>面向对象：将功能封装到对象中，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做</p>
<p>面向过程中为执行者，面向对象中为指挥者</p>
<h4 id="2-类与对象"><a href="#2-类与对象" class="headerlink" title="2.类与对象"></a>2.类与对象</h4><p>（1）概念</p>
<ul>
<li>类是对一类事物的描述，是抽象的，概念上的定义</li>
<li>对象是事情存在的该类事物的个体，因而被称为实例(instance)</li>
</ul>
<p>（2）类的设计</p>
<p>​    设计类其实就是设计类的成员</p>
<p>​    类的基本成员：</p>
<ul>
<li>属性（field）：对应类中成语变量</li>
<li>行为（method）：对应类中的成员方法</li>
<li>除了上面两个常用的外，还有构造器，代码块，内部类</li>
</ul>
<p>（3）对象</p>
<ul>
<li>创建类的对象即类的实例化（new）</li>
<li>调用对象的属性，方法( 对象.属性 对象.方法 )</li>
<li>一个类的多个对象，每个对象都独立拥有一套类的属性。</li>
<li>将对象赋值给另一个对象，它们存有相同的对象地址值指向堆空间同一对象实体</li>
</ul>
<p>（4）对象内存解析</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040944597.png" alt="image-20210418093314518"></p>
<ul>
<li>堆：存放对象实例</li>
<li>栈：指虚拟机栈，用于储存局部变量</li>
<li>方法区：用于存储已被虚拟机加载的类的信息，常量，静态变量（即编译器编译后的代码等数据）</li>
</ul>
<p>（5）成员变量与局部变量</p>
<ul>
<li><p>成员变量（属性）定义在类中</p>
</li>
<li><p>局部变量是声明在方法内，方法形参，代码块内，构造器形参，构造器内部的变量</p>
</li>
<li><p>成员变量（属性）可以在声明时使用权限修饰符指明其权限（封装性）</p>
</li>
<li><p>局部变量不可以使用权限修饰符</p>
</li>
<li><p>成员变量（属性）根据其类型都有默认初始化值</p>
</li>
<li><p>局部变量没有初始化值，所以在调用之前，一定要显式赋值</p>
</li>
<li><p>成员变量（属性）加载到堆空间（非static时）</p>
</li>
<li><p>局部变量加载到栈空间</p>
</li>
</ul>
<p>（6）对象数组（数组中存储对象的地址）</p>
<p>（7）匿名对象的使用</p>
<ul>
<li>创建的对象，没有显式赋给一个变量名，即为匿名对象</li>
<li>特征：匿名对象只能使用一次</li>
<li>使用：可以把一个对象当作一个对象方法的形参，从而达到对象的匿名</li>
</ul>
<p>​    </p>
<h4 id="3-类与方法"><a href="#3-类与方法" class="headerlink" title="3.类与方法"></a>3.类与方法</h4><p>（1）方法：描述类应该有的功能（java内部类中提供了很多方法）</p>
<p>（2）方法声明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 权限修饰符 返回值类型 方法名(形参列表)&#123;方法体&#125;</span></span><br></pre></td></tr></table></figure>

<p>（3）权限修饰符</p>
<p>（4）返回值类型：return后返回指定的数据类型</p>
<p>（5）形参列表：方法可以申请多个形参</p>
<p>（6）方法的使用中，可以调用当前类的属性和方法，也可以实现递归调用</p>
<h4 id="4-方法进阶"><a href="#4-方法进阶" class="headerlink" title="4.方法进阶"></a>4.方法进阶</h4><p>（1）方法重载</p>
<ul>
<li>重载的概念：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或参数类型不同即可</li>
<li>重载的特定：与返回值类型无关，只看参数列表</li>
<li>两同一不同：1.同一个类，相同方法名 2.参数列表个数不同，参数类型不同</li>
<li>可变个数形参：允许直接定义和多个实参相匹配的形参，使用格式：<code>数据类型... 变量名</code>，形参会以数组的形式传入</li>
<li>可变个数形参必须声明在末尾，而且只能声明一个 </li>
</ul>
<p>（2）方法参数的值的传递机制</p>
<p>​    形参：方法定义时，声明的小括号内的参数</p>
<p>​    实参：方法调用时，实际传递给形参的数据</p>
<p>​    值传递机制：</p>
<ul>
<li>参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值（实参和形参都在栈中，都是数据本身）</li>
<li>参数是引用数据类型，此时实参赋给形参的是变量所保存数据的地址值（实参和形参都在栈中，存储的是数据的地址，数据在堆中）</li>
</ul>
<p>（3）递归方法</p>
<p>递归方法：一个方法体内调用它自身</p>
<ul>
<li>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制</li>
<li>递归一定要向已知方向递归，否则会变成无穷递归，类似于死循环</li>
</ul>
<h4 id="5-封装与隐藏"><a href="#5-封装与隐藏" class="headerlink" title="5.封装与隐藏"></a>5.封装与隐藏</h4><p>（1）封装的引出</p>
<p>程序设计追求：“高内聚，低耦合”：</p>
<p>高内聚：类的内部数据操作细节自己完成，不允许外部干涉（相同方法高度集中在一个类中）</p>
<p>低耦合：仅对外暴露少量方法用于使用（类与类之间的依赖关系降低）</p>
<p>（2）封装设计思想</p>
<p>​    隐藏该隐藏的，暴露该暴露的</p>
<ul>
<li>对于类内某个属性使用private修改符，类外对该属性的操作，只能通过类内设置的方法（隐藏私有属性，暴露公共方法）</li>
<li>不对外暴露私有方法，单例模式</li>
</ul>
<p>（3）访问权限修饰符</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040944324.png" alt="image-20210418131340405"></p>
<p>以上四种权限都可以用来修饰类的内部结构，属性，方法，构造器，内部类</p>
<p>修饰类只能使用：缺省，public</p>
<h4 id="6-构造器"><a href="#6-构造器" class="headerlink" title="6.构造器"></a>6.构造器</h4><p>构造器（constructor）又称构造方法</p>
<p>（1）构造器作用</p>
<ul>
<li>创建对象</li>
<li>初始化对象信息（属性方法）</li>
</ul>
<p>（2）构造器说明</p>
<ul>
<li>如果没有显示定义的构造器，系统默认提供一个空参构造器。一旦定义了构造器，系统不再提供空参构造器</li>
<li>定义构造器格式：权限修饰符 类名(形参列表){}，无返回值</li>
<li>一个类中定义多个构造器，彼此构成重载</li>
<li>一个类中，至少会有一个构造器</li>
</ul>
<h4 id="7-JavaBean"><a href="#7-JavaBean" class="headerlink" title="7.JavaBean"></a>7.JavaBean</h4><p>JavaBean是可重用组件：</p>
<ul>
<li><p>类是公共的</p>
</li>
<li><p>有个无参的公共构造器</p>
</li>
<li><p>有属性，且有对应的get，set方法</p>
</li>
</ul>
<h4 id="8-this"><a href="#8-this" class="headerlink" title="8.this"></a>8.this</h4><p>this表示当前对象，可以调用类的属性，方法，构造器</p>
<p>（1）this含义</p>
<ul>
<li>this在方法内部使用，即这个方法所属对象的引用</li>
<li>this在构造器内部使用，表示该构造器正在初始化的对象</li>
</ul>
<p>（2）this修饰属性和方法</p>
<ul>
<li>照类的方法中，可以使用this调用当前对象属性或方法</li>
<li>可以用this来区分局部变量和属性</li>
</ul>
<p>（3）this调用构造器</p>
<ul>
<li>在类的构造器中，可以显式使用<code>this(形参列表)</code>的方式，调用本类中指定的其他构造器</li>
<li>构造器不能调用自己</li>
</ul>
<h4 id="9-package与import的使用"><a href="#9-package与import的使用" class="headerlink" title="9.package与import的使用"></a>9.package与import的使用</h4><p>（1）package</p>
<ul>
<li>为了更好实现项目中类的管理，提供包的概念</li>
<li>使用packae声明类或接口所属的包，声明在源文件的首行</li>
<li>同一个包下，不能命名同名接口和类</li>
<li>JDK提供了包，其中包含常用的类和接口</li>
</ul>
<p>（2）MVC设计模式 </p>
<ul>
<li><p>模型层model：主要用于处理数据</p>
</li>
<li><p>控制层controller：处理业务逻辑</p>
</li>
<li><p>视图层view：显示数据</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040944267.png" alt="image-20210418190748964"></p>
</li>
</ul>
<p>（3）import关键字</p>
<ul>
<li>在源文件中使用import可以导入指定包下的类，接口</li>
<li>声明在包声明和类声明之间</li>
<li>如果类和接口是在java.lang或本包下定义的，则可以省略import结构</li>
</ul>
<p>​    </p>
<h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><h4 id="1-继承性概念"><a href="#1-继承性概念" class="headerlink" title="1.继承性概念"></a>1.继承性概念</h4><p>（1）继承性的优点：</p>
<ul>
<li>减少代码冗余，提高代码复用性</li>
<li>便于功能扩展</li>
<li>是多态性的继承</li>
</ul>
<p>（2）继承性格式  class A extends B {}：</p>
<ul>
<li><p>A：子类，派生类</p>
</li>
<li><p>B：父类，基类</p>
</li>
<li><p>子类继承父类后，就可以获得父类中声明的结构，属性，方法</p>
</li>
<li><p>子类可以在父类的基础上声明自己的属性或方法，实现功能的拓展</p>
</li>
</ul>
<p>（3）继承规则</p>
<ul>
<li>子类继承父类后，仍然获得了父类中私有的属性和方法，但是由于封装性，子类不能直接调用父类的结构</li>
<li>子类对象“拥有”父类对象的私有属性，但无法直接操作，不属于“继承“</li>
<li>支持单继承和多继承：一个子类只要一个父类，一个父类可以派生多个子类</li>
<li>子父类是相对的概念</li>
<li>如果没有显式声明一个类的父类，则此类继承于java.lang.Object类</li>
</ul>
<h4 id="2-方法的重写"><a href="#2-方法的重写" class="headerlink" title="2.方法的重写"></a>2.方法的重写</h4><p>子类根据要求对父类中继承来的方法进行改造，子类方法覆盖父类方法这个过程称为方法的重写</p>
<p>（1）重写：子类继承父类后，可以对父类中同名同参数的方法，进行覆盖操作</p>
<p>（2）重载与重写的区别</p>
<p>（3）重写规则</p>
<ul>
<li><p>方法的声明：权限修饰符 返回值类型 方法名(形参列表){方法体}</p>
</li>
<li><p>子类重写的方法的方法名和形参列表要与父类被重写的方法相同</p>
</li>
<li><p>子类重写的方法的权限修饰符要不小于父类被重写的方法修饰符</p>
</li>
<li><p>子类不能重写父类中声明为private权限的方法</p>
</li>
<li><p>子类重写的方法返回值要与父类被重写的返回值相同</p>
</li>
</ul>
<h4 id="3-spuer"><a href="#3-spuer" class="headerlink" title="3.spuer"></a>3.spuer</h4><p>与super对应的是this，this代指本对象，super则代指本对象的父类</p>
<p>super的使用：</p>
<ul>
<li>super理解为：父类的</li>
<li>super可以调用：属性，方法，构造器</li>
<li>在子类的方法或构造器中，可以通过super调用父类中声明的属性或方法</li>
<li>super调用构造器，必须在子类构造器首行进行声明</li>
<li>在类的构造器中，this和super只能二选一（默认情况下调用的是父类中的空参构造器，即super()）</li>
</ul>
<h4 id="4-子类对象实例化过程"><a href="#4-子类对象实例化过程" class="headerlink" title="4.子类对象实例化过程"></a>4.子类对象实例化过程</h4><ul>
<li>创建子类对象，在堆空间，就会加载所有父类中声明的属性</li>
<li>通过子类构造器构造子类对象时，就会直接或间接调用了其父类的构造器，直至调用到java.lang.Object的空参构造器</li>
<li>虽然创建子类对象时调用了父类的构造器，但是自始至终就创建了一个对象，即new出来的子类实例</li>
</ul>
<h4 id="5-多态性"><a href="#5-多态性" class="headerlink" title="5.多态性"></a>5.多态性</h4><p>对象的多态性：父类的引用指向子类的对象（子类的对象赋给父类引用），可以直接应用到抽象类和接口上。方便传参时，可根据new的对象的不同传入不同的对象</p>
<p>多态就是同一个接口，使用不同的实例而执行不同操作</p>
<p>（1）多态的使用</p>
<ul>
<li>有了对象多太性以后，我们在编译期，只能调用父类中的声明的方法，但在运行期，我们实际执行了子类重写父类的方法</li>
<li>编译看左（父类），运行看右（子类）</li>
<li>多态性使用前提：类的继承关系，方法重写</li>
<li>多态性主要用于方法，不适用于属性</li>
</ul>
<p>（2）虚拟方法的调用</p>
<ul>
<li>​    在多态的情况下，子类定义了父类同名同参数的方法，此时父类的方法被称为虚拟方法。</li>
<li>父类根据赋给它的不同子类对象，动态调用属于子类的该方法</li>
<li>这样的方法时无法在编译期确定的，只有到方法调用那一刻，解释运行器才会确定所要调用的具体方法（”动态绑定“）</li>
</ul>
<h4 id="6-向下转型"><a href="#6-向下转型" class="headerlink" title="6.向下转型"></a>6.向下转型</h4><p>​    在多态中可知，虽然内存加载了子类的方法，但是由于类型是父类，所以编译时无法调用子类的属性和方法，只能调用父类中声明的属性和方法</p>
<p>为了调用子类特有的属性和方法，我们需要用到强制类型转换符，向下转型</p>
<p>（1）instanceof操作符</p>
<ul>
<li>检验对象是否为某类的对象，返回值为Boolean</li>
<li>为了避免在向下转型时出现ClassCastException的异常，在向下转型前进行instanceof判断，为true才能进行向下转型  </li>
</ul>
<p>（2）向下转型规则</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040944489.png" alt="image-20210419073037475"></p>
<h3 id="Object类的使用"><a href="#Object类的使用" class="headerlink" title="Object类的使用"></a>Object类的使用</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040944251.png" alt="image-20210419073502990"></p>
<h4 id="1-和equals的区别"><a href="#1-和equals的区别" class="headerlink" title="1.==和equals的区别"></a>1.==和equals的区别</h4><p>（1）==运算符</p>
<ul>
<li>可以使用在基本数据类型和引用数据类型中</li>
<li>如果比较的是基本数据类型，比较两个变量保存的数据是否相等（不一定类型相同）</li>
<li>如果比较的是引用数据类型，比较两个对象的地址值是否相同（两个引用是否指向同一个对象实体）</li>
</ul>
<p>（2）equals()方法</p>
<ul>
<li>是一个方法而非运算符</li>
<li>只适用于引用数据类型</li>
<li>Object类中定义的equals()和==的作用是一样的，即比较比较两个对象的地址值是否相同</li>
<li>但是String，Date，File等类重写了Object类中的equals()方法，重写以后就是比较两个对象的“实体内容”是否相同了</li>
</ul>
<h4 id="2-toString-方法"><a href="#2-toString-方法" class="headerlink" title="2.toString()方法"></a>2.toString()方法</h4><ul>
<li>当我们输出一个对象的引用时，实际上就是调用当前对象的toString()</li>
<li>String，Date，File等类重写了Object类中的toString()方法。使得在调用对象的toString时，返回“实体内容”信息</li>
</ul>
<h3 id="包装类的使用"><a href="#包装类的使用" class="headerlink" title="包装类的使用"></a>包装类的使用</h3><h4 id="1-包装类介绍"><a href="#1-包装类介绍" class="headerlink" title="1.包装类介绍"></a>1.包装类介绍</h4><p>针对八种基本数据类型有相应的引用类型——包装类（封装类）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040944665.png" alt="image-20210419081234938"></p>
<p>基本数据类型，包装类，String三者的相互转换：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945274.png" alt="image-20210419082428442"></p>
<h4 id="2-数据类型转换"><a href="#2-数据类型转换" class="headerlink" title="2.数据类型转换"></a>2.数据类型转换</h4><ul>
<li>基本数据类型 &gt; 包装类：调用包装类的构造器</li>
<li>包装类 &gt; 基本数据类型：调用包装类的xxxValue()</li>
<li>基本数据类型，包装类 &gt; String类型：1.使用字符串的连接运算 2.调用String的ValueOf()方法</li>
<li>String类型 &gt; 基本数据类型，包装类 ：调用包装类的parseXxx(String s)方法</li>
<li>在JDK5.0后，基本数据类型和包装类已经可以实现自动拆箱与自动装箱</li>
</ul>
<h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><p>static让类的实例共享一个属性或方法，无论新建多少个对象都会有这个静态的属性或方法</p>
<h4 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1.使用方法"></a>1.使用方法</h4><ul>
<li>static:静态的</li>
<li>static可以用来修饰：属性，方法，代码块，内部类</li>
</ul>
<h4 id="2-修饰属性"><a href="#2-修饰属性" class="headerlink" title="2.修饰属性"></a>2.修饰属性</h4><ul>
<li><p>实例变量：每个对象都独立拥有一套类中的非静态属性，当修改其中一个对象的非静态属性时，不会导致其他对象相同属性值修改</p>
</li>
<li><p>静态变量：多个对象共享同一个静态变量，，当修改其中一个对象的静态属性时，其他对象的静态变量也随之改变</p>
</li>
<li><p>静态变量随着类的加载而加载，静态变量的加载要早于对象的创建</p>
</li>
<li><p>因为类只会加载一次，所以静态变量在内存中只会存在一份（方法区的静态域中）</p>
</li>
<li><p>实例变量与类变量的内存解析</p>
</li>
</ul>
<h4 id="3-修饰方法"><a href="#3-修饰方法" class="headerlink" title="3.修饰方法"></a>3.修饰方法</h4><ul>
<li>静态方法，只能调用静态的方法或属性；非静态方法既可以调用非静态的方法或属性，也可以调用静态的方法或属性</li>
<li>静态方法随着类的加载而加载</li>
</ul>
<h4 id="4-静态的使用"><a href="#4-静态的使用" class="headerlink" title="4.静态的使用"></a>4.静态的使用</h4><ul>
<li>确定一个属性用静态：属性可以被多个对象共享，不会随对象不同而不同</li>
<li>确定一个方法用静态：1.操作静态属性的方法用静态 2.工具类的方法，习惯上声明为静态</li>
<li>单例设计模式：对某个类只能存在一个对象实例（使用静态让其可以永久驻留内存），减少了系统性能开销</li>
</ul>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h4 id="1-代码块概念"><a href="#1-代码块概念" class="headerlink" title="1.代码块概念"></a>1.代码块概念</h4><ul>
<li>代码块的作用：用来初始化类，对象</li>
<li>代码块只能用static修饰</li>
</ul>
<h4 id="2-静态代码块"><a href="#2-静态代码块" class="headerlink" title="2.静态代码块"></a>2.静态代码块</h4><ul>
<li>内部可以有输出语句</li>
<li>随着类的加载而执行，而且只执行一次</li>
<li>作用：初始化类的信息</li>
<li>一个类可以定义多个静态代码块，而且按声明先后顺序执行</li>
<li>静态代码块的执行要优先于非静态  </li>
<li>静态代码块内只能调用静态的属性，静态的方法，不能调用非静态结构</li>
</ul>
<h4 id="3-非静态代码块"><a href="#3-非静态代码块" class="headerlink" title="3.非静态代码块"></a>3.非静态代码块</h4><ul>
<li>内部可以有输出语句 </li>
<li>随着对象的创建而执行</li>
<li>每创建一个对象，就执行一次非静态代码块</li>
<li>作用：可以在创建对象时，对对象属性等进行初始化</li>
<li>一个类可以定义多个非静态代码块，而且按声明先后顺序执行</li>
<li>非静态代码块内可以调用静态的属性，静态的方法或非静态的属性，非静态的方法</li>
</ul>
<h4 id="2-属性赋值总结"><a href="#2-属性赋值总结" class="headerlink" title="2.属性赋值总结"></a>2.属性赋值总结</h4><ul>
<li>默认初始化</li>
<li>显式初始化</li>
<li>在代码块中赋值</li>
<li>构造器初始化</li>
<li>通过<code>对象.属性</code>的方式赋值</li>
</ul>
<p>按照由上到下的顺序先后执行</p>
<h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><h4 id="1-final概念"><a href="#1-final概念" class="headerlink" title="1.final概念"></a>1.final概念</h4><ul>
<li><p>final意为最终的，可以禁止对修饰对象进一步的更改修饰</p>
</li>
<li><p>final可以用来修饰类，方法，变量</p>
</li>
</ul>
<h4 id="2-final修饰"><a href="#2-final修饰" class="headerlink" title="2.final修饰"></a>2.final修饰</h4><ul>
<li>被修饰的类不能被其他类所继承</li>
<li>被修饰的方法不能被重写</li>
<li>被修饰的变量被称为常量</li>
<li>被修饰的变量为属性：其可以被赋值的位置有：显式初始化，代码块中初始化，构造器中初始化</li>
<li>被修饰的变量为局部变量：尤其是修饰形参时，表名此时形参是一个常量。当我们调用此方法时，给常量形参赋一个实参，一旦赋值以后，就只能在方法体内使用此形参，但不能重新赋值</li>
<li>static final 修饰属性：全局常量</li>
</ul>
<h3 id="抽象类与抽象方法"><a href="#抽象类与抽象方法" class="headerlink" title="抽象类与抽象方法"></a>抽象类与抽象方法</h3><p>父类在设计中要求更一般，更通用。但一个父类设计得非常抽象时，以至于它没有任何具体实例，这样得类称为抽象类</p>
<h4 id="1-abstract的使用"><a href="#1-abstract的使用" class="headerlink" title="1.abstract的使用"></a>1.abstract的使用</h4><ul>
<li>abstract意为抽象的</li>
<li>abstract可以修饰的结构：类，方法</li>
<li>abstract不能修饰私有方法，静态方法，final的方法，final的类</li>
</ul>
<h4 id="2-抽象类特点"><a href="#2-抽象类特点" class="headerlink" title="2.抽象类特点"></a>2.抽象类特点</h4><ul>
<li>abstract修饰的类不能实例化</li>
<li>抽象类中一定有构造器，便于子类实例化时调用</li>
<li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关操作</li>
<li>抽象类的匿名子类</li>
</ul>
<h4 id="3-抽象方法特点"><a href="#3-抽象方法特点" class="headerlink" title="3.抽象方法特点"></a>3.抽象方法特点</h4><ul>
<li>抽象方法只有方法声明，没有方法体</li>
<li>包含抽象方法的类，一定是一个抽象类</li>
<li>只有子类重写了父类所有的抽象方法后，此子类才能实例化（否则子类也是个抽象类）</li>
</ul>
<h4 id="4-抽象类应用"><a href="#4-抽象类应用" class="headerlink" title="4.抽象类应用"></a>4.抽象类应用</h4><ul>
<li>模板方法设计模式：抽象类作为多个子类的通用模板，子类在抽象类基础上进行拓展，改造</li>
<li>模板方法设计可以让固定通用的步骤在父类中写好，然后将易变的部分抽象出来，供不同的子类实现</li>
</ul>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="1-接口概述"><a href="#1-接口概述" class="headerlink" title="1.接口概述"></a>1.接口概述</h4><ul>
<li>有时必须从几个类中派生出一个子类，让子类继承它们所以的属性和方法，但是Java是不支持多重继承的（继承中子类只能有一个父类），这时候就需要用到接口</li>
<li>有时必须从几个类中抽取一些共同的行为特征。，而它们之间不存在继承关系，这时候也要用到接口</li>
<li>继承是一个“是不是”的关系，而接口则是“能不能”的关系（体现了如果你是/要……则必须能……）</li>
<li>接口的本质是契约，标准，规范</li>
</ul>
<h4 id="2-接口的使用"><a href="#2-接口的使用" class="headerlink" title="2.接口的使用"></a>2.接口的使用</h4><ul>
<li>类和接口时并列的两个结构</li>
<li>接口使用interface来定义</li>
<li>接口中可以定义全局变量，抽象方法，静态方法，默认方法</li>
<li>接口中不能定义构造器，这意味着接口不能实例化</li>
<li>接口中定义的静态方法只能通过接口调用</li>
<li>通过实现类的对象，可以调用接口中的默认方法（而不是像抽象方法那样要先重写抽象类才能实例化，实现类也可以重写接口的默认方法）</li>
<li>接口可以通过让类去实现（implements）的方式来使用，如果实现类覆盖了接口所有抽象方法，则实现类可以实例化，如果没有则仍为一个抽象类</li>
<li>Java可以实现多个接口，弥补了Java单继承性的局限性，格式：<code>class AA extends BB implements CC,DD,EE</code></li>
<li>接口与接口之间也可以继承，而且是多继承</li>
</ul>
<h4 id="3-接口的优点"><a href="#3-接口的优点" class="headerlink" title="3.接口的优点"></a>3.接口的优点</h4><ul>
<li>接口的具体使用，体现多态性  </li>
<li>接口实际上可以看作是一种规范，实现其接口的类必须按步骤（规范）实现相关的方法才能运行</li>
<li>接口的主要用途就是被实现类实现</li>
</ul>
<h4 id="4-接口应用"><a href="#4-接口应用" class="headerlink" title="4.接口应用"></a>4.接口应用</h4><p>（1）代理模式：</p>
<ul>
<li><p>为其他对象提供一种代理以控制对这个对象的访问</p>
</li>
<li><p>安全代理：可以屏蔽真实对象的直接访问</p>
</li>
<li><p>远程代理：通过代理类处理远程方法调用</p>
</li>
<li><p>延迟加载：先加载轻量级的代理对象，真正需要再加载真实的对象</p>
</li>
</ul>
<p>（2）工厂设计模式</p>
<ul>
<li>实现创建者与调用者的分离，即将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的</li>
<li>简单工厂模式：用来生产同一等级结构中任意产品（对于增加新产品，需要修改已有代码）</li>
<li>工厂方法模式：用来生成同一等级结构中的固定产品（支持增加任意产品）</li>
<li>抽象工厂模式：用来生产不同产品族的全部产品（对于增加新的产品，无能为力，支持增加产品族）</li>
</ul>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>在A类中定义了另一个类B，则A为外部类，B为内部类</p>
<p>内部类有两种：成员内部类和局部内部类（此类在开发中很少被使用）</p>
<h4 id="1-成员内部类"><a href="#1-成员内部类" class="headerlink" title="1.成员内部类"></a>1.成员内部类</h4><p>（1）作为外部类的成员</p>
<ul>
<li>调用外部类的结构</li>
<li>可以被static修饰</li>
<li>可以被4种不同的权限修饰</li>
</ul>
<p>（2）作为一个类</p>
<ul>
<li>可以在类内定义属性，方法，构造器</li>
<li>可以被final修饰，表示此类不能被继承</li>
<li>可以被abstract修饰</li>
</ul>
<p>（3）调用</p>
<ul>
<li>实例化成员内部类的对象：（通过点运算符：<code>Person.Dog dog = new Person.Dog()</code> ）</li>
<li>在成员内部类种区分调用外部类的结构（属性方法）：通过this</li>
</ul>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h3><p>异常：程序执行中发生的不正常情况被称为“异常”（开发过程中的语法错误和逻辑错误不是异常）</p>
<h4 id="1-异常分类"><a href="#1-异常分类" class="headerlink" title="1.异常分类"></a>1.异常分类</h4><p>（1）Error型：Java虚拟机无法解决的严重问题，一般不编写针对性代码进行处理</p>
<ul>
<li>JVM系统内部错误</li>
<li>资源耗尽</li>
</ul>
<p>（2）Exception型：其他因编程原因或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理</p>
<ul>
<li>空指针访问</li>
<li>试图读取不存在的文件</li>
<li>网络连接中断</li>
<li>数组角标越界</li>
</ul>
<p>Exception分类：编译异常，运行异常</p>
<h4 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h4><ul>
<li>遇到错误终止程序运行</li>
<li>编写程序时，错误检测，错误消息的提示，以及错误的处理</li>
<li>捕获异常最理想的是在编译期间，但是有的错误只有在运行时才能发生（Exception分类：编译异常，运行异常）</li>
<li>异常处理中，要在可能出现错误的地方加上检测代码</li>
<li>过多的if-else封装会导致代码臃肿，可读性差，因此采用异常处理机制</li>
<li>在开发中运行异常比较常见，所以我们往往针对编译时的异常编写异常捕捉代码</li>
<li>手动生成一个异常对象，并用throw方法抛出</li>
</ul>
<h4 id="3-异常处理"><a href="#3-异常处理" class="headerlink" title="3.异常处理"></a>3.异常处理</h4><p>（1）try-catch-finally</p>
<ul>
<li>try{可能出现异常的代码}catch{异常类型 变量名}finally{一定会执行的代码}</li>
<li>finally是可选的</li>
<li>try中的代码执行过程中一旦出现异常就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配</li>
<li>一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常处理，一旦处理完成就跳出当前try-catch结构，有finally则进入finally中</li>
<li>常用的异常对象处理方式（放在catch中）：1.String getMessage()：打印出异常信息   2.printStackTrace()：打印整个错误对象信息（比较常用）</li>
<li>在try中声明的变量，再出了try结构后，就不能再被调用</li>
</ul>
<p>try-catch相当于将一个编译时可能出现的异常，延迟到运行时出现</p>
<p>（2）finally解析</p>
<ul>
<li>finally声明的是一定会被执行的代码，无论有没有捕捉到异常都会执行</li>
<li>先数据库连接，输入输出流，网络编程Socket等资源，JVM是不能自动的回收，所以我们需要手动的进行资源的释放。此时的资源释放就要声明到finally中</li>
</ul>
<p>（3）throws + 异常处理</p>
<ul>
<li>throws + 异常处理写在方法声明处，指明此方法执行时，可能会抛出的异常类型，一旦当方法体执行时，出现异常，仍然会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出</li>
<li>try-catch-finally是真正的将异常处理掉了，throws的方式只是将异常抛出</li>
</ul>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h3><h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><p>（1）程序与进程</p>
<ul>
<li>程序是为了完成特定任务，用某种语言编写的一组指令的集合，即指一段静态代码，静态对象</li>
<li>进程是程序的一次执行过程，是一个动态的过程：有自身的产生，存在和消亡的过程</li>
<li>程序是静态的，进程是动态的。进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</li>
</ul>
<p>（2）线程与进程</p>
<ul>
<li>进程可以细化为线程，是一个程序内部的一条执行路径</li>
<li>一个Java应用程序至少有三个线程：main()主线程，gc()垃圾回收线程, 异常处理线程</li>
<li>线程作为调度和执行的单位，每个线程都拥有独立的运行栈和程序计数器，线程切换的开销小</li>
<li>一个进程中的多个线程共享相同的内存单元/内存地址空间（从同一堆中分配对象，可以访问相同变量和对象），这使线程间通信更加简洁，高效，但是也带来了安全隐患</li>
</ul>
<p>（3）并发与并行</p>
<ul>
<li>并行：多个CPU同时执行多个任务</li>
<li>并发：一个CPU同时执行多个任务</li>
</ul>
<h4 id="2-多线程的应用"><a href="#2-多线程的应用" class="headerlink" title="2.多线程的应用"></a>2.多线程的应用</h4><p>（1）多线程的优点</p>
<ul>
<li>提高应用程序的响应，对图形化界面更有意义</li>
<li>提高计算机相同CPU的利用率</li>
<li>改善程序结构，将长而复杂的进程分为多个线程独立运行，利于理解和修改</li>
</ul>
<p>（2）多线程使用场景</p>
<ul>
<li>程序需要同时执行多个任务</li>
<li>程序需要实现一些需要等待的任务（用户输入，文件读写操作，网络操作，搜索）</li>
<li>需要一些后台运行的程序</li>
</ul>
<h4 id="3-线程的创建与使用"><a href="#3-线程的创建与使用" class="headerlink" title="3.线程的创建与使用"></a>3.线程的创建与使用</h4><p>（1）多线程的创建（继承Thread类）</p>
<ul>
<li><p>创建一个继承于Tread类的子类</p>
</li>
<li><p>重写Thread类的run()：声明此线程执行的操作</p>
</li>
<li><p>创建Thread类的子类对象</p>
</li>
<li><p>通过此对象调用start()：启动当前线程；调用当前线程的run() </p>
</li>
<li><p>不能直接调用run()的方式启动线程</p>
</li>
</ul>
<h4 id="4-线程常用方法"><a href="#4-线程常用方法" class="headerlink" title="4.线程常用方法"></a>4.线程常用方法</h4><ul>
<li><p>start()：启动线程，调用当前线程的run()</p>
</li>
<li><p>run()：线程被调度时执行的操作</p>
<p>getName()：返回线程名称</p>
</li>
<li><p>setName(String name) ：设置线程名称</p>
</li>
<li><p>yield()：释放当前CPU的执行权</p>
</li>
<li><p>join()：在线程a中调用线程b的jion()，线程a进入阻塞状态直到线程b执行完</p>
</li>
<li><p>sleep(long millitime)：让当前线程睡眠，当前线程是阻塞状态</p>
</li>
<li><p>isAlive()：判断当前线程是否存活</p>
</li>
<li><p>stactic Thread currentThread()：返回当前线程</p>
</li>
</ul>
<h4 id="5-线程优先级设置"><a href="#5-线程优先级设置" class="headerlink" title="5.线程优先级设置"></a>5.线程优先级设置</h4><p>（1）线程的调度</p>
<ul>
<li>调度策略：抢占式，高优先级的线程抢占CPU</li>
<li>调度方法：对同优先级线程组成先进先出队列，使用时间片策略; 对高优先级，使用优先调度的抢占式策略</li>
</ul>
<p>（2）线程优先级</p>
<ul>
<li>线程优先级等级：MAX_PRIORITY(10)，MIN_PRIORITY(1)，NORM_PRIORITY(5)</li>
<li>涉及的方法：getPriority()：返回线程优先级；setPriority(int newPriority)：改变线程优先级</li>
<li>线程创建时继承父线程的优先级</li>
<li>低优先级只是获得调度的概率低，并非一定是高优先级线程后才被调用</li>
</ul>
<h4 id="6-创建多线程方式"><a href="#6-创建多线程方式" class="headerlink" title="6.创建多线程方式"></a>6.创建多线程方式</h4><p>（1）继承Thread方式</p>
<ul>
<li>多线程时可用静态变量，让每个线程处理的数据都是在同一个地方，而不是又重新创建一个数据对象</li>
</ul>
<p>（2）创建多线程的方式二：实现Runnable接口</p>
<ul>
<li>创建一个实现Runnable接口的类（该实现类定义的变量也是线程公用的）</li>
<li>实现类去实现Runnable中的抽象方法：run()</li>
<li>创建实现类的对象</li>
<li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li>
<li>通过Thread类的对象调用start()</li>
</ul>
<p>（3）创建多线程的新方法：实现Callable接口</p>
<ul>
<li>call()可以有返回值</li>
<li>call()可以抛出异常，被外面的操作捕获，获得异常的信息</li>
<li>Callable支持泛型</li>
</ul>
<p>（4）创建多线程的新方法：使用线程池</p>
<ul>
<li>经常创建销毁，使用量特别大的资源，对性能影响很大</li>
<li>提前创建多个线程，放入线程池中，使用时直接获取，使用完放回池中，可以避免频繁创建销毁，实现重复利用</li>
<li>好处：提高了响应速度; 降低资源消耗; 便于线程管理;</li>
</ul>
<p>  （5）比较两种创建多线程的方式</p>
<ul>
<li>开发中优先现在实现Runnable接口的方式</li>
<li>原因：1.实现方式没有类的单继承性的局限性  2.实现的方式更适合来处理多个线程有共享数据的情况</li>
<li>联系：两种方式都需要重写run()，将线程要执行的逻辑声明在run()中</li>
</ul>
<h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><h4 id="1-线程的生命周期"><a href="#1-线程的生命周期" class="headerlink" title="1.线程的生命周期"></a>1.线程的生命周期</h4><p>（1）线程状态</p>
<ul>
<li>新建：当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</li>
<li>就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它具备运行的条件，只是没有分配到CPU资源</li>
<li>运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run()方法定义了线程的操作和功能</li>
<li>阻塞：线程被人为挂起或执行输入输出操作时，让出CPU并临时中止执行的执行进入阻塞状态</li>
<li>死亡：线程完成了全部工作或线程被提前强制性中止或出现异常导致结束</li>
</ul>
<p>（2）线程状态转换</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945714.png" alt="image-20210423073620432"></p>
<h4 id="2-线程同步"><a href="#2-线程同步" class="headerlink" title="2.线程同步"></a>2.线程同步</h4><p>（1）多线程存在问题</p>
<ul>
<li><p>多个线程执行的不确定性引起执行结构的不稳定</p>
</li>
<li><p>多个线程对数据的共享，会造成操作的不完整性，会破坏数据</p>
</li>
<li><p>线程的安全问题：（数据重复，数据错误）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945201.png" alt="image-20210423074125257"></p>
</li>
<li><p>线程安全问题出现的原因：当某个线程在操作数据时，尚未完成操作，其他线程就参与进来，也操作了车票</p>
</li>
</ul>
<p>（2）线程安全问题的解决</p>
<ul>
<li><p>当一个线程在操作共享数据时，其他线程不能参与进来，直到该线程完成操作（即时出现了阻塞也不能改变）</p>
</li>
<li><p>通过同步机制解决线程安全问题：1.同步代码块; 2.同步方法；</p>
</li>
<li><p>同步代码块：synchroized(同步监视器){需要同步的代码}，操作共享数据的代码，即为需要同步的代码</p>
</li>
<li><p>同步监视器就是我们所熟悉的锁（任何一个类的对象都可以充当锁），多个线程必须共用一把锁</p>
</li>
<li><p>同步方法：在方法中使用synchroized修饰方法，然后再调用</p>
</li>
<li><p>同步方法：1.同步方法仍涉及到同步监视器，只是不需要显式声明; 2.非静态的同步方法监视器是this; 3.静态的同步方法监视器是当前类本身 </p>
</li>
<li><p>操作同步代码时实质上是单线程过程，效率低（一个线程操作，其他线程等待）</p>
</li>
</ul>
<h4 id="3-线程死锁问题"><a href="#3-线程死锁问题" class="headerlink" title="3.线程死锁问题"></a>3.线程死锁问题</h4><p>（1）死锁原理</p>
<ul>
<li>不同线程分别占用了对方需要的同步资源，都在等待对方放弃自己需要的同步资源，就会形成线程的死锁</li>
<li>出现死锁后，不会出现异常或错误提示，只是所有线程都处在阻塞状态，无法继续</li>
</ul>
<p>（2）解决方法</p>
<ul>
<li>专门的算法，原则</li>
<li>尽量减少同步资源的定义</li>
<li>尽量避免嵌套同步</li>
</ul>
<h4 id="4-Lock-锁"><a href="#4-Lock-锁" class="headerlink" title="4.Lock(锁)"></a>4.Lock(锁)</h4><p>Java提供了更加强大的线程同步机制——通过显式定义同步锁对象来实现同步，其同样可以解决线程安全问题</p>
<p>（1）Lock与synchroized的异同</p>
<ul>
<li>同：两者都可以解决线程问题</li>
<li>异：synchroized执行同步代码后，自动释放同步监视器; Lock需要手动启动同步（lock()），手动结束同步（unlock()）</li>
<li>Lock只有代码块锁，synchroized有代码块锁和方法锁</li>
<li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好，并具有更好的扩展性</li>
</ul>
<p>（2）使用顺序</p>
<p>Lock -&gt; 同步代码块-&gt; 同步方法</p>
<h4 id="5-线程通信"><a href="#5-线程通信" class="headerlink" title="5.线程通信"></a>5.线程通信</h4><p>（1）常用方法</p>
<ul>
<li>wait()：一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器</li>
<li>notify()：一旦执行此方法，就会唤醒被wait的一个线程，如果有多个线程被wait，就唤醒优先级高的线程</li>
<li>notifyAll()：一旦执行此方法，就会唤醒所有被wait的线程</li>
</ul>
<p>以上三个方法必须用在同步代码块或同步方法中</p>
<p>（2）sleep()和wait()的异同</p>
<ul>
<li>同：一旦执行方法，都可以使得当前得线程进入阻塞状态</li>
<li>异：1.声明位置不同   2.调用要求不同 3.是否释放同步监视器</li>
</ul>
<h2 id="Java常用类"><a href="#Java常用类" class="headerlink" title="Java常用类"></a>Java常用类</h2><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><h4 id="1-String概述"><a href="#1-String概述" class="headerlink" title="1.String概述"></a>1.String概述</h4><ul>
<li>String类代表字符串</li>
<li>Stirng是一个final类（ 不可被继承），代表不可变的字符串序列</li>
<li>字符串是常量，值在创建后不能更改</li>
<li>String对象的字符内容是存储在一个字符数组value[]中的</li>
<li>通过字面量的方式（区别于new）给一个字符串赋值，此时字符串声明在字符串常量池中（方法区）</li>
<li>字符串常量池不会存储相同内容的字符串，故栈中不同的局部变量如果赋相同字面量，实际指向方法区同一位置（地址相同）</li>
</ul>
<h4 id="2-String实现接口"><a href="#2-String实现接口" class="headerlink" title="2.String实现接口"></a>2.String实现接口</h4><ul>
<li>Serializable接口：表示字符串支持序列化</li>
<li>Comparable接口：表示字符串可以比较大小</li>
</ul>
<h4 id="3-不可变性体现"><a href="#3-不可变性体现" class="headerlink" title="3.不可变性体现"></a>3.不可变性体现</h4><ul>
<li>当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值</li>
<li>对现有的字符串进行连接操作、修改操作时，也需要重新指定内存区域赋值</li>
</ul>
<h4 id="4-String实例化"><a href="#4-String实例化" class="headerlink" title="4.String实例化"></a>4.String实例化</h4><p>（1）String实例化方式：</p>
<ul>
<li>通过字面量定义（数据存储在在方法区字符串常量池中，字符串作为常量，各变量共享一个数据空间）：<code>String s1 = &quot;2333&quot;</code></li>
<li>通过new  + 构造器（字符串数据仍然存储在常量池中，但是字符串的引用值存储在堆中，每创建一个字符串都会在堆中开辟新的空间存储字符串的引用值）：<code>String s3  = new String(&quot;javaEE&quot;)</code></li>
</ul>
<p>（2）String s3  = new String(“test”)对象个数</p>
<ul>
<li>两个对象：一个是堆空间中的new结构，另一个char[]对应变量池中的数据</li>
</ul>
<p>（3）字符串的拼接</p>
<ul>
<li><p>常量与常量的拼接结果在常量池，且常量池中不会存在相同内容的变量</p>
</li>
<li><p>只要拼接的两个对象中其中一个为变量，结果位于堆中</p>
</li>
<li><p>拼接结果调用intern方法，返回值就在常量中</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945850.png" alt="image-20210423113251323"></p>
</li>
</ul>
<h4 id="5-String常用方法"><a href="#5-String常用方法" class="headerlink" title="5.String常用方法"></a>5.String常用方法</h4><ul>
<li>length()：返回字符串长度</li>
<li>charAt()：返回某索引处的字符</li>
<li>isEmpty()：判断是否为空字符串</li>
<li>toLowerCase()：转换为小写</li>
<li>toUpperCase()：转换为大写</li>
<li>trim()：返回字符串副本，忽略空白处</li>
<li>equals()：比较字符串内容是否相同</li>
<li>concat()：将指定字符串连接到此字符串结尾</li>
<li>compareTo：比较两个字符串大小</li>
<li>substring()：截取出新的字符串</li>
<li>endsWith：测试字符串是否以指定的后缀结束</li>
<li>startsWith：测试此字符串是否以指定的前缀开始</li>
<li>contains：字符串是否包含指定char值序列</li>
<li>indexOf：返回指定子字符串第一次出现处的索引</li>
<li>rplace(): 替换掉字符串中指定的子字符串</li>
<li>replaceAll()：替换掉字符串所匹配正则表达式的子字符串</li>
<li>matches()：判断字符串是否匹配给定的正则表达式</li>
<li>split()：根据给定的正则表达式的匹配拆分此字符串</li>
</ul>
<h4 id="6-String数据类型转换"><a href="#6-String数据类型转换" class="headerlink" title="6.String数据类型转换"></a>6.String数据类型转换</h4><p>（1）String与基本数据类型，包装类的转换</p>
<ul>
<li>String –&gt; 基本数据类型，包装类：调用包装类的静态方法：parseXxx(str)</li>
<li>基本数据类型，包装类 –&gt; String：调用String重载的valueOf(xxx)</li>
</ul>
<p>（2）String与char[]的转换</p>
<ul>
<li>String –&gt; char[]：调用String的toCharArray()</li>
<li>char[] –&gt; String：调用String的构造器</li>
</ul>
<h4 id="7-String，StringBuffer，StringBuilder"><a href="#7-String，StringBuffer，StringBuilder" class="headerlink" title="7.String，StringBuffer，StringBuilder"></a>7.String，StringBuffer，StringBuilder</h4><p>（1）比较</p>
<ul>
<li>String:不可变的字符序列，底层使用char[]存储</li>
<li>StringBuffer：可变的字符序列，线程安全，效率低，底层使用char[]存储</li>
<li>StringBuffer：可变的字符序列，线程不安全，效率高，底层使用char[]存储</li>
<li>执行效率：StringBuilder &gt; StringBuffer &gt; String，开发中推荐使用StringBuffer</li>
</ul>
<p>（2）StringBuffer常用方法</p>
<ul>
<li>append()：提供很多append()方法，用于进行字符串拼接</li>
<li>delete()：删除指定位置的内容</li>
<li>replace()：替换指定索引位置的内容</li>
<li>insert()：在指定位置插入xxx</li>
<li>reverse()：把当前字符序列逆转</li>
</ul>
<h3 id="Java比较器"><a href="#Java比较器" class="headerlink" title="Java比较器"></a>Java比较器</h3><p>Java中的对象，正常情况下只能进行比较：==  或 != ，不能使用 &gt; 或 &lt; 的。但是在开发场景中我们需要对多个对象进行排序，就要用到两个接口：Comparable 或  Comparator</p>
<h4 id="1-Comparable接口"><a href="#1-Comparable接口" class="headerlink" title="1.Comparable接口"></a>1.Comparable接口</h4><p>（1）Comparable接口使用</p>
<ul>
<li>像String，包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出比较两个对象大小的方式</li>
<li>可以重写compareTo(obj)的规则</li>
</ul>
<p>（2）自定义类实现Comparable自然排序</p>
<ul>
<li>对于自定义类，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法，在其中指明如何排序</li>
<li>可以重写compareTo(obj)的规则：<ol>
<li>​    如果当前对象大于obj,返回正整数</li>
<li>​    如果当前对象小于obj,返回负整数</li>
<li>​    如果当前对象大于obj,返回零</li>
</ol>
</li>
</ul>
<h4 id="2-Comparator接口"><a href="#2-Comparator接口" class="headerlink" title="2.Comparator接口"></a>2.Comparator接口</h4><ul>
<li>重写compare(Object o1，Object o2)方法，比较o1和o2大小<ol>
<li>​    方法返回正整数，则表示o1大于o2</li>
<li>​    返回0，表示相等</li>
<li>​    返回负整数，表示o1小于o2</li>
</ol>
</li>
<li>Comparable接口的实现类的对象在任何位置都可以比较大小</li>
<li>Comparator接口属于临时性的比较</li>
</ul>
<h3 id="其他常用类"><a href="#其他常用类" class="headerlink" title="其他常用类"></a>其他常用类</h3><h4 id="1-时间类"><a href="#1-时间类" class="headerlink" title="1.时间类"></a>1.时间类</h4><h4 id="2-System类"><a href="#2-System类" class="headerlink" title="2.System类"></a>2.System类</h4><h4 id="3-Math类"><a href="#3-Math类" class="headerlink" title="3.Math类"></a>3.Math类</h4><h4 id="4-BigInteger和BigDecimal"><a href="#4-BigInteger和BigDecimal" class="headerlink" title="4.BigInteger和BigDecimal"></a>4.BigInteger和BigDecimal</h4><h2 id="枚举类与注解"><a href="#枚举类与注解" class="headerlink" title="枚举类与注解"></a>枚举类与注解</h2><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><h4 id="1-枚举类的使用"><a href="#1-枚举类的使用" class="headerlink" title="1.枚举类的使用"></a>1.枚举类的使用</h4><ul>
<li>类的对象只能是有限个，确定的，我们称此类为枚举类</li>
<li>当需要定义一组常量时，强烈建议使用枚举类</li>
<li>如果枚举类只有一个对象，则可以作为单例模式实现</li>
</ul>
<h4 id="2-枚举类的定义"><a href="#2-枚举类的定义" class="headerlink" title="2.枚举类的定义"></a>2.枚举类的定义</h4><ul>
<li><p>方式一：jdk5之前，自定义枚举类</p>
<ol>
<li>声明对象属性（private final修饰）</li>
<li>私有化类的构造器</li>
<li>提供当前多个枚举类的多个对象</li>
<li>其他诉求：获得枚举类对象的属性，提供toString()</li>
</ol>
</li>
</ul>
<ul>
<li><p>方式二：jdk5，可以使用enum关键字定义枚举类</p>
<ol>
<li><p>创建当前枚举类的对象，多个对象用“,”隔开，末尾对象”;”结束</p>
</li>
<li><p>声明对象属性（private final修饰）</p>
</li>
<li><p>提供当前多个枚举类的多个对象</p>
</li>
<li><p>其他诉求：获得枚举类对象的属性</p>
</li>
</ol>
</li>
</ul>
<h4 id="3-Enum类中常用方法"><a href="#3-Enum类中常用方法" class="headerlink" title="3.Enum类中常用方法"></a>3.Enum类中常用方法</h4><ul>
<li><p>values：返回枚举类型的对象数组</p>
</li>
<li><p>valueOf(String str)：可以把一个字符串转为对应枚举类对象</p>
</li>
<li><p>toString()：返回当前枚举类对象常量名称</p>
</li>
</ul>
<h4 id="4-枚举类实现接口"><a href="#4-枚举类实现接口" class="headerlink" title="4.枚举类实现接口"></a>4.枚举类实现接口</h4><ul>
<li>实现接口，在enum类中实现抽象方法</li>
<li>让枚举类的对象分别实现接口中的抽象方法</li>
</ul>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="1-注解说明"><a href="#1-注解说明" class="headerlink" title="1.注解说明"></a>1.注解说明</h4><ul>
<li>注解是代码里的特殊标记，这些标记可以在编译，类加载，运行时被读取，并执行响应操作。</li>
<li>利用注解，我们可以在不改变原有逻辑的情况下，在源文件嵌入一些补充信息。框架 = 注解 + 反射 + 设计模式</li>
</ul>
<h4 id="2-注解示例"><a href="#2-注解示例" class="headerlink" title="2.注解示例"></a>2.注解示例</h4><ul>
<li>生成文档的相关注解</li>
<li>在编译时进行格式检查</li>
<li>跟踪代码依赖性，实现替代配置文件功能</li>
<li>spring框架中关于“事务”的管理</li>
<li>Junit单元测试中也有大量注解的使用</li>
</ul>
<h4 id="3-JDK内置基本注解"><a href="#3-JDK内置基本注解" class="headerlink" title="3.JDK内置基本注解"></a>3.JDK内置基本注解</h4><ul>
<li>@Override：限定重写父类方法，在编译前校验该方法是否是重写父类的</li>
<li>@Deprecated：用于表示所修饰的元素（已过时）。通常是因为所修饰的结构危险或者存在更好的选择</li>
<li>@SuppressWarnings：抑制编译器警告</li>
</ul>
<h4 id="4-自定义注解"><a href="#4-自定义注解" class="headerlink" title="4.自定义注解"></a>4.自定义注解</h4><ul>
<li>注解声明为@interface</li>
<li>内部定义成员，通常用value表示</li>
<li>可以指定成员的默认值，使用default定义</li>
<li>如果自定义注解没有成员，表明是一个标识作用</li>
<li>如果注解有成员，在使用注解时，需要指明成员的类</li>
<li>自定义注解必须配送注解的信息处理流程（使用反射）才用意义</li>
<li>自定义注解通过都非指明两个元注解：Retention，Target</li>
</ul>
<h4 id="5-基本元注解"><a href="#5-基本元注解" class="headerlink" title="5.基本元注解"></a>5.基本元注解</h4><p>元注解：对现有的注解进行解释说明的注解</p>
<ul>
<li>Rentention：指定所修饰的Annotation的生命周期，只有生命为RUNTIME生命周期的注解才能通过反射获取</li>
<li>Target：用于指定被修饰的Annotation能用于修饰哪些程序元素</li>
<li>Documented：表示所修饰的注解被javadoc解析时，保留下来</li>
<li>Inherited：被它修饰的Annotation将具有继承性</li>
</ul>
<p>通过反射可以获取注解信息</p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合，数组都是对多个数据进行存储操作的结构，简称Java容器（这里的存储主要是指内存层面的存储。不涉及到持久化的存储）</p>
<p>Java集合就像一种容器，可以动态地把多个对象的引用放入容器中</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945892.png" alt="image-20210424101354876"></p>
<h3 id="数组简介"><a href="#数组简介" class="headerlink" title="数组简介"></a>数组简介</h3><h4 id="1-数组存储缺点"><a href="#1-数组存储缺点" class="headerlink" title="1.数组存储缺点"></a>1.数组存储缺点</h4><ul>
<li>一旦初始化以后，其长度就不可修改了</li>
<li>数组中提供的方法非常有限，对于添加，删除，插入数据等操作，非常不便，效率不高</li>
<li>获取数据实际元素个数没有现成的属性和方法</li>
<li>数组存储数据特点：有序，可重复。对于无序，不可重复的需求，不能满足</li>
</ul>
<h3 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h3><p>单列数据，定义了存储一组对象的方法集合</p>
<h4 id="1-Collection接口继承树"><a href="#1-Collection接口继承树" class="headerlink" title="1.Collection接口继承树"></a>1.Collection接口继承树</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945760.png" alt="image-20210424101922654"></p>
<h4 id="2-Collection接口常用方法"><a href="#2-Collection接口常用方法" class="headerlink" title="2.Collection接口常用方法"></a>2.Collection接口常用方法</h4><ul>
<li>add(Object e)：将元素e添加到集合coll中</li>
<li>size()：获得添加的元素个数</li>
<li>addAll(Collection coll1)：将coll1集合中的元素添加到当前的集合中</li>
<li>isEmpty()：判断当前集合是否为空</li>
<li>clear()：清空集合元素</li>
<li>contains(Object obj)：判断当前集合是否包含obj </li>
<li>containsAll(Collecion coll1)：判断colls中的所有元素是否都存在于当前集合中</li>
<li>remove(Object obj)：从当前集合中移除obj元素</li>
<li>remove(Collecion coll1)：从当前集合中移除coll1中所有元素（移除差集）</li>
<li>retain(Collecion coll1)：获取当前集合与coll1集合的交集，并返回给当前集合</li>
<li>equals(Object obj)：要想返回true，需要当前集合和形参集合的元素都相同</li>
<li>hasCode()：返回当前对象的哈希值</li>
<li>toArray()：集合—-&gt;数组（数组—&gt;集合：调用Araays类的静态方法asList()）</li>
</ul>
<h4 id="3-集合遍历"><a href="#3-集合遍历" class="headerlink" title="3.集合遍历"></a>3.集合遍历</h4><p>（1）迭代器Iterator接口</p>
<ul>
<li>Iterator对象称为迭代器（设计模式的一种），主要用于遍历Collection集合的元素</li>
<li>迭代器模式：提供一种方法访问一个容器对象中各个元素，而又不需要暴露该对象的内部细节（迭代器，为容器而生）</li>
<li>迭代器Iterator内部方法：hasNext()和next()</li>
<li>迭代器执行原理：hasNext()判断是否还有下个元素; next()让指针下移</li>
<li>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都集合在第一个元素之前</li>
<li>remove()可以在遍历时，删除集合中的元素（区别于Collection接口的remove方法，这个要先调用next() ）</li>
</ul>
<p>（2）foreach循环遍历集合元素</p>
<ul>
<li>其内部仍然调用了迭代器</li>
<li>for(集合元素的类型 局部变量:集合对象)</li>
<li>foreach可以遍历数组和集合</li>
</ul>
<h4 id="4-List接口"><a href="#4-List接口" class="headerlink" title="4.List接口"></a>4.List接口</h4><p>存储有序的，可重复的数据（“动态”数组）</p>
<p>（1）List三个实现类ArrayList，LinkedList，Vector的异同</p>
<ul>
<li>同：都实现了List接口，存储数据特点相同：存储有序的，可重复的数据</li>
<li>异：<ol>
<li>ArrayList：底层使用Object[] elementData存储；作为List接口主要实现类，线程不安全，效率高；</li>
<li>LinkList：底层使用双向链表存储；对于频繁的插入，删除操作，使用此类效率比ArrayList高；</li>
<li>Vector：List接口古老实现类;线程安全，效率低；底层使用Object[] elementData存储</li>
</ol>
</li>
</ul>
<p>（2）List常用方法</p>
<ul>
<li>增：add(Object obj)</li>
<li>删：remove(int index)</li>
<li>改：set(int index, Object ele)</li>
<li>查：get(int inedx)</li>
<li>插：add(int index, Object ele)</li>
<li>长度：size()</li>
<li>遍历方法：<ol>
<li>Iterator迭代器方法</li>
<li>增强for循环</li>
<li>普通循环</li>
</ol>
</li>
</ul>
<h4 id="5-Set接口"><a href="#5-Set接口" class="headerlink" title="5.Set接口"></a>5.Set接口</h4><p>存储无序的（set的底层也是数组，但是存储的物理顺序是在申请空间的随机位置），不可重复的数据（数学概念的“集合”）</p>
<p>Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法</p>
<p>（1）Set接口的实现类</p>
<ul>
<li>HashSet：作为Set接口的主要实现类，线程不安全，可以存储null值</li>
<li>LinkedHashSet：作为HashSet的子类，遍历其内部数据时，可以按照添加顺序遍历</li>
<li>TreeSet：可以按照添加对象的指定属性进行排序（底层为红黑树）</li>
</ul>
<p>（2）Set解析</p>
<ul>
<li>无序性：不等同于随机性，存储的数据在底层数组中并发按照数组索引的顺序添加，而是根据数据的哈希值决定的</li>
<li>不可重复性：相同的元素只能添加一个</li>
</ul>
<p>（3）HashSet元素插入过程</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945099.png" alt="image-20210424182729653"></p>
<h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><p>双列数据，保存具有映射关系“key-value”的集合（ y=f(x) ）</p>
<h4 id="1-Map实现"><a href="#1-Map实现" class="headerlink" title="1.Map实现"></a>1.Map实现</h4><p>有两种实现类：HashMap（主要）和Hashtable（古老）</p>
<ul>
<li>HashMap：Map的主要实现类，线程不安全，效率高，可以存储null的key和value（底层为：数组+链表+红黑树）<ol>
<li>LinkedHashMap：保证在遍历map元素时，可以按照添加的顺序实现遍历（有一对指向前和指向后节点的指针，对频繁的遍历操作，执行效率高于HashMap）</li>
</ol>
</li>
<li>TreeMap：保证按照添加的key-value对进行排序，实现排序遍历（key自然排序或自定义排序，底层为红黑树 ）</li>
<li>Hashtable：作为古老的实现类，线程安全，效率低，不能存储null的key和value<ol>
<li>Properties：常用于处理配置文件，key 和 value都是String类型</li>
</ol>
</li>
</ul>
<h4 id="2-Map接口继承树"><a href="#2-Map接口继承树" class="headerlink" title="2.Map接口继承树"></a>2.Map接口继承树</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945354.png" alt="image-20210424102038816"></p>
<h4 id="3-Map结构理解"><a href="#3-Map结构理解" class="headerlink" title="3.Map结构理解"></a>3.Map结构理解</h4><ul>
<li>Map中的key：无序的，不可重复的，使用Set存储所有的key ———–&gt;key所在的类要重写equals()和hashCode()</li>
<li>Map中的value:无序的，可重复的，使用Collection存储所有的value————&gt; value所在类要重写equals()</li>
<li>一个键值对：key-value构成一个Entry对象</li>
<li>Map中的entry：无序的，不可重复的，使用Set存储所有的entry</li>
</ul>
<h4 id="4-HashMap底层实现原理"><a href="#4-HashMap底层实现原理" class="headerlink" title="4.HashMap底层实现原理"></a>4.HashMap底层实现原理</h4><p>（1）jdk7</p>
<ul>
<li><code>HashMap map = new HashMap()</code>：实例化后，底层创建了长度为16的一维数组Entry[] table</li>
<li><code>map.put(key1,value1)</code>：首先调用key所在；类的hasCode计算key哈希值，得到在Entry数组的存放位置</li>
<li>如果此位置上的数据为空，则添加成功</li>
<li>如果此位置上的数据不为空，比较key和已存在的数据的哈希值<ol>
<li>如果key的哈希值与已存在的数据哈希值都不相同，则添加成功</li>
<li>如果与其中一个数据哈希值相同，继续比较其value值：如果返回false，则添加成功，如果返回true，则使用替换相同key的value值</li>
</ol>
</li>
</ul>
<p>（2）jdk8</p>
<p>数组+链表+红黑树</p>
<h4 id="5-Map常用方法"><a href="#5-Map常用方法" class="headerlink" title="5.Map常用方法"></a>5.Map常用方法</h4><p>（1）添加，删除，修改操作</p>
<ul>
<li>Object put(Object key, Object value)：将指定的key-value添加到当前map对象中</li>
<li>void putAll(Map m)：将m中所有的key-value放到当前map中</li>
<li>Object remove(Object key)：移除指定key-value对，并返回value</li>
<li>void clear()：清空当前map中所有数据</li>
</ul>
<p>（2）元素查询操作</p>
<ul>
<li>Object get(Object key)：获取指定key对应的value</li>
<li>boolean containsKey(Object key)：是否包含指定key</li>
<li>boolean containsValue(Object Value)：是否包含指定Value</li>
<li>int size()：返回map中key-value个数</li>
<li>boolean isEmpty()：判断当前map是否为空</li>
<li>boolean equals(Object obj)：判断当前map和参数对象obj是否相等</li>
</ul>
<p>（3）元视图操作的方法</p>
<ul>
<li>Set keySet()：返回所有key构成的Set集合</li>
<li>Collection values()：返回所有value构成的Collection集合</li>
<li>Set entrySet()：返回所有key-value对构成的Set集合</li>
</ul>
<h4 id="6-TreeMap"><a href="#6-TreeMap" class="headerlink" title="6.TreeMap"></a>6.TreeMap</h4><p>用于需要排列的key-value，可以定制排序</p>
<h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><p>Collections是一个操作Set，List和Map等集合的工具类</p>
<h4 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a>1.常用方法</h4><p>（1）排序操作（抽象方法）</p>
<ul>
<li>reverse(List)：反转List中元素的顺序</li>
<li>shuffle(List)：对List集合元素进行随机排序</li>
<li>sort(List)：根据元素的自然顺序对指定List集合元素按升序排序</li>
<li>sort(List, Comparator)：根据指定的Comparator产生的顺序对List集合进行排序</li>
<li>swap(List, int i, int j )：将指定list集合的i和j处元素进行交换</li>
</ul>
<p>（2）查找替换</p>
<ul>
<li>Object max(Collection)：根据自然顺序返回最大元素</li>
<li>Object max(Collection, Comparator)：根据Comparator指定顺序，返回最大元素</li>
<li>Object min(Collection)</li>
<li>Object min(Collection, Comparator)</li>
<li>int frequency(Collection, Object)：返回指定集合元素出现次数</li>
<li>void copy(List dest, List src)：将src中的内容复制到dest中</li>
<li>boolean replaceAll(List list, Object oldVal, Object newVal)：使用新值替换List对象的所有旧值</li>
</ul>
<p>（3）同步控制</p>
<p>Collections类提供多个synchromizedXxx()方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发范围集合时的线程安全问题</p>
<p>将线程不安全的集合类型转换为线程安全的类型</p>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p>（1）数据间的逻辑关系：</p>
<ul>
<li>集合</li>
<li>线性关系（对应Java中的顺序表，链表，栈，队列）</li>
<li>树形结构（对应java中的二叉树）</li>
<li>网状结构（对应java中的图）</li>
</ul>
<h4 id="2-真实结构"><a href="#2-真实结构" class="headerlink" title="2.真实结构"></a>2.真实结构</h4><ul>
<li>顺序表（静态数据结构）：Array，ArrayList</li>
<li>链表（动态数据结构）：LinkedList</li>
</ul>
<h4 id="3-抽象结构"><a href="#3-抽象结构" class="headerlink" title="3.抽象结构"></a>3.抽象结构</h4><ul>
<li>栈</li>
<li>队列</li>
<li>树</li>
<li>图</li>
</ul>
<h2 id="泛型与File"><a href="#泛型与File" class="headerlink" title="泛型与File"></a>泛型与File</h2><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="1-泛型概述"><a href="#1-泛型概述" class="headerlink" title="1.泛型概述"></a>1.泛型概述</h4><p>（1）泛型的出现</p>
<ul>
<li>泛型相当于标签，来确定一个容器实际存放什么类型的对象</li>
<li>把元素的类型设计为一个参数，这个类型参数叫做泛型</li>
</ul>
<p>（2）泛型说明</p>
<ul>
<li>泛型允许在定义类，接口时通过一个标识表示类中某个属性的类型或者某个方法的返回值及参数类型</li>
<li>List<String>表明List只能存放字符串类型对象</String></li>
</ul>
<p>（3）泛型相对Object</p>
<ul>
<li>解决元素储存的安全性问题</li>
<li>解决获取数据元素时，需要类型强制转换的问题</li>
</ul>
<h4 id="2-泛型的使用"><a href="#2-泛型的使用" class="headerlink" title="2.泛型的使用"></a>2.泛型的使用</h4><p>（1）在集合中使用泛型</p>
<ul>
<li>ArrayList <Integer> list =  new ArrayList <Integer>()</Integer></Integer></li>
<li>编译时就会进行类型检查，保证数据安全</li>
<li>避免强转操作</li>
</ul>
<p>（2）泛型使用总结</p>
<ul>
<li><p>在实例化集合类时，可以指明具体的泛型类型</p>
</li>
<li><p>指明完以后，在集合类或接口中函数定义类或接口时，内部结构使用到类的泛型的位置，都指定为实例化时的泛型类型</p>
</li>
<li><p>泛型的类型必须是类，不能是基本数据类型，需要用到基本数据类型的位置用包装类代替</p>
</li>
</ul>
<h4 id="3-泛型结构"><a href="#3-泛型结构" class="headerlink" title="3.泛型结构"></a>3.泛型结构</h4><p>（1）泛型类</p>
<ul>
<li>类的内部结构就可以使用类的泛型</li>
<li>如果定义了泛型类，实例化时没有指明类的泛型，默认为Object类型</li>
<li>如果定义的类带泛型，建议在实例化时指明类的泛型</li>
<li>子类在继承泛型的父类时指明了泛型类型，则实例子类对象时，不在需要指明泛型</li>
<li>泛型不同的引用不能互相赋值</li>
<li>静态方法中不能使用类的泛型</li>
<li>子类除了指定后保留父类的泛型，也可以增加自己的泛型</li>
</ul>
<p>（2）泛型方法</p>
<ul>
<li>在该方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系（泛型方法所属的类是不是泛型类都没有关系）</li>
<li>泛型方法在调用时，指明泛型参数的类型</li>
<li>泛型方法，可以声明为静态</li>
</ul>
<p>（3）通配符</p>
<h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><p>File类属于IO流的内容，可以新建，删除，重命名文件和目录，但是File列不能访问文件本身，访问文件内容需要输入\输出流</p>
<h4 id="1-常用方法-1"><a href="#1-常用方法-1" class="headerlink" title="1.常用方法"></a>1.常用方法</h4><p>（1）获取功能</p>
<p>（2）重命名功能</p>
<p>（3）判断功能</p>
<p>（4）创建，删除方法</p>
<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="IO流原理与分类"><a href="#IO流原理与分类" class="headerlink" title="IO流原理与分类"></a>IO流原理与分类</h3><h4 id="1-IO原理"><a href="#1-IO原理" class="headerlink" title="1.IO原理"></a>1.IO原理</h4><ul>
<li>I/O技术用于处理设备之间的数据传输，如读写文件，网络通讯</li>
<li>在 Java中，数据的输入输出以流（stream）的方式进行</li>
<li>java.io包下提供各种“流”类和接口，以获得不同种类的数据，并通过标准的方法输入或输出数据</li>
</ul>
<h4 id="2-流的分类"><a href="#2-流的分类" class="headerlink" title="2.流的分类"></a>2.流的分类</h4><ul>
<li><p>操作数据单位分类：字节流（InputStream/OutputStream），字符流（Reader/Writer）</p>
</li>
<li><p>流向分类：输入流，输出流</p>
</li>
<li><p>流的角色分类：节点流，处理流（应用上为缓冲流）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945866.png" alt="image-20210505075809772"></p>
</li>
</ul>
<h3 id="文件流操作"><a href="#文件流操作" class="headerlink" title="文件流操作"></a>文件流操作</h3><h4 id="1-读取文件"><a href="#1-读取文件" class="headerlink" title="1.读取文件"></a>1.读取文件</h4><p>从硬盘文件读入数据到内存</p>
<ul>
<li><p>实例化File类对象，指明操作文件</p>
</li>
<li><p>提供具体流</p>
</li>
<li><p>数据的读入方法与结束判断</p>
<p>​    1. read()：返回读入的一个字符，如果达到文件末尾，返回-1）</p>
<p>​    2. read(char[] cbuf )：read()方法的重载，返回每次读入cbuf数组的字符个数，如果达到文件末尾返回-1</p>
</li>
<li><p>流的关闭（往往要通过异常处理保证流资源一定可以执行关闭操作）</p>
</li>
<li><p>读入的文件一定要存在，否则会报出异常</p>
</li>
</ul>
<h4 id="2-写出文件"><a href="#2-写出文件" class="headerlink" title="2.写出文件"></a>2.写出文件</h4><p>从内存中写出数据到硬盘文件</p>
<ul>
<li>提供File类对象，指明写出到的文件<ol>
<li>如果File对应文件不存在，则自动创建此文件</li>
<li>如果File对应文件存在，则有覆盖和追加两种形式的操作</li>
</ol>
</li>
<li>提供FileWriter的对象，用于数据写出<ol>
<li>流的构造器为：FileWriter(file,false) / FileWriter(file)，则对原有文件进行覆盖</li>
<li>流的构造器为：FileWriter(file, ture),则在源文件上追加内容</li>
</ol>
</li>
<li>写出操作</li>
<li>流资源关闭</li>
</ul>
<h4 id="3-字符流与字节流"><a href="#3-字符流与字节流" class="headerlink" title="3.字符流与字节流"></a>3.字符流与字节流</h4><ul>
<li>操作数据单位分类：字节流（InputStream/OutputStream），字符流（Reader/Writer）</li>
<li>字符流不能处理非文本文件，对于文本文件使用字符流处理</li>
<li>字节流不能处理文本文件，对于非文本文件使用字节流处理</li>
</ul>
<h4 id="4-缓冲流"><a href="#4-缓冲流" class="headerlink" title="4.缓冲流"></a>4.缓冲流</h4><ul>
<li>缓冲流比于节点流，提供了流的读取，写入的速度</li>
<li>使用缓冲流要比使用节点流，多一步造缓冲流的操作（在节点的基础上制造缓冲流）</li>
<li>资源关闭上，先关闭外层的流，再关闭内层的流（关闭外层流的同时，内层流可以自动关闭，内层流的关闭程序可以省略）</li>
<li>缓冲流可以提高文件读入写出速度，因为内部提供了一个缓冲区</li>
</ul>
<h4 id="5-随机存取文件流"><a href="#5-随机存取文件流" class="headerlink" title="5.随机存取文件流"></a>5.随机存取文件流</h4><ul>
<li>RandomAceessFile类实现了DataInput、DataOutput两个接口，该类既可以读也可以写</li>
<li>RandomAceessFile类支持随机访问的形式，程序可以直接跳到文件任意地方来读写文件</li>
<li>RandomAceessFile对象包含一个记录指针，用于标识当前读写位置</li>
</ul>
<h4 id="6-NIO2中文件读写"><a href="#6-NIO2中文件读写" class="headerlink" title="6.NIO2中文件读写"></a>6.NIO2中文件读写</h4><ul>
<li>NIO2是对Java原有IO流的升级，可以以更加高效的方式进行文件读写操作</li>
<li>Java API提供了两套NIO，一套是针对标准输入输出的NIO，另一套是网络编程NIO</li>
<li>File类访问文件功能比较有限，后来又引入类Path接口对File类进行了升级</li>
<li>在NIO.2中还提供了Files、Paths工具类</li>
</ul>
<h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><h4 id="1-转换流概述"><a href="#1-转换流概述" class="headerlink" title="1.转换流概述"></a>1.转换流概述</h4><ul>
<li>转换流为处理流的一种，提供了在字节流和字符流之间的转换</li>
<li>Java API提供了两个转换流：<ol>
<li>InputStreamReader：将InputStream转换为Reader</li>
<li>OutputStreamWriter：将Writer转换为OutputStream</li>
</ol>
</li>
<li>字节流中的数据都是字符时，转换成字符流操作更高效</li>
<li>转换流常用来处理文件乱码问题，实现编码和解码的功能</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945369.png" alt="image-20210505100444727"></p>
<h4 id="2-转换流的使用"><a href="#2-转换流的使用" class="headerlink" title="2.转换流的使用"></a>2.转换流的使用</h4><ul>
<li>InputStreamReader：将一个字节的输入流转换为字符的输入流</li>
<li>OutputStreamWriter：将一个字符的输出流转换为字节的输出流</li>
<li>提供了在字节流和字符流之间的转换，用于解码、编码</li>
</ul>
<h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><h4 id="1-对象流概述"><a href="#1-对象流概述" class="headerlink" title="1.对象流概述"></a>1.对象流概述</h4><ul>
<li><p>ObjectinputStream和ObjectOutputSteam</p>
</li>
<li><p>用于存储和读取基本数据类型数据或对象的处理流，可以把Java的对象写入数据源中，也能把对象从数据源中还原回来</p>
</li>
<li><p>序列化：ObjectinputStream保存基本数据类型或对象的机制</p>
</li>
<li><p>反序列化：ObjectOutputSteam读取基本数据类型或对象的机制</p>
</li>
<li><p>ObjectinputStream和ObjectOutputSteam不能序列化static和transient修饰的成员变量</p>
</li>
</ul>
<h4 id="2-对象的序列化"><a href="#2-对象的序列化" class="headerlink" title="2.对象的序列化"></a>2.对象的序列化</h4><ul>
<li>对象序列化机制把内存中的Java对象转换成平台无关的二进制流，从而允许把二进制流保存在磁盘上或通过网络传输</li>
<li>程序获取二进制流，可以反序列化恢复为Java对象</li>
<li>序列化的好处在于可以将任何实现了Serializable接口的对象转换为字节数据，保证其保存和传输时可被还原</li>
</ul>
<h3 id="其他基本流"><a href="#其他基本流" class="headerlink" title="其他基本流"></a>其他基本流</h3><h4 id="1-标准输入输出流"><a href="#1-标准输入输出流" class="headerlink" title="1.标准输入输出流"></a>1.标准输入输出流</h4><ul>
<li>System.in：标准的输入流，默认从键盘输入</li>
<li>System.out：标准的输出流，默认从控制台输出</li>
<li>可以通过setIn(InputStream is) / setOut(PrintStream ps)方式重新指定输出和输入的默认设备</li>
</ul>
<h4 id="2-打印流"><a href="#2-打印流" class="headerlink" title="2.打印流"></a>2.打印流</h4><ul>
<li>实现将基本数据类型转化成字符串输出</li>
<li>打印流PrintStream和PrintWriter</li>
<li>提供了一系列重载的print()和println()方法，用于多种数据类型输出</li>
</ul>
<h4 id="3-数据流"><a href="#3-数据流" class="headerlink" title="3.数据流"></a>3.数据流</h4><ul>
<li><p>方便操作（读取和写出）Java语言的基本类型和 String的数据</p>
</li>
<li><p>DataInputStream 和 DataOutputStream分别套接在InputStream和OutputStream子类的流上</p>
</li>
</ul>
<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="基础内容"><a href="#基础内容" class="headerlink" title="基础内容"></a>基础内容</h3><h4 id="1-网络编程定义"><a href="#1-网络编程定义" class="headerlink" title="1.网络编程定义"></a>1.网络编程定义</h4><ul>
<li>网络编程的目的：直接或间接通过网络协议与其他计算机实现数据交换，进行通讯</li>
<li>定位主机上特定的应用（IP和端口号）</li>
<li>可靠高效数据运输（通过网络通信协议TCP/IP）</li>
</ul>
<h3 id="TCP网络编程"><a href="#TCP网络编程" class="headerlink" title="TCP网络编程"></a>TCP网络编程</h3><h3 id="UDP网络编程"><a href="#UDP网络编程" class="headerlink" title="UDP网络编程"></a>UDP网络编程</h3><h3 id="URL网络编程"><a href="#URL网络编程" class="headerlink" title="URL网络编程"></a>URL网络编程</h3><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><h3 id="反射机制概述"><a href="#反射机制概述" class="headerlink" title="反射机制概述"></a>反射机制概述</h3><h4 id="1-反射的含义"><a href="#1-反射的含义" class="headerlink" title="1.反射的含义"></a>1.反射的含义</h4><p>（1）含义</p>
<ul>
<li>反射是动态语言的关键，反射机制允许程序在执行期间借助Reflection API 取得任何类的内部信息，并能直接操作任意对象的内部属性及方法</li>
<li>加载完类后，堆内存的方法区中就会产生一个Class类型的对象，通过该对象我们可以看到类的结构信息，则就是反射机制的本质</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945603.png" alt="image-20210505220053207"></p>
<p>（2）动态语言与静态语言</p>
<ul>
<li>动态语言在运行时可以根据条件改变自身结构（PHP，Python）</li>
<li>静态语言运行时结构不可变（Java，C, C++）</li>
<li>Java是准动态语言，我们可以利用反射机制，字节码操作获得类似动态语言的特性，让编程更加灵活</li>
</ul>
<h4 id="2-反射功能"><a href="#2-反射功能" class="headerlink" title="2.反射功能"></a>2.反射功能</h4><p>通过反射可以调用类的私有结构，反射常常用于对象不确定的情况下（反射的动态性）</p>
<ul>
<li>运行时判断任意对象所属类</li>
<li>运行时构造任意一个类的对象</li>
<li>运行时判断一个类所具有的成员变量和方法</li>
<li>运行时获取泛型信息</li>
<li>运行时任意调用对象的成员变量和方法</li>
<li>运行时处理注解</li>
<li>生成动态代理</li>
</ul>
<h4 id="3-反射主要API"><a href="#3-反射主要API" class="headerlink" title="3.反射主要API"></a>3.反射主要API</h4><ul>
<li>java.lang.Class：代表一个类</li>
<li>java.lang.reflect.Method：代表类的方法</li>
<li>java.lang.reflect.Field：代表类的成员变量</li>
<li>java.lang.reflect.Constructor：代表类的构造器</li>
</ul>
<h3 id="Class类的理解"><a href="#Class类的理解" class="headerlink" title="Class类的理解"></a>Class类的理解</h3><h4 id="1-类的加载过程"><a href="#1-类的加载过程" class="headerlink" title="1.类的加载过程"></a>1.类的加载过程</h4><ul>
<li>程序经过javac.exe命令后，会生成一个或多个字节码文件（.class结尾）接着我们使用java.exe命令对某个字节码文件进行解释运行，相当于将某个字节码文件加载到内存中，此过程就被称为类的加载</li>
<li>加载到内存中的类，我们称为运行时类，此运行时类就作为Class的一个实例（类是Class的对象）</li>
<li>Class的实例对应着一个运行时类</li>
</ul>
<h4 id="2-获得Class实例的方法"><a href="#2-获得Class实例的方法" class="headerlink" title="2.获得Class实例的方法"></a>2.获得Class实例的方法</h4><ul>
<li><p>调用运行类时的属性：.class</p>
</li>
<li><p>通过运行时类的对象，调用getClass</p>
</li>
<li><p>调用Class静态方法：forName(String classPath)（常用）</p>
</li>
<li><p>使用类的加载器：ClassLoader</p>
</li>
</ul>
<h4 id="3-Class实例对应结构"><a href="#3-Class实例对应结构" class="headerlink" title="3.Class实例对应结构"></a>3.Class实例对应结构</h4><p>有哪些类型有Class对象</p>
<ul>
<li>class：外部类，成员，局部内部类，匿名内部类</li>
<li>interface：接口</li>
<li>[]：数组</li>
<li>enum：枚举</li>
<li>annotation：注解</li>
<li>primitive type：基本数据类型</li>
<li>void</li>
</ul>
<h3 id="类的加载的理解"><a href="#类的加载的理解" class="headerlink" title="类的加载的理解"></a>类的加载的理解</h3><h4 id="1-类的加载过程-1"><a href="#1-类的加载过程-1" class="headerlink" title="1.类的加载过程"></a>1.类的加载过程</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945557.png" alt="image-20210506074346998"></p>
<h4 id="2-ClassLoader的理解"><a href="#2-ClassLoader的理解" class="headerlink" title="2.ClassLoader的理解"></a>2.ClassLoader的理解</h4><p>（1）类的加载器流程位置</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945002.png" alt="image-20210506074558379"></p>
<p>（2）类的加载器的作用</p>
<ul>
<li>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后再堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口</li>
<li>类缓存：一旦某个类被加载到类加载器中，它会维持（缓存）一段时间，不够JVM垃圾回收机制可以回收这些Class对象</li>
</ul>
<p>（3）Java定义的类的加载器类型</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945770.png" alt="image-20210506075638645"></p>
<p>（4）ClassLoader加载配置文件</p>
<p>​    读取配置文件的方法：</p>
<ul>
<li>使用properties集合+IO流读取</li>
<li>使用ClassLoader读取</li>
</ul>
<h3 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h3><p>平常我们一般使用类的构造器（new）创建类的对象，我们也可以通过反射创建对应的运行时类的对象</p>
<h4 id="1-创建流程"><a href="#1-创建流程" class="headerlink" title="1.创建流程"></a>1.创建流程</h4><ul>
<li>调用newInstance()方法，创建对应的运行时类的对象</li>
<li>内部调用了运行时类的空参构造器</li>
</ul>
<h4 id="2-创建要求"><a href="#2-创建要求" class="headerlink" title="2.创建要求"></a>2.创建要求</h4><ul>
<li>运行时类必须提供空参的构造器</li>
<li>空参过的构造器的访问权限通常设置为public</li>
<li>便于通过反射，创建运行时类的对象</li>
<li>便于子类继承此运行类时，默认调用super()时，保证父类有此构造器</li>
</ul>
<h3 id="获得运行时类的结构"><a href="#获得运行时类的结构" class="headerlink" title="获得运行时类的结构"></a>获得运行时类的结构</h3><h4 id="1-获得属性结构"><a href="#1-获得属性结构" class="headerlink" title="1.获得属性结构"></a>1.获得属性结构</h4><ul>
<li>getFields()：获取当前运行时类及其父类中声明public访问权限的属性</li>
<li>getDeclaredFields()：获取当前运行时类中声明的所有属性（不包含父类中声明的属性）</li>
</ul>
<h4 id="2-获取方法结构"><a href="#2-获取方法结构" class="headerlink" title="2.获取方法结构"></a>2.获取方法结构</h4><ul>
<li>getMethods()：获取当前运行时类及其所有父类中声明为public权限的方法</li>
<li>getDeclaredMethods()：获取当前运行时类中声明的所有方法（不包含父类中声明的方法）</li>
</ul>
<h4 id="3-获取方法的内部结构"><a href="#3-获取方法的内部结构" class="headerlink" title="3.获取方法的内部结构"></a>3.获取方法的内部结构</h4><ul>
<li>获取方法声明的注解</li>
<li>权限修饰符</li>
<li>返回值类型</li>
<li>方法名</li>
<li>形参列表</li>
</ul>
<h4 id="4-获取构造器结构"><a href="#4-获取构造器结构" class="headerlink" title="4.获取构造器结构"></a>4.获取构造器结构</h4><ul>
<li>getConstructors()：获取当前运行时类中声明为public的构造器</li>
<li>getDeclaredConstructors()：获取当前运行时类中声明的所有构造器</li>
</ul>
<h4 id="5-其他获取内容"><a href="#5-其他获取内容" class="headerlink" title="5.其他获取内容"></a>5.其他获取内容</h4><ul>
<li>获得运行时类的父类及父类泛型</li>
<li>获得运行类的实现的接口，所在包，注解</li>
</ul>
<h3 id="调用运行时类的结构"><a href="#调用运行时类的结构" class="headerlink" title="调用运行时类的结构"></a>调用运行时类的结构</h3><h4 id="1-调用指定属性"><a href="#1-调用指定属性" class="headerlink" title="1.调用指定属性"></a>1.调用指定属性</h4><ul>
<li>创建运行时类的对象</li>
<li>获得指定的属性（通常用getDeclaredFields()，因为可以获得私有属性）</li>
<li>保证当前属性是可访问的（setAccessible方法）</li>
<li>设置当前属性的值（set方法）</li>
<li>获取当前属性的值（get方法）</li>
<li>获取当前属性的值</li>
</ul>
<h4 id="2-调用指定方法"><a href="#2-调用指定方法" class="headerlink" title="2.调用指定方法"></a>2.调用指定方法</h4><ul>
<li>创建运行时类的对象</li>
<li>获取指定的某个方法</li>
<li>保证当前方法是可访问的（setAccessible方法）</li>
<li>调用invoke方法执行</li>
</ul>
<h4 id="3-调用指定构造器"><a href="#3-调用指定构造器" class="headerlink" title="3.调用指定构造器"></a>3.调用指定构造器</h4><ul>
<li>获得指定构造器</li>
<li>保证此构造器可访问</li>
<li>调用此构造器创建运行时类的对象</li>
</ul>
<h3 id="反射应用：动态代理"><a href="#反射应用：动态代理" class="headerlink" title="反射应用：动态代理"></a>反射应用：动态代理</h3><h4 id="1-代理设计模式原理"><a href="#1-代理设计模式原理" class="headerlink" title="1.代理设计模式原理"></a>1.代理设计模式原理</h4><ul>
<li><p>使用一个代理将对象包装起来，然后用该代理对象取代原始对象，任何对原始对象的调用都要通过代理</p>
</li>
<li><p>最好可以通过一个代理类完成全部的代理功能</p>
</li>
</ul>
<h4 id="2-动态代理概述"><a href="#2-动态代理概述" class="headerlink" title="2.动态代理概述"></a>2.动态代理概述</h4><ul>
<li><p>动态代理是指用户通过代理类来调用其他对象的方法，并且是在程序运行时更加动态创建 目标类的代理对象</p>
</li>
<li><p>动态代理使用场合：</p>
<ol>
<li>调试</li>
<li>远程方法调用</li>
</ol>
</li>
<li><p>动态代理相比静态代理的优点：抽象角色中接口声明的所有方法都被转移到调用处理器一个集中的方法中处理（可以更加灵活和统一的处理众多的方法）</p>
</li>
</ul>
<h4 id="3-动态代理与AOP"><a href="#3-动态代理与AOP" class="headerlink" title="3.动态代理与AOP"></a>3.动态代理与AOP</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945546.png" alt="image-20210506141800436"></p>
<h2 id="Java8的其他特性"><a href="#Java8的其他特性" class="headerlink" title="Java8的其他特性"></a>Java8的其他特性</h2><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>Lambda表达式是一个 ，可以将其理解为一段可以传递的代码，其本质是作为函数式接口的实例</p>
<h4 id="1-Lambda表达式的使用"><a href="#1-Lambda表达式的使用" class="headerlink" title="1.Lambda表达式的使用"></a>1.Lambda表达式的使用</h4><ul>
<li>-&gt; :lambda操作符或箭头操作符</li>
<li>-&gt; 左边：lambda形参列表（即接口中的抽象方法的形参列表）</li>
<li>-&gt; 右边：lambda体（即重写抽象方法的方法体）</li>
<li>如果lamba形参列表只有一个参数，其一对()也可以省略</li>
<li>lambda体应该使用一对{}包裹，如果lambda只有一条执行语句，可以省略{}和return</li>
</ul>
<h4 id="2-lambda使用分类"><a href="#2-lambda使用分类" class="headerlink" title="2.lambda使用分类"></a>2.lambda使用分类</h4><ul>
<li>无参，无返回值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runnable r1 = ()-&gt; &#123;System.out.println(<span class="string">&quot;Hello,Lambda&quot;</span>);&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>需要一个参数，无返回值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = (String str)-&gt;&#123;System.out.println(str);&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>数据类型可以省略，可由编译器推断得出（类型推断）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = (str)-&gt;&#123;System.out.println(str);&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>只需要一个参数时，参数的小括号可以省略</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = str-&gt;&#123;System.out.println(str);&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>需要两个或两个以上的参数，多条执行语句，并且可以有返回值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com = (x,y)-&gt;&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;实现函数式接口方法&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> Integer.compare(x,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>当Lambda只有一条语句时，return与大括号可以省略</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com = (x,y)-&gt;Integer.compare(x,y);</span><br></pre></td></tr></table></figure>



<h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><h4 id="1-函数式接口含义"><a href="#1-函数式接口含义" class="headerlink" title="1.函数式接口含义"></a>1.函数式接口含义</h4><ul>
<li><p>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口</p>
</li>
<li><p>我们可以通过Lambda表达式创建该接口的对象</p>
</li>
<li><p>使用@Functionallnterface注解，可以检测是否为函数式接口</p>
</li>
</ul>
<h4 id="2-Java内置函数式接口"><a href="#2-Java内置函数式接口" class="headerlink" title="2.Java内置函数式接口"></a>2.Java内置函数式接口</h4><ul>
<li><p>Consumer<T>：消费型接口</T></p>
</li>
<li><p>Supplier<T>：供给型接口</T></p>
</li>
<li><p>Function&lt;T,R&gt;：函数型接口</p>
</li>
<li><p>Predicate<T>：断定型接口</T></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202109040945212.png" alt="image-20210506192031648"></p>
</li>
</ul>
<h3 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h3><h4 id="1-方法引用介绍"><a href="#1-方法引用介绍" class="headerlink" title="1.方法引用介绍"></a>1.方法引用介绍</h4><ul>
<li>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用</li>
<li>方法引用就是Lambada表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法</li>
<li>实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致</li>
<li>有以下三种主要使用情况<ol>
<li>对象::实例方法名</li>
<li>类::静态方法名</li>
<li>类::实例方法名</li>
</ol>
</li>
</ul>
<h4 id="2-构造器引用"><a href="#2-构造器引用" class="headerlink" title="2.构造器引用"></a>2.构造器引用</h4><ul>
<li>与方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致</li>
<li>抽象方法的返回值类型即构造器所属的类的类型</li>
</ul>
<h3 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h3><h4 id="1-Stream概述"><a href="#1-Stream概述" class="headerlink" title="1.Stream概述"></a>1.Stream概述</h4><ul>
<li>Stream是Java中处理集合的关键抽象概念，它可以对集合进行复杂的查找，过滤，映射数据等操作（类似于SQL之于数据库）</li>
<li>NoSQL的数据（MongDB,Radis等）需要在Java层面处理，所有需要Stream API</li>
<li>Stream 与 Collection集合的区别：Collection是一种静态的内存数据结构，其面向内存用于数据存储;Stream有关计算，其面向CPU通过CPU实现计算</li>
</ul>
<h4 id="2-Stream须知事项"><a href="#2-Stream须知事项" class="headerlink" title="2.Stream须知事项"></a>2.Stream须知事项</h4><ul>
<li>Stream自己不会存储元素</li>
<li>Stream不会改变源对象，相反，它们会返回一个持有结果的新Stream</li>
<li>Stream操作时延迟执行的，他们会等到需要结果时才执行</li>
</ul>
<h4 id="3-Stream操作过程"><a href="#3-Stream操作过程" class="headerlink" title="3.Stream操作过程"></a>3.Stream操作过程</h4><ul>
<li><p>创建Stream：一个数据源（如：集合，数组）获取一个流</p>
</li>
<li><p>中间操作：一个中间操作链，对数据源的数据进行处理</p>
</li>
<li><p>终止操作：一旦执行终止操作，就执行中间操作链，并产生结果，后面不会再被使用</p>
</li>
</ul>
<h4 id="4-Stream实例化"><a href="#4-Stream实例化" class="headerlink" title="4.Stream实例化"></a>4.Stream实例化</h4><p>（1）创建Stream</p>
<ul>
<li>通过集合创建</li>
<li>通过数组创建</li>
<li>通过Stream的of()创建</li>
<li>创建无限流</li>
</ul>
<p>（2）中间操作</p>
<ul>
<li>筛选与切片</li>
<li>映射</li>
<li>排序</li>
</ul>
<p>（3）Stream的终止操作</p>
<ul>
<li>匹配与查找</li>
<li>归约</li>
<li>收集</li>
</ul>
<h3 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h3><h4 id="1-Optional类概述"><a href="#1-Optional类概述" class="headerlink" title="1.Optional类概述"></a>1.Optional类概述</h4><ul>
<li><p>Optional<T>类是一个容器类，可以保存类型T的值，代表这个值存在（或者仅仅保存null，表示这个值不存在）</T></p>
</li>
<li><p>Optional可以更好表达这个概念，并且可以避免空指针异常</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>入门教程</tag>
        <tag>Java</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>开发原理|一个数据包的网络之旅</title>
    <url>/2021/10/13/DevPrinciple/%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8C%85%E7%9A%84%E7%BD%91%E7%BB%9C%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110131214746.webp" alt="When the internet stops working! "></p>
<p>本文紧接上文，聚焦于<strong>网络线程</strong>连接并请求主机直至获得<strong>响应报文</strong>这个过程，主要研究一个<strong>数据包</strong>的网络之旅</p>
<span id="more"></span>

<p>整个过程如下图所示：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110130822302.png" alt="image-20211013082245766"></p>
<p>参考资料：户根勤《网络是怎么连接的》</p>
<h3 id="浏览器生成消息"><a href="#浏览器生成消息" class="headerlink" title="浏览器生成消息"></a>浏览器生成消息</h3><h4 id="1-生成HTTP请求消息"><a href="#1-生成HTTP请求消息" class="headerlink" title="1.生成HTTP请求消息"></a>1.生成HTTP请求消息</h4><p>浏览器的第一步工作就是要对URL进行解析，并生成发送WEB服务器的请求信息</p>
<h5 id="（1）URL解析"><a href="#（1）URL解析" class="headerlink" title="（1）URL解析"></a>（1）URL解析</h5><ul>
<li>URL各个部分的含义：</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110082014448.png" alt="image-20211008201443231"></p>
<ul>
<li>对URL进行解析从而定位到Web服务器下对应的目录：</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110082017786.png" alt="image-20211008201702549"></p>
<p>我们常见的url中很多都是没有文件名的，例如<a href="https://www.baidu.com，这种情况往往是对文件名进行了省略，web服务器有默认指向的文件如index.html等，例如https://www.baidu.com/index.html">https://www.baidu.com，这种情况往往是对文件名进行了省略，web服务器有默认指向的文件如index.html等，例如https://www.baidu.com/index.html</a></p>
<h5 id="（2）HTTP请求消息生成"><a href="#（2）HTTP请求消息生成" class="headerlink" title="（2）HTTP请求消息生成"></a>（2）HTTP请求消息生成</h5><p>对URL进行解析后，浏览器确定了Web服务器和文件名，然后根据这些信息生成HTTP请求消息</p>
<ul>
<li>HTTP请求基本结构：</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110082026183.png" alt="image-20211008202601682"></p>
<ul>
<li>请求方法：</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110082038757.png" alt="img"></p>
<ul>
<li>请求报文：</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110082034679.png" alt="image-20211008203440385"></p>
<ul>
<li><p>HTTP状态码：</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202110172023742.png" alt="image-20211008203622266" style="zoom:80%;">



</li>
</ul>
<ul>
<li>响应报文：</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110082035607.png" alt="image-20211008203518461"></p>
<h4 id="2-DNS域名解析"><a href="#2-DNS域名解析" class="headerlink" title="2.DNS域名解析"></a>2.DNS域名解析</h4><p>通过浏览器解析URL并生成HTTP消息后，还需要查询服务器<strong>域名</strong>对应的<strong>IP</strong>地址，才能找到消息发送对象的地址位置</p>
<p><strong>DNS服务器</strong>就是专门用来保存WEB服务器域名与IP对应关系的服务器</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110082113224.png" alt="image-20211008211346869"></p>
<h5 id="（1）IP地址知识"><a href="#（1）IP地址知识" class="headerlink" title="（1）IP地址知识"></a>（1）IP地址知识</h5><ul>
<li>IP地址结构</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110082053217.png" alt="image-20211008205323963"></p>
<p>子网掩码表示IP地址中网络号与主机号的分界，子网掩码为1的部分为<strong>网络号</strong>，子网掩码为0的部分为<strong>主机号</strong></p>
<p>当主机号部分的比特全为0时表示整个子网（而不是某台设备）全为1表示向子网所以设备发送</p>
<ul>
<li>IP地址表示方法</li>
</ul>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202110172023054.png" alt="image-20211008205140338" style="zoom: 80%;">





<h5 id="（2）域名层级关系"><a href="#（2）域名层级关系" class="headerlink" title="（2）域名层级关系"></a>（2）域名层级关系</h5><p>在域名中，<strong>越靠右</strong>的位置表示其层级<strong>越高</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110082116997.png" alt="img"></p>
<p>例如<a href="http://www.google.cn（上香）：">www.google.cn（上香）：</a></p>
<ul>
<li>根 DNS 服务器</li>
<li>顶级域 DNS 服务器（cn）</li>
<li>权威 DNS 服务器（google.cn）</li>
<li>而<code>www</code> 是主机名 随意填写 域名解析的时候填写<strong>主机记录</strong>和<strong>记录值</strong> </li>
</ul>
<h5 id="（3）域名解析工作流程"><a href="#（3）域名解析工作流程" class="headerlink" title="（3）域名解析工作流程"></a>（3）域名解析工作流程</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110082129029.png" alt="image-20211008212953361"></p>
<ul>
<li>本地DNS服务器（离客户端最近的DNS服务器）运行的是<strong>递归查询</strong>：对客户端负责到底，不断去询问查找可以解析域名的服务器</li>
<li>其他DNS服务器运行的是<strong>迭代查询</strong>：奉行踢皮球原则，不主动询问其他服务器，而是把知道域名对应关系的服务器信息告诉给本地域名服务器</li>
</ul>
<h5 id="（4）域名解析内部原理"><a href="#（4）域名解析内部原理" class="headerlink" title="（4）域名解析内部原理"></a>（4）域名解析内部原理</h5><p>域名解析请求DNS服务器，与浏览器请求远程web服务器有类似的地方，后面含义再详细讲Socker库和协议栈</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110082104351.png" alt="image-20211008210454836"></p>
<h3 id="用电信号传输TCP-IP数据"><a href="#用电信号传输TCP-IP数据" class="headerlink" title="用电信号传输TCP/IP数据"></a>用电信号传输TCP/IP数据</h3><p>协议分层模型：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110090830845.jpeg" alt="OSI协议模型、TCP/IP协议模型"></p>
<p>TCP/IP数据包封装：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110090853102.png" alt="TCP/IP数据包的封装"></p>
<p>不同的协议层对数据包有不同的称谓，在传输层叫做段（segment），在网络层叫做数据报（datagram），在链路层叫做帧（frame）</p>
<p>通信操作中使用的控制信息分为两类：</p>
<ul>
<li>头部中记录的信息（即加载数据包前的控制信息）</li>
<li>套接字（协议栈中的内存空间）中记录的信息</li>
</ul>
<h4 id="1-委托协议栈发送消息"><a href="#1-委托协议栈发送消息" class="headerlink" title="1.委托协议栈发送消息"></a>1.委托协议栈发送消息</h4><p>通过DNS获取IP后，就可以把HTTP的传输工作交给<strong>操作系统</strong>中的<strong>协议栈</strong></p>
<p>委托的结果是：<strong>协议栈</strong>之间连接了一条数据通道，数据包能沿着这条通道流动（<strong>套接字</strong>则可以视为管道的出入口，<strong>套接字</strong>的实体就是通信控制信息）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110090819495.png" alt="image-20211009081901393"></p>
<h5 id="（1）套接字结构"><a href="#（1）套接字结构" class="headerlink" title="（1）套接字结构"></a>（1）套接字结构</h5><p>在协议栈内部有一块用于存放控制信息的内存空间，这里记录了用于<strong>控制通信操作的控制信息</strong>，我们可以认为这些控制信息就是套接字的实体</p>
<p>套接字中记录了用于控制通信操作的各种控制信息，协议栈则需要根据这些信息判断下一步的行动，这就是套接字的作用（协议栈是根据套接字中记录的控制信息来工作的）</p>
<p>套接字内容查看：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110090911172.png" alt="image-20211009091135737"></p>
<h5 id="（2）TCP-IP-软件分层结构"><a href="#（2）TCP-IP-软件分层结构" class="headerlink" title="（2）TCP/IP 软件分层结构"></a>（2）TCP/IP 软件分层结构</h5><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110090805877.png" alt="image-20211009080517915" style="zoom:80%;">

<h5 id="（3）Socket库"><a href="#（3）Socket库" class="headerlink" title="（3）Socket库"></a>（3）Socket库</h5><p>浏览器通过调用<strong>Socket</strong>库，委托协议栈来工作</p>
<p>向操作系统内部的协议栈发出委托时，需要按照指定的顺序来调用Socket 库中的程序组件：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110090811908.png" alt="image-20211009081135594"></p>
<ul>
<li>创建套接字（创建套接字阶段）</li>
<li>将管道连接到服务器端的套接字上（连接阶段）</li>
<li>收发数据（通信阶段）</li>
<li>断开管道并删除套接字（断开阶段）</li>
</ul>
<h5 id="（4）TCP与UDP协议"><a href="#（4）TCP与UDP协议" class="headerlink" title="（4）TCP与UDP协议"></a>（4）TCP与UDP协议</h5><p>TCP和UDP协议，接收应用层的委托指向收发数据的操作</p>
<ul>
<li>TCP和UDP协议的运用：</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110090832758.jpeg" alt="TCP/UDP常见应用"></p>
<ul>
<li>TCP/UDP比较：</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110131208230.webp" alt="TCP/UDP比较"></p>
<p>咳咳，正经详细的比较如下：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110131209573.png" alt="image-20211013120922107"></p>
<ul>
<li>TCP/UDP编程模型</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110090836254.jpeg" alt="TCP/UDP编程模型"></p>
<h5 id="（5）IP协议"><a href="#（5）IP协议" class="headerlink" title="（5）IP协议"></a>（5）IP协议</h5><p>在互联网上传数据时，数据刽被切分成一块块的网络包，而将网络包发送给对方的操作就是由 IP 负责的</p>
<p>此外 IP 中还包括 <code>ICMP</code> 协议和 <code>ARP</code> 协议：</p>
<ul>
<li><code>ICMP</code> 用于告知网络包传送过程中产生的错误以及各种控制信息</li>
<li><code>ARP</code> 用于根据 IP 地址查询相应的以太网 MAC 地址</li>
</ul>
<p>IP 下面的网卡驱动程序负责控制网卡硬件，而最下面的网卡则负责完成实际的收发操作，也就是对网线中的信号执行发送和接收的操作</p>
<h4 id="2-TCP可靠传输"><a href="#2-TCP可靠传输" class="headerlink" title="2.TCP可靠传输"></a>2.TCP可靠传输</h4><p>参考资料：<a href="https://www.eet-china.com/mp/a44399.html">TCP三次握手</a></p>
<h5 id="（1）TCP包头格式"><a href="#（1）TCP包头格式" class="headerlink" title="（1）TCP包头格式"></a>（1）TCP包头格式</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110091935607.png" alt="img"></p>
<ul>
<li><p>源端口号：发送网络包的程序的端口号</p>
</li>
<li><p>目标端口号： 网络包的接收方程序的端口号</p>
</li>
<li><p>序号：<strong>发送方告知接收方</strong>，该网络包发送的数据相当于所有发送数据的第几个字节</p>
</li>
<li><p>ACK 号（确认号）：<strong>接收方告知发送方</strong>，接收方已经收到了所有数据的第几个字节</p>
</li>
<li><p>数据偏移量（首部长度）： 表示数据部分的起始位置，也可以认为表示头部的长度</p>
</li>
<li><p>保留：该字段为保留，现在未使用</p>
</li>
<li><p>控制位（状态位）：该字段中的每个比特分别表示以下通信控制含义</p>
<ul>
<li>URG：表示紧急指针字段有效</li>
<li>ACK：表示接收数据序号字段有效，一般表示数据已被接收方<strong>收到</strong></li>
<li>PSH：表示通过flush 操作发送的数据</li>
<li>RST：<strong>强制断开</strong>连接，用于异常中断的情况</li>
<li>SYN：发送方和接收方相互确认序号，表示<strong>连接</strong>操作</li>
<li>FIN：表示<strong>断开</strong>连接</li>
</ul>
</li>
<li><p>窗口大小：接收方告知发送方窗口大小（窗口大小即缓存大小，标识当前处理能力，用于<strong>流量控制</strong>，<strong>拥塞控制</strong>）</p>
</li>
<li><p>校验和：用来检查是否出现错误</p>
</li>
<li><p>紧急指针：表示应紧急处理的数据位置</p>
</li>
<li><p>可选字段：除了上面的固定头部字段之外，还可以添加可选字段，但除了连接操作之外，很少使用可选字段</p>
</li>
</ul>
<h5 id="（2）TCP三次握手"><a href="#（2）TCP三次握手" class="headerlink" title="（2）TCP三次握手"></a>（2）TCP三次握手</h5><p>TCP三次握手其实就是<strong>建立一个TCP连接</strong>，客户端和服务器之间需要<strong>3个数据包</strong>，握手的主要作用就是为了确认双方的接收和发送能力是否正常，初始序列号，交换窗口大小以及 MSS 等信息</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110091957945.png" alt="img"></p>
<p>SYN：发送方和接收方相互确认序号，表示<strong>连接</strong>操作；    ACK：表示接收数据序号字段有效，一般表示数据已被接收方<strong>收到</strong></p>
<ul>
<li>初始状态下，客户端和服务端都处在<strong>CLOSED</strong>状态，先是服务端主动监听某个端口，处于<strong>LISTEN</strong>状态</li>
<li>第一次握手：客户端发送<strong>SYN</strong>报文，并进入<strong>SYN-SENT</strong>状态，等待服务器确认</li>
<li>第二次握手：服务器收到<strong>SYN</strong>报文后，需要向客户端发送<strong>ACK</strong>确认<strong>收到</strong>的报文；同时服务端也向客户端发送一个<strong>SYN报文</strong>（也就是说服务端向客户端发送了<strong>SYN+ACK</strong>报文），然后服务端进入<strong>SYN_RCVD</strong>状态</li>
<li>第三次握手：客户端收到<strong>SYN+ACK</strong>报文后，向服务端发送<strong>ACK</strong>确认<strong>收到</strong>的报文，客户端进入<strong>ESTABLISHED</strong>状态； 服务端收到客户端的<strong>ACK</strong>包后也会进入<strong>ESTABLISHED</strong>状态，完成三次握手</li>
</ul>
<p>三次握手的本质是——客户端和服务器通过<strong>两对SYN-ACK报文</strong>互相确认能力正不正常</p>
<p>每次SYN发送一个随机数<strong>n</strong>（seq=n），则ACK需要返回<strong>n+1</strong>（ack=n+1）</p>
<h5 id="（3）TCP连接状态查看"><a href="#（3）TCP连接状态查看" class="headerlink" title="（3）TCP连接状态查看"></a>（3）TCP连接状态查看</h5><p>在Linux系统可以通过<code>netstat -napt</code>命令查看TCP连接状态</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110092029731.png" alt="img"></p>
<h5 id="（4）TCP分割数据"><a href="#（4）TCP分割数据" class="headerlink" title="（4）TCP分割数据"></a>（4）TCP分割数据</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110092031256.png" alt="image-20211009203103835"></p>
<ul>
<li><code>MTU</code>：一个网络包的最大长度，以太网中一般为 <code>1500</code> 字节。</li>
<li><code>MSS</code>：除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110092036185.png" alt="image-20211009203651137"></p>
<p>HTTP请求消息比较长，超过MSS长度，TCP就会把HTTP消息的数据拆解成一块块的数据发送，数据会被以 <code>MSS</code> 的长度为单位进行拆分，拆分出来的每一块数据都会被放进单独的网络包中</p>
<h5 id="（5）TCP报文生成"><a href="#（5）TCP报文生成" class="headerlink" title="（5）TCP报文生成"></a>（5）TCP报文生成</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110092037127.jpeg" alt="img"></p>
<p>TCP 协议里面的两个端口，一个是浏览器监听的端口（通常是随机生成的），一个是 Web 服务器监听的端口（HTTP 默认端口号是 <code>80</code>， HTTPS 默认端口号是 <code>443</code>）</p>
<p>TCP报文即为TCP头部+HTTP头部+数据，组装好后交给下面的网络层（IP）处理</p>
<h5 id="（6）TCP四次挥手"><a href="#（6）TCP四次挥手" class="headerlink" title="（6）TCP四次挥手"></a>（6）TCP四次挥手</h5><p>当我们的应用不再需要数据通信，就会发起断开TCP连接，建立一个连接需要<strong>三次握手</strong>，而终止一个连接需要经过<strong>四次挥手</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110111551532.png" alt="img"></p>
<p>SYN：发送方和接收方相互确认序号，表示<strong>连接</strong>操作；    ACK：表示接收数据序号字段有效，一般表示数据已被接收方<strong>收到</strong>；    FIN：表示<strong>断开</strong>连接</p>
<ul>
<li>第一次挥手：客户端发起<strong>FIN</strong>包，客户端进入<strong>FIN_WAIT_1</strong>状态（虽然FIN包不携带数据，也需要消耗一个序号u）</li>
<li>第二次挥手：服务端收到<strong>FIN</strong>包，发出确认包<strong>ACK</strong>（ack=u+1），并带上自己的序号seq=v，服务端进入<strong>CLOSE_WAIT</strong>状态（这个时候客户端仍需要接收服务器发送的数据）；客户端接收到服务端发送的<strong>ACK</strong>后，进入<strong>FIN_WAIT_2</strong>状态</li>
<li>第三次挥手：服务端数据发送完毕后，向客户端发送<strong>FIN</strong>包（seq=w，ack=u+1），<strong>半连接状态</strong>下服务器可能又发送一些数据，服务端此时进入<strong>LAST_ACK</strong>状态</li>
<li>第四次挥手：客户端收到服务端的<strong>FIN</strong>包后，发出确认包ACK（ACK=1， ack=w+1），此时客户端进入<strong>TIME_WAIT</strong>状态；服务端收到客户端确认包后进入<strong>CLOSED</strong>状态，而客户端需要等待2MSL后才进入<strong>CLOSED</strong>状态</li>
</ul>
<p>四次挥手的本质是——客户端和服务器通过<strong>两对FIN-ACK报文</strong>通知对方自己要关闭了</p>
<p>三次握手中，在第二次握手时，接收端将一个<strong>ACK</strong>包和一个<strong>SYN</strong>包合并一起发送，所以减少了一次包的发送</p>
<p>四次挥手中，在主动关闭方（客户端）发送FIN包后，接收方（服务端）可能还要发送数据，不能立即关闭数据通道，所以服务端要先确认ACK，然后等到自己把数据发无可发后再发送<strong>FIN</strong>包</p>
<h4 id="3-IP远程定位"><a href="#3-IP远程定位" class="headerlink" title="3.IP远程定位"></a>3.IP远程定位</h4><p>TCP 模块在执行连接、收发、断开等各阶段操作时，都需要委托 IP 模块将数据封装成<strong>网络包</strong>发送给通信对象</p>
<h5 id="（1）IP包头格式"><a href="#（1）IP包头格式" class="headerlink" title="（1）IP包头格式"></a>（1）IP包头格式</h5><p>参考资料：<a href="https://www.malaoshi.top/show_1EF2boBn83hd.html">IP报头格式</a></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110111650792.png" alt="img"></p>
<ul>
<li>版本号（Version）：标明了<strong>IP 协议的版本号</strong>，目前的协议版本号为4，下一代IP 协议的版本号为6</li>
<li>首部长度：指 <strong>IP 包头部长度</strong>，占4 位</li>
<li>区分类型（服务类型）：包括一个3 位的优先权字段（<strong>COS</strong>，Class of Service），4 位<strong>TOS</strong> 字段和1 位未用位。4 位TOS 分别代表最小时延、最大吞吐量、最高可靠性和最小费用</li>
<li>总长度：是整个<strong>IP 数据报长度</strong>，包括数据部分</li>
<li>标识：唯一的标识主机发送的每一份数据报，通常每发送一份报文它的值就会加1</li>
<li>Flag：3bite 它是用来<strong>标志数据包是否分段</strong>，其中包含<strong>DF（do not fragment）</strong>和<strong>MF(more fragment)</strong>，当DF的值为1时，则MF的值必为0，DF为1，则说明数据包有分段。同样可以知道当MF为1时，则DF为0，这表示的是数据包没有分段。当然也有可能MF和DF都为0的</li>
<li>Frag offset：<strong>段偏移</strong> 15bite 用于<strong>描述此分段在数据包中的位置</strong></li>
<li>生存时间：Time To Live（TTL），设置了数据包可以经过的 <strong>路由器数目</strong>。一旦经过一个路由器，TTL 值就会减1，当该字段值为0 时，数据包将被丢弃</li>
<li>协议：指示应当把这个数据包发往更高层的协议，<strong>TCP</strong> 协议的协议号为 <strong>6</strong>，<strong>UDP</strong> 协议的协议号为<strong>17</strong></li>
<li>报头校验和：计算IP 头部的校验和，<strong>检查报文头部的完整性</strong></li>
<li>源IP 地址：标识数据包的<strong>源端设备</strong>（即客户端输出的IP地址）</li>
<li>目的IP 地址：标识数据包的<strong>目的端设备</strong>（即通过DNS域名解析得到的WEB服务器IP）</li>
<li>IP选项：一般格式为1个字节的代码，1个字节的长度，1个字节的指针，指针的值从1开始计数，指向IP选项的内容，一般其值为4(跳过了前面的代码&amp;长度&amp;指针的三个字节)，长度包括前面3个字节在内的整个IP选项，最大值为40</li>
</ul>
<h5 id="（2）IP地址选择"><a href="#（2）IP地址选择" class="headerlink" title="（2）IP地址选择"></a>（2）IP地址选择</h5><p>客户端有多个网卡时，在填写源地址IP时就要根据<strong>路由表</strong>规则来判定应该使用哪一块网卡来发送包</p>
<p>在lInux系统，我们使用<code>route -n</code>，在windows系统则用 <code>route print</code>查看路由表</p>
<p>利用子网掩码与路由表判断源地址：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110111928914.jpeg" alt="img"></p>
<p>假设目的IP 地址（web服务器）是<strong>192.168.10.200</strong>，与各条目的<strong>子网掩码</strong>做<strong>与运算</strong>，计算出IP和条目的<strong>网络目标IP</strong>（destination）匹配，则选择该条目的网卡作为IP包头的源地址</p>
<p>第三条目的目标地址和子网掩码都是 <code>0.0.0.0</code>，这表示<strong>默认网关</strong>，如果其他所有条目都无法匹配，就会自动匹配这一行。并且后续就把包发给路由器（Gateway即路由器的IP）</p>
<h5 id="（3）IP报文生成"><a href="#（3）IP报文生成" class="headerlink" title="（3）IP报文生成"></a>（3）IP报文生成</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110111945739.jpeg" alt="img"></p>
<p>IP报文即为IP头部+TCP头部+HTTP头部+数据，组装好后IP模块还要进一步处理</p>
<h4 id="4-MAC传输"><a href="#4-MAC传输" class="headerlink" title="4.MAC传输"></a>4.MAC传输</h4><p>生成了 IP 头部之后，接下来网络包还需要在 IP 头部的前面加上 <strong>MAC 头部</strong></p>
<h5 id="（1）MAC包头格式"><a href="#（1）MAC包头格式" class="headerlink" title="（1）MAC包头格式"></a>（1）MAC包头格式</h5><p>MAC 头部是以太网使用的头部，它包含了接收方和发送方的MAC 地址等信息</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110111958982.png" alt="img"></p>
<ul>
<li>接收方MAC 地址：网络包接收方的MAC 地址，在<strong>局域网</strong>中使用这一地址来传输网络包</li>
<li>发送方MAC 地址：网络包发送方的MAC 地址，接收方通过它来判断是谁发送了这个包</li>
<li>以太类型：使用的<strong>协议类型</strong>，下面是一些常见的类型，一般在TCP/IP 通信中只使用0800 和0806这两种<ol>
<li>0000-05DC：IEEE 802.3</li>
<li>0800　　 ：IP 协议</li>
<li>0806　 ：ARP 协议</li>
<li>86DD　　　 IPv6</li>
</ol>
</li>
</ul>
<h5 id="（2）MAC地址确认"><a href="#（2）MAC地址确认" class="headerlink" title="（2）MAC地址确认"></a>（2）MAC地址确认</h5><p><strong>发送方</strong>：</p>
<p>发送方的MAC地址获取比较简单，MAC地址在网卡生产时写入<strong>ROM</strong>中的，只需将其读取出来放到MAC头部即可</p>
<p><strong>接收方</strong>：</p>
<p>发送IP网络包需要告诉以太网对方的MAC地址，IP 模块根<strong>据路由表Gateway</strong> 栏的内容判断应该把包发送给谁，然后在利用<code>ARP</code> 协议通过<strong>广播</strong>的方法帮我们找到路由器（目标设备与发送方在同一子网中）的 MAC 地址</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110112024487.png" alt="image-20211011202440537"></p>
<p>后续操作系统会将ARP的查询结果缓存在<strong>ARP缓存</strong>的内存空间内，可以通过<code>arp -a</code>命令进行查看</p>
<h5 id="（3）MAC报文生成"><a href="#（3）MAC报文生成" class="headerlink" title="（3）MAC报文生成"></a>（3）MAC报文生成</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110112029433.jpeg" alt="img"></p>
<p>MAC报文即为MAC头部+IP头部+TCP头部+HTTP头部+数据，至此网络包终于完整了，可以从本设备的大门（网卡）走出去开始真正的网络之旅</p>
<h4 id="5-网卡出口"><a href="#5-网卡出口" class="headerlink" title="5.网卡出口"></a>5.网卡出口</h4><h5 id="（1）网卡处理IP网络包"><a href="#（1）网卡处理IP网络包" class="headerlink" title="（1）网卡处理IP网络包"></a>（1）网卡处理IP网络包</h5><p>IP生成的<strong>网络包</strong>只是放在内存中的一串二进制数字信息，所以在其开始网络旅程之前还要经过<strong>网卡</strong>将<strong>数字信息转换为电信号</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110112051633.png" alt="img"></p>
<p>网卡驱动从 IP 模块获取到包之后，会将其<strong>复制</strong>到网卡内的缓存区中，接着会其<strong>开头加上报头和起始帧分界符，在末尾加上用于检测错误的帧校验序列</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110112054908.png" alt="image-20211011205426437"></p>
<ul>
<li>起始帧分界符是一个用来表示包起始位置的标记</li>
<li>末尾的 <code>FCS</code>（帧校验序列）用来检查包传输过程是否有损坏</li>
</ul>
<p>最后网卡将网络包转换为电信号，通过网线发送出去</p>
<h5 id="（2）以太网"><a href="#（2）以太网" class="headerlink" title="（2）以太网"></a>（2）以太网</h5><p>以太网是一种为多台计算机能够彼此自由和廉价地相互通信而设计的通信技术，它可以让信号通过网线流过整个网络，最终到达所有的设备</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110121936474.png" alt="image-20211012193540441"></p>
<p>以太网的三个性质：</p>
<ul>
<li>包发送到MAC 头部的接收方MAC 地址代表的目的地</li>
<li>用发送方MAC地址识别发送方</li>
<li>用以太类型识别包的内容</li>
</ul>
<h5 id="（3）网络包传输"><a href="#（3）网络包传输" class="headerlink" title="（3）网络包传输"></a>（3）网络包传输</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110111956850.png" alt="image-20211011195613299"></p>
<p>经过网卡处理后的网络包会发往<strong>最近的网络转换设备</strong>，当到达最近的转发设备之后，转发设备会根据头部中的信息判断接下来应该发往哪里</p>
<p>这个过程需要用到一张表，这张表里面记录了每一个地址对应的发送方向，也就是按照头部里记录的目的地址在表里进行查询，并根据查到的信息判断接下来应该发往哪个方向</p>
<p>网络中有<strong>路由器</strong>和<strong>集线器</strong>两种不同的转发设备，它们在传输网络包时有着各自的分工</p>
<p>（1）路由器根据目标地址判断下一个路由器的位置（基于IP规则）</p>
<p>（2）集线器在子网中将网络包传输到下一个路由（以太网规则）</p>
<h3 id="从网线到网络设备"><a href="#从网线到网络设备" class="headerlink" title="从网线到网络设备"></a>从网线到网络设备</h3><p>参考资料：<a href="https://www.bilibili.com/video/BV1yt411d7Rd/">集线器，交换机，路由器的区别</a></p>
<p>网络数据包的网络之旅：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110121910213.png" alt="image-20211012191019888"></p>
<p>各设备处理数据包的方式：</p>
<ul>
<li><p>集线器：构建局域网的设备，它会将信号复制并发向连接同一个集线器（即同一局域网）的全部端口（广播）</p>
</li>
<li><p>交换机：构建局域网的设备，运行在MAC层，它会将信号发向指定MAC的端口</p>
</li>
<li><p>路由器：将局域网连接上互联网的设备，运行在IP层，路由器可以分析网络包的目标地址IP，如果该IP在自己负责的网络内则接收，如果不在的话就发向其他网络（本质上是一个网络网关）</p>
</li>
</ul>
<h4 id="1-集线器传输"><a href="#1-集线器传输" class="headerlink" title="1.集线器传输"></a>1.集线器传输</h4><p>集线器（Hub）是指将多条以太网双绞线或光纤集合连接在同一段物理介质下的设备</p>
<h5 id="（1）网卡与集线器的双绞线连接"><a href="#（1）网卡与集线器的双绞线连接" class="headerlink" title="（1）网卡与集线器的双绞线连接"></a>（1）网卡与集线器的双绞线连接</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110121922490.png" alt="img"></p>
<p>网线周围的电磁波会产生<strong>噪声</strong>混淆<strong>信号</strong>导致信号的波形发生<strong>失真</strong>，所以用<strong>双绞线</strong>移植噪声</p>
<h5 id="（2）集线器将信号发往所有线路"><a href="#（2）集线器将信号发往所有线路" class="headerlink" title="（2）集线器将信号发往所有线路"></a>（2）集线器将信号发往所有线路</h5><p>当电信号（网络包经过网卡转换后的形态）到达集线器后，<strong>集线器将信号发送给所有连接在它上面的线路</strong>，会被广播到整个网络中</p>
<p><strong>集线器</strong>将包发到所有的设备，然后由设备根据接收方MAC 地址来判断应该接收哪些包</p>
<h4 id="2-交换机包转发"><a href="#2-交换机包转发" class="headerlink" title="2.交换机包转发"></a>2.交换机包转发</h4><p>交换机意为“开关”，是一种用于电（光）信号转发的网络设备。它可以为接入交换机的任意两个网络节点提供独享的电信号通路</p>
<p>交换机工作在<strong>MAC层</strong>，也称为<strong>二层网络设备</strong></p>
<h5 id="（1）交换机包接收操作"><a href="#（1）交换机包接收操作" class="headerlink" title="（1）交换机包接收操作"></a>（1）交换机包接收操作</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110122048818.png" alt="image-20211012204847117"></p>
<ul>
<li>电信号进入交换器模块后，<strong>电信号</strong>转换为<strong>数字信号</strong></li>
<li>通过包末尾的<strong>FCS</strong>校验错误，无误后信号放入缓冲区</li>
<li>交换机的端口<strong>不具有MAC地址</strong>，所以会将接收到所有的包存放再缓冲区中</li>
</ul>
<h5 id="（2）交换机MAC地址查找"><a href="#（2）交换机MAC地址查找" class="headerlink" title="（2）交换机MAC地址查找"></a>（2）交换机MAC地址查找</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110122049533.png" alt="image-20211012204902267"></p>
<ul>
<li>包存入的缓冲区后，就需要查询<strong>MAC地址表</strong>找到包的接收发<strong>MAC地址</strong>对应的<strong>端口</strong>，从而准确发送到连接该端口的设备</li>
<li>如果地址表找不到指定的MAC地址（可能是该地址没有向交换机发送过包，或者这个设备一段时间没有工作导致地址从地址表删除了），就将包复制并发向其他所有的端口（和集线器同样的转发方法），然后<strong>只有相应的接收者才接收包，其他设备会忽略这个包</strong></li>
<li>如果接受方MAC地址是一个<strong>广播地址</strong>，交换机也会将包复制并发向其他所有的端口</li>
</ul>
<h4 id="3-路由器包转发"><a href="#3-路由器包转发" class="headerlink" title="3.路由器包转发"></a>3.路由器包转发</h4><p>经过交换机后，网络包终于走出了子网，再经过路由器这个关口正式进入互联网</p>
<p>路由器，是连接因特网中各局域网、广域网的设备</p>
<h5 id="（1）交换机与路由器"><a href="#（1）交换机与路由器" class="headerlink" title="（1）交换机与路由器"></a>（1）交换机与路由器</h5><ul>
<li>因为<strong>路由器</strong>是基于 IP 设计的，俗称<strong>三层</strong>网络设备，路由器的各个端口都具有 MAC 地址和 IP 地址</li>
<li>而<strong>交换机</strong>是基于以太网设计的，俗称<strong>二层</strong>网络设备，交换机的端口不具有 MAC 地址</li>
</ul>
<h5 id="（2）路由器基本原理"><a href="#（2）路由器基本原理" class="headerlink" title="（2）路由器基本原理"></a>（2）路由器基本原理</h5><p>路由器的端口具有MAC地址，因此它可以成为以太网的发送方和接收方；同时还具有IP地址，从这个意义上说，它和计算机的网卡是一样的</p>
<p>当转发包时，首先路由器端口会接收发给自己的以太网包，然后<strong>路由表</strong>查询转发目标，再由相应的<strong>端口</strong>作为发送方将以太网包发送出去</p>
<h5 id="（3）路由器包接收操作"><a href="#（3）路由器包接收操作" class="headerlink" title="（3）路由器包接收操作"></a>（3）路由器包接收操作</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110122126261.png" alt="image-20211012212606988"></p>
<ul>
<li>电信号到达网线接口部分，路由器模块会将<strong>电信号转成数字信号</strong></li>
<li>通过包末尾的<strong>FCS</strong>进行错误校验</li>
<li>检查MAC头部<strong>接收方MAC地址</strong>，如果是发给自己的就放到<strong>接收缓冲区</strong>中，否则就丢弃这个包</li>
<li>路由器的端口都具有 MAC 地址，只接收与自身地址匹配的包，遇到不匹配的包则直接丢弃</li>
</ul>
<h5 id="（4）路由表查询确认输出端口"><a href="#（4）路由表查询确认输出端口" class="headerlink" title="（4）路由表查询确认输出端口"></a>（4）路由表查询确认输出端口</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110122136962.jpeg" alt="img"></p>
<p>完成包接收操作后，路由器就会<strong>去掉</strong>MAC头部（MAC头部的作用就是将包送达路由器，接收方 MAC 地址就是路由器端口的 MAC 地址）</p>
<p> 然后查询<strong>路由表</strong>判断转发目标，如图<code>10.10.1.101</code> 的计算机要向地址为 <code>192.168.1.100</code> 的服务器发送一个包，这里的<strong>路由匹配</strong>与之前讲的<strong>IP地址的选择</strong>一样，即用目标IP与各条目的<strong>子网掩码</strong>做<strong>与运算</strong>，直到找到计算出IP和条目的<strong>网络目标IP</strong>（destination）匹配，则该条目的记录作为转发目标</p>
<p>实在找不到匹配路由时，就会选择<strong>默认路由</strong>，路由表中子网掩码为 <code>0.0.0.0</code> 的记录表示「默认路由」</p>
<h5 id="（5）路由器包发送操作"><a href="#（5）路由器包发送操作" class="headerlink" title="（5）路由器包发送操作"></a>（5）路由器包发送操作</h5><ul>
<li><p>路由器包发送操作需要根据<strong>路由表</strong>的<strong>网关列</strong>来判断：</p>
<ol>
<li>如果网关是一个 IP 地址，则这个IP 地址就是我们要转发到的目标地址，<strong>还未抵达终点</strong>，还需继续需要路由器转发。</li>
<li>如果网关为空，则 IP 头部中的接收方 IP 地址就是要转发到的目标地址，也是就终于找到 IP 包头里的目标地址了，说明<strong>已抵达终点</strong>。</li>
</ol>
</li>
<li><p>知道对方的 IP 地址之后，接下来需要通过 <code>ARP</code> 协议根据 IP 地址查询 MAC 地址，并将查询的结果作为接收方 MAC 地址</p>
</li>
<li><p>发送方 MAC 地址字段，填写输出端口的 MAC 地址</p>
</li>
<li><p>网络包完成后，接下来会将其转换成电信号并通过端口发送出去（与计算机的网卡的操作是一致的）</p>
</li>
<li><p>经过多个路由器的大接力，层层转发最终到达目的地</p>
</li>
</ul>
<p>在网络包传输的过程中，源 IP 和目标 IP 始终不变，一直变化的是 MAC 地址，因为需要 MAC 地址在以太网内进行两个设备之间的包传输</p>
<h3 id="通过接入网进入互联网内部"><a href="#通过接入网进入互联网内部" class="headerlink" title="通过接入网进入互联网内部*"></a>通过接入网进入互联网内部*</h3><p>（对于这部分我只做简单介绍，详细资料可参考<a href="https://www.tuhd.top/2017/07/12/2017-07-12-4network/">接入网进入互联网内部——探索接入网和网络运营商 </a>）</p>
<p>网络包出了局域网后通过接入网进入互联网。和局域网一样，互联网也是通过路由器来转发包的，因此我们可以将互联网视为局域网络的放大版</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110130828926.png" alt="image-20211013082847731"></p>
<h4 id="1-ADSL接入网"><a href="#1-ADSL接入网" class="headerlink" title="1.ADSL接入网"></a>1.ADSL接入网</h4><p>连接用户与互联网的接入网，所谓接入网，就是指连接互联网与家庭、公司网络的通信线路</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110130833348.png" alt="image-20211013083304491"></p>
<h4 id="2-光纤接入网"><a href="#2-光纤接入网" class="headerlink" title="2.光纤接入网"></a>2.光纤接入网</h4><p>另外一种接入网技术光纤接入网（FTTH），通过光纤分路来降低传输成本</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110130840845.png" alt="image-20211013084030599"></p>
<p>用户发送的网络包会通过ADSL 和FTTH 等接入网到达运营商的BAS，通过ADSL 接入网和BAS 之后，网络包就到达了互联网内部</p>
<h4 id="3-接入网中使用的PPP和隧道"><a href="#3-接入网中使用的PPP和隧道" class="headerlink" title="3.接入网中使用的PPP和隧道"></a>3.接入网中使用的PPP和隧道</h4><p>ADSL和FTTH接入网中，都需要先输入用户名和密码，而BAS就是登录操作的窗口，而<strong>BAS</strong>使用<strong>PPPoE</strong>（以太网点对点协议，是将PPP 消息装入以太网包进行传输的方式）来实现这个功能</p>
<h5 id="（1）PPPE协议"><a href="#（1）PPPE协议" class="headerlink" title="（1）PPPE协议"></a>（1）PPPE协议</h5><p>拨号上网中的PPP：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110130849163.png" alt="image-20211013084900996"></p>
<p>ASDL中的PPP：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110130849724.png" alt="image-20211013084922601"></p>
<p>FTTH中的PPP：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110130849315.png" alt="image-20211013084954950"></p>
<h5 id="（2）隧道"><a href="#（2）隧道" class="headerlink" title="（2）隧道"></a>（2）隧道</h5><p><strong>BAS</strong> 除了作为用户认证的窗口之外，还可以使用<strong>隧道</strong>方式来传输网络<br>包，通过隧道网络包被发向运营商</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110130854580.png" alt="image-20211013085445301"></p>
<h4 id="4-网络运营商内部"><a href="#4-网络运营商内部" class="headerlink" title="4.网络运营商内部"></a>4.网络运营商内部</h4><p>网络包通过接入网之后，到达运营商POP（Point of Presense，接入点）的路由器</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110130859348.png" alt="image-20211013085913670"></p>
<p>NOC是运营商的核心设备，从POP 传来的网络包都会集中到这里，<br>并从这里被转发到离目的地更近的POP，或者是转发到其他的运营商</p>
<h4 id="5-跨越运营商的网络包"><a href="#5-跨越运营商的网络包" class="headerlink" title="5.跨越运营商的网络包"></a>5.跨越运营商的网络包</h4><p>无论最终目的地是否属于同一家运营商，都可以从路由表中查到，因此只要一次接一次按照路由表中的目标地址来转发包，最终一定可以到达Web服务器所在的POP</p>
<p>运营商之间的路由信息交换：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110130902623.png" alt="image-20211013090254375"></p>
<p>通过连接到中心设备IX的方式来减少线路数量：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110130904552.png" alt="image-20211013090415545"></p>
<h3 id="进入服务端"><a href="#进入服务端" class="headerlink" title="进入服务端"></a>进入服务端</h3><p>通过互联网，我们可以到达旅途终点的大门前，我们的目标服务器就在这个局域网中</p>
<h5 id="1-服务端所在地"><a href="#1-服务端所在地" class="headerlink" title="1.服务端所在地"></a>1.服务端所在地</h5><p>一般都是（b）这种结构，经过接入网还要通过<strong>防火墙</strong>的<strong>审查</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110130909533.png" alt="img"></p>
<h5 id="2-服务端处理数据包"><a href="#2-服务端处理数据包" class="headerlink" title="2.服务端处理数据包"></a>2.服务端处理数据包</h5><p>请求终于到达了Web 服务器，短短几秒的“漫长旅程”迎来终点</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110130916831.jpeg" alt="img"></p>
<p>最后服务端一层一层剥开数据包获得HTTP请求，也派出了他的使节（<strong>响应消息</strong>）赶往客户端……</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110131159356.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>开发原理</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>开发原理</tag>
        <tag>深度系列</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>开发原理|HTTP与HTTPS</title>
    <url>/2021/10/17/DevPrinciple/HTTP%E4%B8%8EHTTPS/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110172010735.webp" alt="Oh the fun of HTTP-based applications"></p>
<p>基于HTTP应用程序的乐趣，but…</p>
 <img src="https://raw.staticdn.net/Autovy/Image/master/img/202208300729665.jpeg" style="zoom:20%;">



<span id="more"></span>

<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><h4 id="1-HTTP基本概念"><a href="#1-HTTP基本概念" class="headerlink" title="1.HTTP基本概念"></a>1.HTTP基本概念</h4><h5 id="（1）超文本传输协议"><a href="#（1）超文本传输协议" class="headerlink" title="（1）超文本传输协议"></a>（1）超文本传输协议</h5><p>HTTP是超文本传输协议（<strong>H</strong>yperText <strong>T</strong>ransfer <strong>P</strong>rotocol），准确的定义为<strong>HTTP 是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110140812679.png" alt="img"></p>
<ul>
<li>协议：HTTP确认了一种计算机之间交流<strong>通信规范</strong>，以及各种相关的各种控制和错误处理方式（<strong>行为约定和规范</strong>）</li>
<li>传输：HTTP是一个<strong>双向协议</strong>，传输就是数据需要经过一系列的物理介质从一个端系统传送到另外一个端系统的过程（<strong>请求方-应答方</strong>）</li>
<li>超文本：超文本顾名思义就是超越了普通文本的文本，最常用的超文本是<strong>HTML</strong>，是文章、图片、视频以及可以跳转到其他超文本等的<strong>混合体</strong></li>
</ul>
<h5 id="（2）HTTP状态码"><a href="#（2）HTTP状态码" class="headerlink" title="（2）HTTP状态码"></a>（2）HTTP状态码</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110140831637.webp" alt="Quick guide to HTTP Status codes"></p>
<p>好像没毛病😂，更加具体的说明如下：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110140836668.png" alt="img"></p>
<ul>
<li>1xx：<strong>提示信息</strong>，是协议处理中的<strong>中间状态</strong>，实际用到比较少</li>
<li>2xx：服务器<strong>成功</strong>处理客户端的请求<ol>
<li>200 （<strong>OK</strong>）：最常见的<strong>成功</strong>状态码，表示一切正常，非HEAD请求，服务器返回的响应头都会<strong>有body</strong>数据</li>
<li>204（<strong>No Content</strong>）：与200基本相同，但是响应头<strong>没有body</strong>数据</li>
<li>206（<strong>Partial Content</strong>）：应用于HTTP<strong>分块下载</strong>或<strong>断电续传</strong>，表示响应返回的body数据并不是资源的全部</li>
</ol>
</li>
<li>3xx：客户端请求的资源发生了变动，需要进行<strong>重定向</strong>（在响应头里使用字段 <code>Location</code>，指明后续要跳转的 URL）<ol>
<li>301（<strong>Moved Permanently</strong>）：表示永久重定向，说明请求的资源已经<strong>不存在</strong>，需要改用新的URL再次访问</li>
<li>302（<strong>Moved Permanently</strong>）：表示临时重定向，说明请求的资源<strong>还在</strong>，但暂时需要用另一个URL来访问</li>
<li>304（<strong>Not Modified</strong>）：缓冲重定向，用于缓存控制，表示资源未修改，重定向到已存在的缓冲文件</li>
</ol>
</li>
<li>4xx：客户端发送的报文有误，服务器无法处理<ol>
<li>400（<strong>Bad Request</strong>）：表示客户端请求的报文有误，但是是个<strong>笼统</strong>的错误</li>
<li>403（<strong>Forbidden</strong>）：表示服务器<strong>禁止访问</strong>资源，并不是客户端请求出错</li>
<li>404（<strong>Not Found</strong>）：表示请求的资源在服务器上<strong>不存在</strong>或<strong>未找到</strong>，所以无法提供给客户端</li>
</ol>
</li>
<li>5xx：服务器处理时内部发生了错误<ol>
<li>500（<strong>Internal Server Error</strong>）：一个<strong>笼统</strong>通用的错误：是的，服务器发生错误了，我们也不到什么错误</li>
<li>501（<strong>Not Implemented</strong>）：客户端请求的功能暂不支持（敬请期待）</li>
<li>502（Bad Gateway）：服务器自身工作正常，访问后端服务器时发生了错误（通常时用作网关或代理时的错误码）</li>
<li>503（<strong>Service Unavailable</strong>）：服务器当前正忙，暂时无法响应</li>
</ol>
</li>
</ul>
<h5 id="（3）HTTP常见字段"><a href="#（3）HTTP常见字段" class="headerlink" title="（3）HTTP常见字段"></a>（3）HTTP常见字段</h5><p><strong>通用标头：</strong>通用标头可以出现在请求标头和响应标头</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110141947390.png" alt="image-20211014194734284"></p>
<ul>
<li><p>Date：表示创建报文时间（格林威治标准时间）</p>
<p><code>Date: Wed, 21 Oct 2015 07:28:00 GMT</code> </p>
</li>
</ul>
<ul>
<li><p>Cache-Control：可以表示<strong>可缓存性</strong>、阈值性、 重新验证并重新加载和其他特性</p>
<p><code>Cache-control: no-cache</code></p>
</li>
</ul>
<ul>
<li><p>Connection：决定当前事务（一次三次握手和四次挥手）完成后，是否关闭网络连接（即是否复用TCP连接）</p>
<p><code>Connection: keep-alive</code>：<strong>持久性</strong>连接，一次事务完成后<strong>不关闭</strong>网络连接</p>
<p><code>Connection: close</code>：<strong>非持久化</strong>连接，一次事务完成后<strong>关闭</strong>网络连接</p>
</li>
</ul>
<p><strong>实体标头：</strong>实体标头是描述消息正文内容的 HTTP 标头</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110141955891.png" alt="image-20211014195508646"></p>
<ul>
<li>Content-Length：指示实体主体的大小，以字节为单位，发送到接收方</li>
</ul>
<p>  <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110142001859.jpeg" alt="img"></p>
<ul>
<li>Content-Type：用于描述数据类型（格式），与Accept配套</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110142006988.jpeg" alt="img"></p>
<ul>
<li><p>Content-Encoding：用来说明描述的压缩方法和编码类型，与Accept-Encoding配套</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110142003250.jpeg" alt="img"></p>
</li>
</ul>
<ul>
<li>Content-Language：描述了客户端或者服务端能够接受的语言，与Accept-Language配套</li>
</ul>
<p><strong>请求标头：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110142011873.png" alt="image-20211014201122463"></p>
<ul>
<li><p>Host：指明服务器域名与TCP端口号（也有写作authority）</p>
<p><code>Host: autovy.github.io</code></p>
</li>
</ul>
<ul>
<li><p>Referer：告诉服务器该网页是从哪个页面链接跳转过来的</p>
<p><code>Referer: https://autovy.github.io/</code></p>
</li>
</ul>
<ul>
<li><p>If-None-Match：使请求标头成为<strong>条件请求</strong>，当与给定资源<strong>ETag</strong>不匹配时才会处理请求</p>
<p><code>if-none-match: W/&quot;61665f52-7ba7&quot;</code></p>
</li>
</ul>
<ul>
<li><p>If-Modified-Since：If-Modified-Since 通常会与 If-None-Match 搭配使用，用于确认代理或客户端拥有的本地资源的<strong>有效性</strong>（在 <code>Last-Modified</code> 之后更新了服务器资源，那么服务器会响应 200，如果在 <code>Last-Modified</code> 之后没有更新过资源，则返回 304）</p>
<p><code>If-Modified-Since: Sat, 09 Oct 2021 01:58:35 GMT</code></p>
</li>
</ul>
<ul>
<li><p>Accept：告知服务器客户端能够理解的<strong>MIME类型</strong>，与Content-Type配套</p>
<p><code>accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</code></p>
</li>
</ul>
<ul>
<li>Accept-Charset：规定服务器处理表单数据所接受的<strong>字符集</strong></li>
</ul>
<ul>
<li><p>Accept-Language ：用来告知服务器客户端能够处理的<strong>自然语言集</strong></p>
<p><code>accept-language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</code></p>
</li>
</ul>
<p><strong>响应标头：</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110141925192.png" alt="img"></p>
<ul>
<li>Access-Control-Allow-Origin： 指定一个来源，它告诉浏览器允许该来源进行资源访问</li>
</ul>
<ul>
<li><p>Keep-Alive：表示的是 Connection 非持续连接的存活时间，可以进行指定，与Connection配套</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUlhrVicZt4iaLPPibcD8KQV4z9vqwAaAjdtkjUo5fGlKOsTaicbtEDO4u1Q/640?wx_fmt=jpeg" alt="img"></p>
</li>
</ul>
<ul>
<li>Server：服务器标头包含有关<strong>原始服务器</strong>用来处理请求的软件的信息</li>
</ul>
<ul>
<li>Set-Cookie：用于服务器向客户端发送 <strong>sessionID</strong></li>
</ul>
<ul>
<li>Transfer-Encoding：规定了传输报文主体时采用的<strong>编码方式</strong></li>
</ul>
<ul>
<li>X-Frame-Options：用于控制网站内容在其他 Web 网站的 <strong>Frame 标签</strong>内的显示问题，其主要目的是为了防止点击<strong>劫持攻击</strong></li>
</ul>
<h5 id="（4）HTTP无状态分析"><a href="#（4）HTTP无状态分析" class="headerlink" title="（4）HTTP无状态分析"></a>（4）HTTP无状态分析</h5><p><strong>无状态协议</strong>指浏览器对于事务的处理没有<strong>记忆能力</strong>，HTTP连接之间彼此独立，不会对请求和响应之间的通信进行保存</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110161444685.png" alt="img"></p>
<p>而<strong>Cookie</strong>技术可以通过在请求和响应报文中写入Cookie信息来控制客户端的状态</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110161446059.png" alt="img"></p>
<ul>
<li>客户端第一次向服务端发起请求</li>
<li>服务端开辟一块<strong>Session空间</strong>，同时生成一个<strong>sessionId</strong>，通过响应头的<strong>Set-Cookie</strong>命令要求客户端设置<strong>Cookie</strong></li>
<li>客户端收到响应后，在本地设置<strong>JSESSIONID</strong>的<strong>Cookie</strong>信息，默认过期时间为浏览器会话结束；接下来客户端向同一个完整发送请求时都会携带该<strong>Cookie</strong>信息</li>
<li>服务端通过读取请求头的<strong>Cookie</strong>信息，获取<strong>JSESSIONID</strong>的值，与存储的<strong>Session</strong>内的<strong>seesionId</strong>匹配</li>
</ul>
<p>此外还有一种让浏览器有记忆能力的机制——<strong>JWT机制</strong>（JSON WEB TOKEN），与Cookie不同，JWT是保存在客户端的信息，广泛用于<strong>单点登录</strong>，这里先挖个坑以后会详细出一篇讲单点登录的文章</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110161506705.webp" alt="img"></p>
<p>JWT是基于token的鉴权机制，不需要服务端去保留用户的认证信息或者会话信息</p>
<ul>
<li>用户使用用户名密码来请求服务器</li>
<li>服务器进行验证用户的信息</li>
<li>服务器通过验证发送给用户一个token（令牌）</li>
<li>客户端存储token，并在每次请求时附送上这个token值</li>
<li>服务端验证token值，并返回数据（token一般存在数据库中，也可以放在内存中）</li>
</ul>
<h4 id="2-GET与POST"><a href="#2-GET与POST" class="headerlink" title="2.GET与POST"></a>2.GET与POST</h4><h5 id="（1）GET与POST区别"><a href="#（1）GET与POST区别" class="headerlink" title="（1）GET与POST区别"></a>（1）GET与POST区别</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110161530468.jpeg" alt="img"></p>
<p>GET请求报文：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/home.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/4.0 (compatible; MSIE5.01; Windows NT)</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.java67.blogspot.com</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-us</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-Alive</span><br></pre></td></tr></table></figure>



<p>POST请求报文:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">content-type:application/x-www-form-urlencoded;charset=utf-8</span><br><span class="line">host: https://importexport.amazonaws.com</span><br><span class="line">content-length:207</span><br><span class="line"></span><br><span class="line">Action=GetStatus&amp;SignatureMethod=HmacSHA256&amp;JobId=JOBID&amp;SignatureVersion=2</span><br><span class="line">&amp;Version=2010-06-03&amp;Signature=%2FVfkltRBOoSUi1sWxRzN8rw%3D</span><br><span class="line">&amp;Timestamp=2011-06-20T22%3A30%3A59.556Z</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>GET</strong>方法的含义是从服务器获取<strong>资源</strong>，发送的内容添加在url后</li>
<li><strong>POST</strong>方法先<strong>URI</strong>指定资源提交数据，这些数据放在报文body中</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110161540496.png" alt="img"></p>
<h5 id="（2）安全与幂等"><a href="#（2）安全与幂等" class="headerlink" title="（2）安全与幂等"></a>（2）安全与幂等</h5><ul>
<li><p>安全：在HTTP协议中，<strong>安全</strong>即请求方法不全不会<strong>破坏</strong>服务器的资源</p>
</li>
<li><p>幂等：多次执行相同操作，结果<strong>相同</strong>即一次请求和重复的多次请求对系统资源的影响是一致的，幂等思想在开发中有多处应用，可参考文章<a href="https://os.51cto.com/art/202012/633886.htm">幂等本质</a>了解更多</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110161549945.png" alt="img"></p>
</li>
</ul>
<ul>
<li><p>GET： GET方法是<strong>安全且幂等</strong>的，它是<strong>只读</strong>操作，服务器上数据安全且每次结果<strong>相同</strong></p>
</li>
<li><p>POST：POST方法是<strong>不安全且不幂等</strong>，它是<strong>新增或提交数据</strong>操作会修改服务器上的资源，所以<strong>不安全</strong>；多次提交数据就会创建多个资源，所以不是<strong>幂等</strong>的</p>
</li>
</ul>
<h4 id="3-HTTP特性"><a href="#3-HTTP特性" class="headerlink" title="3.HTTP特性"></a>3.HTTP特性</h4><h5 id="（1）HTTP的优点"><a href="#（1）HTTP的优点" class="headerlink" title="（1）HTTP的优点"></a>（1）HTTP的优点</h5><ul>
<li>简单：HTTP 基本的报文格式就是 <code>header + body</code>，头部信息也是 <code>key-value</code> 简单文本的形式，<strong>易于理解</strong></li>
<li>灵活和易于扩展：HTTP协议中的各类请求方法、URI/URL、状态码、头字段等每个组成要求都允许开发人员<strong>自定义和扩充</strong>，并且HTTP工作在应用层，其下层可以随意变化</li>
<li>应用广泛和跨平台：HTTP的应用范围广泛，而且可以跨平台使用</li>
</ul>
<h5 id="（2）HTTP的缺点"><a href="#（2）HTTP的缺点" class="headerlink" title="（2）HTTP的缺点"></a>（2）HTTP的缺点</h5><ul>
<li><p>无状态双刃剑</p>
<ol>
<li>无状态的好处：服务器不需要记忆HTTP状态，不需要额外资源记录状态信息，减轻服务器负担</li>
<li>无状态的坏处：服务器在需要进行关联操作时会非常麻烦</li>
<li>无状态的问题可以配合Cookie或Token进行解决</li>
</ol>
</li>
</ul>
<ul>
<li><p>明文传输双刃剑</p>
<ol>
<li>明文传输好处：方便阅读，为<strong>调试</strong>提供极大的便利性</li>
<li>明文传输坏处：你能看到的信息别人也能看到，敏感信息直接就<strong>裸奔</strong>了</li>
</ol>
</li>
</ul>
<ul>
<li>不安全<ol>
<li>通信用明文，内容容易被窃听</li>
<li>不验证通信方的身份，可能遭遇伪装</li>
<li>无法验证报文的完整性，可以会被篡改</li>
</ol>
</li>
</ul>
<h5 id="（3）HTTP性能"><a href="#（3）HTTP性能" class="headerlink" title="（3）HTTP性能"></a>（3）HTTP性能</h5><p>主要针对目前应用广泛的HTTP/1.1进行评测</p>
<ul>
<li><p>长连接：提供持久连接，减少TCP连接的重复建立和断开所造成的额外开销</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110162038444.jpeg" alt="img"></p>
</li>
</ul>
<ul>
<li><p>管道网络传输：客户端发起多个请求，发起了一个请求后不必等待响应，而是继续发送下一个请求，从而减少整体的响应时间</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110162042091.jpeg" alt="img"></p>
</li>
</ul>
<ul>
<li><p>队头阻塞：当顺序发送时，请求序列中的一个请求被阻塞了，在后面排队的所有请求被阻塞了</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110162044395.jpeg" alt="img"></p>
</li>
</ul>
<h4 id="4-HTTP版本比较"><a href="#4-HTTP版本比较" class="headerlink" title="4.HTTP版本比较"></a>4.HTTP版本比较</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110162046556.jpeg" alt="img"></p>
<h5 id="（1）HTTP-1-1"><a href="#（1）HTTP-1-1" class="headerlink" title="（1）HTTP/1.1"></a>（1）HTTP/1.1</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110162105544.png" alt="image-20211016210504151"></p>
<p>HTTP/1.1的性能改进：</p>
<ul>
<li>使用<strong>长连接</strong>改善短链接造成的性能开销</li>
<li>支持<strong>管道网络传输</strong>，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间</li>
</ul>
<p>HTTP/1.1 性能瓶颈：</p>
<ul>
<li>请求/响应<strong>头部未经压缩</strong>就发送，只压缩了Body部分，首部信息越多延迟越大</li>
<li>发送<strong>冗长的首部</strong>，每次互相发送相同的首部造成浪费较多</li>
<li>队头阻塞</li>
<li>没有请求优先级控制</li>
<li>请求只能从客户端开始，服务器只能被动响应</li>
</ul>
<h5 id="（2）HTTP-2"><a href="#（2）HTTP-2" class="headerlink" title="（2）HTTP/2"></a>（2）HTTP/2</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110162104685.png" alt="image-20211016210448418"></p>
<p>HTTP/2的性能改进：</p>
<ul>
<li><p>头部压缩</p>
<p>利用<strong>HPACK算法</strong>压缩头部，如果同时发出多个请求，可以消除重复的部分（在客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号）</p>
</li>
</ul>
<ul>
<li><p>二进制格式</p>
<p>报文采用<strong>二进制格式</strong>而不是纯文本的形式，头信息和数据体都是二进制统称为帧，增加数据传输的效率</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110162058061.png" alt="img"></p>
</li>
</ul>
<ul>
<li><p>数据流</p>
<p>数据包不是按顺序发送，同一个连接里面连续的数据包，可能属于不同的回应</p>
<p>因此要对数据包做标记，每个请求或回应的所有数据包，称为一个<strong>数据流</strong>（<code>Stream</code>）</p>
<p>每个数据流都标记着一个独一无二的编号，其中规定客户端发出的数据流编号为奇数， 服务器发出的数据流编号为偶数</p>
<p>客户端还可以<strong>指定数据流的优先级</strong>，优先级高的请求，服务器就先响应该请求</p>
</li>
</ul>
<ul>
<li><p>多路复用</p>
<p>在<strong>一个连接中并发多个请求或回应，而不用按照顺序一一对应</strong>，不需要排队等待，也就不会再出现「队头阻塞」问题，<strong>降低了延迟，大幅度提高了连接的利用率</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110162107565.jpeg" alt="img"></p>
</li>
</ul>
<ul>
<li><p>服务器推送</p>
<p>服务不再是被动地响应，也可以<strong>主动</strong>向客户端发送消息</p>
<p>在浏览器刚请求 HTML 的时候，就提前把可能会用到的 JS、CSS 文件等静态资源主动发给客户端，<strong>减少延时的等待</strong>，也就是<strong>服务器推送</strong></p>
</li>
</ul>
<p>HTTP/2 性能瓶颈：</p>
<ul>
<li>多个HTTP请求复用一个TCP连接，下层的 TCP 协议是不知道有多少个 HTTP 请求</li>
<li>一旦发生丢包现象，就会触发<strong>重传机制</strong>，这样在一个 TCP 连接中的<strong>所有的 HTTP 请求都必须等待这个丢了的包被重传回来</strong></li>
<li>这些都是基于TCP传输层的问题，所以 <strong>HTTP/3 把 HTTP 下层的 TCP 协议改成了 UDP</strong></li>
</ul>
<h5 id="（3）HTTP-3"><a href="#（3）HTTP-3" class="headerlink" title="（3）HTTP/3"></a>（3）HTTP/3</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110162114689.png" alt="image-20211016211442384"></p>
<p>HTTP/3的性能改进：</p>
<ul>
<li><p><strong>HTTP/3 把 HTTP 下层的 TCP 协议改成了 UDP</strong>，UDP 发生是不管顺序，也不管丢包的，所以不会出现 HTTP/1.1 的队头阻塞 和 HTTP/2 的一个丢包全部重传问题</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110131208230.webp" alt="TCP/UDP比较"></p>
</li>
</ul>
<ul>
<li><p>UDP是不可靠的传输，所以HTTP/3使用的是基于 UDP 的 <strong>QUIC 协议</strong> 可以实现类似 TCP 的可靠性传输</p>
<ol>
<li><p>QUIC协议当某个流发生丢包时，只会阻塞这个流，其他流不会受到影响</p>
</li>
<li><p>TL3 升级成了最新的 <code>1.3</code> 版本，头部压缩算法也升级成了 <code>QPack</code></p>
</li>
<li><p>HTTPS 要建立一个连接，要花费 6 次交互，先是建立三次握手，然后是 <code>TLS/1.3</code> 的三次握手。QUIC 直接把以往的 TCP 和 <code>TLS/1.3</code> 的 6 次交互<strong>合并成了 3 次，减少了交互次数</strong></p>
</li>
<li><p>QUIC 是一个在 UDP 之上的<strong>伪</strong> TCP + TLS + HTTP/2 的多路复用的协议</p>
</li>
</ol>
</li>
</ul>
<pre><code>![img](https://raw.staticdn.net/Autovy/Image/master/img/202110162120028.jpeg)</code></pre><p>HTTP/3 性能瓶颈：</p>
<p>QUIC 是新协议，对于很多网络设备，根本不知道什么是 QUIC，只会当做 UDP，普及的进度非常的缓慢</p>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><h4 id="1-HTTPS基本概念"><a href="#1-HTTPS基本概念" class="headerlink" title="1.HTTPS基本概念"></a>1.HTTPS基本概念</h4><h5 id="（1）HTTPS定义"><a href="#（1）HTTPS定义" class="headerlink" title="（1）HTTPS定义"></a>（1）HTTPS定义</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110170930547.png" alt="img"></p>
<p>HTTPS（HyperText Transfer Protocol Secure）超文本传输安全协议，数据通信仍然是HTTP，但利用<strong>SSL/TLS加密数据包</strong></p>
<h5 id="（2）HTTP的安全问题"><a href="#（2）HTTP的安全问题" class="headerlink" title="（2）HTTP的安全问题"></a>（2）HTTP的安全问题</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110171058237.svg" alt="202110170933070 (1)"></p>
<p>HTTP的<strong>明文传输</strong>是一个致命缺陷，没有经过任何加密，而这些明文数据会经过<strong>WiFi、路由器、运营商、机房</strong>等多个物理设备节点，如果在这中间任意一个节点被监听，传输的内容就会完全暴露，，这一攻击手法叫做MITM（Man In The Middle）<strong>中间人</strong>攻击</p>
<h4 id="2-HTTPS实现原理"><a href="#2-HTTPS实现原理" class="headerlink" title="2.HTTPS实现原理"></a>2.HTTPS实现原理</h4><h5 id="（1）对称加密"><a href="#（1）对称加密" class="headerlink" title="（1）对称加密"></a>（1）对称加密</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110170959993.png" alt="img"></p>
<p>对称加密算法使用<strong>同一个密钥</strong>进行加密和解密</p>
<ul>
<li>优点：速度快，适合数据量比较大的数据进行加密</li>
<li>缺点：在HTTPS的传输场景下，服务端事先并不知道客户端是谁，必然需要一个<strong>密钥传输</strong>过程，这意味着该密钥必定会<strong>泄露</strong>，后续的加密就不起作用了</li>
</ul>
<h5 id="（2）非对称加密：一组公私钥"><a href="#（2）非对称加密：一组公私钥" class="headerlink" title="（2）非对称加密：一组公私钥"></a>（2）非对称加密：一组公私钥</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110170959312.png" alt="img"></p>
<p>非对称加密需要两个密钥，一个<strong>公开密钥（Public Key）</strong>,一个<strong>私有密钥（Private Key）</strong>。公钥和私钥是一对，如果使用公钥进行加密的数据，只有对应的私钥才能解密。相对的，如果是使用私钥加密的数据，只有对应的公钥才能解密</p>
<ul>
<li>优点：当客户端发起连接请求，服务端将公钥传输过去，客户端利用<strong>公钥加密</strong>好信息，再将密文发送给服务端，服务端里用<strong>私钥解密</strong>，从而基本保证了客户端发送信息是安全的（只有服务器的私钥可解）</li>
<li>缺点：服务器无法返回加密安全的数据，服务器有<strong>公钥和私钥</strong>，客户端只有<strong>公钥</strong>。如果服务器用公钥加密，客户端也没有私钥可以解密；如果服务器用私钥加密，但是公钥相当于公开的，这样数据就不安全了</li>
</ul>
<p>严格来说，私钥并不能用来加密，而一般用作<strong>签名</strong>使用，签名的功能也会应用在HTTPS中，后面再细嗦</p>
<h5 id="（3）非对称加密：两组公私钥"><a href="#（3）非对称加密：两组公私钥" class="headerlink" title="（3）非对称加密：两组公私钥"></a>（3）非对称加密：两组公私钥</h5><p>一组公钥私钥只能保证客户端到服务端的<strong>单程加解密</strong>，理论上使用两组公钥私钥是可以保证<strong>往返加解密</strong></p>
<ul>
<li>服务端有非对称加密的公钥A1，私钥A2</li>
<li>客户端有非对称加密的公钥B1，私钥B2</li>
<li>客户端向服务端发起请求，服务端将<strong>公钥A1</strong>返回给客户端</li>
<li>浏览器收到公钥A1，将自己保存的<strong>公钥B1</strong>发送给服务端</li>
<li>之后浏览器所有向客户端发送的数据，使用公钥B1加密，客户端可以使用私钥B2解密</li>
<li>客户端所有向服务端发送的数据，使用公钥A1加密，服务端可以使用私钥A2解密</li>
</ul>
<p>虽然非对称加密两组公私钥可以让两条传输方向都经过非对称加密，都能保证安全性，但是<strong>非对称加密耗时远大于对称加密</strong>，对性能有很大的损耗</p>
<h5 id="（4）混合加密"><a href="#（4）混合加密" class="headerlink" title="（4）混合加密"></a>（4）混合加密</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110171015628.jpeg" alt="img"></p>
<p>混合加密是对称加密和非对称加密的结合体，即<strong>传输密钥</strong>时（一般传输共享的<strong>对称密钥</strong>）使用<strong>非对称加密</strong>的公钥加密，<strong>传输数据</strong>时使用<strong>共享对称密钥</strong>加密</p>
<ul>
<li><strong>非对称加密</strong>交换<strong>对称加密</strong>的<strong>会话密钥</strong></li>
<li><strong>对称加密</strong>使用<strong>会话密钥</strong>加密并交换数据</li>
</ul>
<p>具体步骤如下：</p>
<ul>
<li>服务端有非对称加密的公钥A1，私钥A2</li>
<li>客户端发起请求，服务端将公钥A1返回给客户端</li>
<li>客户端随机生成一个对称加密的密钥K，用公钥A1加密后发送给服务端</li>
<li>服务端收到密文后用自己的私钥A2解密，得到对称密钥K，此时完成了<strong>安全的对称密钥交换</strong>，解决了对称加密时密钥传输被人窃取的问题</li>
<li>之后双方通信都使用<strong>密钥K进行对称加解密</strong></li>
</ul>
<h5 id="（5）CA与数字证书"><a href="#（5）CA与数字证书" class="headerlink" title="（5）CA与数字证书"></a>（5）CA与数字证书</h5><p>混合加密兼顾了安全性，但是仍然无法保证安全，<strong>非对称加密的算法</strong>是<strong>公开</strong>的，所有人都可以生成一对公钥私钥，我们仍需要考虑<strong>中间人攻击</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110171034059.png" alt="img"></p>
<ul>
<li>服务端返回公钥A1的过程中，中间人<strong>替换</strong>成自己准备好的的公钥B1传送给客户端</li>
<li>客户端对篡改行为一无所知，傻傻地使用公钥B1加密了对称加密使用的<strong>会话密钥K</strong></li>
<li>中间人截获公钥B1加密的<strong>会话密钥K</strong>，利用自己的私钥B2简简单单解个密，<strong>会话密钥K</strong>就暴露了，再使用服务端的公钥A1加密K传送给服务端，成功欺骗服务端，完成了通信链路。此后的的通信数据和明文传输无异</li>
</ul>
<p>这一问题的核心是：客户端<strong>无法确认</strong>收到的公钥是不是真的来源于服务端，无法保证公钥不被<strong>篡改</strong>和其<strong>信任度</strong>，这时就需要第三方权威机构<strong>CA</strong>（数字证书认证机构）将<strong>服务器公钥放在数字证书</strong>中，只要证书可信，公钥就可信</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110171059315.jpeg" alt="img"></p>
<p><strong>摘要算法（哈希处理）</strong>保证证书不被篡改的原理：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110171635097.jpeg" alt="img"></p>
<ul>
<li><p>服务器的公钥要事先提交到<strong>CA</strong>进行注册，申请一份<strong>数字证书</strong>（数字证书包含证书持有者，证书有效期，服务器公钥，哈希算法等）</p>
</li>
<li><p><strong>CA</strong>在颁发<strong>数字证书</strong>前对证书明文信息进行哈希处理（信息摘要计算），并对哈希值用CA的<strong>私钥</strong>处理得到<strong>数字签名</strong>对数字证书进行<strong>加签</strong></p>
</li>
<li><p>CA的公钥会<strong>内置</strong>在浏览器或操作系统中，不需要额外的网络传输</p>
</li>
<li><p>客户端发送请求时，服务端通过发送<strong>数字证书</strong>传输服务器的公钥</p>
</li>
<li><p>客户端得到证书，分解为<strong>明文部分Text</strong>和<strong>数字签名Sig1</strong>，使用CA机构的公钥进行<strong>解签</strong>得到Sig2，用证书声明的哈希算法对明文部分Text进行<strong>哈希处理</strong>，再与Sig2对比，如果匹配成功表示证书可信即表示公钥可信</p>
</li>
</ul>
<h4 id="3-HTTPS工作流程"><a href="#3-HTTPS工作流程" class="headerlink" title="3.HTTPS工作流程"></a>3.HTTPS工作流程</h4><p>参考资料：（写的比我好😇）</p>
<p><a href="https://segmentfault.com/a/1190000021494676">HTTPS 详解一：附带最精美详尽的 HTTPS 原理图</a></p>
<p><a href="https://segmentfault.com/a/1190000021559557">HTTPS详解二：SSL / TLS 工作原理和详细握手过程</a></p>
<p><a href="https://razeencheng.com/post/ssl-handshake-detail.html">HTTPS篇之SSL握手过程详解</a></p>
<h5 id="（1）HTTPS加解密流程"><a href="#（1）HTTPS加解密流程" class="headerlink" title="（1）HTTPS加解密流程"></a>（1）HTTPS加解密流程</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110171621895.png" alt="preview"></p>
<ul>
<li>客户端发起HTTPS请求，默认使用服务器端的<strong>443端口</strong>进行连接</li>
<li>服务器收到请求，返回配好的包含<strong>公钥Pub</strong>的证书给客户端（对应的<strong>私钥Private</strong>保存在服务器不公开）</li>
<li>客户端收到证书，校验<strong>证书的合法性</strong>（包括证书的有效期，证书域名，请求域名，数字签名等），保证证书没有被篡改</li>
<li>客户端生成一个用于对称加密的<strong>随机key</strong>，并用证书内的<strong>公钥Pub</strong>进行解密，发送给服务端</li>
<li>服务端收到<strong>随机key</strong>的密文，使用<strong>公钥Pub</strong>对应的<strong>私钥Private</strong>解密得到客户端发送的<strong>随机key</strong></li>
<li>服务端使用客户端发送的<strong>随机key</strong>对需要传输的HTTP数据进行对称加密，将密文返回客户端</li>
<li>客户端使用<strong>随机key</strong>对称解密密文，得到HTTP数据明文</li>
<li>后续的HTTPS<strong>传输数据</strong>都使用交换好的<strong>随机key</strong>进行对称加解密保证了数据的安全</li>
</ul>
<h5 id="（2）HTTPS通信流程图"><a href="#（2）HTTPS通信流程图" class="headerlink" title="（2）HTTPS通信流程图"></a>（2）HTTPS通信流程图</h5><p>HTTPS握手过程即TCP三次握手 + TLS握手</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110171537560.png" alt="img"></p>
<p>详细的TLS握手流程如下，其与<strong>HTTPS加解密的流程</strong>大致<strong>对应</strong>，但更侧重于TLS握手的概念</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110171621720.png" alt="preview"></p>
<ul>
<li><p>客户端发送<strong>clienthello</strong>消息：客户端发送<strong>clienthello</strong>消息发起握手请求，该消息包含了客户端支持的<strong>TLS版本号</strong>和<strong>密码组合</strong>以及一个<strong>client random</strong>随机字符串，需要约定的密码组合如下</p>
<ol>
<li>握手期间所使用的的密钥交换和认证算法 (最常用的是 RSA 算法)</li>
<li>加密算法 (用于握手完成后的对称加密，常用的有 AES、3DES等)</li>
<li>信息摘要算法 (常用的有 SHA-256、SHA-1 和 MD5 等)</li>
</ol>
</li>
<li><p>服务端发送<strong>serverhello</strong>消息：服务器发送<strong>serverhello</strong>消息对客户端进行回应，该消息包含<strong>数字证书</strong>，服务器选择的<strong>密码组合</strong>和<strong>server random</strong>随机字符串</p>
</li>
<li><p>客户端验证<strong>数字证书</strong>：客户端对服务器发来的证书进行验证，确保对方的合法身份</p>
<ol>
<li><p>检查数字签名（前面有详细的讲解，<strong>数字签名</strong>即服务器对证书内容进行<strong>信息摘要计算</strong>后再用<strong>私钥</strong>加密的结果）</p>
</li>
<li><p>验证证书链（<strong>证书链</strong>也称为证书路径，用于认证实体合法身份的证书列表，可以验证服务器的合法身份，也可以保证根证书的安全）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110171645010.png" alt="image-20211017164519690"></p>
</li>
<li><p>检查证书的有效期</p>
</li>
<li><p>检查证书的撤回状态 (撤回代表证书已失效)</p>
</li>
</ol>
</li>
<li><p>客户端发送<strong>premaster secret字符串</strong>密文：客户端生成随机字符串<strong>premaster secret</strong>（预主密钥），并用<strong>公钥</strong>进行加密发送给服务器，只有服务器的私钥可以解开</p>
</li>
<li><p>服务器解密<strong>premaster secret</strong>：服务器使用私钥解密<strong>premaster secret字符串</strong></p>
</li>
<li><p>客户端服务端生成<strong>共享密钥</strong>：客户端和服务器均使用 <strong>client random</strong>，<strong>server random</strong> 和 <strong>premaster secret</strong>，并通过相同的算法生成相同的共享密钥 <strong>KEY</strong></p>
</li>
<li><p>客户端就绪：客户端发送经过<strong>共享密钥KEY</strong>加密过的<strong>finished</strong>信号</p>
</li>
<li><p>服务端就绪：服务端发送经过<strong>共享密钥KEY</strong>加密过的<strong>finished</strong>信号</p>
</li>
<li><p>达成安全通信：握手完成，双方使用<strong>共享密钥KEY</strong>对称加密进行安全通信</p>
</li>
</ul>
<h3 id="HTTP-与-HTTPS对比"><a href="#HTTP-与-HTTPS对比" class="headerlink" title="HTTP 与 HTTPS对比"></a>HTTP 与 HTTPS对比</h3><h4 id="1-HTTPS与HTTP基本区别"><a href="#1-HTTPS与HTTP基本区别" class="headerlink" title="1.HTTPS与HTTP基本区别"></a>1.HTTPS与HTTP基本区别</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110171931223.png!large" alt="img"></p>
<ul>
<li>HTTP 是<strong>超文本传输协议</strong>，信息是明文传输，存在安全风险的问题。HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 <strong>SSL/TLS 安全协议</strong>，使得报文能够加密传输</li>
<li>HTTP 连接建立相对简单， <strong>TCP 三次握手</strong>之后便可进行 HTTP 的报文传输。而 HTTPS 在 <strong>TCP 三次握手</strong>之后，还需进行 <strong>SSL/TLS 的握手过程</strong>，才可进入加密报文传输</li>
<li>HTTP 的端口号是 <strong>80</strong>，HTTPS 的端口号是 <strong>443</strong></li>
<li>HTTPS 协议需要向 CA（证书权威机构）<strong>申请数字证书</strong>，来保证服务器的身份是可信的</li>
</ul>
<h4 id="2-HTTP与HTTPS网络模型"><a href="#2-HTTP与HTTPS网络模型" class="headerlink" title="2.HTTP与HTTPS网络模型"></a>2.HTTP与HTTPS网络模型</h4><h5 id="（1）OSI-七层网络模型"><a href="#（1）OSI-七层网络模型" class="headerlink" title="（1）OSI 七层网络模型"></a>（1）OSI 七层网络模型</h5><img src="https://images2015.cnblogs.com/blog/705728/201604/705728-20160424234824085-667046040.png" alt="img" style="zoom: 80%;">





<h5 id="（2）TCP-IP五层网络模型"><a href="#（2）TCP-IP五层网络模型" class="headerlink" title="（2）TCP/IP五层网络模型"></a>（2）TCP/IP五层网络模型</h5><img src="https://images2015.cnblogs.com/blog/705728/201604/705728-20160424234825491-384470376.png" alt="img" style="zoom:80%;">



<p>TCP/IP网络模型着眼于<strong>传输过程</strong>，于是将应用层，表示层，会话层视为<strong>应用层</strong></p>
<p>也有分为四层的TCP/IP网络模型，将<strong>数据链路层和物理层都表示为网络接口层</strong></p>
<h5 id="（3）OSI七层模型与TCP-IP五层模型对比"><a href="#（3）OSI七层模型与TCP-IP五层模型对比" class="headerlink" title="（3）OSI七层模型与TCP/IP五层模型对比"></a>（3）OSI七层模型与TCP/IP五层模型对比</h5><p>各层设备：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110171945314.png" alt="img"></p>
<p>各层协议：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110171945281.png" alt="img"></p>
<h5 id="（4）HTTP与HTTPS网络模型"><a href="#（4）HTTP与HTTPS网络模型" class="headerlink" title="（4）HTTP与HTTPS网络模型"></a>（4）HTTP与HTTPS网络模型</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110171950558.png" alt="image-20211017195034373"></p>
<h4 id="3-HTTPS相比HTTP的升级"><a href="#3-HTTPS相比HTTP的升级" class="headerlink" title="3.HTTPS相比HTTP的升级"></a>3.HTTPS相比HTTP的升级</h4><img src="https://jzhmcoo1-1258918430.cos.ap-shanghai.myqcloud.com/markdown/20210613103539-https-essence.png" alt="image.png" style="zoom: 50%;">



<h5 id="（1）HTTP的安全风险"><a href="#（1）HTTP的安全风险" class="headerlink" title="（1）HTTP的安全风险"></a>（1）HTTP的安全风险</h5><p>HTTP 由于是明文传输，所以安全上存在以下三个风险：</p>
<ul>
<li><strong>窃听风险</strong>，比如通信链路上可以获取通信内容</li>
<li><strong>篡改风险</strong>，比如强制入垃圾广告，视觉污染</li>
<li><strong>冒充风险</strong>，比如一些仿真的钓鱼网站</li>
</ul>
<h5 id="（2）HTTPS解决方案"><a href="#（2）HTTPS解决方案" class="headerlink" title="（2）HTTPS解决方案"></a>（2）HTTPS解决方案</h5><ul>
<li><strong>混合加密</strong>的方式实现信息的<strong>机密性</strong>，解决了窃听的风险</li>
<li><strong>摘要算法</strong>的方式来实现<strong>完整性</strong>，它能够为数据生成独一无二的<strong>「指纹」</strong>，指纹用于校验数据的完整性，解决了篡改的风险</li>
<li>将服务器公钥放入到<strong>数字证书</strong>中，解决了冒充的风险</li>
</ul>
]]></content>
      <categories>
        <category>开发原理</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>开发原理</tag>
        <tag>深度系列</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>开发原理|TCP可视化实验</title>
    <url>/2021/10/27/DevPrinciple/TCP%E5%8F%AF%E8%A7%86%E5%8C%96%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<img src="https://raw.staticdn.net/Autovy/Image/master/img/202110271342730.webp" alt="I’m going to tell a joke | excel-memes, tcp-memes, udp-memes | ProgrammerHumor.io" style="zoom: 50%;">



<p>TCP好复杂🤧，主要使用了Kali Linux上的一些网络工具来进行分析，希望能直观地解析TCP（备考中，更新缓慢…）</p>
<span id="more"></span>

<p>参考资料：<a href="https://wizardforcel.gitbooks.io/network-basic/content/0.html">网络基本功系列</a></p>
<h4 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h4><h5 id="（1）Kali-Linux虚拟机安装"><a href="#（1）Kali-Linux虚拟机安装" class="headerlink" title="（1）Kali Linux虚拟机安装"></a>（1）Kali Linux虚拟机安装</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110181946991.png" alt="image-20211018194604769"></p>
<p>在<code>Kail Linux</code>的官网下载对应的系统镜像文件：<a href="https://www.kali.org/get-kali/">Get Kali </a>，这里我选择中间这个版本（2021.3-installer-amd64）</p>
<p>具体的虚拟机安装过程这里不赘述，我使用的是<code>VMware Workstation</code>，可以参照这篇文章进行安装：<a href="https://blog.csdn.net/Fengfeng__y/article/details/107376064">Vmware安装Kali Linux2020.2</a></p>
<p>之所以选择<strong>Kali Linux</strong>系统是因为其内置了<strong>Nginx</strong>，<strong>tcpdump</strong>，<strong>Wireshark</strong>这些我们需要用到的实验工具</p>
<h5 id="（2）VM与Hype-V不可共存"><a href="#（2）VM与Hype-V不可共存" class="headerlink" title="（2）VM与Hype-V不可共存"></a>（2）VM与Hype-V不可共存</h5><p>我使用的是VM15.5会与Windows的Hype-V发生冲突，所以需要关闭Hype-V</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110231543739.png" alt="image-20211023154303399"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype off</span><br></pre></td></tr></table></figure>

<p>重启电脑后，VM的虚拟机可以正常运行，但是wsl和docker就寄了</p>
<p>如果需要恢复的话，可以使用下面命令然后重启电脑</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure>



<h5 id="（3）准备客户端和服务端"><a href="#（3）准备客户端和服务端" class="headerlink" title="（3）准备客户端和服务端"></a>（3）准备客户端和服务端</h5><p>参考资料：<a href="https://blog.csdn.net/qq_44657899/article/details/107130729">linux修改ip地址</a></p>
<ul>
<li><p>克隆虚拟机</p>
<p>搭建好一个Kali虚拟机后，通过VM的克隆功能生成另一台虚拟机，为了节省空间可以直接克隆为链接虚拟机</p>
</li>
</ul>
<p>  <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110192052996.png" alt="image-20211019205256464"></p>
<ul>
<li><p>修改网络模式</p>
<p>将两台虚拟机的网络模式设置为NAT模式</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110192056463.png" alt="image-20211019205636065"></p>
</li>
</ul>
<ul>
<li>虚拟网络编辑器修改</li>
</ul>
<p>​    </p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110192058546.png" alt="image-20211019205855124"></p>
<p>​    </p>
<p>​    使用管理员开始修改，并取消“使用本地DHCP服务将IP地址分配给虚拟机”的勾</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110192100641.png" alt="image-20211019210009660"></p>
<ul>
<li><p>查看子网IP和网关IP</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110192104783.png" alt="image-20211019210418389"></p>
</li>
</ul>
<ul>
<li><p>修改客户端和服务端的IP地址</p>
<p>分别进入客户端和服务器打开终端</p>
<p>打开网络配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/network/interfaces</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>  修改客户端配置文件，设定客户端IP为<strong>192.168.234.100</strong></p>
  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">auto eth0</span><br><span class="line"><span class="comment">#静态设置ip</span></span><br><span class="line">iface eth0 inet static	</span><br><span class="line"><span class="comment">#设置ip地址</span></span><br><span class="line">address 192.168.234.100	</span><br><span class="line"><span class="comment">#设置子网掩码</span></span><br><span class="line">netmask 255.255.255.0	</span><br><span class="line"><span class="comment">#设置网关</span></span><br><span class="line">gateway 192.168.234.2		</span><br></pre></td></tr></table></figure>



<p>  修改服务端配置文件，设定服务端IP为<strong>192.168.234.200</strong></p>
  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">auto eth0</span><br><span class="line"><span class="comment">#静态设置ip</span></span><br><span class="line">iface eth0 inet static	</span><br><span class="line"><span class="comment">#设置ip地址</span></span><br><span class="line">address 192.168.234.200	</span><br><span class="line"><span class="comment">#设置子网掩码</span></span><br><span class="line">netmask 255.255.255.0	</span><br><span class="line"><span class="comment">#设置网关</span></span><br><span class="line">gateway 192.168.234.2		</span><br></pre></td></tr></table></figure>



<p>  分别重启网卡</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart networking</span><br></pre></td></tr></table></figure>


<p>  分别查看IP信息</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip addr show</span><br></pre></td></tr></table></figure>

<p>  <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110192244070.png" alt="image-20211019224416761"></p>
<p>  <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110192245918.png" alt="image-20211019224510781"></p>
<h5 id="（4）测试相关服务"><a href="#（4）测试相关服务" class="headerlink" title="（4）测试相关服务"></a>（4）测试相关服务</h5><ul>
<li><p>测试服务端端口占用</p>
<p>检测80端口是否被占用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -i:80</span><br></pre></td></tr></table></figure>

<p>如果被占用了使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure>

<p>关闭对应的进程</p>
</li>
</ul>
<ul>
<li><p>修改服务端nginx配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>在http块中添加server块</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#server块</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">   </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<ul>
<li><p>开启服务端nginx服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure>

<p>默认在<strong>80端口</strong>开启</p>
</li>
</ul>
<ul>
<li><p>查看nginx状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110192303593.png" alt="image-20211019230343549"></p>
</li>
</ul>
<ul>
<li><p>客户端访问服务端IP，即可看到部署在服务端的nginx页面</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110192306180.png" alt="image-20211019230646780"></p>
</li>
</ul>
<h4 id="2-基本工具介绍"><a href="#2-基本工具介绍" class="headerlink" title="2.基本工具介绍"></a>2.基本工具介绍</h4><h5 id="（1）tcpdump"><a href="#（1）tcpdump" class="headerlink" title="（1）tcpdump"></a>（1）tcpdump</h5><p>参考材料：<a href="https://www.eet-china.com/mp/a35364.html">https://www.eet-china.com/mp/a35364.html</a></p>
<p>tcpdump是常用的网络抓包和分析工具，常用于在Linux服务器</p>
<ul>
<li><p>tcp提供了以下<strong>选项</strong></p>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlLzAvMjAyMC9wbmcvNTMxMjY1LzE1OTAwNjY0MzIwNTQtNzYwM2MzNmEtMDdhNC00MzVkLTk0NmYtMWM1MDE0YTk4OWNkLnBuZw?x-oss-process=image/format,png" alt="image.png" style="zoom: 50%;">



</li>
</ul>
<ul>
<li><p>tcp提供了以下<strong>过滤表达式</strong></p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202110200830168.png" alt="image.png" style="zoom:50%;">



</li>
</ul>
<ul>
<li><p>在客户端终端进行测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -i eth0 表示抓取eth1网口的数据包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ip 表示抓取ip协议的数据包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> host 表示主机过滤，抓取对应域名/ip的数据报</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -nn 表示不解析ip地址和端口号的名称</span></span><br><span class="line"></span><br><span class="line">tcpdump -i eth0 ip and host www.baidu.com  -nn</span><br></pre></td></tr></table></figure>

<p>通过curl或者浏览器请求 <a href="http://www.baidu.com">www.baidu.com</a> 即可获得数据包（百度——网络测试的神）</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110200850299.png" alt="image-20211020085021073"></p>
</li>
</ul>
<p>tcpdump只是用来抓取数据包，并不用来分析数据包，所以我们还需要Wireshark工具进行数据包分析</p>
<h5 id="（2）Wireshark"><a href="#（2）Wireshark" class="headerlink" title="（2）Wireshark"></a>（2）Wireshark</h5><ul>
<li><p>先使用tcpdump抓取数据保存为pcap文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -i eth0 ip and host www.baidu.com -c 8 -w baidu.pacp</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>终端开启Wireshark</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Wireshark</span><br></pre></td></tr></table></figure>

<p>注意开启Wireshark后，不要关闭该终端，而是开启新的终端</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110200904635.png" alt="image-20211020090446325"></p>
</li>
</ul>
<ul>
<li><p>Wireshark分析baidu.pacp文件</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110200906800.png" alt="image-20211020090612028"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110200907536.png" alt="img"></p>
</li>
</ul>
<p>当然了Wireshark自身也有抓包功能，但是它有自己的一套过滤方法，我还是采用tcpdump的方法进行抓包操作</p>
<h4 id="3-解密TCP连接"><a href="#3-解密TCP连接" class="headerlink" title="3.解密TCP连接"></a>3.解密TCP连接</h4><h5 id="（1）建立一次连接"><a href="#（1）建立一次连接" class="headerlink" title="（1）建立一次连接"></a>（1）建立一次连接</h5><ul>
<li><p>客户端抓取请求服务端的包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -i any tcp and host 192.168.234.200 and port 80 -w tcp.pcap</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>客户端请求服务端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl 192.168.234.200</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>退出tcpdump抓包</p>
<p>Ctrl+C退出tcpdump抓包</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110201924467.png" alt="image-20211020192429846"></p>
</li>
</ul>
<h5 id="（2）Wireshark分析tcp"><a href="#（2）Wireshark分析tcp" class="headerlink" title="（2）Wireshark分析tcp"></a>（2）Wireshark分析tcp</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110202041879.png" alt="image-20211020204055955"></p>
<ul>
<li><p>一次连接的传输流程</p>
<ol>
<li>最开始的3个包就是<strong>TCP三次握手</strong>建立连接的包</li>
<li>中间是HTTP请求和响应的包</li>
<li>最后的3个包则是<strong>TCP三次挥手</strong>断开连接的包</li>
</ol>
</li>
</ul>
<ul>
<li><p>时序图显示数据包交互</p>
<p>在Wireshark点击统计 -&gt; 流量图，在流量类型选择TCP Flows</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110202051934.png" alt="image-20211020205139464"></p>
</li>
</ul>
<ul>
<li><p>显示真实seq值</p>
<p>事实上上面的序列号seq是相对值，并不是真实值（关于序列号的算法下文会介绍）</p>
<p>在<strong>协议首选项</strong>取消<strong>Relative Seq</strong>即可看到真实值</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110201953144.png" alt="img"></p>
</li>
</ul>
<p>再次查看流量图，可以看到真实的seq值</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110201957208.png" alt="image-20211020195708923"></p>
<h5 id="（3）TCP连接流程分析"><a href="#（3）TCP连接流程分析" class="headerlink" title="（3）TCP连接流程分析"></a>（3）TCP连接流程分析</h5><ul>
<li>TCP连接完整流程</li>
</ul>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202110202003394.jpeg" alt="这里写图片描述" style="zoom: 67%;">



<ul>
<li><p>三次握手</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110202105763.png" alt="image-20211020210505247"></p>
</li>
</ul>
<ul>
<li><p>传输数据</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110202105540.png" alt="image-20211020210523657"></p>
</li>
</ul>
<ul>
<li><p>四次挥手</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110202105988.png" alt="image-20211020210546911"></p>
<p>这里只有三次是因为服务器端收到客户端的 <code>FIN</code> 后，服务器端同时也要关闭连接，这样就可     以把 <code>ACK</code> 和 <code>FIN</code> 合并到一起发送，节省了一个包，变成了“三次挥手”</p>
<p>服务器端收到客户端的 <code>FIN</code> 后，很可能还没发送完数据，所以就会先回复客户端一个      <code>ACK</code> 包，稍等一会儿，完成所有数据包的发送后，才会发送 <code>FIN</code> 包，这也就是四次挥手了</p>
</li>
</ul>
<h4 id="4-TCP连接异常情况分析"><a href="#4-TCP连接异常情况分析" class="headerlink" title="4.TCP连接异常情况分析"></a>4.TCP连接异常情况分析</h4><p>参考资料：</p>
<p><a href="http://blog.51yip.com/linux/1404.html">iptables 添加，删除，查看，修改</a></p>
<p><a href="https://juejin.cn/post/6844904181795389454">TCP三次握手丢包实验记录</a></p>
<h5 id="（1）TCP第一次握手SYN丢包"><a href="#（1）TCP第一次握手SYN丢包" class="headerlink" title="（1）TCP第一次握手SYN丢包"></a>（1）TCP第一次握手SYN丢包</h5><p>向一个不存在的主机地址发起连接即可模拟TCP第一次握手SYN丢包的状况</p>
<ul>
<li><p>开启tcpdump监控47.48.49.50（不存在的地址）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -i any tcp and host 47.48.49.50  and port 80 -w tcp_sys_timeout.pcap</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>发起对47.48.49.50的请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date;curl 47.48.49.50;date</span><br></pre></td></tr></table></figure>

<p><strong>date</strong>显示当前时间用于记录tcp用时</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110210916070.png" alt="image-20211021091606451"></p>
</li>
</ul>
<ul>
<li><p>开启wireshark分析tcp_sys_timeout.pcap</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110231551164.png" alt="image-20211023155134728"></p>
</li>
</ul>
<p>​        </p>
<ul>
<li><p>分析TCP重传过程</p>
<p>当客户端发起TCP第一次握手SYN包，在超时间没有收到ACK就会重传SYN数据包，而且时间会逐渐翻倍，</p>
<img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZciat6yMSZJ2QYWIldpAXY6VA5Y8s7UWYLIjx7TsaNBNX46H5BQSGVBzX8clDJLvz4X5IhEX9O4tNg/640?wx_fmt=png" alt="img" style="zoom:67%;">

</li>
</ul>
<p>kali Liunx这里重传了4次SYN后，服务端就会发送<strong>RST复位报文</strong>给客户端表示终止这个握手过程和这个连接</p>
<ul>
<li><p>相关参数调整</p>
<p>重传的次数与tcp_syn_retries参数有关</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/net/ipv4/tcp_syn_retries</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110231617350.png" alt="image-20211023161746849"></p>
</li>
</ul>
<p>  可以看到kali linux需要重传6次（所以为什么这里只重传了4次？🧐，我也妹开tcp_abort_on_overflow呀，不是队列满的问题吧）</p>
<p>  我们可以调小tcp_syn_retries重新测试</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 2 &gt; /proc/sys/net/ipv4/tcp_syn_retries</span><br></pre></td></tr></table></figure>

<p>  <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110231627059.png" alt="image-20211023162734954"></p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110231632601.png" alt="image-20211023163211916"></p>
<p>可以看到SYN重传了2次</p>
<h5 id="（2）TCP第二次握手SYN、ACK丢包"><a href="#（2）TCP第二次握手SYN、ACK丢包" class="headerlink" title="（2）TCP第二次握手SYN、ACK丢包"></a>（2）TCP第二次握手SYN、ACK丢包</h5><ul>
<li><p>客户端添加防火墙</p>
<p>模拟客户端接收不到服务端的响应，可以在客户端添加防火墙设置，把<code>192.168.234.200</code>服务器ban掉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -s 192.168.234.200 -j DROP</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>可以查看清单</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -L</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110231652438.png" alt="image-20211023165234228"></p>
<ul>
<li><p>客户端开启tcpdump监控192.168.234.200</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -i any tcp and host 192.168.234.200 and port 80 -w tcp_two.pcap</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>发起对192.168.234.200的请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl 192.168.234.200</span><br></pre></td></tr></table></figure>

<p>在这里kali linux就会卡住了，建议直接手动关闭该命令</p>
</li>
</ul>
<ul>
<li><p>wireshark分析数据包</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110231718787.png" alt="image-20211023171847580"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110231720057.png" alt="image-20211023172006864"></p>
<p>​        客户端视角：客户端发起SYN请求后，由于防火墙屏蔽了服务器所有的数据包，所有无法接受到SYN，ACK包，所以和上一种情        况一样要重发SYN包</p>
<p>​            </p>
<p>​        服务器角度：服务端收到客户的SYN包后，就会回SYN、ACK包，但是客户端一直没有回ACK，服务端在超时后，重传了  SYN、        ACK 包，接着一会，客户端超时重传的SYN包又抵达了服务端，服务端收到后，<strong>超时定时器就重新计时</strong>，然后回SYN、ACK包</p>
</li>
</ul>
<p>  ​        当第二次握手的SYN、ACK丢包时，客户端会超时重发SYN包，服务端也会超时重传SYN、ACK包</p>
<ul>
<li><p>相关参数</p>
<p><code>tcp_syn_retries</code>：客户端SYN重传次数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/net/ipv4/tcp_syn_retries</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>  <code>tcp_synack_retries</code>：服务端重传ACK，SYN次数</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/net/ipv4/tcp_synack_retries</span><br></pre></td></tr></table></figure>



<p>  更改次数</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置SYN重传次数为1</span></span><br><span class="line">echo 1 &gt;  /proc/sys/net/ipv4/tcp_syn_retries</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置ACK,SYN重传次数为2</span></span><br><span class="line">echo 2 &gt;  /proc/sys/net/ipv4/tcp_synack_retries</span><br></pre></td></tr></table></figure>



<p>   ​重新抓包分析</p>
<p>  <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110232038388.png" alt="image-20211023203803972"></p>
<ul>
<li><p>移除防火墙规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -D INPUT 1</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="（3）TCP第三次握手ACK丢包"><a href="#（3）TCP第三次握手ACK丢包" class="headerlink" title="（3）TCP第三次握手ACK丢包"></a>（3）TCP第三次握手ACK丢包</h5><ul>
<li><p>服务器添加防火墙屏蔽来自客户端的ACK包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -s 192.168.234.100 -p tcp --tcp-flag ACK ACK -j DROP</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>客户端开启tcpdump监控192.168.234.200</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -i any tcp and host 192.168.234.200 and port 80 -w tcp_ack_timeout.pcap</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>客户端向服务端发起telnet</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">telnet 192.168.234.200</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110232049340.png" alt="image-20211023204935552"></p>
<p>等待很长一段时间客户端的telent才断开连接…..</p>
<p>​    </p>
</li>
<li><p>查看客户端服务端状态</p>
<p>客户端已完成TCP连接建立处于处于 <code>ESTABLISHED</code> 状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -napt | grep 192.168.234.100</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110232112825.png" alt="image-20211023211201535"></p>
</li>
</ul>
<p>  服务器收不到第三次握手的ACK包，所以一开始处于<code>SYN_RECV</code> 状态</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -napt | grep 192.168.234.200</span><br></pre></td></tr></table></figure>

<p>  <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110232117706.png" alt="image-20211023211703628"></p>
<p>  ​    </p>
<p>  过了一段时间后在查询服务端状态，tcp连接就消失了</p>
<p>  <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110232117422.png" alt="image-20211023211752357"></p>
<p>​        而客户端还是处于 <code>ESTABLISHED</code> 状态（在不传输数据的情况下会持续大概两个小时😰）</p>
<ul>
<li><p>在客户端建立的telnet会话，输入字符消息进行发送</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110232121444.png" alt="image-20211023212138121"></p>
</li>
</ul>
<p>  ​    这里要持续很长一段时间客户端telnet才断开连接</p>
<ul>
<li><p>Wireshark分析数据包</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110232128604.png" alt="image-20211023212430427"></p>
</li>
</ul>
<p>​        <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110232128478.png" alt="image-20211023212818747"></p>
<ul>
<li>客户端发送 SYN 包给服务端，服务端收到后，回了个 SYN、ACK 包给客户端，此时服务端的 TCP 连接处于 <code>SYN_RECV</code> 状态；</li>
<li>客户端收到服务端的  SYN、ACK 包后，给服务端回了个 ACK 包，此时客户端的 TCP 连接处于 <code>ESTABLISHED</code> 状态</li>
<li>服务端配置防火墙屏蔽了客户端的ACK包，以服务端会有一段时间处于 <code>SYN_RECV</code> 状态，没有进入  <code>ESTABLISHED</code> 状态</li>
<li>接着，服务端超时重传了 SYN、ACK 包，重传了 5 次后，也就是<strong>超过 tcp_synack_retries 的值，然后就没有继续重传了，此时服务端的 TCP 连接主动中止了，所以刚才处于 SYN_RECV 状态的 TCP 连接断开了</strong>，而客户端依然处于<code>ESTABLISHED</code> 状态</li>
<li>客户端依然处于<code>ESTABLISHED</code> 状态，于是就在客户端的 telnet 会话输入了 123456 字符</li>
<li>由于服务端已经断开连接，<strong>客户端发送的数据报文，一直在超时重传，每一次重传，RTO 的值是指数增长的，所以持续了好长一段时间，客户端的 telnet 才报错退出了，此时会重传了 15 次</strong></li>
</ul>
<ul>
<li><p>相关参数</p>
<p>TCP 建立连接后的数据包传输，客户端发送数据报文最大超时重传次数是由 <code>tcp_retries2</code> 指定，默认值是 15 次</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/net/ipv4/tcp_retries2</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110232136629.png" alt="image-20211023213656516"></p>
<p>按照时间倍增原理重传了15次后终于是结束了</p>
</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110232137394.png" alt="image-20211023213751365"></p>
<p> 如果这种情况下客户端不发送数据，客户端什么时候才会断开处于 ESTABLISHED 状态的连接这里需要提到TCP的<strong>保活机制</strong>，在一个<strong>规定的时间段</strong>（tcp_keepalive_time：保活时间）内，如果没有任何连接相关的活动，TCP 保活机制会开始作用，<strong>每隔一个时间间隔</strong>（tcp_keepalive_intvl：每次检测间隔），发送一个「探测报文」，该探测报文包含的数据非常少，如果<strong>连续几个探测报文</strong>（tcp_keepalive_probes：检测次数）都没有得到响应，则认为当前的 TCP 连接已经死亡，系统内核将错误信息通知给上层应用程序</p>
<p>  相关参数如下：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/net/ipv4/tcp_keepalive_time</span><br><span class="line">cat /proc/sys/net/ipv4/tcp_keepalive_intvl</span><br><span class="line">cat /proc/sys/net/ipv4/tcp_keepalive_probes</span><br></pre></td></tr></table></figure>

<p>  <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110271337578.png" alt="image-20211023214647732">    </p>
<p>按照系统默认的设置来计算在 Linux 系统中，最少需要经过 2 小时 11 分 15 秒才可以发现一个「死亡」连接</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110232154413.png" alt="img"></p>
<h4 id="5-解密TCP快速建立连接"><a href="#5-解密TCP快速建立连接" class="headerlink" title="5.解密TCP快速建立连接"></a>5.解密TCP快速建立连接</h4><p>参考资料：<a href="https://juejin.cn/post/6951378103000268836">tcp fast open分析</a>（里面有详细的实验过程）</p>
<h5 id="（1）普通连接与快速连接的差别"><a href="#（1）普通连接与快速连接的差别" class="headerlink" title="（1）普通连接与快速连接的差别"></a>（1）普通连接与快速连接的差别</h5><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110242022723.png" alt="img" style="zoom:67%;">

<p>RTT即一个数据包往返的时间，所有一个握手过程为0.5RTT（第三次握手是可以携带数据的，所以ACK和HTTP请求一起发送）</p>
<p><strong>普通连接</strong>每次发起HTTP请求都要重新进行上次握手过程，经历的RTT都是一样的</p>
<p><strong>快速连接</strong>第一次建立连接时，第二次握手会产生一个<strong>Cookie</strong>（其中维护着TCP相关信息）发给客户端，客户端就会缓存着这个<strong>Cookie</strong>；下次请求时，客户端在SYN包带上<strong>Cookie</strong>，服务端可以直接通过<strong>Cookie</strong>获得TCP相关信息，从而跳过三次握手的过程</p>
<h5 id="（2）Fast-Open相关参数"><a href="#（2）Fast-Open相关参数" class="headerlink" title="（2）Fast Open相关参数"></a>（2）Fast Open相关参数</h5><p>tcp_fastopn参数可以设置Fast Open的模式：</p>
<ol>
<li>0 关闭</li>
<li>1 作为客户端使用 Fast Open 功能</li>
<li>2 作为服务端使用 Fast Open 功能</li>
<li>3 无论作为客户端还是服务器，都可以使用 Fast Open 功能</li>
</ol>
<p>查看kali linux的tcp_fastopn，可以看到kali已默认开启作为客户端使用 Fast Open 功能</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/net/ipv4/tcp_fastopen</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110242042576.png" alt="image-20211024204230242"></p>
<h5 id="（3）wireshark分析数据包"><a href="#（3）wireshark分析数据包" class="headerlink" title="（3）wireshark分析数据包"></a>（3）wireshark分析数据包</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110242145575.png" alt="img"></p>
<h4 id="6-解密TCP重复确认和快速重传"><a href="#6-解密TCP重复确认和快速重传" class="headerlink" title="6.解密TCP重复确认和快速重传"></a>6.解密TCP重复确认和快速重传</h4><h5 id="（1）TCP乱序数据包处理方式"><a href="#（1）TCP乱序数据包处理方式" class="headerlink" title="（1）TCP乱序数据包处理方式"></a>（1）TCP乱序数据包处理方式</h5><p>​    但接收方收到<strong>乱序数据包</strong>时，会发送<strong>重复的ACK</strong>，以告知发送方要重发该数据包，当发送方收到3个重复ACK时就会触发<strong>快速重传</strong>，立即<strong>重发丢失的数据包</strong></p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110251519335.png" alt="img"></p>
<h5 id="（2）wireshark分析数据包"><a href="#（2）wireshark分析数据包" class="headerlink" title="（2）wireshark分析数据包"></a>（2）wireshark分析数据包</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110251521249.png" alt="img"></p>
<ul>
<li>数据包1期望下一个返回的的数据包seq为1，但是返回的数据包2的seq为10945，说明收到了乱序数据包</li>
<li>数据包3重发seq = 1， ack=1，表明这是重复的ACK</li>
<li>数据包4，6返回的仍然是乱序的数据包，于是5，7还是重发seq = 1， ack=1的重复ACK</li>
<li>当对方收到三次重复的ACK后，快速重传seq=1，len=168的数据包8</li>
<li>当收到重传的数据包后，发现seq=1是期望的数据包，预设发送确认报文ACK</li>
</ul>
<h5 id="（3）相关参数"><a href="#（3）相关参数" class="headerlink" title="（3）相关参数"></a>（3）相关参数</h5><p><strong>tcp_sack</strong>参数可以开启<strong>选择性SACK</strong>，一旦数据包丢失并收到重复ACK，即使在丢失数据包之后还成功接收了其他数据包，也只需要重    传丢失的数据包（简单来说，如果不开启SACK，丢失包之后的每个数据包都要进行重传）</p>
<p>查看kali linux的tcp_sack参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/net/ipv4/tcp_sack</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110251547408.png" alt="image-20211025154717887"></p>
<h4 id="7-解密TCP流量控制"><a href="#7-解密TCP流量控制" class="headerlink" title="7.解密TCP流量控制"></a>7.解密TCP流量控制</h4><h5 id="（1）TCP滑动窗口机制"><a href="#（1）TCP滑动窗口机制" class="headerlink" title="（1）TCP滑动窗口机制"></a>（1）TCP滑动窗口机制</h5><p>​    TCP有两大关键功能：</p>
<p>​    <strong>可靠传输</strong>：保证数据确实到达目的地，如果未到达，能够发现并重传</p>
<p>​    <strong>数据流控</strong>：管理数据的发送速率，以使接收设备不致于过载</p>
<p>​    TCP数据流控的关键是滑动窗口机制，它利用接收方的<strong>接收窗口</strong>控制发送方要发送数据量，发送方的<strong>接收窗口</strong>可以告诉发送方自己TCP    缓冲空间区大小</p>
<p>​    在客户端与服务器的连接中，客户端告知服务器它一次希望从服务器接收多少字节数据，这是客户端的<strong>接收窗口</strong>，即服务器的<strong>发送窗口</strong></p>
<ul>
<li>理想情况下的窗口大小    </li>
</ul>
<p>​    假如应用层很快地从缓冲区读取了数据，那么窗口大小会一直保持不变</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110251617330.png" alt="img"></p>
<p>​    </p>
<ul>
<li>现实情况下的窗口大小</li>
</ul>
<p>现实中服务器会出现繁忙的情况，当应用程序读取速度慢时，那么缓存空间会慢慢被占满，这时服务器会调整<strong>窗口大小</strong>的值，通过ACK    报文通知对方</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110251620324.png" alt="img">    </p>
<h5 id="（2）零窗口通知与窗口探测"><a href="#（2）零窗口通知与窗口探测" class="headerlink" title="（2）零窗口通知与窗口探测"></a>（2）零窗口通知与窗口探测</h5><ul>
<li><strong>零窗口</strong>：当接收方的缓存被占满后，会发送值为0的接收窗口，当发送方接收到<strong>零窗口通知</strong>时，就会停止发送数据</li>
</ul>
<p>  <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110251623436.png" alt="img"></p>
<ul>
<li><p><strong>窗口探测</strong>：发送方接收到<strong>零窗口通知</strong>后，会定时发送<strong>窗口大小探测报文</strong>，以便知道接收方窗口大小变化</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110251630822.png" alt="img"></p>
<p>发送<strong>窗口大小探测报文</strong>的时间间隔与TCP的报文重传机制一样都是<strong>翻倍递增</strong>的</p>
</li>
</ul>
<h5 id="（3）发送窗口的分析"><a href="#（3）发送窗口的分析" class="headerlink" title="（3）发送窗口的分析"></a>（3）发送窗口的分析</h5><p>报文<code>win</code>字段表明的是自己的<strong>接收窗口</strong>，而不是<strong>发送窗口</strong></p>
<p>可以通过查看报文字段：Windos size value 和 Window size scaling factor 确认发送窗口的值，计算公式如下</p>
<p><code>「Window size value」 * 「Window size scaling factor」 = 「Caculated window size 」</code></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110251655116.png" alt="img"></p>
<p><strong>发送窗口</strong>虽然是由<strong>接收窗口</strong>决定的，但是它是可以被网络因素影响的，所以实际上发送窗口的值是<code>min(拥塞窗口, 接收窗口)</code></p>
<p>TCP 有<strong>累计确认机制</strong>，所以当收到多个数据包时，只需要应答<strong>最后一个数据包</strong>的 ACK 报文就可以了</p>
<h4 id="8-TCP减少小报文传输"><a href="#8-TCP减少小报文传输" class="headerlink" title="8.TCP减少小报文传输"></a>8.TCP减少小报文传输</h4><p>当TCP报文承载的数据非常小的时候，整个网络效率就会很低（例如一个报文TCP头部为20字节，IP头部也是20个字节，但数据只有2字节，就相当于用大货车运一个小包裹）</p>
<p>TCP使用两种策略来减少小报文的传输：</p>
<ul>
<li><p>Nagle算法</p>
</li>
<li><p>延迟确认</p>
</li>
</ul>
<h5 id="（1）Nagle算法"><a href="#（1）Nagle算法" class="headerlink" title="（1）Nagle算法"></a>（1）Nagle算法</h5><p>Nagle算法数据发送策略：</p>
<ul>
<li><strong>没有已发送未确认报文</strong>时，立刻发送数据</li>
<li>存在未确认报文时，直到<strong>没有已发送未确认报文</strong>或<strong>数据长度达到MSS大小</strong>，再发送数据</li>
</ul>
<p>如果不满足任意一条，发送方会一直<strong>囤积数据</strong>，直到满足发送条件</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110251730068.png" alt="img"></p>
<ul>
<li>一开始没有<strong>已发送未确认</strong>的报文，H字符就会立即发出</li>
<li>在没有收到对H字符的确认报文时，发送方一直囤积数据，直到收到确认报文，此时就没有已发送未确认的报文，于是就把囤积后的 ELL 字符一起发给了接收方</li>
<li>待收到ELL字符的确认报文后，就把最后一个之后O发出</li>
</ul>
<p>Nagle算法默认是打开的，如果对于一些需要小数据包交互的场景的程序，比如，telnet 或 ssh 这样的交互性比较强的程序，则需要关闭 Nagle 算法</p>
<p>关闭 Nagle 算法没有全局参数，需要根据每个应用自己的特点来关闭，如 Socket可以通过设置 <code>TCP_NODELAY</code> 选项来关闭这个算法</p>
<h5 id="（2）延迟确认"><a href="#（2）延迟确认" class="headerlink" title="（2）延迟确认"></a>（2）延迟确认</h5><p>延迟确认数据发送策略：</p>
<ul>
<li>当有响应数据要发送时，ACK会跟着一起发送给对方</li>
<li>当没有响应数据要发送时，ACK将延迟一段时间，以等待是否有响应数据一起发送</li>
<li>如果在ACK延迟等待发送期间，对方第二个数据报文到达了，这时就立即发送ACK</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110251746044.png" alt="img"></p>
<p>延迟等待的时间在Linux内核中定义的，我们可以通过查看HZ（系统时钟频率）来确认</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110251754102.png" alt="image-20211025175433959"></p>
<p>这里注意不同内核的配置文件名称不同，我的就是<code>config-5.10.0-kali9-amd64</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /boot/config-5.10.0-kali9-amd64 | grep &#x27;CONFIG_HZ=&#x27; </span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110251752591.png" alt="image-20211025175239492"></p>
<p>我的这台机器的HZ=250，所以最大延迟确认时间为50ms，最小延迟确认时间为10ms</p>
<p>关闭延迟确认也没有全局参数，需要根据每个应用自己的特点来关闭，如TCP 延迟确认可以在 Socket 设置 <code>TCP_QUICKACK</code> 选项来关闭这个算法</p>
<h4 id="9-TCP全连接队列"><a href="#9-TCP全连接队列" class="headerlink" title="9.TCP全连接队列"></a>9.TCP全连接队列</h4><p>参考资料：<a href="https://segmentfault.com/a/1190000022792489">TCP 半连接队列和全连接队列满了会发生什么？又该如何应对？</a></p>
<h5 id="（1）TCP半连接队列与全连接队列"><a href="#（1）TCP半连接队列与全连接队列" class="headerlink" title="（1）TCP半连接队列与全连接队列"></a>（1）TCP半连接队列与全连接队列</h5><p>​    在TCP三次握手中，我们如何分辨：哪些连接是半连接，哪些连接是全连接呢？</p>
<p>​    Linux通过维护两个队列来解决问题：</p>
<ul>
<li>半连接队列（SYN队列）</li>
<li>全连接队列（accepet队列）</li>
</ul>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202110261926809.png" alt="img" style="zoom:80%;">



<ul>
<li>服务端收到客户端发起的<strong>SYN</strong>后，内核会将连接存储到<strong>半连接队列</strong></li>
<li>服务端向客户端发送<strong>SYN+ACK</strong></li>
<li>客户端收到<strong>SYN+ACK</strong>后，发送<strong>ACK</strong>到服务端</li>
<li>服务端收到客户端的<strong>ACK</strong>后，内核会把连接从<strong>半连接队列</strong>移除，将其添加到<strong>全连接队列</strong>，等待进程调用<strong>accept函数</strong>时把连接取出来</li>
<li>不管是半连接队列还是全连接队列，都有最大长度限制，超过限制时，内核会直接<strong>丢弃</strong>，或<strong>返回 RST 包</strong></li>
</ul>
<h5 id="（2）全连接队列状态查询"><a href="#（2）全连接队列状态查询" class="headerlink" title="（2）全连接队列状态查询"></a>（2）全连接队列状态查询</h5><p>在服务端（192.168.234.200）查看全连接队列状况</p>
<p>查看<strong>LISTEN 状态</strong>的连接：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -l 显示状态为listen的socket</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -n 不解析服务名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -t 只显示tcp socket</span></span><br><span class="line">ss -lnt</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110261944427.png" alt="image-20211026194430102"></p>
<ul>
<li>Recv-Q：当前<strong>全连接队列的大小</strong>，也就是当前已完成三次握手并等待服务端 <code>accept()</code> 的 TCP 连接个数；</li>
<li>Send-Q：当前<strong>全连接最大队列长度</strong>，上面的输出结果说明监听 80 端口的 TCP 服务进程，<strong>最大全连接长度为 511</strong></li>
</ul>
<p>查看<strong>非 LISTEN 状态</strong>的连接：</p>
<p>先在客户端对服务端发起请求</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">telnet 192.168.234.200 80</span><br></pre></td></tr></table></figure>



<p>这时可以在服务端查看<strong>非 LISTEN 状态</strong>的连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -n 不解析服务名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -t 只显示tcp socket</span></span><br><span class="line">ss -nt</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110261953764.png" alt="image-20211026195348911"></p>
<p>这时<code>Recv-Q/Send-Q</code> 表示的含义与<strong>LISTEN 状态</strong>的不同</p>
<ul>
<li>Recv-Q：已收到但未被应用进程读取的字节数；</li>
<li>Send-Q：已发送但未收到确认的字节数；</li>
</ul>
<h5 id="（3）全连接队列溢出"><a href="#（3）全连接队列溢出" class="headerlink" title="（3）全连接队列溢出"></a>（3）全连接队列溢出</h5><p>本次模拟实验，客户端（192.168.234.100）使用<strong>wrk工具</strong>（HTTP 压测工具，它能够在单机多核 CPU 的条件下，使用系统自带的高性能 I/O 机制，通过多线程和事件模式，对目标机器产生大量的负载）对服务端（192.168.234.100）发起大量请求，以此模拟TCP<strong>全连接队列溢出</strong>的状态</p>
<ul>
<li><p>客户端安装wrk工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install wrk</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>客户端对服务端进行抗压测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -t 6 表示6个线程</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -c 30000 表示3万个连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d 60s 表示持续压测60秒</span></span><br><span class="line">wrk -t 6 -c 30000 -d 60s http://192.168.234.200</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110262014446.png" alt="image-20211026201412323"></p>
</li>
</ul>
<ul>
<li><p>服务端多次执行ss命令查看全连接队列的情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ss -lnt</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110262021751.png" alt="image-20211026202152288"></p>
<p>可以看到TCP全链接队列逐渐上升到<strong>最大全连接长度为511</strong>，当全连接队列为<strong>512</strong>时即为<strong>全连接队列溢出</strong>，<strong>当超过了 TCP 最大全连接队列，服务端则会丢掉后续进来的 TCP 连接</strong>，所以下一个状态<strong>全连接队列</strong>又恢复了<strong>511</strong></p>
</li>
</ul>
<ul>
<li><p>查看被丢弃的连接个数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -s | grep overflowed</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110262031051.png" alt="image-20211026203156762"></p>
</li>
</ul>
<ul>
<li><p>结论</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110262034104.png" alt="全连接队列溢出"></p>
</li>
</ul>
<p>当服务端并发处理大量请求时，如果 TCP 全连接队列过小，就容易溢出。发生 TCP 全连接队溢出的时候，后续的请求就会被丢弃，这样就会出现服务端请求数量上不去的现象</p>
<h5 id="（4）全连接队列溢出策略"><a href="#（4）全连接队列溢出策略" class="headerlink" title="（4）全连接队列溢出策略"></a>（4）全连接队列溢出策略</h5><ul>
<li><p>应对全连接队列溢出有以下两种应对策略：</p>
<ol>
<li>队列满了以后丢弃后续连接（Liunx默认策略）</li>
<li>向客户端发送RST复位报文，告诉客户端连接已经建立失败</li>
</ol>
</li>
</ul>
<ul>
<li><p>查看服务端<code>tcp_abort_on_overflow</code>参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/net/ipv4/tcp_abort_on_overflow</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110262047259.png" alt="image-20211026204705056"></p>
<ol>
<li>tcp_abort_on_overflow为0：如果全连接队列满了，那么 server 扔掉 client 发过来的 ack</li>
<li>如果全连接队列满了，server 发送一个 <code>reset</code> 包给 client，表示废掉这个握手过程和这个连接</li>
</ol>
</li>
</ul>
<ul>
<li><p>将服务端的<code>tcp_abort_on_overflow</code>设为1进行测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/tcp_abort_on_overflow</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>  客户端再次对服务端进行抗压测试</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -t 6 表示6个线程</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -c 30000 表示3万个连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d 60s 表示持续压测60秒</span></span><br><span class="line">wrk -t 6 -c 30000 -d 60s http://192.168.234.200</span><br></pre></td></tr></table></figure>



<p>​    客户端异常中会查看到很多的<code>connection reset by peer</code>错误</p>
<p>通常情况下，应当把 <code>tcp_abort_on_overflow</code> 设置为 0，因为这样更有利于应对突发流量</p>
<h5 id="（5）增大全连接队列"><a href="#（5）增大全连接队列" class="headerlink" title="（5）增大全连接队列"></a>（5）增大全连接队列</h5><p>TCP全连接队列最大值取决于<strong>somaxconn</strong>（Linux内核参数）和<strong>backlog</strong>（Nginx中配置）之间的最小值</p>
<ul>
<li><p>查看服务端<strong>somaxconn</strong>的值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/net/core/somaxconn</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110262132994.png" alt="image-20211026213244511"></p>
</li>
</ul>
<ul>
<li><p>修改<strong>backlog</strong>的默认值</p>
<p>nginx的backlog默认值为511（配置文件可以不写出），现在修改为4000</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>在listen端口后面加上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">backlog=4000</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110262301329.png" alt="image-20211026230115019"></p>
</li>
</ul>
<p>  重启nginx服务</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl reload  nginx</span><br></pre></td></tr></table></figure>



<p>  服务端再次执行ss命令，查看TCP全连接队列大小</p>
<p>  <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110262304069.png" alt="image-20211026230418393"></p>
<ul>
<li><p>再次进行测压</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110262308892.png" alt="image-20211026230850636"></p>
</li>
</ul>
<p>如果看到溢出的次数不再增加，说明TCP全连接队列最大值为4000时可以抗住3万连接的并发请求</p>
<h4 id="10-TCP半连接队列"><a href="#10-TCP半连接队列" class="headerlink" title="10.TCP半连接队列"></a>10.TCP半连接队列</h4><h5 id="（1）查看TCP半连接队列长度"><a href="#（1）查看TCP半连接队列长度" class="headerlink" title="（1）查看TCP半连接队列长度"></a>（1）查看TCP半连接队列长度</h5><p>客户端运行wrk请求服务端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wrk -t 6 -c 30000 -d 60s http://192.168.234.200</span><br></pre></td></tr></table></figure>



<p>服务端运行以下命令查看当前TCP半连接队列长度</p>
<p>（ps：注意要将nginx的backlog调整回默认值，否则半连接队列会处理太快）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -natp | grep SYN_RECV | wc -l</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110270815566.png" alt="image-20211027081537300"></p>
<h5 id="（2）半连接队列溢出"><a href="#（2）半连接队列溢出" class="headerlink" title="（2）半连接队列溢出"></a>（2）半连接队列溢出</h5><p>模拟TCP半连接溢出的场景，实际上就是对服务端一直发送SYN包，但是不回第三次握手ACK，这样会使服务端有大量的处于 <code>SYN_RECV</code> 状态的 TCP 连接（即半连接状态），这也就是所谓的 SYN 洪泛、SYN 攻击、DDos 攻击</p>
<ul>
<li><p>首先要先关闭服务端的<strong>tcp_syncookies</strong>，tcp_syncookies 是Linux缓解 SYN 攻击其中一个手段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 0 &gt;  &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_syncookies</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>客户端使用hping3工具模拟SYN攻击</p>
<p>kali linux已内置安装了hping3无须再次安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -S 指定TCP包的标志位SYN</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 80 指定探测的目的端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---flood 以泛洪的方式攻击</span></span><br><span class="line">hping3 -S -p 80 --flood 192.168.234.200</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>服务端循环查看当前TCP半连接队列大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while true; </span><br><span class="line">do 	</span><br><span class="line">	sleep 0.5; </span><br><span class="line">	echo &quot;当前半连接队列数：&quot;;</span><br><span class="line">    netstat -natp | grep SYN_RECV | wc -l;</span><br><span class="line">    echo &quot; &quot;;</span><br><span class="line">done;</span><br></pre></td></tr></table></figure>





</li>
</ul>
<ul>
<li><p>服务端循环使用 <code>netstat -s</code> 查看半连接队列溢出情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while true; </span><br><span class="line">do 	</span><br><span class="line">	sleep 1; </span><br><span class="line">	echo &quot;半连接队列溢出数&quot;;</span><br><span class="line">    netstat -s | grep &quot;SYNs to LISTEN&quot;;</span><br><span class="line">    echo &quot; &quot;;</span><br><span class="line">done;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110270909570.png" alt="image-20211027090955138"></p>
<p>上面的数值是<strong>累计值</strong>，如果有上升的趋势，说明当前存在半连接队列溢出的现象</p>
</li>
</ul>
<h5 id="（3）增大半连接队列"><a href="#（3）增大半连接队列" class="headerlink" title="（3）增大半连接队列"></a>（3）增大半连接队列</h5><p>半连接队列最大值（max_qlen_log）不是单单由 max_syn_backlog 决定，还跟 somaxconn 和 backlog 有关系</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110271303894.png" alt="img"></p>
<ul>
<li>当 max_syn_backlog &gt; min(somaxconn, backlog) 时， 半连接队列最大值 max_qlen_log = min(somaxconn, backlog) * 2;</li>
<li>当 max_syn_backlog &lt; min(somaxconn, backlog) 时， 半连接队列最大值 max_qlen_log = max_syn_backlog * 2;</li>
<li>即 max_syn_backlog，somaxconn，backlog最小的一个数乘以2为半连接队列最大值</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110271322835.png" alt="image-20211027132147887"></p>
<p>因为nginx的backlog默认为511，所以该系统max_qlen_log的值为256</p>
<p>max_qlen_log 是<strong>理论</strong>半连接队列最大值，并不一定代表服务端处于 SYN_REVC 状态的最大个数</p>
<h5 id="（4）半连接队列溢出策略"><a href="#（4）半连接队列溢出策略" class="headerlink" title="（4）半连接队列溢出策略"></a>（4）半连接队列溢出策略</h5><p>半连接队列溢出有两种应对策略：</p>
<ul>
<li>当syncookies=0时，TCP会丢弃连接</li>
<li>当syncookies=1时，服务端开启 syncookies 功能，其可以在不使用 SYN 半连接队列的情况下成功建立连接（默认配置）</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110271326186.png" alt="img"></p>
<p>syncookies的运行原理：服务器根据当前状态计算出一个值，放在己方发出的 SYN+ACK 报文中发出，当客户端返回 ACK 报文时，取出该值验证，如果合法，就认为连接建立成功</p>
<p>我们可以使用下面的命令查看系统syncookies的值</p>
<p>为了应对SYN攻击，其默认为1（上面的实验我们改为了0）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/net/ipv4/tcp_syncookies</span><br></pre></td></tr></table></figure>



<p>syncookies 参数主要有以下三个值：</p>
<ul>
<li>0 值，表示关闭该功能</li>
<li>1 值，表示仅当 SYN 半连接队列放不下时，再启用它</li>
<li>2 值，表示无条件开启功能</li>
</ul>
<h5 id="（5）SYN攻击应对方法"><a href="#（5）SYN攻击应对方法" class="headerlink" title="（5）SYN攻击应对方法"></a>（5）SYN攻击应对方法</h5><ul>
<li>增大半连接队列</li>
</ul>
<p>要注意需要同时增大<strong>tcp_max_syn_backlog</strong> ，<strong>somaxconn</strong> 和 <strong>backlog</strong>，其中最小值的两倍即为<strong>半连接队列</strong>的最大值，同时somaxconn 和 backlog的最小值为<strong>全连接队列</strong>的最大值</p>
<ul>
<li>开启 tcp_syncookies 功能（一般默认开启）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/tcp_syncookies</span><br></pre></td></tr></table></figure>



<ul>
<li>减少 SYN+ACK 重传次数</li>
</ul>
<p>当服务端受到 SYN 攻击时，就会有大量处于 SYN_REVC 状态的 TCP 连接，处于这个状态的 TCP 会重传 SYN+ACK ，当重传超过次数达到上限后，就会断开连接</p>
<p>所以我们也可以减少SYN+ACK的重传次数，以加快SYN_REVC状态的TCP连接端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置ACK,SYN重传次数为1</span></span><br><span class="line">echo 1 &gt;  /proc/sys/net/ipv4/tcp_synack_retries</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>开发原理</category>
      </categories>
      <tags>
        <tag>开发原理</tag>
        <tag>深度系列</tag>
        <tag>计算机网络</tag>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工具|Git的使用与工作原理</title>
    <url>/2021/11/16/Tool/Git%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122115839.jpeg" alt="img"></p>
<span id="more"></span>

<p>参考文章：</p>
<p><a href="https://zhuanlan.zhihu.com/p/45510461">深入理解Git实现原理 </a></p>
<p><a href="https://jingsam.github.io/2018/06/03/git-objects.html">Git内部原理之Git对象 </a></p>
<p><a href="https://zhuanlan.zhihu.com/p/42929114">Git 误操作救命良方</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程</a></p>
<h3 id="Git基本知识"><a href="#Git基本知识" class="headerlink" title="Git基本知识"></a>Git基本知识</h3><h4 id="1-Git定义"><a href="#1-Git定义" class="headerlink" title="1.Git定义"></a>1.Git定义</h4><p>git的本质就是要实现<strong>对文件变更过程的存储</strong></p>
<p>Git是一种分布式版本控制系统：</p>
<ul>
<li>版本控制：git可以对文件<strong>变更过程</strong>进行管理，随时可以拿出所需要的版本</li>
<li>分布式：Git的数据不仅存在<strong>远程仓库</strong>（即Git平台的服务器），也存在<strong>本地仓库</strong>（即项目开发者的本地计算机），所以称为<strong>分布式</strong></li>
</ul>
<h4 id="2-Git功能列表"><a href="#2-Git功能列表" class="headerlink" title="2.Git功能列表"></a>2.Git功能列表</h4><ul>
<li>我们可以为每一次变更提交版本更新并且备注更新的内容</li>
<li>我们可以在项目的各个历史版本之间自如切换</li>
<li>我们可以一目了然的比较出两个版本之间的差异</li>
<li>我们可以从当前的修改中撤销一些操作</li>
<li>我们可以自如的创建分支、合并分支</li>
<li>我们可以和多人协作开发</li>
<li>我们可以采取自由多样的开发模式</li>
</ul>
<h4 id="3-Git基本术语"><a href="#3-Git基本术语" class="headerlink" title="3.Git基本术语"></a>3.Git基本术语</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122058851.webp" alt="img"></p>
<ul>
<li><p>工作区：在编辑器内可增加或修改文件等位置</p>
</li>
<li><p>缓存区：提交代码，解决冲突的<strong>中转站</strong></p>
</li>
<li><p>版本库：本地<code>.git/</code>目录，内含<strong>缓存区</strong></p>
</li>
<li><p>本地仓库：连接本地代码和远程代码的<strong>枢纽</strong>，在没有联网状态下，本地代码可先提交至该处</p>
</li>
<li><p>远程仓库：托管远程代码的<strong>中央服务器</strong></p>
</li>
</ul>
<h4 id="4-Git托管平台"><a href="#4-Git托管平台" class="headerlink" title="4.Git托管平台"></a>4.Git托管平台</h4><h5 id="（1）Github"><a href="#（1）Github" class="headerlink" title="（1）Github"></a>（1）Github</h5><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111171119482.png" alt="img" style="zoom:50%;">

<p>网址：<a href="https://github.com/">https://github.com/</a></p>
<p>Gihub是全球最流行的代码托管平台，拥有大量非常知名的开源项目。github的服务器部署在国外，国内访问不友好，适合用于学习和开发开源项目</p>
<h5 id="（2）Gitlab"><a href="#（2）Gitlab" class="headerlink" title="（2）Gitlab"></a>（2）Gitlab</h5><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111171119389.png" alt="img" style="zoom:67%;">



<p>网址：<a href="https://about.gitlab.com/">https://about.gitlab.com/</a></p>
<p>Gitlab支持免费搭建私有库，功能强大，对企业级的内部开发友好，较为笨重不适合用于简单项目的搭建</p>
<h5 id="（3）Gitee"><a href="#（3）Gitee" class="headerlink" title="（3）Gitee"></a>（3）Gitee</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122135738.png" alt="logo_gitee_light (1)"></p>
<p>网址：<a href="https://gitee.com/">https://gitee.com/</a></p>
<p>俗称码云，国内知名的在线代码托管平台，基于gitlab</p>
<h5 id="（4）Coding"><a href="#（4）Coding" class="headerlink" title="（4）Coding"></a>（4）Coding</h5><img src="https://assets.codehub.cn/resources/logo2-png.png" alt="img" style="zoom: 150%;">

<p>网址：<a href="https://coding.net/">https://coding.net/</a></p>
<p>Coding 是一个面向开发者的云端开发平台，提供git/svn 代码托管,并且面向个人提供私有库。</p>
<p>对国内小团队开发较为友好，个人比较推荐，下面的一些操作都会基于Coding平台</p>
<h3 id="Git快速入门"><a href="#Git快速入门" class="headerlink" title="Git快速入门"></a>Git快速入门</h3><h4 id="1-Git安装"><a href="#1-Git安装" class="headerlink" title="1.Git安装"></a>1.Git安装</h4><p>git官网地址：<a href="https://git-scm.com/">https://git-scm.com/</a></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122216111.png" alt="image-20200629224316821"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122217579.png" alt="image-20200629224329147"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122217315.png" alt="image-20200629224339198"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122217952.png" alt="image-20200629224349811"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122217176.png" alt="image-20200629224400914"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122217277.png" alt="image-20200629224411947"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122217903.png" alt="image-20200629224425378"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122217019.png" alt="image-20200629224436646"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122217284.png" alt="image-20200629224446392"></p>
<h4 id="2-Git密钥"><a href="#2-Git密钥" class="headerlink" title="2.Git密钥"></a>2.Git密钥</h4><p>本地仓库与远程仓库通过SSH公私钥进行身份确认，</p>
<h5 id="（1）生成公钥"><a href="#（1）生成公钥" class="headerlink" title="（1）生成公钥"></a>（1）生成公钥</h5><p>终端输入命令生成公钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -o</span><br></pre></td></tr></table></figure>

<p>连续三次回车使用默认设置</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122334723.png" alt="image-20211112233436546"></p>
<h5 id="（2）查看公钥"><a href="#（2）查看公钥" class="headerlink" title="（2）查看公钥"></a>（2）查看公钥</h5><p>旁边的id_rsa存的就是私钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat 【公钥保存位置】/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122342467.png" alt="image-20211112234254250"></p>
<h5 id="（3）上传公钥"><a href="#（3）上传公钥" class="headerlink" title="（3）上传公钥"></a>（3）上传公钥</h5><p>打开coding的个人设置页面即可上传公钥</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122349256.png" alt="image-20211112234911836"></p>
<h5 id="（4）Git连接测试"><a href="#（4）Git连接测试" class="headerlink" title="（4）Git连接测试"></a>（4）Git连接测试</h5><p>通过以下命令即可测试ssh连接是否成功（第一次连接需要一个输入yes的步骤）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@e.coding.net</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122355195.png" alt="image-20211112235520804"></p>
<h4 id="3-Git项目创建实战"><a href="#3-Git项目创建实战" class="headerlink" title="3.Git项目创建实战"></a>3.Git项目创建实战</h4><h5 id="（1）Coding上创建项目"><a href="#（1）Coding上创建项目" class="headerlink" title="（1）Coding上创建项目"></a>（1）Coding上创建项目</h5><p>点击创建项目</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111122358086.png" alt="image-20211112235849036"></p>
<p>选择模板2中的代码托管即可</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130004964.png" alt="image-20211113000450682"></p>
<p>填写项目基本信息，即可完成创建</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130008061.png" alt="image-20211113000842644"></p>
<h5 id="（2）创建代码仓库"><a href="#（2）创建代码仓库" class="headerlink" title="（2）创建代码仓库"></a>（2）创建代码仓库</h5><p>在项目下创建代码仓库</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130012170.png" alt="image-20211113001242845"></p>
<p>基本设置如下：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130016365.png" alt="image-20211113001619059"></p>
<h5 id="（3）将项目克隆到本地"><a href="#（3）将项目克隆到本地" class="headerlink" title="（3）将项目克隆到本地"></a>（3）将项目克隆到本地</h5><p>复制仓库的ssh链接，将一个仓库内的代码使用ssh下载到本地</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130019611.png" alt="image-20211113001922314"></p>
<p>电脑上执行git clone命令，将远程仓库克隆为本地仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone 【SSH链接】</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130044923.png" alt="image-20211113004407422"></p>
<p>有时会出现下载时权限不足的情况，但是ssh的连接测试又能成功，这时候可以尝试一下重新提交公钥</p>
<p>进入项目文件夹</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130047475.png" alt="image-20211113004735237"></p>
<p>在git bash下可以看到Test文件有master的符号</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130048748.png" alt="image-20211113004836580"></p>
<h5 id="（4）设置签名"><a href="#（4）设置签名" class="headerlink" title="（4）设置签名"></a>（4）设置签名</h5><p>设置签名以区分不同开发者的身份（与代码托管中心的账号，密码无关）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config user.name &quot;Autovy&quot;</span><br><span class="line">git config user.email &quot;autovys@gmail.com&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130053370.png" alt="image-20211113005344281"></p>
<p>设置完成后，即可在配置文件看到相关信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ./.git/config</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130055517.png" alt="image-20211113005519211"></p>
<h5 id="（5）代码提交流程"><a href="#（5）代码提交流程" class="headerlink" title="（5）代码提交流程"></a>（5）代码提交流程</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130117765.png" alt="img"></p>
<p>修改项目文件</p>
<p>创建一个html文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;test&quot; &gt; index.html</span><br></pre></td></tr></table></figure>



<p>修改md文件</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131044670.png" alt="image-20211113104443895"></p>
<p>将工作区改动内容提交到缓存区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add ./</span><br></pre></td></tr></table></figure>



<p>查看工作区和缓存区状态</p>
<p>可以看到文件改动情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130109179.png" alt="image-20211113010859895"></p>
<p>将缓存区的内容提交到本地仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;v1.1：添加index文件&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130111345.png" alt="image-20211113011106112"></p>
<p>查看历史记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130112029.png" alt="image-20211113011224760"></p>
<p>将本地仓库的内容推送到远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130113789.png" alt="image-20211113011323568"></p>
<p>最后可以看到Coding仓库变化</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130120323.png" alt="image-20211113012003368"></p>
<h3 id="Git高级使用"><a href="#Git高级使用" class="headerlink" title="Git高级使用"></a>Git高级使用</h3><h4 id="1-Git版本管理"><a href="#1-Git版本管理" class="headerlink" title="1.Git版本管理"></a>1.Git版本管理</h4><h5 id="（1）更新1-2为最新版"><a href="#（1）更新1-2为最新版" class="headerlink" title="（1）更新1.2为最新版"></a>（1）更新1.2为最新版</h5><p>重复上面步骤，修改并更新index.html文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim index.html</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130856940.png" alt="image-20211113085631627"></p>
<p>修改md中的版本信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim README.md</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130858725.png" alt="image-20211113085813333"></p>
<p>将1.2版本的代码按步骤提交到本地仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add ./</span><br><span class="line">git commit -m &quot;v1.2：增加index文件标题&quot;</span><br></pre></td></tr></table></figure>

<p>这里先不推送远端仓库，方便后续切换版本</p>
<h5 id="（2）查看日志"><a href="#（2）查看日志" class="headerlink" title="（2）查看日志"></a>（2）查看日志</h5><p>git log 查看提交日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130908924.png" alt="image-20211113090846535"></p>
<p>commit后面一大段的字符串是commit id（版本号），这里<code>HEAD</code>是Git指向当前版本的指针，所以要切换版本就要移动<code>HEAD</code>到指定版本</p>
<h5 id="（3）修改未添加缓冲区"><a href="#（3）修改未添加缓冲区" class="headerlink" title="（3）修改未添加缓冲区"></a>（3）修改未添加缓冲区</h5><p>修改index.html文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim index.html</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131239773.png" alt="image-20211113123920560"></p>
<p>在对文件使用<code>add ./</code>将项目添加缓存区之前，我反悔了，决定丢弃工作区的修改</p>
<p>查看当前状态,可以看到提示使用<code>git restore</code>丢弃修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131243158.png" alt="image-20211113124311037"></p>
<p>丢弃修改工作区的修改，文件恢复到最近一次<code>git commit</code>或<code>git add</code>时的状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git restore ./</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131245744.png" alt="image-20211113124505502"></p>
<h5 id="（4）修改添加到缓存区"><a href="#（4）修改添加到缓存区" class="headerlink" title="（4）修改添加到缓存区"></a>（4）修改添加到缓存区</h5><p>修改index.html文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim index.html</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131239773.png" alt="image-20211113123920560"></p>
<p>添加修改到缓冲区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">add ./</span><br></pre></td></tr></table></figure>



<p>查看当前状态,可以看到提示使用<code>git restore --staged</code>丢弃缓存内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131253728.png" alt="image-20211113125325665"></p>
<p>丢弃缓存内容后，再按上一种情况的流程恢复工作区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git restore --staged ./</span><br><span class="line">git status</span><br><span class="line">git restore ./</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131257426.png" alt="image-20211113125708241"></p>
<h5 id="（5）修改提交到本地仓库"><a href="#（5）修改提交到本地仓库" class="headerlink" title="（5）修改提交到本地仓库"></a>（5）修改提交到本地仓库</h5><p>将版本回退到上一个版本即1.1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130918240.png" alt="image-20211113091804033"></p>
<p>这时本地仓库就回退到了1.1版本</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130921002.png" alt="image-20211113092137541"></p>
<p>这时候查看git log，可以发现1.2的提交记录就移除</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131027386.png" alt="image-20211113102703410"></p>
<p>如果又需要回到1.2版本</p>
<p>先通过<code>git reflog</code>查看历史命令，可以找到1.2版本的id</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131029910.png" alt="image-20211113102934666"></p>
<p>同样可以使用git reset切换版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard 【commit id】</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131034955.png" alt="image-20211113103418305"></p>
<p>这里的commit id不用填完整，填到后面的字母部分</p>
<p>这时本地仓库又切回了1.2</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131035167.png" alt="image-20211113103512977"></p>
<p>【注意】</p>
<p>如果已经将最新的代码推送过远端仓库（即远端仓库有最新的版本，要保持本地和远端的资源一致），会报以下错误、</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131037463.png" alt="image-20211113103733311"></p>
<h5 id="（6）修改推送到远程仓库"><a href="#（6）修改推送到远程仓库" class="headerlink" title="（6）修改推送到远程仓库"></a>（6）修改推送到远程仓库</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git revert HEAD --edit //并修改提交信息</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130958874.png" alt="image-20211113095811776"></p>
<p>这时后查看记录git log，可以看到撤销的操作也被记录其中</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111130958447.png" alt="image-20211113095828085"></p>
<p>这时本地仓库就是回退到了版本1.1</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131003562.png" alt="image-20211113100356269"></p>
<p>直接推送到远程仓库，远程仓库也回退到1.1版本</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131006709.png" alt="image-20211113100641582"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131008429.png" alt="image-20211113100811889"></p>
<p>如果提交了1.1版本后，又需要回到1.2版本，这时候只要撤销掉对1.2的撤销即可</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131017882.png" alt="image-20211113101733694"></p>
<p>再git push推送到远程仓库即可</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131020252.png" alt="image-20211113102000137"></p>
<h5 id="（7）总结"><a href="#（7）总结" class="headerlink" title="（7）总结"></a>（7）总结</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131304234.webp" alt="img"></p>
<ul>
<li>工作区修改后：<code>git restore ./</code>恢复工作区</li>
<li><code>git add ./</code>添加到缓冲区后：<code>git restore --staged ./</code> 恢复缓存区</li>
<li><code>git commit</code>提交到本地仓库后：<code>git reset --hard HEAD^</code>恢复上个版本到缓存区</li>
<li><code>git push</code>推送到远程仓库后：<code>git revert HEAD --edit</code>撤销上一个推送操作，并恢复到缓存区</li>
</ul>
<h4 id="2-Git分支管理"><a href="#2-Git分支管理" class="headerlink" title="2.Git分支管理"></a>2.Git分支管理</h4><h5 id="（1）分支解决的问题"><a href="#（1）分支解决的问题" class="headerlink" title="（1）分支解决的问题"></a>（1）分支解决的问题</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131648459.png" alt="image-20200728190230431"></p>
<p>同时并行推进多个功能开发，提高开发效率</p>
<p>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可</p>
<p>最后再将分支合并到master上</p>
<p>分支：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131704793.png" alt="git-br-dev-fd"></p>
<p>分支的合并（默认快速模式）：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131704428.png" alt="git-br-ff-merge"></p>
<p>分支的合并（普通模式）：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131923880.png" alt="git-no-ff-mode"></p>
<h5 id="（2）分支基本操作"><a href="#（2）分支基本操作" class="headerlink" title="（2）分支基本操作"></a>（2）分支基本操作</h5><p>创建dev分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch dev</span><br></pre></td></tr></table></figure>

<p><code>git checkout -b dev</code>可以创建并切换到dev分支</p>
<p>查看当前分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131739936.png" alt="image-20211113173909862"></p>
<p>可以看到dev分支已经创建成功了，而当前位于master分支</p>
<p>切换到dev分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git switch dev</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131741071.png" alt="image-20211113174105689"></p>
<p>修改文件内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim README.md</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131743765.png" alt="image-20211113174328787"></p>
<p>将最新修改的内容提交到dev分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add ./</span><br><span class="line">git commit -m &quot;dev new test&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131744195.png" alt="image-20211113174453991"></p>
<p>切换回master分支，并查看文件内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git switch master</span><br><span class="line">cat README.md</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131747443.png" alt="image-20211113174734151"></p>
<p>可以看到主分支上没有dev的内容</p>
<p>合并分支</p>
<p>在master分支上合并dev</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131907625.png" alt="image-20211113190746514"></p>
<p>可以看到在dev上的修改在master上生效了</p>
<h5 id="（3）分支合并冲突问题"><a href="#（3）分支合并冲突问题" class="headerlink" title="（3）分支合并冲突问题"></a>（3）分支合并冲突问题</h5><p>前面的情况中，dev是在master基础上的，合并前master并没有修改，如果master再合并前与dev修改了同一行的内容就会出现冲突</p>
<p>先撤销一下合并</p>
<p>查看命令记录，可以看到合并记录中合并的方式是快速模式（即直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131917856.png" alt="image-20211113191710611"></p>
<p>撤销合并（未推送）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131928808.png" alt="image-20211113192813592"></p>
<p>修改master内容，并提交到本地仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim README.md</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131936127.png" alt="image-20211113193624097"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add ./</span><br><span class="line">git commit -m &quot;master new test&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131933331.png" alt="image-20211113193330217"></p>
<p>再次合并dev分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure>

<p>这时就会出现合并冲突的问题</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131937333.png" alt="image-20211113193742100"></p>
<p>解决冲突</p>
<p>编辑README.md文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim README.md</span><br></pre></td></tr></table></figure>

<p>删除特殊符号，修改内容</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131948656.png" alt="image-20211113194812446"></p>
<p>然后正常提交到master分支即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add ./</span><br><span class="line">git commit -m &quot;master+dev&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131950140.png" alt="image-20211113195019152"></p>
<p>一般来说不会再本地仓库库对分支进行合并，而是在远程的代码平台进行分支的合并</p>
<p>推送内容到master</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push </span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131954980.png" alt="image-20211113195444076"></p>
<p>由于远程仓库还没有创建dev分支，所以推送时要创建分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push --set-upstream origin dev</span><br></pre></td></tr></table></figure>



<p>这时即可在Coding上看到两个分支了</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111131959633.png" alt="image-20211113195934598"></p>
<p>代码平台上也可以合并分支，当如果有冲突就无法合并</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111132004299.png" alt="image-20211113200419162"></p>
<h5 id="（3）分支中的多人协作"><a href="#（3）分支中的多人协作" class="headerlink" title="（3）分支中的多人协作"></a>（3）分支中的多人协作</h5><p>准备wsl模拟另一台电脑，一个新的coding账号，新的coding账号提交wsl中的ssh，然后使用两个浏览器登录分别登录两个账号</p>
<p>将第二个账号（二号机）邀请到主账号的团队中</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111132151963.png" alt="image-20211113215154747"></p>
<p>将二号机拉入项目中</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111132153673.png" alt="image-20211113215314621"></p>
<p>二号机wsl看到项目后克隆项目到本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@e.coding.net:autovys/demo/Test.git</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111132157453.png" alt="image-20211113215727175"></p>
<p>进入目录后查看分支，可以发现只能看到master分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111132201201.png" alt="image-20211113220115181"></p>
<p>二号机要在dev基础上进行开发，就要创建远程<code>origin</code>的<code>dev</code>分支到本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111132204477.png" alt="image-20211113220445123"></p>
<p>二号机在dev基础上修改了文件内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim README.md</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111132210496.png" alt="image-20211113221049407"></p>
<p>并且二号机还推送到了远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add ./</span><br><span class="line">git commit -m&quot;edit something&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111132214127.png" alt="image-20211113221447824"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111132216488.png" alt="image-20211113221631576"></p>
<p>这时一号机也要对同样的文件修改一些内容，并尝试推送到dev分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git switch dev</span><br><span class="line">vim README.md</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111132236484.png" alt="image-20211113223622153"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add ./</span><br><span class="line">git commit -m &quot;add someting&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111132238492.png" alt="image-20211113223826310"></p>
<p>可以发现远程推送失败了，因为二号机的最新提交和我推送的提交有冲突</p>
<p>这时就需要先<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111132242133.png" alt="image-20211113224245383"></p>
<p>这时候解决的方法和分支管理中的解决冲突完全一样</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111132245482.png" alt="image-20211113224352026"></p>
<p>编辑README.md文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim README.md</span><br></pre></td></tr></table></figure>

<p>删除特殊符号，修改内容</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111132246382.png" alt></p>
<p>然后正常提交到dev分支即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add ./</span><br><span class="line">git commit -m &quot;dev lastest&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111132248140.png" alt="image-20211113224806916"></p>
<h3 id="IDEA中的Git"><a href="#IDEA中的Git" class="headerlink" title="IDEA中的Git"></a>IDEA中的Git</h3><h4 id="1-基本代码提交流程"><a href="#1-基本代码提交流程" class="headerlink" title="1.基本代码提交流程"></a>1.基本代码提交流程</h4><h5 id="（1）创建空项目"><a href="#（1）创建空项目" class="headerlink" title="（1）创建空项目"></a>（1）创建空项目</h5><p>在Coding上创建新的空的代码仓库</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151520287.png" alt="image-20211115152050857"></p>
<p>idea克隆项目到本地</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151538447.png" alt="image-20211115153822099"></p>
<p>填写远程仓库的SSH地址和下载的本地位置完成下载</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151539643.png" alt="image-20211115153943646"></p>
<h5 id="（2）IDEA打开项目文件"><a href="#（2）IDEA打开项目文件" class="headerlink" title="（2）IDEA打开项目文件"></a>（2）IDEA打开项目文件</h5><p>IDEA打开项目文件后，可以看到IDEA自动识别了git，出现了以下的一些工具</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151525037.png" alt="image-20211115152526919"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151525272.png" alt="image-20211115152549962"></p>
<h5 id="（3）代码提交流程"><a href="#（3）代码提交流程" class="headerlink" title="（3）代码提交流程"></a>（3）代码提交流程</h5><p>修改README.md文件如下，即在工作区改动了代码</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151547945.png" alt="image-20211115154732860"></p>
<p>将代码添加到缓冲区（<strong>git add ./</strong>），这一步可以省略，直接提交idea会帮你做这一步操作</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151552952.png" alt="image-20211115155242753"></p>
<p>提交代码到本地仓库，注意填写提交信息（<code>git commit -m &quot;message&quot;</code>）</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202111171119189.png" alt="image-20211115155909225" style="zoom:67%;">





<p>最后推送到远程仓库，即完成一次代码提交（<code>git push</code>）</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202111171120093.png" alt="image-20211115160154599" style="zoom:67%;">





<p>关于提交的一些信息我们都可以在git工具栏的控制台进行查看，可以看到git工具的控制台帮我们输入的命令内容</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151604019.png" alt="image-20211115160454918"></p>
<h4 id="2-Git版本管理"><a href="#2-Git版本管理" class="headerlink" title="2.Git版本管理"></a>2.Git版本管理</h4><h5 id="（1）更新版本到1-2"><a href="#（1）更新版本到1-2" class="headerlink" title="（1）更新版本到1.2"></a>（1）更新版本到1.2</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151607155.png" alt="image-20211115160753928"></p>
<h5 id="（2）查看提交日志"><a href="#（2）查看提交日志" class="headerlink" title="（2）查看提交日志"></a>（2）查看提交日志</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151609447.png" alt="image-20211115160933261"></p>
<p>可以看到idea使用git不需要设置签名，而是默认使用了远程仓库平台的注册信息</p>
<h5 id="（3）修改未添加缓冲区-1"><a href="#（3）修改未添加缓冲区-1" class="headerlink" title="（3）修改未添加缓冲区"></a>（3）修改未添加缓冲区</h5><p>代码未添加到缓冲区，需要恢复工作区的内容（简单呀，疯狂ctrl + Z 😎）</p>
<p>可以使用回滚，即可恢复到最近一次<code>git commit</code>或<code>git add</code>时的状态</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151615806.png" alt="image-20211115161519696"></p>
<h5 id="（4）修改添加到缓存区-1"><a href="#（4）修改添加到缓存区-1" class="headerlink" title="（4）修改添加到缓存区"></a>（4）修改添加到缓存区</h5><p>版本1.2已经添加到了缓存区，同样可以通过上面的方法恢复工作区</p>
<h5 id="（5）修改提交到本地仓库-1"><a href="#（5）修改提交到本地仓库-1" class="headerlink" title="（5）修改提交到本地仓库"></a>（5）修改提交到本地仓库</h5><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111171120642.png" alt="image-20211115162500521" style="zoom:67%;">



<p>这时候可以看到回滚的按钮变灰了，这时我们可以打开git工具区对master分支进行操作，idea提供了三种还原的方法，都可以让我们恢复1.1版本</p>
<p>还原提交，是多加一步撤销的操作，恢复内容到本地仓库，可以直接提交</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151635193.png" alt="image-20211115163502070"></p>
<p>撤销提交，是让1.2版本恢复到缓存区，这时候可以通过回滚恢复到1.1版本</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151638218.png" alt="image-20211115163801094"></p>
<p>删除提交，直接恢复1.1版本到工作区</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151642751.png" alt="image-20211115164217388"></p>
<p>所以推荐使用<strong>还原提交</strong>，如果要丢弃的版本就使用<strong>删除提交</strong>，否则idea无法恢复已<strong>撤销</strong>或<strong>删除</strong>的提交（命令行可以恢复）</p>
<h5 id="（6）修改推送到远程仓库-1"><a href="#（6）修改推送到远程仓库-1" class="headerlink" title="（6）修改推送到远程仓库"></a>（6）修改推送到远程仓库</h5><p>推送到远程仓库后，我们可以看到我们只剩下还原提交可以使用了，效果和上面的一样</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151654101.png" alt="image-20211115165440862"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111151655427.png" alt="image-20211115165553230"></p>
<p>idea还提供了将<strong>当前分支重置到此处</strong>的功能，其相当于进行多次的<strong>删除提交</strong>操作。在修改已提交到本地仓库的情况下，可以开始回溯到选择的版本；在修改已推送到远程的情况下可能会造成<strong>冲突</strong>问题，所以该功能慎重使用</p>
<p>​    <img src="https://raw.staticdn.net/Autovy/Image/master/img/202111171119727.png" alt="image-20211115172549467">)<img src="https://raw.staticdn.net/Autovy/Image/master/img/202111171119566.png" alt="image-20211115173345841"></p>
<h5 id="（7）还原提交的问题"><a href="#（7）还原提交的问题" class="headerlink" title="（7）还原提交的问题"></a>（7）还原提交的问题</h5><p>还原提交也可以还原更远的版本，但是会出现冲突问题，</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152003466.png" alt="image-20211115200310949"></p>
<p>接收他们的则回滚到对应版本，合并则解决两个修改的冲突</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111171119845.png" alt="image-20211115200355899"></p>
<p>合并的页面如下，点击箭头即可自动修改冲突点</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152005861.png" alt="image-20211115200459979"></p>
<h4 id="3-Git分支管理"><a href="#3-Git分支管理" class="headerlink" title="3.Git分支管理"></a>3.Git分支管理</h4><h5 id="（1）分支基本操作"><a href="#（1）分支基本操作" class="headerlink" title="（1）分支基本操作"></a>（1）分支基本操作</h5><p>创建分支dev</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152012354.png" alt="image-20211115201204089"></p>
<p>git工作区右键选择分支<strong>签出</strong>（checkout,什么铸币翻译）即可切换分支，注意记得先切换好分支再对提交的路径图进行操作，否则它提交的到的是当前的分支，即便是在另一条分支上做的操作</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152025323.png" alt="image-20211115202549168"></p>
<p>这里在dev上操作的还原提交会被提交给master，所以要记得切换分支（这算不算一个小bug呢？），另外要删除一个分支时也要先切换到其他分支</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202111171120317.png" alt="image-20211115203232293" style="zoom:67%;">



<p>修改文件提交到dev</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152014852.png" alt="image-20211115201418871"></p>
<p>直接选择推送，远程仓库就可以发现dev分支被创建好了</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152156328.png" alt="image-20211115215649882"></p>
<p>合并master和dev分支，当前选择的是master分支，所以选择将<strong>当前合并到已选择</strong>（渣翻ks8）即为将dev合并到master</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152143774.png" alt="image-20211115214311537"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152145633.png" alt="image-20211115214548426"></p>
<h5 id="（2）分支合并冲突问题"><a href="#（2）分支合并冲突问题" class="headerlink" title="（2）分支合并冲突问题"></a>（2）分支合并冲突问题</h5><p>先删除合并的提交恢复master，修改master的文件并提交</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152148111.png" alt="image-20211115214855710"></p>
<p>这时候合并就会出现合并冲突现象</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152151512.png" alt="image-20211115215121774"></p>
<p>前面两个是对master修改的内容与dev修改的内容做一个选择，选择合并则需要手动修改解决冲突</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152153800.png" alt="image-20211115215351531"></p>
<p>点击箭头即可合并修改</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152154978.png" alt="image-20211115215421974"></p>
<h5 id="（3）分支中的多人协作-1"><a href="#（3）分支中的多人协作-1" class="headerlink" title="（3）分支中的多人协作"></a>（3）分支中的多人协作</h5><p>推送上面修改的master分支和dev分支，然后删除本地项目文件（即删除了本地仓库），进行一次remake</p>
<p>重新使用idea克隆项目到本地，可以看到本地只拉取了master分支</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152204429.png" alt="image-20211115220444280"></p>
<p>这时候就需要右键点击远程的分支，新建dev分支到本地</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152207194.png" alt="image-20211115220650353"></p>
<p>在Coding平台上改动dev分支的文件，模拟另一个开发人员在协同开发的情况下修改了文件</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152210219.png" alt="image-20211115221009031"></p>
<p>这时候我们在本地也修改了dev分支文件并推送</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152212003.png" alt="image-20211115221205796"></p>
<p>这时候idea会有弹窗提醒<strong>推送被拒绝</strong>，并在控制台提醒你用<code>git pull</code></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152213026.png" alt="image-20211115221318639"></p>
<p>idea是有git pull 这个按钮的</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152216055.png" alt="image-20211115221609871"></p>
<p>但是点击更新到dev时，会提示你本地的dev没有追踪远程的分支</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152217453.png" alt="image-20211115221717207"></p>
<p>点击提示选择上游分支同步远程的dev分支即可</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152218528.png" alt="image-20211115221849343"></p>
<p>如果其他开发者新的更新和我更新的有冲突，这时候就是我们熟悉的冲突页面啦</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111152219333.png" alt="image-20211115221925143"></p>
<p>解决冲突后我们就可以推送最新版到远程仓库了，这样的机制保证了git协同开发的可能性</p>
<h3 id="Git原理"><a href="#Git原理" class="headerlink" title="Git原理"></a>Git原理</h3><p><strong>Git本质是一个内容寻址的文件系统，其次才是一个版本控制系统</strong></p>
<p>每次我们运行 <code>git add</code> 和 <code>git commit</code> 命令时， Git 所做的实质工作是将被改写的文件保存为<strong>数据对象</strong>，更新暂存区，记录<strong>树对象</strong>，最后创建一个指明了顶层树对象和父提交的<strong>提交对象</strong></p>
<p>Git的核心是它的对象数据库（<strong>.git/objects</strong>文件），其中保存着git的对象：</p>
<ul>
<li><strong>blob对象</strong>：实现了对文件内容的记录</li>
<li><strong>tree对象</strong>：实现了对文件名、文件目录结构的记录</li>
<li><strong>commit对象</strong>：实现了对版本提交时间、版本作者、版本序列、版本说明等附加信息的记录</li>
</ul>
<h4 id="1-Git数据库"><a href="#1-Git数据库" class="headerlink" title="1.Git数据库"></a>1.Git数据库</h4><h5 id="（1）Git文件结构"><a href="#（1）Git文件结构" class="headerlink" title="（1）Git文件结构"></a>（1）Git文件结构</h5><p>新建文件夹并将其初始化为一个空的git仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir Test</span><br><span class="line">git init Test</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111161632587.png" alt="image-20211116163217085"></p>
<p>进入git文件使用以下命令查看git仓库的文件结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd Test/.git</span><br><span class="line">tree/F</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111161634477.png" alt="image-20211116163406004"></p>
<ul>
<li><strong>config</strong>是git基本配置文件</li>
<li><strong>description</strong>是GitWeb专用的文件</li>
<li><strong>info</strong>文件夹是全局性排除文件（与.gitignore互补）</li>
<li><strong>hooks</strong>存放钩子脚本</li>
<li><strong>HEAD</strong>记录当前checkout的分支</li>
<li><strong>refs</strong>提交对象的指针</li>
<li><strong>objects</strong>存放所有数据，这就是我们要找的数据库了</li>
</ul>
<h5 id="（2）Git数据库写入操作"><a href="#（2）Git数据库写入操作" class="headerlink" title="（2）Git数据库写入操作"></a>（2）Git数据库写入操作</h5><p>Git会根据文件内容计算出一个hash值，以hash值作为文件索引存储在Git文件系统中</p>
<p><code>git hash-object</code>可以用来计算文件内容的hash值，并将生成的数据对象存储到Git文件系统中</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111161933764.png" alt="image-20211116193321631"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;version 1&quot; | git hash-object -w --stdin</span><br></pre></td></tr></table></figure>



<p><code>-w</code>表示将数据对象写入到Git文件系统中，<code>--stdin</code>表示从标准输入中获取文件内容</p>
<p>命令执行完成后返回一个哈希值，它就是git数据库中的<strong>键值（key）</strong>，通过键值我们可以再次检索到插入数据库的内容<strong>（value）</strong>，实际上git数据库就是一个简单的<strong>键值对</strong>数据库</p>
<p>查看object文件，可以看到新生成的文件，这个文件存储以新存入数据<strong>对应hash值前2位</strong>命名的文件夹内</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111161934272.png" alt="image-20211116193416942"></p>
<h5 id="（3）Git数据库查询操作"><a href="#（3）Git数据库查询操作" class="headerlink" title="（3）Git数据库查询操作"></a>（3）Git数据库查询操作</h5><p>既然我们拿到了键值，那肯定可以查询到其对应的内容，复制hash值进行查询</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git cat-file -t d73e3875a8db6b402e2ce905c4a2222603c1f090</span><br><span class="line"></span><br><span class="line">git cat-file -p d73e3875a8db6b402e2ce905c4a2222603c1f090</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111161935233.png" alt="image-20211116193551166"></p>
<p><code>-p</code>表示查看Git对象的内容，<code>-t</code>表示查看Git对象的类型</p>
<p>blob对象是git数据库中的<strong>数据对象</strong>，此外数据库中还有<strong>树对象</strong>（tree）和<strong>提交对象</strong>（commit）</p>
<h4 id="4-使用Git跟踪文件变更"><a href="#4-使用Git跟踪文件变更" class="headerlink" title="4.使用Git跟踪文件变更"></a>4.使用Git跟踪文件变更</h4><p>接下来我们将模拟一次文件变更过程，看看git的对象数据库能不能实现“跟踪文件变更”的功能</p>
<h5 id="（1）创建文件"><a href="#（1）创建文件" class="headerlink" title="（1）创建文件"></a>（1）创建文件</h5><p>创建一个txt文件写入内容“v1.1”，并写入到git数据库中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;version 1&quot; &gt; file.txt</span><br><span class="line">git hash-object -w file.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111161937621.png" alt="image-20211116193749552"></p>
<h5 id="（2）修改文件"><a href="#（2）修改文件" class="headerlink" title="（2）修改文件"></a>（2）修改文件</h5><p>修改file.txt的内容，并再次提交到git数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;version 2&quot; &gt; file.txt</span><br><span class="line">git hash-object -w file.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111161938803.png" alt="image-20211116193813071"></p>
<p>可以看到这次的hash值已经发生改变了，而objetcs内会多出一个文件</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111161938498.png" alt="image-20211116193846013"></p>
<p>查询它们对应的内容如下</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111161939714.png" alt="image-20211116193930700"></p>
<p>说明我们对同一个文件修改后的内容也会经过git数据库的哈希处理再数据库生成新的数据对象，以此记录文件的不同版本</p>
<h5 id="（3）恢复文件"><a href="#（3）恢复文件" class="headerlink" title="（3）恢复文件"></a>（3）恢复文件</h5><p>所以我们想要把文件恢复到文件修改前版本，只需要在数据库取回即可，这就是<strong>git版本回滚的实质</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file.txt</span><br><span class="line">git cat-file -p 83baa &gt; file.txt</span><br><span class="line">cat file.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111161945593.png" alt="image-20211116194508507"></p>
<p>数据对象只是解决了文件内容存储的问题，而文件名的存储则需要通过树对象来解决</p>
<h4 id="5-Git的树对象"><a href="#5-Git的树对象" class="headerlink" title="5.Git的树对象"></a>5.Git的树对象</h4><p>Git通过树对象（tree）将数据（blob）对象组织起来——其类型于一种文件系统：blob对应文件内容，tree对象对应的目录和节点</p>
<p>有了数对象，我们就可以将文件系统任何时间点的状态保存在git数据库中</p>
<h5 id="（1）创建树对象（文件已提交数据库）"><a href="#（1）创建树对象（文件已提交数据库）" class="headerlink" title="（1）创建树对象（文件已提交数据库）"></a>（1）创建树对象（文件已提交数据库）</h5><p>Git根据某一个<strong>暂存区</strong>所表示的状态记录一个对应的树对象，git的暂存区是一个文件：<code>.git/index</code></p>
<p>这里要注意将file文件放在<code>.git</code>文件外，否则无法创建暂存区（上面的操作我都把file.txt放在了.git内🤧）,大概错误如下</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162013837.png" alt="image-20211116201312604"></p>
<p>创建暂存区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git update-index --add file.txt</span><br><span class="line">cat .git\index</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162016844.png" alt="image-20211116201640442"></p>
<p>查看<strong>暂存区</strong>的内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git ls-files --stage</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162019086.png" alt="image-20211116201945864"></p>
<p>将<strong>暂存区</strong>的内容写入一个树对象</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git write-tree</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162023263.png" alt="image-20211116202313249"></p>
<p>这时候再查看git数据库，树对象也被存入git数据库内了</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162024659.png" alt="image-20211116202420483"></p>
<p>再查看该记录存储的内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git cat-file -t 79335</span><br><span class="line">git cat-file -p 79335</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162026758.png" alt="image-20211116202635361"></p>
<p>可以看到树对象中存储着<strong>文件名</strong>与<strong>文件内容对应的哈希值</strong>等</p>
<h5 id="（2）创建对象（文件未提交数据库）"><a href="#（2）创建对象（文件未提交数据库）" class="headerlink" title="（2）创建对象（文件未提交数据库）"></a>（2）创建对象（文件未提交数据库）</h5><p>上面我们是添加一个已经存在再git数据库的文件到暂存区，如果我们新建一个未曾保存到git数据库的文件到暂存区，进而保存为tree对象</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162053546.png" alt="image-20211116205331283"></p>
<ul>
<li>我们会发现新文件提交到暂存区后也会自动添加到数据库</li>
<li>添加文件到暂存区是追加操作，变更提交后，<strong>暂存区并没有清空</strong></li>
</ul>
<h5 id="（3）子文件夹保存到树对象"><a href="#（3）子文件夹保存到树对象" class="headerlink" title="（3）子文件夹保存到树对象"></a>（3）子文件夹保存到树对象</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir new_dir</span><br><span class="line">git update-index --add new_dir</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162056889.png" alt="image-20211116205602679"></p>
<p>可以发现，我们无法将一个空文件夹添加到暂存区，并且提示我们应该将文件夹中的文件加入<strong>暂存区</strong></p>
<p>接下来我们就试一下将文件夹中的文件添加进缓存区</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162100367.png" alt="image-20211116210040965"></p>
<p>可以发现文件夹是以一个tree对象添加进树中的</p>
<p>所以git的树对象的组织方式大致如下</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162102494.png" alt="img"></p>
<p>树对象相当于源代码的一次次快照，因此我们可以用树对象作为源代码版本管理，接下来我们还需要解决记录谁提交了代码、什么时候提交的、提交的说明信息等的问题，这就需要用到提交对象</p>
<h4 id="6-Git的提交对象"><a href="#6-Git的提交对象" class="headerlink" title="6.Git的提交对象"></a>6.Git的提交对象</h4><h5 id="（1）创建提交对象"><a href="#（1）创建提交对象" class="headerlink" title="（1）创建提交对象"></a>（1）创建提交对象</h5><p>将创建的树对象提交为commit对象</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git write-tree</span><br><span class="line">git commit-tree 15da -m &quot;frist commit&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162235396.png" alt="image-20211116223537292"></p>
<p>查看提交对象的内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git cat-file -p dd7b6</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162236318.png" alt="image-20211116223657063"></p>
<p>我们可以看到一个提交对象包含提交版本的<strong>树对象hash键值</strong>，author和commiter，以及修改和提交时间，以及提交的注释信息</p>
<h5 id="（2）提交新版本"><a href="#（2）提交新版本" class="headerlink" title="（2）提交新版本"></a>（2）提交新版本</h5><p>生成新的文件的对象树</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;new version&quot; &gt; file.txt</span><br><span class="line">git update-index file.txt</span><br><span class="line">git write-tree</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162248307.png" alt="image-20211116224816724"></p>
<p>在上一次提交的基础上提交对象树作为提交对象</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit-tree a4098 -p dd7b6 -m &quot;second commit&quot;</span><br><span class="line">98b0754a75a763db80ac689cd16e2665ced92589</span><br></pre></td></tr></table></figure>

<p><code>-p</code>对应上次提交对象的hash值</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162248268.png" alt="image-20211116224828288"></p>
<p>查看提交对象，可以看到多了一个父提交的记录</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162249974.png" alt="image-20211116224957926"></p>
<h5 id="（3）提交对象记录"><a href="#（3）提交对象记录" class="headerlink" title="（3）提交对象记录"></a>（3）提交对象记录</h5><p>通过git log 查看提交对象记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log 98b0</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162253027.png" alt="image-20211116225317939"></p>
<p>至此我们可以看到git对象之间联系的全貌了</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162303582.png" alt="img"></p>
<h4 id="7-Git的引用"><a href="#7-Git的引用" class="headerlink" title="7.Git的引用"></a>7.Git的引用</h4><p>以上的操作，我们对版本和数据对象的操作都是基于hash键值的，但是这些字符串是毫无意义的，所以git引入了<strong>引用（reference）</strong>使用有意义的字符串<strong>对应</strong>哈希值来解决这个问题，其主要应用于<strong>分支</strong></p>
<h5 id="（1）创建引用"><a href="#（1）创建引用" class="headerlink" title="（1）创建引用"></a>（1）创建引用</h5><p>为最新的提交对象创建一个引用名为master</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log 98b0</span><br><span class="line">git update-ref refs/heads/master 98b0</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162328532.png" alt="image-20211116232811501"></p>
<h5 id="（2）查看"><a href="#（2）查看" class="headerlink" title="（2）查看"></a>（2）查看</h5><p>创建成功后，我们就可以使用master来代替hash值查看提交对象记录</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111162329835.png" alt="image-20211116232919198"></p>
<p>这就是git分支的本质：一个指向某一系列提交之首的<strong>指针</strong></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
        <tag>深度系列</tag>
        <tag>git</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title>开发原理|深入理解TCP/IP</title>
    <url>/2021/12/22/DevPrinciple/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3TCP/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111222123110.png" alt="Packets incoming "></p>
<span id="more"></span>

<h3 id="深入TCP连接"><a href="#深入TCP连接" class="headerlink" title="深入TCP连接"></a>深入TCP连接</h3><p>参考资料：<a href="https://mp.weixin.qq.com/s/rX3A_FA19n4pI9HicIEsXg">https://mp.weixin.qq.com/s/rX3A_FA19n4pI9HicIEsXg</a></p>
<h4 id="1-TCP基本认识"><a href="#1-TCP基本认识" class="headerlink" title="1.TCP基本认识"></a>1.TCP基本认识</h4><h5 id="（1）TCP头部结构"><a href="#（1）TCP头部结构" class="headerlink" title="（1）TCP头部结构"></a>（1）TCP头部结构</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111172102110.png" alt="image-20211117210224727"></p>
<p>下面介绍其中较为重要的部分：</p>
<ul>
<li><strong>序列号</strong>：建立连接时计算生成的随机数作为其初始值，通过SYN包传给接收端主机。每发送一次数据就会<strong>累加</strong>一次该<strong>数据字节数</strong>的大小，所以可以用来<strong>解决网络包乱序</strong>的问题</li>
<li><strong>确认应答号</strong>：即下一次<strong>期望</strong>收到的数据序列号，发送端接收到这个确认应答就可以认为这个序号之前的数据已被正常接收，用以解决<strong>不丢包的问题</strong></li>
<li><strong>控制位（状态位）</strong>：该字段中的每个比特分别表示以下通信控制含义<ul>
<li>ACK：表示接收数据序号字段有效，一般表示数据已被接收方<strong>收到</strong></li>
<li>RST：<strong>强制断开</strong>连接，用于异常中断的情况</li>
<li>SYN：发送方和接收方相互确认序号，表示<strong>连接</strong>操作</li>
<li>FIN：表示<strong>断开</strong>连接</li>
</ul>
</li>
<li><strong>窗口大小</strong>：接收方告知发送方窗口大小（窗口大小即缓存大小，标识当前处理能力，用于<strong>流量控制</strong>，<strong>拥塞控制</strong>）</li>
</ul>
<h5 id="（2）TCP基本定义"><a href="#（2）TCP基本定义" class="headerlink" title="（2）TCP基本定义"></a>（2）TCP基本定义</h5><p>TCP 是一个工作在<strong>传输层</strong>的<strong>可靠</strong>数据传输的服务，它能确保接收端接收的网络包是<strong>无损坏、无间隔、非冗余和按序的</strong></p>
<p>TCP 是<strong>面向连接的、可靠的、基于字节流</strong>的传输层通信协议</p>
<ul>
<li>面向连接：十分专一，只支持一对一连接</li>
<li>可靠的：不管网络链路出现怎样的链路变化，TCP都可以保证一个报文一定能到达中断</li>
<li>字节流：消息无论多大都可以传输，而且一定是<strong>有序的</strong>，<strong>顺序不对</strong>的，<strong>重复</strong>的报文会被自动丢弃</li>
</ul>
<p>TCP连接即<strong>用于保证可靠性和流量控制维护</strong>的某些状态信息包括：</p>
<ul>
<li><strong>Socket</strong>：由 IP 地址和端口号组成</li>
<li><strong>序列号</strong>：用来解决乱序问题等</li>
<li><strong>窗口大小</strong>：用来做流量控制</li>
</ul>
<p>TCP四元组可以唯一确定一个连接：</p>
<ul>
<li><p>源地址</p>
</li>
<li><p>源端口</p>
</li>
<li><p>目标地址</p>
</li>
<li><p>目标端口</p>
</li>
</ul>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111172153405.png" alt="img"></p>
<p>地址储存在IP头部中，作用是通过IP协议发送报文给对方主机</p>
<p>端口存储在TCP头部，作用是告诉TCP协议应该把报文发给哪个进程</p>
<p>服务器通常固定在某个本地端口监听（如80，443等），等待客户端的连接请求</p>
<p>TCP理论上的最大连接数与客户端的IP数和客户端的端口数有关<br>$$<br>最大TCP连接数 = 客户端的IP数 × 客户端的端口数<br>$$<br>当实际上服务端最大TCP连接还会受到<strong>文件描述符</strong>和<strong>内存</strong>限制</p>
<h5 id="（3）TCP与UDP的区别"><a href="#（3）TCP与UDP的区别" class="headerlink" title="（3）TCP与UDP的区别"></a>（3）TCP与UDP的区别</h5><p>TCP与UDP的结构对比：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110091935607.png" alt="img" style="zoom:50%;"><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111172209140.png" alt="image-20211117220850428" style="zoom: 67%;"></p>
<ul>
<li>首部长度：TCP有首部长度，UDP则没有。因为TCP有可变长的<strong>选项</strong>字段，所以需要首部长度来记录；UDP的头部长度是不会变化的，所以需要去记录首部长度</li>
</ul>
<ul>
<li>包长度：UDP有首部长度，UDP则没有。TCP和UDP的数据长度都可以通过下面公式计算出来，所以包长度是不需要的，这里的UDP可能纯属是补全UDP的首部长度为4字节<br>$$<br>TCP/UDP数据长度 = IP总长度 - IP首部长度 - TCP/UDP首部长度<br>$$</li>
</ul>
<p>TCP和UDP协议的应用：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110090832758.jpeg" alt="TCP/UDP常见应用"></p>
<p>TCP/UDP比较：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110131208230.webp" alt="TCP/UDP比较"></p>
<p>咳咳，正经详细的比较如下：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110131209573.png" alt="image-20211013120922107"></p>
<p>TCP/UDP编程模型对比：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110090836254.jpeg" alt="TCP/UDP编程模型"></p>
<h4 id="2-TCP连接建立"><a href="#2-TCP连接建立" class="headerlink" title="2.TCP连接建立"></a>2.TCP连接建立</h4><h5 id="（1）三次握手"><a href="#（1）三次握手" class="headerlink" title="（1）三次握手"></a>（1）三次握手</h5><p>TCP三次握手其实就是<strong>建立一个TCP连接</strong>，客户端和服务器之间需要<strong>3个数据包</strong>，握手的主要作用就是为了确认双方的接收和发送能力是否正常，初始序列号，交换窗口大小以及 MSS 等信息</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110091957945.png" alt="img"></p>
<p>SYN：发送方和接收方相互确认序号，表示<strong>连接</strong>操作；    ACK：表示接收数据序号字段有效，一般表示数据已被接收方<strong>收到</strong></p>
<ul>
<li>初始状态下，客户端和服务端都处在<strong>CLOSED</strong>状态，先是服务端主动监听某个端口，处于<strong>LISTEN</strong>状态</li>
</ul>
<ul>
<li>第一次握手：客户端发送<strong>SYN</strong>报文，并进入<strong>SYN-SENT</strong>状态，等待服务器确认</li>
</ul>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202111181640784.png" alt="img" style="zoom: 67%;">





<ul>
<li>第二次握手：服务器收到<strong>SYN</strong>报文后，需要向客户端发送<strong>ACK</strong>确认<strong>收到</strong>的报文；同时服务端也向客户端发送一个<strong>SYN报文</strong>（也就是说服务端向客户端发送了<strong>SYN+ACK</strong>报文），然后服务端进入<strong>SYN_RCVD</strong>状态</li>
</ul>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202111181640604.png" alt="img" style="zoom: 67%;">





<ul>
<li><p>第三次握手：客户端收到<strong>SYN+ACK</strong>报文后，向服务端发送<strong>ACK</strong>确认<strong>收到</strong>的报文，客户端进入<strong>ESTABLISHED</strong>状态； 服务端收到客户端的<strong>ACK</strong>包后也会进入<strong>ESTABLISHED</strong>状态，完成三次握手</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202111222130593.png" alt="img" style="zoom: 67%;">



</li>
</ul>
<p><strong>第三次握手是可以携带数据的，前面两次握手是不可以携带数据的</strong>，完成三次握手后，双方都处于<strong>ESTABLISHED</strong>状态，至此连接就已经建立完成了</p>
<p>在Linux系统可以通过<code>netstat -napt</code>命令查看TCP连接状态</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110092029731.png" alt="img"></p>
<h5 id="（2）需要三次握手的原因"><a href="#（2）需要三次握手的原因" class="headerlink" title="（2）需要三次握手的原因"></a>（2）需要三次握手的原因</h5><p>我们需要三次握手才能初始化Socket，序列号和窗口大小并建立TCP连接，才能保证双方具有接收和发送的能力</p>
<p>需要三次握手的原因如下：</p>
<ul>
<li>三次握手才能阻止历史重复连接的初始化</li>
<li>三次握手才能同步双方的初始序列化</li>
<li>三次握手才可以避免资源浪费</li>
</ul>
<p><strong>避免历史连接</strong>：防止旧的重复连接初始化造成混乱</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202111222130449.png" alt="img" style="zoom: 67%;">



<p>网络环境错综复杂，在网络拥堵的情况下，一个「旧 SYN 报文」可能会比「最新的 SYN 」 报文早到达了服务端</p>
<p>第三次握手可以用来判断是否收到了自己期望的ACK：</p>
<ul>
<li>如果是历史连接（序列号过期或超时）就发送<strong>RST报文</strong>中止历史连接</li>
<li>如果不是历史连接则第三次发送的报文是<strong>ACK报文</strong>，通信双方就会成功建立连接</li>
</ul>
<p>如果是两次握手将无法判断出历史连接</p>
<p><strong>同步双方初始序列号</strong>：TCP协议通信双方，都必须维护一个序列号，只有客户端和服务端之间通过<strong>SYN和ACK</strong>一来一回的确认，才能确保双方的初始化序列号能被可靠的同步</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202111181742784.png" alt="img" style="zoom:67%;">



<p>如果是两次握手只能保证一方的初始序列号可以被对方接收，没办法保证双方的初始序列号都能被确认接受</p>
<p><strong>避免资源浪费</strong>：二次握手会建立多个冗杂的无效的连接，造成不必要的资源浪费</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202111222130170.png" alt="img" style="zoom:67%;">



<p>两次握手会造成消息滞留的情况，服务器接收到无用的SYN报文，因为没有ACK确认信号，服务器就会造成重复的资源分配</p>
<h5 id="（3）初始化序列号ISN"><a href="#（3）初始化序列号ISN" class="headerlink" title="（3）初始化序列号ISN"></a>（3）初始化序列号ISN</h5><p>客户端和服务端的初始序列号ISN是不相同的，因为网络的<strong>报文会延迟，会复制重发，也可能丢失</strong>。为了避免相互影响，客户端和服务端的初始序列号是随机且不同的</p>
<p>初始序列号ISN的随机生成算法是基于时钟的，如下<br>$$<br>ISN = M + F (localhost, localport, remotehost, remoteport)<br>$$</p>
<ul>
<li><code>M</code> 是一个<strong>计时器</strong>，这个计时器每隔 4 毫秒加 1</li>
<li><code>F</code> 是一个 Hash 算法，根据<strong>源 IP、目的 IP、源端口、目的端口生成一个随机数值</strong>。要保证 Hash 算法不能被外部轻易推算得出，用 MD5 算法是一个比较好的选择</li>
</ul>
<h5 id="（4）MTU与MSS"><a href="#（4）MTU与MSS" class="headerlink" title="（4）MTU与MSS"></a>（4）MTU与MSS</h5><p>IP层分片的大小为MTU，TCP层分段的大小为MSS</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110092031256.png" alt="image-20211009203103835"></p>
<ul>
<li><code>MTU</code>：一个网络包的最大长度，以太网中一般为 <code>1500</code> 字节。</li>
<li><code>MSS</code>：除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度</li>
</ul>
<p>既然IP层可以将大于MTU数据进行分片，为什么还需要TCP层将大于MSS的数据分段呢？</p>
<p>因为IP层本身并没有超时重传机制，如果一个IP分片丢失了，那么整个IP报文的<strong>所有分片都要进行重传</strong></p>
<p>所有为了达到最佳的传输效能，TCP协议在<strong>建立连接时通常要协商双方的MSS值</strong>，当TCP发现数据超过MSS时就会对数据进行分段，这样它生成的IP包长度就不会大于MTU了，当然也不需要IP层进行分片。</p>
<p>如果一个TCP分片丢失，就可以以MSS为单位重发数据</p>
<h5 id="（5）TCP接收队列"><a href="#（5）TCP接收队列" class="headerlink" title="（5）TCP接收队列"></a>（5）TCP接收队列</h5><p>​    在TCP三次握手中，我们如何分辨：哪些连接是半连接，哪些连接是全连接呢？</p>
<p>​    Linux通过维护两个队列来解决问题：</p>
<ul>
<li>半连接队列（SYN队列）</li>
<li>全连接队列（accepet队列）</li>
</ul>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202110261926809.png" alt="img" style="zoom:80%;">



<ul>
<li>服务端收到客户端发起的<strong>SYN</strong>后，内核会将连接存储到<strong>半连接队列</strong></li>
<li>服务端向客户端发送<strong>SYN+ACK</strong></li>
<li>客户端收到<strong>SYN+ACK</strong>后，发送<strong>ACK</strong>到服务端</li>
<li>服务端收到客户端的<strong>ACK</strong>后，内核会把连接从<strong>半连接队列</strong>移除，将其添加到<strong>全连接队列</strong>，等待进程调用<strong>accept函数</strong>时把连接取出来</li>
<li>不管是半连接队列还是全连接队列，都有最大长度限制，超过限制时，内核会直接<strong>丢弃</strong>，或<strong>返回 RST 包</strong></li>
</ul>
<h5 id="（6）SYN攻击与避免方式"><a href="#（6）SYN攻击与避免方式" class="headerlink" title="（6）SYN攻击与避免方式"></a>（6）SYN攻击与避免方式</h5><p>SYN攻击实际上就是对服务端一直发送SYN包，但是不回第三次握手ACK，这样会使服务端有大量的处于 <code>SYN_RECV</code> 状态的 TCP 连接（即<strong>半连接状态</strong>），久而久之就会导致<strong>TCP半连接队列溢出</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111221558394.jpeg" alt="img"></p>
<p><strong>避免SYN方法</strong>如下</p>
<p>方法一：调整Linux相关参数</p>
<p>通过修改 Linux 内核参数，控制队列大小和当队列满时应做什么处理</p>
<ul>
<li>当网卡接收数据包的速度大于内核处理的速度时，会有一个队列保存这些数据包。控制该队列的最大值如下参数：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net.core.netdev_max_backlog</span><br></pre></td></tr></table></figure>



<ul>
<li>SYN_RCVD 状态连接的最大个数：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_max_syn_backlog</span><br></pre></td></tr></table></figure>



<ul>
<li>超出处理能时，对新的 SYN 直接回 RST，丢弃连接：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_abort_on_overflow</span><br></pre></td></tr></table></figure>





<p>方法二：<strong>开启tcp_syncookies</strong></p>
<p>当syncookies=1时，服务端开启 syncookies 功能，其可以在不使用 SYN 半连接队列的情况下成功建立连接（默认配置）</p>
<p>SYN队列即半连接队列        Accept队列即全连接队列</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111222130712.png" alt="img" style="zoom: 50%;">                                <img src="https://raw.staticdn.net/Autovy/Image/master/img/202111222130242.png" alt="img" style="zoom: 50%;"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111222130175.png" alt="img" style="zoom:50%;">                                <img src="https://raw.staticdn.net/Autovy/Image/master/img/202111222130600.png" alt="img" style="zoom: 50%;"> </p>
<p>syncookies的运行原理：服务器根据当前状态计算出一个值，放在己方发出的 SYN+ACK 报文中发出，当客户端返回 ACK 报文时，取出该值验证，如果合法，就认为连接建立成功。其处理流程如下：</p>
<ul>
<li>「 SYN 队列」满之后，后续服务器收到 SYN 包，不进入「 SYN 队列」</li>
<li>计算出一个 <code>cookie</code> 值，再以 SYN + ACK 中的「序列号」返回客户端</li>
<li>服务端接收到客户端的应答报文时，服务器会检查这个 ACK 包的合法性。如果合法，直接放入到「 Accept 队列」</li>
<li>最后应用通过调用 <code>accpet()</code> socket 接口，从「 Accept 队列」取出的连接</li>
</ul>
<h4 id="3-TCP连接断开"><a href="#3-TCP连接断开" class="headerlink" title="3.TCP连接断开"></a>3.TCP连接断开</h4><h5 id="（1）四次挥手"><a href="#（1）四次挥手" class="headerlink" title="（1）四次挥手"></a>（1）四次挥手</h5><p>当我们的应用不再需要数据通信，就会发起断开TCP连接，建立一个连接需要<strong>三次握手</strong>，而终止一个连接需要经过<strong>四次挥手</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110111551532.png" alt="img"></p>
<p>SYN：发送方和接收方相互确认序号，表示<strong>连接</strong>操作；    ACK：表示接收数据序号字段有效，一般表示数据已被接收方<strong>收到</strong>；    FIN：表示<strong>断开</strong>连接</p>
<ul>
<li>第一次挥手：客户端发起<strong>FIN</strong>包，客户端进入<strong>FIN_WAIT_1</strong>状态（虽然FIN包不携带数据，也需要消耗一个序号u）</li>
<li>第二次挥手：服务端收到<strong>FIN</strong>包，发出确认包<strong>ACK</strong>（ack=u+1），并带上自己的序号seq=v，服务端进入<strong>CLOSE_WAIT</strong>状态（这个时候客户端仍需要接收服务器发送的数据）；客户端接收到服务端发送的<strong>ACK</strong>后，进入<strong>FIN_WAIT_2</strong>状态</li>
<li>第三次挥手：服务端数据发送完毕后，向客户端发送<strong>FIN</strong>包（seq=w，ack=u+1），<strong>半连接状态</strong>下服务器可能又发送一些数据，服务端此时进入<strong>LAST_ACK</strong>状态</li>
<li>第四次挥手：客户端收到服务端的<strong>FIN</strong>包后，发出确认包ACK（ACK=1， ack=w+1），此时客户端进入<strong>TIME_WAIT</strong>状态；服务端收到客户端确认包后进入<strong>CLOSED</strong>状态，而客户端需要等待2MSL后才进入<strong>CLOSED</strong>状态</li>
</ul>
<p>四次挥手的本质是——客户端和服务器通过<strong>两对FIN-ACK报文</strong>通知对方自己要关闭了</p>
<p>三次握手中，在第二次握手时，接收端将一个<strong>ACK</strong>包和一个<strong>SYN</strong>包合并一起发送，所以减少了一次包的发送</p>
<p>四次挥手中，在主动关闭方（客户端）发送FIN包后，接收方（服务端）可能还要发送数据，不能立即关闭数据通道，所以服务端要先确认ACK，然后等到自己把数据发无可发后再发送<strong>FIN</strong>包</p>
<h5 id="（2）需要四次挥手的原因"><a href="#（2）需要四次挥手的原因" class="headerlink" title="（2）需要四次挥手的原因"></a>（2）需要四次挥手的原因</h5><ul>
<li>关闭连接时，客户端向服务端发送 <code>FIN</code> 时，仅仅表示客户端不再发送数据了但是还能接收数据</li>
<li>服务器收到客户端的 <code>FIN</code> 报文时，先回一个 <code>ACK</code> 应答报文，而服务端可能<strong>还有数据需要处理和发送</strong>，等服务端不再发送数据时，才发送 <code>FIN</code> 报文给客户端来表示同意现在关闭连接</li>
</ul>
<p>服务端的<strong>ACK</strong>和<strong>FIN</strong>需要分开发送，是因为通常需要等待完成数据的发送和处理，所以会比三次握手多一次</p>
<h5 id="（3）TIME-WAIT状态功能"><a href="#（3）TIME-WAIT状态功能" class="headerlink" title="（3）TIME_WAIT状态功能"></a>（3）TIME_WAIT状态功能</h5><p>为什么客户端在关闭连接时需要一个TIME_WAIT的状态呢？</p>
<p>其主要有以下两个原因：</p>
<ul>
<li>防止旧连接的数据包</li>
<li>保证「被动关闭连接」的一方能被正确的关闭</li>
</ul>
<p><strong>防止旧连接的数据包</strong>：</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202111222021036.png" alt="img" style="zoom:67%;">



<p>如果没有TIME_WAIT或TIME_WAIT的时间过短，那么图中被延迟的过期的数据包可能会被客户端正常接收</p>
<p>而经过TIME_WAIT的<code>2MSL</code> 这个时间，足以让两个方向上的数据包都被丢弃，使得原来连接的数据包在网络中都自然消失，再出现的数据包一定都是新建立连接所产生的</p>
<p><strong>保证连接正确关闭</strong>：</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202111222130617.png" alt="img" style="zoom:67%;">

<p>TIME-WAIT 作用是等待足够的时间以确保最后的 ACK 能让被动关闭方接收，从而帮助其正常关闭</p>
<p>一旦客户端最后的ACK报文在网络丢失，如果没有TIME_WAIT或TIME_WAIT的时间过短，客户端很快就会进入了则就直接进入了 <code>CLOSE</code> 状态了，那么服务端则会一直处在 <code>LASE-ACK</code> 状态。这时如果客户端要发起新的连接，服务端会发送 <code>RST</code> 报文给客户端，连接建立的过程就会被终止</p>
<p>如果 TIME-WAIT 等待足够长时，一旦服务端没有收到四次挥手的最后一个 <code>ACK</code> 报文时，则会重发 <code>FIN</code> 关闭连接报文并等待新的 <code>ACK</code> 报文</p>
<h5 id="（4）TIME-WAIT深入讲解"><a href="#（4）TIME-WAIT深入讲解" class="headerlink" title="（4）TIME_WAIT深入讲解"></a>（4）TIME_WAIT深入讲解</h5><p><strong>为什么TIME_WAIT等待的时间是两秒</strong>？</p>
<p>MSL：<strong>报文最大生存时间</strong>，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃</p>
<p>TTL： <strong>IP 数据报可以经过的最大路由数</strong>，每经过一个处理他的路由器此值就减 1，当此值为 0 则数据报将被丢弃，同时发送 ICMP 报文通知源主机</p>
<p>如果被动关闭方没有收到断开连接的最后的 ACK 报文，就会触发超时重发 Fin 报文，另一方接收到 FIN 后，会重发 ACK 给被动关闭方， <strong>一来一去正好 2 MSL</strong></p>
<p><code>2MSL</code> 的时间是从<strong>客户端接收到 FIN 后发送 ACK 开始计时的</strong>。如果在 TIME-WAIT 时间内，因为客户端的 ACK 没有传输到服务端，客户端又接收到了服务端重发的 FIN 报文，那么 <strong>2MSL 时间将重新计时</strong></p>
<p><strong>TIME_WAIT 过多有什么危害？</strong></p>
<p>过多的 TIME-WAIT 状态主要的危害有两种：</p>
<ul>
<li>第一是内存资源占用；</li>
<li>第二是对端口资源的占用，如果<strong>TIME_WAIT 状态过多，占满了所有端口资源，则会导致无法创建新连接</strong></li>
</ul>
<p><strong>TIME_WAIT 优化</strong></p>
<ul>
<li>打开 net.ipv4.tcp_tw_reuse 和 net.ipv4.tcp_timestamps 选项：可以复用<strong>复用处于 TIME_WAIT 的 socket 为新的连接所用</strong>，引入时间戳后，重复的数据包会因为时间戳过期而被自然丢弃，同时<strong>当客户端与服务端主机时间不同步时，客户端的发送的消息会被直接拒绝掉</strong></li>
<li>net.ipv4.tcp_max_tw_buckets：这个值默认为 18000，当系统中处于 TIME_WAIT 的连接<strong>一旦超过这个值时，系统就会将所有的 TIME_WAIT 连接状态重置</strong></li>
<li>程序中使用 SO_LINGER ，应用强制使用 RST 关闭（也是一个危险行为，不推荐使用）</li>
</ul>
<h5 id="（5）TCP保活机制"><a href="#（5）TCP保活机制" class="headerlink" title="（5）TCP保活机制"></a>（5）TCP保活机制</h5><p>如果已经建立了连接，但是客户端突然出现故障了怎么办？</p>
<p>这时候就要提到TCP的<strong>保活机制</strong>了</p>
<p>在一个<strong>规定的时间段</strong>（tcp_keepalive_time：保活时间）内，如果没有任何连接相关的活动，TCP 保活机制会开始作用，<strong>每隔一个时间间隔</strong>（tcp_keepalive_intvl：每次检测间隔），发送一个「探测报文」，该探测报文包含的数据非常少，如果<strong>连续几个探测报文</strong>（tcp_keepalive_probes：检测次数）都没有得到响应，则认为当前的 TCP 连接已经死亡，系统内核将错误信息通知给上层应用程序</p>
<p>  相关参数如下：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/net/ipv4/tcp_keepalive_time</span><br><span class="line">cat /proc/sys/net/ipv4/tcp_keepalive_intvl</span><br><span class="line">cat /proc/sys/net/ipv4/tcp_keepalive_probes</span><br></pre></td></tr></table></figure>

<p>  <img src="https://raw.staticdn.net/Autovy/Image/master/img/202110271337578.png" alt="image-20211023214647732">    </p>
<p>按照系统默认的设置来计算在 Linux 系统中，最少需要经过 2 小时 11 分 15 秒才可以发现一个「死亡」连接</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202110232154413.png" alt="img"></p>
<p>开启了TCP保活可以考虑以下三种情况：</p>
<ul>
<li>第一种，对端程序是正常工作的。当 TCP 保活的探测报文发送给对端, 对端会正常响应，这样 <strong>TCP 保活时间会被重置</strong>，等待下一个 TCP 保活时间的到来</li>
<li>第二种，对端程序崩溃并重启。当 TCP 保活的探测报文发送给对端后，对端是可以响应的，但由于没有该连接的有效信息，<strong>会产生一个 RST 报文</strong>，这样很快就会发现 TCP 连接已经被重置</li>
<li>第三种，是对端程序崩溃，或对端由于其他原因导致报文不可达。当 TCP 保活的探测报文发送给对端后，石沉大海，没有响应，连续几次，达到保活探测次数后，<strong>TCP 会报告该 TCP 连接已经死亡</strong></li>
</ul>
<p><strong>前方施工中。。。</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202111222117832.webp" alt></p>
<h3 id="深入TCP机制"><a href="#深入TCP机制" class="headerlink" title="深入TCP机制"></a>深入TCP机制</h3><p>参考资料：<a href="https://mp.weixin.qq.com/s/HjOUsKn8eLfDogbBX3hPnA">https://mp.weixin.qq.com/s/HjOUsKn8eLfDogbBX3hPnA</a></p>
<h4 id="1-重传机制"><a href="#1-重传机制" class="headerlink" title="1.重传机制"></a>1.重传机制</h4><h4 id="2-滑动窗口"><a href="#2-滑动窗口" class="headerlink" title="2.滑动窗口"></a>2.滑动窗口</h4><h4 id="3-流量控制"><a href="#3-流量控制" class="headerlink" title="3.流量控制"></a>3.流量控制</h4><h4 id="4-拥堵控制"><a href="#4-拥堵控制" class="headerlink" title="4.拥堵控制"></a>4.拥堵控制</h4><h3 id="TCP关键参数与优化"><a href="#TCP关键参数与优化" class="headerlink" title="TCP关键参数与优化"></a>TCP关键参数与优化</h3><p>参考文章：<a href="https://mp.weixin.qq.com/s/ytV7RZSyFXyvPW_lKhv8hw">https://mp.weixin.qq.com/s/ytV7RZSyFXyvPW_lKhv8hw</a></p>
<h4 id="1-TCP三次握手参数"><a href="#1-TCP三次握手参数" class="headerlink" title="1.TCP三次握手参数"></a>1.TCP三次握手参数</h4><h4 id="2-TCP四次挥手参数"><a href="#2-TCP四次挥手参数" class="headerlink" title="2.TCP四次挥手参数"></a>2.TCP四次挥手参数</h4><h4 id="3-TCP数据传输参数"><a href="#3-TCP数据传输参数" class="headerlink" title="3.TCP数据传输参数"></a>3.TCP数据传输参数</h4><h3 id="IP基本知识"><a href="#IP基本知识" class="headerlink" title="IP基本知识"></a>IP基本知识</h3><h3 id="IP地址基础知识"><a href="#IP地址基础知识" class="headerlink" title="IP地址基础知识"></a>IP地址基础知识</h3><h3 id="IP协议相关技术"><a href="#IP协议相关技术" class="headerlink" title="IP协议相关技术"></a>IP协议相关技术</h3><h3 id="Ping工作原理"><a href="#Ping工作原理" class="headerlink" title="Ping工作原理"></a>Ping工作原理</h3>]]></content>
      <categories>
        <category>开发原理</category>
      </categories>
      <tags>
        <tag>开发原理</tag>
        <tag>深度系列</tag>
        <tag>计算机网络</tag>
        <tag>TCP</tag>
        <tag>IP</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|Socket编程指南</title>
    <url>/2022/01/20/Java/Java-Socket%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202252305878.png" alt="That is a good excuse"></p>
<span id="more"></span>

<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Socket编程是指编写在多台计算机上执行的程序，其中的设备都使用网络相互连接</p>
<p>Socket常用的通信协议有UDP和TCP，本文主要介绍通过TCP/IP网络协议进行Socket编程</p>
<h3 id="Socket通信流程"><a href="#Socket通信流程" class="headerlink" title="Socket通信流程"></a>Socket通信流程</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202251212126.png" alt="img"></p>
<ul>
<li>服务端和客户端初始化 <code>socket</code>，得到文件描述符；</li>
<li>服务端调用 <code>bind</code>，将绑定在 IP 地址和端口;</li>
<li>服务端调用 <code>listen</code>，进行监听；</li>
<li>服务端调用 <code>accept</code>，等待客户端连接；</li>
<li>客户端调用 <code>connect</code>，向服务器端的地址和端口发起连接请求；</li>
<li>服务端 <code>accept</code> 返回用于传输的 <code>socket</code> 的文件描述符；</li>
<li>客户端调用 <code>write</code> 写入数据；服务端调用 <code>read</code> 读取数据；</li>
<li>客户端断开连接时，会调用 <code>close</code>，那么服务端 <code>read</code> 读取数据的时候，就会读取到了 <code>EOF</code>，待处理完数据后，服务端调用 <code>close</code>，表示连接关闭；</li>
</ul>
<p>服务端调用 <code>accept</code> 时，连接成功了会返回一个已完成连接的 socket，后续用来传输数据。所以，监听的 socket 和真正用来传送数据的 socket，是「两个」 socket，一个叫作<strong>监听 socket</strong>，一个叫作<strong>已完成连接 socket</strong>。</p>
<h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><p>Socket是网络上不同计算机运行的两个程序之间双向通信链路的一个端点。Socket需要绑定端口号，一遍传输层可以标识数据要发送到的应用程序</p>
<h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>服务端会用到两个socket，一个叫作<strong>监听 socket</strong>，一个叫作<strong>已完成连接 socket</strong></p>
<p>目前的服务器不能保证通信的连续性，它会在发送完消息后关闭连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">// socket服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServerSocket serverSocket;</span><br><span class="line">    <span class="keyword">private</span> Socket clientSocket;</span><br><span class="line">    <span class="keyword">private</span> PrintWriter out;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader in;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// （监听socket）</span></span><br><span class="line">            <span class="comment">// 绑定指定端口，使服务器的Socket在指定端口号上运行</span></span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// （已连接socket）</span></span><br><span class="line">            <span class="comment">// 服务器遇到accept进入阻塞，等待客户端发出连接</span></span><br><span class="line">            <span class="comment">// 连接成功后，服务器将获得绑定到同一本地端口6666的新socket，用于传输数据</span></span><br><span class="line">            clientSocket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出流，可发送消息到客户端</span></span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(clientSocket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 输入流，可接收客户端消息</span></span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(clientSocket.getInputStream()));</span><br><span class="line"></span><br><span class="line">            String greeting = in.readLine();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(greeting.equals(<span class="string">&quot;hello server&quot;</span>))&#123;</span><br><span class="line">                out.println(<span class="string">&quot;hello client&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                out.println(<span class="string">&quot;unrecognised greeting&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            in.close();</span><br><span class="line">            out.close();</span><br><span class="line">            clientSocket.close();</span><br><span class="line">            serverSocket.close();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Server server = <span class="keyword">new</span> Server();</span><br><span class="line">        <span class="comment">// 开启服务器</span></span><br><span class="line">        server.start(<span class="number">6666</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>客户端只需要创建一个socket以保持连接，最终客户端的输入流连接到服务端的输出流，服务器的输入流连接到客户端的输出流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.javafx.iio.ios.IosDescriptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket clientSocket;</span><br><span class="line">    <span class="keyword">private</span> PrintWriter out;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader in;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startConnection</span><span class="params">(String ip, <span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 客户端需要知道服务端的ip和其正在监听的端口号，才能发起连接</span></span><br><span class="line">            <span class="comment">// 服务器接收连接后创建客户端socket</span></span><br><span class="line">            clientSocket = <span class="keyword">new</span> Socket(ip, port);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取socket的输入输出流，以便与服务端通信</span></span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(clientSocket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(clientSocket.getInputStream()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 客户端输出请求消息</span></span><br><span class="line">        out.println(msg);</span><br><span class="line">        String resp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 客户端接收响应消息</span></span><br><span class="line">            resp = in.readLine();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in.close();</span><br><span class="line">            out.close();</span><br><span class="line">            clientSocket.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>先手动启动服务端，然后运行以上测试案例即可完成一次连接和一次消息发送</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Client client = <span class="keyword">new</span> Client();</span><br><span class="line">        <span class="comment">// 客户端对服务端发起连接</span></span><br><span class="line">        client.startConnection(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6666</span>);</span><br><span class="line">        <span class="comment">// 客户端发送消息到服务端并接收响应结果</span></span><br><span class="line">        String response = client.sendMessage(<span class="string">&quot;hello server&quot;</span>);</span><br><span class="line">        System.out.println(response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>若启动服务端时出现以下报错，是出现了端口占用，可以修改端口也可以关闭占用端口的进程</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202251257783.png" alt="image-20220225125717019"></p>
<p>Windows下使用命令行关闭占用端口的进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 参看端口号含6666的条目</span><br><span class="line">netstat -ano|findstr &quot;6666&quot;</span><br><span class="line"></span><br><span class="line">// 根据pid查询对应的应用程序</span><br><span class="line">tasklist|findstr &quot;1828&quot;</span><br><span class="line"></span><br><span class="line">// 杀死进程</span><br><span class="line">taskkill /f /pid 1828</span><br></pre></td></tr></table></figure>



<h3 id="持续连接优化"><a href="#持续连接优化" class="headerlink" title="持续连接优化"></a>持续连接优化</h3><p>在前一个案例中，服务器会阻塞直到客户端连接它。在单个消息后，连接就会关闭，客户端和服务端无法持续沟通，因此仅仅会出现在ping请求中</p>
<p>如果要实现一个聊天服务器，客户端和服务端之间就需要连续的来回通信</p>
<h4 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h4><p>在优化中我在服务端创建一个while循环来连续观察传来消息的服务器输入流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServerSocket serverSocket;</span><br><span class="line">    <span class="keyword">private</span> Socket clientSocket;</span><br><span class="line">    <span class="keyword">private</span> PrintWriter out;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader in;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// （监听socket）</span></span><br><span class="line">            <span class="comment">// 绑定指定端口，使服务器的Socket在指定端口号上运行</span></span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// （已连接socket）</span></span><br><span class="line">            <span class="comment">// 服务器遇到accept进入阻塞，等待客户端发出连接</span></span><br><span class="line">            <span class="comment">// 连接成功后，服务器将获得绑定到同一本地端口4444的新socket，用于传输数据</span></span><br><span class="line">            clientSocket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出流，可发送消息到客户端</span></span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(clientSocket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 输入流，可接收客户端消息</span></span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(clientSocket.getInputStream()));</span><br><span class="line"></span><br><span class="line">            String inputLine;</span><br><span class="line">            <span class="comment">// while循环连续观察从客户端传来消息的服务器输入流</span></span><br><span class="line">            <span class="comment">// 直到读取到exit断开连接</span></span><br><span class="line">            <span class="keyword">while</span> ((inputLine = in.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(inputLine.equals(<span class="string">&quot;exit&quot;</span>))&#123;</span><br><span class="line">                    out.println(<span class="string">&quot;goodbye&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                out.println(inputLine.replace(<span class="string">&quot;req&quot;</span>, <span class="string">&quot;res&quot;</span>));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            in.close();</span><br><span class="line">            out.close();</span><br><span class="line">            clientSocket.close();</span><br><span class="line">            serverSocket.close();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EchoServer server = <span class="keyword">new</span> EchoServer();</span><br><span class="line">        <span class="comment">// 开启服务器</span></span><br><span class="line">        server.start(<span class="number">4444</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><p>客户端不需要进行优化修改，这里为了方区分创建一个新的类EchoClient</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket clientSocket;</span><br><span class="line">    <span class="keyword">private</span> PrintWriter out;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader in;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startConnection</span><span class="params">(String ip, <span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 客户端需要知道服务端的ip和其正在监听的端口号，才能发起连接</span></span><br><span class="line">            <span class="comment">// 服务器接收连接后创建客户端socket</span></span><br><span class="line">            clientSocket = <span class="keyword">new</span> Socket(ip, port);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取socket的输入输出流，以便与服务端通信</span></span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(clientSocket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(clientSocket.getInputStream()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 客户端输出请求消息</span></span><br><span class="line">        out.println(msg);</span><br><span class="line">        String resp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 客户端接收响应消息</span></span><br><span class="line">            resp = in.readLine();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in.close();</span><br><span class="line">            out.close();</span><br><span class="line">            clientSocket.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>在初始示例中，我们只在服务器关闭连接之前进行一次通信。现在，我们发送一个终止信号，以便在会话完成时告诉服务器，以此关闭服务器的socket进程</p>
<p>开启EchoServer服务器运行以下测试案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EchoClient client = <span class="keyword">new</span> EchoClient();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        client.startConnection(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">4444</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        client.stopConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">echo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String resp1 = client.sendMessage(<span class="string">&quot;req:hello&quot;</span>);</span><br><span class="line">        String resp2 = client.sendMessage(<span class="string">&quot;req:world&quot;</span>);</span><br><span class="line">        String resp3 = client.sendMessage(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(resp1);</span><br><span class="line">        System.out.println(resp2);</span><br><span class="line">        System.out.println(resp3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>@BeforeClass – 表示在类中的任意public static void方法执行之前执行</li>
<li>@AfterClass – 表示在类中的任意public static void方法执行之后执行</li>
<li>@Before – 表示在任意使用@Test注解标注的public void方法执行之前执行</li>
<li>@After – 表示在任意使用@Test注解标注的public void方法执行之后执行</li>
<li>@Test – 使用该注解标注的public void方法会表示为一个测试方法</li>
</ul>
<h3 id="多客户端优化"><a href="#多客户端优化" class="headerlink" title="多客户端优化"></a>多客户端优化</h3><p>在实际情况中，服务端常常要处理多个客户端的请求，为此我们要在服务端为每一个客户端请求创建一个新的socket线程，即提供服务的客户端数将等于服务端正在运行的线程数</p>
<h4 id="服务端-2"><a href="#服务端-2" class="headerlink" title="服务端"></a>服务端</h4><p>仍然用一个<strong>监听socket</strong>在主线程监听端口，而需要多线程存储<strong>已连接socket</strong>以保持与多个客户端的连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoMultiSever</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServerSocket serverSocket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 仍然使用一个socket在主线程中监听端口</span></span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">// 每次循环中，accept会阻塞调用，直到新的客户端调用</span></span><br><span class="line">                <span class="comment">// 连接成功后，EchoMultiServer会将已连接的socket委托给 EchoClientHandler</span></span><br><span class="line">                <span class="keyword">new</span> EchoClientHandler(serverSocket.accept()).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            serverSocket.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个单独的线程EchoClientHandler</span></span><br><span class="line">    <span class="comment">// 保存已连接的socket与客户端交流</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClientHandler</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Socket clientSocket;</span><br><span class="line">        <span class="keyword">private</span> PrintWriter out;</span><br><span class="line">        <span class="keyword">private</span> BufferedReader in;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">EchoClientHandler</span><span class="params">(Socket socket)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.clientSocket = socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程执行start直到运行run方法，与目标客户端进行交流</span></span><br><span class="line">        <span class="comment">// 其内部发生的情况与EchoSever相同</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">                out = <span class="keyword">new</span> PrintWriter(clientSocket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">                in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(clientSocket.getInputStream()));</span><br><span class="line"></span><br><span class="line">                String inputLine;</span><br><span class="line">                <span class="keyword">while</span> ((inputLine = in.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(inputLine.equals(<span class="string">&quot;exit&quot;</span>))&#123;</span><br><span class="line">                        out.println(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    out.println(inputLine.replace(<span class="string">&quot;req&quot;</span>, <span class="string">&quot;res&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                in.close();</span><br><span class="line">                out.close();</span><br><span class="line">                clientSocket.close();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EchoMultiSever server = <span class="keyword">new</span> EchoMultiSever();</span><br><span class="line">        <span class="comment">// 开启服务器</span></span><br><span class="line">        server.start(<span class="number">5555</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="客户端-2"><a href="#客户端-2" class="headerlink" title="客户端"></a>客户端</h4><p>客户端不需要进行优化修改，与上面的相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoMultiClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket clientSocket;</span><br><span class="line">    <span class="keyword">private</span> PrintWriter out;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader in;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startConnection</span><span class="params">(String ip, <span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 客户端需要知道服务端的ip和其正在监听的端口号，才能发起连接</span></span><br><span class="line">            <span class="comment">// 服务器接收连接后创建客户端socket</span></span><br><span class="line">            clientSocket = <span class="keyword">new</span> Socket(ip, port);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取socket的输入输出流，以便与服务端通信</span></span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(clientSocket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(clientSocket.getInputStream()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        out.println(msg);</span><br><span class="line">        String resp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resp = in.readLine();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in.close();</span><br><span class="line">            out.close();</span><br><span class="line">            clientSocket.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><p>测试类中需要发起多个客户端请求</p>
<p>运行EchoMultiSever后，运行以下案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试方法开启多个客户端请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoMultiTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildClient1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        EchoClient client1 = <span class="keyword">new</span> EchoClient();</span><br><span class="line">        client1.startConnection(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">5555</span>);</span><br><span class="line">        String resp1 = client1.sendMessage(<span class="string">&quot;req:hello&quot;</span>);</span><br><span class="line">        String resp2 = client1.sendMessage(<span class="string">&quot;req:world&quot;</span>);</span><br><span class="line">        String resp3 = client1.sendMessage(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(resp1);</span><br><span class="line">        System.out.println(resp2);</span><br><span class="line">        System.out.println(resp3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildClient2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        EchoClient client2 = <span class="keyword">new</span> EchoClient();</span><br><span class="line">        client2.startConnection(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">5555</span>);</span><br><span class="line">        String resp1 = client2.sendMessage(<span class="string">&quot;req:hello&quot;</span>);</span><br><span class="line">        String resp2 = client2.sendMessage(<span class="string">&quot;req:world&quot;</span>);</span><br><span class="line">        String resp3 = client2.sendMessage(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(resp1);</span><br><span class="line">        System.out.println(resp2);</span><br><span class="line">        System.out.println(resp3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildClient3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        EchoClient client3 = <span class="keyword">new</span> EchoClient();</span><br><span class="line">        client3.startConnection(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">5555</span>);</span><br><span class="line">        String resp1 = client3.sendMessage(<span class="string">&quot;req:hello&quot;</span>);</span><br><span class="line">        String resp2 = client3.sendMessage(<span class="string">&quot;req:world&quot;</span>);</span><br><span class="line">        String resp3 = client3.sendMessage(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(resp1);</span><br><span class="line">        System.out.println(resp2);</span><br><span class="line">        System.out.println(resp3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.baeldung.com/a-guide-to-java-sockets">Java 套接字</a></p>
<p><a href="https://mp.weixin.qq.com/s/rX3A_FA19n4pI9HicIEsXg">TCP/IP图解</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
        <tag>Java</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|Java多线程案例</title>
    <url>/2022/02/04/Java/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<img src="https://raw.staticdn.net/Autovy/Image/master/img/202203022103663.jpeg" alt="Multithreading | threading-memes, multithreading-memes | ProgrammerHumor.io" style="zoom:80%;">

<p>卷！</p>
<span id="more"></span>

<h3 id="线程的创建及状态"><a href="#线程的创建及状态" class="headerlink" title="线程的创建及状态"></a>线程的创建及状态</h3><h4 id="1-线程的生命周期"><a href="#1-线程的生命周期" class="headerlink" title="1.线程的生命周期"></a>1.线程的生命周期</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202260851266.png" alt="Java 线程的状态 "></p>
<h4 id="2-创建一个线程"><a href="#2-创建一个线程" class="headerlink" title="2.创建一个线程"></a>2.创建一个线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadStateTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个线程对象</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread();</span><br><span class="line">        System.out.println(<span class="string">&quot;1- &quot;</span> + thread.getState());</span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;2- &quot;</span> + thread.getState());</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 主线程睡眠等待线程执行结束</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;3- &quot;</span> + thread.getState());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-创建有任务线程"><a href="#3-创建有任务线程" class="headerlink" title="3.创建有任务线程"></a>3.创建有任务线程</h4><p>创建有任务线程有以下三种方式：</p>
<ul>
<li>重写Thread的run()方法</li>
<li>实现Runnable接口，在创建Thread对象时传入</li>
<li>使用FutureTask，在创建Thread对象的时候传入</li>
</ul>
<h5 id="重写run-方法"><a href="#重写run-方法" class="headerlink" title="重写run()方法"></a>重写run()方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadRun</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="comment">// 重写run方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;一个子线程任务&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;main结束&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="Runnable实现"><a href="#Runnable实现" class="headerlink" title="Runnable实现"></a>Runnable实现</h5><p>Runnable是一个函数式接口，可以作为Thread构造函数的参数</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202260915940.png" alt="image-20220226091533448"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202260916952.png" alt="image-20220226091616762"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadRunnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(</span><br><span class="line">                <span class="comment">// lambda表达式可以为函数式接口创建匿名对象(类型是Runnable)</span></span><br><span class="line">                () -&gt; System.out.println(<span class="string">&quot;一个子线程任务&quot;</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;main结束&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="FutureTask实现"><a href="#FutureTask实现" class="headerlink" title="FutureTask实现"></a>FutureTask实现</h5><p>上面两者方式中，子线程没有返回值也没有抛出异常（这是由其中的run方法决定的），所以主线程对子线程的状况一无所知，而接下来的FutureTask可以解决这两个问题</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202260928525.png" alt="image-20220226092833201"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202260926628.png" alt="image-20220226092625296"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThreadFutureTask</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现Callable接口，写入任务，放入FutureTask中</span></span><br><span class="line">        Callable&lt;String&gt; callable = () -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;一个子线程任务&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;sub task done&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造FutureTask类（其实质是Runnable的一个实现）</span></span><br><span class="line">        FutureTask&lt;String&gt; task = <span class="keyword">new</span> FutureTask&lt;&gt;(callable);</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(task);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程启动&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程获得子线程返回值并捕捉异常</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// get()获得子线程返回值</span></span><br><span class="line">            String subResult = task.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程返回值：&quot;</span> + subResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ExecutionException e)&#123;</span><br><span class="line">            <span class="comment">// getCause获得子线程发生的异常</span></span><br><span class="line">            Throwable cause = e.getCause();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;main结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主线程调用get方法后，会不断询问子线程的情况，直到子线程执行完毕。FutureTask适用于多个任务需要同时完成的情况（主线程做完自己的任务后，一直等待子线程直到它完成任务，然后一起结束）</p>
<h3 id="CompleteFuture"><a href="#CompleteFuture" class="headerlink" title="CompleteFuture"></a>CompleteFuture</h3><p>CompleteFuture和FutureTask都是Future接口的实现类，但是CompleteFuture的使用姿势更加优雅。建议及时抛弃FutureTask，拥抱CompleteFuture🥰</p>
<h4 id="1-必备工具类"><a href="#1-必备工具类" class="headerlink" title="1.必备工具类"></a>1.必备工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程小工具</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallTool</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 让当前线程睡眠n毫秒</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleepMillis</span><span class="params">(<span class="keyword">long</span> millis)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(millis);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印当前时间戳+线程信息+消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printTimeAndThread</span><span class="params">(String tag)</span></span>&#123;</span><br><span class="line">        String res = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;\t|\t&quot;</span>)</span><br><span class="line">                .add(String.valueOf(System.currentTimeMillis()))</span><br><span class="line">                .add(String.valueOf(Thread.currentThread().getId()))</span><br><span class="line">                .add(Thread.currentThread().getName())</span><br><span class="line">                .add(tag)</span><br><span class="line">                .toString();</span><br><span class="line"></span><br><span class="line">        System.out.println(res);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2-CompletableFuture入门"><a href="#2-CompletableFuture入门" class="headerlink" title="2.CompletableFuture入门"></a>2.CompletableFuture入门</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202261121903.png" alt="image-20220226112153973"></p>
<ul>
<li>开启：supplyAsync</li>
<li>连接：thenCompose</li>
<li>合并：thenCombine</li>
</ul>
<h5 id="异步任务的开启"><a href="#异步任务的开启" class="headerlink" title="异步任务的开启"></a>异步任务的开启</h5><p>supplyAsync方法开启一个异步任务</p>
<p><strong>场景模拟</strong></p>
<ul>
<li>顾客进入餐厅</li>
<li>顾客点菜</li>
<li>顾客刷手机等待 <ul>
<li>（线程2）厨师炒菜</li>
<li>（线程2）厨师打饭</li>
</ul>
</li>
<li>顾客开始干饭</li>
</ul>
<p>这里的等待队列是 顾客任务 -&gt; 厨师任务</p>
<p><strong>代码案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompleteFutureSupplyAsync</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;顾客进入餐厅&quot;</span>);</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;顾客点菜&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// supplyAsync方法需要一个supplier作为参数</span></span><br><span class="line">        <span class="comment">// 为函数式接口，无入参，这里只有一个String类型的返回值（作为CompletableFuture的泛型）</span></span><br><span class="line">        <span class="comment">// 调用supplyAsync，supplier中的代码会跑到子线程中执行</span></span><br><span class="line">        CompletableFuture&lt;String&gt; sub = CompletableFuture.supplyAsync(</span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                    SmallTool.printTimeAndThread(<span class="string">&quot;厨师炒菜&quot;</span>);</span><br><span class="line">                    <span class="comment">// 炒菜耗时</span></span><br><span class="line">                    SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">                    SmallTool.printTimeAndThread(<span class="string">&quot;厨师打饭&quot;</span>);</span><br><span class="line">                    <span class="comment">// 打饭耗时</span></span><br><span class="line">                    SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;饭菜已备好&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;顾客正在刷手机等待&quot;</span>);</span><br><span class="line">        <span class="comment">// join方法返回值类型为CompletableFuture泛型的类型</span></span><br><span class="line">        <span class="comment">// join方法返回值即为supplier的返回值</span></span><br><span class="line">        <span class="comment">// join方法会等待子线程执行结束，并获得其返回值</span></span><br><span class="line">        SmallTool.printTimeAndThread(String.format(<span class="string">&quot;%s，顾客开始干饭&quot;</span>, sub.join()));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>运行结果</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202261031080.png" alt="image-20220226103120810"></p>
<h5 id="异步任务的连接"><a href="#异步任务的连接" class="headerlink" title="异步任务的连接"></a>异步任务的连接</h5><p>thenCompose连接两个任务当做一个线程提交到线程池，thenComposeAsync连接两个任务分别单独提交到线程池处理</p>
<p><strong>场景模拟</strong></p>
<ul>
<li>顾客进入餐厅</li>
<li>顾客点菜</li>
<li>顾客刷手机等待 <ul>
<li>（线程2）厨师炒菜，将菜交给服务员</li>
<li>（线程3）服务员拿到菜并去打饭</li>
</ul>
</li>
<li>顾客开始干饭</li>
</ul>
<p>这里的等待队列是 顾客任务 -&gt; 厨师任务 -&gt; 服务员任务</p>
<p><strong>代码案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompleteFutureThenCompose</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;顾客进入餐厅&quot;</span>);</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;顾客点菜&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// supplyAsync方法需要一个supplier作为参数</span></span><br><span class="line">        <span class="comment">// 为函数式接口，无入参，这里只有一个String类型的返回值（作为CompletableFuture的泛型）</span></span><br><span class="line">        <span class="comment">// 调用supplyAsync，supplier中的代码会跑到子线程中执行</span></span><br><span class="line">        CompletableFuture&lt;String&gt; sub = CompletableFuture.supplyAsync(</span><br><span class="line">               <span class="comment">// 厨师任务</span></span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                    SmallTool.printTimeAndThread(<span class="string">&quot;厨师炒菜&quot;</span>);</span><br><span class="line">                    <span class="comment">// 炒菜耗时</span></span><br><span class="line">                    SmallTool.sleepMillis(<span class="number">300</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;鱼香肉丝&quot;</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// dish即传入厨师任务的返回值</span></span><br><span class="line">                <span class="comment">// 菜做好后，开启服务员线程拿得饭菜并打饭</span></span><br><span class="line">                <span class="comment">// thenCompose会在前一个线程完成后，开启另一个线程</span></span><br><span class="line">        ).thenCompose(dish -&gt; CompletableFuture.supplyAsync(</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 服务员任务</span></span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                    SmallTool.printTimeAndThread(<span class="string">&quot;服务员打饭&quot;</span>);</span><br><span class="line">                    <span class="comment">// 打饭耗时</span></span><br><span class="line">                    SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">                    <span class="keyword">return</span> dish + <span class="string">&quot; 米饭已备好&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;顾客正在刷手机等待&quot;</span>);</span><br><span class="line">        <span class="comment">// join方法返回值类型为CompletableFuture泛型的类型</span></span><br><span class="line">        <span class="comment">// join方法返回值即为supplier的返回值</span></span><br><span class="line">        <span class="comment">// join方法会等待子线程执行结束，并获得其返回值</span></span><br><span class="line">        SmallTool.printTimeAndThread(String.format(<span class="string">&quot;%s，顾客开始干饭&quot;</span>, sub.join()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>运行结果</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202261134832.png" alt="image-20220226113453404"></p>
<h5 id="异步任务的结合"><a href="#异步任务的结合" class="headerlink" title="异步任务的结合"></a>异步任务的结合</h5><p>thenCombine合并两个任务，同时执行他们</p>
<p><strong>场景模拟</strong></p>
<ul>
<li>顾客进入餐厅</li>
<li>顾客点菜</li>
<li>顾客刷手机等待 <ul>
<li>（线程2）厨师炒菜</li>
<li>（线程3）服务员蒸饭</li>
<li>（线程3）菜和饭都备好了，服务员打饭上菜</li>
</ul>
</li>
<li>顾客开始干饭</li>
</ul>
<p><strong>代码案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompleteFutureThenCombine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;顾客进入餐厅&quot;</span>);</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;顾客点菜&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// supplyAsync方法需要一个supplier作为参数</span></span><br><span class="line">        <span class="comment">// 为函数式接口，无入参，这里只有一个String类型的返回值（作为CompletableFuture的泛型）</span></span><br><span class="line">        <span class="comment">// 调用supplyAsync，supplier中的代码会跑到子线程中执行</span></span><br><span class="line">        CompletableFuture&lt;String&gt; sub = CompletableFuture.supplyAsync(</span><br><span class="line">                <span class="comment">// 厨师任务</span></span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                    SmallTool.printTimeAndThread(<span class="string">&quot;厨师炒菜&quot;</span>);</span><br><span class="line">                    <span class="comment">// 炒菜耗时</span></span><br><span class="line">                    SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;鱼香肉丝&quot;</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// thenCombine将两个线程一起执行</span></span><br><span class="line">        ).thenCombine(CompletableFuture.supplyAsync(</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 服务员任务</span></span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                    SmallTool.printTimeAndThread(<span class="string">&quot;服务员蒸饭&quot;</span>);</span><br><span class="line">                    <span class="comment">// 蒸饭耗时</span></span><br><span class="line">                    SmallTool.sleepMillis(<span class="number">300</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;米饭&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ), (dish, rice) -&gt; &#123;</span><br><span class="line">            <span class="comment">// 两个并行的线程都完成任务后，合并两个结果后结束两个任务</span></span><br><span class="line">           SmallTool.printTimeAndThread(<span class="string">&quot;服务员打饭&quot;</span>);</span><br><span class="line">           SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">           <span class="keyword">return</span> String.format(<span class="string">&quot;%s + %s 已备好&quot;</span>, dish, rice);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;顾客正在刷手机等待&quot;</span>);</span><br><span class="line">        <span class="comment">// join方法返回值类型为CompletableFuture泛型的类型</span></span><br><span class="line">        <span class="comment">// join方法返回值即为supplier的返回值</span></span><br><span class="line">        <span class="comment">// join方法会等待子线程执行结束，并获得其返回值</span></span><br><span class="line">        SmallTool.printTimeAndThread(String.format(<span class="string">&quot;%s，顾客开始干饭&quot;</span>, sub.join()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>运行结果</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202261117831.png" alt="image-20220226111744105"></p>
<h4 id="3-CompletableFuture进阶"><a href="#3-CompletableFuture进阶" class="headerlink" title="3.CompletableFuture进阶"></a>3.CompletableFuture进阶</h4><h5 id="任务的后置处理"><a href="#任务的后置处理" class="headerlink" title="任务的后置处理"></a>任务的后置处理</h5><p><strong>场景模拟</strong></p>
<ul>
<li>顾客就餐完毕</li>
<li>顾客结账并要求开发票</li>
<li>顾客刷手机等待<ul>
<li>（线程2）服务员收款500元</li>
<li>（线程3）服务员开发票</li>
</ul>
</li>
<li>顾客拿到发票</li>
</ul>
<p><strong>thenApply的使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompleteFutureThenApply</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;顾客就餐完毕&quot;</span>);</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;顾客结账并要求开发票&quot;</span>);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; sub = CompletableFuture.supplyAsync(</span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                    SmallTool.printTimeAndThread(<span class="string">&quot;服务员收款500元&quot;</span>);</span><br><span class="line">                    SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;500&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// thenApply将前面异步任务的结果交给后面的Function</span></span><br><span class="line">        <span class="comment">// 前后两个任务都是一个服务员完成的（在同一线程中）        </span></span><br><span class="line">        ).thenApply(money -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            SmallTool.printTimeAndThread(String.format(<span class="string">&quot;服务员开发票，面额%s元&quot;</span>, money));</span><br><span class="line">            SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;%s元发票&quot;</span>, money);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;顾客正在刷手机等待&quot;</span>);</span><br><span class="line">        SmallTool.printTimeAndThread(String.format(<span class="string">&quot;顾客拿到%s&quot;</span>, sub.join()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>运行结果</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202261152150.png" alt="image-20220226115245885"></p>
<p>可以看到使用thenApply，收款和开发票都在同一个线程不符合要求，我们只需要将thenApply更改为thenApplyAsync即可实现开启另一个线程运行</p>
<p><strong>thenApplyAsync的使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompleteFutureThenApply</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;顾客就餐完毕&quot;</span>);</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;顾客结账并要求开发票&quot;</span>);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; sub = CompletableFuture.supplyAsync(</span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                    SmallTool.printTimeAndThread(<span class="string">&quot;服务员收款500元&quot;</span>);</span><br><span class="line">                    SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;500&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// thenApplyAsync将前面异步任务的结果交给后面的Function，并开启一个新的线程</span></span><br><span class="line">        ).thenApplyAsync(money -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            SmallTool.printTimeAndThread(String.format(<span class="string">&quot;服务员开发票，面额%s元&quot;</span>, money));</span><br><span class="line">            SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;%s元发票&quot;</span>, money);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;顾客正在刷手机等待&quot;</span>);</span><br><span class="line">        SmallTool.printTimeAndThread(String.format(<span class="string">&quot;顾客拿到%s&quot;</span>, sub.join()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="获得最先完成的任务"><a href="#获得最先完成的任务" class="headerlink" title="获得最先完成的任务"></a>获得最先完成的任务</h5><p><strong>场景模拟</strong></p>
<ul>
<li>老王走出餐厅，来到公交车站</li>
<li>等待700路或800路公交到来<ul>
<li>（线程2）700路公交正在赶来</li>
<li>（线程3）800路公交正在赶来</li>
</ul>
</li>
<li>老王坐最先到的公交回家</li>
</ul>
<p><strong>代码案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompleteFutureToEither</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;老王走出餐厅，来到公交车站&quot;</span>);</span><br><span class="line">        <span class="comment">// 700路公交和800路公交哪一个先到，就先上哪一辆车</span></span><br><span class="line">        SmallTool.printTimeAndThread(<span class="string">&quot;等待700路或800路公交到来&quot;</span>);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; bus = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">                    SmallTool.printTimeAndThread(<span class="string">&quot;700路公交正在赶来&quot;</span>);</span><br><span class="line">                    SmallTool.sleepMillis(<span class="number">100</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;700路公交已到站&quot;</span>;</span><br><span class="line">                    <span class="comment">// applyToEither连接两个任务，哪个任务先完成就传到Function（即firstComeBus中）</span></span><br><span class="line">                    <span class="comment">// 返回输出到bus</span></span><br><span class="line">                &#125;).applyToEither(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">                    SmallTool.printTimeAndThread(<span class="string">&quot;800路公交正在赶来&quot;</span>);</span><br><span class="line">                    SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;800路公交已到站&quot;</span>;</span><br><span class="line">                &#125;), firstComeBus -&gt; firstComeBus);</span><br><span class="line"></span><br><span class="line">        SmallTool.printTimeAndThread(String.format(<span class="string">&quot;%s，老王坐车回家&quot;</span>, bus.join()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>运行结果</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202261335892.png" alt="image-20220226133508092"></p>
<h5 id="处理发生的异常情况"><a href="#处理发生的异常情况" class="headerlink" title="处理发生的异常情况"></a>处理发生的异常情况</h5><p><strong>场景模拟</strong></p>
<ul>
<li><p>老王走出餐厅，来到公交车站</p>
</li>
<li><p>等待700路或800路公交到来</p>
<ul>
<li>（线程2）700路公交正在赶来</li>
<li>（线程3）800路公交正在赶来</li>
</ul>
</li>
<li><p>老王坐最先到的公交回家</p>
</li>
<li><p>700路公交出现故障，老王叫出租车回家</p>
</li>
</ul>
<p><strong>代码案例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.CompletableFuture;</span><br><span class="line"></span><br><span class="line">public class CompleteFutureToEither &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SmallTool.printTimeAndThread(&quot;老王走出餐厅，来到公交车站&quot;);</span><br><span class="line">        &#x2F;&#x2F; 700路公交和800路公交哪一个先到，就先上哪一辆车</span><br><span class="line">        SmallTool.printTimeAndThread(&quot;等待700路或800路公交到来&quot;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; bus &#x3D; CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">                    SmallTool.printTimeAndThread(&quot;700路公交正在赶来&quot;);</span><br><span class="line">                    SmallTool.sleepMillis(100);</span><br><span class="line">                    return &quot;700路公交已到站&quot;;</span><br><span class="line">                    &#x2F;&#x2F; applyToEither连接两个任务，哪个任务先完成就传到Function（即firstComeBus中）</span><br><span class="line">                    &#x2F;&#x2F; 返回输出到bus</span><br><span class="line">                &#125;).applyToEither(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">                    SmallTool.printTimeAndThread(&quot;800路公交正在赶来&quot;);</span><br><span class="line">                    SmallTool.sleepMillis(200);</span><br><span class="line">                    return &quot;800路公交已到站&quot;;</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F; 先到的车如果是700路，其中途会抛出异常</span><br><span class="line">                &#125;), firstComeBus -&gt; &#123;</span><br><span class="line">                    SmallTool.printTimeAndThread(firstComeBus);</span><br><span class="line">                    if(firstComeBus.startsWith(&quot;700&quot;))</span><br><span class="line">                    &#123;</span><br><span class="line">                        throw new RuntimeException(&quot;公交车发生故障&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    return firstComeBus;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 上面任任意的链式调用中出现异常都会触发这里的事件</span><br><span class="line">        &#125;).exceptionally(e -&gt; &#123;</span><br><span class="line">            SmallTool.printTimeAndThread(e.getMessage());</span><br><span class="line">            SmallTool.printTimeAndThread(&quot;老王叫出租车&quot;);</span><br><span class="line">            return &quot;出租车到了&quot;;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        SmallTool.printTimeAndThread(String.format(&quot;%s，老王坐车回家&quot;, bus.join()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>运行结果</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202261347003.png" alt="image-20220226134731888"></p>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="1-线程池的创建"><a href="#1-线程池的创建" class="headerlink" title="1.线程池的创建"></a>1.线程池的创建</h4><h5 id="使用构造函数创建"><a href="#使用构造函数创建" class="headerlink" title="使用构造函数创建"></a>使用构造函数创建</h5><p>我们可以使用ThreadPoolExecutor的构造函数创建一个线程池，其构造函数如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> corePoolSize,//线程池的核心线程数量</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> maximumPoolSize,//线程池的最大线程数</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">long</span> keepAliveTime,//当线程数大于核心线程数时，多余的空闲线程存活的最长时间</span></span></span><br><span class="line"><span class="function"><span class="params">    TimeUnit unit,//时间单位</span></span></span><br><span class="line"><span class="function"><span class="params">    BlockingQueue&lt;Runnable&gt; workQueue,//任务队列，用来储存等待执行任务的队列</span></span></span><br><span class="line"><span class="function"><span class="params">    ThreadFactory threadFactory,//线程工厂，用来创建线程，一般默认即可</span></span></span><br><span class="line"><span class="function"><span class="params">    RejectedExecutionHandler handler//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>拒绝策略如下：</p>
<p><strong><code>ThreadPoolExecutor.AbortPolicy</code></strong> ：抛出异常</p>
<p><strong><code>ThreadPoolExecutor.CallerRunsPolicy</code></strong> ：谁提交谁执行</p>
<p><strong><code>ThreadPoolExecutor.DiscardPolicy</code></strong> ：直接丢弃</p>
<p><strong><code>ThreadPoolExecutor.DiscardOldestPolicy</code></strong> ： 替换掉工作队列中最后一个</p>
<h5 id="使用工具类创建"><a href="#使用工具类创建" class="headerlink" title="使用工具类创建"></a>使用工具类创建</h5><p>一般不推荐使用，因为它无法适应多变的业务需求，而且容易导致OOM</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202261635984.png" alt="通过Executor 框架的工具类Executors来实现"></p>
<h4 id="2-线程中断"><a href="#2-线程中断" class="headerlink" title="2.线程中断"></a>2.线程中断</h4><p>在一个线程中可以通过中断唤醒另一个在睡眠中的线程，达到线程间通信的目的。不建议使用中断</p>
<p><strong>场景模拟</strong></p>
<p>两车过独木桥场景</p>
<p><strong>代码案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoCarCrossBridge</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread carTwo  = <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line"></span><br><span class="line">            SmallTool.printTimeAndThread(<span class="string">&quot;二号车辆准备过桥&quot;</span>);</span><br><span class="line">            SmallTool.printTimeAndThread(<span class="string">&quot;发现一号车正在过桥，开始等待&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 二号车线程进入TIMED_WAITING状态</span></span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 一号车发出中断通知，可以通过捕捉IE异常接收</span></span><br><span class="line">            <span class="comment">// sleep和wait方法会抛出InterruptedException异常</span></span><br><span class="line">           </span><br><span class="line">            <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                SmallTool.printTimeAndThread(<span class="string">&quot;二号车开始过桥&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            SmallTool.sleepMillis(<span class="number">200</span>);</span><br><span class="line">            SmallTool.printTimeAndThread(<span class="string">&quot;二号车过桥完毕&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread carOne = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">           SmallTool.printTimeAndThread(<span class="string">&quot;一号车开始过桥&quot;</span>);</span><br><span class="line">           <span class="keyword">int</span> timeSpend = <span class="keyword">new</span> Random().nextInt(<span class="number">500</span>) + <span class="number">1000</span>;</span><br><span class="line">           SmallTool.sleepMillis(timeSpend);</span><br><span class="line">           SmallTool.printTimeAndThread(<span class="string">&quot;二号车过桥完毕，耗时：&quot;</span> + timeSpend);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 一号车过桥完毕后，利用中断通知二号车</span></span><br><span class="line">            carTwo.interrupt();</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一号车，二号车同时起步</span></span><br><span class="line">        carOne.start();</span><br><span class="line">        carTwo.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但线程处于blocked，waiting，timed_waiting状态，或者从上述三个状态转为runnable状态的过程中，如果被中断就会收到InterruptedException异常</p>
<p><strong>运行结果</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202261712019.png" alt="image-20220226171200852"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://space.bilibili.com/51950540/channel/collectiondetail?sid=20808">Java并发编程合集</a></p>
<p><a href="https://javaguide.cn/java/concurrent/java-thread-pool-summary/">Java 线程池详解</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
        <tag>项目实战</tag>
      </tags>
  </entry>
  <entry>
    <title>开发原理|MySQL最佳实践</title>
    <url>/2022/02/25/DevPrinciple/MySQL%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<img src="https://raw.staticdn.net/Autovy/Image/master/img/202203041310207.png" alt="image-20220304131032975" style="zoom: 33%;">

<p>MySQL  ❎</p>
<p>OurSQL ✅</p>
<span id="more"></span>

<h3 id="Debain安装MySQL"><a href="#Debain安装MySQL" class="headerlink" title="Debain安装MySQL"></a>Debain安装MySQL</h3><h4 id="添加-MySQL-存储库"><a href="#添加-MySQL-存储库" class="headerlink" title="添加 MySQL 存储库"></a>添加 MySQL 存储库</h4><p>MySQL 服务器包可通过其官方存储库获得。 因此，我们现在将下载并安装 MySQL 存储库安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql-apt-config_0.8.18-1_all.deb</span><br></pre></td></tr></table></figure>

<p>使用 <code>dpkg</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i mysql-apt-config_0.8.18-1_all.deb</span><br></pre></td></tr></table></figure>

<p>进入mysql安装页面选择ok即可</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203021941621.png" alt="image-20220302194144873"></p>
<h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><p>等待存储库配置完成，然后使用 apt 命令更新存储库索引</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>



<p>安装mysql服务器</p>
<p>使用apt-get install mysql-server安装时，如果出现报错Package ‘mysql-server’ has no installation candidate，可以使用下面的命令进行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mariadb-server</span><br></pre></td></tr></table></figure>



<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>理论上这时候的mysql服务已经安装完成了，我们可以通过命令service –status-all 查看到服务列表中有mariadb</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203021949399.png" alt="image-20220302194955961"></p>
<p>但是使用mysql命令时，会出现以下报错，这是因为mariadb服务还未启动</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203021952567.png" alt="image-20220302195236210"></p>
<p>使用以下命令启动即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mariadb start</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203021955103.png" alt="image-20220302195514826"></p>
<h3 id="命令行准备数据库"><a href="#命令行准备数据库" class="headerlink" title="命令行准备数据库"></a>命令行准备数据库</h3><h4 id="root账号进入数据库"><a href="#root账号进入数据库" class="headerlink" title="root账号进入数据库"></a>root账号进入数据库</h4><p>mysql命令进入mysql服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql</span><br></pre></td></tr></table></figure>



<p>修改root账号密码</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203022003140.png" alt="image-20220302200352926"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set password for root@localhost &#x3D; password(&quot;123456&quot;)</span><br></pre></td></tr></table></figure>



<p>退出mysql服务，并使用root账号登录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203022006437.png" alt></p>
<h4 id="新用户与新数据库"><a href="#新用户与新数据库" class="headerlink" title="新用户与新数据库"></a>新用户与新数据库</h4><p>创建新数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database testdb;</span><br></pre></td></tr></table></figure>



<p>查看已有数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203022010700.png" alt="image-20220302201054361"></p>
<p>创建新用户</p>
<p>@localhost设置只允许用户本地登录，并设置其密码为123456</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user aut@localhost identifide by &#39;123456&#39;;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203022015408.png" alt="image-20220302201501975"></p>
<p>查看用户列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select user for mysql.user</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203022018844.png" alt="image-20220302201847575"></p>
<p>分配新数据库给新用户</p>
<p>注意这里是指将testdb库的所有表（testdb.*）的所有权限（all）给aut本地使用（localhost）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant all on testdb.* to aut@localhost;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203022027073.png" alt="image-20220302202739833"></p>
<p>查看用户权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show grants for aut@localhost;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203022031370.png" alt="image-20220302203155016"></p>
<h4 id="测试数据准备"><a href="#测试数据准备" class="headerlink" title="测试数据准备"></a>测试数据准备</h4><p>使用新用户aut连接mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u aut -p</span><br></pre></td></tr></table></figure>



<p>切换数据库到新数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use testdb;</span><br></pre></td></tr></table></figure>



<p>创建一个只含一个字段的数据表</p>
<p>test表只含有一个整型不为空的字段money</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table test (money int not null)</span><br></pre></td></tr></table></figure>



<p>添加一条数据到表中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert test(money) values(5000) </span><br></pre></td></tr></table></figure>



<h3 id="MySQL事务隔离实验"><a href="#MySQL事务隔离实验" class="headerlink" title="MySQL事务隔离实验"></a>MySQL事务隔离实验</h3><p>新开一个终端使用连接上新数据库testdb（可以aut，也可以自己新建一个用户）</p>
<h4 id="读未提交级别"><a href="#读未提交级别" class="headerlink" title="读未提交级别"></a>读未提交级别</h4><p>出现脏读问题</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203022050355.jpeg" alt="img"></p>
<h4 id="读已提交级别"><a href="#读已提交级别" class="headerlink" title="读已提交级别"></a>读已提交级别</h4><p>避免脏读，但是不可重复读</p>
<h5 id="1-避免脏读测试"><a href="#1-避免脏读测试" class="headerlink" title="1.避免脏读测试"></a>1.避免脏读测试</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203022051306.jpeg" alt="img"></p>
<h5 id="2-不可重复读测试"><a href="#2-不可重复读测试" class="headerlink" title="2.不可重复读测试"></a>2.不可重复读测试</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203022051474.jpeg" alt="img"></p>
<h4 id="可重复读级别"><a href="#可重复读级别" class="headerlink" title="可重复读级别"></a>可重复读级别</h4><p>可以重复读，并且可以防止幻读</p>
<h5 id="1-可重复读测试"><a href="#1-可重复读测试" class="headerlink" title="1.可重复读测试"></a>1.可重复读测试</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203022052001.jpeg" alt="img"></p>
<h5 id="2-防止幻读测试"><a href="#2-防止幻读测试" class="headerlink" title="2.防止幻读测试"></a>2.防止幻读测试</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203022052706.jpeg" alt="img"></p>
<h3 id="MySQL优化实验"><a href="#MySQL优化实验" class="headerlink" title="MySQL优化实验"></a>MySQL优化实验</h3><p>上面的实验全程在Linux环境中，在日常开发中我们可以使用数据库可视化工具如Navicat或IDEA自带的数据库工具，下面我主要使用Navicat进行操作</p>
<p>此章节的优化实例来自一次对学校校团委物资管理系统的维护，鉴于此项目糟心的数据库设计，给我留下了深刻的印象，难以想象的是这样的项目竟然从16年运行至今</p>
<h4 id="T-SQL脚本分表优化"><a href="#T-SQL脚本分表优化" class="headerlink" title="T-SQL脚本分表优化"></a>T-SQL脚本分表优化</h4><h5 id="1-相关表的结构"><a href="#1-相关表的结构" class="headerlink" title="1.相关表的结构"></a>1.相关表的结构</h5><p>此处展示的表结构为维护前</p>
<p>物资申请表：共4817条数据</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203031543098.png" alt="image-20220303154338625"></p>
<p>物资信息表：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203031545235.png" alt="image-20220303154513022"></p>
<p>goods_count：当前仓库物品数（物理的）</p>
<p>good_leftCount：当前物品可借数（网络的：存在部分未借出，但已被预订仍在审核中的物品）</p>
<h5 id="2-优化思路：物资申请表分表"><a href="#2-优化思路：物资申请表分表" class="headerlink" title="2.优化思路：物资申请表分表"></a>2.优化思路：物资申请表分表</h5><p>从上面的tw_apply表就可以知道：</p>
<ul>
<li><p>在用户提出申请后，物资申请信息被后端拼成了一个字符串存储在apply_content（同时利用了前端的数据执行了物品可借数的预扣除，所以这部分没有用到物资申请信息字符串的解析）</p>
</li>
<li><p>通过审核后，物品正式借出，这时候只留有物资申请信息的字符串存储在数据库，所以需要后端对该字符串解析提取出申请物资与其借用数量，再去操作数据库</p>
</li>
</ul>
<p>还好后端大哥没有把物资申请信息的字符串直接发给前端，我真的哭死，设计数据库的那个出来挨打（前端不需要解析，但是要拼接展示字符串）</p>
<p>数据库设计十分不合理，甚至不符合第一范式，<strong>浪费数据库大量存储空间</strong>不说，而且后端拼接字符串解析字符串这一过程<strong>十分耗时且占用内存</strong>，而且最新的需求是需要增加一个审核过程申请物资调整功能</p>
<p>所以我将物资申请表进行分表（水平分表），分出物资申请详情表并联系物资信息表，其结构如下</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203031646110.png" alt="image-20220303164602406"></p>
<p>删除掉apply_content字段，节省数据库空间</p>
<p>分表后，通过tw_applydetail表，我们对物资申请信息的所以内容进行操作，省去了物资审核接口对字符串解析的耗时过程并且方便审核过程申请物资调整功能的开发（通过tw_appdetail找到物品信息和物品数量）</p>
<h5 id="3-优化操作：存储过程脚本"><a href="#3-优化操作：存储过程脚本" class="headerlink" title="3.优化操作：存储过程脚本"></a>3.优化操作：存储过程脚本</h5><p>存储过程（Stored Procedure）是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象</p>
<p>这里值得注意的是在遍历游标的循环中，如果查询不存在或为空会跳出循环</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER<span class="operator">=</span>`Autovy`@`localhost` <span class="keyword">PROCEDURE</span> `demo`()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">		</span><br><span class="line"> <span class="comment">-- 定义变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> s <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> n TINYTEXT;</span><br><span class="line"><span class="keyword">DECLARE</span> m <span class="type">INT</span>(<span class="number">11</span>);</span><br><span class="line"> # 求分割符号<span class="string">&#x27;,&#x27;</span>的位置</span><br><span class="line"><span class="keyword">DECLARE</span> _index <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line"># 单个物品申请信息</span><br><span class="line"><span class="keyword">DECLARE</span> str TINYTEXT;</span><br><span class="line"></span><br><span class="line"># 单个物品申请信息长度</span><br><span class="line"><span class="keyword">DECLARE</span> strLength <span class="type">int</span>;</span><br><span class="line"></span><br><span class="line"># 物品名称</span><br><span class="line"><span class="keyword">DECLARE</span> goodName <span class="type">VARCHAR</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"># 物品数量</span><br><span class="line"><span class="keyword">DECLARE</span> goodCount <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"># 物品id</span><br><span class="line"><span class="keyword">DECLARE</span> goodId <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义游标，并将sql结果集赋值给游标</span></span><br><span class="line"><span class="keyword">DECLARE</span> apply_id1 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> id, apply_content <span class="keyword">FROM</span> tw_apply <span class="keyword">WHERE</span> apply_content <span class="keyword">LIKE</span> &quot;本部%&quot;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 声明当游标遍历完后将标志变量置成1</span></span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">NOT</span> FOUND <span class="keyword">SET</span> s<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 打开游标</span></span><br><span class="line"><span class="keyword">OPEN</span> apply_id1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将游标中的值赋值给变量，注意：变量名不要和返回列名同名，变量顺序要和sql结果顺序一致</span></span><br><span class="line"><span class="keyword">FETCH</span> apply_id1 <span class="keyword">into</span> m, n;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 当s != 1,一直循环</span></span><br><span class="line">while s<span class="operator">&lt;&gt;</span><span class="number">1</span> do</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">SET</span> _index <span class="operator">=</span> LOCATE(<span class="string">&#x27;;&#x27;</span>, n);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- 通过;分割单个物品的申请信息：北院—帐篷物品1个;北院—椅子物品1个;北院—桌子物品1个;</span></span><br><span class="line">	while _index <span class="operator">&gt;</span> <span class="number">0</span>  do</span><br><span class="line">		</span><br><span class="line">		<span class="comment">-- 拿到单个物品申请信息：本部——桌子物品1个</span></span><br><span class="line">		<span class="keyword">SET</span> str <span class="operator">=</span> <span class="keyword">LEFT</span>(n, _index<span class="number">-1</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">SET</span> strLength <span class="operator">=</span> LENGTH(str) <span class="operator">/</span> <span class="number">5</span>;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">-- 拿到物品名称</span></span><br><span class="line">		<span class="keyword">SET</span> goodName <span class="operator">=</span> <span class="keyword">LEFT</span>(str, strLength);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">-- 拿到物品个数(类型转换为整数)</span></span><br><span class="line">		<span class="keyword">SET</span> goodCount <span class="operator">=</span> <span class="built_in">CAST</span>(<span class="keyword">LEFT</span>(<span class="keyword">RIGHT</span>(str, <span class="number">2</span>), <span class="number">1</span>) <span class="keyword">AS</span> signed) ;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">SELECT</span> goodName;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">-- 按物品名称查到物品id并存储到goodId中</span></span><br><span class="line">		<span class="comment">-- 这里如果查询不存在或为空会跳出游标循环，值得注意</span></span><br><span class="line">		<span class="keyword">SELECT</span> goods_id <span class="keyword">into</span> goodId <span class="keyword">FROM</span> tw_goods <span class="keyword">WHERE</span> goods_show <span class="keyword">LIKE</span> goodName <span class="keyword">ORDER</span> <span class="keyword">BY</span> goods_count <span class="keyword">DESC</span> LIMIT <span class="number">1</span>;</span><br><span class="line">			</span><br><span class="line">		<span class="comment">-- 插入数据</span></span><br><span class="line">		<span class="keyword">INSERT</span> tw_applydetail(apply_id, good_id, count) <span class="keyword">VALUES</span> (m, goodId, goodCount);</span><br><span class="line">			</span><br><span class="line">		<span class="comment">-- 移动到下个分界点</span></span><br><span class="line">		<span class="keyword">SET</span> n <span class="operator">=</span> SUBSTR(n <span class="keyword">FROM</span> _index<span class="operator">+</span><span class="number">1</span>);</span><br><span class="line">		<span class="keyword">SET</span> _index <span class="operator">=</span> LOCATE(<span class="string">&#x27;;&#x27;</span>, n);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">end</span> while;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">-- 执行业务逻辑</span></span><br><span class="line">	<span class="keyword">set</span> i <span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 读取下一条数据，读取完成置变量s=1</span></span><br><span class="line"><span class="keyword">FETCH</span> apply_id1 <span class="keyword">into</span> m, n;</span><br><span class="line"><span class="keyword">end</span> while;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭游标</span></span><br><span class="line"><span class="keyword">close</span> apply_id1;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<p>当时经过一天的对存储过程的学习，我总结出了以下经验：存储过程非常不方便调试，而且报错信息只定位不报错误类型（sql是这样的）。如果能重来，对数据库的批量操作，首选Python或Shell</p>
<h5 id="4-优化结果"><a href="#4-优化结果" class="headerlink" title="4.优化结果"></a>4.优化结果</h5><ul>
<li>截至目前物资申请表已有4817条数据，考虑到后面数据会长期积累，这样的优化是有必要的</li>
<li>去掉后端耗时耗内存的字符串解析工作</li>
<li>节省数据库存储空间，优化前申请表内存占0.79MB，优化后占0.56MB</li>
</ul>
<p>另外附加一个容量查询小工具，可查询数据库各表容量大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">table_schema as &#39;数据库&#39;,</span><br><span class="line">table_name as &#39;表名&#39;,</span><br><span class="line">table_rows as &#39;记录数&#39;,</span><br><span class="line">truncate(data_length&#x2F;1024&#x2F;1024, 2) as &#39;数据容量(MB)&#39;,</span><br><span class="line">truncate(index_length&#x2F;1024&#x2F;1024, 2) as &#39;索引容量(MB)&#39;</span><br><span class="line">from information_schema.tables</span><br><span class="line">where table_schema&#x3D;&#39;bgs&#39;</span><br><span class="line">order by data_length desc, index_length desc;</span><br></pre></td></tr></table></figure>





<h4 id="索引优化查询"><a href="#索引优化查询" class="headerlink" title="索引优化查询"></a>索引优化查询</h4><h5 id="1-相关表结构"><a href="#1-相关表结构" class="headerlink" title="1.相关表结构"></a>1.相关表结构</h5><p>日志记录表：共33687条数据</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203031910440.png" alt="image-20220303191047146"></p>
<h5 id="2-优化思路：添加索引"><a href="#2-优化思路：添加索引" class="headerlink" title="2.优化思路：添加索引"></a>2.优化思路：添加索引</h5><p>关于索引的知识点这里不细说，推荐阅读：<a href="https://javaguide.cn/database/mysql/mysql-index/">MySQL 索引详解</a></p>
<p>由于日志表数据庞大，有3万条数据，为了达到快速通过用户名模糊查找到日志操作内容和操作时间，就需要用到索引，另外在模糊查询中，<strong>like语句要使索引生效，like后不能以%开始，也就是说 （like %字段名%） 、（like %字段名）这类语句会使索引失效，而（like 字段名）、（like 字段名%）这类语句索引是可以正常使用</strong></p>
<p>所以我将查询的模糊匹配由“%xxxx%”改为“xxxx%”，只模糊匹配前面部分</p>
<h5 id="3-优化操作"><a href="#3-优化操作" class="headerlink" title="3.优化操作"></a>3.优化操作</h5><p>这里直接使用Navicat可视化添加索引，因为后台查询日志是需要用用户名模糊查找到日志操作内容和操作时间，所以需要添加的索引为log_realnam</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203031939750.png" alt="image-20220303193939350"></p>
<p>更改mybatis的sql映射，解决sql注入和索引失效问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT log_realname, log_content, log_time FROM tw_log WHERE log_realname LIKE &quot;%$&#123;log_name&#125;%&quot;;  </span><br></pre></td></tr></table></figure>



<p>在这种情况下使用#程序会报错，新手程序员就把#号改成了$,这样如果java代码层面没有对用户输入的内容做处理势必会产生SQL注入漏洞。</p>
<p>正确写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT log_realname, log_content, log_time FROM tw_log WHERE log_realname LIKE concat(‘%’,#&#123;log_name&#125;, ‘%’)   </span><br></pre></td></tr></table></figure>



<h5 id="4-优化结果-1"><a href="#4-优化结果-1" class="headerlink" title="4.优化结果"></a>4.优化结果</h5><ul>
<li>添加索引前使用用户名模糊查询日志，耗时大约0.045s，添加索引后耗时大约0.032s，减少了磁盘IO，提高了查询速度</li>
<li>修改mybatis中模糊查询的sql语句，解决索引失效的问题，并解决了模糊查询中拼接字符串的sql注入问题</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://bynss.com/linux/476637.html">怎样在 Debian 11 / Debian 10 上安装 MySQL 8.0 / 5.7</a></p>
<p><a href="https://stackoverflow.com/questions/20259036/mysql-package-mysql-server-has-no-installation-candidate">install.packages - MySQL: Package ‘mysql-server’ has no installation candidate - Stack Overflow</a></p>
<p><a href="https://javaguide.cn/database/mysql/a-thousand-lines-of-mysql-study-notes/">一千行 MySQL 学习笔记</a></p>
<p><a href="https://javaguide.cn/database/mysql/transaction-isolation-level/">事务隔离级别(图文详解)</a></p>
<p><a href="https://juejin.cn/post/6844903688553627661">你的like语句为啥没索引？</a></p>
<p><a href="https://juejin.cn/post/6911101492497743879#heading-3">MySQL是如何优化模糊匹配like的SQL</a></p>
<p><a href="https://www.cnblogs.com/hoojo/archive/2011/07/15/2107740.html">Transact-SQL 编程</a></p>
<p><a href="https://segmentfault.com/a/1190000039248897">针对新手的MYSQL存储过程详解</a></p>
]]></content>
      <categories>
        <category>开发原理</category>
      </categories>
      <tags>
        <tag>开发原理</tag>
        <tag>数据库</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|物资申请系统开发总结</title>
    <url>/2021/10/20/Java/Java-%E7%89%A9%E8%B5%84%E7%94%B3%E8%AF%B7%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202205041947181.png" alt="image-20220504104541342"></p>
<span id="more"></span>

<h2 id="数据库架构"><a href="#数据库架构" class="headerlink" title="数据库架构"></a>数据库架构</h2><h3 id="数据库结构图"><a href="#数据库结构图" class="headerlink" title="数据库结构图"></a>数据库结构图</h3><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202205041042079.jpg" alt></p>
<h3 id="主要数据表信息"><a href="#主要数据表信息" class="headerlink" title="主要数据表信息"></a>主要数据表信息</h3><h4 id="一-物资申请表"><a href="#一-物资申请表" class="headerlink" title="一.物资申请表"></a>一.物资申请表</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202205041045668.png" alt="image-20220504104541342"></p>
<ul>
<li>用户id : 物资申请条目 = 1 : n</li>
<li>机构id : 物资申请条目 = 1 : n</li>
</ul>
<h4 id="二-物资申请详情表"><a href="#二-物资申请详情表" class="headerlink" title="二.物资申请详情表"></a>二.物资申请详情表</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202205041053586.png" alt="image-20220504105313339"></p>
<ul>
<li>物资申请条目id : 物资申请详情条目 = n : n</li>
<li>物资id : 物资申请详情条目 = n : n</li>
<li>(物资申请条目id,物资id) : 物资申请详情条目 = 1 : n</li>
</ul>
<h4 id="三-物资表"><a href="#三-物资表" class="headerlink" title="三.物资表"></a>三.物资表</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202205041059831.png" alt="image-20220504105953610"></p>
<h4 id="四-用户表"><a href="#四-用户表" class="headerlink" title="四.用户表"></a>四.用户表</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202205041102927.png" alt="image-20220504110242618"></p>
<ul>
<li>用户信息条目 : 权限id = 1 : 1</li>
</ul>
<h4 id="五-权限表"><a href="#五-权限表" class="headerlink" title="五.权限表"></a>五.权限表</h4><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202205041104629.png" alt="image-20220504110408506"></p>
<h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><h3 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h3><h4 id="一-前端"><a href="#一-前端" class="headerlink" title="一.前端"></a>一.前端</h4><ul>
<li>Vue.js：前端逻辑处理数据</li>
<li>Bootstrap：使用模板样式</li>
<li>Jquery</li>
<li>axios</li>
<li>Thymeleaf：主要使用其HTML包含技术，整合页面共用部分（Springboot官方推荐的视图）</li>
</ul>
<h4 id="二-后端"><a href="#二-后端" class="headerlink" title="二.后端"></a>二.后端</h4><ul>
<li>SpringBoot 1.5.9 RELEASE</li>
<li>Shiro安全框架</li>
<li>Maven</li>
<li>Hibernate</li>
<li>Elasticsearch搜索引擎</li>
</ul>
<h4 id="三-数据库"><a href="#三-数据库" class="headerlink" title="三.数据库"></a>三.数据库</h4><ul>
<li>MySQL数据库</li>
<li>Redis</li>
</ul>
<h3 id="相关依赖准备"><a href="#相关依赖准备" class="headerlink" title="相关依赖准备"></a>相关依赖准备</h3><p>pom.xml文件导入相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springboot web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- springboot tomcat 支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 热部署 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- jpa：java持久层api，用于操作数据库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- redis：基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，一般说来，会被当作缓存使用。 因为它比数据库(mysql)快 --&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- springboot test --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- thymeleaf： Thymeleaf 是一种模板语言，可以达到和JSP一样的效果，但是比起JSP 对于前端测试更加友好--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- elastic search：Elasticsearch是一个基于Lucene库的搜索引擎。它提供了一个分布式、支持多租户的全文搜索引擎 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用了 elasticsearch 就要加这么一个，不然要com.sun.jna.Native 错误 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jna<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jna<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>        </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- thymeleaf legacyhtml5 模式支持 --&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 测试支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- tomcat的支持.--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- mysql：数据库支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- junit：java自动测试工具 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span> 4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- commons-lang：提供常用工具包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>       </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- shiro：Java 当下常见的安全框架，主要用于用户验证和授权操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- hsqldb是一款Java内置的数据库，非常适合在用于快速的测试和演示的Java程序中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hsqldb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hsqldb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- springfox-swagger依赖添加：文档化工具 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>20.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h2 id="开发内容"><a href="#开发内容" class="headerlink" title="开发内容"></a>开发内容</h2><h3 id="MySQL优化过程"><a href="#MySQL优化过程" class="headerlink" title="MySQL优化过程"></a>MySQL优化过程</h3><h4 id="一-T-SQL脚本分表优化"><a href="#一-T-SQL脚本分表优化" class="headerlink" title="一.T-SQL脚本分表优化"></a>一.T-SQL脚本分表优化</h4><h5 id="1-相关表的结构"><a href="#1-相关表的结构" class="headerlink" title="1.相关表的结构"></a>1.相关表的结构</h5><p>此处展示的表结构为维护前</p>
<p>物资申请表：共4817条数据</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203031543098.png" alt="image-20220303154338625"></p>
<p>物资信息表：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203031545235.png" alt="image-20220303154513022"></p>
<p>goods_count：当前仓库物品数（物理的）</p>
<p>good_leftCount：当前物品可借数（网络的：存在部分未借出，但已被预订仍在审核中的物品）</p>
<h5 id="2-优化思路：物资申请表分表"><a href="#2-优化思路：物资申请表分表" class="headerlink" title="2.优化思路：物资申请表分表"></a>2.优化思路：物资申请表分表</h5><p>从上面的tw_apply表就可以知道：</p>
<ul>
<li><p>在用户提出申请后，物资申请信息被后端拼成了一个字符串存储在apply_content（同时利用了前端的数据执行了物品可借数的预扣除，所以这部分没有用到物资申请信息字符串的解析）</p>
</li>
<li><p>通过审核后，物品正式借出，这时候只留有物资申请信息的字符串存储在数据库，所以需要后端对该字符串解析提取出申请物资与其借用数量，再去操作数据库</p>
</li>
</ul>
<p>还好后端大哥没有把物资申请信息的字符串直接发给前端，我真的哭死，设计数据库的那个出来挨打（前端不需要解析，但是要拼接展示字符串）</p>
<p>数据库设计十分不合理，甚至不符合第一范式，<strong>浪费数据库大量存储空间</strong>不说，而且后端拼接字符串解析字符串这一过程<strong>十分耗时且占用内存</strong>，而且最新的需求是需要增加一个审核过程申请物资调整功能</p>
<p>所以我将物资申请表进行分表（水平分表），分出物资申请详情表并联系物资信息表，其结构如下</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203031646110.png" alt="image-20220303164602406"></p>
<p>删除掉apply_content字段，节省数据库空间</p>
<p>分表后，通过tw_applydetail表，我们对物资申请信息的所以内容进行操作，省去了物资审核接口对字符串解析的耗时过程并且方便审核过程申请物资调整功能的开发（通过tw_appdetail找到物品信息和物品数量）</p>
<h5 id="3-优化操作：存储过程脚本"><a href="#3-优化操作：存储过程脚本" class="headerlink" title="3.优化操作：存储过程脚本"></a>3.优化操作：存储过程脚本</h5><p>存储过程（Stored Procedure）是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象</p>
<p>这里值得注意的是在遍历游标的循环中，如果查询不存在或为空会跳出循环</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER<span class="operator">=</span>`Autovy`@`localhost` <span class="keyword">PROCEDURE</span> `demo`()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">		</span><br><span class="line"> <span class="comment">-- 定义变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> s <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> n TINYTEXT;</span><br><span class="line"><span class="keyword">DECLARE</span> m <span class="type">INT</span>(<span class="number">11</span>);</span><br><span class="line"> # 求分割符号<span class="string">&#x27;,&#x27;</span>的位置</span><br><span class="line"><span class="keyword">DECLARE</span> _index <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line"># 单个物品申请信息</span><br><span class="line"><span class="keyword">DECLARE</span> str TINYTEXT;</span><br><span class="line"></span><br><span class="line"># 单个物品申请信息长度</span><br><span class="line"><span class="keyword">DECLARE</span> strLength <span class="type">int</span>;</span><br><span class="line"></span><br><span class="line"># 物品名称</span><br><span class="line"><span class="keyword">DECLARE</span> goodName <span class="type">VARCHAR</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"># 物品数量</span><br><span class="line"><span class="keyword">DECLARE</span> goodCount <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"># 物品id</span><br><span class="line"><span class="keyword">DECLARE</span> goodId <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义游标，并将sql结果集赋值给游标</span></span><br><span class="line"><span class="keyword">DECLARE</span> apply_id1 <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> id, apply_content <span class="keyword">FROM</span> tw_apply <span class="keyword">WHERE</span> apply_content <span class="keyword">LIKE</span> &quot;本部%&quot;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 声明当游标遍历完后将标志变量置成1</span></span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">NOT</span> FOUND <span class="keyword">SET</span> s<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 打开游标</span></span><br><span class="line"><span class="keyword">OPEN</span> apply_id1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将游标中的值赋值给变量，注意：变量名不要和返回列名同名，变量顺序要和sql结果顺序一致</span></span><br><span class="line"><span class="keyword">FETCH</span> apply_id1 <span class="keyword">into</span> m, n;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 当s != 1,一直循环</span></span><br><span class="line">while s<span class="operator">&lt;&gt;</span><span class="number">1</span> do</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">SET</span> _index <span class="operator">=</span> LOCATE(<span class="string">&#x27;;&#x27;</span>, n);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">-- 通过;分割单个物品的申请信息：北院—帐篷物品1个;北院—椅子物品1个;北院—桌子物品1个;</span></span><br><span class="line">	while _index <span class="operator">&gt;</span> <span class="number">0</span>  do</span><br><span class="line">		</span><br><span class="line">		<span class="comment">-- 拿到单个物品申请信息：本部——桌子物品1个</span></span><br><span class="line">		<span class="keyword">SET</span> str <span class="operator">=</span> <span class="keyword">LEFT</span>(n, _index<span class="number">-1</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">SET</span> strLength <span class="operator">=</span> LENGTH(str) <span class="operator">/</span> <span class="number">5</span>;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">-- 拿到物品名称</span></span><br><span class="line">		<span class="keyword">SET</span> goodName <span class="operator">=</span> <span class="keyword">LEFT</span>(str, strLength);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">-- 拿到物品个数(类型转换为整数)</span></span><br><span class="line">		<span class="keyword">SET</span> goodCount <span class="operator">=</span> <span class="built_in">CAST</span>(<span class="keyword">LEFT</span>(<span class="keyword">RIGHT</span>(str, <span class="number">2</span>), <span class="number">1</span>) <span class="keyword">AS</span> signed) ;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">SELECT</span> goodName;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">-- 按物品名称查到物品id并存储到goodId中</span></span><br><span class="line">		<span class="comment">-- 这里如果查询不存在或为空会跳出游标循环，值得注意</span></span><br><span class="line">		<span class="keyword">SELECT</span> goods_id <span class="keyword">into</span> goodId <span class="keyword">FROM</span> tw_goods <span class="keyword">WHERE</span> goods_show <span class="keyword">LIKE</span> goodName <span class="keyword">ORDER</span> <span class="keyword">BY</span> goods_count <span class="keyword">DESC</span> LIMIT <span class="number">1</span>;</span><br><span class="line">			</span><br><span class="line">		<span class="comment">-- 插入数据</span></span><br><span class="line">		<span class="keyword">INSERT</span> tw_applydetail(apply_id, good_id, count) <span class="keyword">VALUES</span> (m, goodId, goodCount);</span><br><span class="line">			</span><br><span class="line">		<span class="comment">-- 移动到下个分界点</span></span><br><span class="line">		<span class="keyword">SET</span> n <span class="operator">=</span> SUBSTR(n <span class="keyword">FROM</span> _index<span class="operator">+</span><span class="number">1</span>);</span><br><span class="line">		<span class="keyword">SET</span> _index <span class="operator">=</span> LOCATE(<span class="string">&#x27;;&#x27;</span>, n);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">end</span> while;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">-- 执行业务逻辑</span></span><br><span class="line">	<span class="keyword">set</span> i <span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 读取下一条数据，读取完成置变量s=1</span></span><br><span class="line"><span class="keyword">FETCH</span> apply_id1 <span class="keyword">into</span> m, n;</span><br><span class="line"><span class="keyword">end</span> while;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭游标</span></span><br><span class="line"><span class="keyword">close</span> apply_id1;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<p>当时经过一天的对存储过程的学习，我总结出了以下经验：存储过程非常不方便调试，而且报错信息只定位不报错误类型（sql是这样的）。如果能重来，对数据库的批量操作，首选Python或Shell</p>
<h5 id="4-优化结果"><a href="#4-优化结果" class="headerlink" title="4.优化结果"></a>4.优化结果</h5><ul>
<li>截至目前物资申请表已有4817条数据，考虑到后面数据会长期积累，这样的优化是有必要的</li>
<li>去掉后端耗时耗内存的字符串解析工作</li>
<li>节省数据库存储空间，优化前申请表内存占0.79MB，优化后占0.56MB</li>
</ul>
<p>另外附加一个容量查询小工具，可查询数据库各表容量大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">table_schema as &#39;数据库&#39;,</span><br><span class="line">table_name as &#39;表名&#39;,</span><br><span class="line">table_rows as &#39;记录数&#39;,</span><br><span class="line">truncate(data_length&#x2F;1024&#x2F;1024, 2) as &#39;数据容量(MB)&#39;,</span><br><span class="line">truncate(index_length&#x2F;1024&#x2F;1024, 2) as &#39;索引容量(MB)&#39;</span><br><span class="line">from information_schema.tables</span><br><span class="line">where table_schema&#x3D;&#39;bgs&#39;</span><br><span class="line">order by data_length desc, index_length desc;</span><br></pre></td></tr></table></figure>



<h4 id="二-索引优化查询"><a href="#二-索引优化查询" class="headerlink" title="二.索引优化查询"></a>二.索引优化查询</h4><h5 id="1-相关表结构"><a href="#1-相关表结构" class="headerlink" title="1.相关表结构"></a>1.相关表结构</h5><p>日志记录表：共33687条数据</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203031910440.png" alt="image-20220303191047146"></p>
<h5 id="2-优化思路：添加索引"><a href="#2-优化思路：添加索引" class="headerlink" title="2.优化思路：添加索引"></a>2.优化思路：添加索引</h5><p>关于索引的知识点这里不细说，推荐阅读：<a href="https://javaguide.cn/database/mysql/mysql-index/">MySQL 索引详解</a></p>
<p>由于日志表数据庞大，有3万条数据，为了达到快速通过用户名模糊查找到日志操作内容和操作时间，就需要用到索引，另外在模糊查询中，<strong>like语句要使索引生效，like后不能以%开始，也就是说 （like %字段名%） 、（like %字段名）这类语句会使索引失效，而（like 字段名）、（like 字段名%）这类语句索引是可以正常使用</strong></p>
<p>所以我将查询的模糊匹配由“%xxxx%”改为“xxxx%”，只模糊匹配前面部分</p>
<h5 id="3-优化操作"><a href="#3-优化操作" class="headerlink" title="3.优化操作"></a>3.优化操作</h5><p>这里直接使用Navicat可视化添加索引，因为后台查询日志是需要用用户名模糊查找到日志操作内容和操作时间，所以需要添加的索引为log_realnam</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203031939750.png" alt="image-20220303193939350"></p>
<p>更改mybatis的sql映射，解决sql注入和索引失效问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT log_realname, log_content, log_time FROM tw_log WHERE log_realname LIKE &quot;%$&#123;log_name&#125;%&quot;;  </span><br></pre></td></tr></table></figure>



<p>在这种情况下使用#程序会报错，新手程序员就把#号改成了$,这样如果java代码层面没有对用户输入的内容做处理势必会产生SQL注入漏洞。</p>
<p>正确写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT log_realname, log_content, log_time FROM tw_log WHERE log_realname LIKE concat(‘%’,#&#123;log_name&#125;, ‘%’) </span><br></pre></td></tr></table></figure>

<h5 id="4-优化结果-1"><a href="#4-优化结果-1" class="headerlink" title="4.优化结果"></a>4.优化结果</h5><ul>
<li>添加索引前使用用户名模糊查询日志，耗时大约0.045s，添加索引后耗时大约0.032s，减少了磁盘IO，提高了查询速度</li>
<li>修改mybatis中模糊查询的sql语句，解决索引失效的问题，并解决了模糊查询中拼接字符串的sql注入问题</li>
</ul>
<h3 id="Elasticsearch搜索"><a href="#Elasticsearch搜索" class="headerlink" title="Elasticsearch搜索"></a>Elasticsearch搜索</h3><h4 id="一-ES配置"><a href="#一-ES配置" class="headerlink" title="一.ES配置"></a>一.ES配置</h4><h5 id="1-ES可视化"><a href="#1-ES可视化" class="headerlink" title="1.ES可视化"></a>1.ES可视化</h5><p>kibana是es的可视化工具，开启后可以通过访问 <a href="http://127.0.0.1:5601/">http://127.0.0.1:5601/</a>  查看kibana页面</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203111029709.png" alt="image-20220311102937485"></p>
<h5 id="2-配置ES"><a href="#2-配置ES" class="headerlink" title="2.配置ES"></a>2.配置ES</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ElasticSearch</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-nodes</span> = <span class="string">127.0.0.1:9300</span></span><br></pre></td></tr></table></figure>



<h4 id="二-ES开发流程"><a href="#二-ES开发流程" class="headerlink" title="二.ES开发流程"></a>二.ES开发流程</h4><h5 id="1-ES注解实体类"><a href="#1-ES注解实体类" class="headerlink" title="1.ES注解实体类"></a>1.ES注解实体类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Document注解Category实体类，一个Category对象即为一个Document（相当于数据库的一行）</span></span><br><span class="line"><span class="comment">// 连接到es的tmall_springboot索引（相当于数据库），produt类（相当于表）上</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;tmall_springboot&quot;,type = &quot;product&quot;)</span></span><br></pre></td></tr></table></figure>



<h5 id="2-esDAO的创建"><a href="#2-esDAO的创建" class="headerlink" title="2.esDAO的创建"></a>2.esDAO的创建</h5><p>由于整合了ES的JPA和操作数据库使用的JPA有冲突，所以不能放在同一个包下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.tmall.es;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.how2java.tmall.pojo.Product;</span><br><span class="line"><span class="comment">// 用于链接es的DAO</span></span><br><span class="line"><span class="comment">// esDAO和其他DAO不能放在一个包下否则会启动异常</span></span><br><span class="line"><span class="comment">// 主要使用es实现对产品的模糊查询</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductESDAO</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Product</span>,<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="3-Application引入ES"><a href="#3-Application引入ES" class="headerlink" title="3.Application引入ES"></a>3.Application引入ES</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// esJPA引入</span></span><br><span class="line"><span class="meta">@EnableElasticsearchRepositories(basePackages = &quot;com.how2java.tmall.es&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JPA引入</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(basePackages = &#123;&quot;com.how2java.tmall.dao&quot;, &quot;com.how2java.tmall.pojo&quot;&#125;)</span></span><br></pre></td></tr></table></figure>





<h5 id="4-服务层同步ES"><a href="#4-服务层同步ES" class="headerlink" title="4.服务层同步ES"></a>4.服务层同步ES</h5><p><strong>增删改操作</strong></p>
<p>增删改操作的数据需要同步ES和数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过ProductDAO对数据库有影响的</span></span><br><span class="line"><span class="comment">// 都要通过productESDAO同步到es</span></span><br><span class="line"><span class="meta">@CacheEvict(allEntries=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Product bean)</span> </span>&#123;</span><br><span class="line">	productDAO.save(bean);</span><br><span class="line">	productESDAO.save(bean);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheEvict(allEntries=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	productDAO.delete(id);</span><br><span class="line">	productESDAO.delete(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheEvict(allEntries=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Product bean)</span> </span>&#123;</span><br><span class="line">	productDAO.save(bean);</span><br><span class="line">	productESDAO.save(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>ES初始化</strong></p>
<p>ES内数据为空，就将数据库中的数据同步到es</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化数据到es</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDatabase2ES</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">	Page&lt;Product&gt; page =productESDAO.findAll(pageable);</span><br><span class="line">	<span class="comment">// 查询es中是否有数据</span></span><br><span class="line">	<span class="keyword">if</span>(page.getContent().isEmpty()) &#123;</span><br><span class="line">		<span class="comment">// 如果数据为空，将数据从数据库同步到es中</span></span><br><span class="line">		List&lt;Product&gt; products= productDAO.findAll();</span><br><span class="line">		<span class="keyword">for</span> (Product product : products) &#123;</span><br><span class="line">			productESDAO.save(product);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="5-服务层查询ES"><a href="#5-服务层查询ES" class="headerlink" title="5.服务层查询ES"></a>5.服务层查询ES</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过es进行查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">search</span><span class="params">(String keyword, <span class="keyword">int</span> start, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 初始化es</span></span><br><span class="line">	initDatabase2ES();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// QueryBuilders提供了大量静态方法，用于生成各种不同类型的查询对象</span></span><br><span class="line">	<span class="comment">// 构建查询条件（多条件查询）</span></span><br><span class="line">	FunctionScoreQueryBuilder functionScoreQueryBuilder = QueryBuilders.functionScoreQuery()</span><br><span class="line">			<span class="comment">// 为提供的字段名和文本创建一个通用查询</span></span><br><span class="line">			.add(QueryBuilders.matchPhraseQuery(<span class="string">&quot;name&quot;</span>, keyword),</span><br><span class="line">					ScoreFunctionBuilders.weightFactorFunction(<span class="number">100</span>))</span><br><span class="line">			<span class="comment">// 设置权重分为求和模式</span></span><br><span class="line">			.scoreMode(<span class="string">&quot;sum&quot;</span>)</span><br><span class="line">			<span class="comment">// 设置权重分最低分</span></span><br><span class="line">			.setMinScore(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置分页参数</span></span><br><span class="line">	Sort sort  = <span class="keyword">new</span> Sort(Sort.Direction.DESC,<span class="string">&quot;id&quot;</span>);</span><br><span class="line">	Pageable pageable = <span class="keyword">new</span> PageRequest(start, size,sort);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加分页参数和查询条件</span></span><br><span class="line">	SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">			.withPageable(pageable)</span><br><span class="line">			.withQuery(functionScoreQueryBuilder).build();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 执行查询获取结果</span></span><br><span class="line">	Page&lt;Product&gt; page = productESDAO.search(searchQuery);</span><br><span class="line">	<span class="comment">// 返回结果</span></span><br><span class="line">	<span class="keyword">return</span> page.getContent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Redis缓存"><a href="#Redis缓存" class="headerlink" title="Redis缓存"></a>Redis缓存</h3><h4 id="一-Redis可视化工具"><a href="#一-Redis可视化工具" class="headerlink" title="一.Redis可视化工具"></a>一.Redis可视化工具</h4><p>推荐使用RedisClient，数据一般都在db0中</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203102017619.png" alt="image-20220310201748019"></p>
<h4 id="二-Redis配置"><a href="#二-Redis配置" class="headerlink" title="二.Redis配置"></a>二.Redis配置</h4><h5 id="1-Redis配置类"><a href="#1-Redis配置类" class="headerlink" title="1.Redis配置类"></a>1.Redis配置类</h5><p>该缓存配置类主要是使redis内的key和value转换为可读性的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//Redis 缓存配置类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisTemplate&lt;?,?&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        RedisSerializer stringSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.PUBLIC_ONLY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        redisTemplate.setKeySerializer(stringSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(stringSerializer);  </span><br><span class="line">         </span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);         </span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        CacheManager cacheManager = <span class="keyword">new</span> RedisCacheManager(redisTemplate);</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="2-Redis配置文件"><a href="#2-Redis配置文件" class="headerlink" title="2.Redis配置文件"></a>2.Redis配置文件</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="meta">spring.redis.pool.max-active</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line"><span class="meta">spring.redis.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.pool.max-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.pool.min-idle</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line"><span class="meta">spring.redis.timeout</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>



<h4 id="三-缓存启用与检测"><a href="#三-缓存启用与检测" class="headerlink" title="三.缓存启用与检测"></a>三.缓存启用与检测</h4><h5 id="1-缓存的启用"><a href="#1-缓存的启用" class="headerlink" title="1.缓存的启用"></a>1.缓存的启用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 系统启动入口</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 启动缓存</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@EnableElasticsearchRepositories(basePackages = &quot;com.how2java.tmall.es&quot;)</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(basePackages = &#123;&quot;com.how2java.tmall.dao&quot;, &quot;com.how2java.tmall.pojo&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 检测端口上的服务是否启动</span></span><br><span class="line">        PortUtil.checkPort(<span class="number">6379</span>,<span class="string">&quot;Redis 服务端&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        PortUtil.checkPort(<span class="number">9300</span>,<span class="string">&quot;ElasticSearch 服务端&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        PortUtil.checkPort(<span class="number">5601</span>,<span class="string">&quot;Kibana 工具&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-服务开启检测"><a href="#2-服务开启检测" class="headerlink" title="2.服务开启检测"></a>2.服务开启检测</h5><p>这里的PortUtil是一个检测端口上服务是否运行的简单工具类，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.how2java.tmall.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工具类，检查某个端口对应的服务是否启动</span></span><br><span class="line"><span class="comment">// 可以用于检查redis服务和es服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PortUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">testPort</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ServerSocket ss = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">			ss.close();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (java.net.BindException e) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkPort</span><span class="params">(<span class="keyword">int</span> port, String server, <span class="keyword">boolean</span> shutdown)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!testPort(port)) &#123;</span><br><span class="line">			<span class="keyword">if</span>(shutdown) &#123;</span><br><span class="line">				String message =String.format(<span class="string">&quot;在端口 %d 未检查得到 %s 启动%n&quot;</span>,port,server);</span><br><span class="line">				JOptionPane.showMessageDialog(<span class="keyword">null</span>, message);</span><br><span class="line">				System.exit(<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				String message =String.format(<span class="string">&quot;在端口 %d 未检查得到 %s 启动%n,是否继续?&quot;</span>,port,server);</span><br><span class="line">			    <span class="keyword">if</span>(JOptionPane.OK_OPTION != 	JOptionPane.showConfirmDialog(<span class="keyword">null</span>, message)) </span><br><span class="line">					System.exit(<span class="number">1</span>);</span><br><span class="line">			    </span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="四-缓存的使用"><a href="#四-缓存的使用" class="headerlink" title="四.缓存的使用"></a>四.缓存的使用</h4><p>缓存的使用一般在服务层使用</p>
<h5 id="1-有序集合管理"><a href="#1-有序集合管理" class="headerlink" title="1.有序集合管理"></a>1.有序集合管理</h5><p>通过在服务层中注解@CacheConfig，创建一个有序集合类型的缓存，管理该服务下所有的keys</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分类服务层</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// redis缓存一般都在服务层进行操作</span></span><br><span class="line"><span class="comment">// 分类服务下的所有keys都由categories来管理（数据存储与categories是平行关系）</span></span><br><span class="line"><span class="meta">@CacheConfig(cacheNames=&quot;categories&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line">	.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203102026158.png" alt="image-20220310202613389"></p>
<h5 id="2查询插入缓存"><a href="#2查询插入缓存" class="headerlink" title="2查询插入缓存"></a>2查询插入缓存</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获得单条分类服务</span></span><br><span class="line"><span class="comment">// 添加一条缓存到redis中，以categories-one- + 参数id为key值</span></span><br><span class="line"><span class="comment">// 存储的主要数据为Category对象</span></span><br><span class="line"><span class="meta">@Cacheable(key=&quot;&#x27;categories-one-&#x27;+ #p0&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Category <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	Category c= categoryDAO.findOne(id);</span><br><span class="line">	<span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出单页分类表（提供分页组索引）</span></span><br><span class="line"><span class="comment">// 添加一条缓存到redis中，以categories-page- + 参数start + 参数size 为key值</span></span><br><span class="line"><span class="comment">// 存储的主要数据为Page4Navigator&lt;Category&gt;数组</span></span><br><span class="line"><span class="meta">@Cacheable(key=&quot;&#x27;categories-page-&#x27;+#p0+ &#x27;-&#x27; + #p1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page4Navigator&lt;Category&gt; <span class="title">list</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> size, <span class="keyword">int</span> navigatePages)</span> </span>&#123;</span><br><span class="line">   	Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">	Pageable pageable = <span class="keyword">new</span> PageRequest(start, size, sort);</span><br><span class="line">	Page pageFromJPA =categoryDAO.findAll(pageable);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Page4Navigator&lt;&gt;(pageFromJPA,navigatePages);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>返回的java对象或集合都会变成JSON字符串</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203102031241.png" alt="image-20220310203123882"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203102032065.png" alt="image-20220310203207786"></p>
<h5 id="3-更新删除缓存"><a href="#3-更新删除缓存" class="headerlink" title="3.更新删除缓存"></a>3.更新删除缓存</h5><p>准确来说是插入，删除，更新删除缓存以保持数据一致性</p>
<p>使用@CacheEvict(allEntries=true)删除category~keys的所有keys</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加删除更新时</span></span><br><span class="line"><span class="comment">// 增加分类服务</span></span><br><span class="line"><span class="meta">@CacheEvict(allEntries=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Category bean)</span> </span>&#123;</span><br><span class="line">	categoryDAO.save(bean);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除分类服务</span></span><br><span class="line"><span class="meta">@CacheEvict(allEntries=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	categoryDAO.delete(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新分类服务</span></span><br><span class="line"><span class="meta">@CacheEvict(allEntries=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Category bean)</span> </span>&#123;</span><br><span class="line">	categoryDAO.save(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Shiro登录验证"><a href="#Shiro登录验证" class="headerlink" title="Shiro登录验证"></a>Shiro登录验证</h3><p>由于本项目仅仅有用户一个权限，所以只需要判断用户是否登录，并不需要比较细粒度的权限分配</p>
<h4 id="一-JPARealm验证授权器"><a href="#一-JPARealm验证授权器" class="headerlink" title="一.JPARealm验证授权器"></a>一.JPARealm验证授权器</h4><p>Shiro与用户之间的中介，为Shiro提供验证和授权用户的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.tmall.realm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.how2java.tmall.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.how2java.tmall.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过JPA进行验证授权</span></span><br><span class="line"><span class="comment">// （相当于一个中介，拿着用户信息去数据库找用户拥有的角色和权限）</span></span><br><span class="line"><span class="comment">// 将Realm提供给Shiro，由其负责调用，不需要直接调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JPARealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 认证：查询用户身份与密码，解决你是谁的问题</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">		<span class="comment">// 从token中取出用户名称</span></span><br><span class="line">		String userName = token.getPrincipal().toString();</span><br><span class="line">		<span class="comment">// 查询用户表得到用户加密密码</span></span><br><span class="line">		User user = userService.getByName(userName);</span><br><span class="line">		String passwordInDB = user.getPassword();</span><br><span class="line">		<span class="comment">// 获得用户表中的盐</span></span><br><span class="line">		String salt = user.getSalt();</span><br><span class="line">		<span class="comment">// 以用户名，加密密码，盐，真实信息，真正姓名作为认证信息</span></span><br><span class="line">		SimpleAuthenticationInfo authenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(userName, passwordInDB, ByteSource.Util.bytes(salt),</span><br><span class="line">				getName());</span><br><span class="line">		<span class="keyword">return</span> authenticationInfo;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 授权：赋予用户权限，解决你能做什么的问题</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		SimpleAuthorizationInfo s = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="二-Shiro配置"><a href="#二-Shiro配置" class="headerlink" title="二.Shiro配置"></a>二.Shiro配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.tmall.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.how2java.tmall.realm.JPARealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.LifecycleBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shiro配置文件</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LifecycleBeanPostProcessor <span class="title">getLifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过滤器，实现对请求的拦截和跳转</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shirFilter</span><span class="params">(SecurityManager securityManager)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建 ShiroFilterFactoryBean 对象</span></span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean  = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        <span class="comment">// 设置SecurityManager</span></span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           这里可以设置URL并为它们配置权限，本项目没有用到</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// shiro核心组件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建DefaultWebSecurityManager对象</span></span><br><span class="line">        DefaultWebSecurityManager securityManager =  <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">// 设置其使用的Realm</span></span><br><span class="line">        securityManager.setRealm(getJPARealm());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载身份认证与授权模块</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JPARealm <span class="title">getJPARealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JPARealm myShiroRealm = <span class="keyword">new</span> JPARealm();</span><br><span class="line">        myShiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());</span><br><span class="line">        <span class="keyword">return</span> myShiroRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定使用md5加密算法，并进行两次加密</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashedCredentialsMatcher <span class="title">hashedCredentialsMatcher</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashedCredentialsMatcher hashedCredentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        hashedCredentialsMatcher.setHashAlgorithmName(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line">        hashedCredentialsMatcher.setHashIterations(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> hashedCredentialsMatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  开启shiro aop注解支持.</span></span><br><span class="line"><span class="comment">     *  使用代理方式;所以需要开启代码支持;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> securityManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span></span>&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="三-注册接口"><a href="#三-注册接口" class="headerlink" title="三.注册接口"></a>三.注册接口</h4><p>Realm的验证需要对应注册里的加密方法即md5 * 2 + 盐</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册接口</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/foreregister&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">register</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">    String name =  user.getName();</span><br><span class="line">    String password = user.getPassword();</span><br><span class="line">    <span class="comment">// 对姓名中的特殊符号进行转义</span></span><br><span class="line">    name = HtmlUtils.htmlEscape(name);</span><br><span class="line">    user.setName(name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断用户名是否存在</span></span><br><span class="line">    <span class="keyword">boolean</span> exist = userService.isExist(name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(exist)&#123;</span><br><span class="line">        String message =<span class="string">&quot;用户名已经被使用,不能使用&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机生成盐</span></span><br><span class="line">    String salt = <span class="keyword">new</span> SecureRandomNumberGenerator().nextBytes().toString();</span><br><span class="line">    <span class="keyword">int</span> times = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 采用md5加密</span></span><br><span class="line">    String algorithmName = <span class="string">&quot;md5&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// md5 + 盐对用户密码进行加密得到加密密码</span></span><br><span class="line">    <span class="comment">// times = 2，表明进行两次的md5加密</span></span><br><span class="line">    String encodedPassword = <span class="keyword">new</span> SimpleHash(algorithmName, password, salt, times).toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将盐和加密密码存入数据库中</span></span><br><span class="line">    user.setSalt(salt);</span><br><span class="line">    user.setPassword(encodedPassword);</span><br><span class="line"></span><br><span class="line">    userService.add(user);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="四-登录接口"><a href="#四-登录接口" class="headerlink" title="四.登录接口"></a>四.登录接口</h4><p>配置好Shiro后，登录验证时可以快速使用啦！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 登录接口</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/forelogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> User userParam, HttpSession session)</span> </span>&#123;</span><br><span class="line">        String name =  userParam.getName();</span><br><span class="line">        name = HtmlUtils.htmlEscape(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// shiro认证登录（你是谁？）</span></span><br><span class="line">        <span class="comment">// subject指的是:&quot;当前正在执行的用户的特定的安全视图&quot;</span></span><br><span class="line">        <span class="comment">// 可以把Subject看成是shiro的&quot;User&quot;概念</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(name, userParam.getPassword());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            User user = userService.getByName(name);</span><br><span class="line">            <span class="comment">// 将user存储进seesion中，后续可以随时取出用于验证登录</span></span><br><span class="line">            session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">            <span class="keyword">return</span> Result.success();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            String message =<span class="string">&quot;账号密码错误&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>拦截前端某些没有权限的访问，如没有登录权限的用户访问个人信息表，跳转到登录页</p>
<h4 id="一-拦截器"><a href="#一-拦截器" class="headerlink" title="一.拦截器"></a>一.拦截器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.tmall.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录拦截器，用于拦截未登录情况下的访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	HttpSession session = httpServletRequest.getSession();</span><br><span class="line">        String contextPath=session.getServletContext().getContextPath();</span><br><span class="line">		<span class="comment">// 需要验证登录的页面</span></span><br><span class="line">        String[] requireAuthPages = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">        		<span class="string">&quot;buy&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;alipay&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;payed&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;cart&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;bought&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;confirmPay&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;orderConfirmed&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;forebuyone&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;forebuy&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;foreaddCart&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;forecart&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;forechangeOrderItem&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;foredeleteOrderItem&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;forecreateOrder&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;forepayed&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;forebought&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;foreconfirmPay&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;foreorderConfirmed&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;foredeleteOrder&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;forereview&quot;</span>,</span><br><span class="line">        		<span class="string">&quot;foredoreview&quot;</span></span><br><span class="line">        		</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 获取uri</span></span><br><span class="line">        String uri = httpServletRequest.getRequestURI();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//移除前缀/tmall_springboot</span></span><br><span class="line">        uri = StringUtils.remove(uri, contextPath+<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        String page = uri;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 判断链接名，是否以验证登录数组里的开头</span></span><br><span class="line">		<span class="keyword">if</span>(begingWith(page, requireAuthPages))&#123;</span><br><span class="line">			Subject subject = SecurityUtils.getSubject();</span><br><span class="line">			<span class="comment">// 如果是则跳转到login页面</span></span><br><span class="line">			<span class="keyword">if</span>(!subject.isAuthenticated()) &#123;</span><br><span class="line">				httpServletResponse.sendRedirect(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">begingWith</span><span class="params">(String page, String[] requiredAuthPages)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">    	<span class="keyword">for</span> (String requiredAuthPage : requiredAuthPages) &#123;</span><br><span class="line">			<span class="keyword">if</span>(StringUtils.startsWith(page, requiredAuthPage)) &#123;</span><br><span class="line">				result = <span class="keyword">true</span>;	</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">    	<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过实现SpringMCV的HandlerInterceptor来实现拦截器，其中包含3个方法：</p>
<p><strong>public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handle)</strong></p>
<p>该方法将在请求处理之前进行调用。SpringMVC中的Interceptor是链式的调用的，在一个应用中或者说是在一个请求中可以同时存在多个Interceptor 。</p>
<p>每个Interceptor的调用会依据它的声明顺序依次执行，而且最先执行的都是Interceptor中的preHandle方法，所以可以在这个方法中进行一些前置初始化操作或者是对当前请求的一个预处理，也可以在这个方法中进行一些判断来决定请求是否要继续进行下去。</p>
<p>该方法的返回值是布尔值Boolean类型的，当它返回为false 时，表示请求结束，后续的Interceptor和Controller都不会再执行；</p>
<p>当返回值为true时就会继续调用下一个Interceptor的preHandle方法，如果已经是最后一个Interceptor的时候就会是调用当前请求的Controller方法</p>
<p><strong>postHandle(HttpServletRequest request, HttpServletResponse response, Object handle, ModelAndView modelAndView)</strong><br>由preHandle方法的解释我们知道这个方法包括后面要说到的afterCompletion方法都只能是在当前所属的Interceptor的preHandle方法的返回值为true时才能被调用</p>
<p>postHandle方法，顾名思义就是在当前请求进行处理之后，也就是Controller方法调用之后执行，<br>但是它会在DispatcherServlet进行视图返回渲染之前被调用，所以我们可以在这个方法中对Controller处理之后的ModelAndView对象进行操作。</p>
<p>postHandle方法被调用的方向跟preHandle是相反的，也就是说先声明的Interceptor 的postHandle方法反而会后执行，这和Struts2里面的Interceptor 的执行过程有点类型。Struts2 里面的Interceptor 的执行过程也是链式的，只是在Struts2 里面需要手动调用ActionInvocation 的invoke 方法来触发对下一个Interceptor 或者是Action 的调用，然后每一个Interceptor 中在invoke 方法调用之前的内容都是按照声明顺序执行的，而invoke 方法之后的内容就是反向的</p>
<p><strong>afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handle, Exception ex)</strong><br>该方法也是需要当前对应的Interceptor 的preHandle 方法的返回值为true 时才会执行。</p>
<p>顾名思义，该方法将在整个请求结束之后，也就是在DispatcherServlet 渲染了对应的视图之后执行。<br>这个方法的主要作用是用于进行资源清理工作的。</p>
<h4 id="二-拦截器配置"><a href="#二-拦截器配置" class="headerlink" title="二.拦截器配置"></a>二.拦截器配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 访问拦截器配置</span></span><br><span class="line"><span class="keyword">package</span> com.how2java.tmall.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.how2java.tmall.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.how2java.tmall.interceptor.OtherInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 拦截器的配置</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfigurer</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> LoginInterceptor <span class="title">getLoginIntercepter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> LoginInterceptor();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="技术亮点"><a href="#技术亮点" class="headerlink" title="技术亮点"></a>技术亮点</h2><h3 id="循环依赖解决方案"><a href="#循环依赖解决方案" class="headerlink" title="循环依赖解决方案"></a>循环依赖解决方案</h3><h4 id="一-Springboot注解补充"><a href="#一-Springboot注解补充" class="headerlink" title="一.Springboot注解补充"></a>一.Springboot注解补充</h4><p>实体类中，@Transient注解的字段，是不与数据库映射的，可以额外添加到接口的字段即该字段不参与自动关联中的sql查询</p>
<p>这些字段可以用来存储：通过查询数据库得到的列表（不用另外建集合对象存储），需要经过计算的数据（也可以放在数据库），数据状态（也可以放在数据库）</p>
<p>订单表@Transient注解字段，在服务层进行赋值操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 订单项列表</span></span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> List&lt;OrderItem&gt; orderItems;</span><br><span class="line"><span class="comment">// 订单总金额</span></span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> total;</span><br><span class="line"><span class="comment">// 订单物品总数量</span></span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> totalNumber;</span><br><span class="line"><span class="comment">// 订单状态</span></span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> String statusDesc;</span><br></pre></td></tr></table></figure>



<p>使用</p>
<p>@ManyToOne<br>@JoinColumn(name=”pid”)</p>
<p>可以标注关系，就可以使用JPA的findBy等方法如：<code>findByProductOrderByIdDesc</code>    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个产品有多个属性值</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name=&quot;pid&quot;)</span>	</span><br><span class="line"><span class="keyword">private</span> Product product;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个属性有多个属性值（属性 + 产品决定一条属性值）</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name=&quot;ptid&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Property property;</span><br></pre></td></tr></table></figure>



<h4 id="二-数据库设计：多对多关系"><a href="#二-数据库设计：多对多关系" class="headerlink" title="二.数据库设计：多对多关系"></a>二.数据库设计：多对多关系</h4><p>在实际应用中，多对多关系会分解为两个一对多的关系</p>
<p>属性值由产品和属性共同决定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个产品，有多个属性值（不同属性，同一产品）</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name=&quot;pid&quot;)</span> </span><br><span class="line"><span class="keyword">private</span> Product product;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个属性有多个属性值（不同产品，同一属性）</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name=&quot;ptid&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Property property;</span><br></pre></td></tr></table></figure>



<p>订单项由订单，用户，产品共同决定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个产品可以有多个订单项（不同用户/不同订单，同一产品）</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name=&quot;pid&quot;)</span>	</span><br><span class="line"><span class="keyword">private</span> Product product;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个订单可以有多个订单项（不同产品/不同用户，同一订单）</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name=&quot;oid&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Order order;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个用户可以有多个订单项（不同产品/不同订单，同一用户）</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name=&quot;uid&quot;)</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br></pre></td></tr></table></figure>

<p>在review类中的内对象如：prouct，user由于一对多的关联，在数据库中映射为pid，uid字段）</p>
<p>所以说JPA是一个ORM框架，对象和数据库无缝衔接</p>
<h4 id="三-循环依赖的解决"><a href="#三-循环依赖的解决" class="headerlink" title="三.循环依赖的解决"></a>三.循环依赖的解决</h4><p>在SpringBoot + JPA的架构中，容易出现循环依赖问题，一般会出现在一对多的场景下，总结来说是一对多实体中都要引用对方来维持OnetoMany的关系，所以极容易出现循环依赖:(</p>
<h5 id="1-经典场景"><a href="#1-经典场景" class="headerlink" title="1.经典场景"></a>1.经典场景</h5><p>订单项中引用订单，以构成多对一关系</p>
<p>可以使用订单项查找其属于的订单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个订单可以有多个订单项（不同产品/不同用户，同一订单）</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name=&quot;oid&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Order order;</span><br></pre></td></tr></table></figure>



<p>订单中引用订单项存储在集合中，用来存储从数据库查询来的结构（往往是因为要利用这些字段进行计算）</p>
<p>可以使用订单id查找订单项列表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 订单项列表</span></span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> List&lt;OrderItem&gt; orderItems;</span><br><span class="line"><span class="comment">// 订单总金额</span></span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> total;</span><br><span class="line"><span class="comment">// 订单物品总数量</span></span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> totalNumber;</span><br></pre></td></tr></table></figure>



<p>这样的结构就是循环依赖，导致数据重复加载，因为orderItems要调用方法填充，所以会为空（一般情况下会栈溢出）最终造成的数据是：Order含有orderItems，orderItems含有Order，Order的orderItem列表为空，所以这里的Order重复了一次</p>
<h5 id="2-方案一：-JsonBackReference注解"><a href="#2-方案一：-JsonBackReference注解" class="headerlink" title="2.方案一：@JsonBackReference注解"></a>2.方案一：@JsonBackReference注解</h5><p>JsonBackReference注解用在一（一对多的一）的一方，可以阻止其被序列化，前提是对应的接口不需要调用到它，而只是需要用它来查询</p>
<p>如：一个产品有多张图片，我们不需要在图片列表接口使用到产品信息，而只是需要用产品id查询其图片</p>
<p><strong>产品类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="comment">// 产品首图</span></span><br><span class="line"><span class="keyword">private</span> ProductImage firstProductImage;</span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ProductImage&gt; productSingleImages;</span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ProductImage&gt; productDetailImages;</span><br></pre></td></tr></table></figure>



<p><strong>产品图片类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name=&quot;pid&quot;)</span></span><br><span class="line"><span class="meta">@JsonBackReference</span></span><br><span class="line"><span class="keyword">private</span> Product product;</span><br></pre></td></tr></table></figure>



<p><strong>缺点</strong></p>
<ul>
<li>关系是双向的，使用了JsonBackReference，就无法使用根据图片找到其属于的产品的方法，只能单方向查询即根据产品查找到其图片列表</li>
<li>JsonBackReference标记的字段与Redis的整合会有冲突</li>
</ul>
<h5 id="3-方案二：及时清除法"><a href="#3-方案二：及时清除法" class="headerlink" title="3.方案二：及时清除法"></a>3.方案二：及时清除法</h5><p>在服务层定义清除方法，在控制层调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Orderitem中有Order字段，标注多对一关系</span></span><br><span class="line"><span class="comment">// Order中有Orderitem列表，用于存储订单项列表</span></span><br><span class="line"><span class="comment">// Order中有Orderitem列表，而Orderitem中又有Order字段，产生无穷的递归</span></span><br><span class="line"><span class="comment">// 所以这里需要设置Orderitem的Order设为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeOrderFromOrderItem</span><span class="params">(List &lt;Order&gt; orders)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (Order order : orders) &#123;</span><br><span class="line">		removeOrderFromOrderItem(order);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeOrderFromOrderItem</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">	List&lt;OrderItem&gt; orderItems= order.getOrderItems();</span><br><span class="line">	<span class="keyword">for</span> (OrderItem orderItem : orderItems) &#123;</span><br><span class="line">		orderItem.setOrder(<span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 填充Order的orderItem列表</span></span><br><span class="line">orderItemService.fill(page.getContent());</span><br><span class="line"><span class="comment">// 清除orderItem中的Order字段</span></span><br><span class="line">orderService.removeOrderFromOrderItem(page.getContent());</span><br></pre></td></tr></table></figure>



<h5 id="4-方案三：延迟加载"><a href="#4-方案三：延迟加载" class="headerlink" title="4.方案三：延迟加载"></a>4.方案三：延迟加载</h5><p>关于延迟加载：<a href="https://www.baeldung.com/hibernate-lazy-eager-loading">延迟加载介绍</a></p>
<p>使用<code>FetchType.LAZY</code>的方法，在不适用关系属性时，就不会自动获取，而一旦触发使用就会自动获取其属性 问题是<code>Jackson</code>对<code>Hibernate</code>的<code>LazyFetch</code>并不默认支持，需要一些额外支持</p>
<p>使用jackson-datatype-hibernate5插件使Jackson支持hibernate的lazyFetch</p>
<p>pom.xml中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-hibernate5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>增加配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateModuleConfig</span> </span>&#123;</span><br><span class="line">       <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> MappingJackson2HttpMessageConverter <span class="title">mappingJackson2HttpMessageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              MappingJackson2HttpMessageConverter jsonConverter = <span class="keyword">new</span> MappingJackson2HttpMessageConverter();</span><br><span class="line">              ObjectMapper objectMapper = jsonConverter.getObjectMapper();</span><br><span class="line">              objectMapper.registerModule(<span class="keyword">new</span> Hibernate5Module());</span><br><span class="line">              <span class="keyword">return</span> jsonConverter;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>实体上增加主键Id识别信息，防止出现循环引用 所有关系都为Lazy，直观上不会出现循环引用，但是当你通过一对多查询而多对一存在引用时仍会出现循环引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIdentityInfo(</span></span><br><span class="line"><span class="meta">      generator = ObjectIdGenerators.PropertyGenerator.class,</span></span><br><span class="line"><span class="meta">      property = &quot;id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CardModifyLog</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>





<h5 id="5-其他方案"><a href="#5-其他方案" class="headerlink" title="5.其他方案"></a>5.其他方案</h5><ul>
<li>创建DTO，类似的思路还有创建接口投影或者实体视图，见<a href="https://www.baeldung.com/spring-data-jpa-named-entity-graphs">Spring Data JPA和命名实体图</a>、<a href="https://docs.spring.io/spring-data/jpa/docs/2.2.2.RELEASE/reference/html/#projections">Spring data jpa 投影</a>。 问题在于需要根据情况创建多个视图或者多个投影（DTO），由于各个实体间关系的复杂程度，不建议用此方式</li>
<li>使用<code>@Transient</code>注解使所有的关系不被存储即不与数据库的字段对应，同时存在于实体中，每次使用时，自己手动查询set 也许是一种好办法，但是失去了关系的约束，可能得不偿失</li>
</ul>
<h3 id="缓存AOP拦截失效问题"><a href="#缓存AOP拦截失效问题" class="headerlink" title="缓存AOP拦截失效问题"></a>缓存AOP拦截失效问题</h3><h4 id="一-问题出现原因"><a href="#一-问题出现原因" class="headerlink" title="一.问题出现原因"></a>一.问题出现原因</h4><p>Spring只有在代理对象之间进行调用时，可以触发切面逻辑才可以使用事务，在同一个class中，方法B调用方法A，调用的是原对象的方法，而不通过代理对象就无法使用事务,如果方法B有事务只会使用方法B的事务，不会去管方法A的事务所以一个类中方法调用当前类的其他拥有事务的方法时这个被调用方法事务会失效</p>
<p>一个类中方法调用当前类的其他拥有事务的方法时这个被调用方法事务会失效。在默认的代理模式下，只有目标方法由外部调用，才能被 Spring 的事务拦截器拦截</p>
<p>同理使用spring cache模块的@Cacheable等注解 在同一个class中互相调用是无法走缓存的 因为这样无法访问到spring容器中的那个代理对象</p>
<p>因为Springboot的缓存机制是通过切面编程aop来实现，从fill方法中调用listByCategory即内部调用，aop是拦截不到的，自然不会走缓存</p>
<h4 id="二-问题解决方案"><a href="#二-问题解决方案" class="headerlink" title="二.问题解决方案"></a>二.问题解决方案</h4><p>可以使用 AspectJ 取代 Spring AOP 代理来解决，也可以使用工具类诱发aop</p>
<p>fill方法调用诱发工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 填充分类中的产品集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(Category category)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过SpringContextUtil调用listByCategory上的缓存方法</span></span><br><span class="line">    <span class="comment">// 即 @Cacheable(key=&quot;&#x27;products-cid-&#x27;+ #p0.id&quot;)</span></span><br><span class="line">    <span class="comment">// 这样在方法内部的查询也能够使用缓存</span></span><br><span class="line">    ProductService productService = SpringContextUtil.getBean(ProductService.class);</span><br><span class="line">    List&lt;Product&gt; products = productService.listByCategory(category);</span><br><span class="line">    productImageService.setFirstProdutImages(products);</span><br><span class="line">    category.setProducts(products);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>SpringContextUtil工具类诱发aop</p>
<p>我们需要在代码中需要动态获取其它bean，我们可以通过实现ApplicationContextAware接口来实现</p>
<p>ApplicationContextAware可以对当前bean传入对应的Spring上下文</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.tmall.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取spring容器，以访问容器中定义的其他bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextUtil</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spring应用上下文环境</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现ApplicationContextAware接口的回调方法，设置上下文环境</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        SpringContextUtil.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对象 这里重写了bean方法，起主要作用</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  Object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanId)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(beanId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="分页动态数组开发"><a href="#分页动态数组开发" class="headerlink" title="分页动态数组开发"></a>分页动态数组开发</h3><h4 id="一-简单分页方法"><a href="#一-简单分页方法" class="headerlink" title="一.简单分页方法"></a>一.简单分页方法</h4><h5 id="1-Service层实现简单分页方法"><a href="#1-Service层实现简单分页方法" class="headerlink" title="1.Service层实现简单分页方法"></a>1.Service层实现简单分页方法</h5><p>这里使用JPA提供的Pageable类型对列表进行分页</p>
<p>Pageable是从0开始计算页数的，所以这里需要<code>pageNum - 1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Category&gt; <span class="title">getpage</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageLimit)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Pageable pageable = <span class="keyword">new</span> PageRequest(pageNum - <span class="number">1</span> , pageLimit);</span><br><span class="line">    <span class="keyword">return</span> categoryDAO.findAll(pageable);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-Controller层调用分页方法"><a href="#2-Controller层调用分页方法" class="headerlink" title="2.Controller层调用分页方法"></a>2.Controller层调用分页方法</h5><p>通过@RequestParam设置从前台get方法发来的page和size信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/catepage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Category&gt; <span class="title">pageList</span><span class="params">(<span class="meta">@RequestParam(value = &quot;page&quot;, defaultValue = &quot;1&quot;)</span> <span class="keyword">int</span> page ,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="meta">@RequestParam(value = &quot;size&quot;, defaultValue = &quot;5&quot;)</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> categoryService.getpage(page, size);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-测试结果"><a href="#3-测试结果" class="headerlink" title="3.测试结果"></a>3.测试结果</h5><p>访问请求链接：<a href="http://localhost:8080/shopping_system/catepage?page=2&amp;size=5">http://localhost:8080/shopping_system/catepage?page=2&amp;size=5</a></p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202203060908527.png" alt="image-20211215173655433" style="zoom:80%;">



<h4 id="二-分页动态数组组类"><a href="#二-分页动态数组组类" class="headerlink" title="二.分页动态数组组类"></a>二.分页动态数组组类</h4><h5 id="1-分页功能进阶封装"><a href="#1-分页功能进阶封装" class="headerlink" title="1.分页功能进阶封装"></a>1.分页功能进阶封装</h5><p>JPA提供的分页类可以返回分割后的列表内容和分类信息如<strong>总共数据数（totalElements），总共分割的页面（totalPages）与当前访问的页面（number）</strong>，但是这些数据不能方便提供一个方便的接口让前端实现<strong>部分分页节点展示</strong>和<strong>分页节点遍历</strong></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203060908268.png" alt="image-20220228201059144"></p>
<p>当前是第8页，前面要显示3个，后面要显示3个，总共7条分页点，Pageable默认就不提供了，即Pageable无法实现根据当前选择页调整接口返回的数据，而只能硬性分页</p>
<p>所以我们需要做了一个 PageNavigator， 首先对 Page 类进行了封装，然后在构造方法里提供了一个 navigatePages 参数作为区间分页节点数</p>
<p>在构造方法里，还调用了 calcNavigatepageNums， 就是用来计算这个数值，并返回到一个int 数组变量 navigatepageNums ，方便前端遍历展示，而这个数组的大小为navigatePages</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageNavigator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引用Page类</span></span><br><span class="line">    Page&lt;T&gt; pageFromJPA;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> totalPages;</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">long</span> totalElements;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单页数据数</span></span><br><span class="line">    <span class="keyword">int</span> numberOfElements;</span><br><span class="line">    <span class="comment">// 分页数据</span></span><br><span class="line">    List&lt;T&gt; contents;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为首尾判断</span></span><br><span class="line">    <span class="keyword">boolean</span> first;</span><br><span class="line">    <span class="keyword">boolean</span> last;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否有数据</span></span><br><span class="line">    <span class="keyword">boolean</span> isHasContent;</span><br><span class="line">    <span class="comment">// 是否有前驱</span></span><br><span class="line">    <span class="keyword">boolean</span> isHasPrevious;</span><br><span class="line">    <span class="comment">// 是否有后续</span></span><br><span class="line">    <span class="keyword">boolean</span> isHasNext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 规定区间分页节点数</span></span><br><span class="line">    <span class="keyword">int</span> navigatePages;</span><br><span class="line">    <span class="comment">// 规定区间分页节点列表</span></span><br><span class="line">    <span class="keyword">int</span>[] navigatepageNums;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageNavigator</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造规定分页区间大小的分页函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageNavigator</span><span class="params">(Page&lt;T&gt; pageFromJPA, <span class="keyword">int</span> navigatePages)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 引用Page里面的成员变量</span></span><br><span class="line">        <span class="keyword">this</span>.pageFromJPA = pageFromJPA;</span><br><span class="line">        <span class="keyword">this</span>.navigatePages = navigatePages;</span><br><span class="line"></span><br><span class="line">        totalPages = pageFromJPA.getTotalPages();</span><br><span class="line">        number = pageFromJPA.getNumber();</span><br><span class="line">        totalElements = pageFromJPA.getTotalElements();</span><br><span class="line">        size = pageFromJPA.getNumberOfElements();</span><br><span class="line">        contents = pageFromJPA.getContent();</span><br><span class="line">        isHasContent = pageFromJPA.hasContent();</span><br><span class="line">        first = pageFromJPA.isFirst();</span><br><span class="line">        last = pageFromJPA.isLast();</span><br><span class="line">        isHasNext = pageFromJPA.hasNext();</span><br><span class="line">        isHasPrevious = pageFromJPA.hasPrevious();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算出分页节点列表</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calcNavigatepageNums</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] navigatepageNums;</span><br><span class="line">        <span class="comment">// 总页数</span></span><br><span class="line">        <span class="keyword">int</span> totalPages = getTotalPages();</span><br><span class="line">        <span class="comment">// 当前页</span></span><br><span class="line">        <span class="keyword">int</span> num = getNumber();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 总页数小于区间分页节点数</span></span><br><span class="line">        <span class="keyword">if</span>(totalPages &lt;= navigatePages)&#123;</span><br><span class="line">            navigatepageNums = <span class="keyword">new</span> <span class="keyword">int</span>[totalPages];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalPages; i++)&#123;</span><br><span class="line">                navigatepageNums[i] = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            navigatepageNums = <span class="keyword">new</span> <span class="keyword">int</span>[ navigatePages];</span><br><span class="line">            <span class="comment">// 计算区间列表首尾索引</span></span><br><span class="line">            <span class="keyword">int</span> startNum = num - navigatePages / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> endNum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(navigatePages % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                endNum = num + navigatePages / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                endNum = num + navigatePages / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 首navigatePages页</span></span><br><span class="line">            <span class="keyword">if</span>(startNum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                startNum = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; navigatePages; i++)&#123;</span><br><span class="line">                    navigatepageNums[i] = startNum++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 尾navigatePages页</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(startNum &gt; navigatePages)&#123;</span><br><span class="line">                endNum = totalPages;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = navigatePages - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">                    navigatepageNums[i] = endNum--;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 中间navigatePages页</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; navigatePages; i++)&#123;</span><br><span class="line">                    navigatepageNums[i] = startNum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.navigatepageNums = navigatepageNums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员变量对应的Getter与Setter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalPages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPages</span><span class="params">(<span class="keyword">int</span> totalPages)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalPages = totalPages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTotalElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalElements</span><span class="params">(<span class="keyword">long</span> totalElements)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalElements = totalElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumberOfElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> numberOfElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumberOfElements</span><span class="params">(<span class="keyword">int</span> numberOfElements)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numberOfElements = numberOfElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContents</span><span class="params">(List&lt;T&gt; contents)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.contents = contents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirst</span><span class="params">(<span class="keyword">boolean</span> first)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLast</span><span class="params">(<span class="keyword">boolean</span> last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHasContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isHasContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHasContent</span><span class="params">(<span class="keyword">boolean</span> hasContent)</span> </span>&#123;</span><br><span class="line">        isHasContent = hasContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isHasPrevious;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHasPrevious</span><span class="params">(<span class="keyword">boolean</span> hasPrevious)</span> </span>&#123;</span><br><span class="line">        isHasPrevious = hasPrevious;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isHasNext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHasNext</span><span class="params">(<span class="keyword">boolean</span> hasNext)</span> </span>&#123;</span><br><span class="line">        isHasNext = hasNext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNavigatePages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> navigatePages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNavigatePages</span><span class="params">(<span class="keyword">int</span> navigatePages)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.navigatePages = navigatePages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getNavigatepageNums() &#123;</span><br><span class="line">        <span class="keyword">return</span> navigatepageNums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNavigatepageNums</span><span class="params">(<span class="keyword">int</span>[] navigatepageNums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.navigatepageNums = navigatepageNums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>除了上面的写法外，如果不需要修改方法名，完全可以在继承Page类的基础上进行拓展</p>
<h5 id="2-Service层实现进阶分页方法"><a href="#2-Service层实现进阶分页方法" class="headerlink" title="2.Service层实现进阶分页方法"></a>2.Service层实现进阶分页方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PageNavigator&lt;Category&gt; <span class="title">getpage</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> size, <span class="keyword">int</span> navigatePages)</span></span>&#123;</span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">    Pageable pageable = <span class="keyword">new</span> PageRequest(page, size, sort);</span><br><span class="line">    Page pageFrom = categoryDAO.findAll(pageable);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PageNavigator&lt;&gt;(pageFrom, navigatePages);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-Controller层调用进阶分页方法"><a href="#3-Controller层调用进阶分页方法" class="headerlink" title="3.Controller层调用进阶分页方法"></a>3.Controller层调用进阶分页方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/catepage&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageNavigator&lt;Category&gt; <span class="title">pageList</span><span class="params">(<span class="meta">@RequestParam(value = &quot;page&quot;, defaultValue = &quot;1&quot;)</span> <span class="keyword">int</span> page,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="meta">@RequestParam(value = &quot;size&quot;, defaultValue = &quot;5&quot;)</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">			</span><br><span class="line">        <span class="comment">// 接口初始页调整为从1开始</span></span><br><span class="line">        page = page &lt; <span class="number">1</span> ? <span class="number">1</span> : page;</span><br><span class="line">        PageNavigator&lt;Category&gt; list = categoryService.getpage(page - <span class="number">1</span>, size, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-测试结果"><a href="#4-测试结果" class="headerlink" title="4.测试结果"></a>4.测试结果</h5><p>访问地址：<a href="http://localhost:8080/tmall_springboot/categories?start=3&amp;size=2">http://localhost:8080/tmall_springboot/categories?start=3&amp;size=2</a></p>
<p>可以看到最终实现了提供一个存储5个页面索引的数组</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202282106562.png" alt="image-20220228210601487"></p>
<h4 id="三-分页方法比较"><a href="#三-分页方法比较" class="headerlink" title="三.分页方法比较"></a>三.分页方法比较</h4><p>JPA提供的分页类——Page可以满足各种分页需求，大部分时候用它就足够了，但是Pageable无法实现根据当前选择页调整接口返回的数据，而只能硬性分页即 <code>页数（totalPage） =  数据数（totalElements） / 页大小（size）</code> </p>
<p>表现在前端所有的分页都在一组分页栏中，如果想部分显示分页栏就需要前端去定制分页分组方法</p>
<img src="https://raw.staticdn.net/Autovy/Image/master/img/202203060908527.png" alt="image-20211215173655433" style="zoom:80%;">



<p>但是如果前端有需求让后端根据当前选择页，以当前页为中点返回n个页面为一组的索引供前端调用</p>
<p>这时候我们就要对Page类进行封装，构造一个分页组类，在构造方法中提供一个navigatePages参数（分页组大小），并提供calNavigateNums方法根据当前页计算出分到同一组的页面索引并存储到数组navigatepageNums中供前端遍历展示</p>
<p>表现在前端可以通过接口获得当前页同一组分页的索引方便遍历</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202202282106562.png" alt="image-20220228210601487"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/ifme/p/12005026.html">Spring Data Elasticsearch基本使用</a></p>
<p><a href="https://onblogs.net/2019/05/29/史上最全面的Elasticsearch使用指南/">史上最全面的Elasticsearch使用指南</a></p>
<p><a href="https://juejin.cn/post/6844904002400813070">Spring data jpa中实体关系解决方案</a></p>
<p><a href="https://www.jianshu.com/p/a2f98f6d6fbd">Spring Data JPA 使用详解</a></p>
<p><a href="https://mp.weixin.qq.com/s/aUqH_lFxohMWPW4xOpPTcA">Redis实用指南</a></p>
<p><a href="https://www.baeldung.com/hibernate-lazy-eager-loading">延迟加载介绍</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>项目实战</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|渐进式本地缓存开发总结</title>
    <url>/2022/04/20/Java/Java-%E6%B8%90%E8%BF%9B%E5%BC%8F%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202205211137136.png" alt="img"></p>
<span id="more"></span>

<h3 id="一-固定大小缓存实现"><a href="#一-固定大小缓存实现" class="headerlink" title="一.固定大小缓存实现"></a>一.固定大小缓存实现</h3><h4 id="缓存接口定义"><a href="#缓存接口定义" class="headerlink" title="缓存接口定义"></a>缓存接口定义</h4><p>为了兼容 Map，我们定义缓存接口继承自 Map 接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Map</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="核心实现"><a href="#核心实现" class="headerlink" title="核心实现"></a>核心实现</h4><p>我们主要看一下 put 时的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.1 尝试驱除</span></span><br><span class="line">    CacheEvictContext&lt;K,V&gt; context = <span class="keyword">new</span> CacheEvictContext&lt;&gt;();</span><br><span class="line">    context.key(key).size(sizeLimit).cache(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// context包含新的键和旧的缓存，放入驱除类中按规则淘汰</span></span><br><span class="line">    cacheEvict.evict(context);</span><br><span class="line">    <span class="comment">//2. 判断驱除后的信息</span></span><br><span class="line">    <span class="keyword">if</span>(isSizeLimit()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CacheRuntimeException(<span class="string">&quot;当前队列已满，数据添加失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 执行添加</span></span><br><span class="line">    <span class="keyword">return</span> map.put(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们可以让用户动态指定大小，但是指定大小肯就要有对应的淘汰策略。</p>
<p>否则，固定大小的 map 肯定无法放入元素。</p>
<h4 id="淘汰策略"><a href="#淘汰策略" class="headerlink" title="淘汰策略"></a>淘汰策略</h4><p>淘汰策略可以有多种，比如 LRU/LFU/FIFO 等等，我们此处实现一个最基本的 FIFO。</p>
<p>所有实现以接口的方式实现，便于后期灵活替换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheEvictFIFO</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ICacheEvict</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * queue 信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;K&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ICache&lt;K,V&gt; cache = context.cache();</span><br><span class="line">        <span class="comment">// 超过限制，执行移除</span></span><br><span class="line">        <span class="keyword">if</span>(cache.size() &gt;= context.size()) &#123;</span><br><span class="line">            K evictKey = queue.remove();</span><br><span class="line">            <span class="comment">// 移除最开始的元素</span></span><br><span class="line">            cache.remove(evictKey);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将新加的元素放入队尾</span></span><br><span class="line">        <span class="keyword">final</span> K key = context.key();</span><br><span class="line">        queue.add(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FIFO 比较简单，我们使用一个队列，存储每一次放入的元素，当队列超过最大限制时，删除最早的元素。</p>
<h4 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h4><p>为了便于用户使用，我们实现类似于 guava 的引导类。</p>
<p>所有参数都提供默认值，使用 fluent 流式写法，提升用户体验。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存引导类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheBs</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CacheBs</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建对象实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt; key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; <span class="function">CacheBs&lt;K,V&gt; <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CacheBs&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * map 实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,V&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大小限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 驱除策略默认设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ICacheEvict&lt;K,V&gt; evict = CacheEvicts.fifo();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * map 实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheBs&lt;K, V&gt; <span class="title">map</span><span class="params">(Map&lt;K, V&gt; map)</span> </span>&#123;</span><br><span class="line">        ArgUtil.notNull(map, <span class="string">&quot;map&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 size 信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheBs&lt;K, V&gt; <span class="title">size</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        ArgUtil.notNegative(size, <span class="string">&quot;size&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置驱除策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evict 驱除策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 0.0.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheBs&lt;K, V&gt; <span class="title">evict</span><span class="params">(ICacheEvict&lt;K, V&gt; evict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.evict = evict;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建缓存信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICache&lt;K,V&gt; <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CacheContext&lt;K,V&gt; context = <span class="keyword">new</span> CacheContext&lt;&gt;();</span><br><span class="line">        context.cacheEvict(evict);</span><br><span class="line">        context.map(map);</span><br><span class="line">        context.size(size);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cache&lt;&gt;(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ICache&lt;String, String&gt; cache = CacheBs.&lt;String,String&gt;newInstance()</span><br><span class="line">        .size(<span class="number">2</span>)</span><br><span class="line">        .build();</span><br><span class="line">cache.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">Assert.assertEquals(<span class="number">2</span>, cache.size());</span><br><span class="line">System.out.println(cache.keySet());</span><br></pre></td></tr></table></figure>

<p>默认为先进先出的策略，此时输出 keys，内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>



<h3 id="二-LRU缓存淘汰策略"><a href="#二-LRU缓存淘汰策略" class="headerlink" title="二.LRU缓存淘汰策略"></a>二.LRU缓存淘汰策略</h3><p>上面默认使用FIFO淘汰策略即先进先淘汰，下我们来开发LRU缓存淘汰策略即淘汰最近最少使用</p>
<h4 id="LRU基本原理"><a href="#LRU基本原理" class="headerlink" title="LRU基本原理"></a>LRU基本原理</h4><h5 id="1-LRU-是什么"><a href="#1-LRU-是什么" class="headerlink" title="1.LRU 是什么"></a>1.LRU 是什么</h5><p>LRU 是由 Least Recently Used 的首字母组成，表示最近最少使用的含义，一般使用在对象淘汰算法上。</p>
<p>也是比较常见的一种淘汰算法。</p>
<p>其核心思想是<strong>如果数据最近被访问过，那么将来被访问的几率也更高</strong>。</p>
<h5 id="2-连续性"><a href="#2-连续性" class="headerlink" title="2.连续性"></a>2.连续性</h5><p>在计算机科学中，有一个指导准则：连续性准则。</p>
<p>时间连续性：对于信息的访问，最近被访问过，被再次访问的可能性会很高。缓存就是基于这个理念进行数据淘汰的。</p>
<p>空间连续性：对于磁盘信息的访问，将很有可能访问连续的空间信息。所以会有 page 预取来提升性能。</p>
<h5 id="3-实现步骤"><a href="#3-实现步骤" class="headerlink" title="3.实现步骤"></a>3.实现步骤</h5><ol>
<li>新数据插入到链表头部；</li>
<li>每当缓存命中（即缓存数据被访问），则将数据移到链表头部；</li>
<li>当链表满的时候，将链表尾部的数据丢弃。</li>
</ol>
<p>其实比较简单，比起 FIFO 的队列，我们引入一个链表实现即可。</p>
<h5 id="5-LRU实现步骤疑点"><a href="#5-LRU实现步骤疑点" class="headerlink" title="5.LRU实现步骤疑点"></a>5.LRU实现步骤疑点</h5><p>我们针对上面的 3 句话，逐句考虑一下，看看有没有值得优化点或者一些坑。</p>
<p><strong>如何判断是新数据？</strong></p>
<p><strong>新数据插入到链表头部；</strong></p>
<p>我们使用的是链表。</p>
<p>判断新数据最简单的方法就是遍历是否存在，对于链表，这是一个 O(n) 的时间复杂度。</p>
<p>其实性能还是比较差的。</p>
<p>当然也可以考虑空间换时间，比如引入一个 set 之类的，不过这样对空间的压力会加倍。</p>
<p><strong>什么是缓存命中</strong></p>
<p><strong>每当缓存命中（即缓存数据被访问），则将数据移到链表头部；</strong></p>
<p>put(key,value) 的情况，就是新元素。如果已有这个元素，可以先删除，再加入，参考上面的处理。</p>
<p>get(key) 的情况，对于元素访问，删除已有的元素，将新元素放在头部。</p>
<p>remove(key) 移除一个元素，直接删除已有元素。</p>
<p>keySet() valueSet() entrySet() 这些属于无差别访问，我们不对队列做调整。</p>
<p><strong>移除</strong></p>
<p><strong>当链表满的时候，将链表尾部的数据丢弃。</strong></p>
<p>链表满只有一种场景，那就是添加元素的时候，也就是执行 put(key, value) 的时候。</p>
<p>直接删除对应的 key 即可。</p>
<h4 id="Java-代码实现"><a href="#Java-代码实现" class="headerlink" title="Java 代码实现"></a>Java 代码实现</h4><h5 id="1-接口定义"><a href="#1-接口定义" class="headerlink" title="1.接口定义"></a>1.接口定义</h5><p>和 FIFO 的接口保持一致，调用地方也不变</p>
<p>为了后续 LRU/LFU 实现，新增 remove/update 两个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICacheEvict</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 驱除策略</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否执行驱除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">evict</span><span class="params">(<span class="keyword">final</span> ICacheEvictContext&lt;K, V&gt; context)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新 key 信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">final</span> K key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除 key 信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> K key)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-LRU-实现"><a href="#2-LRU-实现" class="headerlink" title="2.LRU 实现"></a>2.LRU 实现</h5><p>直接基于 LinkedList 实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 丢弃策略-LRU 最近最少使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheEvictLRU</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ICacheEvict</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(CacheEvictLRU.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * list 信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;K&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">evict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> ICache&lt;K,V&gt; cache = context.cache();</span><br><span class="line">        <span class="comment">// 超过限制，移除队尾的元素</span></span><br><span class="line">        <span class="keyword">if</span>(cache.size() &gt;= context.size()) &#123;</span><br><span class="line">            K evictKey = list.get(list.size()-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 移除对应的元素</span></span><br><span class="line">            cache.remove(evictKey);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放入元素</span></span><br><span class="line"><span class="comment">     * （1）删除已经存在的</span></span><br><span class="line"><span class="comment">     * （2）新元素放到元素头部</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">final</span> K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.remove(key);</span><br><span class="line">        <span class="keyword">this</span>.list.add(<span class="number">0</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现比较简单，相对 FIFO 多了三个方法：</p>
<p>update()：我们做一点简化，认为只要是访问，就是删除，然后插入到队首。</p>
<p>remove()：删除就是直接删除。</p>
<p>这三个方法是用来更新最近使用情况的。</p>
<p>那什么时候调用呢？</p>
<h5 id="3-注解属性"><a href="#3-注解属性" class="headerlink" title="3.注解属性"></a>3.注解属性</h5><p>为了保证核心流程，我们基于注解实现。</p>
<p>添加属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否执行驱除更新</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 主要用于 LRU/LFU 等驱除策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">evict</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br></pre></td></tr></table></figure>



<h5 id="4-注解使用"><a href="#4-注解使用" class="headerlink" title="4.注解使用"></a>4.注解使用</h5><p>有哪些方法需要使用？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheInterceptor(refresh = true, evict = true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.containsKey(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheInterceptor(evict = true)</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 刷新所有过期信息</span></span><br><span class="line">    K genericKey = (K) key;</span><br><span class="line">    <span class="keyword">this</span>.expire.refreshExpire(Collections.singletonList(genericKey));</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheInterceptor(aof = true, evict = true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheInterceptor(aof = true, evict = true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.remove(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="5-注解驱除拦截器实现"><a href="#5-注解驱除拦截器实现" class="headerlink" title="5.注解驱除拦截器实现"></a>5.注解驱除拦截器实现</h5><p>执行顺序：放在方法之后更新，不然每次当前操作的 key 都会被放在最前面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 驱除策略拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheInterceptorEvict</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ICacheInterceptor</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(CacheInterceptorEvict.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(ICacheInterceptorContext&lt;K,V&gt; context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(ICacheInterceptorContext&lt;K,V&gt; context)</span> </span>&#123;</span><br><span class="line">        ICacheEvict&lt;K,V&gt; evict = context.cache().evict();</span><br><span class="line"></span><br><span class="line">        Method method = context.method();</span><br><span class="line">        <span class="keyword">final</span> K key = (K) context.params()[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;remove&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">            evict.remove(key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            evict.update(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们只对 remove 方法做下特判，其他方法都使用 update 更新信息。</p>
<p>参数直接取第一个参数。</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ICache&lt;String, String&gt; cache = CacheBs.&lt;String,String&gt;newInstance()</span><br><span class="line">        .size(<span class="number">3</span>)</span><br><span class="line">        .evict(CacheEvicts.&lt;String, String&gt;lru())</span><br><span class="line">        .build();</span><br><span class="line">cache.put(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;FIFO&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问一次A</span></span><br><span class="line">cache.get(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;LRU&quot;</span>);</span><br><span class="line">Assert.assertEquals(<span class="number">3</span>, cache.size());</span><br><span class="line"></span><br><span class="line">System.out.println(cache.keySet());</span><br></pre></td></tr></table></figure>

<ul>
<li>日志信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[D, A, C]</span><br></pre></td></tr></table></figure>

<p>通过 removeListener 日志也可以看到 B 被移除了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">02</span> <span class="number">21</span>:<span class="number">33</span>:<span class="number">44.578</span>] [main] [c.g.h.c.c.s.l.r.CacheRemoveListener.listen] - Remove key:</span><br></pre></td></tr></table></figure>



<h3 id="三-LRU缓存策略的优化"><a href="#三-LRU缓存策略的优化" class="headerlink" title="三.LRU缓存策略的优化"></a>三.LRU缓存策略的优化</h3><h4 id="数据结构选择"><a href="#数据结构选择" class="headerlink" title="数据结构选择"></a>数据结构选择</h4><h5 id="1-基于数组"><a href="#1-基于数组" class="headerlink" title="1.基于数组"></a>1.基于数组</h5><p>方案：为每一个数据附加一个额外的属性——时间戳，当每一次访问数据时，更新该数据的时间戳至当前时间。</p>
<p>当数据空间已满后，则扫描整个数组，淘汰时间戳最小的数据。</p>
<p>不足：维护时间戳需要耗费额外的空间，淘汰数据时需要扫描整个数组。</p>
<p>这个时间复杂度太差，空间复杂度也不好。</p>
<h5 id="2-基于长度有限的双向链表"><a href="#2-基于长度有限的双向链表" class="headerlink" title="2.基于长度有限的双向链表"></a>2.基于长度有限的双向链表</h5><p>方案：访问一个数据时，当数据不在链表中，则将数据插入至链表头部，如果在链表中，则将该数据移至链表头部。当数据空间已满后，则淘汰链表最末尾的数据。</p>
<p>不足：插入数据或取数据时，需要扫描整个链表。</p>
<p>这个就是我们上一节实现的方式，缺点还是很明显，每次确认元素是否存在，都要消耗 O(n) 的时间复杂度去查询。</p>
<h5 id="3-基于双向链表和哈希表"><a href="#3-基于双向链表和哈希表" class="headerlink" title="3.基于双向链表和哈希表"></a>3.基于双向链表和哈希表</h5><p>方案：为了改进上面需要扫描链表的缺陷，配合哈希表，将数据和链表中的节点形成映射，将插入操作和读取操作的时间复杂度从O(N)降至O(1)</p>
<p>缺点：这个使我们上一节提到的优化思路，不过还是有缺点的，那就是空间复杂度翻倍。</p>
<h5 id="4-数据结构的选择总结"><a href="#4-数据结构的选择总结" class="headerlink" title="4.数据结构的选择总结"></a>4.数据结构的选择总结</h5><p>（1）基于数组的实现</p>
<p>这里不建议选择 array 或者 ArrayList，因为读取的时间复杂度为 O(1)，但是更新相对是比较慢的，虽然 jdk 使用的是 System.arrayCopy。</p>
<p>（2）基于双向链表的实现</p>
<p>如果我们选择链表，HashMap 中还是不能简单的存储 key, 和对应的下标。</p>
<p>因为链表的遍历，实际上还是 O(n) 的，双向链表理论上可以优化一半，但是这并不是我们想要的 O(1) 效果。</p>
<p>（3）基于双向链表 + Map实现</p>
<p>双向链表我们保持不变。</p>
<p>Map 中 key 对应的值我们放双向链表的节点信息。</p>
<p>那实现方式就变成了实现一个双向链表。</p>
<h4 id="基于自定义双向链表实现"><a href="#基于自定义双向链表实现" class="headerlink" title="基于自定义双向链表实现"></a>基于自定义双向链表实现</h4><h5 id="1-节点定义"><a href="#1-节点定义" class="headerlink" title="1.节点定义"></a>1.节点定义</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向链表节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt; key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt; value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleListNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> K key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; pre;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fluent get &amp; set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-核心代码实现"><a href="#2-核心代码实现" class="headerlink" title="2.核心代码实现"></a>2.核心代码实现</h5><p>我们保持和原来的接口不变，实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheEvictLruDoubleListMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCacheEvict</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(CacheEvictLruDoubleListMap.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾巴结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * map 信息</span></span><br><span class="line"><span class="comment">     * key: 元素信息</span></span><br><span class="line"><span class="comment">     * value: 元素在 list 中对应的节点信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, DoubleListNode&lt;K,V&gt;&gt; indexMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CacheEvictLruDoubleListMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.indexMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="keyword">new</span> DoubleListNode&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.tail = <span class="keyword">new</span> DoubleListNode&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.head.next(<span class="keyword">this</span>.tail);</span><br><span class="line">        <span class="keyword">this</span>.tail.pre(<span class="keyword">this</span>.head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ICacheEntry&lt;K, V&gt; <span class="title">doEvict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span> </span>&#123;</span><br><span class="line">        ICacheEntry&lt;K, V&gt; result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">final</span> ICache&lt;K,V&gt; cache = context.cache();</span><br><span class="line">        <span class="comment">// 超过限制，移除队尾的元素</span></span><br><span class="line">        <span class="keyword">if</span>(cache.size() &gt;= context.size()) &#123;</span><br><span class="line">            <span class="comment">// 获取尾巴节点的前一个元素</span></span><br><span class="line">            DoubleListNode&lt;K,V&gt; tailPre = <span class="keyword">this</span>.tail.pre();</span><br><span class="line">            <span class="keyword">if</span>(tailPre == <span class="keyword">this</span>.head) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;当前列表为空，无法进行删除&quot;</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> CacheRuntimeException(<span class="string">&quot;不可删除头结点!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            K evictKey = tailPre.key();</span><br><span class="line">            V evictValue = cache.remove(evictKey);</span><br><span class="line">            result = <span class="keyword">new</span> CacheEntry&lt;&gt;(evictKey, evictValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放入元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * （1）删除已经存在的</span></span><br><span class="line"><span class="comment">     * （2）新元素放到元素头部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">final</span> K key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 执行删除</span></span><br><span class="line">        <span class="keyword">this</span>.remove(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 新元素插入到头部</span></span><br><span class="line">        <span class="comment">//head&lt;-&gt;next</span></span><br><span class="line">        <span class="comment">//变成：head&lt;-&gt;new&lt;-&gt;next</span></span><br><span class="line">        DoubleListNode&lt;K,V&gt; newNode = <span class="keyword">new</span> DoubleListNode&lt;&gt;();</span><br><span class="line">        newNode.key(key);</span><br><span class="line"></span><br><span class="line">        DoubleListNode&lt;K,V&gt; next = <span class="keyword">this</span>.head.next();</span><br><span class="line">        <span class="keyword">this</span>.head.next(newNode);</span><br><span class="line">        newNode.pre(<span class="keyword">this</span>.head);</span><br><span class="line">        next.pre(newNode);</span><br><span class="line">        newNode.next(next);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2 插入到 map 中</span></span><br><span class="line">        indexMap.put(key, newNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. 获取 map 中的元素</span></span><br><span class="line"><span class="comment">     * 2. 不存在直接返回，存在执行以下步骤：</span></span><br><span class="line"><span class="comment">     * 2.1 删除双向链表中的元素</span></span><br><span class="line"><span class="comment">     * 2.2 删除 map 中的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> K key)</span> </span>&#123;</span><br><span class="line">        DoubleListNode&lt;K,V&gt; node = indexMap.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ObjectUtil.isNull(node)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除 list node</span></span><br><span class="line">        <span class="comment">// A&lt;-&gt;B&lt;-&gt;C</span></span><br><span class="line">        <span class="comment">// 删除 B，需要变成：A&lt;-&gt;C</span></span><br><span class="line">        DoubleListNode&lt;K,V&gt; pre = node.pre();</span><br><span class="line">        DoubleListNode&lt;K,V&gt; next = node.next();</span><br><span class="line"></span><br><span class="line">        pre.next(next);</span><br><span class="line">        next.pre(pre);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除 map 中对应信息</span></span><br><span class="line">        <span class="keyword">this</span>.indexMap.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现起来不难，就是一个简易版本的双向列表。</p>
<p>只是获取节点的时候，借助了一下 map，让时间复杂度降低为 O(1)。</p>
<h5 id="3-测试结果"><a href="#3-测试结果" class="headerlink" title="3.测试结果"></a>3.测试结果</h5><p>我们验证一下自己的实现：</p>
<p><strong>测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ICache&lt;String, String&gt; cache = CacheBs.&lt;String,String&gt;newInstance()</span><br><span class="line">        .size(<span class="number">3</span>)</span><br><span class="line">        .evict(CacheEvicts.&lt;String, String&gt;lruDoubleListMap())</span><br><span class="line">        .build();</span><br><span class="line">cache.put(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;FIFO&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问一次A</span></span><br><span class="line">cache.get(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;LRU&quot;</span>);</span><br><span class="line"></span><br><span class="line">Assert.assertEquals(<span class="number">3</span>, cache.size());</span><br><span class="line">System.out.println(cache.keySet());</span><br></pre></td></tr></table></figure>



<p><strong>日志</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">03</span> 09:<span class="number">37</span>:<span class="number">41.007</span>] [main] [c.g.h.c.c.s.l.r.CacheRemoveListener.listen] - Remove key: B, value: world, type: evict</span><br><span class="line">[D, A, C]</span><br></pre></td></tr></table></figure>

<p>因为我们访问过一次 A，所以 B 已经变成最少被访问的元素。</p>
<h4 id="基于-LinkedHashMap-实现"><a href="#基于-LinkedHashMap-实现" class="headerlink" title="基于 LinkedHashMap 实现"></a>基于 LinkedHashMap 实现</h4><p>实际上，LinkedHashMap 本身就是对于 list 和 hashMap 的一种结合的数据结构，我们可以直接使用 jdk 中 LinkedHashMap 去实现。</p>
<h5 id="1-直接实现"><a href="#1-直接实现" class="headerlink" title="1.直接实现"></a>1.直接实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注意这里将LinkedHashMap的accessOrder设为true</span></span><br><span class="line">        <span class="keyword">super</span>(<span class="number">16</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry eldest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.size() &gt;= capacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认LinkedHashMap并不会淘汰数据，所以我们重写了它的removeEldestEntry()方法，当数据数量达到预设上限后，淘汰数据，accessOrder设为true意为按照访问的顺序排序。</p>
<p>整个实现的代码量并不大，主要都是应用LinkedHashMap的特性。</p>
<h5 id="2-简单改造"><a href="#2-简单改造" class="headerlink" title="2.简单改造"></a>2.简单改造</h5><p>我们对这个方法简单改造下，让其适应我们定义的接口。</p>
<h5 id="3-测试结果-1"><a href="#3-测试结果-1" class="headerlink" title="3.测试结果"></a>3.测试结果</h5><p><strong>测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ICache&lt;String, String&gt; cache = CacheBs.&lt;String,String&gt;newInstance()</span><br><span class="line">        .size(<span class="number">3</span>)</span><br><span class="line">        .evict(CacheEvicts.&lt;String, String&gt;lruLinkedHashMap())</span><br><span class="line">        .build();</span><br><span class="line">cache.put(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;FIFO&quot;</span>);</span><br><span class="line"><span class="comment">// 访问一次A</span></span><br><span class="line">cache.get(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;LRU&quot;</span>);</span><br><span class="line"></span><br><span class="line">Assert.assertEquals(<span class="number">3</span>, cache.size());</span><br><span class="line">System.out.println(cache.keySet());</span><br></pre></td></tr></table></figure>



<p><strong>日志</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">03</span> <span class="number">10</span>:<span class="number">20</span>:<span class="number">57.842</span>] [main] [c.g.h.c.c.s.l.r.CacheRemoveListener.listen] - Remove key: B, value: world, type: evict</span><br><span class="line">[D, A, C]</span><br></pre></td></tr></table></figure>



<h4 id="LRU扩展算法"><a href="#LRU扩展算法" class="headerlink" title="LRU扩展算法"></a>LRU扩展算法</h4><p>当存在热点数据时，LRU的效率很好，但偶发性的、周期性的批量操作会导致LRU命中率急剧下降，缓存污染情况比较严重。</p>
<h5 id="1-LRU-K"><a href="#1-LRU-K" class="headerlink" title="1. LRU-K"></a>1. LRU-K</h5><p>LRU-K中的K代表最近使用的次数，因此LRU可以认为是LRU-1。</p>
<p>LRU-K的主要目的是为了解决LRU算法“缓存污染”的问题，其核心思想是将“最近使用过1次”的判断标准扩展为“最近使用过K次”。</p>
<p>相比LRU，LRU-K需要多维护一个队列，用于记录所有缓存数据被访问的历史。只有当数据的访问次数达到K次的时候，才将数据放入缓存。</p>
<p>当需要淘汰数据时，LRU-K会淘汰第K次访问时间距当前时间最大的数据。</p>
<p>数据第一次被访问时，加入到历史访问列表，如果数据在访问历史列表中没有达到K次访问，则按照一定的规则（FIFO,LRU）淘汰；</p>
<p>当访问历史队列中的数据访问次数达到K次后，将数据索引从历史队列中删除，将数据移到缓存队列中，并缓存数据，缓存队列重新按照时间排序；</p>
<p>缓存数据队列中被再次访问后，重新排序，需要淘汰数据时，淘汰缓存队列中排在末尾的数据，即“淘汰倒数K次访问离现在最久的数据”。</p>
<p>LRU-K具有LRU的优点，同时还能避免LRU的缺点，实际应用中LRU-2是综合最优的选择。</p>
<p>由于LRU-K还需要记录那些被访问过、但还没有放入缓存的对象，因此内存消耗会比LRU要多。</p>
<h5 id="2-two-queue"><a href="#2-two-queue" class="headerlink" title="2. two queue"></a>2. two queue</h5><p>Two queues（以下使用2Q代替）算法类似于LRU-2，不同点在于2Q将LRU-2算法中的访问历史队列（注意这不是缓存数据的）改为一个FIFO缓存队列，即：2Q算法有两个缓存队列，一个是FIFO队列，一个是LRU队列。</p>
<p>当数据第一次访问时，2Q算法将数据缓存在FIFO队列里面，当数据第二次被访问时，则将数据从FIFO队列移到LRU队列里面，两个队列各自按照自己的方法淘汰数据。</p>
<p>新访问的数据插入到FIFO队列中，如果数据在FIFO队列中一直没有被再次访问，则最终按照FIFO规则淘汰；</p>
<p>如果数据在FIFO队列中再次被访问到，则将数据移到LRU队列头部，如果数据在LRU队列中再次被访问，则将数据移动LRU队列头部，LRU队列淘汰末尾的数据。</p>
<h5 id="3-Multi-Queue-MQ"><a href="#3-Multi-Queue-MQ" class="headerlink" title="3. Multi Queue(MQ)"></a>3. Multi Queue(MQ)</h5><p>MQ算法根据访问频率将数据划分为多个队列，不同的队列具有不同的访问优先级，其核心思想是：<strong>优先缓存访问次数多的数据</strong>。</p>
<p>详细的算法结构图如下，Q0，Q1….Qk代表不同的优先级队列，Q-history代表从缓存中淘汰数据，但记录了数据的索引和引用次数的队列：</p>
<p>新插入的数据放入Q0，每个队列按照LRU进行管理，当数据的访问次数达到一定次数，需要提升优先级时，将数据从当前队列中删除，加入到高一级队列的头部；为了防止高优先级数据永远不会被淘汰，当数据在指定的时间里没有被访问时，需要降低优先级，将数据从当前队列删除，加入到低一级的队列头部；需要淘汰数据时，从最低一级队列开始按照LRU淘汰，每个队列淘汰数据时，将数据从缓存中删除，将数据索引加入Q-history头部。</p>
<p>如果数据在Q-history中被重新访问，则重新计算其优先级，移到目标队列头部。</p>
<p>Q-history按照LRU淘汰数据的索引。</p>
<p>MQ需要维护多个队列，且需要维护每个数据的访问时间，复杂度比LRU高。</p>
<h5 id="4-LRU算法对比"><a href="#4-LRU算法对比" class="headerlink" title="4.LRU算法对比"></a>4.LRU算法对比</h5><table>
<thead>
<tr>
<th align="left">对比点</th>
<th align="left">对比</th>
</tr>
</thead>
<tbody><tr>
<td align="left">命中率</td>
<td align="left">LRU-2 &gt; MQ(2) &gt; 2Q &gt; LRU</td>
</tr>
<tr>
<td align="left">复杂度</td>
<td align="left">LRU-2 &gt; MQ(2) &gt; 2Q &gt; LRU</td>
</tr>
<tr>
<td align="left">代价</td>
<td align="left">LRU-2  &gt; MQ(2) &gt; 2Q &gt; LRU</td>
</tr>
</tbody></table>
<p>实际上上面的几个算法，思想上大同小异。</p>
<p>核心目的：解决批量操作导致热点数据失效，缓存被污染的问题。</p>
<p>实现方式：增加一个队列，用来保存只访问一次的数据，然后根据次数不同，放入到 LRU 中。</p>
<p>只访问一次的队列，可以是 FIFO 队列，可以是 LRU，我们来实现一下 2Q 和 LRU-2 两种实现。</p>
<h4 id="2Q算法实现"><a href="#2Q算法实现" class="headerlink" title="2Q算法实现"></a>2Q算法实现</h4><h5 id="1-实现思路"><a href="#1-实现思路" class="headerlink" title="1.实现思路"></a>1.实现思路</h5><p>实际上就是我们以前的 FIFO + LRU 二者的结合。</p>
<h5 id="2-基本属性"><a href="#2-基本属性" class="headerlink" title="2.基本属性"></a>2.基本属性</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheEvictLru2Q</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCacheEvict</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(CacheEvictLru2Q.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列大小限制</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 降低 O(n) 的消耗，避免耗时过长。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LIMIT_QUEUE_SIZE = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一次访问的队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;K&gt; firstQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾巴结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * map 信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * key: 元素信息</span></span><br><span class="line"><span class="comment">     * value: 元素在 list 中对应的节点信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, DoubleListNode&lt;K,V&gt;&gt; lruIndexMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CacheEvictLru2Q</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.lruIndexMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="keyword">new</span> DoubleListNode&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.tail = <span class="keyword">new</span> DoubleListNode&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.head.next(<span class="keyword">this</span>.tail);</span><br><span class="line">        <span class="keyword">this</span>.tail.pre(<span class="keyword">this</span>.head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-数据淘汰"><a href="#3-数据淘汰" class="headerlink" title="3.数据淘汰"></a>3.数据淘汰</h5><p>数据淘汰的逻辑：</p>
<p>当缓存大小，已经达到最大限制时执行：</p>
<p>（1）优先淘汰 firstQueue 中的数据</p>
<p>（2）如果 firstQueue 中数据为空，则淘汰 lruMap 中的数据信息。</p>
<p>这里有一个假设：我们认为被多次访问的数据，重要性高于被只访问了一次的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ICacheEntry&lt;K, V&gt; <span class="title">doEvict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span> </span>&#123;</span><br><span class="line">    ICacheEntry&lt;K, V&gt; result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> ICache&lt;K,V&gt; cache = context.cache();</span><br><span class="line">    <span class="comment">// 超过限制，移除队尾的元素</span></span><br><span class="line">    <span class="keyword">if</span>(cache.size() &gt;= context.size()) &#123;</span><br><span class="line">        K evictKey = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//1. firstQueue 不为空，优先移除队列中元素</span></span><br><span class="line">        <span class="keyword">if</span>(!firstQueue.isEmpty()) &#123;</span><br><span class="line">            evictKey = firstQueue.remove();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 获取尾巴节点的前一个元素</span></span><br><span class="line">            DoubleListNode&lt;K,V&gt; tailPre = <span class="keyword">this</span>.tail.pre();</span><br><span class="line">            <span class="keyword">if</span>(tailPre == <span class="keyword">this</span>.head) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;当前列表为空，无法进行删除&quot;</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> CacheRuntimeException(<span class="string">&quot;不可删除头结点!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            evictKey = tailPre.key();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行移除操作</span></span><br><span class="line">        V evictValue = cache.remove(evictKey);</span><br><span class="line">        result = <span class="keyword">new</span> CacheEntry&lt;&gt;(evictKey, evictValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-数据删除"><a href="#4-数据删除" class="headerlink" title="4.数据删除"></a>4.数据删除</h5><p>当数据被删除时调用：</p>
<p>这个逻辑和以前类似，只是多了一个 FIFO 队列的移除。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 获取 map 中的元素</span></span><br><span class="line"><span class="comment"> * 2. 不存在直接返回，存在执行以下步骤：</span></span><br><span class="line"><span class="comment"> * 2.1 删除双向链表中的元素</span></span><br><span class="line"><span class="comment"> * 2.2 删除 map 中的元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeKey</span><span class="params">(<span class="keyword">final</span> K key)</span> </span>&#123;</span><br><span class="line">    DoubleListNode&lt;K,V&gt; node = lruIndexMap.get(key);</span><br><span class="line">    <span class="comment">//1. LRU 删除逻辑</span></span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNotNull(node)) &#123;</span><br><span class="line">        <span class="comment">// A&lt;-&gt;B&lt;-&gt;C</span></span><br><span class="line">        <span class="comment">// 删除 B，需要变成：A&lt;-&gt;C</span></span><br><span class="line">        DoubleListNode&lt;K,V&gt; pre = node.pre();</span><br><span class="line">        DoubleListNode&lt;K,V&gt; next = node.next();</span><br><span class="line">        pre.next(next);</span><br><span class="line">        next.pre(pre);</span><br><span class="line">        <span class="comment">// 删除 map 中对应信息</span></span><br><span class="line">        <span class="keyword">this</span>.lruIndexMap.remove(node.key());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//2. FIFO 删除逻辑（O(n) 时间复杂度）</span></span><br><span class="line">        firstQueue.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="5-数据的更新"><a href="#5-数据的更新" class="headerlink" title="5.数据的更新"></a>5.数据的更新</h5><p>当数据被访问时，提升数据的优先级。</p>
<p>（1）如果在 lruMap 中，则首先移除，然后放入到头部</p>
<p>（2）如果不在 lruMap 中，但是在 FIFO 队列，则从 FIFO 队列中移除，添加到 LRU map 中。</p>
<p>（3）如果都不在，直接加入到 FIFO 队列中即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 放入元素</span></span><br><span class="line"><span class="comment"> * 1. 如果 lruIndexMap 已经存在，则处理 lru 队列，先删除，再插入。</span></span><br><span class="line"><span class="comment"> * 2. 如果 firstQueue 中已经存在，则处理 first 队列，先删除 firstQueue，然后插入 Lru。</span></span><br><span class="line"><span class="comment"> * 1 和 2 是不同的场景，但是代码实际上是一样的，删除逻辑中做了二种场景的兼容。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3. 如果不在1、2中，说明是新元素，直接插入到 firstQueue 的开始即可。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateKey</span><span class="params">(<span class="keyword">final</span> K key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.1 是否在 LRU MAP 中</span></span><br><span class="line">    <span class="comment">//1.2 是否在 firstQueue 中</span></span><br><span class="line">    DoubleListNode&lt;K,V&gt; node = lruIndexMap.get(key);</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtil.isNotNull(node)</span><br><span class="line">        || firstQueue.contains(key)) &#123;</span><br><span class="line">        <span class="comment">//1.3 删除信息</span></span><br><span class="line">        <span class="keyword">this</span>.removeKey(key);</span><br><span class="line">        <span class="comment">//1.4 加入到 LRU 中</span></span><br><span class="line">        <span class="keyword">this</span>.addToLruMapHead(key);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2. 直接加入到 firstQueue 队尾</span></span><br><span class="line">    <span class="comment">//        if(firstQueue.size() &gt;= LIMIT_QUEUE_SIZE) &#123;</span></span><br><span class="line"><span class="comment">//            // 避免第一次访问的列表一直增长，移除队头的元素</span></span><br><span class="line"><span class="comment">//            firstQueue.remove();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    firstQueue.add(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我想到了一个优化点，限制 firstQueue 的一直增长，因为遍历的时间复杂度为 O(n)，所以限制最大的大小为 1024。</p>
<p>如果超过了，则把 FIFO 中的元素先移除掉。</p>
<p>不过只移除 FIFO，不移除 cache，会导致二者的活跃程度不一致；</p>
<p>如果同时移除，但是 cache 的大小还没有满足，可能会导致超出用户的预期，这个可以作为一个优化点，暂时注释掉。</p>
<h5 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h5><p><strong>代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ICache&lt;String, String&gt; cache = CacheBs.&lt;String,String&gt;newInstance()</span><br><span class="line">        .size(<span class="number">3</span>)</span><br><span class="line">        .evict(CacheEvicts.&lt;String, String&gt;lru2Q())</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">cache.put(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;FIFO&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问一次A</span></span><br><span class="line">cache.get(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;LRU&quot;</span>);</span><br><span class="line"></span><br><span class="line">Assert.assertEquals(<span class="number">3</span>, cache.size());</span><br><span class="line">System.out.println(cache.keySet());</span><br></pre></td></tr></table></figure>



<p><strong>效果</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">03</span> <span class="number">13</span>:<span class="number">15</span>:<span class="number">50.670</span>] [main] [c.g.h.c.c.s.l.r.CacheRemoveListener.listen] - Remove key: B, value: world, type: evict</span><br><span class="line">[D, A, C]</span><br></pre></td></tr></table></figure>



<h4 id="LRU-2算法实现"><a href="#LRU-2算法实现" class="headerlink" title="LRU-2算法实现"></a>LRU-2算法实现</h4><h5 id="1-实现LRU简介"><a href="#1-实现LRU简介" class="headerlink" title="1.实现LRU简介"></a>1.实现LRU简介</h5><p>FIFO 中的缺点还是比较明显的，需要 O(n) 的时间复杂度做遍历。</p>
<p>而且命中率和 LRU-2 比起来还是会差一点。</p>
<p>这里 LRU map 出现了多次，我们为了方便，将 LRU map 简单的封装为一个数据结构。</p>
<p>我们使用双向链表+HashMap 实现一个简单版本的。</p>
<h5 id="2-节点"><a href="#2-节点" class="headerlink" title="2.节点"></a>2.节点</h5><p>node 节点和以前一致：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleListNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> K key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; pre;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fluent getter &amp; setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-接口"><a href="#3-接口" class="headerlink" title="3.接口"></a>3.接口</h5><p>我们根据自己的需要，暂时定义 3 个最重要的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LRU map 接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ILruMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除最老的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的明细</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ICacheEntry&lt;K, V&gt; <span class="title">removeEldest</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新 key 的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateKey</span><span class="params">(<span class="keyword">final</span> K key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除对应的 key 信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeKey</span><span class="params">(<span class="keyword">final</span> K key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">final</span> K key)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-实现"><a href="#4-实现" class="headerlink" title="4.实现"></a>4.实现</h5><p>我们基于 DoubleLinkedList + HashMap 实现。</p>
<p>就是把上一节中的实现整理一下即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于双向列表的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LruMapDoubleList</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ILruMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(LruMapDoubleList.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾巴节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * map 信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * key: 元素信息</span></span><br><span class="line"><span class="comment">     * value: 元素在 list 中对应的节点信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, DoubleListNode&lt;K,V&gt;&gt; indexMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LruMapDoubleList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.indexMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="keyword">new</span> DoubleListNode&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.tail = <span class="keyword">new</span> DoubleListNode&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.head.next(<span class="keyword">this</span>.tail);</span><br><span class="line">        <span class="keyword">this</span>.tail.pre(<span class="keyword">this</span>.head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICacheEntry&lt;K, V&gt; <span class="title">removeEldest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取尾巴节点的前一个元素</span></span><br><span class="line">        DoubleListNode&lt;K,V&gt; tailPre = <span class="keyword">this</span>.tail.pre();</span><br><span class="line">        <span class="keyword">if</span>(tailPre == <span class="keyword">this</span>.head) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;当前列表为空，无法进行删除&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CacheRuntimeException(<span class="string">&quot;不可删除头结点!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        K evictKey = tailPre.key();</span><br><span class="line">        V evictValue = tailPre.value();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> CacheEntry.of(evictKey, evictValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放入元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * （1）删除已经存在的</span></span><br><span class="line"><span class="comment">     * （2）新元素放到元素头部</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateKey</span><span class="params">(<span class="keyword">final</span> K key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 执行删除</span></span><br><span class="line">        <span class="keyword">this</span>.removeKey(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 新元素插入到头部</span></span><br><span class="line">        <span class="comment">//head&lt;-&gt;next</span></span><br><span class="line">        <span class="comment">//变成：head&lt;-&gt;new&lt;-&gt;next</span></span><br><span class="line">        DoubleListNode&lt;K,V&gt; newNode = <span class="keyword">new</span> DoubleListNode&lt;&gt;();</span><br><span class="line">        newNode.key(key);</span><br><span class="line"></span><br><span class="line">        DoubleListNode&lt;K,V&gt; next = <span class="keyword">this</span>.head.next();</span><br><span class="line">        <span class="keyword">this</span>.head.next(newNode);</span><br><span class="line">        newNode.pre(<span class="keyword">this</span>.head);</span><br><span class="line">        next.pre(newNode);</span><br><span class="line">        newNode.next(next);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2 插入到 map 中</span></span><br><span class="line">        indexMap.put(key, newNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. 获取 map 中的元素</span></span><br><span class="line"><span class="comment">     * 2. 不存在直接返回，存在执行以下步骤：</span></span><br><span class="line"><span class="comment">     * 2.1 删除双向链表中的元素</span></span><br><span class="line"><span class="comment">     * 2.2 删除 map 中的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeKey</span><span class="params">(<span class="keyword">final</span> K key)</span> </span>&#123;</span><br><span class="line">        DoubleListNode&lt;K,V&gt; node = indexMap.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ObjectUtil.isNull(node)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除 list node</span></span><br><span class="line">        <span class="comment">// A&lt;-&gt;B&lt;-&gt;C</span></span><br><span class="line">        <span class="comment">// 删除 B，需要变成：A&lt;-&gt;C</span></span><br><span class="line">        DoubleListNode&lt;K,V&gt; pre = node.pre();</span><br><span class="line">        DoubleListNode&lt;K,V&gt; next = node.next();</span><br><span class="line"></span><br><span class="line">        pre.next(next);</span><br><span class="line">        next.pre(pre);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除 map 中对应信息</span></span><br><span class="line">        <span class="keyword">this</span>.indexMap.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexMap.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexMap.containsKey(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="5-基本属性"><a href="#5-基本属性" class="headerlink" title="5.基本属性"></a>5.基本属性</h5><p>LRU 的实现保持不变。我们直接将 FIFO 替换为 LRU map 即可。</p>
<p>为了便于理解，我们将 FIFO 对应为 firstLruMap，用来存放用户只访问了一次的元素。</p>
<p>将原来的 LRU 中存入访问了 2 次及其以上的元素。</p>
<p>其他逻辑和 2Q 保持一致。</p>
<p>定义两个 LRU，用来分别存储访问的信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheEvictLru2</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCacheEvict</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(CacheEvictLru2.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一次访问的 lru</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ILruMap&lt;K,V&gt; firstLruMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2次及其以上的 lru</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ILruMap&lt;K,V&gt; moreLruMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CacheEvictLru2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstLruMap = <span class="keyword">new</span> LruMapDoubleList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.moreLruMap = <span class="keyword">new</span> LruMapDoubleList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6-淘汰实现"><a href="#6-淘汰实现" class="headerlink" title="6.淘汰实现"></a>6.淘汰实现</h5><p>和 lru 2Q 模式类似，这里我们优先淘汰 firstLruMap 中的数据信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ICacheEntry&lt;K, V&gt; <span class="title">doEvict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span> </span>&#123;</span><br><span class="line">    ICacheEntry&lt;K, V&gt; result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> ICache&lt;K,V&gt; cache = context.cache();</span><br><span class="line">    <span class="comment">// 超过限制，移除队尾的元素</span></span><br><span class="line">    <span class="keyword">if</span>(cache.size() &gt;= context.size()) &#123;</span><br><span class="line">        ICacheEntry&lt;K,V&gt;  evictEntry = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//1. firstLruMap 不为空，优先移除队列中元素</span></span><br><span class="line">        <span class="keyword">if</span>(!firstLruMap.isEmpty()) &#123;</span><br><span class="line">            evictEntry = firstLruMap.removeEldest();</span><br><span class="line">            log.debug(<span class="string">&quot;从 firstLruMap 中淘汰数据：&#123;&#125;&quot;</span>, evictEntry);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//2. 否则从 moreLruMap 中淘汰数据</span></span><br><span class="line">            evictEntry = moreLruMap.removeEldest();</span><br><span class="line">            log.debug(<span class="string">&quot;从 moreLruMap 中淘汰数据：&#123;&#125;&quot;</span>, evictEntry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行缓存移除操作</span></span><br><span class="line">        <span class="keyword">final</span> K evictKey = evictEntry.key();</span><br><span class="line">        V evictValue = cache.remove(evictKey);</span><br><span class="line">        result = <span class="keyword">new</span> CacheEntry&lt;&gt;(evictKey, evictValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="7-删除"><a href="#7-删除" class="headerlink" title="7.删除"></a>7.删除</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 多次 lru 中存在，删除</span></span><br><span class="line"><span class="comment"> * 2. 初次 lru 中存在，删除</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeKey</span><span class="params">(<span class="keyword">final</span> K key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 多次LRU 删除逻辑</span></span><br><span class="line">    <span class="keyword">if</span>(moreLruMap.contains(key)) &#123;</span><br><span class="line">        moreLruMap.removeKey(key);</span><br><span class="line">        log.debug(<span class="string">&quot;key: &#123;&#125; 从 moreLruMap 中移除&quot;</span>, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        firstLruMap.removeKey(key);</span><br><span class="line">        log.debug(<span class="string">&quot;key: &#123;&#125; 从 firstLruMap 中移除&quot;</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="8-更新"><a href="#8-更新" class="headerlink" title="8.更新"></a>8.更新</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新信息</span></span><br><span class="line"><span class="comment"> * 1. 如果 moreLruMap 已经存在，则处理 more 队列，先删除，再插入。</span></span><br><span class="line"><span class="comment"> * 2. 如果 firstLruMap 中已经存在，则处理 first 队列，先删除 firstLruMap，然后插入 Lru。</span></span><br><span class="line"><span class="comment"> * 1 和 2 是不同的场景，但是代码实际上是一样的，删除逻辑中做了二种场景的兼容。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3. 如果不在1、2中，说明是新元素，直接插入到 firstLruMap 的开始即可。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateKey</span><span class="params">(<span class="keyword">final</span> K key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 元素已经在多次访问，或者第一次访问的 lru 中</span></span><br><span class="line">    <span class="keyword">if</span>(moreLruMap.contains(key)</span><br><span class="line">        || firstLruMap.contains(key)) &#123;</span><br><span class="line">        <span class="comment">//1.1 删除信息</span></span><br><span class="line">        <span class="keyword">this</span>.removeKey(key);</span><br><span class="line">        <span class="comment">//1.2 加入到多次 LRU 中</span></span><br><span class="line">        moreLruMap.updateKey(key);</span><br><span class="line">        log.debug(<span class="string">&quot;key: &#123;&#125; 多次访问，加入到 moreLruMap 中&quot;</span>, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 2. 加入到第一次访问 LRU 中</span></span><br><span class="line">        firstLruMap.updateKey(key);</span><br><span class="line">        log.debug(<span class="string">&quot;key: &#123;&#125; 为第一次访问，加入到 firstLruMap 中&quot;</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上使用 LRU-2 的代码逻辑反而变得清晰了一些，主要是因为我们把 lruMap 作为独立的数据结构抽离了出去</p>
<h5 id="9-测试"><a href="#9-测试" class="headerlink" title="9.测试"></a>9.测试</h5><p><strong>代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ICache&lt;String, String&gt; cache = CacheBs.&lt;String,String&gt;newInstance()</span><br><span class="line">        .size(<span class="number">3</span>)</span><br><span class="line">        .evict(CacheEvicts.&lt;String, String&gt;lru2Q())</span><br><span class="line">        .build();</span><br><span class="line">cache.put(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;FIFO&quot;</span>);</span><br><span class="line"><span class="comment">// 访问一次A</span></span><br><span class="line">cache.get(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;LRU&quot;</span>);</span><br><span class="line">Assert.assertEquals(<span class="number">3</span>, cache.size());</span><br><span class="line">System.out.println(cache.keySet());</span><br></pre></td></tr></table></figure>



<p><strong>日志</strong></p>
<p>为了便于定位分析，源代码实现的时候，加了一点日志。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">03</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">04.966</span>] [main] [c.g.h.c.c.s.e.CacheEvictLru2.updateKey] - key: A 为第一次访问，加入到 firstLruMap 中</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">03</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">04.967</span>] [main] [c.g.h.c.c.s.e.CacheEvictLru2.updateKey] - key: B 为第一次访问，加入到 firstLruMap 中</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">03</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">04.968</span>] [main] [c.g.h.c.c.s.e.CacheEvictLru2.updateKey] - key: C 为第一次访问，加入到 firstLruMap 中</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">03</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">04.970</span>] [main] [c.g.h.c.c.s.e.CacheEvictLru2.removeKey] - key: A 从 firstLruMap 中移除</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">03</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">04.970</span>] [main] [c.g.h.c.c.s.e.CacheEvictLru2.updateKey] - key: A 多次访问，加入到 moreLruMap 中</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">03</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">04.972</span>] [main] [c.g.h.c.c.s.e.CacheEvictLru2.doEvict] - 从 firstLruMap 中淘汰数据：EvictEntry&#123;key=B, value=<span class="keyword">null</span>&#125;</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">03</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">04.974</span>] [main] [c.g.h.c.c.s.l.r.CacheRemoveListener.listen] - Remove key: B, value: world, type: evict</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">03</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">04.974</span>] [main] [c.g.h.c.c.s.e.CacheEvictLru2.updateKey] - key: D 为第一次访问，加入到 firstLruMap 中</span><br><span class="line">[D, A, C]</span><br></pre></td></tr></table></figure>



<h5 id="10-小结"><a href="#10-小结" class="headerlink" title="10.小结"></a>10.小结</h5><p>对于 LRU 算法的改进我们主要做了两点：</p>
<p>（1）性能的改进，从 O(N) 优化到 O(1)</p>
<p>（2）批量操作的改进，避免缓存污染</p>
<h3 id="四-过期功能的实现"><a href="#四-过期功能的实现" class="headerlink" title="四.过期功能的实现"></a>四.过期功能的实现</h3><h4 id="缓存接口定义-1"><a href="#缓存接口定义-1" class="headerlink" title="缓存接口定义"></a>缓存接口定义</h4><p>我们首先来定义一下接口。</p>
<p>主要有两个：一个是多久之后过期，一个是在什么时候过期。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Map</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key         key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeInMills 毫秒时间之后过期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ICache&lt;K, V&gt; <span class="title">expire</span><span class="params">(<span class="keyword">final</span> K key, <span class="keyword">final</span> <span class="keyword">long</span> timeInMills)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在指定的时间过期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeInMills 时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ICache&lt;K, V&gt; <span class="title">expireAt</span><span class="params">(<span class="keyword">final</span> K key, <span class="keyword">final</span> <span class="keyword">long</span> timeInMills)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="缓存接口实现"><a href="#缓存接口实现" class="headerlink" title="缓存接口实现"></a>缓存接口实现</h4><p>为了便于处理，我们将多久之后过期，进行计算。将两个问题变成同一个问题，在什么时候过期的问题。</p>
<p>核心的代码，主要还是看 cacheExpire 接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ICache&lt;K, V&gt; <span class="title">expire</span><span class="params">(K key, <span class="keyword">long</span> timeInMills)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> expireTime = System.currentTimeMillis() + timeInMills;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.expireAt(key, expireTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ICache&lt;K, V&gt; <span class="title">expireAt</span><span class="params">(K key, <span class="keyword">long</span> timeInMills)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cacheExpire.expire(key, timeInMills);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="缓存过期接口"><a href="#缓存过期接口" class="headerlink" title="缓存过期接口"></a>缓存过期接口</h4><p>这里为了便于后期拓展，对于过期的处理定义为接口，便于后期灵活替换</p>
<p>其中 <code>expire(final K key, final long expireAt);</code> 就是我们方法中调用的地方。</p>
<p>refershExpire 属于惰性删除，需要进行刷新时才考虑，我们后面讲解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICacheExpire</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定过期信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireAt 什么时候过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">expire</span><span class="params">(<span class="keyword">final</span> K key, <span class="keyword">final</span> <span class="keyword">long</span> expireAt)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 惰性删除中需要处理的 keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyList keys</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refreshExpire</span><span class="params">(<span class="keyword">final</span> Collection&lt;K&gt; keyList)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="expire-实现原理"><a href="#expire-实现原理" class="headerlink" title="expire 实现原理"></a>expire 实现原理</h4><p>其实过期的实思路也比较简单：我们可以开启一个定时任务，比如 1 秒钟做一次轮训，将过期的信息清空。</p>
<h5 id="1-过期信息的存储"><a href="#1-过期信息的存储" class="headerlink" title="1.过期信息的存储"></a>1.过期信息的存储</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过期 map</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 空间换时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, Long&gt; expireMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">expire</span><span class="params">(K key, <span class="keyword">long</span> expireAt)</span> </span>&#123;</span><br><span class="line">    expireMap.put(key, expireAt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们定义一个 map，key 是对应的要过期的信息，value 存储的是过期时间。</p>
<h5 id="2-轮询清理"><a href="#2-轮询清理" class="headerlink" title="2.轮询清理"></a>2.轮询清理</h5><p>我们固定 100ms 清理一次，每次最多清理 100 个。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单次清空的数量限制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LIMIT = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ICache&lt;K,V&gt; cache;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程执行类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ScheduledExecutorService EXECUTOR_SERVICE = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CacheExpire</span><span class="params">(ICache&lt;K, V&gt; cache)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cache = cache;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EXECUTOR_SERVICE.scheduleAtFixedRate(<span class="keyword">new</span> ExpireThread(), <span class="number">100</span>, <span class="number">100</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里定义了一个单线程，用于执行清空任务。</p>
<h5 id="3-清空任务"><a href="#3-清空任务" class="headerlink" title="3.清空任务"></a>3.清空任务</h5><p>这个非常简单，遍历过期数据，判断对应的时间，如果已经到期了，则执行清空操作。</p>
<p>为了避免单次执行时间过长，最多只处理 100 条</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时执行任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpireThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(MapUtil.isEmpty(expireMap)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 获取 key 进行处理</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;K, Long&gt; entry : expireMap.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(count &gt;= LIMIT) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            expireKey(entry);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行过期操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entry 明细</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expireKey</span><span class="params">(Map.Entry&lt;K, Long&gt; entry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> K key = entry.getKey();</span><br><span class="line">    <span class="keyword">final</span> Long expireAt = entry.getValue();</span><br><span class="line">    <span class="comment">// 删除的逻辑处理</span></span><br><span class="line">    <span class="keyword">long</span> currentTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">if</span>(currentTime &gt;= expireAt) &#123;</span><br><span class="line">        expireMap.remove(key);</span><br><span class="line">        <span class="comment">// 再移除缓存，后续可以通过惰性删除做补偿</span></span><br><span class="line">        cache.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h4><h5 id="1-出现的原因"><a href="#1-出现的原因" class="headerlink" title="1.出现的原因"></a>1.出现的原因</h5><p>类似于 redis，我们采用定时删除的方案，就有一个问题：可能数据清理的不及时。</p>
<p>那当我们查询时，可能获取到到是脏数据。</p>
<p>于是就有一些人就想了，当我们关心某些数据时，才对数据做对应的删除判断操作，这样压力会小很多。</p>
<p>算是一种折中方案。</p>
<h5 id="2-需要惰性删除的方法"><a href="#2-需要惰性删除的方法" class="headerlink" title="2.需要惰性删除的方法"></a>2.需要惰性删除的方法</h5><p>一般就是各种查询方法，比如我们获取 key 对应的值时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 刷新所有过期信息</span></span><br><span class="line">    K genericKey = (K) key;</span><br><span class="line">    <span class="keyword">this</span>.cacheExpire.refreshExpire(Collections.singletonList(genericKey));</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在获取之前，先做一次数据的刷新。</p>
<h5 id="3-刷新的实现"><a href="#3-刷新的实现" class="headerlink" title="3.刷新的实现"></a>3.刷新的实现</h5><p>实现原理也非常简单，就是一个循环，然后作删除即可。</p>
<p>这里加了一个小的优化：选择数量少的作为外循环。</p>
<p>循环集合的时间复杂度是 O(n), map.get() 的时间复杂度是 O(1);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshExpire</span><span class="params">(Collection&lt;K&gt; keyList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(CollectionUtil.isEmpty(keyList)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断大小，小的作为外循环。一般都是过期的 keys 比较小。</span></span><br><span class="line">    <span class="keyword">if</span>(keyList.size() &lt;= expireMap.size()) &#123;</span><br><span class="line">        <span class="keyword">for</span>(K key : keyList) &#123;</span><br><span class="line">            expireKey(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;K, Long&gt; entry : expireMap.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.expireKey(entry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>上面的代码写完之后，我们就可以验证一下了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ICache&lt;String, String&gt; cache = CacheBs.&lt;String,String&gt;newInstance()</span><br><span class="line">        .size(<span class="number">3</span>)</span><br><span class="line">        .build();</span><br><span class="line">cache.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">cache.expire(<span class="string">&quot;1&quot;</span>, <span class="number">10</span>);</span><br><span class="line">Assert.assertEquals(<span class="number">2</span>, cache.size());</span><br><span class="line"></span><br><span class="line">TimeUnit.MILLISECONDS.sleep(<span class="number">50</span>);</span><br><span class="line">Assert.assertEquals(<span class="number">1</span>, cache.size());</span><br><span class="line"></span><br><span class="line">System.out.println(cache.keySet());</span><br></pre></td></tr></table></figure>

<p>结果也符合我们的预期</p>
<h3 id="五-过期功能的优化"><a href="#五-过期功能的优化" class="headerlink" title="五.过期功能的优化"></a>五.过期功能的优化</h3><p>上面的过期功能的实现中存在两个问题：</p>
<p>（1）keys 的选择不够随机，可能会导致每次循环 100 个结束时，真正需要过期的没有被遍历到</p>
<p>（2）keys 的遍历可能大部分都是无效的</p>
<p>所以下面以过期时间为维度对过期功能进行优化</p>
<h4 id="基于时间的遍历"><a href="#基于时间的遍历" class="headerlink" title="基于时间的遍历"></a>基于时间的遍历</h4><h5 id="1-思路"><a href="#1-思路" class="headerlink" title="1.思路"></a>1.思路</h5><p>我们换一种思路，让过期的时间做 key，相同时间的需要过期的信息放在一个列表中，作为 value</p>
<p>然后对过期时间排序，轮询的时候就可以快速判断出是否有过期的信息了。</p>
<p>我们每次 put 放入过期元素时，根据过期时间对元素进行排序，相同的过期时间的 Keys 放在一起。</p>
<p>优点：定时遍历的时候，如果时间不到当前时间，就可以直接返回了，大大降低无效遍历。</p>
<p>缺点：考虑到惰性删除问题，还是需要存储以删除信息作为 key 的 map 关系，这样内存基本翻倍。</p>
<h5 id="2-基本属性定义"><a href="#2-基本属性定义" class="headerlink" title="2.基本属性定义"></a>2.基本属性定义</h5><p>我们这里使用 <code>TreeMap</code> 帮助我们进行过期时间的排序，这个集合后续有时间可以详细讲解了，我大概看了下 jdk1.8 的源码，主要是通过红黑树实现的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheExpireSort</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ICacheExpire</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单次清空的数量限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LIMIT = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序缓存存储</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 使用按照时间排序的缓存处理。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Long, List&lt;K&gt;&gt; sortMap = <span class="keyword">new</span> TreeMap&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Long&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Long o1, Long o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) (o1 - o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期 map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 空间换时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, Long&gt; expireMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ICache&lt;K,V&gt; cache;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-放入元素时"><a href="#3-放入元素时" class="headerlink" title="3.放入元素时"></a>3.放入元素时</h5><p>每次存入新元素时，同时放入 sortMap 和 expireMap。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">expire</span><span class="params">(K key, <span class="keyword">long</span> expireAt)</span> </span>&#123;</span><br><span class="line">    List&lt;K&gt; keys = sortMap.get(expireAt);</span><br><span class="line">    <span class="keyword">if</span>(keys == <span class="keyword">null</span>) &#123;</span><br><span class="line">        keys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    keys.add(key);</span><br><span class="line">    <span class="comment">// 设置对应的信息</span></span><br><span class="line">    sortMap.put(expireAt, keys);</span><br><span class="line">    expireMap.put(key, expireAt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="定时任务的执行"><a href="#定时任务的执行" class="headerlink" title="定时任务的执行"></a>定时任务的执行</h4><h5 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h5><p>我们定义一个定时任务，100ms 执行一次。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程执行类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ScheduledExecutorService EXECUTOR_SERVICE = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CacheExpireSort</span><span class="params">(ICache&lt;K, V&gt; cache)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cache = cache;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EXECUTOR_SERVICE.scheduleAtFixedRate(<span class="keyword">new</span> ExpireThread(), <span class="number">100</span>, <span class="number">100</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-执行任务"><a href="#2-执行任务" class="headerlink" title="2.执行任务"></a>2.执行任务</h5><p>实现源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时执行任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpireThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(MapUtil.isEmpty(sortMap)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 获取 key 进行处理</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Long, List&lt;K&gt;&gt; entry : sortMap.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">final</span> Long expireAt = entry.getKey();</span><br><span class="line">            List&lt;K&gt; expireKeys = entry.getValue();</span><br><span class="line">            <span class="comment">// 判断队列是否为空</span></span><br><span class="line">            <span class="keyword">if</span>(CollectionUtil.isEmpty(expireKeys)) &#123;</span><br><span class="line">                sortMap.remove(expireAt);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count &gt;= LIMIT) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 删除的逻辑处理</span></span><br><span class="line">            <span class="keyword">long</span> currentTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">if</span>(currentTime &gt;= expireAt) &#123;</span><br><span class="line">                Iterator&lt;K&gt; iterator = expireKeys.iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    K key = iterator.next();</span><br><span class="line">                    <span class="comment">// 先移除本身</span></span><br><span class="line">                    iterator.remove();</span><br><span class="line">                    expireMap.remove(key);</span><br><span class="line">                    <span class="comment">// 再移除缓存，后续可以通过惰性删除做补偿</span></span><br><span class="line">                    cache.remove(key);</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 直接跳过，没有过期的信息</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里直接遍历 sortMap，对应的 key 就是过期时间，然后和当前时间对比即可。</p>
<p>删除的时候，需要删除 expireMap/sortMap/cache。</p>
<h4 id="惰性删除刷新"><a href="#惰性删除刷新" class="headerlink" title="惰性删除刷新"></a>惰性删除刷新</h4><p>惰性删除刷新时，就会用到 expireMap。</p>
<p>因为有时候刷新的 key 就一个，如果没有 expireMap 映射关系，可能要把 sortMap 全部遍历一遍才能找到对应的过期时间。</p>
<p>就是一个时间复杂度与空间复杂度衡量的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshExpire</span><span class="params">(Collection&lt;K&gt; keyList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(CollectionUtil.isEmpty(keyList)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历判断过期信息</span></span><br><span class="line">    <span class="comment">// 这样维护两套的代价太大，后续优化，暂时不用。</span></span><br><span class="line">    <span class="comment">// 判断大小，小的作为外循环</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> expireSize = expireMap.size();</span><br><span class="line">    <span class="keyword">if</span>(expireSize &lt;= keyList.size()) &#123;</span><br><span class="line">        <span class="comment">// 一般过期的数量都是较少的</span></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;K,Long&gt; entry : expireMap.entrySet()) &#123;</span><br><span class="line">            K key = entry.getKey();</span><br><span class="line">            <span class="comment">// 这里直接执行过期处理，不再判断是否存在于集合中。</span></span><br><span class="line">            <span class="comment">// 因为基于集合的判断，时间复杂度为 O(n)</span></span><br><span class="line">            <span class="keyword">this</span>.removeExpireKey(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(K key : keyList) &#123;</span><br><span class="line">            <span class="keyword">this</span>.removeExpireKey(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除过期信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeExpireKey</span><span class="params">(<span class="keyword">final</span> K key)</span> </span>&#123;</span><br><span class="line">    Long expireTime = expireMap.get(key);</span><br><span class="line">    <span class="keyword">if</span>(expireTime != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> currentTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span>(currentTime &gt;= expireTime) &#123;</span><br><span class="line">            expireMap.remove(key);</span><br><span class="line">            List&lt;K&gt; expireKeys = sortMap.get(expireTime);</span><br><span class="line">            expireKeys.remove(key);</span><br><span class="line">            sortMap.put(expireTime, expireKeys);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="六-RBD持久化功能的实现"><a href="#六-RBD持久化功能的实现" class="headerlink" title="六.RBD持久化功能的实现"></a>六.RBD持久化功能的实现</h3><p>缓存的持久化功能分为以下两个部分：</p>
<ul>
<li>Cache 的内容持久化到文件或者数据库</li>
<li>初始化的时候加载持久化数据</li>
</ul>
<h4 id="持久化操作"><a href="#持久化操作" class="headerlink" title="持久化操作"></a>持久化操作</h4><h5 id="1-持久化操作接口"><a href="#1-持久化操作接口" class="headerlink" title="1.持久化操作接口"></a>1.持久化操作接口</h5><p>为了便于灵活替换，我们定义一个持久化的接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICachePersist</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持久化缓存信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cache 缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">persist</span><span class="params">(<span class="keyword">final</span> ICache&lt;K, V&gt; cache)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-持久化操作接口实现"><a href="#2-持久化操作接口实现" class="headerlink" title="2.持久化操作接口实现"></a>2.持久化操作接口实现</h5><p>我们实现一个最简单的基于 json 的持久化，当然后期可以添加类似于 AOF 的持久化模式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachePersistDbJson</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ICachePersist</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String dbPath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CachePersistDbJson</span><span class="params">(String dbPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dbPath = dbPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持久化</span></span><br><span class="line"><span class="comment">     * key长度 key+value</span></span><br><span class="line"><span class="comment">     * 第一个空格，获取 key 的长度，然后截取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cache 缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">persist</span><span class="params">(ICache&lt;K, V&gt; cache)</span> </span>&#123;</span><br><span class="line">        Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet = cache.entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文件</span></span><br><span class="line">        FileUtil.createFile(dbPath);</span><br><span class="line">        <span class="comment">// 清空文件</span></span><br><span class="line">        FileUtil.truncate(dbPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;K,V&gt; entry : entrySet) &#123;</span><br><span class="line">            K key = entry.getKey();</span><br><span class="line">            Long expireTime = cache.expire().expireTime(key);</span><br><span class="line">            <span class="comment">// 填充持久化数据</span></span><br><span class="line">            PersistEntry&lt;K,V&gt; persistEntry = <span class="keyword">new</span> PersistEntry&lt;&gt;();</span><br><span class="line">            persistEntry.setKey(key);</span><br><span class="line">            persistEntry.setValue(entry.getValue());</span><br><span class="line">            persistEntry.setExpire(expireTime);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 持久化数据转换为JSON数据</span></span><br><span class="line">            String line = JSON.toJSONString(persistEntry);</span><br><span class="line">            <span class="comment">// JSON数据追加到文件中</span></span><br><span class="line">            FileUtil.write(dbPath, line, StandardOpenOption.APPEND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-持久化操作的触发"><a href="#3-持久化操作的触发" class="headerlink" title="3.持久化操作的触发"></a>3.持久化操作的触发</h5><p>上面定义好了一种持久化的策略，但是没有提供对应的触发方式。</p>
<p>我们就采用对用户透明的设计方式：定时执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerCachePersist</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(InnerCachePersist.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ICache&lt;K,V&gt; cache;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存持久化策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ICachePersist&lt;K,V&gt; persist;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程执行类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ScheduledExecutorService EXECUTOR_SERVICE = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InnerCachePersist</span><span class="params">(ICache&lt;K, V&gt; cache, ICachePersist&lt;K, V&gt; persist)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cache = cache;</span><br><span class="line">        <span class="keyword">this</span>.persist = persist;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EXECUTOR_SERVICE.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;开始持久化缓存信息&quot;</span>);</span><br><span class="line">                    persist.persist(cache);</span><br><span class="line">                    log.info(<span class="string">&quot;完成持久化缓存信息&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;文件持久化异常&quot;</span>, exception);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定时执行的时间间隔为 10min。</p>
<h5 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h5><p>我们只需要在创建 Cache 时，指定我们的持久化策略即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ICache&lt;String, String&gt; cache = CacheBs.&lt;String,String&gt;newInstance()</span><br><span class="line">        .load(<span class="keyword">new</span> MyCacheLoad())</span><br><span class="line">        .persist(CachePersists.&lt;String, String&gt;dbJson(<span class="string">&quot;1.rdb&quot;</span>))</span><br><span class="line">        .build();</span><br><span class="line">Assert.assertEquals(<span class="number">2</span>, cache.size());</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<p>为了确保文件持久化完成，我们沉睡了一会儿。</p>
<p>测试结果如下</p>
<p>生成1.rdb文件内容如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;key&quot;</span>:<span class="string">&quot;2&quot;</span>,<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;2&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;key&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br></pre></td></tr></table></figure>



<h4 id="缓存数据的加载"><a href="#缓存数据的加载" class="headerlink" title="缓存数据的加载"></a>缓存数据的加载</h4><h5 id="1-缓存初始化接口"><a href="#1-缓存初始化接口" class="headerlink" title="1.缓存初始化接口"></a>1.缓存初始化接口</h5><p>缓存初始化即从持久化中提取数据到缓存内存中</p>
<p>为了便于后期拓展，定义 ICacheLoad 接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICacheLoad</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载缓存信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cache 缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">load</span><span class="params">(<span class="keyword">final</span> ICache&lt;K,V&gt; cache)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h5 id="2-缓存初始化接口实现"><a href="#2-缓存初始化接口实现" class="headerlink" title="2.缓存初始化接口实现"></a>2.缓存初始化接口实现</h5><p>我们只需要实现以下对应的加载即可，解析文件，然后初始化 cache。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载策略-文件路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheLoadDbJson</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ICacheLoad</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(CacheLoadDbJson.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String dbPath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CacheLoadDbJson</span><span class="params">(String dbPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dbPath = dbPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(ICache&lt;K, V&gt; cache)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lines = FileUtil.readAllLines(dbPath);</span><br><span class="line">        log.info(<span class="string">&quot;[load] 开始处理 path: &#123;&#125;&quot;</span>, dbPath);</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtil.isEmpty(lines)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;[load] path: &#123;&#125; 文件内容为空，直接返回&quot;</span>, dbPath);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String line : lines) &#123;</span><br><span class="line">            <span class="keyword">if</span>(StringUtil.isEmpty(line)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行</span></span><br><span class="line">            <span class="comment">// 简单的类型还行，复杂的这种反序列化会失败</span></span><br><span class="line">            PersistEntry&lt;K,V&gt; entry = JSON.parseObject(line, PersistEntry.class);</span><br><span class="line"></span><br><span class="line">            K key = entry.getKey();</span><br><span class="line">            V value = entry.getValue();</span><br><span class="line">            Long expire = entry.getExpire();</span><br><span class="line"></span><br><span class="line">            cache.put(key, value);</span><br><span class="line">            <span class="keyword">if</span>(ObjectUtil.isNotNull(expire)) &#123;</span><br><span class="line">                cache.expireAt(key, expire);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在初始化时使用即可。</p>
<h3 id="七-AOF持久化功能的实现"><a href="#七-AOF持久化功能的实现" class="headerlink" title="七.AOF持久化功能的实现"></a>七.AOF持久化功能的实现</h3><h4 id="Redis-AOF-解析"><a href="#Redis-AOF-解析" class="headerlink" title="Redis AOF 解析"></a>Redis AOF 解析</h4><h5 id="1-为什么选择-AOF？"><a href="#1-为什么选择-AOF？" class="headerlink" title="1.为什么选择 AOF？"></a>1.为什么选择 AOF？</h5><p>AOF 模式的<strong>性能特别好</strong>：</p>
<p>用过 kafka 的同学肯定知道，kafka 也用到了顺序写这个特性。</p>
<p>顺序写添加文件内容，避免了文件 IO 的随机写问题，性能基本可以和内存媲美。</p>
<p>AOF 的<strong>实时性更好</strong>，这个是相对于 RDB 模式而言的：</p>
<p>我们原来使用 RDB 模式，将缓存内容全部持久化，这个是比较耗时的动作，一般是几分钟持久化一次。</p>
<p>AOF 模式主要是针对修改内容的指令，然后将所有的指令顺序添加到文件中。这样的话，实时性会好很多，可以提升到秒级别，甚至秒级别。可以将AOF模式理解为一个操作流水表</p>
<h5 id="2-AOF-的吞吐量"><a href="#2-AOF-的吞吐量" class="headerlink" title="2.AOF 的吞吐量"></a>2.AOF 的吞吐量</h5><p>AOF 模式可以每次操作都进行持久化，但是这样会导致吞吐量大大下降。</p>
<p>提升吞吐量最常用的方式就是<strong>批量</strong>，这个 kafka 中也是类似的，比如我们可以 1s 持久化一次，将 1s 内的操作全部放入 buffer 中。</p>
<p>这里其实就是一个 trade-off 问题，实时性与吞吐量的平衡艺术。</p>
<p>实际业务中，1s 的误差一般都是可以接受的，所以这个也是业界比较认可的方式。</p>
<h5 id="3-AOF-的异步-多线程"><a href="#3-AOF-的异步-多线程" class="headerlink" title="3.AOF 的异步+多线程"></a>3.AOF 的异步+多线程</h5><p>kafka 中所有的操作实际上都是异步+回调的方式实现的。</p>
<p>异步+多线程，确实可以提升操作的性能。</p>
<p>当然 redis 6 以前，其实一直是单线程的。那为什么性能依然这么好呢？</p>
<p>其实多线程也有代价，那就是线程上下文的切换是需要耗时的，保持并发的安全问题，也需要加锁，从而降低性能。</p>
<p>所以这里要考虑异步的收益，与付出的耗时是否成正比的问题。</p>
<h5 id="4-AOF-的落盘"><a href="#4-AOF-的落盘" class="headerlink" title="4.AOF 的落盘"></a>4.AOF 的落盘</h5><p>我们 AOF 与 RDB 模式，归根结底都是基于操作系统的文件系统做持久化的。</p>
<p>对于开发者而言，可能就是调用一个 api 就实现了，但是实际持久化落盘的动作并不见得就是一步完成的。</p>
<p>文件系统为了提升吞吐量，也会采用类似 buffer 的方式。这忽然有一点俄罗斯套娃的味道。</p>
<p>但是优秀的设计总是相似的，比如说缓存从 cpu 的设计中就有 L1/L2 等等，思路是一致的。</p>
<p>阿里的很多开源技术，都会针对操作系统的落盘做进一步的优化，这个我们后续做深入学习</p>
<h5 id="5-AOF-的缺陷"><a href="#5-AOF-的缺陷" class="headerlink" title="5.AOF 的缺陷"></a>5.AOF 的缺陷</h5><p>大道缺一，没有银弹。</p>
<p>AOF 千好万好，和 RDB 对比也存在一个缺陷，那就是指令</p>
<h4 id="AOF注解实现"><a href="#AOF注解实现" class="headerlink" title="AOF注解实现"></a>AOF注解实现</h4><h5 id="1-接口"><a href="#1-接口" class="headerlink" title="1.接口"></a>1.接口</h5><p>接口和 rdb 的保持一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久化缓存接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt; key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt; value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICachePersist</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持久化缓存信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cache 缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">persist</span><span class="params">(<span class="keyword">final</span> ICache&lt;K, V&gt; cache)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-注解定义"><a href="#2-注解定义" class="headerlink" title="2.注解定义"></a>2.注解定义</h5><p>为了和耗时统计，刷新等特性保持一致，对于操作类的动作才添加到文件中（append to file）我们也基于注解属性来指定，而不是固定写死在代码中，便于后期拓展调整</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CacheInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作是否需要 append to file，默认为 false</span></span><br><span class="line"><span class="comment">     * 主要针对 cache 内容有变更的操作，不包括查询操作。</span></span><br><span class="line"><span class="comment">     * 包括删除，添加，过期等操作。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">aof</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在原来的 <code>@CacheInterceptor</code> 注解中添加 aof 属性，用于指定是否对操作开启 aof 模式</p>
<h5 id="3-过期操作中启用AOF"><a href="#3-过期操作中启用AOF" class="headerlink" title="3.过期操作中启用AOF"></a>3.过期操作中启用AOF</h5><p>类似于 spring 的事务拦截器，我们使用代理类调用 expireAt。</p>
<p>expire 方法就不需要添加 aof 拦截了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置过期时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key         key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timeInMills 毫秒时间之后过期</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> this</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheInterceptor</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ICache&lt;K, V&gt; <span class="title">expire</span><span class="params">(K key, <span class="keyword">long</span> timeInMills)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> expireTime = System.currentTimeMillis() + timeInMills;</span><br><span class="line">    <span class="comment">// 使用代理调用</span></span><br><span class="line">    Cache&lt;K,V&gt; cachePoxy = (Cache&lt;K, V&gt;) CacheProxy.getProxy(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> cachePoxy.expireAt(key, expireTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指定过期信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> timeInMills 时间戳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> this</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheInterceptor(aof = true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ICache&lt;K, V&gt; <span class="title">expireAt</span><span class="params">(K key, <span class="keyword">long</span> timeInMills)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.expire.expire(key, timeInMills);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-变更操作中启用AOF"><a href="#4-变更操作中启用AOF" class="headerlink" title="4.变更操作中启用AOF"></a>4.变更操作中启用AOF</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheInterceptor(aof = true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.1 尝试驱除</span></span><br><span class="line">    CacheEvictContext&lt;K,V&gt; context = <span class="keyword">new</span> CacheEvictContext&lt;&gt;();</span><br><span class="line">    context.key(key).size(sizeLimit).cache(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">boolean</span> evictResult = evict.evict(context);</span><br><span class="line">    <span class="keyword">if</span>(evictResult) &#123;</span><br><span class="line">        <span class="comment">// 执行淘汰监听器</span></span><br><span class="line">        ICacheRemoveListenerContext&lt;K,V&gt; removeListenerContext = CacheRemoveListenerContext.&lt;K,V&gt;newInstance().key(key).value(value).type(CacheRemoveType.EVICT.code());</span><br><span class="line">        <span class="keyword">for</span>(ICacheRemoveListener&lt;K,V&gt; listener : <span class="keyword">this</span>.removeListeners) &#123;</span><br><span class="line">            listener.listen(removeListenerContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2. 判断驱除后的信息</span></span><br><span class="line">    <span class="keyword">if</span>(isSizeLimit()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CacheRuntimeException(<span class="string">&quot;当前队列已满，数据添加失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 执行添加</span></span><br><span class="line">    <span class="keyword">return</span> map.put(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheInterceptor(aof = true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.remove(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheInterceptor(aof = true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    map.putAll(m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheInterceptor(refresh = true, aof = true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="AOF-持久化拦截实现"><a href="#AOF-持久化拦截实现" class="headerlink" title="AOF 持久化拦截实现"></a>AOF 持久化拦截实现</h4><h5 id="1-持久化对象定义"><a href="#1-持久化对象定义" class="headerlink" title="1.持久化对象定义"></a>1.持久化对象定义</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AOF 持久化明细</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersistAofEntry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object[] params;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String methodName;（</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getter &amp; setter &amp;toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们只需要方法名，和参数对象。</p>
<p>暂时实现的简单一些即可</p>
<h5 id="2-持久化拦截器"><a href="#2-持久化拦截器" class="headerlink" title="2.持久化拦截器"></a>2.持久化拦截器</h5><p>我们定义拦截器，当 cache 中定义的持久化类为 <code>CachePersistAof</code> 时，将操作的信息放入到 CachePersistAof 的 buffer 列表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheInterceptorAof</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ICacheInterceptor</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(CacheInterceptorAof.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(ICacheInterceptorContext&lt;K,V&gt; context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(ICacheInterceptorContext&lt;K,V&gt; context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 持久化类</span></span><br><span class="line">        ICache&lt;K,V&gt; cache = context.cache();</span><br><span class="line">        ICachePersist&lt;K,V&gt; persist = cache.persist();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(persist <span class="keyword">instanceof</span> CachePersistAof) &#123;</span><br><span class="line">            CachePersistAof&lt;K,V&gt; cachePersistAof = (CachePersistAof&lt;K,V&gt;) persist;</span><br><span class="line"></span><br><span class="line">            String methodName = context.method().getName();</span><br><span class="line">            PersistAofEntry aofEntry = PersistAofEntry.newInstance();</span><br><span class="line">            aofEntry.setMethodName(methodName);</span><br><span class="line">            aofEntry.setParams(context.params());</span><br><span class="line"></span><br><span class="line">            String json = JSON.toJSONString(aofEntry);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 直接持久化</span></span><br><span class="line">            log.debug(<span class="string">&quot;AOF 开始追加文件内容：&#123;&#125;&quot;</span>, json);</span><br><span class="line">            cachePersistAof.append(json);</span><br><span class="line">            log.debug(<span class="string">&quot;AOF 完成追加文件内容：&#123;&#125;&quot;</span>, json);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-拦截器调用"><a href="#3-拦截器调用" class="headerlink" title="3.拦截器调用"></a>3.拦截器调用</h5><p>当 AOF 的注解属性为 true 时，调用上述拦截器即可。</p>
<p>这里为了避免浪费，只有当持久化类为 AOF 模式时，才进行调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3. AOF 追加</span></span><br><span class="line"><span class="keyword">final</span> ICachePersist cachePersist = cache.persist();</span><br><span class="line"><span class="keyword">if</span>(cacheInterceptor.aof() &amp;&amp; (cachePersist <span class="keyword">instanceof</span> CachePersistAof)) &#123;</span><br><span class="line">    <span class="keyword">if</span>(before) &#123;</span><br><span class="line">        persistInterceptors.before(interceptorContext);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        persistInterceptors.after(interceptorContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="AOF持久化实现"><a href="#AOF持久化实现" class="headerlink" title="AOF持久化实现"></a>AOF持久化实现</h4><p>这里的 AOF 模式和以前的 RDB 持久化类只是不同的模式，实际上二者是相同的接口。</p>
<h5 id="1-接口-1"><a href="#1-接口-1" class="headerlink" title="1.接口"></a>1.接口</h5><p>这里我们统一定义了不同的持久化类的时间，便于 RDB 与 AOF 不同任务的不同时间间隔触发。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICachePersist</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持久化缓存信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cache 缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">persist</span><span class="params">(<span class="keyword">final</span> ICache&lt;K, V&gt; cache)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延迟时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 延迟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">delay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间间隔</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 间隔</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">period</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TimeUnit <span class="title">timeUnit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-持久化类实现"><a href="#2-持久化类实现" class="headerlink" title="2.持久化类实现"></a>2.持久化类实现</h5><p>实现一个 Buffer 列表，用于每次拦截器直接顺序添加</p>
<p>持久化的实现也比较简单，追加到文件之后，直接清空 buffer 列表即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存持久化-AOF 持久化模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachePersistAof</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">CachePersistAdaptor</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(CachePersistAof.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; bufferList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据持久化路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String dbPath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CachePersistAof</span><span class="params">(String dbPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dbPath = dbPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持久化</span></span><br><span class="line"><span class="comment">     * key长度 key+value</span></span><br><span class="line"><span class="comment">     * 第一个空格，获取 key 的长度，然后截取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cache 缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">persist</span><span class="params">(ICache&lt;K, V&gt; cache)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始 AOF 持久化到文件&quot;</span>);</span><br><span class="line">        <span class="comment">// 1. 创建文件</span></span><br><span class="line">        <span class="keyword">if</span>(!FileUtil.exists(dbPath)) &#123;</span><br><span class="line">            FileUtil.createFile(dbPath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 持久化追加到文件中</span></span><br><span class="line">        FileUtil.append(dbPath, bufferList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 清空 buffer 列表</span></span><br><span class="line">        bufferList.clear();</span><br><span class="line">        log.info(<span class="string">&quot;完成 AOF 持久化到文件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">delay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">period</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TimeUnit <span class="title">timeUnit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TimeUnit.SECONDS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加文件内容到 buffer 列表中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json json 信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(<span class="keyword">final</span> String json)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtil.isNotEmpty(json)) &#123;</span><br><span class="line">            bufferList.add(json);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="持久化测试"><a href="#持久化测试" class="headerlink" title="持久化测试"></a>持久化测试</h4><h5 id="1-测试代码"><a href="#1-测试代码" class="headerlink" title="1.测试代码"></a>1.测试代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ICache&lt;String, String&gt; cache = CacheBs.&lt;String,String&gt;newInstance()</span><br><span class="line">        .persist(CachePersists.&lt;String, String&gt;aof(<span class="string">&quot;1.aof&quot;</span>))</span><br><span class="line">        .build();</span><br><span class="line">cache.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">cache.expire(<span class="string">&quot;1&quot;</span>, <span class="number">10</span>);</span><br><span class="line">cache.remove(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<h5 id="2-测试日志"><a href="#2-测试日志" class="headerlink" title="2.测试日志"></a>2.测试日志</h5><p>expire 实际上调用的是 expireAt。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">02</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">41.979</span>] [main] [c.g.h.c.c.s.i.a.CacheInterceptorAof.after] - AOF 开始追加文件内容：&#123;<span class="string">&quot;methodName&quot;</span>:<span class="string">&quot;put&quot;</span>,<span class="string">&quot;params&quot;</span>:[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>]&#125;</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">02</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">41.980</span>] [main] [c.g.h.c.c.s.i.a.CacheInterceptorAof.after] - AOF 完成追加文件内容：&#123;<span class="string">&quot;methodName&quot;</span>:<span class="string">&quot;put&quot;</span>,<span class="string">&quot;params&quot;</span>:[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>]&#125;</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">02</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">41.982</span>] [main] [c.g.h.c.c.s.i.a.CacheInterceptorAof.after] - AOF 开始追加文件内容：&#123;<span class="string">&quot;methodName&quot;</span>:<span class="string">&quot;expireAt&quot;</span>,<span class="string">&quot;params&quot;</span>:[<span class="string">&quot;1&quot;</span>,<span class="number">1601612441990</span>]&#125;</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">02</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">41.982</span>] [main] [c.g.h.c.c.s.i.a.CacheInterceptorAof.after] - AOF 完成追加文件内容：&#123;<span class="string">&quot;methodName&quot;</span>:<span class="string">&quot;expireAt&quot;</span>,<span class="string">&quot;params&quot;</span>:[<span class="string">&quot;1&quot;</span>,<span class="number">1601612441990</span>]&#125;</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">02</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">41.984</span>] [main] [c.g.h.c.c.s.i.a.CacheInterceptorAof.after] - AOF 开始追加文件内容：&#123;<span class="string">&quot;methodName&quot;</span>:<span class="string">&quot;remove&quot;</span>,<span class="string">&quot;params&quot;</span>:[<span class="string">&quot;2&quot;</span>]&#125;</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">02</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">41.984</span>] [main] [c.g.h.c.c.s.i.a.CacheInterceptorAof.after] - AOF 完成追加文件内容：&#123;<span class="string">&quot;methodName&quot;</span>:<span class="string">&quot;remove&quot;</span>,<span class="string">&quot;params&quot;</span>:[<span class="string">&quot;2&quot;</span>]&#125;</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">02</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">42.088</span>] [pool-<span class="number">1</span>-thread-<span class="number">1</span>] [c.g.h.c.c.s.l.r.CacheRemoveListener.listen] - Remove key: <span class="number">1</span>, value: <span class="number">1</span>, type: expire</span><br><span class="line">[INFO] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">02</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">42.789</span>] [pool-<span class="number">2</span>-thread-<span class="number">1</span>] [c.g.h.c.c.s.p.InnerCachePersist.run] - 开始持久化缓存信息</span><br><span class="line">[INFO] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">02</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">42.789</span>] [pool-<span class="number">2</span>-thread-<span class="number">1</span>] [c.g.h.c.c.s.p.CachePersistAof.persist] - 开始 AOF 持久化到文件</span><br><span class="line">[INFO] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">02</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">42.798</span>] [pool-<span class="number">2</span>-thread-<span class="number">1</span>] [c.g.h.c.c.s.p.CachePersistAof.persist] - 完成 AOF 持久化到文件</span><br><span class="line">[INFO] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">02</span> <span class="number">12</span>:<span class="number">20</span>:<span class="number">42.799</span>] [pool-<span class="number">2</span>-thread-<span class="number">1</span>] [c.g.h.c.c.s.p.InnerCachePersist.run] - 完成持久化缓存信息</span><br></pre></td></tr></table></figure>



<h5 id="3-文件内容"><a href="#3-文件内容" class="headerlink" title="3.文件内容"></a>3.文件内容</h5><p><code>1.aof</code> 的文件内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;methodName&quot;</span>:<span class="string">&quot;put&quot;</span>,<span class="string">&quot;params&quot;</span>:[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>]&#125;</span><br><span class="line">&#123;<span class="string">&quot;methodName&quot;</span>:<span class="string">&quot;expireAt&quot;</span>,<span class="string">&quot;params&quot;</span>:[<span class="string">&quot;1&quot;</span>,<span class="number">1601612441990</span>]&#125;</span><br><span class="line">&#123;<span class="string">&quot;methodName&quot;</span>:<span class="string">&quot;remove&quot;</span>,<span class="string">&quot;params&quot;</span>:[<span class="string">&quot;2&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>

<p>将每一次的操作，简单的存储到文件中</p>
<h4 id="AOF-加载实现"><a href="#AOF-加载实现" class="headerlink" title="AOF 加载实现"></a>AOF 加载实现</h4><h5 id="1-加载"><a href="#1-加载" class="headerlink" title="1.加载"></a>1.加载</h5><p>类似于 RDB 的加载模式，aof 的加载模式也是类似的。</p>
<p>我们需要根据文件的内容，还原以前的缓存的内容。</p>
<p>实现思路：遍历文件内容，反射调用原来的方法。</p>
<h5 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h5><p><strong>解析文件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(ICache&lt;K, V&gt; cache)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; lines = FileUtil.readAllLines(dbPath);</span><br><span class="line">    log.info(<span class="string">&quot;[load] 开始处理 path: &#123;&#125;&quot;</span>, dbPath);</span><br><span class="line">    <span class="keyword">if</span>(CollectionUtil.isEmpty(lines)) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;[load] path: &#123;&#125; 文件内容为空，直接返回&quot;</span>, dbPath);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(String line : lines) &#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtil.isEmpty(line)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        <span class="comment">// 简单的类型还行，复杂的这种反序列化会失败</span></span><br><span class="line">        PersistAofEntry entry = JSON.parseObject(line, PersistAofEntry.class);</span><br><span class="line">        <span class="keyword">final</span> String methodName = entry.getMethodName();</span><br><span class="line">        <span class="keyword">final</span> Object[] objects = entry.getParams();</span><br><span class="line">        <span class="keyword">final</span> Method method = METHOD_MAP.get(methodName);</span><br><span class="line">        <span class="comment">// 反射调用</span></span><br><span class="line">        ReflectMethodUtil.invoke(cache, method, objects);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>方法映射的预加载</strong></p>
<p>Method 反射是固定的，为了提升性能，我们做一下预处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法缓存</span></span><br><span class="line"><span class="comment"> * 暂时比较简单，直接通过方法判断即可，不必引入参数类型增加复杂度。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Method&gt; METHOD_MAP = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Method[] methods = Cache.class.getMethods();</span><br><span class="line">    <span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">        CacheInterceptor cacheInterceptor = method.getAnnotation(CacheInterceptor.class);</span><br><span class="line">        <span class="keyword">if</span>(cacheInterceptor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 暂时</span></span><br><span class="line">            <span class="keyword">if</span>(cacheInterceptor.aof()) &#123;</span><br><span class="line">                String methodName = method.getName();</span><br><span class="line">                METHOD_MAP.put(methodName, method);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="持久化加载测试"><a href="#持久化加载测试" class="headerlink" title="持久化加载测试"></a>持久化加载测试</h4><h5 id="1-文件内容"><a href="#1-文件内容" class="headerlink" title="1.文件内容"></a>1.文件内容</h5><ul>
<li>default.aof</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;methodName&quot;</span>:<span class="string">&quot;put&quot;</span>,<span class="string">&quot;params&quot;</span>:[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ICache&lt;String, String&gt; cache = CacheBs.&lt;String,String&gt;newInstance()</span><br><span class="line">        .load(CacheLoads.&lt;String, String&gt;aof(<span class="string">&quot;default.aof&quot;</span>))</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">Assert.assertEquals(<span class="number">1</span>, cache.size());</span><br><span class="line">System.out.println(cache.keySet());</span><br></pre></td></tr></table></figure>

<p>直接将 default.aof 文件加载到 cache 缓存中</p>
<h3 id="八-监听器的开发"><a href="#八-监听器的开发" class="headerlink" title="八.监听器的开发"></a>八.监听器的开发</h3><p>下面我们将一起学习一下如何实现类似 guava-cache 中的 removeListener 删除监听器，和类似 redis 中的慢日志监控的 slowListener</p>
<p><strong>删除监听器</strong>：将数据驱除或过期时删除的数据记录打印到删除日志中</p>
<p><strong>慢操作监听器</strong>：当操作变慢时，将警告信息或报警信息打印到慢日志中</p>
<h4 id="删除监听器的开发"><a href="#删除监听器的开发" class="headerlink" title="删除监听器的开发"></a>删除监听器的开发</h4><h5 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1.基本介绍"></a>1.基本介绍</h5><p>我们在两种场景下删除数据是对用户透明的：</p>
<p>（1）size 满了之后，进行数据淘汰。</p>
<p>（2）expire 过期时，清除数据。</p>
<p>这两个特性对用户本来应该是无感的，不过用户如果关心的话，也可以通过添加删除监听器来获取到相关的变更信息</p>
<h5 id="2-实现思路"><a href="#2-实现思路" class="headerlink" title="2.实现思路"></a>2.实现思路</h5><p>为了实现删除的监听，我们需要找到删除的位置，然后调用监听器即可</p>
<ul>
<li>evict 驱除的场景</li>
</ul>
<p>​    每次 put 数据时，都会校验 size 是否达到最大的限制，如果达到，则进行 evict 淘汰</p>
<ul>
<li>expire 过期的场景</li>
</ul>
<p>​    用户指定 expire 时间之后，回后台异步执行刷新</p>
<p>​    也存在惰性删除的场景</p>
<h5 id="3-接口定义"><a href="#3-接口定义" class="headerlink" title="3.接口定义"></a>3.接口定义</h5><p>为了统一，我们将所有的删除都定义统一的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除监听器接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt; key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt; value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICacheRemoveListener</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">listen</span><span class="params">(<span class="keyword">final</span> ICacheRemoveListenerContext&lt;K,V&gt; context)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-内置实现"><a href="#4-内置实现" class="headerlink" title="4.内置实现"></a>4.内置实现</h5><p>系统内置的实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheRemoveListener</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ICacheRemoveListener</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(CacheRemoveListener.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(ICacheRemoveListenerContext&lt;K, V&gt; context)</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;Remove key: &#123;&#125;, value: &#123;&#125;, type: &#123;&#125;&quot;</span>,</span><br><span class="line">                context.key(), context.value(), context.type());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个监听器是默认开启的，暂时无法关闭</p>
<h5 id="5-自定义"><a href="#5-自定义" class="headerlink" title="5.自定义"></a>5.自定义</h5><p>用户可以自己的需要，进行自定义实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRemoveListener</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">ICacheRemoveListener</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(ICacheRemoveListenerContext&lt;K, V&gt; context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【删除提示】可恶，我竟然被删除了！&quot;</span> + context.key());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6-使用测试"><a href="#6-使用测试" class="headerlink" title="6.使用测试"></a>6.使用测试</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ICache&lt;String, String&gt; cache = CacheBs.&lt;String,String&gt;newInstance()</span><br><span class="line">        .size(<span class="number">1</span>)</span><br><span class="line">        .addRemoveListener(<span class="keyword">new</span> MyRemoveListener&lt;String, String&gt;())</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">cache.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">cache.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>我们指定 cache 的大小为1，设置我们自定义的删除监听器</p>
<p>这里的删除监听器可以添加多个</p>
<h5 id="7-测试结果"><a href="#7-测试结果" class="headerlink" title="7.测试结果"></a>7.测试结果</h5><p>测试日志如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[DEBUG] [<span class="number">2020</span>-09-<span class="number">30</span> <span class="number">19</span>:<span class="number">32</span>:<span class="number">54.617</span>] [main] [c.g.h.c.c.s.l.r.CacheRemoveListener.listen] - Remove key: <span class="number">2</span>, value: <span class="number">2</span>, type: evict</span><br><span class="line">【删除提示】可恶，我竟然被删除了！<span class="number">2</span></span><br></pre></td></tr></table></figure>



<h4 id="慢操作监听器开发"><a href="#慢操作监听器开发" class="headerlink" title="慢操作监听器开发"></a>慢操作监听器开发</h4><h5 id="1-说明"><a href="#1-说明" class="headerlink" title="1.说明"></a>1.说明</h5><p>redis 中会存储慢操作的相关日志信息，主要是由两个参数构成：</p>
<p>（1）slowlog-log-slower-than 预设阈值,它的单位是毫秒(1秒=1000000微秒)默认值是10000</p>
<p>（2）slowlog-max-len 最多存储多少条的慢日志记录</p>
<p>不过 redis 是直接存储到内存中，而且有长度限制。</p>
<p>根据实际工作体验，如果我们可以添加慢日志的监听，然后有对应的存储或者报警，这样更加方便问题的分析和快速反馈。</p>
<p>所以我们引入类似于删除的监听器。</p>
<h5 id="2-实现思路-1"><a href="#2-实现思路-1" class="headerlink" title="2.实现思路"></a>2.实现思路</h5><p>我们处理所有的 cache 操作，并且记录对应的操作耗时。</p>
<p>如果耗时操作用户设置的时间阈值，则调用慢操作监听器。</p>
<h5 id="3-接口定义-1"><a href="#3-接口定义-1" class="headerlink" title="3.接口定义"></a>3.接口定义</h5><p>为了保证接口的灵活性，每一个实现都可以定义自己的慢操作阈值，这样便于分级处理。</p>
<p>比如超过 100ms，用户可以选择输出 warn 日志；超过 1s，可能影响到业务了，可以直接接入报警系统。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICacheSlowListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">listen</span><span class="params">(<span class="keyword">final</span> ICacheSlowListenerContext context)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 慢日志的阈值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 慢日志的阙值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">slowerThanMills</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-自定义监听器"><a href="#4-自定义监听器" class="headerlink" title="4.自定义监听器"></a>4.自定义监听器</h5><p>实现接口 <code>ICacheSlowListener</code></p>
<p>这里每一个监听器都可以指定自己的慢日志阈值，便于分级处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySlowListener</span> <span class="keyword">implements</span> <span class="title">ICacheSlowListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(ICacheSlowListenerContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【慢日志】name: &quot;</span> + context.methodName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">slowerThanMills</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="5-使用测试"><a href="#5-使用测试" class="headerlink" title="5.使用测试"></a>5.使用测试</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ICache&lt;String, String&gt; cache = CacheBs.&lt;String,String&gt;newInstance()</span><br><span class="line">        .addSlowListener(<span class="keyword">new</span> MySlowListener())</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">cache.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">cache.get(<span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure>



<h5 id="6-测试结果"><a href="#6-测试结果" class="headerlink" title="6.测试结果"></a>6.测试结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[DEBUG] [<span class="number">2020</span>-09-<span class="number">30</span> <span class="number">17</span>:<span class="number">40</span>:<span class="number">11.547</span>] [main] [c.g.h.c.c.s.i.c.CacheInterceptorCost.before] - Cost start, method: put</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-09-<span class="number">30</span> <span class="number">17</span>:<span class="number">40</span>:<span class="number">11.551</span>] [main] [c.g.h.c.c.s.i.c.CacheInterceptorCost.after] - Cost end, method: put, cost: 10ms</span><br><span class="line">【慢日志】name: put</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-09-<span class="number">30</span> <span class="number">17</span>:<span class="number">40</span>:<span class="number">11.554</span>] [main] [c.g.h.c.c.s.i.c.CacheInterceptorCost.before] - Cost start, method: get</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-09-<span class="number">30</span> <span class="number">17</span>:<span class="number">40</span>:<span class="number">11.554</span>] [main] [c.g.h.c.c.s.i.c.CacheInterceptorCost.after] - Cost end, method: get, cost: 1ms</span><br><span class="line">【慢日志】name: get</span><br></pre></td></tr></table></figure>

<p>实际工作中，我们可以针对慢日志数据存储，便于后期分析。</p>
<p>也可以直接接入报警系统，及时反馈问题</p>
<h3 id="九-Redis-渐进式-Rehash详解"><a href="#九-Redis-渐进式-Rehash详解" class="headerlink" title="九.Redis 渐进式 Rehash详解"></a>九.Redis 渐进式 Rehash详解</h3><h4 id="HashMap-简介"><a href="#HashMap-简介" class="headerlink" title="HashMap 简介"></a>HashMap 简介</h4><h5 id="1-HashMap-的-rehash"><a href="#1-HashMap-的-rehash" class="headerlink" title="1.HashMap 的 rehash"></a>1.HashMap 的 rehash</h5><p>读过 HashMap 源码的同学，应该都知道 map 在扩容的时候，有一个 rehash 的过程</p>
<h5 id="2-HashMap-的扩容简介"><a href="#2-HashMap-的扩容简介" class="headerlink" title="2.HashMap 的扩容简介"></a>2.HashMap 的扩容简介</h5><p>这里简单介绍下：</p>
<p>扩容(resize)就是重新计算容量，向HashMap对象里不停的添加元素，而HashMap对象内部的数组无法装载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素</p>
<p>当然Java里的数组是无法自动扩容的，方法是使用一个新的数组代替已有的容量小的数组，就像我们用一个小桶装水，如果想装更多的水，就得换大水桶</p>
<h4 id="Redis-中的扩容设计"><a href="#Redis-中的扩容设计" class="headerlink" title="Redis 中的扩容设计"></a>Redis 中的扩容设计</h4><p>HashMap 的扩容需要对集合中大部分的元素进行重新计算，但是对于 redis 这种企业级应用，特别是单线程的应用，如果像传统的 rehash 一样把所有元素来一遍的话，估计要十几秒的时间。</p>
<p>十几秒对于常见的金融、电商等相对高并发的业务场景，是无法忍受的。</p>
<p>那么 redis 的 rehash 是如何实现的呢？</p>
<p>实际上 redis 的 rehash 动作并不是一次性、集中式地完成的， 而是<strong>分多次、渐进式地完成的</strong>。</p>
<p>这里补充一点，不单单是扩容，缩容也是一样的道理，二者都需要进行 rehash。</p>
<p>只增不降就是对内存的浪费，浪费就是犯罪，特别是内存还这么贵。</p>
<p>ps: 这种思想和 key 淘汰有异曲同工之妙，一口吃不了一个大胖子，一次搞不定，那就 1024 次，慢慢来总能解决问题</p>
<h4 id="Redis-的渐进式-rehash"><a href="#Redis-的渐进式-rehash" class="headerlink" title="Redis 的渐进式 rehash"></a>Redis 的渐进式 rehash</h4><p>这部分直接选自经典入门书籍《Redis 设计与实现》</p>
<h5 id="1-为什么要渐进式处理？"><a href="#1-为什么要渐进式处理？" class="headerlink" title="1.为什么要渐进式处理？"></a>1.为什么要渐进式处理？</h5><p>实际上 redis 内部有两个 hashtable，我们称之为 ht[0] 和 ht[1]。传统的 HashMap 中只有一个。</p>
<p>为了避免 rehash 对服务器性能造成影响， 服务器不是一次性将 ht[0] 里面的所有键值对全部 rehash 到 ht[1] ， 而是分多次、渐进式地将 ht[0] 里面的键值对慢慢地 rehash 到 ht[1] 。</p>
<h5 id="2-详细步骤"><a href="#2-详细步骤" class="headerlink" title="2.详细步骤"></a>2.详细步骤</h5><p>哈希表渐进式 rehash 的详细步骤：</p>
<p>（1）为 ht[1] 分配空间， 让字典同时持有 ht[0] 和 ht[1] 两个哈希表。</p>
<p>（2）在字典中维持一个索引计数器变量 rehashidx ， 并将它的值设置为 0 ， 表示 rehash 工作正式开始。</p>
<p>（3）在 rehash 进行期间， 每次对字典执行添加、删除、查找或者更新操作时， 程序除了执行指定的操作以外， 还会顺带将 ht[0] 哈希表在 rehashidx 索引上的所有键值对 rehash 到 ht[1] ， 当 rehash 工作完成之后， 程序将 rehashidx 属性的值增1。</p>
<p>（4）随着字典操作的不断执行， 最终在某个时间点上， ht[0] 的所有键值对都会被 rehash 至 ht[1] ， 这时程序将 rehashidx 属性的值设为 -1 ， 表示 rehash 操作已完成。</p>
<p>渐进式 rehash 的好处在于它采取分而治之的方式， 将 rehash 键值对所需的计算工作均滩到对字典的每个添加、删除、查找和更新操作上， 从而避免了集中式 rehash 而带来的庞大计算量。</p>
<h5 id="3-rehash-间的操作怎么兼容呢？"><a href="#3-rehash-间的操作怎么兼容呢？" class="headerlink" title="3.rehash 间的操作怎么兼容呢？"></a>3.rehash 间的操作怎么兼容呢？</h5><p>因为在进行渐进式 rehash 的过程中， 字典会同时使用 ht[0] 和 ht[1] 两个哈希表， 那这期间的操作如何保证正常进行呢？</p>
<p>（1）查询一个信息</p>
<p>这个类似于我们的数据库信息等迁移，先查询一个库，没有的话，再去查询另一个库。</p>
<p>ht[0] 中没找到，我们去 ht[1] 中查询即可。</p>
<p>（2）新数据怎么办？</p>
<p>这个和数据迁移一样的道理。</p>
<p>当我们有新旧的两个系统时，新来的用户等信息直接落在新系统即可，</p>
<p>这一措施保证了 ht[0] 包含的键值对数量会只减不增， 并随着 rehash 操作的执行而最终变成空表。</p>
<h4 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h4><h5 id="1-什么时候判断？"><a href="#1-什么时候判断？" class="headerlink" title="1.什么时候判断？"></a>1.什么时候判断？</h5><p>redis 在每次执行 put 操作的时候，就可以检查是否需要扩容。</p>
<p>其实也很好理解，put 插入元素的时候，判断是否需要扩容，然后开始扩容，是直接的一种思路。</p>
<p>留一个思考题：我们可以在其他的时候判断吗？</p>
<h5 id="2-redis-判断是否需要扩容的源码"><a href="#2-redis-判断是否需要扩容的源码" class="headerlink" title="2.redis 判断是否需要扩容的源码"></a>2.redis 判断是否需要扩容的源码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Expand the hash table if needed */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">_dictExpandIfNeeded</span><span class="params">(dict *d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* Incremental rehashing already in progress. Return. */</span></span><br><span class="line">    <span class="comment">// 如果正在进行渐进式扩容，则返回OK</span></span><br><span class="line">    <span class="keyword">if</span> (dictIsRehashing(d)) <span class="keyword">return</span> DICT_OK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If the hash table is empty expand it to the initial size. */</span></span><br><span class="line">    <span class="comment">// 如果哈希表ht[0]的大小为0，则初始化字典</span></span><br><span class="line">    <span class="keyword">if</span> (d-&gt;ht[<span class="number">0</span>].size == <span class="number">0</span>) <span class="keyword">return</span> dictExpand(d, DICT_HT_INITIAL_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If we reached the 1:1 ratio, and we are allowed to resize the hash</span></span><br><span class="line"><span class="comment">     * table (global setting) or we should avoid it but the ratio between</span></span><br><span class="line"><span class="comment">     * elements/buckets is over the &quot;safe&quot; threshold, we resize doubling</span></span><br><span class="line"><span class="comment">     * the number of buckets. */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果哈希表ht[0]中保存的key个数与哈希表大小的比例已经达到1:1，即保存的节点数已经大于哈希表大小</span></span><br><span class="line"><span class="comment">     * 且redis服务当前允许执行rehash，或者保存的节点数与哈希表大小的比例超过了安全阈值（默认值为5）</span></span><br><span class="line"><span class="comment">     * 则将哈希表大小扩容为原来的两倍</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (d-&gt;ht[<span class="number">0</span>].used &gt;= d-&gt;ht[<span class="number">0</span>].size &amp;&amp;</span><br><span class="line">        (dict_can_resize ||</span><br><span class="line">         d-&gt;ht[<span class="number">0</span>].used/d-&gt;ht[<span class="number">0</span>].size &gt; dict_force_resize_ratio))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> dictExpand(d, d-&gt;ht[<span class="number">0</span>].used*<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DICT_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>扩容的条件总结下来就是两句话：</p>
<p>（1）服务器目前没有在执行 BGSAVE/BGREWRITEAOF 命令， 并且哈希表的负载因子大于等于 1；</p>
<p>（2）服务器目前正在执行 BGSAVE/BGREWRITEAOF 命令， 并且哈希表的负载因子大于等于 5；</p>
<p>这里其实体现了作者的一种设计思想：如果负载因子超过5，说明信息已经很多了，管你在不在保存，都要执行扩容，优先保证服务可用性。如果没那么高，那就等持久化完成再做 rehash。</p>
<p>我们自己在实现的时候可以简化一下，比如只考虑情况2。</p>
<h5 id="3-扩容到原来的多少？"><a href="#3-扩容到原来的多少？" class="headerlink" title="3.扩容到原来的多少？"></a>3.扩容到原来的多少？</h5><p>知道了什么时候应该开始扩容，但是要扩容到多大也是值得思考的一个问题。</p>
<p>扩容的太小，会导致频繁扩容，浪费性能。</p>
<p>扩容的太大，会导致资源的浪费。</p>
<p>其实这个最好的方案是结合我们实际的业务，不过这部分对用户是透明的。</p>
<p>一般是扩容为原来的两倍。</p>
<h5 id="4-为什么需要扩容？"><a href="#4-为什么需要扩容？" class="headerlink" title="4.为什么需要扩容？"></a>4.为什么需要扩容？</h5><p>我们在实现 ArrayList 的时候需要扩容，因为数据放不下了。</p>
<p>我们知道 HashMap 的底层是数组 + 链表（红黑树）的数据结构。</p>
<p>那么会存在放不下的情况吗？</p>
<p>个人理解实际上不会。因为链表可以一直加下去。</p>
<p>那为什么需要扩容呢？</p>
<p>实际上更多的是处于性能的考虑。我们使用 HashMap 就是为了提升性能，如果一直不扩容，可以理解为元素都 hash 到相同的 bucket 上，这时就退化成了一个链表。</p>
<p>这会导致查询等操作性能大大降低。</p>
<h4 id="缩容"><a href="#缩容" class="headerlink" title="缩容"></a>缩容</h4><h5 id="1-什么时候判断？-1"><a href="#1-什么时候判断？-1" class="headerlink" title="1.什么时候判断？"></a>1.什么时候判断？</h5><p>看了前面的扩容，我们比较直观地方式是在用户 remove 元素的时候执行是否需要缩容。</p>
<p>不过 redis 并不完全等同于传统的 HashMap，还有数据的淘汰和过期，这些是对用户透明的。</p>
<p>redis 采用的方式实际上是一个定时任务。</p>
<p>个人理解内存缩容很重要，但是没有那么紧急，我们可以 1min 扫描一次，这样可以节省机器资源。</p>
<p>实际工作中，一般 redis 的内存都是逐步上升的，或者稳定在一个范围内，很少去大批量删除数据。（除非数据搞错了，我就遇到过一次，数据同步错地方了）。</p>
<p>所以数据删除，一般几分钟内给用户一个反馈就行。</p>
<p>知其然，知其所以然。</p>
<p>我们懂得了这个道理也就懂得了为什么有时候删除 redis 的几百万 keys，内存也不是直接降下来的原因。</p>
<h5 id="2-缩容的条件"><a href="#2-缩容的条件" class="headerlink" title="2.缩容的条件"></a>2.缩容的条件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* If the percentage of used slots in the HT reaches HASHTABLE_MIN_FILL</span></span><br><span class="line"><span class="comment"> * we resize the hash table to save memory */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tryResizeHashTables</span><span class="params">(<span class="keyword">int</span> dbid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (htNeedsResize(server.db[dbid].dict))</span><br><span class="line">        dictResize(server.db[dbid].dict);</span><br><span class="line">    <span class="keyword">if</span> (htNeedsResize(server.db[dbid].expires))</span><br><span class="line">        dictResize(server.db[dbid].expires);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Hash table parameters */</span></span><br><span class="line">#define HASHTABLE_MIN_FILL        10      /* Minimal hash table fill 10% */</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">htNeedsResize</span><span class="params">(dict *dict)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> size, used;</span><br><span class="line"></span><br><span class="line">    size = dictSlots(dict);</span><br><span class="line">    used = dictSize(dict);</span><br><span class="line">    <span class="keyword">return</span> (size &gt; DICT_HT_INITIAL_SIZE &amp;&amp;</span><br><span class="line">            (used*<span class="number">100</span>/size &lt; HASHTABLE_MIN_FILL));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Resize the table to the minimal size that contains all the elements,</span></span><br><span class="line"><span class="comment"> * but with the invariant of a USED/BUCKETS ratio near to &lt;= 1 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dictResize</span><span class="params">(dict *d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minimal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!dict_can_resize || dictIsRehashing(d)) <span class="keyword">return</span> DICT_ERR;</span><br><span class="line">    minimal = d-&gt;ht[<span class="number">0</span>].used;</span><br><span class="line">    <span class="keyword">if</span> (minimal &lt; DICT_HT_INITIAL_SIZE)</span><br><span class="line">        minimal = DICT_HT_INITIAL_SIZE;</span><br><span class="line">    <span class="keyword">return</span> dictExpand(d, minimal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和扩容类似，不过这里的缩容比例不是 5 倍，而是当哈希表保存的key数量与哈希表的大小的比例小于 10% 时需要缩容。</p>
<h5 id="3-缩容到多少？"><a href="#3-缩容到多少？" class="headerlink" title="3.缩容到多少？"></a>3.缩容到多少？</h5><p>最简单的方式是直接变为原来的一半，不过这么做有时候也不是那么好用。</p>
<p>redis 是<strong>缩容后的大小为第一个大于等于当前key数量的2的n次方。</strong></p>
<p>这个可能不太好理解，举几个数字就懂了：</p>
<table>
<thead>
<tr>
<th align="left">keys数量</th>
<th align="left">缩容大小</th>
</tr>
</thead>
<tbody><tr>
<td align="left">3</td>
<td align="left">4</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">4</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">8</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">16</td>
</tr>
</tbody></table>
<p>主要保障以下3点：</p>
<p>（1）缩容之后，要大于等于 key 的数量</p>
<p>（2）尽可能的小，节约内存</p>
<p>（3）2 的倍数。</p>
<p>第三个看过 HashMap 源码讲解的小伙伴应该深有体会。</p>
<p>当然也不能太小，redis 限制的最小为 4。</p>
<p>实际上如果 redis 中只放 4 个 key，实在是杀鸡用牛刀，一般不会这么小。</p>
<p>我们在实现的时候，直接参考 jdk 好了，给个最小值限制 8。</p>
<h5 id="4-为什么需要缩容？"><a href="#4-为什么需要缩容？" class="headerlink" title="4.为什么需要缩容？"></a>4.为什么需要缩容？</h5><p>最核心的目的就是为了节约内存，其实还有一个原因，叫 small means fast（小即是快——老马）。</p>
<h4 id="渐进式-ReHash-实现的思考"><a href="#渐进式-ReHash-实现的思考" class="headerlink" title="渐进式 ReHash 实现的思考"></a>渐进式 ReHash 实现的思考</h4><p>好了，扩容和缩容就聊到这里，那么这个渐进式 rehash 到底怎么一个渐进法？</p>
<h5 id="1-扩容前"><a href="#1-扩容前" class="headerlink" title="1.扩容前"></a>1.扩容前</h5><p>不需要扩容时应该有至少需要初始化两个元素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashtable[<span class="number">0</span>] = <span class="keyword">new</span> HashTable(size);</span><br><span class="line">hashIndex=-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">hashtable[<span class="number">1</span>] = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>hashtable 中存储着当前的元素信息，hashIndex=-1 标识当前没有在进行扩容。</p>
<h5 id="2-扩容准备"><a href="#2-扩容准备" class="headerlink" title="2.扩容准备"></a>2.扩容准备</h5><p>当需要扩容的时候，我们再去创建一个 hashtable[1]，并且 size 是原来的 2倍。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashtable[<span class="number">0</span>] = <span class="keyword">new</span> HashTable(size);</span><br><span class="line"></span><br><span class="line">hashtable[<span class="number">1</span>] = <span class="keyword">new</span> HashTable(<span class="number">2</span> * size);</span><br><span class="line"></span><br><span class="line">hashIndex=-<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>主要是为了节约内存，使用惰性初始化的方式创建 hashtable。</p>
<h5 id="3-扩容时"><a href="#3-扩容时" class="headerlink" title="3.扩容时"></a>3.扩容时</h5><p>调整 hashIndex=0…size，逐步去 rehash 到新的 hashtable[1]</p>
<p>新的插入全部放入到 hashtable[1]</p>
<h5 id="4-扩容后"><a href="#4-扩容后" class="headerlink" title="4.扩容后"></a>4.扩容后</h5><p>扩容后我们应该把 hashtable[0] 的值更新为 hashtable[1]，并且释放掉 hashtable[1] 的资源。</p>
<p>并且设置 hashIndex=-1，标识已经 rehash 完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashtable[<span class="number">0</span>] = hashtable[<span class="number">1</span>];</span><br><span class="line">hashIndex=-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">hashtable[<span class="number">1</span>] = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>这样整体的实现思路就已经差不多了，光说不练假把式，我们下一节就来自己实现一个渐进式 rehash 的 HashMap</p>
<h3 id="十-实现渐进式ReHash-Map类定义"><a href="#十-实现渐进式ReHash-Map类定义" class="headerlink" title="十.实现渐进式ReHash Map类定义"></a>十.实现渐进式ReHash Map类定义</h3><h4 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自己实现的渐进式 rehash map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt; key 泛型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt; value 泛型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HashMap</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProgressiveReHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和简易版本类似。</p>
<h4 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(MyProgressiveReHashMap.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rehash 的下标</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果 rehashIndex != -1，说明正在进行 rehash</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rehashIndex = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 容量</span></span><br><span class="line"><span class="comment"> * 默认为 8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处于 rehash 状态的容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rehashCapacity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计大小的信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阈值</span></span><br><span class="line"><span class="comment"> * 阈值=容量*factor</span></span><br><span class="line"><span class="comment"> * 暂时不考虑最大值的问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 当达到这个阈值的时候，直接进行两倍的容量扩充+rehash。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> factor = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来存放信息的 table 数组。</span></span><br><span class="line"><span class="comment"> * 数组：数组的下标是一个桶，桶对应的元素 hash 值相同。</span></span><br><span class="line"><span class="comment"> * 桶里放置的是一个链表。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 可以理解为 table 是一个 ArrayList</span></span><br><span class="line"><span class="comment"> * arrayList 中每一个元素，都是一个 DoubleLinkedList</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;List&lt;Entry&lt;K, V&gt;&gt;&gt; table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 渐进式 rehash 时，用来存储元素信息使用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;List&lt;Entry&lt;K, V&gt;&gt;&gt; rehashTable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否开启 debug 模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> debugMode = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>

<p>rehashIndex/rehashCapacity/rehashTable 这三个值都是我们在进行渐进式实现的时候需要使用的值。</p>
<h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><p>主要是一些值的初始化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyProgressiveReHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化 hash map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> capacity 初始化容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyProgressiveReHashMap</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(capacity, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化 hash map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> capacity 初始化容量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> debugMode 是否开启 debug 模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyProgressiveReHashMap</span><span class="params">(<span class="keyword">int</span> capacity, <span class="keyword">boolean</span> debugMode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    <span class="comment">// 初始化最大为容量的个数，如果 hash 的非常完美的话。</span></span><br><span class="line">    <span class="keyword">this</span>.table = <span class="keyword">new</span> ArrayList&lt;&gt;(capacity);</span><br><span class="line">    <span class="comment">// 初始化为空列表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; capacity; i++) &#123;</span><br><span class="line">        <span class="keyword">this</span>.table.add(i, <span class="keyword">new</span> ArrayList&lt;Entry&lt;K, V&gt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.debugMode = debugMode;</span><br><span class="line">    <span class="keyword">this</span>.rehashIndex = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.rehashCapacity = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.rehashTable = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="put-方法"><a href="#put-方法" class="headerlink" title="put() 方法"></a>put() 方法</h4><p>这个方法相对难度比较大：</p>
<p>put() 的过程可以见方法的注释。</p>
<p>需要考虑是否为 rehash 阶段，还需要考虑是否为更新。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * put 一个值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * （1）如果不处于 rehash 阶段</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.1 判断是否为 table 更新，如果是，则进行更新</span></span><br><span class="line"><span class="comment"> * 1.2 如果不是更新，则进行插入</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 插入的时候可能触发 rehash</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * （2）如果处于 rehash 阶段</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.0 执行一次渐进式 rehash 的动作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.1 判断是否为更新，需要遍历 table 和 rehashTable</span></span><br><span class="line"><span class="comment"> * 如果是，执行更新</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.2 如果不是，则执行插入</span></span><br><span class="line"><span class="comment"> * 插入到 rehashTable 中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isInRehash = isInReHash();</span><br><span class="line">    <span class="keyword">if</span>(!isInRehash) &#123;</span><br><span class="line">        <span class="comment">//1. 是否为更新</span></span><br><span class="line">        Pair&lt;Boolean, V&gt; pair = updateTableInfo(key, value, <span class="keyword">this</span>.table, <span class="keyword">this</span>.capacity);</span><br><span class="line">        <span class="keyword">if</span>(pair.getValueOne()) &#123;</span><br><span class="line">            V oldVal = pair.getValueTwo();</span><br><span class="line">            <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;不处于渐进式 rehash，此次为更新操作。key: &#123;&#125;, value: &#123;&#125;&quot;</span>, key, value);</span><br><span class="line">                printTable(<span class="keyword">this</span>.table);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> oldVal;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 插入</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.createNewEntry(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//2.0 执行一个附加操作，进行渐进式 rehash 处理</span></span><br><span class="line">        <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;当前处于渐进式 rehash 阶段，额外执行一次渐进式 rehash 的动作&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rehashToNew();</span><br><span class="line">        <span class="comment">//2.1 是否为 table 更新</span></span><br><span class="line">        Pair&lt;Boolean, V&gt; pair = updateTableInfo(key, value, <span class="keyword">this</span>.table, <span class="keyword">this</span>.capacity);</span><br><span class="line">        <span class="keyword">if</span>(pair.getValueOne()) &#123;</span><br><span class="line">            V oldVal = pair.getValueTwo();</span><br><span class="line">            <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;此次为更新 table 操作。key: &#123;&#125;, value: &#123;&#125;&quot;</span>, key, value);</span><br><span class="line">                printTable(<span class="keyword">this</span>.table);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> oldVal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.2 是否为 rehashTable 更新</span></span><br><span class="line">        Pair&lt;Boolean, V&gt; pair2 = updateTableInfo(key, value, <span class="keyword">this</span>.rehashTable, <span class="keyword">this</span>.rehashCapacity);</span><br><span class="line">        <span class="keyword">if</span>(pair2.getValueOne()) &#123;</span><br><span class="line">            V oldVal = pair2.getValueTwo();</span><br><span class="line">            <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;此次为更新 rehashTable 操作。key: &#123;&#125;, value: &#123;&#125;&quot;</span>, key, value);</span><br><span class="line">                printTable(<span class="keyword">this</span>.table);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> oldVal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.3 插入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.createNewEntry(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="1-是否为-rehash-阶段"><a href="#1-是否为-rehash-阶段" class="headerlink" title="1.是否为 rehash 阶段"></a>1.是否为 rehash 阶段</h5><p>这个实现比较简单，就是判断 rehashIndex 是否为 -1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否处于 rehash 阶段</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isInReHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rehashIndex != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-更新列表信息"><a href="#2-更新列表信息" class="headerlink" title="2.更新列表信息"></a>2.更新列表信息</h5><p>这里为了复用，对方法进行了抽象。可以同时使用到 table 和 rehashTable 中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否为更新信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> table table 信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableCapacity table 的容量（使用 size 也可以，因为都默认初始化了。）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 更新结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Pair&lt;Boolean, V&gt; <span class="title">updateTableInfo</span><span class="params">(K key, V value, <span class="keyword">final</span> List&lt;List&lt;Entry&lt;K,V&gt;&gt;&gt; table,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">final</span> <span class="keyword">int</span> tableCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 计算 index 值</span></span><br><span class="line">    <span class="keyword">int</span> hash = HashUtil.hash(key);</span><br><span class="line">    <span class="keyword">int</span> index = HashUtil.indexFor(hash, tableCapacity);</span><br><span class="line">    <span class="comment">// 判断是否为替换</span></span><br><span class="line">    List&lt;Entry&lt;K,V&gt;&gt; entryList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(index &lt; table.size()) &#123;</span><br><span class="line">        entryList = table.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">for</span>(Entry&lt;K,V&gt; entry : entryList) &#123;</span><br><span class="line">        <span class="comment">// 二者的 key 都为 null，或者二者的 key equals()</span></span><br><span class="line">        <span class="keyword">final</span> K entryKey = entry.getKey();</span><br><span class="line">        <span class="keyword">if</span>(ObjectUtil.isNull(key, entryKey)</span><br><span class="line">                || key.equals(entryKey)) &#123;</span><br><span class="line">            <span class="keyword">final</span> V oldValue = entry.getValue();</span><br><span class="line">            <span class="comment">// 更新新的 value</span></span><br><span class="line">            entry.setValue(value);</span><br><span class="line">            <span class="keyword">return</span> Pair.of(<span class="keyword">true</span>, oldValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Pair.of(<span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个和以前基本是类似的。</p>
<p>返回结果时，为了同时保存是否为更新，以及更新的 value 值。所以使用了 Pair 工具类。</p>
<h5 id="3-插入新的元素"><a href="#3-插入新的元素" class="headerlink" title="3.插入新的元素"></a>3.插入新的元素</h5><p>插入方法也比较麻烦，需要区分是否处于渐进式 rehash 阶段。还要考虑是否需要扩容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个新的明细</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * （1）如果处于渐进式 rehash 中，则设置到 rehashTable 中</span></span><br><span class="line"><span class="comment"> * （2）如果不是，则判断是否需要扩容</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.1 如果扩容，则直接放到 rehashTable 中。</span></span><br><span class="line"><span class="comment"> * 因为我们每次扩容内存翻倍，一次只处理一个 index 的信息，所以不会直接 rehash 结束，直接放到新的 rehashTable 中即可</span></span><br><span class="line"><span class="comment"> * 2.2 如果不扩容，则放入 table 中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">createNewEntry</span><span class="params">(<span class="keyword">final</span> K key,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> V value)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; entry = <span class="keyword">new</span> DefaultMapEntry&lt;&gt;(key, value);</span><br><span class="line">    <span class="comment">// 重新计算 tableIndex</span></span><br><span class="line">    <span class="keyword">int</span> hash = HashUtil.hash(key);</span><br><span class="line">    <span class="comment">//是否处于 rehash 中？</span></span><br><span class="line">    <span class="keyword">if</span>(isInReHash()) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = HashUtil.indexFor(hash, <span class="keyword">this</span>.rehashCapacity);</span><br><span class="line">        List&lt;Entry&lt;K,V&gt;&gt; list = <span class="keyword">this</span>.rehashTable.get(index);</span><br><span class="line">        list.add(entry);</span><br><span class="line">        <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;目前处于 rehash 中，元素直接插入到 rehashTable 中。&quot;</span>);</span><br><span class="line">            printTable(<span class="keyword">this</span>.rehashTable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否需要扩容 &amp;&amp; 不处于渐进式 rehash</span></span><br><span class="line">    <span class="comment">// rehash 一定是扩容 rehashTable</span></span><br><span class="line">    <span class="comment">// 如果发生了 rehash，元素是直接放到 rehashTable 中的</span></span><br><span class="line">    <span class="keyword">if</span>(isNeedExpand()) &#123;</span><br><span class="line">        rehash();</span><br><span class="line">        <span class="comment">// 放入到 rehashTable 中</span></span><br><span class="line">        <span class="keyword">int</span> index = HashUtil.indexFor(hash, <span class="keyword">this</span>.rehashCapacity);</span><br><span class="line">        List&lt;Entry&lt;K,V&gt;&gt; list = <span class="keyword">this</span>.rehashTable.get(index);</span><br><span class="line">        list.add(entry);</span><br><span class="line">        <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;目前处于 rehash 中，元素直接插入到 rehashTable 中。&quot;</span>);</span><br><span class="line">            printTable(<span class="keyword">this</span>.rehashTable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> index = HashUtil.indexFor(hash, <span class="keyword">this</span>.capacity);</span><br><span class="line">        List&lt;Entry&lt;K,V&gt;&gt; list = <span class="keyword">this</span>.table.get(index);</span><br><span class="line">        list.add(entry);</span><br><span class="line">        <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;目前不处于 rehash 中，元素直接插入到 table 中。&quot;</span>);</span><br><span class="line">            printTable(<span class="keyword">this</span>.table);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.size++;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是否需要扩容的方法也比较简单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否需要扩容</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 比例满足，且不处于渐进式 rehash 中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNeedExpand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 验证比例</span></span><br><span class="line">    <span class="keyword">double</span> rate = size*<span class="number">1.0</span> / capacity*<span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">return</span> rate &gt;= factor &amp;&amp; !isInReHash();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不过我们这次添加了一个不要处于渐进式 rehash 过程中。</p>
<p>其中 rehash 的实现也发生了很大的变化，具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接 rehash 的流程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * （1）如果处于 rehash 中，直接返回</span></span><br><span class="line"><span class="comment"> * （2）初始化 rehashTable，并且更新 rehashIndex=0;</span></span><br><span class="line"><span class="comment"> * （3）获取 table[0]，rehash 到 rehashTable 中</span></span><br><span class="line"><span class="comment"> * （4）设置 table[0] = new ArrayList();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isInReHash()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;当前处于渐进式 rehash 阶段，不重复进行 rehash!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化 rehashTable</span></span><br><span class="line">    <span class="keyword">this</span>.rehashIndex = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.rehashCapacity = <span class="number">2</span>*capacity;</span><br><span class="line">    <span class="keyword">this</span>.rehashTable = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.rehashCapacity);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rehashCapacity; i++) &#123;</span><br><span class="line">        rehashTable.add(i, <span class="keyword">new</span> ArrayList&lt;Entry&lt;K, V&gt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历元素第一个元素，其他的进行渐进式更新。</span></span><br><span class="line">    rehashToNew();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渐进式更新的方法，可以在 get/put/remove 等操作时，执行附加操作时使用。</p>
<p>所以单独抽成了一个方法，实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将信息从旧的 table 迁移到新的 table 中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * （1）table[rehashIndex] 重新 rehash 到 rehashTable 中</span></span><br><span class="line"><span class="comment"> * （2）设置 table[rehashIndex] = new ArrayList();</span></span><br><span class="line"><span class="comment"> * （3）判断是否完成渐进式 rehash</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehashToNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rehashIndex++;</span><br><span class="line"></span><br><span class="line">    List&lt;Entry&lt;K, V&gt;&gt; list = table.get(rehashIndex);</span><br><span class="line">    <span class="keyword">for</span>(Entry&lt;K, V&gt; entry : list) &#123;</span><br><span class="line">        <span class="keyword">int</span> hash = HashUtil.hash(entry);</span><br><span class="line">        <span class="keyword">int</span> index = HashUtil.indexFor(hash, rehashCapacity);</span><br><span class="line">        <span class="comment">//  添加元素</span></span><br><span class="line">        <span class="comment">// 获取列表，避免数组越界</span></span><br><span class="line">        List&lt;Entry&lt;K,V&gt;&gt; newList = rehashTable.get(index);</span><br><span class="line">        <span class="comment">// 添加元素到列表</span></span><br><span class="line">        <span class="comment">// 元素不存在重复，所以不需要考虑更新</span></span><br><span class="line">        newList.add(entry);</span><br><span class="line">        rehashTable.set(index, newList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空 index 处的信息</span></span><br><span class="line">    table.set(rehashIndex, <span class="keyword">new</span> ArrayList&lt;Entry&lt;K, V&gt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断大小是否完成 rehash</span></span><br><span class="line">    <span class="comment">// 验证是否已经完成</span></span><br><span class="line">    <span class="keyword">if</span>(rehashIndex == (table.size()-<span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = <span class="keyword">this</span>.rehashCapacity;</span><br><span class="line">        <span class="keyword">this</span>.table = <span class="keyword">this</span>.rehashTable;</span><br><span class="line">        <span class="keyword">this</span>.rehashIndex = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.rehashCapacity = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.rehashTable = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;渐进式 rehash 已经完成。&quot;</span>);</span><br><span class="line">            printTable(<span class="keyword">this</span>.table);</span><br><span class="line">        &#125;p</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;渐进式 rehash 处理中, 目前 index：&#123;&#125; 已完成&quot;</span>, rehashIndex);</span><br><span class="line">            printAllTable();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="get-操作"><a href="#get-操作" class="headerlink" title="get() 操作"></a>get() 操作</h4><p>渐进式 rehash 将动作分散到每一个操作中，我们对 get 方法进行重写，当做一个例子。其他的方法如果实现也是类似的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询方法</span></span><br><span class="line"><span class="comment"> * （1）如果处于渐进式 rehash 状态，额外执行一次 rehashToNew()</span></span><br><span class="line"><span class="comment"> * （2）判断 table 中是否存在元素</span></span><br><span class="line"><span class="comment"> * （3）判断 rehashTable 中是否存在元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isInReHash()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;当前处于渐进式 rehash 状态，额外执行一次操作&quot;</span>);</span><br><span class="line">            rehashToNew();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 判断 table 中是否存在</span></span><br><span class="line">    V result = getValue(key, <span class="keyword">this</span>.table);</span><br><span class="line">    <span class="keyword">if</span>(result != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 是否处于渐进式 rehash</span></span><br><span class="line">    <span class="keyword">if</span>(isInReHash()) &#123;</span><br><span class="line">        <span class="keyword">return</span> getValue(key, <span class="keyword">this</span>.rehashTable);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><p>我们历经千辛万苦，终于实现了一个简单版本的渐进式 hash map。</p>
<p>下面来测试一下功能是否符合我们的预期。</p>
<h5 id="1-put-操作"><a href="#1-put-操作" class="headerlink" title="1.put 操作"></a>1.put 操作</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> MyProgressiveReHashMap&lt;&gt;(<span class="number">2</span>, <span class="keyword">true</span>);</span><br><span class="line">map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>日志：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">30</span>:<span class="number">15.072</span>] [main] [c.g.h.d.s.c.u.m.MyProgressiveReHashMap.createNewEntry] - 目前不处于 rehash 中，元素直接插入到 table 中。</span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">1</span>&#125; </span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">30</span>:<span class="number">15.076</span>] [main] [c.g.h.d.s.c.u.m.MyProgressiveReHashMap.put] - 不处于渐进式 rehash，此次为更新操作。key: <span class="number">1</span>, value: <span class="number">2</span></span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">2</span>&#125; </span><br></pre></td></tr></table></figure>

<p>第一次是插入，第二次是更新。</p>
<p>这里都没有触发扩容，下面我们看一下触发扩容的情况。</p>
<h5 id="2-扩容测试"><a href="#2-扩容测试" class="headerlink" title="2.扩容测试"></a>2.扩容测试</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> MyProgressiveReHashMap&lt;&gt;(<span class="number">2</span>, <span class="keyword">true</span>);</span><br><span class="line">map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">Assert.assertEquals(<span class="string">&quot;1&quot;</span>, map.get(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">Assert.assertEquals(<span class="string">&quot;2&quot;</span>, map.get(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">Assert.assertEquals(<span class="string">&quot;3&quot;</span>, map.get(<span class="string">&quot;3&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>日志如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">12.559</span>] [main] [c.g.h.d.s.c.u.m.MyProgressiveReHashMap.createNewEntry] - 目前不处于 rehash 中，元素直接插入到 table 中。</span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">1</span>&#125; </span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">12.560</span>] [main] [c.g.h.d.s.c.u.m.MyProgressiveReHashMap.createNewEntry] - 目前不处于 rehash 中，元素直接插入到 table 中。</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">2</span>&#125; </span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">1</span>&#125; </span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">12.563</span>] [main] [c.g.h.d.s.c.u.m.MyProgressiveReHashMap.rehashToNew] - 渐进式 rehash 处理中, 目前 index：<span class="number">0</span> 已完成</span><br><span class="line">原始 table 信息: </span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">1</span>&#125; </span><br><span class="line">新的 table 信息: </span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">2</span>&#125; </span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">12.563</span>] [main] [c.g.h.d.s.c.u.m.MyProgressiveReHashMap.createNewEntry] - 目前处于 rehash 中，元素直接插入到 rehashTable 中。</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">2</span>&#125; </span><br><span class="line">&#123;<span class="number">3</span>: <span class="number">3</span>&#125; </span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">12.564</span>] [main] [c.g.h.d.s.c.u.m.MyProgressiveReHashMap.get] - 当前处于渐进式 rehash 状态，额外执行一次操作</span><br><span class="line">[DEBUG] [<span class="number">2020</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">12.564</span>] [main] [c.g.h.d.s.c.u.m.MyProgressiveReHashMap.rehashToNew] - 渐进式 rehash 已经完成。</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">2</span>&#125; </span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">1</span>&#125; </span><br><span class="line">&#123;<span class="number">3</span>: <span class="number">3</span>&#125; </span><br></pre></td></tr></table></figure>

<p>当放入元素【3】的时候，已经触发了 rehash。</p>
<p>（1）第一次渐进式 rehash 将 table[0] 的元素 rehash 到了新的节点。</p>
<p>（2）插入的元素直接插入到 rehashTable 中</p>
<p>（3）get 操作时，额外触发一次 rehash，然后所有的 rehash 已经完成。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.jianshu.com/p/4ffc613d6eaf">Fluent Interface 流式接口</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>项目实战</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java|项目深度解析</title>
    <url>/2021/10/25/Java/Java-%E9%A1%B9%E7%9B%AE%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202209011353612.jpeg" alt="img"></p>
<span id="more"></span>

<h3 id="常用集合解析"><a href="#常用集合解析" class="headerlink" title="常用集合解析"></a>常用集合解析</h3><p>必看资料：</p>
<p><a href="https://autovy.github.io/2022/04/20/Java/Java-渐进式本地缓存框架开发总结/">渐进式本地缓存开发总结</a></p>
<p><a href="https://interview.javaguide.cn/#/./docs/b-2Java集合">Java集合面试题</a></p>
<p><a href="https://javaguide.cn/java/collection/arraylist-source-code.html#项目相关">Java集合源码分析</a></p>
<p><a href="https://www.cnblogs.com/javastack/p/13397621.html">Java 编译期与运行期</a></p>
<h3 id="JVM调试与栈溢出"><a href="#JVM调试与栈溢出" class="headerlink" title="JVM调试与栈溢出"></a>JVM调试与栈溢出</h3><p><strong>必看资料：</strong></p>
<p><a href="https://www.jianshu.com/p/a2f98f6d6fbd">循环依赖的解决方案</a></p>
<p><a href="https://javaguide.cn/java/jvm/jdk-monitoring-and-troubleshooting-tools.html#jdk-命令行工具">JDK 监控和故障处理工具总结</a></p>
<p><a href="https://www.v2ex.com/t/701513">JVM 堆溢出抽丝剥茧定位的过程</a></p>
<p><a href="https://heapdump.cn/article/276879">JVM源码分析之栈溢出完全解读</a></p>
<p><a href="https://interview.javaguide.cn/#/./docs/b-4jvm">JVM核心知识</a></p>
<h4 id="一-栈溢出应用场景：循环依赖"><a href="#一-栈溢出应用场景：循环依赖" class="headerlink" title="一.栈溢出应用场景：循环依赖"></a>一.栈溢出应用场景：循环依赖</h4><p>在Springboot + JPA的架构中，容易出现循环依赖问题，一般会出现在一对多的场景下，总结来说是一对多实体中都要引用对方来维持OnetoMany的关系，所以极容易出现循环依赖:(</p>
<h5 id="1-经典场景"><a href="#1-经典场景" class="headerlink" title="1.经典场景"></a>1.经典场景</h5><p>订单项中引用订单，以构成多对一关系（可以使用订单id查到订单项）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个订单可以有多个订单项（不同产品/不同用户，同一订单）</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name=&quot;oid&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Order order;</span><br></pre></td></tr></table></figure>



<p>订单中引用订单项存储在集合中，用来存储从数据库查询来的结构（往往是因为要利用这些字段进行计算）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 订单项列表</span></span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> List&lt;OrderItem&gt; orderItems;</span><br><span class="line"><span class="comment">// 订单总金额</span></span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> total;</span><br><span class="line"><span class="comment">// 订单物品总数量</span></span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> totalNumber;</span><br></pre></td></tr></table></figure>



<p>这样的结构就是循环依赖，导致数据重复加载，因为orderItems要调用方法填充，所以会为空（一般情况下会栈溢出）最终造成的数据是：Order含有orderItems，orderItems含有Order，Order的orderItem列表为空，所以这里的Order重复了一次</p>
<h5 id="2-方案一：-JsonBackReference注解"><a href="#2-方案一：-JsonBackReference注解" class="headerlink" title="2.方案一：@JsonBackReference注解"></a>2.方案一：@JsonBackReference注解</h5><p>JsonBackReference注解用在一（一对多的一）的一方，可以阻止其被序列化，前提是对应的接口不需要调用到它，而只是需要用它来查询</p>
<p>如：一个产品有多张图片，我们不需要在图片列表接口使用到产品信息，而只是需要用产品id查询其图片</p>
<p><strong>产品类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="comment">// 产品首图</span></span><br><span class="line"><span class="keyword">private</span> ProductImage firstProductImage;</span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ProductImage&gt; productSingleImages;</span><br><span class="line"><span class="meta">@Transient</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ProductImage&gt; productDetailImages;</span><br></pre></td></tr></table></figure>



<p><strong>产品图片类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name=&quot;pid&quot;)</span></span><br><span class="line"><span class="meta">@JsonBackReference</span></span><br><span class="line"><span class="keyword">private</span> Product product;</span><br></pre></td></tr></table></figure>



<p><strong>缺点</strong></p>
<ul>
<li>关系是双向的，使用了JsonBackReference，就无法使用根据图片找到其属于的产品的方法，只能单方向查询即根据产品查找到其图片列表</li>
<li>JsonBackReference标记的字段与Redis的整合会有冲突</li>
</ul>
<h5 id="3-方案二：及时清除法"><a href="#3-方案二：及时清除法" class="headerlink" title="3.方案二：及时清除法"></a>3.方案二：及时清除法</h5><p>在服务层定义清除方法，在控制层调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Orderitem中有Order字段，标注多对一关系</span></span><br><span class="line"><span class="comment">// Order中有Orderitem列表，用于存储订单项列表</span></span><br><span class="line"><span class="comment">// Order中有Orderitem列表，而Orderitem中又有Order字段，产生无穷的递归</span></span><br><span class="line"><span class="comment">// 所以这里需要设置Orderitem的Order设为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeOrderFromOrderItem</span><span class="params">(List &lt;Order&gt; orders)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (Order order : orders) &#123;</span><br><span class="line">		removeOrderFromOrderItem(order);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeOrderFromOrderItem</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">	List&lt;OrderItem&gt; orderItems= order.getOrderItems();</span><br><span class="line">	<span class="keyword">for</span> (OrderItem orderItem : orderItems) &#123;</span><br><span class="line">		orderItem.setOrder(<span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 填充Order的orderItem列表</span></span><br><span class="line">orderItemService.fill(page.getContent());</span><br><span class="line"><span class="comment">// 清除orderItem中的Order字段</span></span><br><span class="line">orderService.removeOrderFromOrderItem(page.getContent());</span><br></pre></td></tr></table></figure>



<h4 id="二-JVM"><a href="#二-JVM" class="headerlink" title="二.JVM"></a>二.JVM</h4><p>参考资料：<a href="https://interview.javaguide.cn/#/./docs/b-4jvm">JVM核心知识</a></p>
<h3 id="多线程解析"><a href="#多线程解析" class="headerlink" title="多线程解析"></a>多线程解析</h3><p>必看资料：</p>
<p><a href="https://interview.javaguide.cn/#/./docs/b-3Java多线程">Java多线程核心知识</a></p>
<p><a href="http://gitbook.chenqiong.net/part10/1/9.html">多线程应用场景</a></p>
<p><a href="https://blog.csdn.net/u014044812/article/details/64919813">Spring多线程批量发送邮件</a></p>
<h3 id="Spring-AOP解析"><a href="#Spring-AOP解析" class="headerlink" title="Spring AOP解析"></a>Spring AOP解析</h3><p>必看资料：</p>
<p><a href="https://www.qetool.com/scripts/view/7573.html">Spring @Cacheable注解类内部调用失效的解决方案 </a></p>
<p><a href="https://zhuanlan.zhihu.com/p/83204146">Spring AOP应用</a></p>
<p><a href="https://javaguide.cn/system-design/framework/spring/spring-knowledge-and-questions-summary.html#spring-aop">AOP面试题</a></p>
<h4 id="一-缓存AOP拦截失效问题"><a href="#一-缓存AOP拦截失效问题" class="headerlink" title="一.缓存AOP拦截失效问题"></a>一.缓存AOP拦截失效问题</h4><p><a href="https://www.qetool.com/scripts/view/7573.html">Spring @Cacheable注解类内部调用失效的解决方案 </a></p>
<h5 id="1-问题出现原因"><a href="#1-问题出现原因" class="headerlink" title="1.问题出现原因"></a>1.问题出现原因</h5><p>因为Springboot的缓存机制是通过切面编程aop来实现，从fill方法中调用listByCategory即内部调用，aop是拦截不到的，自然不会走缓存，这里我们可以通过SpringContextUtil工具类诱发aop</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 填充分类中的产品集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(Category category)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过SpringContextUtil调用listByCategory上的缓存方法</span></span><br><span class="line">    <span class="comment">// 即 @Cacheable(key=&quot;&#x27;products-cid-&#x27;+ #p0.id&quot;)</span></span><br><span class="line">    <span class="comment">// 这样在方法内部的查询也能够使用缓存</span></span><br><span class="line">    ProductService productService = SpringContextUtil.getBean(ProductService.class);</span><br><span class="line">    List&lt;Product&gt; products = productService.listByCategory(category);</span><br><span class="line">    productImageService.setFirstProdutImages(products);</span><br><span class="line">    category.setProducts(products);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-问题解决方案"><a href="#2-问题解决方案" class="headerlink" title="2.问题解决方案"></a>2.问题解决方案</h5><p>SpringContextUtil工具类诱发aop</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.tmall.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextUtil</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SpringContextUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span></span>&#123;</span><br><span class="line">        SpringContextUtil.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> applicationContext.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="二-AOP与日志处理"><a href="#二-AOP与日志处理" class="headerlink" title="二.AOP与日志处理"></a>二.AOP与日志处理</h4><p><a href="https://zhuanlan.zhihu.com/p/83204146">Spring AOP应用</a></p>
<h4 id="三-SpringBoot原理"><a href="#三-SpringBoot原理" class="headerlink" title="三.SpringBoot原理"></a>三.SpringBoot原理</h4><h5 id="1-SpringBoot自动配置过程"><a href="#1-SpringBoot自动配置过程" class="headerlink" title="1.SpringBoot自动配置过程"></a>1.SpringBoot自动配置过程</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/image-20220923081735147.png" alt="image-20220923081735147"></p>
<h5 id="2-SpringBoot启动过程"><a href="#2-SpringBoot启动过程" class="headerlink" title="2.SpringBoot启动过程"></a>2.SpringBoot启动过程</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/image-20220923081811756.png" alt="image-20220923081811756"></p>
<h3 id="MySQL解析"><a href="#MySQL解析" class="headerlink" title="MySQL解析"></a>MySQL解析</h3><p><strong>必看资料</strong>：</p>
<p><a href="https://interview.javaguide.cn/#/./docs/d-1-mysql?id=_42-mysql">MySQL常见面试题总结</a></p>
<p><a href="https://segmentfault.com/a/1190000024445924">谈谈 MySQL 的 JSON 数据类型 </a></p>
<p><a href="https://blog.csdn.net/qq_24468953/article/details/120758408">简单总结 mysql json类型的利与弊</a></p>
<p><a href="https://javaguide.cn/database/mysql/mysql-index.html#一-mysql-基础架构分析">MySQL索引详解</a></p>
<p><a href="https://www.jianshu.com/p/4dbbaaa200c4">数据库索引为什么使用B+树</a></p>
<h4 id="一-物资申请系统数据库信息"><a href="#一-物资申请系统数据库信息" class="headerlink" title="一.物资申请系统数据库信息"></a>一.物资申请系统数据库信息</h4><p><a href="https://interview.javaguide.cn/#/./docs/d-1-mysql?id=_42-mysql">MySQL常见面试题总结</a></p>
<h5 id="1-物资申请表"><a href="#1-物资申请表" class="headerlink" title="1.物资申请表"></a>1.物资申请表</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202205041045668.png" alt="image-20220504104541342"></p>
<ul>
<li>用户id : 物资申请条目 = 1 : n</li>
<li>机构id : 物资申请条目 = 1 : n</li>
</ul>
<h5 id="2-物资申请详情表"><a href="#2-物资申请详情表" class="headerlink" title="2.物资申请详情表"></a>2.物资申请详情表</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202205041053586.png" alt="image-20220504105313339"></p>
<ul>
<li>物资申请条目id : 物资申请详情条目 = n : n</li>
<li>物资id : 物资申请详情条目 = n : n</li>
<li>(物资申请条目id,物资id) : 物资申请详情条目 = 1 : n</li>
</ul>
<h5 id="3-物资表"><a href="#3-物资表" class="headerlink" title="3.物资表"></a>3.物资表</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202205041059831.png" alt="image-20220504105953610"></p>
<h5 id="4-用户表"><a href="#4-用户表" class="headerlink" title="4.用户表"></a>4.用户表</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202205041102927.png" alt="image-20220504110242618"></p>
<ul>
<li>用户信息条目 : 权限id = 1 : 1</li>
</ul>
<h5 id="5-权限表"><a href="#5-权限表" class="headerlink" title="5.权限表"></a>5.权限表</h5><p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202205041104629.png" alt="image-20220504110408506"></p>
<h4 id="二-数据库分表"><a href="#二-数据库分表" class="headerlink" title="二.数据库分表"></a>二.数据库分表</h4><p><a href="https://segmentfault.com/a/1190000024445924">谈谈 MySQL 的 JSON 数据类型 </a></p>
<p><a href="https://blog.csdn.net/qq_24468953/article/details/120758408">简单总结 mysql json类型的利与弊</a></p>
<h5 id="1-相关表的结构"><a href="#1-相关表的结构" class="headerlink" title="1.相关表的结构"></a>1.相关表的结构</h5><p>此处展示的表结构为维护前</p>
<p>物资申请表：共4817条数据</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203031543098.png" alt="image-20220303154338625"></p>
<p>物资信息表：</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203031545235.png" alt="image-20220303154513022"></p>
<p>goods_count：当前仓库物品数（物理的）</p>
<p>good_leftCount：当前物品可借数（网络的：存在部分未借出，但已被预订仍在审核中的物品）</p>
<h5 id="2-优化思路：物资申请表分表"><a href="#2-优化思路：物资申请表分表" class="headerlink" title="2.优化思路：物资申请表分表"></a>2.优化思路：物资申请表分表</h5><p>改版前的系统使用的数据库是5.4版本，其默认的引擎是MyISAM 引擎，为了让数据库有更好的性能，我们将系统的数据库升级到了5.7.26版本，InnoDB 是 气的默认存储引擎</p>
<p>从上面的tw_apply表就可以知道：</p>
<ul>
<li><p>在用户提出申请后，物资申请信息被后端拼成了一个字符串存储在apply_content（同时利用了前端的数据执行了物品可借数的预扣除，所以这部分没有用到物资申请信息字符串的解析）</p>
</li>
<li><p>通过审核后，物品正式借出，这时候只留有物资申请信息的字符串存储在数据库，所以需要后端对该字符串解析提取出申请物资与其借用数量，再去操作数据库</p>
</li>
</ul>
<p>由于Mysql对JSON类型的支持是5.7以后的版本才有的，所以之前版本的物品申请内容字符串是以物品 + 申请数量并用逗号隔开多个物品申请内容这样的格式构成，我一开始也考虑其转换为JSON格式，但是在考虑到应用场景后，决定对其进行分表，将多对多关系分为了两个一对多关系</p>
<p>数据库设计十分不合理，甚至不符合第一范式，<strong>浪费数据库大量存储空间</strong>不说，而且后端拼接字符串解析字符串这一过程<strong>十分耗时且占用内存</strong>，而且最新的需求是需要增加一个审核过程申请物资调整功能</p>
<p>所以我将物资申请表进行分表（水平分表），分出物资申请详情表并联系物资信息表，其结构如下</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203031646110.png" alt="image-20220303164602406"></p>
<p>删除掉apply_content字段，节省数据库空间</p>
<p>分表后，通过tw_applydetail表，我们对物资申请信息的所以内容进行操作，省去了物资审核接口对字符串解析的耗时过程并且方便审核过程申请物资调整功能的开发（通过tw_appdetail找到物品信息和物品数量）</p>
<h5 id="3-优化操作：存储过程脚本"><a href="#3-优化操作：存储过程脚本" class="headerlink" title="3.优化操作：存储过程脚本"></a>3.优化操作：存储过程脚本</h5><p>存储过程（Stored Procedure）是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象</p>
<p>这里值得注意的是在遍历游标的循环中，如果查询不存在或为空会跳出循环</p>
<p>当时经过一天的对存储过程的学习，我总结出了以下经验：存储过程非常不方便调试，而且报错信息只定位不报错误类型（sql是这样的）。如果能重来，对数据库的批量操作，首选Python或Shell</p>
<h5 id="4-优化结果"><a href="#4-优化结果" class="headerlink" title="4.优化结果"></a>4.优化结果</h5><ul>
<li>截至目前物资申请表已有4817条数据，考虑到后面数据会长期积累，这样的优化是有必要的</li>
<li>去掉后端耗时耗内存的字符串解析工作</li>
<li>节省数据库存储空间，优化前申请表内存占0.79MB，优化后占0.56MB</li>
</ul>
<p>另外附加一个容量查询小工具，可查询数据库各表容量大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">table_schema as &#39;数据库&#39;,</span><br><span class="line">table_name as &#39;表名&#39;,</span><br><span class="line">table_rows as &#39;记录数&#39;,</span><br><span class="line">truncate(data_length&#x2F;1024&#x2F;1024, 2) as &#39;数据容量(MB)&#39;,</span><br><span class="line">truncate(index_length&#x2F;1024&#x2F;1024, 2) as &#39;索引容量(MB)&#39;</span><br><span class="line">from information_schema.tables</span><br><span class="line">where table_schema&#x3D;&#39;bgs&#39;</span><br><span class="line">order by data_length desc, index_length desc;</span><br></pre></td></tr></table></figure>



<h4 id="三-数据库索引的使用"><a href="#三-数据库索引的使用" class="headerlink" title="三.数据库索引的使用"></a>三.数据库索引的使用</h4><p><a href="https://javaguide.cn/database/mysql/mysql-index.html#一-mysql-基础架构分析">MySQL索引详解</a></p>
<p><a href="https://www.jianshu.com/p/4dbbaaa200c4">数据库索引为什么使用B+树</a></p>
<p>由于日志表数据庞大，有3万条数据，为了达到快速通过用户名模糊查找到日志操作内容和操作时间，我一开始的方案是选择了使用索引，以操作人作为索引模糊查询操作日志</p>
<h5 id="1-相关表结构"><a href="#1-相关表结构" class="headerlink" title="1.相关表结构"></a>1.相关表结构</h5><p>日志记录表：共33687条数据</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203031910440.png" alt="image-20220303191047146"></p>
<h5 id="2-优化思路：添加索引"><a href="#2-优化思路：添加索引" class="headerlink" title="2.优化思路：添加索引"></a>2.优化思路：添加索引</h5><p>另外在模糊查询中，<strong>like语句要使索引生效，like后不能以%开始，也就是说 （like %字段名%） 、（like %字段名）这类语句会使索引失效，而（like 字段名）、（like 字段名%）这类语句索引是可以正常使用</strong></p>
<p>所以我将查询的模糊匹配由“%xxxx%”改为“xxxx%”，只模糊匹配前面部分</p>
<h5 id="3-优化操作"><a href="#3-优化操作" class="headerlink" title="3.优化操作"></a>3.优化操作</h5><p>这里直接使用Navicat可视化添加索引，因为后台查询日志是需要用用户名模糊查找到日志操作内容和操作时间，所以需要添加的索引为log_realnam</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203031939750.png" alt="image-20220303193939350"></p>
<p>更改mybatis的sql映射，解决sql注入和索引失效问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT log_realname, log_content, log_time FROM tw_log WHERE log_realname LIKE &quot;%$&#123;log_name&#125;%&quot;;  </span><br></pre></td></tr></table></figure>



<p>在这种情况下使用#程序会报错，新手程序员就把#号改成了$,这样如果java代码层面没有对用户输入的内容做处理势必会产生SQL注入漏洞。</p>
<p>正确写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT log_realname, log_content, log_time FROM tw_log WHERE log_realname LIKE concat(‘%’,#&#123;log_name&#125;, ‘%’) </span><br></pre></td></tr></table></figure>



<h5 id="4-优化结果-1"><a href="#4-优化结果-1" class="headerlink" title="4.优化结果"></a>4.优化结果</h5><ul>
<li>添加索引前使用用户名模糊查询日志，耗时大约0.045s，添加索引后耗时大约0.032s，减少了磁盘IO，提高了查询速度</li>
<li>修改mybatis中模糊查询的sql语句，解决索引失效的问题，并解决了模糊查询中拼接字符串的sql注入问题</li>
</ul>
<p>但是加索引这种方案没有被采纳，因为在系统上操作日志包括了，注册登录申请审批等操作，插入是非常频繁的，而日志查询只会被管理员少量使用，所以后续使用了ES来提高查询效率</p>
<h3 id="大数据框架解析"><a href="#大数据框架解析" class="headerlink" title="大数据框架解析"></a>大数据框架解析</h3><p><strong>必看资料：</strong></p>
<p><a href="https://www.cnblogs.com/ifme/p/12005026.html">Spring Data Elasticsearch基本使用</a></p>
<p><a href="https://onblogs.net/2019/05/29/史上最全面的Elasticsearch使用指南/">史上最全面的Elasticsearch使用指南</a></p>
<h3 id="一-ES搜索操作日志"><a href="#一-ES搜索操作日志" class="headerlink" title="一.ES搜索操作日志"></a>一.ES搜索操作日志</h3><p><a href="https://onblogs.net/2019/05/29/史上最全面的Elasticsearch使用指南/">史上最全面的Elasticsearch使用指南</a></p>
<h5 id="1-ES准备"><a href="#1-ES准备" class="headerlink" title="1.ES准备"></a>1.ES准备</h5><p><strong>ES是什么</strong></p>
<p>elasticsearch简写es，es是一个高扩展、开源的全文检索和分析引擎，它可以准实时地快速存储、搜索、分析海量的数据，而这正好符合我们的需求，物资申请系统的操作日志刚好是一个存储频繁，又需要对大量数据进行查询统计的场景</p>
<p><strong>什么是全文检索</strong></p>
<p>全文检索是指计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。全文搜索搜索引擎数据库中的数据。</p>
<p><strong>配置ES</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ElasticSearch</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-nodes</span> = <span class="string">127.0.0.1:9300</span></span><br></pre></td></tr></table></figure>



<p><strong>ES注解实体类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Document注解Category实体类，一个Category对象即为一个Document（相当于数据库的一行）</span></span><br><span class="line"><span class="comment">// 连接到es的tmall_springboot索引（相当于数据库），produt类（相当于表）上</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;tmall_springboot&quot;,type = &quot;product&quot;)</span></span><br></pre></td></tr></table></figure>



<h5 id="2-esDAO的创建"><a href="#2-esDAO的创建" class="headerlink" title="2.esDAO的创建"></a>2.esDAO的创建</h5><p>由于整合了ES的JPA和操作数据库使用的JPA有冲突，所以不能放在同一个包下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.tmall.es;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.how2java.tmall.pojo.Product;</span><br><span class="line"><span class="comment">// 用于链接es的DAO</span></span><br><span class="line"><span class="comment">// esDAO和其他DAO不能放在一个包下否则会启动异常</span></span><br><span class="line"><span class="comment">// 主要使用es实现对产品的模糊查询</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductESDAO</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Product</span>,<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h5 id="3-ES与数据库同步"><a href="#3-ES与数据库同步" class="headerlink" title="3.ES与数据库同步"></a>3.ES与数据库同步</h5><p><strong>增删改操作</strong></p>
<p>增删改操作的数据需要同步ES和数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过ProductDAO对数据库有影响的</span></span><br><span class="line"><span class="comment">// 都要通过productESDAO同步到es</span></span><br><span class="line"><span class="meta">@CacheEvict(allEntries=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Product bean)</span> </span>&#123;</span><br><span class="line">	productDAO.save(bean);</span><br><span class="line">	productESDAO.save(bean);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheEvict(allEntries=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	productDAO.delete(id);</span><br><span class="line">	productESDAO.delete(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheEvict(allEntries=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Product bean)</span> </span>&#123;</span><br><span class="line">	productDAO.save(bean);</span><br><span class="line">	productESDAO.save(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>ES初始化</strong></p>
<p>ES内数据为空，就将数据库中的数据同步到es</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化数据到es</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDatabase2ES</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">	Page&lt;Product&gt; page =productESDAO.findAll(pageable);</span><br><span class="line">	<span class="comment">// 查询es中是否有数据</span></span><br><span class="line">	<span class="keyword">if</span>(page.getContent().isEmpty()) &#123;</span><br><span class="line">		<span class="comment">// 如果数据为空，将数据从数据库同步到es中</span></span><br><span class="line">		List&lt;Product&gt; products= productDAO.findAll();</span><br><span class="line">		<span class="keyword">for</span> (Product product : products) &#123;</span><br><span class="line">			productESDAO.save(product);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-ES查询"><a href="#4-ES查询" class="headerlink" title="4.ES查询"></a>4.ES查询</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过es进行查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">search</span><span class="params">(String keyword, <span class="keyword">int</span> start, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 初始化es</span></span><br><span class="line">	initDatabase2ES();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// QueryBuilders提供了大量静态方法，用于生成各种不同类型的查询对象</span></span><br><span class="line">	<span class="comment">// 构建查询条件（多条件查询）</span></span><br><span class="line">	FunctionScoreQueryBuilder functionScoreQueryBuilder = QueryBuilders.functionScoreQuery()</span><br><span class="line">			<span class="comment">// 为提供的字段名和文本创建一个通用查询</span></span><br><span class="line">			.add(QueryBuilders.matchPhraseQuery(<span class="string">&quot;name&quot;</span>, keyword),</span><br><span class="line">					ScoreFunctionBuilders.weightFactorFunction(<span class="number">100</span>))</span><br><span class="line">			<span class="comment">// 设置权重分为求和模式</span></span><br><span class="line">			.scoreMode(<span class="string">&quot;sum&quot;</span>)</span><br><span class="line">			<span class="comment">// 设置权重分最低分</span></span><br><span class="line">			.setMinScore(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置分页参数</span></span><br><span class="line">	Sort sort  = <span class="keyword">new</span> Sort(Sort.Direction.DESC,<span class="string">&quot;id&quot;</span>);</span><br><span class="line">	Pageable pageable = <span class="keyword">new</span> PageRequest(start, size,sort);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加分页参数和查询条件</span></span><br><span class="line">	SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">			.withPageable(pageable)</span><br><span class="line">			.withQuery(functionScoreQueryBuilder).build();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 执行查询获取结果</span></span><br><span class="line">	Page&lt;Product&gt; page = productESDAO.search(searchQuery);</span><br><span class="line">	<span class="comment">// 返回结果</span></span><br><span class="line">	<span class="keyword">return</span> page.getContent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Redis解析"><a href="#Redis解析" class="headerlink" title="Redis解析"></a>Redis解析</h3><p><strong>必看资料：</strong></p>
<p><a href="https://www.yuque.com/books/share/04ac99ea-7726-4adb-8e57-bf21e2cc7183/fg8lgc">缓存基础常见面试题总结</a></p>
<p><a href="https://interview.javaguide.cn/#/./docs/d-2-redis">Redis常见面试题总结</a></p>
<p><a href="https://autovy.github.io/2022/04/20/Java/Java-渐进式本地缓存框架开发总结/">渐进式本地缓存开发总结</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzIyOTYxNDI5OA==&mid=2247487312&idx=1&sn=fa19566f5729d6598155b5c676eee62d&chksm=e8beb8e5dfc931f3e35655da9da0b61c79f2843101c130cf38996446975014f958a6481aacf1&scene=178&cur_album_id=1699766580538032128#rd">缓存与数据库数据一致问题的解决</a></p>
<h4 id="一-Redis需求分析"><a href="#一-Redis需求分析" class="headerlink" title="一.Redis需求分析"></a>一.Redis需求分析</h4><p><strong>我们为了避免用户在请求数据的时候获取速度过于缓慢，同时也为了承受大量的并发请求，所以我们在数据库之上增加了缓存这一层来弥补</strong>，本系统主要使用的是Redis，将常用的数据存储在缓存中（如物品，用户信息等）</p>
<p>另外推荐使用RedisClient，数据一般都在db0中</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203102017619.png" alt="image-20220310201748019"></p>
<h4 id="二-Redis配置"><a href="#二-Redis配置" class="headerlink" title="二.Redis配置"></a>二.Redis配置</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="meta">spring.redis.pool.max-active</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line"><span class="meta">spring.redis.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.pool.max-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.pool.min-idle</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line"><span class="meta">spring.redis.timeout</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>



<h4 id="三-缓存的使用"><a href="#三-缓存的使用" class="headerlink" title="三.缓存的使用"></a>三.缓存的使用</h4><p>缓存的使用一般在服务层使用</p>
<h5 id="1-有序集合管理"><a href="#1-有序集合管理" class="headerlink" title="1.有序集合管理"></a>1.有序集合管理</h5><p>通过在服务层中注解@CacheConfig，创建一个有序集合类型的缓存，管理该服务下所有的keys</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分类服务层</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// redis缓存一般都在服务层进行操作</span></span><br><span class="line"><span class="comment">// 分类服务下的所有keys都由categories来管理（数据存储与categories是平行关系）</span></span><br><span class="line"><span class="meta">@CacheConfig(cacheNames=&quot;categories&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line">	.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203102026158.png" alt="image-20220310202613389"></p>
<h5 id="2查询插入缓存"><a href="#2查询插入缓存" class="headerlink" title="2查询插入缓存"></a>2查询插入缓存</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获得单条分类服务</span></span><br><span class="line"><span class="comment">// 添加一条缓存到redis中，以categories-one- + 参数id为key值</span></span><br><span class="line"><span class="comment">// 存储的主要数据为Category对象</span></span><br><span class="line"><span class="meta">@Cacheable(key=&quot;&#x27;categories-one-&#x27;+ #p0&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Category <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	Category c= categoryDAO.findOne(id);</span><br><span class="line">	<span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出单页分类表（提供分页组索引）</span></span><br><span class="line"><span class="comment">// 添加一条缓存到redis中，以categories-page- + 参数start + 参数size 为key值</span></span><br><span class="line"><span class="comment">// 存储的主要数据为Page4Navigator&lt;Category&gt;数组</span></span><br><span class="line"><span class="meta">@Cacheable(key=&quot;&#x27;categories-page-&#x27;+#p0+ &#x27;-&#x27; + #p1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page4Navigator&lt;Category&gt; <span class="title">list</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> size, <span class="keyword">int</span> navigatePages)</span> </span>&#123;</span><br><span class="line">   	Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">	Pageable pageable = <span class="keyword">new</span> PageRequest(start, size, sort);</span><br><span class="line">	Page pageFromJPA =categoryDAO.findAll(pageable);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Page4Navigator&lt;&gt;(pageFromJPA,navigatePages);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>返回的java对象或集合都会变成JSON字符串</p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203102031241.png" alt="image-20220310203123882"></p>
<p><img src="https://raw.staticdn.net/Autovy/Image/master/img/202203102032065.png" alt="image-20220310203207786"></p>
<h5 id="3-更新删除缓存"><a href="#3-更新删除缓存" class="headerlink" title="3.更新删除缓存"></a>3.更新删除缓存</h5><p>为了应对并发的申请请求提高，我们在Mysql数据库前加了一层Redis，所以在我开发后台物资储存量调整接口时遇到了缓存和数据库中物品数量不一致的问题</p>
<p>准确来说是插入，删除，更新删除缓存以保持数据一致性</p>
<p>使用@CacheEvict(allEntries=true)删除category~keys的所有keys</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加删除更新时</span></span><br><span class="line"><span class="comment">// 增加分类服务</span></span><br><span class="line"><span class="meta">@CacheEvict(allEntries=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Category bean)</span> </span>&#123;</span><br><span class="line">	categoryDAO.save(bean);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除分类服务</span></span><br><span class="line"><span class="meta">@CacheEvict(allEntries=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	categoryDAO.delete(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新分类服务</span></span><br><span class="line"><span class="meta">@CacheEvict(allEntries=true)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Category bean)</span> </span>&#123;</span><br><span class="line">	categoryDAO.save(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="微服务解析"><a href="#微服务解析" class="headerlink" title="微服务解析"></a>微服务解析</h3><h3 id="高并发高可用解析"><a href="#高并发高可用解析" class="headerlink" title="高并发高可用解析"></a>高并发高可用解析</h3><h3 id="系统设计与性能测试解析"><a href="#系统设计与性能测试解析" class="headerlink" title="系统设计与性能测试解析"></a>系统设计与性能测试解析</h3>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>项目实战</tag>
      </tags>
  </entry>
</search>
