<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Autovy&#39;s blog</title>
  
  <subtitle>Just For Interest</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://autovy.github.io/"/>
  <updated>2021-09-04T15:21:24.613Z</updated>
  <id>https://autovy.github.io/</id>
  
  <author>
    <name>Autovy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP|课题申报系统开发(Vue+TP)</title>
    <link href="https://autovy.github.io/2021/07/15/PHP/PHP-%E8%AF%BE%E9%A2%98%E7%94%B3%E6%8A%A5%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91(Vue+TP)/"/>
    <id>https://autovy.github.io/2021/07/15/PHP/PHP-%E8%AF%BE%E9%A2%98%E7%94%B3%E6%8A%A5%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91(Vue+TP)/</id>
    <published>2021-07-15T06:30:00.000Z</published>
    <updated>2021-09-04T15:21:24.613Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109042317087.png" alt="image-20210904231657416" style="zoom:150%;"><p>支持国产😇</p><span id="more"></span><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="1-项目启动"><a href="#1-项目启动" class="headerlink" title="1.项目启动"></a>1.项目启动</h4><h5 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h5><p>Vue的依赖文件是package.json，其分为两部分</p><ul><li><p>全部安装（一般用这个）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>只安装dependencies里的内容（生产环境依赖）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --dependencies</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>只安装devDependencies（开发环境依赖）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --devDependencies</span><br></pre></td></tr></table></figure></li></ul><h5 id="删除全部依赖"><a href="#删除全部依赖" class="headerlink" title="删除全部依赖"></a>删除全部依赖</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall</span><br></pre></td></tr></table></figure><h5 id="生成依赖文件package-json"><a href="#生成依赖文件package-json" class="headerlink" title="生成依赖文件package.json"></a>生成依赖文件package.json</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h5 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h5><p>启动项目的命令需要看package.json文件</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041953941.png" alt="image-20210904195358015"></p><p>所以要用<code>npm run dev</code>启动项目</p><h4 id="2-登录页面解析"><a href="#2-登录页面解析" class="headerlink" title="2.登录页面解析"></a>2.登录页面解析</h4><h5 id="ref访问子组件实例与元素"><a href="#ref访问子组件实例与元素" class="headerlink" title="ref访问子组件实例与元素"></a>ref访问子组件实例与元素</h5><p>vue的ref有类似于html的id的功能，可以用来给js访问子组件实例或元素</p><p><strong>html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">ref</span>=<span class="string">&quot;usernameInput&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$refs.usernameInput </span><br></pre></td></tr></table></figure><p>这样即可访问到输入框的内容</p><h5 id="组件的属性和方法"><a href="#组件的属性和方法" class="headerlink" title="组件的属性和方法"></a>组件的属性和方法</h5><p><strong>html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">Form</span> <span class="attr">ref</span>=<span class="string">&quot;loginForm&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">prop</span>=<span class="string">&quot;user_name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.user_name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;prepend&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">:size</span>=<span class="string">&quot;16&quot;</span> <span class="attr">type</span>=<span class="string">&quot;person&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Vue</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> data () &#123;</span><br><span class="line">           form: &#123;</span><br><span class="line">               user_name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">               password: <span class="string">&#x27;&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>:model=&quot;form&quot;</code>的双向绑定，相当于视图上的数据与Vue对象上的数据是同步变化的</p><h4 id="3-http请求"><a href="#3-http请求" class="headerlink" title="3.http请求"></a>3.http请求</h4><p>参考：<a href="https://stackoverflow.com/questions/54955426/how-to-use-async-await-in-vue-js">How to use async/await in Vue.js?</a></p><h5 id="Vue异步更新"><a href="#Vue异步更新" class="headerlink" title="Vue异步更新"></a>Vue异步更新</h5><p>异步即几个程序同时开始，不会出现阻塞的现象，Vue进行网络请求时会出现异步现象导致函数执行不同</p><p><strong>同步（按序执行，阻塞现象）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">created ()&#123;</span><br><span class="line">    <span class="built_in">this</span>.getA()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">this</span>.getB() </span><br><span class="line">&#125;,</span><br><span class="line">methods : &#123;</span><br><span class="line">    getA ()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    getB ()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p><strong>异步（多个函数同时开始，结束时间决定出现顺序）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">created ()&#123;</span><br><span class="line">    <span class="built_in">this</span>.getA()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">this</span>.getB() </span><br><span class="line">&#125;,</span><br><span class="line">methods : &#123;</span><br><span class="line">    getA ()&#123;</span><br><span class="line">        $axios.post(<span class="string">`/getA`</span>,params)&#123;</span><br><span class="line">        .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    getB ()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h5 id="让程序同步"><a href="#让程序同步" class="headerlink" title="让程序同步"></a>让程序同步</h5><p>可以通过then或async/await使函数同步</p><p><strong>then</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">created () &#123;</span><br><span class="line">    <span class="built_in">this</span>.getA().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">this</span>.getB()</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">methods : &#123;</span><br><span class="line">    getA () &#123;</span><br><span class="line">        <span class="keyword">return</span> $axios.post(<span class="string">`/getA`</span>,params);</span><br><span class="line">    &#125;,</span><br><span class="line">    getB ()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>async/await</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> created ()&#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.getA()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">this</span>.getB() </span><br><span class="line">&#125;,</span><br><span class="line">methods : &#123;</span><br><span class="line">    getA : <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> $axios.post(<span class="string">`/getA`</span>,params);</span><br><span class="line">    &#125;,</span><br><span class="line">    getB : <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="created"><a href="#created" class="headerlink" title="created()"></a>created()</h5><p>不需要让运行同步，只需要保证最后结束的函数（网络请求函数）正确赋值即可</p><p>采用异步的函数先通过created（相当于js页面加载即执行）执行完axios，赋值给data中的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.getLists();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getLists</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="built_in">this</span>.$base.url.ExpertFinishGetLists;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cookie获取用户跳转到多少页</span></span><br><span class="line">    <span class="keyword">let</span> page = <span class="built_in">parseInt</span>(Cookies.get(<span class="string">&#x27;page&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> (page) &#123;</span><br><span class="line">      <span class="built_in">this</span>.params.page = page</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">this</span>.$post(url,<span class="built_in">this</span>.params).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.data = res.data;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//获取权限树</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="ThinkPHP5"><a href="#ThinkPHP5" class="headerlink" title="ThinkPHP5"></a>ThinkPHP5</h3><p>参考文章：<a href="https://www.soolco.com/post/62551_1_1.html">https://www.soolco.com/post/62551_1_1.html</a></p><h4 id="1-路由配置"><a href="#1-路由配置" class="headerlink" title="1.路由配置"></a>1.路由配置</h4><p>配置为在thinkphp/public文件</p><h5 id="phpstudy设置根目录"><a href="#phpstudy设置根目录" class="headerlink" title="phpstudy设置根目录"></a>phpstudy设置根目录</h5><p>一般设为www文件（web服务器上的nginx配置也只会指向这个文件）</p><p>其入口是public文件</p><h5 id="配置伪静态"><a href="#配置伪静态" class="headerlink" title="配置伪静态"></a>配置伪静态</h5><p>访问PHP文件要去掉thinkphp路径中的index.php要配置伪静态</p><p><strong>apache伪静态规则</strong></p><p>修改apache配置文件httpd.conf</p><p>取消掉该行的注释</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure><p>将将 <code>AllowOverride None</code>  修改为： <code>AllowOverride All</code></p><p>以开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Directory</span> /&gt;</span></span><br><span class="line">    Options +Indexes +FollowSymLinks +ExecCGI</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">    Require all granted</span><br><span class="line"><span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在thinkphp/public入口文件添加 <code>.htaccess</code> 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IfModule</span> <span class="attr">mod_rewrite.c</span>&gt;</span></span><br><span class="line">  Options +FollowSymlinks -Multiviews</span><br><span class="line">  RewriteEngine On</span><br><span class="line"></span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">  RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]</span><br><span class="line"><span class="tag">&lt;/<span class="name">IfModule</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在phpstudy的网站设置中添加伪静态设置以对应.htaccess文件</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109042256334.png" alt="image-20210904225150721"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IfModule</span> <span class="attr">mod_rewrite.c</span>&gt;</span></span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteBase /</span><br><span class="line">RewriteRule ^index\.php$ - [L]</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteRule . /index.php [L]</span><br><span class="line"><span class="tag">&lt;/<span class="name">IfModule</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Nginx伪静态规则</strong></p><p>在thinkphp/public入口文件添加 <code>nginx.htaccess</code> 文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Check if a file exists, or route it to index.php.</span></span><br><span class="line"><span class="attribute">try_files</span> $uri $uri/ /exploit/index.php?$query_string;</span><br><span class="line"><span class="attribute">if</span> (!-e $request_filename) &#123;</span><br><span class="line">    <span class="attribute">rewrite</span> <span class="regexp"> ^(.*)$</span>  /index.php?s=<span class="variable">$1</span>  <span class="literal">last</span>;</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109042256152.png" alt="image-20210904225437200"></p><p>在 location中增加if语句最终为</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">           <span class="attribute">index</span> index.php index.html;</span><br><span class="line">           <span class="attribute">if</span> (!-e $request_filename) &#123;</span><br><span class="line">              <span class="attribute">rewrite</span> <span class="regexp"> ^(.*)$</span>  /index.php?s=/<span class="variable">$1</span>  <span class="literal">last</span>;</span><br><span class="line">              break;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">400</span> /error/<span class="number">400</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">403</span> /error/<span class="number">403</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">404</span> /error/<span class="number">404</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">500</span> /error/<span class="number">500</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">501</span> /error/<span class="number">501</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">502</span> /error/<span class="number">502</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">503</span> /error/<span class="number">503</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">504</span> /error/<span class="number">504</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">505</span> /error/<span class="number">505</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">506</span> /error/<span class="number">506</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">507</span> /error/<span class="number">507</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">509</span> /error/<span class="number">509</span>.html;</span><br><span class="line">           <span class="attribute">error_page</span> <span class="number">510</span> /error/<span class="number">510</span>.html;</span><br><span class="line">           <span class="attribute">include</span> D:/phpstudy_pro/WWW/ktsb/public/nginx.htaccess;</span><br><span class="line">           <span class="attribute">autoindex</span>  <span class="literal">off</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h4 id="2-数据库导入"><a href="#2-数据库导入" class="headerlink" title="2.数据库导入"></a>2.数据库导入</h4><h5 id="navicat执行sql文件错误"><a href="#navicat执行sql文件错误" class="headerlink" title="navicat执行sql文件错误"></a>navicat执行sql文件错误</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109042258221.png" alt="image-20210904225833897"></p><p>可以关闭以上两个选项查看执行错误</p><h5 id="数据库严格模式与非严格模式"><a href="#数据库严格模式与非严格模式" class="headerlink" title="数据库严格模式与非严格模式"></a>数据库严格模式与非严格模式</h5><p>严格模式下</p><ul><li>不支持对not null字段插入null值</li><li>不支持对自增长字段插入”值</li><li>不支持text字段有默认值</li><li>在严格模式下timestamp类型的字段不允许 ‘0000-00-00’ 作为有效日期</li></ul><h5 id="数据库模式修改"><a href="#数据库模式修改" class="headerlink" title="数据库模式修改"></a>数据库模式修改</h5><p>运行命令查看模式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;sql_mode&#x27;</span></span><br></pre></td></tr></table></figure><p>显示出模式的项</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109042306119.png" alt="image-20210904230558730"></p><p>所以需要移除<code>NO_ZERO_IN_DATE,NO_ZERO_DATE</code>，最终变为</p><p><code>STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</code></p><p>可以在root权限下运行命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> sql_mode <span class="operator">=</span> <span class="string">&#x27;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br></pre></td></tr></table></figure><p>也可以在phpstudy环境下修改为非严格模式</p><p>​        <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109042309767.png" alt="image-20210716155625246"></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109042317087.png&quot; alt=&quot;image-20210904231657416&quot; style=&quot;zoom:150%;&quot;&gt;

&lt;p&gt;支持国产😇&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="https://autovy.github.io/categories/php/"/>
    
    
      <category term="开发实战" scheme="https://autovy.github.io/tags/%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"/>
    
      <category term="前端" scheme="https://autovy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="框架学习" scheme="https://autovy.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="后端" scheme="https://autovy.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="thinkphp" scheme="https://autovy.github.io/tags/thinkphp/"/>
    
      <category term="Vue" scheme="https://autovy.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Java|基于SSM评论管理系统开发</title>
    <link href="https://autovy.github.io/2021/06/30/Java/Java-%E5%9F%BA%E4%BA%8ESSM%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/"/>
    <id>https://autovy.github.io/2021/06/30/Java/Java-%E5%9F%BA%E4%BA%8ESSM%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/</id>
    <published>2021-06-30T06:30:00.000Z</published>
    <updated>2021-09-04T10:19:27.828Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041811913.png" alt="img"></p><span id="more"></span><h3 id="Maven导入依赖"><a href="#Maven导入依赖" class="headerlink" title="Maven导入依赖"></a>Maven导入依赖</h3><h4 id="1-解决依赖标红问题"><a href="#1-解决依赖标红问题" class="headerlink" title="1.解决依赖标红问题"></a>1.解决依赖标红问题</h4><p><code>java.lang.ClassNotFoundException: Cannot find class: XXX</code></p><ul><li>在Maven仓库查找是否有对应版本</li><li>可以删除标红的版本粗暴解决</li><li>如果仍无法解决可以手动下载导入该jar</li></ul><h4 id="2-解决程序文件包引用问题"><a href="#2-解决程序文件包引用问题" class="headerlink" title="2.解决程序文件包引用问题"></a>2.解决程序文件包引用问题</h4><ul><li><p>通过重写构建项目查看导入的错误</p></li><li><p>参看外部库的包与Maven添加的包是否有重复冲突</p></li><li><p>使用idea修复，将Maven对应的包添加到类路径</p></li></ul><p>3.SSM常用依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- jsp --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- servlet --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- json --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><h4 id="1-整体架构"><a href="#1-整体架构" class="headerlink" title="1.整体架构"></a>1.整体架构</h4><h4 id="2-主程序分层"><a href="#2-主程序分层" class="headerlink" title="2.主程序分层"></a>2.主程序分层</h4><p>业务逻辑：</p><p> <strong>Controller–&gt;service接口–&gt;serviceImpl–&gt;dao接口–&gt;daoImpl–&gt;mapper–&gt;db</strong></p><p>执行流程：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041811913.png" alt="img"></p><p>而<code>bean/pojo</code>则是实体类作为各层次处理传递的对象：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041811687.png" alt="image-20210629104056016"></p><h3 id="相关配置文件"><a href="#相关配置文件" class="headerlink" title="相关配置文件"></a>相关配置文件</h3><h4 id="1-web-xml"><a href="#1-web-xml" class="headerlink" title="1.web.xml"></a>1.web.xml</h4><p>一般放在web文件夹的WEB-INF文件下，用于配置SSM整体的框架配置，以下是常用的配置项</p><p>1.启动Spring容器</p><p>指向applicationContext.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.springmvc的前端控制器，拦截所有请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring mvc核心：分发servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring mvc的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.字符编码过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3、字符编码过滤器，一定要放在所有过滤器之前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.Rest API配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 4、使用Rest风格的URI，将页面普通的post请求转为指定的delete或者put请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.数据包解析配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--HttpPutFormContentFilter：将请求体中的数据解析包装成一个map --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-applicationContext-xml"><a href="#2-applicationContext-xml" class="headerlink" title="2.applicationContext.xml"></a>2.applicationContext.xml</h4><p>整合spring和mybatis配置，一般用于配置数据库连接和数据库实体类，mapper实体类（可用于自动装配）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span> <span class="attr">xmlns:jdbc</span>=<span class="string">&quot;http://www.springframework.org/schema/jdbc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库配置信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描XML配置文件：数据库连接对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对应实体类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pojo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 查找映射配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描Mapper类：映射方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.comments.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-springmvc-xml"><a href="#3-springmvc-xml" class="headerlink" title="3.springmvc.xml"></a>3.springmvc.xml</h4><p>主要用于管理映射关系和视图的定位</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span> <span class="attr">xmlns:jdbc</span>=<span class="string">&quot;http://www.springframework.org/schema/jdbc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描Controller注解，并纳入Spring管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.app.controller&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注解驱动，使访问路径与方法比配通过注解配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置静态页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图定位 --&gt;</span></span><br><span class="line">    &lt;bean</span><br><span class="line">            class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-配置文件处理流程"><a href="#4-配置文件处理流程" class="headerlink" title="4.配置文件处理流程"></a>4.配置文件处理流程</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041811953.png" alt="SSM框架的整合与使用——实现简单的转账系统"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041812536.png" alt="image-20210904181218197"></p><h3 id="Bean层"><a href="#Bean层" class="headerlink" title="Bean层"></a>Bean层</h3><p>首先创建实体层，实体层是各层次用于输入输出处理的数据对象可以参照数据库设计所需的对象与属性</p><h4 id="1-Java-Bean概念"><a href="#1-Java-Bean概念" class="headerlink" title="1.Java Bean概念"></a>1.Java Bean概念</h4><p>JavaBeans是Java一种特殊的类，既可以是单独的类型，也可以将多个对象封装到一个类中。</p><p>在系统设计中，其常常对应数据库的字段抽象</p><p>区别于其他的类，Bean一定会有提供getter和setter方法访问对象的每一个私有属性</p><h4 id="2-Java-Bean构造方法"><a href="#2-Java-Bean构造方法" class="headerlink" title="2.Java Bean构造方法"></a>2.Java Bean构造方法</h4><h5 id="手动编码"><a href="#手动编码" class="headerlink" title="手动编码"></a>手动编码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.content = content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数据库生成"><a href="#数据库生成" class="headerlink" title="数据库生成"></a>数据库生成</h5><p>Idea可以通过数据库工具生成Bean实体类</p><p>连接好数据库（注意某些版本的mysql需要填写时区，一般我会填为GMT）</p><p>依据数据表生成Bean</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041650556.png" alt="image-20210904165034192"></p><h5 id="Lombok插件补全"><a href="#Lombok插件补全" class="headerlink" title="Lombok插件补全"></a>Lombok插件补全</h5><p>通过lombok工具，我们只需要在Bean属性添加相关注解，idea会自动为我们生成getter和setter方法</p><ul><li>idea中安装插件Lombok（最新版idea已捆绑）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041657535.png" alt="image-20210904165746685"></p><ul><li>maven中引入lombok包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写Bean与注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">private long id;</span><br><span class="line"></span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">private String content;</span><br></pre></td></tr></table></figure><ul><li><p>自动生成方法</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041703886.png" alt="image-20210904170341335"></p></li></ul><h3 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h3><h4 id="1-构建SQL"><a href="#1-构建SQL" class="headerlink" title="1.构建SQL"></a>1.构建SQL</h4><ul><li>1.xml映射文件法</li></ul><p>Dao层（即Mapper层）内有两个文件，Mapper文件创建方法对应到xml文件映射sql语句处理实体类</p><p><strong>xml文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这里namespace指向CategoryMapper即可将sql语句与Mapper中的方法绑定 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单独使用xml映射sql语句时，指向是实体类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.app.mapper.CategoryMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Category&quot;</span> &gt;</span></span><br><span class="line">        insert into category_ ( name ) values (#&#123;name&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Category&quot;</span> &gt;</span></span><br><span class="line">        delete from category_ where id= #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;get&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;_int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.app.pojo.Category&quot;</span>&gt;</span></span><br><span class="line">        select * from   category_  where id= #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Category&quot;</span> &gt;</span></span><br><span class="line">        update category_ set name=#&#123;name&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.app.pojo.Category&quot;</span>&gt;</span></span><br><span class="line">        select * from   category_</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Mapper文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.app.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.app.pojo.Category;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sql方法映射（可以用注解，也可以与映射到Category.xml文件）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Category category)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Category category)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>2.注解法</p><p>直接通过注解将方法映射到sql语句（简单项目推荐这个）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 映射动态的sql语句</span></span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">interface</span> <span class="title">CategoryMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法内填写的是CategoryDynaSqlProvider类中定义的动态sql</span></span><br><span class="line">    <span class="meta">@InsertProvider(type = CategoryDynaSqlProvider.class, method = &quot;add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">add</span><span class="params">(Category category)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteProvider(type = CategoryDynaSqlProvider.class, method = &quot;delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SelectProvider(type = CategoryDynaSqlProvider.class, method = &quot;get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@UpdateProvider(type = CategoryDynaSqlProvider.class, method = &quot;update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Category category)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SelectProvider(type =  CategoryDynaSqlProvider.class, method = &quot;list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.动态sql法</li></ul><p>用Java表示sql语句，达到sql语句动态化效果</p><p><strong>SqlProvider文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 列出所有用户数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">            .SELECT(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            .FROM(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">            .toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得指定id用户数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">            .SELECT(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            .FROM(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">            .WHERE(<span class="string">&quot;id=#&#123;id&#125;&quot;</span>)</span><br><span class="line">            .toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得指定名字用户数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getname</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">            .SELECT(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">            .FROM(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">            .WHERE(<span class="string">&quot;name=#&#123;name&#125;&quot;</span>)</span><br><span class="line">            .toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">            .INSERT_INTO(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">            .VALUES(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;#&#123;name&#125;&quot;</span>)</span><br><span class="line">            .VALUES(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;#&#123;password&#125;&quot;</span>)</span><br><span class="line">            .VALUES(<span class="string">&quot;role&quot;</span>,<span class="string">&quot;#&#123;role&#125;&quot;</span>)</span><br><span class="line">            .toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">            .UPDATE(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">            .SET(<span class="string">&quot;name=#&#123;name&#125;&quot;</span>)</span><br><span class="line">            .SET(<span class="string">&quot;password=#&#123;password&#125;&quot;</span>)</span><br><span class="line">            .SET(<span class="string">&quot;role=#&#123;role&#125;&quot;</span>)</span><br><span class="line">            .WHERE(<span class="string">&quot;id=#&#123;id&#125;&quot;</span>)</span><br><span class="line">            .toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()</span><br><span class="line">            .DELETE_FROM(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">            .WHERE(<span class="string">&quot;id=#&#123;id&#125;&quot;</span>)</span><br><span class="line">            .toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Mapper文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据库User表操作</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="meta">@InsertProvider(type=UsersSqlProvider.class,method=&quot;add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Users users)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="meta">@DeleteProvider(type=UsersSqlProvider.class,method=&quot;delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找用户</span></span><br><span class="line">    <span class="meta">@SelectProvider(type=UsersSqlProvider.class,method=&quot;get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找用户(按名字)</span></span><br><span class="line">    <span class="meta">@SelectProvider(type=UsersSqlProvider.class,method=&quot;getname&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">getname</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新用户</span></span><br><span class="line">    <span class="meta">@UpdateProvider(type=UsersSqlProvider.class,method=&quot;update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Users users)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列出所有用户</span></span><br><span class="line">    <span class="meta">@SelectProvider(type=UsersSqlProvider.class,method=&quot;list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Mapper的自动装配"><a href="#2-Mapper的自动装配" class="headerlink" title="2.Mapper的自动装配"></a>2.Mapper的自动装配</h4><p>applicationContext配置扫描Mpaper类，Spring自动装配Mapper类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 扫描XML配置文件：数据库连接对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对应实体类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pojo&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 查找映射配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/comments/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 扫描Mapper类：映射方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.comments.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-Mapper测试"><a href="#3-Mapper测试" class="headerlink" title="3.Mapper测试"></a>3.Mapper测试</h4><p>mapper层测试方法：其用与serivce层的实现类一样的方法对mapper层进行调用，从而实现对mapper层的测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">// 加载配置文件进行测试</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &#123;&quot;classpath:applicationContext.xml&quot;, &quot;classpath:springMVC.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注解装配要测试的Mapper类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列出用户测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Users&gt; user = userMapper.list();</span><br><span class="line">        <span class="keyword">for</span>(Users u :user)&#123;</span><br><span class="line">            System.out.println(u.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入用户测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Users user = <span class="keyword">new</span> Users();</span><br><span class="line">        user.setName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        user.setRole(<span class="string">&quot;vistor&quot;</span>);</span><br><span class="line">        userMapper.add(user);</span><br><span class="line">        testList();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Serivce层"><a href="#Serivce层" class="headerlink" title="Serivce层"></a>Serivce层</h3><p>服务层有serivce接口和serivceimlmpl实现两个文件，该层主要用于调用dao层与数据库交互并为controller层提供服务</p><h4 id="1-serivce接口"><a href="#1-serivce接口" class="headerlink" title="1.serivce接口"></a>1.serivce接口</h4><ul><li>其函数构成与mapper文件类似（都是一些增删改查的方法），serivce内的函数可以以一些需要用户填写的字段作为参数</li><li>但是mapper是面向dao层使用的（与数据库联系）</li><li>而serivce是面向controller层使用的（与用户端联系）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Users服务接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列出所有用户</span></span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(String name, String password, String role)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找用户</span></span><br><span class="line">    <span class="function">Users <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找用户(按名字)</span></span><br><span class="line">   <span class="function">Users <span class="title">getname</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id ,String name, String password)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-serivceimlmpl实现类"><a href="#2-serivceimlmpl实现类" class="headerlink" title="2.serivceimlmpl实现类"></a>2.serivceimlmpl实现类</h4><ul><li>serivce接口的具体实现</li><li>注解Service（类似于@Component，@Controller）</li><li>将类自动注册到Spring容器，而不需要定义bean</li><li>控制类可以直接通过接口调用到其实现类中的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersServiceImpl</span> <span class="keyword">implements</span> <span class="title">UsersService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列出所有用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Users&gt; user = userMapper.list();</span><br><span class="line">        <span class="keyword">for</span>(Users u :user)&#123;</span><br><span class="line">            System.out.println(u.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(String name, String password, String role)</span></span>&#123;</span><br><span class="line">            Users users =  <span class="keyword">new</span> Users();</span><br><span class="line">            users.setName(name);</span><br><span class="line">            users.setPassword(password);</span><br><span class="line">            users.setRole(role);</span><br><span class="line">            userMapper.add(users);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userMapper.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">       Users user = userMapper.get(id);</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找用户(按名字)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">getname</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       Users user =  userMapper.getname(name);</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id ,String name, String password)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Users users =  userMapper.get(id);</span><br><span class="line">        users.setName(name);</span><br><span class="line">        users.setPassword(password);</span><br><span class="line">        userMapper.update(users);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Serivce的自动装配"><a href="#3-Serivce的自动装配" class="headerlink" title="3.Serivce的自动装配"></a>3.Serivce的自动装配</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 扫描Controller注解，并纳入Spring管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.comments.controller&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 扫描service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.comments.service&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-Serivce层测试"><a href="#4-Serivce层测试" class="headerlink" title="4.Serivce层测试"></a>4.Serivce层测试</h4><p>加载配置文件，并装配服务对象进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Service层测试方法</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">// 加载配置文件进行测试</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &#123;&quot;classpath:applicationContext.xml&quot;, &quot;classpath:springMVC.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersServiceImplTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UsersService usersService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        usersService.list();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = usersService.add(<span class="string">&quot;精灵&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="string">&quot;vistor&quot;</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">testGet1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        Users user = usersService.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">testGet2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">         Users user = usersService.getname(<span class="string">&quot;1111&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">testupdate</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = usersService.update(<span class="number">2</span>,<span class="string">&quot;test&quot;</span>,<span class="string">&quot;12345&quot;</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Json消息体"><a href="#Json消息体" class="headerlink" title="Json消息体"></a>Json消息体</h3><h4 id="1-自定义Json消息体"><a href="#1-自定义Json消息体" class="headerlink" title="1.自定义Json消息体"></a>1.自定义Json消息体</h4><p>建立util文件放入JsonMsg类，用于设置Json返回对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">jsonmsg</span><span class="params">(String staut, String msg)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    jsonObject.put(staut, msg);</span><br><span class="line">    <span class="keyword">return</span> jsonObject.toJSONString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Fastjson"><a href="#2-Fastjson" class="headerlink" title="2.Fastjson"></a>2.Fastjson</h4><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象</p><ul><li>添加maven依赖</li><li>使用注解获得相应的JSONField / 创建JSON对象输出</li></ul><h3 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h3><p>负责调用服务层的方法，并映射路径提供给客户端使用</p><h4 id="1-请求映射"><a href="#1-请求映射" class="headerlink" title="1.请求映射"></a>1.请求映射</h4><ul><li>路径映射</li><li>请求方式</li><li>Controller默认以返回值去寻找资源，如果配置了jsp则会寻找对应jsp，加上@ResponseBody注解则直接输出返回的内容（如json）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得指定用户</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/list/&#123;id&#125;&quot;, method = RequestMethod.GET, produces = &quot;application/json; charset=utf-8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getuser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Users res = usersService.get(id);</span><br><span class="line">    <span class="keyword">return</span> JSONObject.toJSONString(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-请求数据获取"><a href="#2-请求数据获取" class="headerlink" title="2.请求数据获取"></a>2.请求数据获取</h4><ul><li><p>数据过滤判断</p></li><li><p>请求415问题的解决</p><p>Java后端不能对POST或PUT发来的form-data,x-www-form-urlencoded的数据进行处理而出现的问题</p><p>@RequestBody只能处理通过json发送的请求</p></li><li><p>POST请求获得数据类型与方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增用户</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/insert&quot;, method = RequestMethod.POST, produces = &quot;application/json; charset=utf-8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insert</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String,String&gt; params)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// json消息</span></span><br><span class="line">    JsonMsg json = <span class="keyword">new</span> JsonMsg();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 获得要更新用户请求数据</span></span><br><span class="line">    String name = params.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    String password = params.get(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    String role = params.get(<span class="string">&quot;role&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 数据库查询名称</span></span><br><span class="line">    Users users =  usersService.getname(name);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(users == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 参数齐全判断</span></span><br><span class="line">        <span class="keyword">if</span> (name != <span class="keyword">null</span> &amp;&amp; password != <span class="keyword">null</span> &amp;&amp; role != <span class="keyword">null</span>) &#123;</span><br><span class="line">            usersService.add(name, password, role);</span><br><span class="line">            <span class="keyword">return</span> json.jsonmsg(<span class="string">&quot;200&quot;</span>, <span class="string">&quot;新增用户成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> json.jsonmsg(<span class="string">&quot;400&quot;</span>, <span class="string">&quot;参数不齐全&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> json.jsonmsg(<span class="string">&quot;400&quot;</span>, <span class="string">&quot;用户名已重复&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-中文乱码问题"><a href="#3-中文乱码问题" class="headerlink" title="3.中文乱码问题"></a>3.中文乱码问题</h4><ul><li><p>参考文章：<a href="https://blog.csdn.net/kalision/article/details/46441081">彻底解决Spring MVC 中文乱码</a></p></li><li><p>过滤器</p><p>在web.xml设置编码过滤器解决编码问题</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 编码过滤器 --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;characterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">        &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;forceEncoding&lt;&#x2F;param-name&gt;</span><br><span class="line">        &lt;param-value&gt;true&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;</span><br><span class="line">&lt;&#x2F;filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;characterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure><ul><li>produces属性</li></ul><p>@RequestMapping注解可以设置发送和接收数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/delete/&#123;id&#125;&quot;, method = RequestMethod.DELETE, produces = &quot;application/json; charset=utf-8&quot;)</span></span><br></pre></td></tr></table></figure><h4 id="4-Controller自动装配"><a href="#4-Controller自动装配" class="headerlink" title="4.Controller自动装配"></a>4.Controller自动装配</h4><p>如果仅仅是返回json可以配置驱动，如果有jsp页面则需要配置静态页面并且视图定位</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注解驱动，使访问路径与方法匹配通过注解配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置静态页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图定位 --&gt;</span></span><br><span class="line">&lt;bean</span><br><span class="line">        class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-Controller层测试"><a href="#5-Controller层测试" class="headerlink" title="5.Controller层测试"></a>5.Controller层测试</h4><ul><li>使用mock模拟用户进行测试（比较复杂，一般不建议使用）</li><li>运行tomcat服务器后，使用浏览器+postman进行测试</li><li><code>System.out.println</code>控制台输出</li></ul><h3 id="Web服务器添加"><a href="#Web服务器添加" class="headerlink" title="Web服务器添加"></a>Web服务器添加</h3><h4 id="1-添加WEB工件"><a href="#1-添加WEB工件" class="headerlink" title="1.添加WEB工件"></a>1.添加WEB工件</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041759524.png" alt="image-20210904175428011"></p><h4 id="2-配置tomcat服务器"><a href="#2-配置tomcat服务器" class="headerlink" title="2.配置tomcat服务器"></a>2.配置tomcat服务器</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041759825.png" alt="image-20210904175840362"></p><p>添加刚才创建的工件（注意修改上下文，这里影响访问的url）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041819887.png" alt="image-20210904180030909"></p><h4 id="3-测试服务器"><a href="#3-测试服务器" class="headerlink" title="3.测试服务器"></a>3.测试服务器</h4><p>出现端口冲突，可以修改http端口和JMX端口，但要注意修改tomcat的server.xml文件为对应的http端口</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041819682.png" alt="image-20210904180518251"></p><p>也可以找到正在运行的端口，然后关闭其进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -aon|findstr 8080</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill -f -pid 进程编号</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041811913.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://autovy.github.io/categories/Java/"/>
    
    
      <category term="开发实战" scheme="https://autovy.github.io/tags/%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"/>
    
      <category term="Java" scheme="https://autovy.github.io/tags/Java/"/>
    
      <category term="框架学习" scheme="https://autovy.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="后端" scheme="https://autovy.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="SSM" scheme="https://autovy.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>开发工具|Linux学习手册</title>
    <link href="https://autovy.github.io/2021/06/27/Tool/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Linux%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/"/>
    <id>https://autovy.github.io/2021/06/27/Tool/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Linux%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/</id>
    <published>2021-06-27T06:30:00.000Z</published>
    <updated>2021-09-04T03:25:03.652Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040952867.png" alt="image-20210904095248687"></p><span id="more"></span><h3 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h3><h4 id="1-Linux发行版"><a href="#1-Linux发行版" class="headerlink" title="1.Linux发行版"></a>1.Linux发行版</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949495.jpeg" alt="img"></p><p>Linux发行版 = Liunx核心 +应用软件</p><h4 id="2-Liunx内核架构"><a href="#2-Liunx内核架构" class="headerlink" title="2.Liunx内核架构"></a>2.Liunx内核架构</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949098.jpeg" alt="img"></p><p>Liunx内核有5个子系统：</p><ul><li>Process Scheduler，进程管理、进程调度。负责管理 CPU 资源，以便让各个进程可以以尽量公平的方式访问 CPU。</li><li>Memory Manager，内存管理。负责管理 Memory（内存）资源，以便让各个进程可以安全的共享机器的内存资源。</li><li>VFS（Virtual File System），虚拟文件系统。Linux 内核将不同功能的外部设备抽象为可以通过统一的文件操作接口（open、close、read、write 等）来访问。这就是 Linux系统“一切皆是文件”的体现</li><li>设备驱动，负责管理第三方设备接入/终端</li><li>Network，网络子系统。负责管理系统的网络设备，并实现多种多样的网络标准</li></ul><h3 id="Linux基本操作"><a href="#Linux基本操作" class="headerlink" title="Linux基本操作"></a>Linux基本操作</h3><h4 id="1-开机关机"><a href="#1-开机关机" class="headerlink" title="1.开机关机"></a>1.开机关机</h4><p>开启会启动许多程序，在windows叫做“服务“（service），在Linux叫做“守护进程”（daemon）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949420.png" alt="Linux开机启动脚本 - 转1"></p><p>同步数据命令：sync（常常用于强制关机前）</p><p>关机命令：shutdown</p><p>重启命令：reboot</p><h4 id="2-基本目录结构"><a href="#2-基本目录结构" class="headerlink" title="2.基本目录结构"></a>2.基本目录结构</h4><p>基本知识：</p><ul><li>Liunx一切皆文件</li><li>根目录/，所有文件都挂载在这个节点下</li><li>ls 查看当前目录下所有文件</li></ul><p>Liunx目录结构：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949471.png" alt="img"></p><p>比较常用的如下：</p><ul><li>/etc ： 该目录可用来存放所有系统管理需要的配置文件和子目录</li><li>/home：用户主目录（在liunx，每个用户都有一个自己的目录）</li><li>/opt : 主机额外安装软件存放的位置</li><li>/root : 系统管理员用户主目录</li><li>/usr：用户的应用程序和文件都放在这个目录，类似于Windows的program files目录</li><li>/tmp ：存放临时文件，用完即丢的文件如安装包</li><li>/var : 存放不断扩充的东西，习惯于放那些经常被修改的目录</li></ul><h3 id="Liunx目录管理"><a href="#Liunx目录管理" class="headerlink" title="Liunx目录管理"></a>Liunx目录管理</h3><h4 id="1-文件管理基本命令"><a href="#1-文件管理基本命令" class="headerlink" title="1.文件管理基本命令"></a>1.文件管理基本命令</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949194.png" alt="img"></p><p>比较常用的如下：</p><ul><li>ls: 列出目录</li><li>cd：切换目录</li><li>pwd：显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp：复制文件或目录</li><li>rm：移除文件或目录</li><li>mv：移动文件与目录，或修改文件与目录的名称</li><li>touch：创建文件</li></ul><h4 id="2-ls命令"><a href="#2-ls命令" class="headerlink" title="2.ls命令"></a>2.ls命令</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949481.png" alt="这里写图片描述"></p><h4 id="3-mkdir命令"><a href="#3-mkdir命令" class="headerlink" title="3.mkdir命令"></a>3.mkdir命令</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949299.png" alt="img"></p><h4 id="4-rm命令"><a href="#4-rm命令" class="headerlink" title="4.rm命令"></a>4.rm命令</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949353.png" alt="img"></p><h3 id="Linux文件管理"><a href="#Linux文件管理" class="headerlink" title="Linux文件管理"></a>Linux文件管理</h3><h4 id="1-文件属性"><a href="#1-文件属性" class="headerlink" title="1.文件属性"></a>1.文件属性</h4><p>文件属性字符串:<br><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949841.png" alt="img"></p><p>文件权限字符串：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949192.png" alt="363003_1227493859FdXT"></p><p>文件类型：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949930.png" alt="linux文件类型和权限- xd_xumaomao - 博客园"></p><p>常用的如下：</p><ul><li><code>-</code>：普通文件</li><li><code>d</code>：目录文件</li><li><code>l</code>：连接文件（相当于Windows的快捷方式）</li></ul><p>文件权限：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949379.png" alt="img"></p><p>在文件属性中每组权限按<code>rwx</code>这样的顺序显示，而<code>-</code>表示没有该权限</p><h4 id="2-chgrp-amp-chown命令"><a href="#2-chgrp-amp-chown命令" class="headerlink" title="2.chgrp&amp;chown命令"></a>2.chgrp&amp;chown命令</h4><p>更改文件属组（文件所属用户组）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">charg -R 属组名 文件名</span><br></pre></td></tr></table></figure><p>更改文件属主（文件所有者）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R 属主名 文件名</span><br></pre></td></tr></table></figure><p>同时修改文件的属组和属主</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R 属主名:属组名 文件名</span><br></pre></td></tr></table></figure><h4 id="3-chmod命令"><a href="#3-chmod命令" class="headerlink" title="3.chmod命令"></a>3.chmod命令</h4><p>chmod可以设置文件访问权限，有两种设置方法：数字（常用）和符号</p><p>Linux文件的基本权限有9个，分别是owner/group/others 三种身份分别的rwx权限（9个权限三个三个为一组）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949807.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用格式</span></span><br><span class="line">chmod 权限数字组 文件名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开放所有权限给所有人</span></span><br><span class="line">chmod 777 root</span><br></pre></td></tr></table></figure><h4 id="4-文件内容查看"><a href="#4-文件内容查看" class="headerlink" title="4.文件内容查看"></a>4.文件内容查看</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949445.png" alt="夺命雷公狗---linux NO:11 linux的文本文件查看命令- 夺命雷公狗- 博客园"></p><ul><li>nl：显示文件中的时候标注行号</li><li>less与more类似，有分页的功能，但是可以往前翻页（空格下翻页，pageDown，pageUp代表翻动页面）</li><li>在less查看模式下：q命令退出，<code>/</code>命令向下查询字符串，<code>?</code>向下查询字符串，<code>n</code>继续搜寻下一个，<code>N</code>向上寻找</li></ul><h3 id="Linux链接"><a href="#Linux链接" class="headerlink" title="Linux链接"></a>Linux链接</h3><h4 id="1-链接类型"><a href="#1-链接类型" class="headerlink" title="1.链接类型"></a>1.链接类型</h4><p>Linux的链接分为两种：  </p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949118.png" alt="linux之软连接硬链接- osc_3uvms8cw的个人空间- OSCHINA - 中文开源技术交流社区"></p><ul><li>软链接：类似与windows下的快捷方式，删除了源文件，快捷方式也访问不了</li><li>硬链接：允许一个文件有多个路径，用户可以通过这种机制建立硬链接到一些重要文件上，防止误删</li></ul><h4 id="2-创建链接"><a href="#2-创建链接" class="headerlink" title="2.创建链接"></a>2.创建链接</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 为f1文件创建一个硬链接f2</span></span><br><span class="line">ln f1 f2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为f1文件创建一个软链接（符号链接）f3</span></span><br><span class="line">ln -s f1 f3</span><br></pre></td></tr></table></figure><h4 id="3-链接相关测试"><a href="#3-链接相关测试" class="headerlink" title="3.链接相关测试"></a>3.链接相关测试</h4><p>文件内容修改：</p><p>原文件的内容，其硬链接的内容，其软连接访问的内容都是保持一致的，修改其中之一其他两项访问的内容也会相应变化</p><p>文件删除：</p><p>删除原文件后，硬链接依旧可以访问，而软链接无法打开（快捷方式失效）</p><h3 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h3><h4 id="1-Vim简介"><a href="#1-Vim简介" class="headerlink" title="1.Vim简介"></a>1.Vim简介</h4><ul><li>Vim是一种文本编辑器，有代码补全，编译及错误跳转等方便编程的功能</li><li>Vim可以通过参加实现IDE一样的功能</li><li>Vim基本使用：查看内容，编辑内容，保存内容</li></ul><h4 id="2-Vim三模式"><a href="#2-Vim三模式" class="headerlink" title="2.Vim三模式"></a>2.Vim三模式</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949256.jpeg" alt="Linux 之Vim 命令使用（详细总结） - 知乎"></p><ul><li>命令模式只能查看文本，可以通过键盘输入切换到输入模式和底部命令行模式</li><li>输入模式可以编辑文件</li><li>末行模式即命令行模式可以执行退出，保存文件等操作</li></ul><h4 id="3-命令模式"><a href="#3-命令模式" class="headerlink" title="3.命令模式"></a>3.命令模式</h4><ul><li><code>数字+空格</code> ：横向移动光标，向右移动n个字</li><li><code>数字+回车</code>：纵向移动光标，向下移动n行</li><li><code>/word</code>：向光标下寻找名为word的字符串</li><li><code>?word</code>：向光标下寻找名为word的字符串</li><li><code>n/N</code>:进行下翻页和下翻页（n表示重复上一个搜寻动作，N则是反向于上一个搜寻动作）</li><li><code>u</code>：重复上一个操作</li></ul><h4 id="4-输入模式"><a href="#4-输入模式" class="headerlink" title="4.输入模式"></a>4.输入模式</h4><p>输入模式常用按键：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949252.svg+xml" alt="[公式]"></p><h4 id="5-命令行模式"><a href="#5-命令行模式" class="headerlink" title="5.命令行模式"></a>5.命令行模式</h4><p>常用命令：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949551.svg+xml" alt="[公式]"></p><p><code>:ZZ</code>：不存储直接离开（ctrl + z）</p><p><code>:set nu</code>：设置行号，打开文本每一行都显示行号</p><p>注意如果输入的命令不存在会返回127错误，而且会回到vim界面</p><h3 id="Linux账号管理"><a href="#Linux账号管理" class="headerlink" title="Linux账号管理"></a>Linux账号管理</h3><p>账号管理实质是对<code>/etc/passwd</code>文件的更新</p><h4 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="1.添加用户"></a>1.添加用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -选项 用户名</span><br></pre></td></tr></table></figure><p>useradd 相关选项：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950318.png" alt="op"></p><p>常用<code>-m</code>自动为用户在home下创建目录</p><p>可以在/etc/passwd文件夹下查看用户相关的配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><h4 id="2-删除用户"><a href="#2-删除用户" class="headerlink" title="2.删除用户"></a>2.删除用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -选项 用户名</span><br></pre></td></tr></table></figure><p>常用<code>-r</code>选项自动删除用户在home下的用户目录</p><h4 id="3-修改用户"><a href="#3-修改用户" class="headerlink" title="3.修改用户"></a>3.修改用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -选项 修改内容 用户名</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950615.png" alt="选项"></p><h4 id="4-切换用户"><a href="#4-切换用户" class="headerlink" title="4.切换用户"></a>4.切换用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su + 用户名</span><br></pre></td></tr></table></figure><p>切换到root用户：<code>sudo su</code></p><p>修改主机名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname 修改的名称</span><br></pre></td></tr></table></figure><h4 id="5-用户口令管理命令"><a href="#5-用户口令管理命令" class="headerlink" title="5.用户口令管理命令"></a>5.用户口令管理命令</h4><p>创建/修改用户的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950354.png" alt="选项"></p><h3 id="Linux用户组管理"><a href="#Linux用户组管理" class="headerlink" title="Linux用户组管理"></a>Linux用户组管理</h3><p>组的增加，删除和修改实际上就是对<code>/etc/group</code>文件的更新</p><h4 id="1-创建用户组"><a href="#1-创建用户组" class="headerlink" title="1.创建用户组"></a>1.创建用户组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用户组组的id自增1</span></span><br><span class="line">groupadd 组名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定id创建用户组</span></span><br><span class="line">groupadd -g 233 组名</span><br></pre></td></tr></table></figure><h4 id="2-删除用户组"><a href="#2-删除用户组" class="headerlink" title="2.删除用户组"></a>2.删除用户组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除用户组</span></span><br><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure><h4 id="3-修改用户组"><a href="#3-修改用户组" class="headerlink" title="3.修改用户组"></a>3.修改用户组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 基本样式</span></span><br><span class="line">groupmod 选项 修改内容 组名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 案例</span></span><br><span class="line">groupmod -g 666 -n newname 组名</span><br></pre></td></tr></table></figure><h4 id="4-切换用户组"><a href="#4-切换用户组" class="headerlink" title="4.切换用户组"></a>4.切换用户组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录的当前用户切换到root组</span></span><br><span class="line">newgrp root</span><br></pre></td></tr></table></figure><h4 id="5-用户管理相关文件"><a href="#5-用户管理相关文件" class="headerlink" title="5.用户管理相关文件"></a>5.用户管理相关文件</h4><p><code>/etc/passwd</code>文件：</p><p><strong>具体格式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:口令（不可见一般显示为x）:用户标识号:组标识号:注释性描述:主目录:登录Shell</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950861.jpeg" alt="详解Linux中/etc/passwd文件详解Linux中/etc/passwd文件"></p><p>该文件的每一行都代表一个用户，可以查看用户主目录位置，并查看属于哪一个组</p><p><code>/etc/shadow</code>文件：</p><p>用户密码加密后存放在/etc/shadow文件，与passwd文件一一对应</p><p><strong>具体格式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950761.jpeg" alt="img"></p><p><code>/etc/group</code>文件：</p><p><strong>具体格式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">组名:口令:组ID:组内用户列表</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950338.jpeg" alt="img"></p><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h4 id="1-df命令"><a href="#1-df命令" class="headerlink" title="1.df命令"></a>1.df命令</h4><p>列出文件系统整体的磁盘使用量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 普通查看</span></span><br><span class="line">df</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 内存转换为M</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041103972.png" alt="img"></p><h4 id="2-du命令"><a href="#2-du命令" class="headerlink" title="2.du命令"></a>2.du命令</h4><p>检查磁盘空间使用量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前目录内存占用</span></span><br><span class="line">du </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查根目录每个目录所占用的容量</span></span><br><span class="line">du -sm /*</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950313.png" alt="img"></p><h4 id="3-mount-amp-umount命令"><a href="#3-mount-amp-umount命令" class="headerlink" title="3.mount&amp;umount命令"></a>3.mount&amp;umount命令</h4><p>可类比于U盘的使用</p><p>mount：挂载设备</p><p>umount：卸载设备</p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="1-进程介绍"><a href="#1-进程介绍" class="headerlink" title="1.进程介绍"></a>1.进程介绍</h4><ul><li>在Liunx中，每个程序都是有自己的一个进程，每一个进程都有一个id号</li><li>每一个进程都有一个父进程</li><li>进程有两种存在方式：前台运行（程序），后台运行（服务）</li></ul><h4 id="2-进程与线程"><a href="#2-进程与线程" class="headerlink" title="2.进程与线程"></a>2.进程与线程</h4><ul><li>进程就是应用程序的启动实例，而线程从属于进程，是程序的实际执行者</li><li>一个进程至少包含一个主线程，也可以有更多的子线程</li><li>对操作系统来说，线程是最小的执行单元，进程是最小的资源管理单元</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950452.webp" alt="img"></p><h4 id="3-任务执行方式"><a href="#3-任务执行方式" class="headerlink" title="3.任务执行方式"></a>3.任务执行方式</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950096.png" alt="img"></p><ul><li>串行是指多个任务时，各个任务按顺序执行，完成一个之后才能进行下一个</li><li>并行指的是多个任务可以同时执行，异步是多个任务并行的前提条件</li><li>并发是指两个或多个事件在同一时间间隔内发生，常用于多线程编程中</li></ul><h4 id="4-同步异步阻塞"><a href="#4-同步异步阻塞" class="headerlink" title="4.同步异步阻塞"></a>4.同步异步阻塞</h4><p>同步与异步关注的是<strong>消息通信机制</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950691.png" alt="img"></p><ul><li>由调用方盲目主动问询的方式是同步调用</li><li>由被调用方主动通知调用方任务已完成的方式是异步调用</li><li>同步异步是对系统内核而言（是否主动通知应用层）</li></ul><p>阻塞和非阻塞关注的是<strong>程序在等待调用结果</strong>时的状态：</p><p><img src="https://pic3.zhimg.com/80/v2-6507ab3517814b1b84fbff9a3eb31842_720w.png" alt="img"></p><ul><li>被挂起无法执行其他操作的则是阻塞型</li><li>被立即「抽离」去完成其他「任务」的则是非阻塞型的</li><li>阻塞和非阻塞对应用层而言（应用是否去做其他事情）</li></ul><h4 id="5-ps命令"><a href="#5-ps命令" class="headerlink" title="5.ps命令"></a>5.ps命令</h4><p><code>ps</code>查看当前系统中正在执行的各种进程</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950813.png" alt="Linux学习之路(三) —— Linux高级系统管理命令"></p><p>常用案例：</p><p>查看mysql的所有进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux|grep mysql</span><br></pre></td></tr></table></figure><ul><li><code>ps -aux</code> ：查看所有进程信息</li><li><code>|</code> ：Linux管道符，过滤上一条命令输出的信息</li><li><code>grep</code> ：查找文件中符合条件的字符串</li></ul><p>查看父进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep mysql</span><br></pre></td></tr></table></figure><p>显示进程树</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -p显示父id，-u显示用户组</span></span><br><span class="line">pstree -pu</span><br></pre></td></tr></table></figure><h4 id="6-kill命令"><a href="#6-kill命令" class="headerlink" title="6.kill命令"></a>6.kill命令</h4><p>强制结束该进程，类似与windows结束任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 进程id</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040952867.png&quot; alt=&quot;image-20210904095248687&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发工具" scheme="https://autovy.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="开发工具" scheme="https://autovy.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Linux" scheme="https://autovy.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>硬件开发|stm32使用案例</title>
    <link href="https://autovy.github.io/2021/06/18/Hardware/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-stm32%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/"/>
    <id>https://autovy.github.io/2021/06/18/Hardware/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-stm32%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</id>
    <published>2021-06-18T06:30:00.000Z</published>
    <updated>2021-09-05T08:41:34.428Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041048103.png" alt="image-20210904104854742"></p><span id="more"></span><h3 id="GPIO库导入"><a href="#GPIO库导入" class="headerlink" title="GPIO库导入"></a>GPIO库导入</h3><p>添加<code>USE_STDPERIPH_DRIVER</code>到C/C++配置中</p><h3 id="点亮LED"><a href="#点亮LED" class="headerlink" title="点亮LED"></a>点亮LED</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个GPIO信息结构体（静态变量）</span></span><br><span class="line"><span class="keyword">static</span> GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1.打开GPIOB组的时钟（降低功耗）选择对应外设 */</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置开启端口号</span></span><br><span class="line"><span class="comment">/* 2.配置为输出推挽（多个IO使用位或添加） */</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;<span class="comment">//引脚选择</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//端口输出速率（功耗）</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;<span class="comment">//端口模式：推挽输出</span></span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择外设并控制端口号输出信号</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">GPIO_ResetBits(GPIOB, GPIO_Pin_0);<span class="comment">// PB1低电平</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>定义GPIO_InitTypeDef类型结构体，可修改其端口配置</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109051306282.png" alt="image-20210618200840443"></p></li><li><p>GPIO_Init函数选择输出外设，并指向端口配置</p></li><li><p>GPIO_ResetBits选择外设与端口，并输出低电平</p></li><li><p>GPIO_setBits选择外设与端口，并输出高电平</p></li></ul><h3 id="蜂鸣器"><a href="#蜂鸣器" class="headerlink" title="蜂鸣器"></a>蜂鸣器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个GPIO信息结构体（静态变量）</span></span><br><span class="line"><span class="keyword">static</span> GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">5000000</span>;</span><br><span class="line"><span class="keyword">while</span>(i--);<span class="comment">// 没有任何意义，只是为了消耗时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 蜂鸣器初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BEEP_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* 1.打开GPIOB组的时钟（降低功耗）选择对应外设 */</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.配置为输出推挽（多个IO使用位或添加） */</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;<span class="comment">//引脚选择</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//端口输出速率（功耗）</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;<span class="comment">//端口模式：推挽输出</span></span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.给蜂鸣器初始化电平（不响）</span></span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_1);<span class="comment">// 不响</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">BEEP_Init();<span class="comment">// 初始化蜂鸣器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">GPIO_ResetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">delay();<span class="comment">// 延时一段时间</span></span><br><span class="line"></span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_1);</span><br><span class="line">delay();<span class="comment">// 延时一段时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>切换外设为A则可以选择到蜂鸣器（以开发板手册为准）</li></ul><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stm32f10x.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个GPIO信息结构体（静态变量）</span></span><br><span class="line"><span class="keyword">static</span> GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_ALL GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">5000000</span>;</span><br><span class="line"><span class="keyword">while</span>(i--);<span class="comment">// 没有任何意义，只是为了消耗时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LED初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* 1.打开GPIOB组的时钟（降低功耗） */</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.关闭JTAG引脚映射（PA13/14/15 PB3/4）  */</span></span><br><span class="line">    GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.配置为输出推挽（多个IO使用位或添加） */</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = LED_ALL;<span class="comment">//引脚选择</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//端口输出速率（功耗）</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;<span class="comment">//端口模式：推挽输出</span></span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.初始化电平（不亮）</span></span><br><span class="line">GPIO_SetBits(GPIOB, LED_ALL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按键初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KEY_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* 1.打开GPIO组的时钟（降低功耗） */</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.配置为输入（多个IO使用位或添加） */</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;<span class="comment">//引脚选择</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;<span class="comment">// 按钮开关使用浮空输入模式</span></span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LED_Init();<span class="comment">// 初始化LED</span></span><br><span class="line">KEY_Init();<span class="comment">// 初始化按键</span></span><br><span class="line">GPIO_SetBits(GPIOB, GPIO_Pin_1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_7)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">GPIO_ResetBits(GPIOB, GPIO_Pin_1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_SetBits(GPIOB, GPIO_Pin_1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>浮空输入_IN_FLOATING ——浮空输入，IO的电平状态是不确定的，完全由外部输入决定；如果在该引脚悬空的情况下，读取该端口的电平是不确定的；</li><li>带上拉输入IPU——IO内部上拉电阻输入  ==悬空时，处于高电平状态</li><li>带下拉输入<em>IPD—— IO内部下拉电阻输入 ==悬空时，处于低电平状态</em></li><li>模拟输入AIN ——应用ADC模拟输入，或者低功耗下省电</li></ul><h3 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h3><h4 id="（1）串口通信电路连接"><a href="#（1）串口通信电路连接" class="headerlink" title="（1）串口通信电路连接"></a>（1）串口通信电路连接</h4><p>串口通信电路连接：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109051307840.png" alt="image-20210622112304168"></p><ul><li>12，78 为蓝牙串口（手机app）</li><li>34为串口调试</li><li>56 stm32芯片</li></ul><p>通讯对象将两边引脚短接即可</p><h4 id="（2）重写printf函数"><a href="#（2）重写printf函数" class="headerlink" title="（2）重写printf函数"></a>（2）重写printf函数</h4><p>重写printf函数使其可以将文本输出到串口</p><p>输出字符串到串口：</p><ul><li>配置相关库：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109051307778.png" alt="image-20210622114338205"></p><ul><li>重新定义fputc函数，让printf输出数据到串口1<img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109051307727.png" alt="image-20210622114454922"></li></ul><h4 id="（3）串口单字符发送"><a href="#（3）串口单字符发送" class="headerlink" title="（3）串口单字符发送"></a>（3）串口单字符发送</h4><p>（芯片与串口通信）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO信息结构体初始化</span></span><br><span class="line"><span class="comment">// 配置IO口结构体</span></span><br><span class="line">GPIO_InitTypeDef   GPIO_InitStructure;</span><br><span class="line"><span class="comment">// 配置中断结构体</span></span><br><span class="line">EXTI_InitTypeDef   EXTI_InitStructure;</span><br><span class="line"><span class="comment">// 配置中断优先级结构体</span></span><br><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line"><span class="comment">// 配置串口结构题</span></span><br><span class="line">USART_InitTypeDef USART_InitStructure; </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置串口1--&gt;PA9+PA10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usart1_init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.使能GPIO外设、IO复用时钟、USART2时钟 PA9 和PA10</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//2.配置GPIO + 初始化GPIO</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//  PA2   TX</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//复用推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; <span class="comment">//  PA3   RX</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  <span class="comment">//浮空输入   PA10  RX</span></span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.配置USART1 + 初始化USART1</span></span><br><span class="line">USART_InitStructure.USART_BaudRate = bound;<span class="comment">//波特率</span></span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//数据位8位</span></span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//停止位1位</span></span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶检验</span></span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line">USART_Init(USART1, &amp;USART_InitStructure);<span class="comment">//把配置信息加载到串口2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.配置NVIC + 初始化NVIC </span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;<span class="comment">//选择串口2的中断</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>;<span class="comment">//设置抢占优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//使能串口2的中断</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//把配置信息加载到中断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.使能串口中断</span></span><br><span class="line">USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//接收到数据触发中断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.使能串口</span></span><br><span class="line">USART_Cmd(USART1,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单字符发送到串口</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 配置串口比特率</span></span><br><span class="line">usart1_init(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送字符到串口1</span></span><br><span class="line">USART_SendData(USART1,<span class="string">&#x27;h&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//发送字符到串口1</span></span><br><span class="line">USART_SendData(USART1,<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//发送字符到串口1</span></span><br><span class="line">USART_SendData(USART1,<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//发送字符到串口1</span></span><br><span class="line">USART_SendData(USART1,<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//发送字符到串口1</span></span><br><span class="line">USART_SendData(USART1,<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//发送字符到串口1</span></span><br><span class="line">USART_SendData(USART1,<span class="string">&#x27;\r&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//发送字符到串口1</span></span><br><span class="line">USART_SendData(USART1,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line"></span><br><span class="line">delay();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（4）使用printf发送字符串到串口"><a href="#（4）使用printf发送字符串到串口" class="headerlink" title="（4）使用printf发送字符串到串口"></a>（4）使用printf发送字符串到串口</h4><p>（芯片与串口通信）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO信息结构体初始化</span></span><br><span class="line"><span class="comment">// 配置IO口结构体</span></span><br><span class="line">GPIO_InitTypeDef   GPIO_InitStructure;</span><br><span class="line"><span class="comment">// 配置中断结构体</span></span><br><span class="line">EXTI_InitTypeDef   EXTI_InitStructure;</span><br><span class="line"><span class="comment">// 配置中断优先级结构体</span></span><br><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line"><span class="comment">// 配置串口结构题</span></span><br><span class="line">USART_InitTypeDef USART_InitStructure; </span><br><span class="line"></span><br><span class="line"><span class="comment">//重定义fputc函数---》每次发送一个字符到</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> ch, FILE *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//发送字符到串口1</span></span><br><span class="line">USART_SendData(USART1,ch);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置串口1--&gt;PA9+PA10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usart1_init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.使能GPIO外设、IO复用时钟、USART2时钟 PA9 和PA10</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//2.配置GPIO + 初始化GPIO</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//  PA2   TX</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//复用推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; <span class="comment">//  PA3   RX</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  <span class="comment">//浮空输入   PA10  RX</span></span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.配置USART1 + 初始化USART1</span></span><br><span class="line">USART_InitStructure.USART_BaudRate = bound;<span class="comment">//波特率</span></span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//数据位8位</span></span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//停止位1位</span></span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶检验</span></span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line">USART_Init(USART1, &amp;USART_InitStructure);<span class="comment">//把配置信息加载到串口2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.配置NVIC + 初始化NVIC </span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;<span class="comment">//选择串口2的中断</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>;<span class="comment">//设置抢占优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//使能串口2的中断</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//把配置信息加载到中断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.使能串口中断</span></span><br><span class="line">USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//接收到数据触发中断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.使能串口</span></span><br><span class="line">USART_Cmd(USART1,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// printf发送字符串到串口</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">usart1_init(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;good\r\n&quot;</span>);</span><br><span class="line">delay();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（5）手机蓝牙与芯片通信"><a href="#（5）手机蓝牙与芯片通信" class="headerlink" title="（5）手机蓝牙与芯片通信"></a>（5）手机蓝牙与芯片通信</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO信息结构体体初始化</span></span><br><span class="line">GPIO_InitTypeDef   GPIO_InitStructure;</span><br><span class="line">EXTI_InitTypeDef   EXTI_InitStructure;</span><br><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure; <span class="comment">//串口配置的信息结构体</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//led-》GPIO信息结构体初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//关闭引脚JTAG复用功能--&gt;PA13、PA14、PA15、PB3、PB4</span></span><br><span class="line">RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIOB Periph clock enable */</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Configure PD0 and PD2 in output pushpull mode */</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = <span class="number">0xff</span> ;<span class="comment">//GPIO_Pin_0~GPIO_Pin_7</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//设置运行频率50MHz</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; <span class="comment">//设置推挽输出</span></span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">GPIO_SetBits(GPIOB, <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">10000</span>; j++);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置串口1--&gt;PA9+PA10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usart1_init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.使能GPIO外设、IO复用时钟、USART2时钟 PA9 和PA10</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//2.配置GPIO + 初始化GPIO</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//  PA2   TX</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//复用推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; <span class="comment">//  PA3   RX</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  <span class="comment">//浮空输入   PA10  RX</span></span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.配置USART1 + 初始化USART1</span></span><br><span class="line">USART_InitStructure.USART_BaudRate = bound;<span class="comment">//波特率</span></span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//数据位8位</span></span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//停止位1位</span></span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶检验</span></span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line">USART_Init(USART1, &amp;USART_InitStructure);<span class="comment">//把配置信息加载到串口2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.配置NVIC + 初始化NVIC </span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;<span class="comment">//选择串口2的中断</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>;<span class="comment">//设置抢占优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//使能串口2的中断</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//把配置信息加载到中断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.使能串口中断</span></span><br><span class="line">USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//接收到数据触发中断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.使能串口</span></span><br><span class="line">USART_Cmd(USART1,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">usart1_init(<span class="number">9600</span>);</span><br><span class="line">led_init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">delay();</span><br><span class="line">        <span class="comment">// data接收来自蓝牙通信的数据（手机app）</span></span><br><span class="line"><span class="keyword">if</span>(data == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">GPIO_ResetBits(GPIOB, GPIO_Pin_0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(data == <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">GPIO_SetBits(GPIOB, GPIO_Pin_0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//串口1中断服务函数（可以让主函数中断其他事物回来处理串口1，从而接收到蓝牙发送的数据data）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断中断是否产生</span></span><br><span class="line"><span class="keyword">if</span>( USART_GetITStatus(USART1,USART_IT_RXNE) == SET )<span class="comment">//如果接收到数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line">data = USART_ReceiveData(USART1);<span class="comment">//接收从USART2发送过来的中断，每次接收1个字节</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>( USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line"><span class="comment">//发送字符到串口1</span></span><br><span class="line"><span class="comment">//USART_SendData(USART1,n);</span></span><br><span class="line"><span class="comment">//while(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空中断标志位</span></span><br><span class="line">USART_ClearITPendingBit(USART1,USART_IT_RXNE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="液晶屏显示"><a href="#液晶屏显示" class="headerlink" title="液晶屏显示"></a>液晶屏显示</h3><h4 id="（1）工具函数与文件"><a href="#（1）工具函数与文件" class="headerlink" title="（1）工具函数与文件"></a>（1）工具函数与文件</h4><h5 id="液晶显示工具包"><a href="#液晶显示工具包" class="headerlink" title="液晶显示工具包"></a>液晶显示工具包</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* oled.c文件实现液晶屏文字显示 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oledfont.h&quot;</span>   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SysTick.h&quot;</span></span></span><br><span class="line">     </span><br><span class="line">u8 OLED_GRAM[<span class="number">128</span>][<span class="number">8</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">//更新显存到LCD </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Refresh_Gram</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 i,n;    </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)  </span><br><span class="line">&#123;  </span><br><span class="line">OLED_WR_Byte (<span class="number">0xb0</span>+i,OLED_CMD);    <span class="comment">//设置页地址（0~7）</span></span><br><span class="line">OLED_WR_Byte (<span class="number">0x00</span>,OLED_CMD);      <span class="comment">//设置显示位置—列低地址</span></span><br><span class="line">OLED_WR_Byte (<span class="number">0x10</span>,OLED_CMD);      <span class="comment">//设置显示位置—列高地址   </span></span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); </span><br><span class="line">&#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向SSD1306写入一个字节。</span></span><br><span class="line"><span class="comment">//dat:要写入的数据/命令</span></span><br><span class="line"><span class="comment">//cmd:数据/命令标志 0,表示命令;1,表示数据;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_WR_Byte</span><span class="params">(u8 dat,u8 cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 i;  </span><br><span class="line">OLED_RS=cmd; <span class="comment">//写命令 </span></span><br><span class="line">OLED_CS=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;  </span><br><span class="line">OLED_SCLK=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(dat&amp;<span class="number">0x80</span>)OLED_SDIN=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> OLED_SDIN=<span class="number">0</span>;</span><br><span class="line">OLED_SCLK=<span class="number">1</span>;</span><br><span class="line">dat&lt;&lt;=<span class="number">1</span>;   </span><br><span class="line">&#125; </span><br><span class="line">OLED_CS=<span class="number">1</span>;  </span><br><span class="line">OLED_RS=<span class="number">1</span>;     </span><br><span class="line">&#125; </span><br><span class="line">   </span><br><span class="line"><span class="comment">//开启OLED显示    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Display_On</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0X14</span>,OLED_CMD);  <span class="comment">//DCDC ON</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0XAF</span>,OLED_CMD);  <span class="comment">//DISPLAY ON</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭OLED显示     </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Display_Off</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0X10</span>,OLED_CMD);  <span class="comment">//DCDC OFF</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0XAE</span>,OLED_CMD);  <span class="comment">//DISPLAY OFF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Clear</span><span class="params">(<span class="keyword">void</span>)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">u8 i,n;  </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)<span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)OLED_GRAM[n][i]=<span class="number">0X00</span>;  </span><br><span class="line">OLED_Refresh_Gram();<span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//画点 </span></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="comment">//t:1 填充 0,清空   </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_DrawPoint</span><span class="params">(u8 x,u8 y,u8 t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 pos,bx,temp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">127</span>||y&gt;<span class="number">63</span>)<span class="keyword">return</span>;<span class="comment">//超出范围了.</span></span><br><span class="line">pos=<span class="number">7</span>-y/<span class="number">8</span>;</span><br><span class="line">bx=y%<span class="number">8</span>;</span><br><span class="line">temp=<span class="number">1</span>&lt;&lt;(<span class="number">7</span>-bx);</span><br><span class="line"><span class="keyword">if</span>(t)OLED_GRAM[x][pos]|=temp;</span><br><span class="line"><span class="keyword">else</span> OLED_GRAM[x][pos]&amp;=~temp;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x1,y1,x2,y2 填充区域的对角坐标</span></span><br><span class="line"><span class="comment">//确保x1&lt;=x2;y1&lt;=y2 0&lt;=x1&lt;=127 0&lt;=y1&lt;=63  </span></span><br><span class="line"><span class="comment">//dot:0,清空;1,填充  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Fill</span><span class="params">(u8 x1,u8 y1,u8 x2,u8 y2,u8 dot)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">u8 x,y;  </span><br><span class="line"><span class="keyword">for</span>(x=x1;x&lt;=x2;x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(y=y1;y&lt;=y2;y++)OLED_DrawPoint(x,y,dot);</span><br><span class="line">&#125;    </span><br><span class="line">OLED_Refresh_Gram();<span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在指定位置显示一个字符,包括部分字符</span></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="comment">//mode:0,反白显示;1,正常显示 </span></span><br><span class="line"><span class="comment">//size:选择字体 16/12 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowChar</span><span class="params">(u8 x,u8 y,u8 chr,u8 size,u8 mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;          </span><br><span class="line">u8 temp,t,t1;</span><br><span class="line">u8 y0=y;</span><br><span class="line">u8 csize=(size/<span class="number">8</span>+((size%<span class="number">8</span>)?<span class="number">1</span>:<span class="number">0</span>))*(size/<span class="number">2</span>);<span class="comment">//得到字体一个字符对应点阵集所占的字节数</span></span><br><span class="line">chr=chr-<span class="string">&#x27; &#x27;</span>;<span class="comment">//得到偏移后的值 </span></span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;csize;t++)</span><br><span class="line">    &#123;   </span><br><span class="line"><span class="keyword">if</span>(size==<span class="number">12</span>)temp=asc2_1206[chr][t];  <span class="comment">//调用1206字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(size==<span class="number">16</span>)temp=asc2_1608[chr][t];<span class="comment">//调用1608字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(size==<span class="number">24</span>)temp=asc2_2412[chr][t];<span class="comment">//调用2412字体</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>;<span class="comment">//没有的字库</span></span><br><span class="line">        <span class="keyword">for</span>(t1=<span class="number">0</span>;t1&lt;<span class="number">8</span>;t1++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&amp;<span class="number">0x80</span>)OLED_DrawPoint(x,y,mode);</span><br><span class="line"><span class="keyword">else</span> OLED_DrawPoint(x,y,!mode);</span><br><span class="line">temp&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">y++;</span><br><span class="line"><span class="keyword">if</span>((y-y0)==size)</span><br><span class="line">&#123;</span><br><span class="line">y=y0;</span><br><span class="line">x++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;   </span><br><span class="line">    &#125;          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//m^n函数</span></span><br><span class="line"><span class="function">u32 <span class="title">mypow</span><span class="params">(u8 m,u8 n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 result=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">while</span>(n--)result*=m;    </span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//显示2个数字</span></span><br><span class="line"><span class="comment">//x,y :起点坐标 </span></span><br><span class="line"><span class="comment">//len :数字的位数</span></span><br><span class="line"><span class="comment">//size:字体大小</span></span><br><span class="line"><span class="comment">//mode:模式0,填充模式;1,叠加模式</span></span><br><span class="line"><span class="comment">//num:数值(0~4294967295);   </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowNum</span><span class="params">(u8 x,u8 y,u32 num,u8 len,u8 size)</span></span></span><br><span class="line"><span class="function"></span>&#123;         </span><br><span class="line">u8 t,temp;</span><br><span class="line">u8 enshow=<span class="number">0</span>;   </span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">&#123;</span><br><span class="line">temp=(num/mypow(<span class="number">10</span>,len-t<span class="number">-1</span>))%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(enshow==<span class="number">0</span>&amp;&amp;t&lt;(len<span class="number">-1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowChar(x+(size/<span class="number">2</span>)*t,y,<span class="string">&#x27; &#x27;</span>,size,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> enshow=<span class="number">1</span>; </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"> OLED_ShowChar(x+(size/<span class="number">2</span>)*t,y,temp+<span class="string">&#x27;0&#x27;</span>,size,<span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//显示字符串</span></span><br><span class="line"><span class="comment">//x,y:起点坐标  </span></span><br><span class="line"><span class="comment">//size:字体大小 </span></span><br><span class="line"><span class="comment">//*p:字符串起始地址 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowString</span><span class="params">(u8 x,u8 y,<span class="keyword">const</span> u8 *p,u8 size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>((*p&lt;=<span class="string">&#x27;~&#x27;</span>)&amp;&amp;(*p&gt;=<span class="string">&#x27; &#x27;</span>))<span class="comment">//判断是不是非法字符!</span></span><br><span class="line">    &#123;       </span><br><span class="line">        <span class="keyword">if</span>(x&gt;(<span class="number">128</span>-(size/<span class="number">2</span>)))&#123;x=<span class="number">0</span>;y+=size;&#125;</span><br><span class="line">        <span class="keyword">if</span>(y&gt;(<span class="number">64</span>-size))&#123;y=x=<span class="number">0</span>;OLED_Clear();&#125;</span><br><span class="line">        OLED_ShowChar(x,y,*p,size,<span class="number">1</span>); </span><br><span class="line">        x+=size/<span class="number">2</span>;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化SSD1306    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;        </span><br><span class="line">GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line">    </span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOC, ENABLE );</span><br><span class="line">  </span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);     </span><br><span class="line"> GPIO_SetBits(GPIOA,GPIO_Pin_4|GPIO_Pin_6|GPIO_Pin_3);<span class="comment">//拉高电平</span></span><br><span class="line">  </span><br><span class="line">OLED_WR_Byte(<span class="number">0xAE</span>,OLED_CMD); <span class="comment">//关闭显示</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xD5</span>,OLED_CMD); <span class="comment">//设置时钟分频因子,震荡频率</span></span><br><span class="line">OLED_WR_Byte(<span class="number">80</span>,OLED_CMD);   <span class="comment">//[3:0],分频因子;[7:4],震荡频率</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA8</span>,OLED_CMD); <span class="comment">//设置驱动路数</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0X3F</span>,OLED_CMD); <span class="comment">//默认0X3F(1/64) </span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xD3</span>,OLED_CMD); <span class="comment">//设置显示偏移</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0X00</span>,OLED_CMD); <span class="comment">//默认为0</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0x40</span>,OLED_CMD); <span class="comment">//设置显示开始行 [5:0],行数.</span></span><br><span class="line">    </span><br><span class="line">OLED_WR_Byte(<span class="number">0x8D</span>,OLED_CMD); <span class="comment">//电荷泵设置</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x14</span>,OLED_CMD); <span class="comment">//bit2，开启/关闭</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x20</span>,OLED_CMD); <span class="comment">//设置内存地址模式</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x02</span>,OLED_CMD); <span class="comment">//[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA1</span>,OLED_CMD); <span class="comment">//段重定义设置,bit0:0,0-&gt;0;1,0-&gt;127;</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xC0</span>,OLED_CMD); <span class="comment">//设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]-&gt;COM0;N:驱动路数</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xDA</span>,OLED_CMD); <span class="comment">//设置COM硬件引脚配置</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x12</span>,OLED_CMD); <span class="comment">//[5:4]配置</span></span><br><span class="line"> </span><br><span class="line">OLED_WR_Byte(<span class="number">0x81</span>,OLED_CMD); <span class="comment">//对比度设置</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xEF</span>,OLED_CMD); <span class="comment">//1~255;默认0X7F (亮度设置,越大越亮)</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xD9</span>,OLED_CMD); <span class="comment">//设置预充电周期</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xf1</span>,OLED_CMD); <span class="comment">//[3:0],PHASE 1;[7:4],PHASE 2;</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xDB</span>,OLED_CMD); <span class="comment">//设置VCOMH 电压倍率</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x30</span>,OLED_CMD); <span class="comment">//[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA4</span>,OLED_CMD); <span class="comment">//全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA6</span>,OLED_CMD); <span class="comment">//设置显示方式;bit0:1,反相显示;0,正常显示       </span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xAF</span>,OLED_CMD); <span class="comment">//开启显示 </span></span><br><span class="line">OLED_Clear();</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h5 id="精准延时工具包"><a href="#精准延时工具包" class="headerlink" title="精准延时工具包"></a>精准延时工具包</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*SysTick.c文件实现精准延时函数*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SysTick.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> u8  fac_us=<span class="number">0</span>;<span class="comment">//us延时倍乘数   </span></span><br><span class="line"><span class="keyword">static</span> u16 fac_ms=<span class="number">0</span>;<span class="comment">//ms延时倍乘数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化延迟函数</span></span><br><span class="line"><span class="comment">//SYSTICK的时钟固定为AHB时钟的1/8</span></span><br><span class="line"><span class="comment">//SYSCLK:系统时钟频率</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Init</span><span class="params">(u8 SYSCLK)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); </span><br><span class="line">fac_us=SYSCLK/<span class="number">8</span>;</span><br><span class="line">fac_ms=(u16)fac_us*<span class="number">1000</span>;   </span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u32 nus)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 temp;     </span><br><span class="line">SysTick-&gt;LOAD=nus*fac_us; <span class="comment">//时间加载   </span></span><br><span class="line">SysTick-&gt;VAL=<span class="number">0x00</span>;        <span class="comment">//清空计数器</span></span><br><span class="line">SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk ;          <span class="comment">//开始倒数 </span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">temp=SysTick-&gt;CTRL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(temp&amp;<span class="number">0x01</span>&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)));<span class="comment">//等待时间到达   </span></span><br><span class="line">SysTick-&gt;CTRL&amp;=~SysTick_CTRL_ENABLE_Msk;       <span class="comment">//关闭计数器</span></span><br><span class="line">SysTick-&gt;VAL =<span class="number">0X00</span>;       <span class="comment">//清空计数器 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时nms</span></span><br><span class="line"><span class="comment">//注意nms的范围</span></span><br><span class="line"><span class="comment">//SysTick-&gt;LOAD为24位寄存器,所以,最大延时为:</span></span><br><span class="line"><span class="comment">//nms&lt;=0xffffff*8*1000/SYSCLK</span></span><br><span class="line"><span class="comment">//SYSCLK单位为Hz,nms单位为ms</span></span><br><span class="line"><span class="comment">//对72M条件下,nms&lt;=1864 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u16 nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">u32 temp;   </span><br><span class="line">SysTick-&gt;LOAD=(u32)nms*fac_ms;<span class="comment">//时间加载(SysTick-&gt;LOAD为24bit)</span></span><br><span class="line">SysTick-&gt;VAL =<span class="number">0x00</span>;           <span class="comment">//清空计数器</span></span><br><span class="line">SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk ;          <span class="comment">//开始倒数  </span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">temp=SysTick-&gt;CTRL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(temp&amp;<span class="number">0x01</span>&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)));<span class="comment">//等待时间到达   </span></span><br><span class="line">SysTick-&gt;CTRL&amp;=~SysTick_CTRL_ENABLE_Msk;       <span class="comment">//关闭计数器</span></span><br><span class="line">SysTick-&gt;VAL =<span class="number">0X00</span>;       <span class="comment">//清空计数器      </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（2）数字与字母显示"><a href="#（2）数字与字母显示" class="headerlink" title="（2）数字与字母显示"></a>（2）数字与字母显示</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;SysTick.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">1000</span>;</span><br><span class="line">u8 buf[<span class="number">10</span>] = <span class="string">&quot;ZhangSan&quot;</span>;</span><br><span class="line"></span><br><span class="line">SysTick_Init(<span class="number">72</span>);<span class="comment">// 初始化延时（72MHz芯片主频）</span></span><br><span class="line">OLED_Init();<span class="comment">//  初始化OLED</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">OLED_ShowNum(<span class="number">0</span>,<span class="number">0</span>,num,<span class="number">4</span>,<span class="number">16</span>);<span class="comment">//显示数字 </span></span><br><span class="line">OLED_ShowString(<span class="number">0</span>,<span class="number">16</span>,buf,<span class="number">16</span>); </span><br><span class="line">OLED_ShowChar(<span class="number">50</span>,<span class="number">0</span>,<span class="string">&#x27;S&#x27;</span>, <span class="number">16</span>, <span class="number">1</span>);</span><br><span class="line">OLED_Refresh_Gram();    <span class="comment">//更新数据到OLED  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>调用SysTick_Init()函数延时规定的时间</p></li><li><p>调用oled.c定义的OLED_ShowNum等方法</p></li><li><p>相关参数可以查看oled.c内的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x,y :起点坐标</span></span><br><span class="line"><span class="comment">// num or char : 要显示的数据内容或地址</span></span><br><span class="line"><span class="comment">// len字长（一般填16）</span></span><br><span class="line"><span class="comment">// size：字体大小（一般填16）</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="（3）汉字显示"><a href="#（3）汉字显示" class="headerlink" title="（3）汉字显示"></a>（3）汉字显示</h4><h5 id="延时工具包"><a href="#延时工具包" class="headerlink" title="延时工具包"></a>延时工具包</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////////  </span></span><br><span class="line"><span class="comment">//如果使用ucos,则包括下面的头文件即可.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_UCOS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;includes.h&quot;</span><span class="comment">//ucos 使用  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> u8  fac_us=<span class="number">0</span>;<span class="comment">//us延时倍乘数</span></span><br><span class="line"><span class="keyword">static</span> u16 fac_ms=<span class="number">0</span>;<span class="comment">//ms延时倍乘数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_CRITICAL_METHOD <span class="comment">//如果OS_CRITICAL_METHOD定义了,说明使用ucosII了.</span></span></span><br><span class="line"><span class="comment">//systick中断服务函数,使用ucos时用到</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">OSIntEnter();<span class="comment">//进入中断</span></span><br><span class="line">    OSTimeTick();       <span class="comment">//调用ucos的时钟服务程序               </span></span><br><span class="line">    OSIntExit();        <span class="comment">//触发任务切换软中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化延迟函数</span></span><br><span class="line"><span class="comment">//当使用ucos的时候,此函数会初始化ucos的时钟节拍</span></span><br><span class="line"><span class="comment">//SYSTICK的时钟固定为HCLK时钟的1/8</span></span><br><span class="line"><span class="comment">//SYSCLK:系统时钟</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_init</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_CRITICAL_METHOD <span class="comment">//如果OS_CRITICAL_METHOD定义了,说明使用ucosII了.</span></span></span><br><span class="line">u32 reload;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);<span class="comment">//选择外部时钟  HCLK/8</span></span><br><span class="line">fac_us=SystemCoreClock/<span class="number">8000000</span>;<span class="comment">//为系统时钟的1/8  </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_CRITICAL_METHOD <span class="comment">//如果OS_CRITICAL_METHOD定义了,说明使用ucosII了.</span></span></span><br><span class="line">reload=SystemCoreClock/<span class="number">8000000</span>;<span class="comment">//每秒钟的计数次数 单位为K   </span></span><br><span class="line">reload*=<span class="number">1000000</span>/OS_TICKS_PER_SEC;<span class="comment">//根据OS_TICKS_PER_SEC设定溢出时间</span></span><br><span class="line"><span class="comment">//reload为24位寄存器,最大值:16777216,在72M下,约合1.86s左右</span></span><br><span class="line">fac_ms=<span class="number">1000</span>/OS_TICKS_PER_SEC;<span class="comment">//代表ucos可以延时的最少单位   </span></span><br><span class="line">SysTick-&gt;CTRL|=SysTick_CTRL_TICKINT_Msk;   <span class="comment">//开启SYSTICK中断</span></span><br><span class="line">SysTick-&gt;LOAD=reload; <span class="comment">//每1/OS_TICKS_PER_SEC秒中断一次</span></span><br><span class="line">SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk;   <span class="comment">//开启SYSTICK    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">fac_ms=(u16)fac_us*<span class="number">1000</span>;<span class="comment">//非ucos下,代表每个ms需要的systick时钟数   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_CRITICAL_METHOD<span class="comment">//使用了ucos</span></span></span><br><span class="line"><span class="comment">//延时nus</span></span><br><span class="line"><span class="comment">//nus为要延时的us数.       </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u32 nus)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 ticks;</span><br><span class="line">u32 told,tnow,tcnt=<span class="number">0</span>;</span><br><span class="line">u32 reload=SysTick-&gt;LOAD;<span class="comment">//LOAD的值     </span></span><br><span class="line">ticks=nus*fac_us; <span class="comment">//需要的节拍数   </span></span><br><span class="line">tcnt=<span class="number">0</span>;</span><br><span class="line">told=SysTick-&gt;VAL;        <span class="comment">//刚进入时的计数器值</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">tnow=SysTick-&gt;VAL;</span><br><span class="line"><span class="keyword">if</span>(tnow!=told)</span><br><span class="line">&#123;    </span><br><span class="line"><span class="keyword">if</span>(tnow&lt;told)tcnt+=told-tnow;<span class="comment">//这里注意一下SYSTICK是一个递减的计数器就可以了.</span></span><br><span class="line"><span class="keyword">else</span> tcnt+=reload-tnow+told;    </span><br><span class="line">told=tnow;</span><br><span class="line"><span class="keyword">if</span>(tcnt&gt;=ticks)<span class="keyword">break</span>;<span class="comment">//时间超过/等于要延迟的时间,则退出.</span></span><br><span class="line">&#125;  </span><br><span class="line">&#125;;     </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时nms</span></span><br><span class="line"><span class="comment">//nms:要延时的ms数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u16 nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(OSRunning==TRUE)<span class="comment">//如果os已经在跑了    </span></span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">if</span>(nms&gt;=fac_ms)<span class="comment">//延时的时间大于ucos的最少时间周期 </span></span><br><span class="line">&#123;</span><br><span class="line">   OSTimeDly(nms/fac_ms);<span class="comment">//ucos延时</span></span><br><span class="line">&#125;</span><br><span class="line">nms%=fac_ms;<span class="comment">//ucos已经无法提供这么小的延时了,采用普通方式延时    </span></span><br><span class="line">&#125;</span><br><span class="line">delay_us((u32)(nms*<span class="number">1000</span>));<span class="comment">//普通方式延时,此时ucos无法启动调度.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span><span class="comment">//不用ucos时</span></span></span><br><span class="line"><span class="comment">//延时nus</span></span><br><span class="line"><span class="comment">//nus为要延时的us数.       </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u32 nus)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 temp;     </span><br><span class="line">SysTick-&gt;LOAD=nus*fac_us; <span class="comment">//时间加载   </span></span><br><span class="line">SysTick-&gt;VAL=<span class="number">0x00</span>;        <span class="comment">//清空计数器</span></span><br><span class="line">SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk ;          <span class="comment">//开始倒数 </span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">temp=SysTick-&gt;CTRL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(temp&amp;<span class="number">0x01</span>&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)));<span class="comment">//等待时间到达   </span></span><br><span class="line">SysTick-&gt;CTRL&amp;=~SysTick_CTRL_ENABLE_Msk;       <span class="comment">//关闭计数器</span></span><br><span class="line">SysTick-&gt;VAL =<span class="number">0X00</span>;       <span class="comment">//清空计数器 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时nms</span></span><br><span class="line"><span class="comment">//注意nms的范围</span></span><br><span class="line"><span class="comment">//SysTick-&gt;LOAD为24位寄存器,所以,最大延时为:</span></span><br><span class="line"><span class="comment">//nms&lt;=0xffffff*8*1000/SYSCLK</span></span><br><span class="line"><span class="comment">//SYSCLK单位为Hz,nms单位为ms</span></span><br><span class="line"><span class="comment">//对72M条件下,nms&lt;=1864 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u16 nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">u32 temp;   </span><br><span class="line">SysTick-&gt;LOAD=(u32)nms*fac_ms;<span class="comment">//时间加载(SysTick-&gt;LOAD为24bit)</span></span><br><span class="line">SysTick-&gt;VAL =<span class="number">0x00</span>;           <span class="comment">//清空计数器</span></span><br><span class="line">SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk ;          <span class="comment">//开始倒数  </span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">temp=SysTick-&gt;CTRL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(temp&amp;<span class="number">0x01</span>&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)));<span class="comment">//等待时间到达   </span></span><br><span class="line">SysTick-&gt;CTRL&amp;=~SysTick_CTRL_ENABLE_Msk;       <span class="comment">//关闭计数器</span></span><br><span class="line">SysTick-&gt;VAL =<span class="number">0X00</span>;       <span class="comment">//清空计数器      </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="液晶显示工具包-1"><a href="#液晶显示工具包-1" class="headerlink" title="液晶显示工具包"></a>液晶显示工具包</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oledfont.h&quot;</span>   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="comment">//OLED的显存</span></span><br><span class="line"><span class="comment">//存放格式如下.</span></span><br><span class="line"><span class="comment">//[0]0 1 2 3 ... 127</span></span><br><span class="line"><span class="comment">//[1]0 1 2 3 ... 127</span></span><br><span class="line"><span class="comment">//[2]0 1 2 3 ... 127</span></span><br><span class="line"><span class="comment">//[3]0 1 2 3 ... 127</span></span><br><span class="line"><span class="comment">//[4]0 1 2 3 ... 127</span></span><br><span class="line"><span class="comment">//[5]0 1 2 3 ... 127</span></span><br><span class="line"><span class="comment">//[6]0 1 2 3 ... 127</span></span><br><span class="line"><span class="comment">//[7]0 1 2 3 ... 127    </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> OLED_MODE==1</span></span><br><span class="line"><span class="comment">//向SSD1106写入一个字节。</span></span><br><span class="line"><span class="comment">//dat:要写入的数据/命令</span></span><br><span class="line"><span class="comment">//cmd:数据/命令标志 0,表示命令;1,表示数据;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_WR_Byte</span><span class="params">(u8 dat,u8 cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DATAOUT(dat);    </span><br><span class="line"><span class="keyword">if</span>(cmd)</span><br><span class="line">  OLED_DC_Set();</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">  OLED_DC_Clr();   </span><br><span class="line">OLED_CS_Clr();</span><br><span class="line">OLED_WR_Clr(); </span><br><span class="line">OLED_WR_Set();</span><br><span class="line">OLED_CS_Set();  </span><br><span class="line">OLED_DC_Set(); </span><br><span class="line">&#125;         </span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">//向SSD1106写入一个字节。</span></span><br><span class="line"><span class="comment">//dat:要写入的数据/命令</span></span><br><span class="line"><span class="comment">//cmd:数据/命令标志 0,表示命令;1,表示数据;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_WR_Byte</span><span class="params">(u8 dat,u8 cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 i;  </span><br><span class="line"><span class="keyword">if</span>(cmd)</span><br><span class="line">  OLED_DC_Set();</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">  OLED_DC_Clr();  </span><br><span class="line">OLED_CS_Clr();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;  </span><br><span class="line">OLED_SCLK_Clr();</span><br><span class="line"><span class="keyword">if</span>(dat&amp;<span class="number">0x80</span>)</span><br><span class="line">   OLED_SDIN_Set();</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">   OLED_SDIN_Clr();</span><br><span class="line">OLED_SCLK_Set();</span><br><span class="line">dat&lt;&lt;=<span class="number">1</span>;   </span><br><span class="line">&#125;   </span><br><span class="line">OLED_CS_Set();</span><br><span class="line">OLED_DC_Set();     </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Set_Pos</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> x, <span class="keyword">unsigned</span> <span class="keyword">char</span> y)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">OLED_WR_Byte(<span class="number">0xb0</span>+y,OLED_CMD);</span><br><span class="line">OLED_WR_Byte(((x&amp;<span class="number">0xf0</span>)&gt;&gt;<span class="number">4</span>)|<span class="number">0x10</span>,OLED_CMD);</span><br><span class="line">OLED_WR_Byte((x&amp;<span class="number">0x0f</span>)|<span class="number">0x01</span>,OLED_CMD); </span><br><span class="line">&#125;     </span><br><span class="line"><span class="comment">//开启OLED显示    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Display_On</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0X14</span>,OLED_CMD);  <span class="comment">//DCDC ON</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0XAF</span>,OLED_CMD);  <span class="comment">//DISPLAY ON</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭OLED显示     </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Display_Off</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0X10</span>,OLED_CMD);  <span class="comment">//DCDC OFF</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0XAE</span>,OLED_CMD);  <span class="comment">//DISPLAY OFF</span></span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Clear</span><span class="params">(<span class="keyword">void</span>)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">u8 i,n;    </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)  </span><br><span class="line">&#123;  </span><br><span class="line">OLED_WR_Byte (<span class="number">0xb0</span>+i,OLED_CMD);    <span class="comment">//设置页地址（0~7）</span></span><br><span class="line">OLED_WR_Byte (<span class="number">0x00</span>,OLED_CMD);      <span class="comment">//设置显示位置—列低地址</span></span><br><span class="line">OLED_WR_Byte (<span class="number">0x10</span>,OLED_CMD);      <span class="comment">//设置显示位置—列高地址   </span></span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)OLED_WR_Byte(<span class="number">0</span>,OLED_DATA); </span><br><span class="line">&#125; <span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在指定位置显示一个字符,包括部分字符</span></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="comment">//mode:0,反白显示;1,正常显示 </span></span><br><span class="line"><span class="comment">//size:选择字体 16/12 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowChar</span><span class="params">(u8 x,u8 y,u8 chr)</span></span></span><br><span class="line"><span class="function"></span>&#123;      </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c=<span class="number">0</span>,i=<span class="number">0</span>;</span><br><span class="line">c=chr-<span class="string">&#x27; &#x27;</span>;<span class="comment">//得到偏移后的值</span></span><br><span class="line"><span class="keyword">if</span>(x&gt;Max_Column<span class="number">-1</span>)&#123;x=<span class="number">0</span>;y=y+<span class="number">2</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(SIZE ==<span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_Set_Pos(x,y);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">OLED_WR_Byte(F8X16[c*<span class="number">16</span>+i],OLED_DATA);</span><br><span class="line">OLED_Set_Pos(x,y+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">OLED_WR_Byte(F8X16[c*<span class="number">16</span>+i+<span class="number">8</span>],OLED_DATA);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">OLED_Set_Pos(x,y+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">OLED_WR_Byte(F6x8[c][i],OLED_DATA);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//m^n函数</span></span><br><span class="line"><span class="function">u32 <span class="title">oled_pow</span><span class="params">(u8 m,u8 n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 result=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">while</span>(n--)result*=m;    </span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//显示2个数字</span></span><br><span class="line"><span class="comment">//x,y :起点坐标 </span></span><br><span class="line"><span class="comment">//len :数字的位数</span></span><br><span class="line"><span class="comment">//size:字体大小</span></span><br><span class="line"><span class="comment">//mode:模式0,填充模式;1,叠加模式</span></span><br><span class="line"><span class="comment">//num:数值(0~4294967295);   </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowNum</span><span class="params">(u8 x,u8 y,u32 num,u8 len,u8 size)</span></span></span><br><span class="line"><span class="function"></span>&#123;         </span><br><span class="line">u8 t,temp;</span><br><span class="line">u8 enshow=<span class="number">0</span>;   </span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">&#123;</span><br><span class="line">temp=(num/oled_pow(<span class="number">10</span>,len-t<span class="number">-1</span>))%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(enshow==<span class="number">0</span>&amp;&amp;t&lt;(len<span class="number">-1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowChar(x+(size/<span class="number">2</span>)*t,y,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> enshow=<span class="number">1</span>; </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"> OLED_ShowChar(x+(size/<span class="number">2</span>)*t,y,temp+<span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//显示一个字符号串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowString</span><span class="params">(u8 x,u8 y,u8 *chr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (chr[j]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;OLED_ShowChar(x,y,chr[j]);</span><br><span class="line">x+=<span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">120</span>)&#123;x=<span class="number">0</span>;y+=<span class="number">2</span>;&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示汉字--no表示行数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_ShowCHinese</span><span class="params">(u8 x,u8 y,u8 no)</span></span></span><br><span class="line"><span class="function"></span>&#123;          </span><br><span class="line">u8 t,adder=<span class="number">0</span>;</span><br><span class="line">OLED_Set_Pos(x,y);</span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">16</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(Hzk[<span class="number">2</span>*no][t],OLED_DATA);</span><br><span class="line">adder+=<span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">OLED_Set_Pos(x,y+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">16</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(Hzk[<span class="number">2</span>*no+<span class="number">1</span>][t],OLED_DATA);</span><br><span class="line">adder+=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***********功能描述：显示显示BMP图片128×64起始点坐标(x,y),x的范围0～127，y为页的范围0～7*****************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_DrawBMP</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> x0, <span class="keyword">unsigned</span> <span class="keyword">char</span> y0,<span class="keyword">unsigned</span> <span class="keyword">char</span> x1, <span class="keyword">unsigned</span> <span class="keyword">char</span> y1,<span class="keyword">unsigned</span> <span class="keyword">char</span> BMP[])</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">char</span> x,y;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(y1%<span class="number">8</span>==<span class="number">0</span>) y=y1/<span class="number">8</span>;      </span><br><span class="line">  <span class="keyword">else</span> y=y1/<span class="number">8</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(y=y0;y&lt;y1;y++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_Set_Pos(x0,y);</span><br><span class="line">    <span class="keyword">for</span>(x=x0;x&lt;x1;x++)</span><br><span class="line">    &#123;      </span><br><span class="line">    OLED_WR_Byte(BMP[j++],OLED_DATA);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化SSD1306    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OLED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line"> GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"> </span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE); <span class="comment">//使能A端口时钟</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6| GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_7; </span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//速度50MHz</span></span><br><span class="line"> GPIO_Init(GPIOA, &amp;GPIO_InitStructure);  <span class="comment">//初始化GPIOD3,6</span></span><br><span class="line"> GPIO_SetBits(GPIOA,GPIO_Pin_5|GPIO_Pin_7|GPIO_Pin_4);</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); <span class="comment">//使能A端口时钟</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8; </span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//速度50MHz</span></span><br><span class="line"> GPIO_Init(GPIOB, &amp;GPIO_InitStructure);  <span class="comment">//初始化GPIOD3,6</span></span><br><span class="line"></span><br><span class="line"> GPIO_SetBits(GPIOB,GPIO_Pin_8);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  OLED_RST_Set();</span><br><span class="line">delay_ms(<span class="number">100</span>);</span><br><span class="line">OLED_RST_Clr();</span><br><span class="line">delay_ms(<span class="number">200</span>);</span><br><span class="line">OLED_RST_Set(); </span><br><span class="line">  </span><br><span class="line">OLED_WR_Byte(<span class="number">0xAE</span>,OLED_CMD);<span class="comment">//--turn off oled panel</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x00</span>,OLED_CMD);<span class="comment">//---set low column address</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x10</span>,OLED_CMD);<span class="comment">//---set high column address</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x40</span>,OLED_CMD);<span class="comment">//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x81</span>,OLED_CMD);<span class="comment">//--set contrast control register</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xCF</span>,OLED_CMD); <span class="comment">// Set SEG Output Current Brightness</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA1</span>,OLED_CMD);<span class="comment">//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xC8</span>,OLED_CMD);<span class="comment">//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA6</span>,OLED_CMD);<span class="comment">//--set normal display</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA8</span>,OLED_CMD);<span class="comment">//--set multiplex ratio(1 to 64)</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x3f</span>,OLED_CMD);<span class="comment">//--1/64 duty</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xD3</span>,OLED_CMD);<span class="comment">//-set display offsetShift Mapping RAM Counter (0x00~0x3F)</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x00</span>,OLED_CMD);<span class="comment">//-not offset</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xd5</span>,OLED_CMD);<span class="comment">//--set display clock divide ratio/oscillator frequency</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x80</span>,OLED_CMD);<span class="comment">//--set divide ratio, Set Clock as 100 Frames/Sec</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xD9</span>,OLED_CMD);<span class="comment">//--set pre-charge period</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xF1</span>,OLED_CMD);<span class="comment">//Set Pre-Charge as 15 Clocks &amp; Discharge as 1 Clock</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xDA</span>,OLED_CMD);<span class="comment">//--set com pins hardware configuration</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x12</span>,OLED_CMD);</span><br><span class="line">OLED_WR_Byte(<span class="number">0xDB</span>,OLED_CMD);<span class="comment">//--set vcomh</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x40</span>,OLED_CMD);<span class="comment">//Set VCOM Deselect Level</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x20</span>,OLED_CMD);<span class="comment">//-Set Page Addressing Mode (0x00/0x01/0x02)</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x02</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x8D</span>,OLED_CMD);<span class="comment">//--set Charge Pump enable/disable</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x14</span>,OLED_CMD);<span class="comment">//--set(0x10) disable</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA4</span>,OLED_CMD);<span class="comment">// Disable Entire Display On (0xa4/0xa5)</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA6</span>,OLED_CMD);<span class="comment">// Disable Inverse Display On (0xa6/a7) </span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xAF</span>,OLED_CMD);<span class="comment">//--turn on oled panel</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0xAF</span>,OLED_CMD); <span class="comment">/*display ON*/</span> </span><br><span class="line">OLED_Clear();</span><br><span class="line">OLED_Set_Pos(<span class="number">0</span>,<span class="number">0</span>); </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h5 id="中断优先工具包"><a href="#中断优先工具包" class="headerlink" title="中断优先工具包"></a>中断优先工具包</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);<span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>串口通信配置工具包</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;usart.h&quot;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加入以下代码,支持printf函数,而不需要选择use MicroLIB  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> import(__use_no_semihosting)             </span></span><br><span class="line"><span class="comment">//标准库需要的支持函数                 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">FILE</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line"><span class="keyword">int</span> handle; </span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">FILE __stdout;       </span><br><span class="line"><span class="comment">//定义_sys_exit()以避免使用半主机模式    </span></span><br><span class="line">_sys_exit(<span class="keyword">int</span> x) </span><br><span class="line">&#123; </span><br><span class="line">x = x; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//重定义fputc函数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> ch, FILE *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;      </span><br><span class="line"><span class="keyword">while</span>((USART1-&gt;SR&amp;<span class="number">0X40</span>)==<span class="number">0</span>);<span class="comment">//循环发送,直到发送完毕   </span></span><br><span class="line">    USART1-&gt;DR = (u8) ch;      </span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用microLib的方法*/</span></span><br><span class="line"> <span class="comment">/* </span></span><br><span class="line"><span class="comment">int fputc(int ch, FILE *f)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">USART_SendData(USART1, (uint8_t) ch);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET) &#123;&#125;</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">    return ch;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">int GetKey (void)  &#123; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    while (!(USART1-&gt;SR &amp; USART_FLAG_RXNE));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    return ((int)(USART1-&gt;DR &amp; 0x1FF));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> EN_USART1_RX   <span class="comment">//如果使能了接收</span></span></span><br><span class="line"><span class="comment">//串口1中断服务程序</span></span><br><span class="line"><span class="comment">//注意,读取USARTx-&gt;SR能避免莫名其妙的错误   </span></span><br><span class="line">u8 USART_RX_BUF[USART_REC_LEN];     <span class="comment">//接收缓冲,最大USART_REC_LEN个字节.</span></span><br><span class="line"><span class="comment">//接收状态</span></span><br><span class="line"><span class="comment">//bit15，接收完成标志</span></span><br><span class="line"><span class="comment">//bit14，接收到0x0d</span></span><br><span class="line"><span class="comment">//bit13~0，接收到的有效字节数目</span></span><br><span class="line">u16 USART_RX_STA=<span class="number">0</span>;       <span class="comment">//接收状态标记  </span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uart_init</span><span class="params">(u32 bound)</span></span>&#123;</span><br><span class="line">    <span class="comment">//GPIO端口设置</span></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line"> </span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1|RCC_APB2Periph_GPIOA|RCC_APB2Periph_AFIO, ENABLE);<span class="comment">//使能USART1，GPIOA时钟以及复用功能时钟</span></span><br><span class="line">     <span class="comment">//USART1_TX   PA.9</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//PA.9</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;<span class="comment">//复用推挽输出</span></span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//USART1_RX  PA.10</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;<span class="comment">//浮空输入</span></span><br><span class="line">    GPIO_Init(GPIOA, &amp;GPIO_InitStructure);  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//Usart1 NVIC 配置</span></span><br><span class="line"></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">3</span> ;<span class="comment">//抢占优先级3</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">3</span>;<span class="comment">//子优先级3</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//IRQ通道使能</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//根据指定的参数初始化VIC寄存器</span></span><br><span class="line">  </span><br><span class="line">   <span class="comment">//USART 初始化设置</span></span><br><span class="line"></span><br><span class="line">USART_InitStructure.USART_BaudRate = bound;<span class="comment">//一般设置为9600;</span></span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//字长为8位数据格式</span></span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//一个停止位</span></span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶校验位</span></span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line"></span><br><span class="line">    USART_Init(USART1, &amp;USART_InitStructure); <span class="comment">//初始化串口</span></span><br><span class="line">    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);<span class="comment">//开启中断</span></span><br><span class="line">    USART_Cmd(USART1, ENABLE);                    <span class="comment">//使能串口 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span>                <span class="comment">//串口1中断服务程序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 Res;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_TICKS_PER_SEC <span class="comment">//如果时钟节拍数定义了,说明要使用ucosII了.</span></span></span><br><span class="line">OSIntEnter();    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  <span class="comment">//接收中断(接收到的数据必须是0x0d 0x0a结尾)</span></span><br><span class="line">&#123;</span><br><span class="line">Res =USART_ReceiveData(USART1);<span class="comment">//(USART1-&gt;DR);//读取接收到的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((USART_RX_STA&amp;<span class="number">0x8000</span>)==<span class="number">0</span>)<span class="comment">//接收未完成</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(USART_RX_STA&amp;<span class="number">0x4000</span>)<span class="comment">//接收到了0x0d</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Res!=<span class="number">0x0a</span>)USART_RX_STA=<span class="number">0</span>;<span class="comment">//接收错误,重新开始</span></span><br><span class="line"><span class="keyword">else</span> USART_RX_STA|=<span class="number">0x8000</span>;<span class="comment">//接收完成了 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//还没收到0X0D</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Res==<span class="number">0x0d</span>)USART_RX_STA|=<span class="number">0x4000</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">USART_RX_BUF[USART_RX_STA&amp;<span class="number">0X3FFF</span>]=Res ;</span><br><span class="line">USART_RX_STA++;</span><br><span class="line"><span class="keyword">if</span>(USART_RX_STA&gt;(USART_REC_LEN<span class="number">-1</span>))USART_RX_STA=<span class="number">0</span>;<span class="comment">//接收数据错误,重新开始接收  </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;    </span><br><span class="line">     &#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> OS_TICKS_PER_SEC <span class="comment">//如果时钟节拍数定义了,说明要使用ucosII了.</span></span></span><br><span class="line">OSIntExit();   </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>支持中断处理串口通信</li><li>支持printf输出内容到串口</li></ul><h5 id="文字取模添加"><a href="#文字取模添加" class="headerlink" title="文字取模添加"></a>文字取模添加</h5><p>在oledfont.h可以看到字符串的16进制对应，我们也可以取模然后添加汉字</p><h5 id="汉字显示"><a href="#汉字显示" class="headerlink" title="汉字显示"></a>汉字显示</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bmp.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 t;</span><br><span class="line">delay_init();     <span class="comment">//延时函数初始化  </span></span><br><span class="line">NVIC_Configuration();  <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级 LED_Init(); </span></span><br><span class="line">    <span class="comment">//LED端口初始化</span></span><br><span class="line">OLED_Init();<span class="comment">//初始化OLED  </span></span><br><span class="line">OLED_Clear()  ; </span><br><span class="line">t=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">OLED_Clear();</span><br><span class="line"><span class="comment">//LED_ON;</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//中</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">18</span>,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//景</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">36</span>,<span class="number">0</span>,<span class="number">2</span>);<span class="comment">//园</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">54</span>,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//电</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">72</span>,<span class="number">0</span>,<span class="number">4</span>);<span class="comment">//子</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">90</span>,<span class="number">0</span>,<span class="number">5</span>);<span class="comment">//科</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">108</span>,<span class="number">0</span>,<span class="number">6</span>);<span class="comment">//技</span></span><br><span class="line"></span><br><span class="line">OLED_ShowCHinese(<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>);<span class="comment">//佛</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">18</span>,<span class="number">6</span>,<span class="number">8</span>);<span class="comment">//科</span></span><br><span class="line">OLED_ShowString(<span class="number">0</span>,<span class="number">3</span>,(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="string">&quot;1.3&#x27; OLED TEST&quot;</span>);</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="温度测量"><a href="#温度测量" class="headerlink" title="温度测量"></a>温度测量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO信息结构体体初始化</span></span><br><span class="line">GPIO_InitTypeDef   GPIO_InitStructure;</span><br><span class="line">EXTI_InitTypeDef   EXTI_InitStructure;</span><br><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line">USART_InitTypeDef USART_InitStructure; <span class="comment">//串口配置的信息结构体</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> dht11_data[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重定义fputc函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> ch, FILE *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//发送字符到串口1</span></span><br><span class="line">USART_SendData(USART1,ch);</span><br><span class="line"><span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//延时100ms ，计数72000000次时间过了1s  , 计数72000次时间过了1ms,计数72次表示时间过了1us</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SysTick-&gt;LOAD = <span class="number">72000</span>*x; <span class="comment">//把计数值加载到LOAD寄存器 ---&gt;每次计数100ms</span></span><br><span class="line"></span><br><span class="line">SysTick-&gt;VAL = <span class="number">0</span>; <span class="comment">//清空VAL寄存器的计数值</span></span><br><span class="line"></span><br><span class="line">SysTick-&gt;CTRL |= <span class="number">0x1</span>&lt;&lt;<span class="number">0</span>; <span class="comment">//开始计时,打开定时器把CTRL的第0位置1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">0</span> == (SysTick-&gt;CTRL &amp; (<span class="number">0x1</span>&lt;&lt;<span class="number">16</span>)) ); <span class="comment">//判断CTRL是否为1，如果为1表示计时时间到了</span></span><br><span class="line"></span><br><span class="line">SysTick-&gt;CTRL &amp;= ~(<span class="number">0x1</span>&lt;&lt;<span class="number">0</span>); <span class="comment">//关闭定时器，把CTRL的第0位清零</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//微妙级别延时</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SysTick-&gt;LOAD = <span class="number">72</span>*x; <span class="comment">//把计数值加载到LOAD寄存器 ---&gt;每次计数100ms</span></span><br><span class="line"></span><br><span class="line">SysTick-&gt;VAL = <span class="number">0</span>; <span class="comment">//清空VAL寄存器的计数值</span></span><br><span class="line"></span><br><span class="line">SysTick-&gt;CTRL |= <span class="number">0x1</span>&lt;&lt;<span class="number">0</span>; <span class="comment">//开始计时,打开定时器把CTRL的第0位置1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">0</span> == (SysTick-&gt;CTRL &amp; (<span class="number">0x1</span>&lt;&lt;<span class="number">16</span>)) ); <span class="comment">//判断CTRL是否为1，如果为1表示计时时间到了</span></span><br><span class="line"></span><br><span class="line">SysTick-&gt;CTRL &amp;= ~(<span class="number">0x1</span>&lt;&lt;<span class="number">0</span>); <span class="comment">//关闭定时器，把CTRL的第0位清零</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//led-》GPIO信息结构体初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">led_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//关闭引脚JTAG复用功能--&gt;PA13、PA14、PA15、PB3、PB4</span></span><br><span class="line">RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line">GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIOB Periph clock enable */</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Configure PD0 and PD2 in output pushpull mode */</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = <span class="number">0xff</span> ;<span class="comment">//GPIO_Pin_0~GPIO_Pin_7</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//设置运行频率50MHz</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; <span class="comment">//设置推挽输出</span></span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">GPIO_SetBits(GPIOB, <span class="number">0xff</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">10000</span>; j++);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置串口1--&gt;PA9+PA10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usart1_init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.使能GPIO外设、IO复用时钟、USART2时钟 PA9 和PA10</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//2.配置GPIO + 初始化GPIO</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//  PA2   TX</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  <span class="comment">//复用推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; <span class="comment">//  PA3   RX</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  <span class="comment">//浮空输入   PA10  RX</span></span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.配置USART1 + 初始化USART1</span></span><br><span class="line">USART_InitStructure.USART_BaudRate = bound;<span class="comment">//波特率</span></span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//数据位8位</span></span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//停止位1位</span></span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶检验</span></span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line">USART_Init(USART1, &amp;USART_InitStructure);<span class="comment">//把配置信息加载到串口2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.配置NVIC + 初始化NVIC </span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;<span class="comment">//选择串口2的中断</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>;<span class="comment">//设置抢占优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>; <span class="comment">//设置响应优先级</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//使能串口2的中断</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//把配置信息加载到中断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.使能串口中断</span></span><br><span class="line">USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);<span class="comment">//接收到数据触发中断</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.使能串口</span></span><br><span class="line">USART_Cmd(USART1,ENABLE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//把PB15设置为输出模式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_PA15_outputmode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* GPIOB Peripheral clock enable 使能对应GPIO组的硬件时钟，使能第B组的硬件时钟*/</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Configure PB15 in output pushpull mode */</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;<span class="comment">//选择15号引脚</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;<span class="comment">//选择输出模式</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//设置运行速度为100MHz</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把PB15设置为输入模式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_PA15_inputmode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPIOB Periph clock enable */</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Configure PD0 and PD2 in output pushpull mode */</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15; </span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<span class="comment">//设置运行频率50MHz</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; <span class="comment">//设置推挽输出</span></span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MCU请求dht11发送数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask_dht11_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//请求dht11发送数据</span></span><br><span class="line">set_PA15_outputmode(); <span class="comment">//--》设置为输出模式</span></span><br><span class="line">GPIO_ResetBits(GPIOA,  GPIO_Pin_15);</span><br><span class="line">delay_ms(<span class="number">20</span>);</span><br><span class="line">GPIO_SetBits(GPIOA, GPIO_Pin_15);</span><br><span class="line"></span><br><span class="line">delay_us(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断dht11是否有回应--》在一定的时间内没有回应，就要重新请求数据</span></span><br><span class="line">set_PA15_inputmode();</span><br><span class="line"></span><br><span class="line"><span class="comment">//超时控制--》设置100us</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">delay_us(<span class="number">1</span>);</span><br><span class="line">i++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//如果超时，就结束函数</span></span><br><span class="line"><span class="keyword">if</span>(i&gt;= <span class="number">100</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//检测低电平持续时间--》也要设置超时控制</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> == GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">delay_us(<span class="number">1</span>);</span><br><span class="line">i++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//如果超时，就结束函数</span></span><br><span class="line"><span class="keyword">if</span>(i&gt;= <span class="number">100</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每次读取一个字节数据</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">read_dht11_data_1byte</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> data=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//等待高电平时间持续结束</span></span><br><span class="line"><span class="comment">//while(1 == PAin(15));</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span> ==  GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15));</span><br><span class="line"><span class="comment">//读取8bit数据--》合成一个unsigned char 数据</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是1还是0--&gt;等待低电平时间持续结束</span></span><br><span class="line"><span class="keyword">while</span>( <span class="number">0</span> == GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15));</span><br><span class="line">delay_us(<span class="number">40</span>);</span><br><span class="line"><span class="comment">//40us后，仍然是高电平，该bit则为1</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> == GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15))</span><br><span class="line">&#123;</span><br><span class="line">data |=  <span class="number">1</span>&lt;&lt; (<span class="number">7</span>-i); <span class="comment">//先读到是高位</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//等待高电平时间持续结束</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span> == GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_15));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取全部数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_dht11_all_data</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="comment">//不断请求dht11发送数据</span></span><br><span class="line"><span class="keyword">while</span>( <span class="number">-1</span> == ask_dht11_data());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">dht11_data[i]= read_dht11_data_1byte();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断校验和</span></span><br><span class="line"><span class="keyword">if</span>(dht11_data[<span class="number">4</span>] == dht11_data[<span class="number">0</span>]+dht11_data[<span class="number">1</span>]+dht11_data[<span class="number">2</span>]+dht11_data[<span class="number">3</span>])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化系统定时器时钟--》时钟频率为72MHz</span></span><br><span class="line">SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);</span><br><span class="line">led_init();</span><br><span class="line"></span><br><span class="line">usart1_init(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delay();</span><br><span class="line"><span class="comment">//if(data == &#x27;D&#x27;)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//读取温湿度数据 成功</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> == read_dht11_all_data())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;H:%d.%d T:%d.%d\r\n&quot;</span>, dht11_data[<span class="number">0</span>],dht11_data[<span class="number">1</span>], dht11_data[<span class="number">2</span>],dht11_data[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//串口1中断服务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断中断是否产生</span></span><br><span class="line"><span class="keyword">if</span>( USART_GetITStatus(USART1,USART_IT_RXNE) == SET )<span class="comment">//如果接收到数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line">data = USART_ReceiveData(USART1);<span class="comment">//接收从USART2发送过来的中断</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>( USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空中断标志位</span></span><br><span class="line">USART_ClearITPendingBit(USART1,USART_IT_RXNE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041048103.png&quot; alt=&quot;image-20210904104854742&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="硬件开发" scheme="https://autovy.github.io/categories/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="stm32" scheme="https://autovy.github.io/tags/stm32/"/>
    
      <category term="硬件" scheme="https://autovy.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>开发工具|Docker搭建LNMP</title>
    <link href="https://autovy.github.io/2021/06/06/Tool/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Docker%E6%90%AD%E5%BB%BALNMP/"/>
    <id>https://autovy.github.io/2021/06/06/Tool/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Docker%E6%90%AD%E5%BB%BALNMP/</id>
    <published>2021-06-06T06:30:00.000Z</published>
    <updated>2021-09-04T01:55:32.807Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040845042.jpeg" alt="git"></p><span id="more"></span><h2 id="命令行搭建"><a href="#命令行搭建" class="headerlink" title="命令行搭建"></a>命令行搭建</h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><h4 id="1-mysql镜像拉取"><a href="#1-mysql镜像拉取" class="headerlink" title="1.mysql镜像拉取"></a>1.mysql镜像拉取</h4><p>从仓库中拉取对应的mysql镜像，注意如果不标注tag（版本号等），会默认使用lastest（最新版）这个版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docekr pull mysql:5.6</span><br></pre></td></tr></table></figure><h4 id="2-创建mysql容器"><a href="#2-创建mysql容器" class="headerlink" title="2.创建mysql容器"></a>2.创建mysql容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=xy123456 --name xy_mysql mysql:5.6</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-d 让容器在后台运行，如果没有这个条件，会在终端展示mysql加载过程，而且无法进行操作（在另一个终端查看，会发现mysql的容器正在运行中，关闭原来的终端，该容器并不会随之关闭）</li><li>-p 添加主机到容器的端口映射，3306是容器内mysql默认使用的端口号</li><li>-e 设置环境变量，这里是设置mysql的root用户的初始密码，这个必须设置，如果没有设置容器会被自动关停</li><li>–name 容器的名字，容器名必须唯一</li></ul><h4 id="3-进入mysql容器"><a href="#3-进入mysql容器" class="headerlink" title="3.进入mysql容器"></a>3.进入mysql容器</h4><p>容器启动后，我们可以进入运行中的容器查看mysql的相关文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -ti xy_mysql /bin/bash</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-t 在容器里生产一个伪终端</li><li>-i 对容器内的标准输入 (STDIN) 进行交互</li><li>exit命令是离开并关闭容器，但是由于容器还有任务所以不会关停</li></ul><h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><h4 id="1-PHP镜像拉取"><a href="#1-PHP镜像拉取" class="headerlink" title="1.PHP镜像拉取"></a>1.PHP镜像拉取</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull php:7.0-fpm</span><br></pre></td></tr></table></figure><h4 id="2-创建PHP容器"><a href="#2-创建PHP容器" class="headerlink" title="2.创建PHP容器"></a>2.创建PHP容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v /var/nginx/www/html:/var/www/html -p 9000:9000 --link xy_mysql:mysql --name xy_phpfpm php:fpm </span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-p 添加主机到容器的端口映射，设定php使用9000端口</li><li>-v 添加目录映射，即主机上的/var/nginx/www/html和容器中/var/www/html目录是同步的，主机上的路径如果不存在，也会自动生成</li><li>–link 与另外一个容器建立起联系，这样我们就可以在当前容器中去使用另一个容器里的服务</li></ul><h4 id="3-创建文件"><a href="#3-创建文件" class="headerlink" title="3.创建文件"></a>3.创建文件</h4><p>这时我们可以不进入容器内增加文件，而是可以在主机的挂载目录下添加文件</p><p>在/var/nginx/www/html目录下新建index.php文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim index.php</span><br></pre></td></tr></table></figure><p>写入内容作为测试</p><p>因为docker需要在最高权限下运行，所有在主机上创建的目录需要最高权限访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo() <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="安装nignx"><a href="#安装nignx" class="headerlink" title="安装nignx"></a>安装nignx</h3><h4 id="1-nginx镜像拉取"><a href="#1-nginx镜像拉取" class="headerlink" title="1.nginx镜像拉取"></a>1.nginx镜像拉取</h4><p>这里拉取的就是最新版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h4 id="2-创建nginx工具人容器"><a href="#2-创建nginx工具人容器" class="headerlink" title="2.创建nginx工具人容器"></a>2.创建nginx工具人容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 \</span><br><span class="line">--link xy_phpfpm:phpfpm --name xy_nginx nginx</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>创建一个无挂载的容器，方便下一步提取出配置文件（如果挂载了，会导致复制配置文件时，一直与容器同步）</p><h4 id="3-复制配置文件"><a href="#3-复制配置文件" class="headerlink" title="3.复制配置文件"></a>3.复制配置文件</h4><p>容器的挂载只限于目录，如果直接挂载文件，其仍作为目录被处理</p><p>要实现文件同步，我们必须要先从容器中复制出一份配置文件（如果是直接新建一个，挂载时主机上的空白文件会同步到容器中）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp xy_nginx:/etc/nginx/nginx.conf /var/nginx/nginx.conf</span><br><span class="line">docker cp xy_nginx:/etc/nginx/conf.d/default.conf /var/nginx/conf.d/</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>docker cp  原路径:转移路径</li><li>容器的路径用： <code>容器名:容器内文件路径</code>表示</li><li>cp时路径上的目录必须存在（而挂载时，主机会自动创建不存在的目录）</li></ul><h4 id="4-创建nginx挂载容器"><a href="#4-创建nginx挂载容器" class="headerlink" title="4.创建nginx挂载容器"></a>4.创建nginx挂载容器</h4><p>先把充当工具人的nginx容器删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f xy_nginx</span><br></pre></td></tr></table></figure><p>重新创建一个带挂载的nginx容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 \</span><br><span class="line">-v /var/nginx/nginx.conf:/ect/nginx/nginx.conf\</span><br><span class="line">-v /var/nginx/conf.d/default.conf:/ect/nginx/conf.d/default.conf\</span><br><span class="line">-v /var/nginx/www/html:/var/www/html\</span><br><span class="line">--link xy_phpfpm:phpfpm --name xy_nginx nginx</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-p 添加主机到容器的端口映射，nginx默认使用80端口，也是网页范围默认使用的端口</li><li>-v 挂载了三个文件到本地，其中<code>/var/nginx/nginx.conf</code>和<code>/var/nginx/conf.d/default.conf</code>在本地同步了nginx两个重要的配置文件，<code>/var/www/html</code>则同步了nginx网页展示文件</li><li>挂载时应该要保持最后一个文件相同</li></ul><h4 id="5-修改配置文件"><a href="#5-修改配置文件" class="headerlink" title="5.修改配置文件"></a>5.修改配置文件</h4><p>修改nginx的配置文件让其监听php，这里可以直接在主机修改配置文件</p><p>主机：<code>/var/nginx/conf.d/default.conf</code>    容器：<code>/ect/nginx/conf.d/default.conf</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root           /<span class="keyword">var</span>/www/html;</span><br><span class="line">    fastcgi_pass   <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9000</span>;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document</span>_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    <span class="keyword">include</span>        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内容解析：</p><ul><li>root为文件php根目录，所以修改为 <code>/var/www/html</code></li><li>fastcgi_pass 修改为<code>本地ip地址:php端口</code>，注意使用回环地址也是不允许的</li><li>fastcgi_index为默认访问的页面</li><li>fastcgi_param应该改为 $document_root$fastcgi_script_name才能准确找到位置</li></ul><h4 id="6-配置出错处理方法"><a href="#6-配置出错处理方法" class="headerlink" title="6.配置出错处理方法"></a>6.配置出错处理方法</h4><p>当配置文件出错时，容器将无法运行</p><ul><li>先查看日志，查找出错的地方</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs xy_nginx</span><br></pre></td></tr></table></figure><ul><li>由于容器没有启动，我们无法直接进入容器修改，所以需要用docker cp下载出问题的文件，然后再通过cp覆盖问题文件</li><li>如果该出错文件有挂载，在本地修改即可</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040845042.jpeg&quot; alt=&quot;git&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发工具" scheme="https://autovy.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="开发工具" scheme="https://autovy.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="docker" scheme="https://autovy.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>开发工具|学点docker</title>
    <link href="https://autovy.github.io/2021/05/28/Tool/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Docker%E5%AD%A6%E4%B9%A0/"/>
    <id>https://autovy.github.io/2021/05/28/Tool/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Docker%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-28T06:30:00.000Z</published>
    <updated>2021-09-04T01:19:29.607Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040845042.jpeg" alt="git"></p><span id="more"></span><h3 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h3><h4 id="Docker应用"><a href="#Docker应用" class="headerlink" title="Docker应用"></a>Docker应用</h4><ul><li>部署环境复杂，非常费时费力</li><li>环境不能跨平台</li><li>docker可以把环境打包成镜像，直接运行即可</li><li>docker通过隔离机制，可以将服务器利用到极致</li></ul><h4 id="Docker的功能"><a href="#Docker的功能" class="headerlink" title="Docker的功能"></a>Docker的功能</h4><ul><li><p>虚拟机技术</p></li><li><p>容器化技术</p></li><li><p>DevOps（开发 + 运维）</p></li><li><p>应用更加快速的交付和部署</p></li><li><p>更便捷的升级和扩缩容</p></li><li><p>更加简单的系统运维</p></li><li><p>更加高效的计算资源利用</p></li></ul><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><h4 id="1-Docker基本组成"><a href="#1-Docker基本组成" class="headerlink" title="1.Docker基本组成"></a>1.Docker基本组成</h4><ul><li><p>仓库：仓库就是存放镜像的地方</p></li><li><p>镜像：docker镜像就像一个模板，通过镜像可以创建多个容器</p></li><li><p>容器：容器可以独立运行一个或者多组应用（启动，停止，删除）</p></li></ul><h4 id="2-run工作流程"><a href="#2-run工作流程" class="headerlink" title="2.run工作流程"></a>2.run工作流程</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846845.png" alt="在这里插入图片描述"></p><h4 id="3-Docker工作原理"><a href="#3-Docker工作原理" class="headerlink" title="3.Docker工作原理"></a>3.Docker工作原理</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846904.png" alt="Docker 工作原理"></p><h4 id="4-Docker与VM的区别"><a href="#4-Docker与VM的区别" class="headerlink" title="4.Docker与VM的区别"></a>4.Docker与VM的区别</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846873.jpeg" alt="containers-vs-virtual-machines.jpg"></p><ul><li>Docker的抽象层比虚拟机少</li><li>docker利用的是宿主机的内核，vm需要的是Guest OS（vm每次都要加载操作系统的内核）</li></ul><h3 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846335.jpeg" alt="img"></p><h4 id="1-帮助命令"><a href="#1-帮助命令" class="headerlink" title="1.帮助命令"></a>1.帮助命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker info</span><br><span class="line">docker --help</span><br></pre></td></tr></table></figure><h4 id="2-镜像命令"><a href="#2-镜像命令" class="headerlink" title="2.镜像命令"></a>2.镜像命令</h4><p>（1）docker images查看本地主机上的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br></pre></td></tr></table></figure><p>解析：</p><ul><li>REPOSITORY :镜像的仓库源</li><li>TAG：镜像的标签</li><li>IMAGE ID：镜像的id</li><li>CREATED：镜像的创建时间    </li><li>SIZE：镜像大小</li></ul><p>可选项：</p><ul><li>-a : 列出所有镜像</li><li>-q：只显示镜像id</li></ul><p>（2）docker search 搜索镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NAME  DESCRIPTION   STARS  OFFICIAL   AUTOMATED</span><br></pre></td></tr></table></figure><p>可选项，可以过滤搜索结果：</p><p>–filter=STARS=3000 ：搜索stars大于3000的镜像</p><p>（3）docker pull 拉取镜像:tag ，默认拉取最新版</p><p>（4）docker rmi 删除镜像名称/id   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除mysql镜像</span></span><br><span class="line">docker rmi -f mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 递归删除所有镜像</span></span><br><span class="line">docker -f $(docker images -aq)</span><br></pre></td></tr></table></figure><h4 id="3-容器命令"><a href="#3-容器命令" class="headerlink" title="3.容器命令"></a>3.容器命令</h4><p>有了镜像我们才能创建容器</p><p>（1）新建镜像并启动：dokcer run [可选参数] image</p><p>容器内相当于一个新的虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure><p>相关参数：</p><ul><li>–name = “Name” ：容器名字，用于区分容器</li><li>-d ：后台方式运行</li><li>-it : 使用交互方式运行，可进入容器查看内容（开启容器终端）</li><li>-p：指定容器端口</li></ul><p>（2）查看容器：docker ps</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps    #查看运行中的容器</span><br></pre></td></tr></table></figure><p>相关参数：</p><ul><li>-a  ：查看所有容器（包括已终止的容器）</li><li>-n = ? :显示最近创建的容器</li><li>-q ： 只显示容器的编号</li></ul><p>（3）退出容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit # 容器停止并退出</span><br><span class="line">ctrl + P + Q # 容器不停止退出(按P,Q这个设计多少有点反人类)</span><br></pre></td></tr></table></figure><p>（4）删除容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id# 删除指定的容器(不能删除运行中的容器，加-f强制删除)</span><br><span class="line">docker rm -f $(docker ps -aq)  # 删除所有容器</span><br></pre></td></tr></table></figure><p>（5）启动和停止容器的操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id # 启动容器</span><br><span class="line">docker restart 容器id # 重启容器</span><br><span class="line">docker stop 容器id # 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id # 强制停止当前容器</span><br></pre></td></tr></table></figure><h4 id="4-操作命令"><a href="#4-操作命令" class="headerlink" title="4.操作命令"></a>4.操作命令</h4><p>（1）后台启动命令</p><p>docker容器使用后台运行时（<code>docker run -d centos</code>），必须要有一个前台进程，如果docker发现自己没有应用了，就会自动停止</p><p>（2）查看日志命令</p><p>查看容器运行的日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 容器</span><br></pre></td></tr></table></figure><p>（3）查看容器进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器id</span><br></pre></td></tr></table></figure><p>（4）查看镜像元数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><p>（5）进入当前正在运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令1:进入容器后开启一个新的终端（相当于开启了另一个进程）</span></span><br><span class="line">docker exec -it 容器id bashShell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令2：进入容器正在执行的终端中，不会启动新的进程</span></span><br><span class="line">docker attach 容器id</span><br></pre></td></tr></table></figure><p>（6）从容器中拷贝文件到主机上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 2e18c3e0375a:/home/test.py /home/autovy/桌面</span><br></pre></td></tr></table></figure><p>拷贝是一个手动过程，从封闭的容器中拿到需要留存的数据，而使用数据卷</p><p>则可以实现自动同步</p><h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>推荐文章：<a href="http://linyishui.top/2019101101.html">docker镜像讲解</a></p><h4 id="1-Portainer可视化工具"><a href="#1-Portainer可视化工具" class="headerlink" title="1.Portainer可视化工具"></a>1.Portainer可视化工具</h4><h4 id="2-镜像简介"><a href="#2-镜像简介" class="headerlink" title="2.镜像简介"></a>2.镜像简介</h4><ul><li>镜像就是一种轻量级，可执行的独立软件包，用来打包软件运行环境和基于环境开会的软件（包括代码，运行时，库，环境变量，配置文件）</li><li>镜像来源：<ul><li>从远程仓库下载</li><li>自己制作的镜像DockerFile</li></ul></li></ul><h4 id="3-镜像加载原理"><a href="#3-镜像加载原理" class="headerlink" title="3.镜像加载原理"></a>3.镜像加载原理</h4><p>（1）联合文件系统（UnionFS）</p><p>镜像和容器不同，容器是彼此独立的，而容器是分层叠加的，可以共享相同的底层文件和目录</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846837.webp" alt="img"></p><p>（2）镜像加载原理</p><p>共享底层资源</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846524.png" alt="docker文件系统分层存储原理"></p><h4 id="4-分层理解"><a href="#4-分层理解" class="headerlink" title="4.分层理解"></a>4.分层理解</h4><p>基于Ubuntu Linux 16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。该镜像当前已经包含3个镜像层</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846403.png" alt="基于Ubuntu Linux 16.04创建镜像"></p><p>docker镜像默认只读，当容器启动时，一个新的可写层被加载到镜像顶部</p><p>这一层即为容器层，容器之下称为镜像层</p><h4 id="5-commit镜像"><a href="#5-commit镜像" class="headerlink" title="5.commit镜像"></a>5.commit镜像</h4><p>提交一个新的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的副本</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令和git原理相似</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</span><br></pre></td></tr></table></figure><h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><h4 id="1-数据卷原理"><a href="#1-数据卷原理" class="headerlink" title="1.数据卷原理"></a>1.数据卷原理</h4><p>容器之间有一个数据共享技术，Docker容器中产生的数据，同步到本地（从而实现数据可持久化，数据同步操作，数据存储在本地不会随着容器删除而丢失）</p><p>其本质是将容器内的目录挂载到主机上</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846330.png" alt="数据卷容器实践_heima201907的博客-CSDN博客"></p><h4 id="2-数据卷使用"><a href="#2-数据卷使用" class="headerlink" title="2.数据卷使用"></a>2.数据卷使用</h4><p>（1）使用命令挂载 -v</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录地址:容器目录地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试：将容器的目录挂载到主机目录</span></span><br><span class="line">docker run -it -v /home/test:/home centos /bin/bash</span><br></pre></td></tr></table></figure><ul><li>主机和容器没有对应目录时会自动创建目录</li><li>通过docker inspect 可以查看到挂载信息</li><li>挂载双方是双向同步关系，他们的文件内容无论哪一方更改，都会保持同步</li><li>修改文件时，只需要在本地修改即可，不需要进入容器</li></ul><p>（2）具名挂载和匿名挂载</p><p>除了上文中的指定路径挂载，我们也可以使用具名挂载和匿名挂载</p><p>匿名挂载：<code>-v :容器目录地址</code></p><p>具名挂载：<code>-v 卷名:容器目录地址</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">docker run -d -P --name test1 -v /home/new centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载</span></span><br><span class="line">docker run -d -P --name test1 -v mycentos:/home/new centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有卷(可以看到存在匿名卷)</span></span><br><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><p>所有的docker容器内的卷默认放在本地主机的<code>/var/lib/docker/volumes下</code></p><p>（3）挂载权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以通过 -v 容器路径：ro,rw改变读写权限</span></span><br><span class="line">ro # 只读，只能通过宿主机来操作，容器内部无法进行操作</span><br><span class="line">rw # 可读可写，默认为可读可写</span><br></pre></td></tr></table></figure><h4 id="3-数据卷容器"><a href="#3-数据卷容器" class="headerlink" title="3.数据卷容器"></a>3.数据卷容器</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846812.png" alt="Docker学习过程（5-数据卷）_gengli2017的博客-CSDN博客"></p><p>容器间也可以进行挂载从而实现数据同步，多个子容器的数据可以挂载到一个父容器中，这个父容器就是数据卷容器</p><p>–volumes-from即可以让docker3挂载到docker1上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name docker3 --volumes-from docker1 5ce91af318b3 /bin/bash</span><br></pre></td></tr></table></figure><p>容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止</p><h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><p>参考文章：<a href="https://blog.52itstyle.vip/archives/2839/">DokcerFile命令详解</a></p><h4 id="1-DockerFile简介"><a href="#1-DockerFile简介" class="headerlink" title="1.DockerFile简介"></a>1.DockerFile简介</h4><p>DockerFile是构建docker镜像的构建文件，即命令脚本。通过这个脚本我们可以生成一个镜像。</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846366.png" alt="在这里插入图片描述"></p><h4 id="2-DockerFile构建流程"><a href="#2-DockerFile构建流程" class="headerlink" title="2.DockerFile构建流程"></a>2.DockerFile构建流程</h4><p>（1）DockerFile内容示例</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在构建镜像形成两个数据卷，因为没有指定的挂载卷会自动进行匿名挂载</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----end------&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><p>（2）通过DockerFile文件构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f dockerfile -t test/centos .</span><br></pre></td></tr></table></figure><p>build命令， -f  打开dockerfile文件的路径，-t  test/centos命名容器，.即为生成路径</p><p>（3）用自己的镜像创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it 5ce91af318b3 /bin/bash</span><br></pre></td></tr></table></figure><p>（4）docker push 发布镜像（开源进行）</p><h4 id="3-DockerFile指令详解"><a href="#3-DockerFile指令详解" class="headerlink" title="3.DockerFile指令详解"></a>3.DockerFile指令详解</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846106.png" alt="img"></p><p>（图中最后一项应为CMD指令此处更正）</p><p>补充项：</p><ul><li><p>CMD：指定这个容器启动时要运行的命令，只有最后一个会生效，可被替代</p></li><li><p>ENTRYPOINT：指定这个容器启动时要运行的命令，可以追加命令</p></li><li><p>COPY：类似于ADD，将我们文件拷贝到镜像中</p></li><li><p>ENV：构建的时候设置环境变量</p></li></ul><h4 id="4-创建自己的DockerFile"><a href="#4-创建自己的DockerFile" class="headerlink" title="4.创建自己的DockerFile"></a>4.创建自己的DockerFile</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> Autovy&lt;autovys@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录为/usr/local</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装相关依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开放端口80</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----end------&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><p> 通过<code>docker history mycentos:0.1</code>  命令可以查看构建镜像的过程</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040845042.jpeg&quot; alt=&quot;git&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发工具" scheme="https://autovy.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="开发工具" scheme="https://autovy.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="docker" scheme="https://autovy.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>软考笔记|考前专题复习</title>
    <link href="https://autovy.github.io/2021/05/28/Exam/%E8%BD%AF%E8%80%83-%E4%B8%93%E9%A2%98%E5%A4%8D%E4%B9%A0/"/>
    <id>https://autovy.github.io/2021/05/28/Exam/%E8%BD%AF%E8%80%83-%E4%B8%93%E9%A2%98%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-05-28T06:30:00.000Z</published>
    <updated>2021-09-04T06:12:05.637Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041211195.png" alt="image-20210904121059575"></p><span id="more"></span><h2 id="软考专题复习（上午题）"><a href="#软考专题复习（上午题）" class="headerlink" title="软考专题复习（上午题）"></a>软考专题复习（上午题）</h2><h3 id="1-计算机组成原理"><a href="#1-计算机组成原理" class="headerlink" title="1.计算机组成原理"></a>1.计算机组成原理</h3><h4 id="（1）系统可靠性分析"><a href="#（1）系统可靠性分析" class="headerlink" title="（1）系统可靠性分析"></a>（1）系统可靠性分析</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041201180.png" alt="image-20210513190738916"></p><ul><li>1.串联模型</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041201241.png" alt="image-20210309204541620"></p><ul><li>2.并联模型</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041201763.png" alt="image-20210309204634998"></p><h4 id="（2）海明校验码"><a href="#（2）海明校验码" class="headerlink" title="（2）海明校验码"></a>（2）海明校验码</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041202905.png" alt="image-20210513191206232"></p><ul><li>确定校验码位数，可以用公式<code>2 ^ r &gt;=  信息位数 + r + 1</code>来求</li><li>将选项代入即可求出</li></ul><h4 id="（3）Cache知识点"><a href="#（3）Cache知识点" class="headerlink" title="（3）Cache知识点"></a>（3）Cache知识点</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041202145.png" alt="image-20210513191540921"></p><ul><li><p>它位于CPU和主存之间，由硬件实现；容量小，一般在几KB到几MB之间；速度一般比主存快5到10倍</p></li><li><p>Cache存储器用来存放主存的部分拷贝（副本），无法扩大主存的容量</p></li></ul><h4 id="（4）浮点数运算"><a href="#（4）浮点数运算" class="headerlink" title="（4）浮点数运算"></a>（4）浮点数运算</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041202687.png" alt="image-20210521154057747"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041202491.png" alt="image-20210521154323251"></p><p>对阶是小阶向大阶对齐，尾数右移n位</p><h4 id="（5）流水线相关计算"><a href="#（5）流水线相关计算" class="headerlink" title="（5）流水线相关计算"></a>（5）流水线相关计算</h4><p><strong>流水线时间计算：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041202529.png" alt="image-20210521155616121"></p><ul><li>找执行时间最长的指令作为流水线周期</li><li>套入执行指令的时间公式（t1……tk指各个步骤耗费事件，n指需要执行的指令条数，k指执行指令的步骤个数）</li></ul><p><strong>流水线吞吐率计算：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041202753.png" alt="image-20210521155821047"></p><h4 id="（6）浮点数编码范围"><a href="#（6）浮点数编码范围" class="headerlink" title="（6）浮点数编码范围"></a>（6）浮点数编码范围</h4><p>题目：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041202297.png" alt="image-20210525083130883"></p><p>编码范围：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041202012.png" alt="image-20210308160402815"></p><h4 id="（7）奇偶校验"><a href="#（7）奇偶校验" class="headerlink" title="（7）奇偶校验"></a>（7）奇偶校验</h4><ul><li>奇偶校验只能查错不能纠错</li><li>对于奇偶校验，是由若干位有放信息，再加上一个二进制位（校验位）组成校验码</li><li>奇校验“1”的个数为奇数，而偶校验“1”的个数为偶数，以此校验完整性</li><li>只有奇数个数据位发生错误，才能发现错误</li></ul><h3 id="2-系统安全分析与设计"><a href="#2-系统安全分析与设计" class="headerlink" title="2.系统安全分析与设计"></a>2.系统安全分析与设计</h3><h4 id="（1）加密算法应用"><a href="#（1）加密算法应用" class="headerlink" title="（1）加密算法应用"></a>（1）加密算法应用</h4><ul><li>RSA是一种对称加密算法，而RSA由于效率问题，一般不直接用于大量的明文加密</li><li>SHA-1与MD5属于信息摘要算法,SHA-1与MD5是不能用来加密数据的</li><li>MD5是一种摘要算法，经过处理后生成一个128位散列值</li><li>RC-5属于非对称加空算法，适合加大量的明文加密</li><li>DES是共享密钥加密</li></ul><p>vb</p><h4 id="（2）CA认证"><a href="#（2）CA认证" class="headerlink" title="（2）CA认证"></a>（2）CA认证</h4><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210513193746919.png" alt="image-20210513193746919"></p><p>数字证书的产生：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041202376.png" alt="image-20210513194140782"></p><h3 id="3-法律法规知识"><a href="#3-法律法规知识" class="headerlink" title="3.法律法规知识"></a>3.法律法规知识</h3><h4 id="（1）基本知识"><a href="#（1）基本知识" class="headerlink" title="（1）基本知识"></a>（1）基本知识</h4><ul><li>两人同时授予同一专利权是不可能的</li><li>在合同没有规定的情况下，受托方享有著作权</li><li>职工的职务作品，职工只享有署名权，单位享有著作权（专利）</li></ul><h4 id="（2）知识产权"><a href="#（2）知识产权" class="headerlink" title="（2）知识产权"></a>（2）知识产权</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041202730.png" alt="image-20210525085535372"></p><h3 id="4-多媒体基础"><a href="#4-多媒体基础" class="headerlink" title="4.多媒体基础"></a>4.多媒体基础</h3><h4 id="（1）音频计算"><a href="#（1）音频计算" class="headerlink" title="（1）音频计算"></a>（1）音频计算</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041202098.png" alt="image-20210513195104250"></p><ul><li>如果取样速率大于模拟信号最高频率的2倍，则可以用得到的样本中恢复原来的模拟信号</li><li><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041202627.png" alt="image-20210513195204442"></li></ul><h4 id="（2）图像计算"><a href="#（2）图像计算" class="headerlink" title="（2）图像计算"></a>（2）图像计算</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041202945.png" alt="image-20210513195250383"></p><ul><li><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041202217.png" alt="image-20210513195439014"></li></ul><h3 id="5-软件工程"><a href="#5-软件工程" class="headerlink" title="5.软件工程"></a>5.软件工程</h3><h4 id="（1）结构化开发"><a href="#（1）结构化开发" class="headerlink" title="（1）结构化开发"></a>（1）结构化开发</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203010.png" alt="image-20210513195714334"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203280.png" alt="image-20210513195725203"></p><ul><li><p>扇出是指模块直接调用下级模块的个数（扇出大表示模块复杂度高），扇入是指直接调用该模块的上级模块的个数（扇入大表示模块复用程度高）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203088.png" alt="image-20210513195850913"></p></li></ul><ul><li><p>工作流程如下：</p><ul><li>研究、分析和审查<strong>数据流图</strong></li><li>由数据流图推导出系统的初始结构图（<strong>接口设计</strong>）</li><li>根据分析模型中的实体关系图和数据字典进行<strong>数据设计</strong></li><li>在设计的基础上，依旧分析模型中的加工规格说明、状态转换图进行<strong>过程设计</strong>（主要包含对数据结构和算法的设计）</li></ul></li></ul><p>结构化分析组成：</p><p>结构化方法的分析结果由以下几部分组成:数据流图、数据词典、加工逻辑说明、补充材料（结构图不属于结构化分析的输出）</p><h4 id="（2）项目管理"><a href="#（2）项目管理" class="headerlink" title="（2）项目管理"></a>（2）项目管理</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203688.png" alt></p><p><strong>解题方法：</strong></p><ul><li>gantt图优点：进度时间清晰明了</li><li>gantt图缺点：不能清晰描述任务间的依赖关系</li><li>最少完成时间取决于最长的活动序列（图中最少完成天数为20）</li><li>最早开始时间：正向推理，直接从起点出发分析，如果某个活动取决于两个路径，则取时间最长的做最早开始时间（BD最早开始时间为4，HK最早开始时间为10）</li><li>最晚开始时间：最早完成时间后从最后一个节点开始逆推得最晚开始时间</li><li>松弛时间：指用最少时间（最长的活动序列）减去某活动在的序列长度</li></ul><h4 id="（3）开发模型特点"><a href="#（3）开发模型特点" class="headerlink" title="（3）开发模型特点"></a>（3）开发模型特点</h4><p><a href="https://www.cnblogs.com/liuawen/p/11913603.html">软件开发模型介绍</a></p><p>瀑布模型</p><ul><li>特点： 阶段间具有顺序性和依赖性，推迟实现的观点</li><li>缺点：“瀑布模型是由文档驱动的”,在可运行的软件产品交付给用户之前，用户只能通过文档来了解产品是什么样的。很可能导致最终开发出的软件产品不能真正满足用户的需求</li></ul><p>快速原型模型</p><ul><li>特点：开发人员尽可能快地建造出原型系统，以加速软件开发过程，节约软件开发成本</li><li>优点：有助于保证用户的真实需要得到满足</li></ul><p>增量模型：</p><ul><li>特点：分批地逐步向用户提交产品，每次提交一个满足用户需求子集的可运行的产品</li><li>优点：能在较短时间内向用户提交可完成一些有用的工作的产品，逐步增加产品功能可以使用户有较充裕的时间学习和适应新产品</li></ul><p>螺旋模型：</p><ul><li>特点：解这种模型的一个简便方法，是把它看做在每个阶段之前都增加了风险分析过程的快速原型模型</li><li>优点： 在螺旋模型中维护只是模型的另一个周期，在维护和开发之间并没有本质区别</li><li>螺旋模型主要适用于内部开发的大规模软件项目</li></ul><p>喷泉模型：</p><ul><li>＂喷泉”这个词体现了面向对象软件开发过程迭代和无缝的特性</li></ul><p>演化模型：</p><ul><li>尽量投入使用，并可以再使用过程中不断完善，对于原型模型和演化（迭代）模型，演化模型更合适，原型模型更适用于需求不明确时用以获取需求</li></ul><h4 id="（4）内聚和耦合分析"><a href="#（4）内聚和耦合分析" class="headerlink" title="（4）内聚和耦合分析"></a>（4）内聚和耦合分析</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203112.png" alt="image-20210514082309282"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203993.png" alt="image-20210514082516907"></p><p><strong>内聚</strong></p><p>内聚即模块中各个部件的连接紧密程度，内聚程度越高越好</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203794.png" alt="image-20210329090028450"></p><p><strong>耦合</strong></p><p>耦合即模块间的联系的紧密程度，耦合程度越低越好</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203345.png" alt="image-20210329090217178"></p><p>偶然內聚由于内容都昰不相关的，所以必然导致它与外昦多个模块有关联，这也使得模埉间的耦合廈増加</p><h4 id="（5）软件测试计算"><a href="#（5）软件测试计算" class="headerlink" title="（5）软件测试计算"></a>（5）软件测试计算</h4><p>McCabe测量法    </p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203832.png" alt="image-20210514085901901"></p><p><strong>语句覆盖测试用例计算：</strong></p><p>至少执行程序中的所有语句一次，两条路径即可实现</p><p><strong>路径覆盖测试用例计算：</strong></p><p>执行所有可能得穿过程序得控制流程路径,所有路径覆盖。需要4条路径完成完全覆盖</p><p><strong>判定覆盖测试计算：</strong></p><p>使程序流程图中每一个真假分支至少被执行一次</p><p><strong>环路复杂度计算：</strong></p><p>最简计算方法：闭合环路+1（判断条件个数+1）</p><p>一般计算方法：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203661.png" alt="image-20210514090247799"></p><h4 id="（6）能力成熟度模型集成（CMMI）"><a href="#（6）能力成熟度模型集成（CMMI）" class="headerlink" title="（6）能力成熟度模型集成（CMMI）"></a>（6）能力成熟度模型集成（CMMI）</h4><ul><li>CL0（未完成的）:过程域<strong>未执行</strong></li><li>CL1（已执行的）:其共性目标是过程将可标识的输入工作产品<strong>转换成</strong>可标识的输出工产品</li><li>CL2（已管理的）其共性目标是集中于<strong>已管理</strong>的过程的制度化</li><li>CL3（已定义级的）:其共性目标集中于<strong>已定义</strong>的过程的制度化</li><li>CL4（定量管理的）:其共性目标集中于<strong>可定量管理</strong>的过程的制度化</li><li>CL5（优化的）:使用量化（统计学）手段改变和<strong>优化过程域</strong>，以满足客户的改变和持续改进计划中的过程域的功效</li></ul><h4 id="（7）软件维护"><a href="#（7）软件维护" class="headerlink" title="（7）软件维护"></a>（7）软件维护</h4><p>软考维护有以下类型：</p><ul><li>改正性维护：为了识别和纠正软件错误、改正软件性能上的缺陷</li><li>适应性维护：在使用过程中，外部环境（新的硬、软件配置）、数据环境（数据库、数据格式、数据输入/输岀方式、数据存储介质）可能发生变化。为使软件适应这些变化而进行的修改</li><li>完善性维护：在软件的使用过程中，用户往往会对软件提岀新的功能与性能要求。为了满足这些要求，需要修改或再开发软件，以扩充软件功能、增强软件性能</li><li>预防性维护。这是指预先提髙软件的可维护性、可靠性等，为以后进一步改进软件打下良好基础</li></ul><h3 id="6-编译原理"><a href="#6-编译原理" class="headerlink" title="6.编译原理"></a>6.编译原理</h3><h4 id="（1）正规式"><a href="#（1）正规式" class="headerlink" title="（1）正规式"></a>（1）正规式</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203465.png" alt="image-20210513202920690"></p><ul><li>a|b ：可解析出a或b</li><li>（a|b）*：任意个a,b组合都可以表达出来</li></ul><h4 id="（2）编译过程"><a href="#（2）编译过程" class="headerlink" title="（2）编译过程"></a>（2）编译过程</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203458.png" alt="image-20210513203037685"></p><h4 id="（3）有限自动机状态转换图"><a href="#（3）有限自动机状态转换图" class="headerlink" title="（3）有限自动机状态转换图"></a>（3）有限自动机状态转换图</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203538.png" alt="image-20210514110711386"></p><ul><li>解析态：找一条从起点到终点的路，路上的数值串起来即得到一个解析态</li><li>识别路径：按选项的路径一个个尝试，若能从初态到终态则该选项正确</li></ul><h4 id="（4）语法树分析"><a href="#（4）语法树分析" class="headerlink" title="（4）语法树分析"></a>（4）语法树分析</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203360.png" alt="image-20210514111329550"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203986.png" alt="image-20210514111253610"></p><h3 id="7-操作系统基本原理"><a href="#7-操作系统基本原理" class="headerlink" title="7.操作系统基本原理"></a>7.操作系统基本原理</h3><h4 id="（1）数据传输控制"><a href="#（1）数据传输控制" class="headerlink" title="（1）数据传输控制"></a>（1）数据传输控制</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041203843.png" alt="image-20210513144736846"></p><ul><li>程序控制方式：对读入的每个字，CPU需要对外设状态进行循环检查，直到确定该字已经在I/O控制器的数据寄存器中</li><li>程序中断方式：允许I/O设备主动打断CPU的运行并请求服务，从而“解放”CPU，使得其向I/O控制器发送读命令后可以继续做其他有用的工作</li><li>DMA方式：在程序中断方式中，I/O设备与内存之间的数据交换必须要经过CPU中的寄存器，所以速度还是受限，而DMA（直接存储器存取）方式的基本思想是在I/O设备和内存之间<strong>开辟直接的数据交换通路</strong>，彻底“解放” CPU</li></ul><h4 id="（2）位示图计算"><a href="#（2）位示图计算" class="headerlink" title="（2）位示图计算"></a>（2）位示图计算</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204170.png" alt="image-20210513203333599"></p><ul><li><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204312.png" alt="image-20210513203438697"></p></li><li><p>位示图的每一位都表示一个磁盘块的使用情况</p></li><li><p>物理块数 / 字长即可得需要的字的个数</p></li><li><p>求字的编号即为（物理号+1） /  字长</p></li></ul><h4 id="（3）死锁问题计算"><a href="#（3）死锁问题计算" class="headerlink" title="（3）死锁问题计算"></a>（3）死锁问题计算</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204209.png" alt="image-20210513203908025"></p><ul><li>每个进程都分配到资源数（n-1），最后还剩下一个资源逐个等待分配</li><li>所以总不发生死锁的资源是 每个进程所需（资源数-1）之和 加1</li></ul><h4 id="（4）页式存储地址换算"><a href="#（4）页式存储地址换算" class="headerlink" title="（4）页式存储地址换算"></a>（4）页式存储地址换算</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204720.png" alt="image-20210513204201718"></p><ul><li><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210513211105549.png" alt="image-20210513211105549"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204714.png" alt="image-20210313100151803"></p></li></ul><h4 id="（5）前趋图"><a href="#（5）前趋图" class="headerlink" title="（5）前趋图"></a>（5）前趋图</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204402.png" alt="image-20210513211328449"></p><ul><li>V操作可以唤醒P操作（等待的一方会有一个P操作，等待另一个进程的V操作触发）</li><li>箭头指向为V，箭头起始点为P，牢记这点即可解决这类问题（P 操作—&gt; 进程 运行—&gt; V操作）</li></ul><h4 id="（6）进程管理与PV操作"><a href="#（6）进程管理与PV操作" class="headerlink" title="（6）进程管理与PV操作"></a>（6）进程管理与PV操作</h4><p><strong>题目分析：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204893.png" alt="image-20210521163208973"></p><p>信息量应当为单元数，题目是以某日某趟车位一个单元</p><p>（a）是申请资源所以为p操作，（b）（c）都是释放资源所以为V操作</p><p><strong>PV操作原理：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204857.png" alt="image-20210521163135429"></p><p>生产者先P(s1)再V(s2)，而消费者相反，这让保证了放入和取出都不会出错</p><h4 id="（8）PV操作与前驱图分析"><a href="#（8）PV操作与前驱图分析" class="headerlink" title="（8）PV操作与前驱图分析"></a>（8）PV操作与前驱图分析</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204353.png" alt="image-20210526104321660"></p><ul><li>根据前驱图可以分析：P1不需要前趋唤醒，而其参与唤醒后续P2，P3（所以p1运行前不需要写P操作，而其V操作唤醒后续的P操作）</li><li>解题时可以对应前驱图找到前驱与后续，对应PV操作的信号量</li><li>信号量的标注两个P编号值的和从大到小对应计算（也可以从左到右，从上到下）</li></ul><h4 id="（7）I-O设备管理"><a href="#（7）I-O设备管理" class="headerlink" title="（7）I/O设备管理"></a>（7）I/O设备管理</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204002.png" alt="image-20210521163731406"></p><h3 id="8-面向对象"><a href="#8-面向对象" class="headerlink" title="8.面向对象"></a>8.面向对象</h3><h4 id="（1）UML图分析"><a href="#（1）UML图分析" class="headerlink" title="（1）UML图分析"></a>（1）UML图分析</h4><p><strong>用例图：</strong></p><ul><li>包含关系（extend）</li><li>扩展关系（include）</li><li>泛化关系</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204450.png" alt="image-20210411075016076"></p><p><strong>类图与对象图：</strong></p><p>类图是描述系统中的类，以及各个类之间的关系的静态视图</p><ul><li><p>填类名</p></li><li><p>填多重度</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204491.png" alt="image-20210411075231497"></p></li><li><p>填关系</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204985.png" alt="image-20210411075347236"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204847.png" alt="image-20210514092707554"></p><p><strong>通信图:</strong></p><ul><li><p>通信图由三部分组成：对象（Object），链（Link） 和消息（Message）</p></li><li><p>对象即类的实例 其中aOrder表示实例名，Order表示类名</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204194.png" alt="image-20210514093533116"></p></li><li><p>链的两端是消息发送者和消息接收者</p></li><li><p>通信图是通过一系列的消息来描述系统的动态行为</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204085.png" alt="image-20210514093813668"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204153.png" alt="image-20210411080106182"></p><h4 id="（2）-设计模式分析"><a href="#（2）-设计模式分析" class="headerlink" title="（2）*设计模式分析"></a>（2）*设计模式分析</h4><p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html">图解设计模式</a></p><p><strong>各模式特点：</strong></p><p>创建型</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204955.png" alt="image-20210401075331145"></p><p>结构型</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204504.png" alt="image-20210514100625028"></p><p>组合型</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041204249.png" alt="image-20210514100645295"></p><p><strong>观察者模式：</strong></p><ul><li>建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应做出反应</li><li>发生改变的对象称为观察目标，而被通知的对象称为观察者</li><li>观察者将自己注册到事件，那么具体的事件就知道了自己的观察者</li><li>观察者和事件都有自己的抽象，当实现具体的观察者和事件的时侯都要实现相应接口，所以对扩展是开放的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041205144.png" alt="image-20210514095245429"></p><p><strong>状态模式：</strong></p><ul><li>允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041205041.png" alt="image-20210514110457412"></p><h4 id="（3）基础知识"><a href="#（3）基础知识" class="headerlink" title="（3）基础知识"></a>（3）基础知识</h4><p><strong>状态与行为：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041205690.png" alt="image-20210521171208234"></p><p><strong>多态含义：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041205169.png" alt="image-20210521171249312"></p><p><strong>多态类型：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041205290.png" alt="image-20210526115031968"></p><h3 id="9-数据库系统"><a href="#9-数据库系统" class="headerlink" title="9.数据库系统"></a>9.数据库系统</h3><h4 id="（1）封锁协议"><a href="#（1）封锁协议" class="headerlink" title="（1）封锁协议"></a>（1）封锁协议</h4><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041205419.png" alt="image-20210514111808165" style="zoom:200%;"><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041205795.png" alt="image-20210514113124096"></p><h4 id="（2）求键"><a href="#（2）求键" class="headerlink" title="（2）求键"></a>（2）求键</h4><p><strong>键的关系：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041205000.png" alt="image-20210514113801142"></p><p><strong>求候选键：</strong></p><p>只展示快捷方法</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041205088.png" alt="image-20210514114033872"></p><h4 id="（3）E-R模型分析"><a href="#（3）E-R模型分析" class="headerlink" title="（3）E-R模型分析"></a>（3）E-R模型分析</h4><p><strong>E-R模型组成：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041205082.png" alt="image-20210514115025317"></p><p><strong>联系类型：</strong></p><ul><li><p>分析联系模式</p></li><li><p>一个实体型转换为一个关系模式</p></li><li><p>关系模式个数：一对一型最少的情况为实体数，一对多型最少的情况为实体数，多对多型最少的情况为（实体数 +联系数） </p></li></ul><h4 id="（4）sql语句"><a href="#（4）sql语句" class="headerlink" title="（4）sql语句"></a>（4）sql语句</h4><ul><li>查询条件where与Hng的区别要弄清楚Whee是针对单条记录的判断条件，而 Having是针对分组之后的判断条件</li></ul><h4 id="（5）函数依赖推导"><a href="#（5）函数依赖推导" class="headerlink" title="（5）函数依赖推导"></a>（5）函数依赖推导</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206562.png" alt="image-20210521172502814"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206153.png" alt="image-20210521172552945"></p><h4 id="（6）-关系代数表达式"><a href="#（6）-关系代数表达式" class="headerlink" title="（6）*关系代数表达式"></a>（6）*关系代数表达式</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206108.png" alt="image-20210521175255727"></p><p><strong>关系代数的9种操作：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206148.png" alt="image-20210521175510573"></p><h3 id="10-数据结构"><a href="#10-数据结构" class="headerlink" title="10.数据结构"></a>10.数据结构</h3><h4 id="（1）-图邻接矩阵"><a href="#（1）-图邻接矩阵" class="headerlink" title="（1）*图邻接矩阵"></a>（1）*图邻接矩阵</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206195.png" alt="image-20210521153841784"></p><p>邻接矩阵有n*n个点，都需要被遍历</p><h4 id="（2）顺序储存二叉树"><a href="#（2）顺序储存二叉树" class="headerlink" title="（2）顺序储存二叉树"></a>（2）顺序储存二叉树</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206896.png" alt="image-20210521174323106"></p><p>空节点也会按顺序存进数组中</p><h3 id="11-算法运用"><a href="#11-算法运用" class="headerlink" title="11.*算法运用"></a>11.*算法运用</h3><h4 id="（1）动态规划法案例"><a href="#（1）动态规划法案例" class="headerlink" title="（1）动态规划法案例"></a>（1）动态规划法案例</h4><p>这类题跳过文字分析图像，找到突破点，然后再看文字分析</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206169.png" alt="image-20210514160327149"></p><p>最短路线为：S11 -&gt; S22 -&gt; S13 （长度为 3+4+1+5+2+3+3 = 21 ）</p><p><strong>动态规划法：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206257.png" alt="image-20210411083609174"></p><p>动态规划法会把问题拆成多个子问题，然后会有查表步骤</p><h4 id="（2）其他算法策略"><a href="#（2）其他算法策略" class="headerlink" title="（2）其他算法策略"></a>（2）其他算法策略</h4><p><strong>分治法：</strong></p><p>分治法-&gt;递归技术</p><p>（1）分治法使用要求：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206763.png" alt="image-20210411081822777"></p><p>分治法的基本运用：二分查找。快速排序</p><p><strong>回溯法：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206786.png" alt="image-20210411082526821"></p><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210411082644241.png" alt="image-20210411082644241"></p><p>回溯法通过不断回溯参数，把所有可能性都尝试一遍直到</p><p><strong>贪心法：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206473.png" alt="image-20210411083313668"></p><p>在有限时间找到满意的解（找不到最优解，找到每一步的局部最优解）</p><p>通过递归地解决这些子问题然后再将这些子问题的解组合成原问题的解。</p><h3 id="12-计算机网络"><a href="#12-计算机网络" class="headerlink" title="12.计算机网络"></a>12.计算机网络</h3><h4 id="（1）域名解析过程"><a href="#（1）域名解析过程" class="headerlink" title="（1）域名解析过程"></a>（1）域名解析过程</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206064.png" alt="image-20210514160917608"></p><ul><li>本地服务器一般采用递归查询，对客户端负责到底，直到查到结果</li><li>其他域名服务器一般会用迭代查询，不断踢皮球</li></ul><h4 id="（2）分层设计分析"><a href="#（2）分层设计分析" class="headerlink" title="（2）分层设计分析"></a>（2）分层设计分析</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206570.png" alt="image-20210514161610892"></p><ul><li>不同层的设备与协议<br><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206240.png" alt="image-20210514161305972"></li></ul><ul><li><p>通过网络层及以上设备连接的计算机不在同一局域网</p></li><li><p>通过数据链路层或物理层的设备连接的计算机在同一局域网中</p></li></ul><h4 id="（3）网络安全管理"><a href="#（3）网络安全管理" class="headerlink" title="（3）网络安全管理"></a>（3）网络安全管理</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206962.png" alt="image-20210521160221698"></p><h4 id="（4）网络攻击分类"><a href="#（4）网络攻击分类" class="headerlink" title="（4）网络攻击分类"></a>（4）网络攻击分类</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206796.png" alt="image-20210318211044069"></p><h2 id="软考专题复习（下午题）"><a href="#软考专题复习（下午题）" class="headerlink" title="软考专题复习（下午题）"></a>软考专题复习（下午题）</h2><h3 id="1-数据流图分析"><a href="#1-数据流图分析" class="headerlink" title="1.数据流图分析"></a>1.数据流图分析</h3><h4 id="（1）分析实体"><a href="#（1）分析实体" class="headerlink" title="（1）分析实体"></a>（1）分析实体</h4><ul><li><p>上下文流图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041206162.png" alt="image-20210516111959965"></p></li><li><p>分析实体需要结合文字和上下文流图（外部实体也包括系统外的子系统）</p></li><li><p>先寻找题目文字中有哪些实体，然后看实体发出和接受的数据，然后即可和数据流图对应起来</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041207746.png" alt="image-20210516112540903"></p></li></ul><h4 id="（2）分析存储数据"><a href="#（2）分析存储数据" class="headerlink" title="（2）分析存储数据"></a>（2）分析存储数据</h4><ul><li><p>0层数据流图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041207471.png" alt="image-20210516112306633"></p></li></ul><ul><li><p>主要看0层数据流图中输入和输出的信息，然后结合文字确定信息在题干中的名称（一般是数据名+表这种形式）</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041207016.png" alt="image-20210516112548314"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041207641.png" alt="image-20210407213739002"></p></li></ul><h4 id="（3）寻找缺少数据流"><a href="#（3）寻找缺少数据流" class="headerlink" title="（3）寻找缺少数据流"></a>（3）寻找缺少数据流</h4><ul><li><p>题目往往需要我们在0层数据流图中补充缺失的数据流</p></li><li><p>以和加工元素为起点（P操作）分析题干文本，分析数据流是否齐全</p></li><li><p>缺少的数据流有三种类型：P-E  P-P  P-D</p></li><li><p>往往容易忽略的数据流类型为P-P，可以理解为数据经过一个加工后，又被传到另一个加工进行进一步的加工</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041207720.png" alt="image-20210516115805196"></p></li><li><p>保持数据流图平衡</p><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210516143418916.png" alt="image-20210516143418916"></p></li></ul><h3 id="2-E-R模型分析"><a href="#2-E-R模型分析" class="headerlink" title="2*.E-R模型分析"></a>2*.E-R模型分析</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041207329.png" alt="image-20210516144214005"></p><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210516144128568.png" alt="image-20210516144128568"></p><h4 id="（1）分析实体及联系类型"><a href="#（1）分析实体及联系类型" class="headerlink" title="（1）分析实体及联系类型"></a>（1）分析实体及联系类型</h4><ul><li><p>实体间联系类型</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041207457.png" alt="image-20210408074731356"></p></li><li><p>寻找题目与“签约”相关文本，可得到签约涉及的三个实体：经理，租客，公寓。其中合同中经理只有一个，而租客和公寓都是多个，可得到联系类型</p></li></ul><h4 id="（2）分析关系模式"><a href="#（2）分析关系模式" class="headerlink" title="（2）分析关系模式"></a>（2）分析关系模式</h4><ul><li>补全关系模式需要分析文本中相关的字段（即对象属性）</li><li>根据题目中列出的实体找出其所有属性即可</li></ul><h4 id="（3）新增联系"><a href="#（3）新增联系" class="headerlink" title="（3）新增联系"></a>（3）新增联系</h4><ul><li><p>增加一个新的联系类型，需要我们补充其与各个实体间的关系，与（1）（2）是一个逆过程</p></li><li><p>提取与维修相关的关键对象“维修工维修公寓”，补充E-R图</p></li><li><p>题干中没有指明联系类型，可根据实际情况，多个维修工对应多个公寓</p></li><li><p>根据E-R图得到新的关系模式“维修情况”，然后将E-R图转换为关系模式（关键在于找到各相关实体的键）</p><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210516150231262.png" alt="image-20210516150231262"></p></li><li><p>E-R图转关系模式方法：<a href="https://blog.csdn.net/gaoying_blogs/article/details/16843515?ops_request_misc={" request_id"%3a"161570558016780255285810"%2c"scm"%3a"20140713.130102334.pc_all."}&request_id="161570558016780255285810&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-2-16843515.first_rank_v2_pc_rank_v29&utm_term=E-R模型"">E-R模型转化成关系模型</a></p></li></ul><h3 id="3-UML图分析"><a href="#3-UML图分析" class="headerlink" title="3.*UML图分析"></a>3.*UML图分析</h3><h4 id="（1）设计类分类"><a href="#（1）设计类分类" class="headerlink" title="（1）设计类分类"></a>（1）设计类分类</h4><ul><li>实体类：对必须存储信息和相关行为建模的类型（例如:事件、人员或者一些现实生活中的对象。实体类通常都是永久性的，它们所具有的属性和关系是长期需要的，关键词：<strong>储存</strong>，<strong>配置</strong>）</li><li>接口类：边界类是系统内部与系统外部的业务主角之间进行交互建模的类（接口类会随着外部环境变化而变化，往往与某种操作相关，关键词：<strong>显示</strong>，<strong>调用</strong>，<strong>发送</strong>）</li></ul><h4 id="（2）类图分析"><a href="#（2）类图分析" class="headerlink" title="（2）类图分析"></a>（2）类图分析</h4><ul><li><p>题目往往要求分析设计用例补充类图中的类名</p></li><li><p>类图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041207696.png" alt="image-20210516153900737"></p></li><li><p>类图中关系</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041207673.png" alt="image-20210411075347236"></p><p><strong>关联关系：</strong>如果没有箭头，则表明为双向对的关联关系（关联关系默认不强调方向，表示对象间相互知道，例如：乘车人和车票之间就是一种关联关系）</p></li></ul><p>  <strong>泛化关系：</strong>泛化关系实质是类的继承（表现为继承非抽象类，例如：汽车与SUV之间为泛化关系，箭头指向父类）</p><p>​        <strong>实现关系：</strong>实现关系实质也是类的继承（表现为继承抽象类，        箭头指向父类）</p><p>​        <strong>依赖关系：</strong>描述一个对象在运行期间会用到另一个对象的关系        （箭头的指向为调用关系）</p><ul><li><p>类图多重性</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041207176.png" alt="image-20210411075231497"></p></li></ul><ul><li>找到未知类与其他类的关系，通过用例文字推理（如：配置信息与x1，x2，x3都有关联，则它们都是配置信息抽象出的类，然后再看它们和其他类的关系）</li></ul><h4 id="（3）状态图分析"><a href="#（3）状态图分析" class="headerlink" title="（3）状态图分析"></a>（3）状态图分析</h4><ul><li><p>状态图相关元素</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041207689.png" alt="image-20210516160923020"></p><p>状态转移的线上文字即状态转移的文字</p></li></ul><ul><li><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041207393.png" alt="image-20210516160733494"></li></ul><ul><li>题目往往要求补充状态，主要根据状态转移条件结合文本提到的相关状态触发流程分析即可</li></ul><h3 id="4-C语言程序分析"><a href="#4-C语言程序分析" class="headerlink" title="4.C语言程序分析"></a>4.C语言程序分析</h3><ul><li><p>以函数为单位分析，找出函数调用情况</p></li><li><p>程序代码补充，尽量不写重复代码。上下文可能会有对称的代码</p></li><li><p>搞明白填写处要实现的功能</p></li><li><p>算法策略：</p><ul><li>动态规划法会把问题拆成多个子问题，然后会有查表步骤</li><li>分治法的基本运用：二分查找。快速排序</li><li>回溯法通过不断回溯参数，吧所有可能性都尝试一遍直到</li><li>在有限时间找到满意的解，即局部的最优解（找不到最优解）</li></ul></li><li><p>时间复杂度分析（建议跳过）</p></li><li><p>程序运行输入输出，可以不看代码，而是从文字中提取出算法实现分析</p></li></ul><h3 id="5-C-程序分析"><a href="#5-C-程序分析" class="headerlink" title="5.C++程序分析"></a>5.C++程序分析</h3><ul><li><p>以对象为单位分析，可以结合类图分析程序</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041207178.png" alt="image-20210516194903836"></p></li><li><p>C++特点：</p><ul><li>权限修饰符：public:+属性/方法</li><li>c++中当定义类对象是指针对象时候，就需要用到 <strong>“-&gt;”</strong> 指向类中的成员；当定义一般对象时候时就需要用到 <strong>“.”</strong> 指向类中的成员</li><li>C++中要重写的方法往往用virtual虚函数修饰，有抽象之意</li><li>C++的继承：<code>class Dog : public Animal</code>表示Dog继承Animal</li></ul></li></ul><ul><li><p>从图可得PizzaBuilder缺少buildPart方法，由可以看到PizzaBuilder的子类重写了buildPart，所以可以参照重写的方法补充，因为作为抽象类所有是一个空方法<code>virtual void build Parts</code></p></li><li><p>补充类内方法中的代码：观察输入参数，观察上下文调用，观察类内属性</p></li><li><p>主函数中观察上下文生成的对象，确认需要调用的方法</p></li></ul><h3 id="6-Java程序分析"><a href="#6-Java程序分析" class="headerlink" title="6*.Java程序分析"></a>6*.Java程序分析</h3><ul><li><p>与C++类似，需要用面向对象的方法结合类图进行分析</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041207628.png" alt="image-20210516202909167"></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041211195.png&quot; alt=&quot;image-20210904121059575&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="考试笔记" scheme="https://autovy.github.io/categories/%E8%80%83%E8%AF%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="软考笔记" scheme="https://autovy.github.io/tags/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
      <category term="考试相关" scheme="https://autovy.github.io/tags/%E8%80%83%E8%AF%95%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>软考笔记|知识点全集收录</title>
    <link href="https://autovy.github.io/2021/05/22/Exam/%E8%BD%AF%E8%80%83-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%94%B6%E5%BD%95/"/>
    <id>https://autovy.github.io/2021/05/22/Exam/%E8%BD%AF%E8%80%83-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%94%B6%E5%BD%95/</id>
    <published>2021-05-22T06:30:00.000Z</published>
    <updated>2021-09-04T07:59:58.373Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041216019.png" alt="image-20210904121613781"></p><span id="more"></span><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="七层模型"><a href="#七层模型" class="headerlink" title="七层模型"></a>七层模型</h3><h4 id="1-局域网与广域网差异"><a href="#1-局域网与广域网差异" class="headerlink" title="1.局域网与广域网差异"></a>1.局域网与广域网差异</h4><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041137786.png" alt="image-20210306191127428"></p><p><strong>解题步骤：</strong></p><ul><li><p>分析那两台计算机属于同一个局域网</p></li><li><p>Q和R通过物理层的集线器连接，在同一局域网</p></li><li><p>P和Q,R通过数据链路层的网桥连接，在同一局域网</p></li><li><p>S和T通过物理层的交换机连接，在同一局域网</p></li><li><p>P和S,T通过网络层的路由器连接，不在同一局域网，所以只能在局域网进行的广播无法联系这两组成员，所以答案为B</p></li></ul><p><strong>笔记：</strong></p><ul><li><p>广播是在同一局域网内计算机传播信息的方法</p></li><li><p>通过网络层的设备让局域网连接上互联网</p></li><li><p>不同层的设备与协议</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041137287.png" alt="image-20210306192055182"></p></li></ul><h3 id="网络技术标准与协议"><a href="#网络技术标准与协议" class="headerlink" title="网络技术标准与协议"></a>网络技术标准与协议</h3><h4 id="1-DNS协议"><a href="#1-DNS协议" class="headerlink" title="1.DNS协议"></a>1.DNS协议</h4><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041137257.png" alt="image-20210306193542004"></p><p><strong>解题步骤：</strong></p><ul><li>观察DNS服务器关系，对查询负责到底，还会主动询问其他服务器反馈结果的是递归查询（如图本地域名服务器和中介域名服务器）</li><li>不主动询问其他服务器，而是把知道域名对应关系的服务器信息告诉给本地域名服务器，让它去访问，这时迭代查询</li></ul><p><strong>笔记：</strong></p><ul><li><p>本地服务器一般采用递归查询，对客户端负责到底，直到查到结果</p></li><li><p>其他域名服务器一般会用迭代查询，不断踢皮球</p></li></ul><h3 id="网络规划和设计"><a href="#网络规划和设计" class="headerlink" title="网络规划和设计"></a>网络规划和设计</h3><h4 id="1-分层设计"><a href="#1-分层设计" class="headerlink" title="1.分层设计"></a>1.分层设计</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041137296.png" alt="image-20210306195501191"></p><h3 id="IP地址与子网划分"><a href="#IP地址与子网划分" class="headerlink" title="IP地址与子网划分"></a>IP地址与子网划分</h3><h4 id="1-子网划分（已知子网个数）"><a href="#1-子网划分（已知子网个数）" class="headerlink" title="1.子网划分（已知子网个数）"></a>1.子网划分（已知子网个数）</h4><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041137272.png" alt="image-20210307095029964"></p><p><strong>解题步骤：</strong></p><ul><li>将IP地址转为二进制，按分类获得初始的网络号，对应子网掩码为1（本题为B类，则前16位为初始的网络号）</li><li>划分子网时，需要取部分主机号当作子网号，因<code>2 ^ 5 &gt; 27</code>,则还需要取5个主机号，对应子网掩码为1</li><li>最后再将子网掩码转成十进制</li><li><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041137576.png" alt="image-20210307094820312"></li></ul><p><strong>笔记：</strong></p><ul><li><p>子网掩码基本概念</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041137471.png" alt="image-20210307094031854"></p></li><li><p>A类IP地址前8个为网络号，B类IP地址前16个为网络号，C类IP地址前24个为网络号（一共32个编号，去掉网络号，剩下的为主机号）</p></li></ul><h4 id="2-子网划分（已知主机数）"><a href="#2-子网划分（已知主机数）" class="headerlink" title="2.子网划分（已知主机数）"></a>2.子网划分（已知主机数）</h4><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041137186.png" alt="image-20210307095210384"></p><ul><li>将IP地址转为二进制，按分类获得初始的网络号，对应子网掩码为1（本题为B类，则前16位为初始的网络号）</li><li>已知每个子网内主机个数有700台，即需要主机号个数大于700；因有<code>2 ^ 10 - 2 &gt; 700</code>，则 有主机号要有10位</li><li>最后再将子网掩码转成十进制</li><li><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041137491.png" alt="image-20210307095545832"></li></ul><h4 id="3-无分类编址"><a href="#3-无分类编址" class="headerlink" title="3.无分类编址"></a>3.无分类编址</h4><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041137050.png" alt="image-20210307095750040"></p><p><strong>解题步骤：</strong></p><ul><li>可以有20个网络号，还有12个为主机号，网络号相同的主机即可说明在同一子网</li><li>C类子网前面24个为网络号，该公司中用了20个作为网路号，则剩下4个用于子网的网络号</li><li>4个子网号，可以得到<code>2 ^ 4 = 16</code> ，可以有16个子网</li></ul><p><strong>笔记：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041137616.png" alt="image-20210307100306416"></p><h4 id="4-特殊IP地址"><a href="#4-特殊IP地址" class="headerlink" title="4.特殊IP地址"></a>4.特殊IP地址</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041138358.png" alt="image-20210307100907310"></p><h2 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h2><h3 id="数据的表示"><a href="#数据的表示" class="headerlink" title="数据的表示"></a>数据的表示</h3><h4 id="1-进制转换"><a href="#1-进制转换" class="headerlink" title="1.进制转换"></a>1.进制转换</h4><p>（1）十进制转二进制（短除法）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041138089.png" alt="image-20210308154845157"></p><p>（2）二进制转八进制，十六进制（分割法）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041138576.png" alt="image-20210308154929141"></p><h4 id="2-编码问题"><a href="#2-编码问题" class="headerlink" title="2.编码问题"></a>2.编码问题</h4><p> <strong>题目:</strong><br><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041138921.png" alt="image-20210308155706170"></p><p><strong>笔记：</strong></p><ul><li><p>数值的二进制编码有八位，第一位作为符号位，符号位为0为正数，符号位为1为负数</p></li><li><p>正数的原码，反码，补码相等，补码符号位取反得移码</p></li><li><p>负数的原码在正数的基础上把符号位改成1；负数原码符号位不变，其他位取反即可得反码；反码加1得补码，补码符号位取反得移码</p></li><li><p>运算中，应该使用补码和移码进行运算</p></li><li><p>数值表示范围</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041138609.png" alt="image-20210308160402815"></p></li></ul><h4 id="3-浮点数运算"><a href="#3-浮点数运算" class="headerlink" title="3.浮点数运算"></a>3.浮点数运算</h4><p><strong>解题步骤：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041138471.png" alt="image-20210308162314904"></p><p><strong>笔记：</strong></p><ul><li>对阶的时候，低价转向高阶</li><li>结果格式化即保证小数点前的数不为0且小于10</li></ul><h3 id="计算机结构"><a href="#计算机结构" class="headerlink" title="计算机结构"></a>计算机结构</h3><h4 id="1-主机结构图"><a href="#1-主机结构图" class="headerlink" title="1.主机结构图"></a>1.主机结构图</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041138991.png" alt="image-20210308163334215"></p><h4 id="2-计算机体系结构分类法——Flynn"><a href="#2-计算机体系结构分类法——Flynn" class="headerlink" title="2.计算机体系结构分类法——Flynn"></a>2.计算机体系结构分类法——Flynn</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041138103.png" alt="image-20210308163719991"></p><h3 id="计算机指令"><a href="#计算机指令" class="headerlink" title="计算机指令"></a>计算机指令</h3><h4 id="1-指令系统比较"><a href="#1-指令系统比较" class="headerlink" title="1.指令系统比较"></a>1.指令系统比较</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041138291.png" alt></p><h3 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h3><h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041138336.png" alt="image-20210308164610404"></p><h4 id="2-流水线计算"><a href="#2-流水线计算" class="headerlink" title="2.流水线计算"></a>2.流水线计算</h4><p> <strong>题目：</strong><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041138537.png" alt="image-20210308165648795"></p><p><strong>解题步骤：</strong></p><ul><li>找执行时间最长的指令作为流水线周期</li><li>套入执行指令的时间公式（t1……tk指各个步骤耗费事件，n指需要执行的指令条数，k指执行指令的步骤个数）</li></ul><h4 id="3-流水线吞吐率计算"><a href="#3-流水线吞吐率计算" class="headerlink" title="3.流水线吞吐率计算"></a>3.流水线吞吐率计算</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041138482.png" alt="image-20210308170423685"></p><h4 id="4-流水线加速比"><a href="#4-流水线加速比" class="headerlink" title="4.流水线加速比"></a>4.流水线加速比</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041138523.png" alt="image-20210308170615554"></p><h4 id="5-流水线的效率"><a href="#5-流水线的效率" class="headerlink" title="5.流水线的效率"></a>5.流水线的效率</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041138864.png" alt="image-20210308170745307"></p><ul><li>n个任务占用的时空区：（所有步骤执行花费时间和）* n</li><li>k个流水线的总的时空区：流水线花费时间 * k</li></ul><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><h4 id="1-层次化存储结构"><a href="#1-层次化存储结构" class="headerlink" title="1.层次化存储结构"></a>1.层次化存储结构</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041139642.png" alt="image-20210308172202705"></p><h4 id="2-Cache基本内容"><a href="#2-Cache基本内容" class="headerlink" title="2.Cache基本内容"></a>2.Cache基本内容</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041139617.png" alt="image-20210308173547113"></p><ul><li>t3：系统平均周期</li><li>h：Cache访问命中率</li><li>t2：主存储器周期时间</li><li>t1：Cache周期时间</li></ul><h4 id="3-局部性原理"><a href="#3-局部性原理" class="headerlink" title="3.局部性原理"></a>3.局部性原理</h4><p>参考博文：<a href="https://blog.csdn.net/iva_brother/article/details/80463702?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161520232616780261983624%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=161520232616780261983624&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~hot_rank-2-80463702.pc_v1_rank_blog_v1&amp;utm_term=%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86">https://blog.csdn.net/iva_brother/article/details/80463702?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161520232616780261983624%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=161520232616780261983624&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~hot_rank-2-80463702.pc_v1_rank_blog_v1&amp;utm_term=%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86</a></p><h3 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h3><h4 id="1-分类"><a href="#1-分类" class="headerlink" title="1.分类"></a>1.分类</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041139728.png" alt="image-20210308192530991"></p><h4 id="2-编址"><a href="#2-编址" class="headerlink" title="2.编址"></a>2.编址</h4><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041139025.png" alt="image-20210308192610605"></p><p><strong>解题步骤：</strong></p><ul><li><p>地址单元数 = 内存地址之差 + 1</p></li><li><p>K = 1024</p></li><li><p>112K * 16 = 28 * X，求X即为所得</p></li></ul><h3 id="磁盘结构与参数"><a href="#磁盘结构与参数" class="headerlink" title="磁盘结构与参数"></a>磁盘结构与参数</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041139722.png" alt="image-20210308202506958"></p><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041139449.png" alt="image-20210309202746496">  </p><p><strong>解题过程：</strong></p><ul><li><p>最长的情况：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041139088.png" alt="image-20210309203546207"></p></li><li><p>由于磁头读取完数据后，数据要花3ms的时间来处理，由于是单缓存区，下个数据没地方处理，所以磁盘要转完一圈回来读取下个数据</p></li><li><p>（33 + 3 ）* 10 + 6 = 366</p></li><li><p>最优情况，信息处理完的同时，磁头转到的下个数据头处，只需要转两圈即可读取所有数据f</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041139401.png" alt="image-20210309203623231"></p></li></ul><h3 id="计算机总线"><a href="#计算机总线" class="headerlink" title="计算机总线"></a>计算机总线</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041139991.png" alt="image-20210309204026006"></p><h3 id="系统可靠性分析"><a href="#系统可靠性分析" class="headerlink" title="系统可靠性分析"></a>系统可靠性分析</h3><p>R为失效率</p><h4 id="1-串联模型"><a href="#1-串联模型" class="headerlink" title="1.串联模型"></a>1.串联模型</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041139281.png" alt="image-20210309204541620"></p><h4 id="2-并联模型"><a href="#2-并联模型" class="headerlink" title="2.并联模型"></a>2.并联模型</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041139352.png" alt="image-20210309204634998"></p><h4 id="3-模冗余系统与混合模型"><a href="#3-模冗余系统与混合模型" class="headerlink" title="3.模冗余系统与混合模型"></a>3.模冗余系统与混合模型</h4><p>冗余模型，多个模块进行同样计算，取多数的运算结果作为最终结果</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041139393.png" alt="image-20210309204934942"></p><h3 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h3><h4 id="1-检错和纠错机制"><a href="#1-检错和纠错机制" class="headerlink" title="1.检错和纠错机制"></a>1.检错和纠错机制</h4><p>码距：整个编码系统中任意两个码字的最小距离</p><p>提高码距可以提高达到检错，纠错的效果</p><h4 id="2-循环校验码CRC"><a href="#2-循环校验码CRC" class="headerlink" title="2.循环校验码CRC"></a>2.循环校验码CRC</h4><p>在传输数据后面加上一串校验码，用来检验数据</p><p>（1）模2除法（按位做异或操作）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041139282.png" alt="image-20210309210000564"></p><p>（2）题目</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041139695.png" alt="image-20210309210210553"></p><p>（3）解题步骤</p><ul><li><p>生成多项式转成二进制形式，看对应二进制位是0还是1（11011）</p></li><li><p>进行编码时在原始报文后面加（多项式二进制位数-1）个0</p></li><li><p>进行模二运算后得到的余数即为CRC</p></li><li><p>CRC代替上一加入的0，最后生成编码后的报文</p></li></ul><h4 id="3-海明校验码"><a href="#3-海明校验码" class="headerlink" title="3.海明校验码"></a>3.海明校验码</h4><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041140026.png" alt="image-20210309211131147"></p><p><strong>解题步骤：</strong></p><ul><li>确定校验码位数，可以用公式<code>2 ^ r &gt;=  信息位数 + r + 1</code>来求</li><li>校验码的填入位置为2的n次方</li><li>填入信息位</li><li>下面计算校验码的内容</li><li>将位数转换成2进制相加的形式，再把它们涉及到的信息位做异或操作得对应校验位</li><li>下面时纠错机制</li><li>正确校验位与错误的校验位做异或操作，为1的为即为出错位，出错位取反即可纠正</li></ul><h2 id="操作系统基本原理"><a href="#操作系统基本原理" class="headerlink" title="操作系统基本原理"></a>操作系统基本原理</h2><h3 id="操作系统基本知识"><a href="#操作系统基本知识" class="headerlink" title="操作系统基本知识"></a>操作系统基本知识</h3><h4 id="1-操作系统概述"><a href="#1-操作系统概述" class="headerlink" title="1.操作系统概述"></a>1.操作系统概述</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041140506.png" alt="image-20210312074736657"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041140190.png" alt="image-20210312074751379"></p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="1-进程的状态"><a href="#1-进程的状态" class="headerlink" title="1.进程的状态"></a>1.进程的状态</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041143955.png" alt="image-20210312075411086"></p><p>三态模型现在已经升级到五态模型</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041143456.png" alt="image-20210312080355516"></p><h4 id="2-进程的同步与互斥"><a href="#2-进程的同步与互斥" class="headerlink" title="2.进程的同步与互斥"></a>2.进程的同步与互斥</h4><p> <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041143298.png" alt="image-20210312141729903"></p><p>互斥问题：生产者和消费者，只能有一个人进入市场操作</p><p>同步问题：生产者必须要等待消费者使用完市场资源，才能继续操作市场</p><h4 id="3-PV操作"><a href="#3-PV操作" class="headerlink" title="3.PV操作"></a>3.PV操作</h4><p>（1）PV操作原理</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041143185.png" alt="image-20210312142146098"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041143209.png" alt="image-20210312143331131"></p><p>P操作代表请求、申请、锁定、占用的资源</p><p>V操作代表释放资源，V操作可以唤醒P操作</p><p>（2）PV操作例题</p><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041143611.png" alt="image-20210312143437728"></p><p><strong>解题步骤：</strong></p><ul><li><p>分析流程图，购书者进程与收银员进程有同步关系</p></li><li><p>分析可得，收银员要收费必须要购书者付款来唤醒，且付款为V操作，收费为P操作</p></li><li><p>收费过程中，购书者也要等到收银员完成操作才能离开书店，所以这时候购书者会有一个P操作等待收银员完成收费的V操作触发</p></li><li><p>总而言之，等待的一方会有一个P操作，等待另一个进程的V操作触发</p></li></ul><h4 id="4-PV操作与前趋图"><a href="#4-PV操作与前趋图" class="headerlink" title="4.PV操作与前趋图"></a>4.PV操作与前趋图</h4><p> <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041143730.png" alt="image-20210312160701203"></p><p><strong>解题步骤：</strong></p><ul><li><p>在前趋图的路径上标上S1-S4</p></li><li><p>前趋图的S路径的头为V操作，末端为P操作（箭头指向为V，箭头起始点为P）</p></li><li><p>则易得a为V(S1)，b为V(S2)，c为P(S1)，P(S2)……</p></li></ul><h4 id="5-死锁问题"><a href="#5-死锁问题" class="headerlink" title="5.死锁问题"></a>5.死锁问题</h4><p>参考文章：<a href="https://blog.csdn.net/hd12370/article/details/82814348?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161554879916780255272251%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161554879916780255272251&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-1-82814348.first_rank_v2_pc_rank_v29&amp;utm_term=%E6%AD%BB%E9%94%81">https://blog.csdn.net/hd12370/article/details/82814348?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161554879916780255272251%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161554879916780255272251&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-1-82814348.first_rank_v2_pc_rank_v29&amp;utm_term=%E6%AD%BB%E9%94%81</a></p><p>（1）死锁概念</p><p>​    所谓死锁，是指多个进程在运行过程中因争夺资源而造成的一    种僵局，当进程处于这种僵持状态时，若无外力作用，它们都    将无法再向前推进。</p><p>​        <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041143794.png" alt="image-20210312162421562"></p><p>​    </p><p>（2）不发生死锁计算</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041143721.png" alt="image-20210312162740249"></p><p>​        </p><p><strong>解题步骤：</strong></p><ul><li>每个进程都分配到资源数（n-1），最后还剩下一个资源逐个等待分配</li><li>所以总不发生死锁的资源是 每个进程所需（资源数-1）之和 加1</li></ul><p>（3）死锁的条件</p><ul><li>互斥条件：进程要求对所分配的资源进行排它性控制，即在一段时间内某资源仅为一进程所占用。</li><li>请求和保持条件：当进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件：进程已获得的资源在未使用完之前，不能剥夺，只能在使用完时由自己释放。</li><li>环路等待条件：在发生死锁时，必然存在一个进程–资源的环形链。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144480.png" alt="image-20210312193446990"></p><p>（4）死锁的预防</p><ul><li>资源一次性分配：一次性分配所有资源，这样就不会再有请求了：（破坏请求条件）</li><li>只要有一个资源得不到分配，也不给这个进程分配其他的资源：（破坏请保持条件）</li><li>可剥夺资源：即当某进程获得了部分资源，但得不到其它资源，则释放已占有的资源（破坏不可剥夺条件）</li></ul><p>（5）死锁的避免</p><ul><li><p>资源有序分配法：系统给每类资源赋予一个编号，每一个进程按编号递增的顺序请求资源，释放则相反（破坏环路等待条件），资源利用率比较低</p></li><li><p>银行家算法：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144314.png" alt="image-20210312194338267"></p></li></ul><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144153.png" alt="image-20210312194446263"></p><ul><li><p>计算系统扣除分配给各个进程的资源后剩余的资源</p></li><li><p>算得R1=2，R2=1，R3=0</p></li><li><p>逐个计算每个进程还需资源数，比系统剩余资源数多的往后排</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144321.png" alt="image-20210313094046147"></p></li><li><p>一个进程完成后会释放资源供下个进程使用</p></li></ul><h3 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h3><h4 id="1-分区存储组织"><a href="#1-分区存储组织" class="headerlink" title="1.分区存储组织"></a>1.分区存储组织</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144210.png" alt="image-20210313094709268"></p><ul><li>首次适应算法：选择第一块空白内存</li><li>最佳适应算法：选择空白内存中小且资源够用的</li><li>最差适应算法：选择空白内存中最大的</li><li>循环首次适应法：将空白块连成一个环，按顺序依次选择其中一个</li></ul><h4 id="2-页式存储组织"><a href="#2-页式存储组织" class="headerlink" title="2.页式存储组织"></a>2.页式存储组织</h4><p>（1）基本概念</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144481.png" alt="image-20210313100151803"></p><p><strong>页式存储特点：</strong></p><ul><li>优点：利用率高，碎片小，分配及管理简单</li><li>缺点：增加了系统开销，可能产生抖动现象</li></ul><h4 id="3-页式存储地址换算"><a href="#3-页式存储地址换算" class="headerlink" title="3.页式存储地址换算"></a>3.页式存储地址换算</h4><p>（1）基本思路</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144282.png" alt="image-20210313100613841"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144306.png" alt="image-20210313100941223"></p><p>（2）例题</p><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144137.png" alt="image-20210313100709517"></p><p><strong>解题步骤：</strong></p><ul><li>利用页面大小将分开逻辑地址为：页号，页内地址</li><li>页面大小为4K = 2 ^ 12，则页内地址为12位，则高于12位的部分为页号</li><li>则有逻辑地址5A29中，5为页号，A29为页内地址</li><li>逻辑地址的业内地址和物理地址的块地址相同</li><li>根据页号5查表得块号（页帧号）为6</li><li>淘汰页号需要在内存里面（即又页帧号得）的页号中选择，然后选择其中范围位为0的1</li></ul><h4 id="4-段式存储组织"><a href="#4-段式存储组织" class="headerlink" title="4.段式存储组织"></a>4.段式存储组织</h4><p>（1）基本概念</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144232.png" alt="image-20210313102504217"></p><p><strong>段式存储特点：</strong></p><p>优点：多道程序共享内存，各段程序修改互不影响</p><p>缺点：内存利用率低，内存碎片浪费大</p><h4 id="5-段式存储地址换算"><a href="#5-段式存储地址换算" class="headerlink" title="5.段式存储地址换算"></a>5.段式存储地址换算</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144736.png" alt="image-20210313102837273"></p><h4 id="6-段页式存储"><a href="#6-段页式存储" class="headerlink" title="6.段页式存储"></a>6.段页式存储</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144187.png" alt="image-20210313102935041"></p><h4 id="7-页面置换算法"><a href="#7-页面置换算法" class="headerlink" title="7.页面置换算法"></a>7.页面置换算法</h4><p>（1）页面置换典型算法</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144250.png" alt="image-20210313112624921"></p><p>（2）先进先出算法（<strong>FIFO</strong>）</p><p>​    <strong>基本思路：</strong> <strong>当需要淘汰一个页面时，总是选择驻留主存时间最长的页面进行淘汰，即先进入主存的页面先淘汰</strong>。其理由是：最早调入主存的页面不再被使用的可能性最大。 即优先淘汰最早进入内存的页面。（往前看）</p><p>（3）最近最少使用算法（<strong>LRU</strong>）</p><p><strong>基本思路：</strong>利用局部性原理，根据一个作业在执行过程中过去的页面访问历史来推测未来的行为。它认为过去一段时间里不曾被访问过的页面，在最近的将来可能也不会再被访问。所以，这种算法的实质是：<strong>当需要淘汰一个页面时，总是选择在最近一段时间内最久不用的页面予以淘汰</strong>。 即淘汰最近最长时间未访问过的页面（往前看）</p><p>（4）例题</p><p><strong>两种算法比较：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144578.png" alt="image-20210313113550052"></p><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144778.png" alt="image-20210313113911134"></p><p><strong>解题步骤：</strong></p><ul><li>没有使用快表，每读一次程序的块都需要在内存中查表才能读取相应内存块，所以每一块都要进行两次内存的访问（查和读取）</li><li>6块 * 2 = 12 (内存访问次数)</li><li>指令产生只一次中断，数据横跨两个页面所以有两次中断，所以总缺页中断 = 1 + 2*2 = 5</li></ul><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="1-索引文件结构"><a href="#1-索引文件结构" class="headerlink" title="1.索引文件结构"></a>1.索引文件结构</h4><p>（1）原理图</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041144089.png" alt="image-20210313114859091"></p><p>（2）例题</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041145620.png" alt="image-20210313114927467"></p><p><strong>解题步骤：</strong></p><ul><li>0~4号逻辑块采用直接索引，可在图中看出他们的物理块号为50-89</li><li>5号处则是采用了一级地址，经过一层的地址索引，可得到5号存在58的物理号，6号则存在59的物理号中</li><li>因为一个物理为1K，每个地址存四个字节，所以每个盘块可以存256个地址</li><li>5 + 256 = 261，第一个盘已经存满，所以261号正好存在第二个盘的开始187号</li></ul><h4 id="2-文件和树形目录结构"><a href="#2-文件和树形目录结构" class="headerlink" title="2.文件和树形目录结构"></a>2.文件和树形目录结构</h4><p>（1）基本概念</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041145512.png" alt="image-20210313120118190"></p><h4 id="3-空闲存储空间管理"><a href="#3-空闲存储空间管理" class="headerlink" title="3.空闲存储空间管理"></a>3.空闲存储空间管理</h4><p>（1）基本方法：</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041145434.png" alt="image-20210313120413285"></p><p>​    其中位数图法比较重要</p><p>（2）位示图法</p><p>​    <strong>题目：</strong></p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041145810.png" alt="image-20210313120529830"></p><p>​    <strong>解题步骤：</strong></p><ul><li>(4195 + 1) / 32   = 131.125，所以前131个填满，当前物理块占的位在第132个字中</li><li>系统要占用物理块应该在该处填1，可算得在132字中，0位置位4192，所以3位置对应了4195</li><li><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041145776.png" alt="image-20210313121126473"></li></ul><h3 id="设备管理："><a href="#设备管理：" class="headerlink" title="设备管理："></a>设备管理：</h3><h4 id="1-数据传输控制"><a href="#1-数据传输控制" class="headerlink" title="1.数据传输控制"></a>1.数据传输控制</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041145752.png" alt="image-20210313121420639"></p><ul><li>程序控制方式：对读入的每个字，CPU需要对外设状态进行循环检查，直到确定该字已经在I/O控制器的数据寄存器中</li><li>程序中断方式：允许I/O设备主动打断CPU的运行并请求服务，从而“解放”CPU，使得其向I/O控制器发送读命令后可以继续做其他有用的工作</li><li>DMA方式：在程序中断方式中，I/O设备与内存之间的数据交换必须要经过CPU中的寄存器，所以速度还是受限，而DMA（直接存储器存取）方式的基本思想是在I/O设备和内存之间开辟直接的数据交换通路，彻底“解放” CPU</li></ul><h4 id="2-虚设备与SPOOLING技术"><a href="#2-虚设备与SPOOLING技术" class="headerlink" title="2.虚设备与SPOOLING技术"></a>2.虚设备与SPOOLING技术</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041145786.png" alt="image-20210313122125573"></p><h3 id="微内核操作系统"><a href="#微内核操作系统" class="headerlink" title="微内核操作系统"></a>微内核操作系统</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041145049.png" alt="image-20210313122222620"></p><h2 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h2><h3 id="三级模式-两级映射"><a href="#三级模式-两级映射" class="headerlink" title="三级模式-两级映射"></a>三级模式-两级映射</h3><h4 id="1-原理图"><a href="#1-原理图" class="headerlink" title="1.原理图"></a>1.原理图</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041145129.png" alt="image-20210314143038668"></p><h4 id="2-三级模型"><a href="#2-三级模型" class="headerlink" title="2.三级模型"></a>2.三级模型</h4><ul><li>用户级数据库–&gt; 外模式(反映了数据库系统的用户观)，它是某个或某几个用户所看到的数据库的数据视图，是与某一应用有关的数据的逻辑表示【视图】</li><li>概念级数据库–&gt; 概念模式（反映了数据库系统的整体观），它是由数据库设计者综合所有用户的数据，按照统一的观点构造的全局逻辑结构，是对数据库中全部数据的逻辑结构和特征的总体描述，是所有用户的公共数据视图(全局视图)【表】</li><li>物理级数据库 –&gt; 内模式（反映了数据库系统的存储观），它是数据库中全体数据的内部表示或底层描述，描述了数据在存储介质上的存储方式和物理结构，对应着实际存储在外存储介质上的数据库</li></ul><h4 id="3-两级映射"><a href="#3-两级映射" class="headerlink" title="3.两级映射"></a>3.两级映射</h4><ul><li>概念模式/内模式的映像：实现概念模式到内模式之间的相互转换</li><li>外模式/概念模式的映像：实现外模式到概念模式之间的相互转换</li></ul><h3 id="数据库的设计过程"><a href="#数据库的设计过程" class="headerlink" title="数据库的设计过程"></a>数据库的设计过程</h3><h4 id="1-设计流程图"><a href="#1-设计流程图" class="headerlink" title="1.设计流程图"></a>1.设计流程图</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041146383.png" alt="image-20210314145042759"></p><h4 id="2-E-R模型"><a href="#2-E-R模型" class="headerlink" title="2.E-R模型"></a>2.E-R模型</h4><p>（1）E-R模型实例</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041146833.png" alt="image-20210314145321377"></p><p>（2）E-R图集成方法</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041146911.png" alt="image-20210314145646133"></p><p>（3）E-R模型转关系模式</p><p>参考文章：<a href="https://blog.csdn.net/gaoying_blogs/article/details/16843515?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161570558016780255285810%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161570558016780255285810&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-2-16843515.first_rank_v2_pc_rank_v29&amp;utm_term=E-R%E6%A8%A1%E5%9E%8B">https://blog.csdn.net/gaoying_blogs/article/details/16843515?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161570558016780255285810%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161570558016780255285810&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-2-16843515.first_rank_v2_pc_rank_v29&amp;utm_term=E-R%E6%A8%A1%E5%9E%8B</a></p><p>​    <strong>题目：</strong></p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041146768.png" alt="image-20210314145957620"></p><p>​    <strong>解题步骤：</strong></p><ul><li>分析联系模式：均为多对多模式</li><li>所以最少的关系模式为（实体数 +联系数）即4个</li></ul><p>​    <strong>笔记：</strong></p><ul><li><p>一个实体型转换为一个关系模式</p></li><li><p>关系模式个数：一对一型最少的情况为实体数，一对多型最少的情况为实体数，多对多型最少的情况为（实体数 +联系数） </p></li></ul><h4 id="3-关系代数"><a href="#3-关系代数" class="headerlink" title="3.关系代数"></a>3.关系代数</h4><p>（1）关系代数基本运算</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041146874.png" alt="image-20210314151722551"></p><p>​    </p><p>（2）关系表案例</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041146258.png" alt="image-20210314151914046"></p><p>（3）并，交，差运算</p><p>​    <strong>并：</strong></p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041146726.png" alt="image-20210314151946909"></p><p>​    <strong>交：</strong></p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041147387.png" alt="image-20210314152007727"></p><p>​    <strong>差：</strong></p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041147425.png" alt="image-20210314152031086"></p><p>​    </p><p>（4）笛卡尔积</p><p>​    笛卡尔积的字段前3个来自于S1表，后3个来自于S2表</p><p>​    笛卡尔积数据实际上是S1,S2两张表的数据进行排列组合（3*3）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041147560.png" alt="image-20210314152223121"></p><p>（5）投影，选择</p><p>​    <strong>投影：</strong>投影是选列操作（sql语句中的select）</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041147600.png" alt="image-20210314152652982"></p><p>​    <strong>选择：</strong>选择某一行（sql语句中的where）</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041147817.png" alt="image-20210314152709163"></p><p>（6）联接</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041147633.png" alt="image-20210314153548698"></p><p>​    </p><p>无条件时做自然联接（相同字段做等值）</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041147977.png" alt="image-20210314153340961"></p><p>​    </p><h3 id="规范化理论"><a href="#规范化理论" class="headerlink" title="规范化理论"></a>规范化理论</h3><h4 id="1-函数依赖"><a href="#1-函数依赖" class="headerlink" title="1.函数依赖"></a>1.函数依赖</h4><p>例如y=f(x)，x有唯一对应的y则称y函数依赖于x，记作x-&gt;y</p><p>（1）部分函数依赖</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041151027.png" alt="image-20210314164841918"></p><p>（2）传递函数依赖</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041151802.png" alt="image-20210314165058634"></p><h4 id="2-价值与用途"><a href="#2-价值与用途" class="headerlink" title="2.价值与用途"></a>2.价值与用途</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041151521.png" alt="image-20210314193504624"></p><p>（1）非规范关系模式案例</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041152794.png" alt="image-20210314193830269">    </p><p>（2）<strong>数据冗余：</strong>每一名学生的学号、姓名、系名、系主任这些数据重复多次。每个系与对应的系主任的数据也重复多次——数据冗余过大</p><p>（3）<strong>更新异常：</strong>假如李小明转系到法律系，那么为了保证数据库中数据的一致性，需要修改三条记录中系与系主任的数据</p><p>（4）<strong>插入异常：</strong>假如学校新建了一个系，但是暂时还没有招收任何学生（比如3月份就新建了，但要等到8月份才招生），那么是无法将系名与系主任的数据单独地添加到数据表中去的    </p><p>（5）<strong>删除异常：</strong>假如将某个系中所有学生相关的记录都删除，那么所有系与系主任的数据也就随之消失了（一个系所有学生都没有了，并不表示这个系就没有了）</p><h4 id="3-键"><a href="#3-键" class="headerlink" title="3.键"></a>3.键</h4><p>（1）键的关系</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041152273.png" alt="image-20210314194550086"></p><p>（2）求候选键</p><p>参考文章：<a href="https://blog.csdn.net/as4589sd/article/details/109080855?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161572346216780357243624%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161572346216780357243624&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-6-109080855.first_rank_v2_pc_rank_v29&amp;utm_term=%E6%B1%82%E5%80%99%E9%80%89%E9%94%AE">https://blog.csdn.net/as4589sd/article/details/109080855?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161572346216780357243624%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161572346216780357243624&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-6-109080855.first_rank_v2_pc_rank_v29&amp;utm_term=%E6%B1%82%E5%80%99%E9%80%89%E9%94%AE</a></p><p><strong>题目：</strong> </p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041152811.png" alt="image-20210314195241953"></p><p><strong>解题步骤：</strong></p><ul><li>将关系模式转换为有向图的模式，从依赖集入手</li><li>找到入度为0的属性，然后从该节点开始尝试遍历有向图，如果可以遍历完则该节点为候选键</li><li>如果没有入度为0的节点，尝试找既有入度又有出度的节点，如果能遍历完则该节点为候选键</li></ul><p><strong>笔记：</strong></p><ul><li><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041152361.png" alt="image-20210314195211462"></li></ul><h4 id="4-范式"><a href="#4-范式" class="headerlink" title="4.范式"></a>4.范式</h4><p>（1）逐步优化流程图</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041152553.png" alt="image-20210314201120528"></p><p>（2）第一范式</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041152888.png" alt="image-20210314201405320"></p><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041152535.png" alt="image-20210314201436636"></p><p><strong>解题步骤：</strong></p><ul><li>表中高级职称人数可以分为教授和副教授两个数据项，则不符合第一范式</li><li>移除高级职称人数一栏，教授，副教授和系名称同一行即可</li></ul><p>（3）第二范式</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041152601.png" alt="image-20210314201834412"></p><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041152081.png" alt="image-20210314202011517"></p><p><strong>解题步骤：</strong></p><ul><li><p>主键为SN0（学号）与CN0（课程号）的组合键，因为CN0不需要SN0也能确定CREDIT（学分），所以该表存在部分依赖，不符合第一范式</p></li><li><p>解决方案：将存在部分依赖的项单独建立另一个表，这里是去掉CREDIT一列，和CN0构建另一个表</p></li></ul><p>（4）第三范式</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041152826.png" alt="image-20210314202803052"></p><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041152943.png" alt="image-20210314202833312"></p><p><strong>解题步骤：</strong></p><ul><li>非主键中DN0可以确定DNAME，DNAME可以确定LOCATION，所以存在传递依赖，所以不符合第三范式</li><li>解决方案：去掉DNAME 与 LOCATION两列，与DN0构建另一个表</li></ul><p>（5）BC范式</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041152792.png" alt="image-20210314203724832"></p><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041152025.png" alt="image-20210314203737248"></p><p><strong>解题步骤：</strong></p><ul><li><p>找出候选键SJ组合键，SP组合键</p></li><li><p>列出函数依赖：SJ -&gt; T，T-&gt;J，左边的绝对因素中T不是候选键，所以不符合BC范式</p></li></ul><h4 id="5-规范化理论例题"><a href="#5-规范化理论例题" class="headerlink" title="5.规范化理论例题"></a>5.规范化理论例题</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041152074.png" alt="image-20210315080859705"></p><p><strong>解题步骤：</strong></p><ul><li>不属于第三范式的情况有：不符合第三范式； 不符合第二范式；题目中明显不存在部分依赖，所以符合第二范式。</li><li>要把员工和部门联系起来</li></ul><h4 id="6-模式分解"><a href="#6-模式分解" class="headerlink" title="6.模式分解"></a>6.模式分解</h4><p>（1）保持函数依赖分解</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041152754.png" alt="image-20210315082410502"></p><p>（2）无损分解</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153504.png" alt="image-20210315082432388"></p><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210315082440481.png" alt="image-20210315082440481"></p><p>（3）推理法</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153218.png" alt="image-20210315082810615"></p><p>是无损分解，可以进行表格联接来进行还原</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153921.png" alt="image-20210315082927373"></p><p>（4）表格法</p><p><strong>题目：</strong></p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153183.png" alt="image-20210315083425454"></p><p><strong>解题步骤：</strong></p><ul><li><p>写成初始表，第一行列出函数依赖中所有的项，第一列列出要分解出的项；然后按行看，是分解项的子项，填入an（n=所处列数）；非子项的填入bmn（m=行数，n=列数）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153458.png" alt="image-20210315083758834"></p></li><li><p>然后根据函数依赖修改填b的子项</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153241.png" alt="image-20210315084125906"></p></li></ul><p>（5）公式法</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153450.png" alt="image-20210315084311126"></p><p><strong>题目：</strong></p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153097.png" alt="image-20210315084336470"></p><p><strong>解题步骤：</strong></p><ul><li>该方法只适用于分解成两个的情况</li><li>两个集合做交集和差集，并构建出两个关系模式，其中之一能成立，则可证明为无损分解</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153512.png" alt="image-20210315084620536"></p><h3 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h3><h4 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153759.png" alt="image-20210315090346349"></p><h4 id="2-存在问题"><a href="#2-存在问题" class="headerlink" title="2.存在问题"></a>2.存在问题</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153232.png" alt="image-20210315194405718"></p><ul><li><strong>丢失更新：</strong>两者同时更新某个数据，后者执行的结果会覆盖前者</li><li><strong>不可重复读：</strong>前后验算的结果可能会因其中一个数据的更新而变得不同</li><li><strong>读”脏“数据：</strong>读取了临时值</li></ul><h4 id="3-封锁协议"><a href="#3-封锁协议" class="headerlink" title="3.封锁协议"></a>3.封锁协议</h4><p>参考文章：<a href="https://www.cnblogs.com/conanpeng/p/12854299.html">https://www.cnblogs.com/conanpeng/p/12854299.html</a></p><p>为了解决并发控制出现的以上问题，我们采用<strong>封锁协议</strong>来解决</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153115.png" alt="image-20210315195107429"></p><h3 id="数据库完整性约束"><a href="#数据库完整性约束" class="headerlink" title="数据库完整性约束"></a>数据库完整性约束</h3><h4 id="1-约束类型"><a href="#1-约束类型" class="headerlink" title="1.约束类型"></a>1.约束类型</h4><p>​    主要用于过滤数据，保证数据可靠性</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153081.png" alt="image-20210315200708816"></p><h4 id="2-数据库约束简介"><a href="#2-数据库约束简介" class="headerlink" title="2.数据库约束简介"></a>2.数据库约束简介</h4><ul><li>实体完整性约束：如用户设置主键，该字段的值不能重复也不能为空</li><li>参照完整性约束：如外键，可以和另一个表中的数据比对，可以为空，但是填入数据在参照表中不存在就需要弹出信息</li><li>用户自定义完整性：用户自定义填入数据的类型</li><li>触发器：触发器是运行在数据库中的脚本，表的操作事件触发表上的触发器的执行，可以用来过滤不符合条件的数据</li></ul><h3 id="数据库安全"><a href="#数据库安全" class="headerlink" title="数据库安全"></a>数据库安全</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153383.png" alt="image-20210315201555152"></p><h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><h4 id="1-备份类型"><a href="#1-备份类型" class="headerlink" title="1.备份类型"></a>1.备份类型</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153872.png" alt="image-20210315204913135"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153442.png" alt="image-20210315205054584"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153665.png" alt="image-20210315205442073"></p><h4 id="2-备份方式对比"><a href="#2-备份方式对比" class="headerlink" title="2.备份方式对比"></a>2.备份方式对比</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041153473.png" alt="image-20210315204939376"></p><h4 id="3-日志文件"><a href="#3-日志文件" class="headerlink" title="3.日志文件"></a>3.日志文件</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154993.png" alt="image-20210315205518921"></p><h4 id="4-数据库故障与恢复"><a href="#4-数据库故障与恢复" class="headerlink" title="4.数据库故障与恢复"></a>4.数据库故障与恢复</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154657.png" alt="image-20210315205646104"></p><h3 id="数据仓库与数据挖掘"><a href="#数据仓库与数据挖掘" class="headerlink" title="数据仓库与数据挖掘"></a>数据仓库与数据挖掘</h3><h4 id="1-关联图"><a href="#1-关联图" class="headerlink" title="1.关联图"></a>1.关联图</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154777.png" alt="image-20210315205934016"></p><h4 id="2-数据挖掘分类"><a href="#2-数据挖掘分类" class="headerlink" title="2.数据挖掘分类"></a>2.数据挖掘分类</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154728.png" alt="image-20210315210714712"></p><h3 id="反规范化"><a href="#反规范化" class="headerlink" title="反规范化"></a>反规范化</h3><h4 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154459.png" alt="image-20210315210849763"></p><h4 id="2-技术手段"><a href="#2-技术手段" class="headerlink" title="2.技术手段"></a>2.技术手段</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154153.png" alt="image-20210315210908917"></p><h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><h4 id="1-数据比较"><a href="#1-数据比较" class="headerlink" title="1.数据比较"></a>1.数据比较</h4><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154393.png" alt="image-20210315211214538"></p><h4 id="2-大数据处理系统特征"><a href="#2-大数据处理系统特征" class="headerlink" title="2.大数据处理系统特征"></a>2.大数据处理系统特征</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154971.png" alt="image-20210315211251951"></p><h2 id="系统安全分析与设计"><a href="#系统安全分析与设计" class="headerlink" title="系统安全分析与设计"></a>系统安全分析与设计</h2><h3 id="信息系统安全属性"><a href="#信息系统安全属性" class="headerlink" title="信息系统安全属性"></a>信息系统安全属性</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154546.png" alt="image-20210318202510615"></p><h3 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h3><h4 id="1-对称加密"><a href="#1-对称加密" class="headerlink" title="1.对称加密"></a>1.对称加密</h4><p>​    加密和解密使用同样的密钥</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154761.png" alt="image-20210318203018930"></p><h4 id="2-非对称加密技术"><a href="#2-非对称加密技术" class="headerlink" title="2.非对称加密技术"></a>2.非对称加密技术</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154529.png" alt="image-20210318203037879"></p><h3 id="信息摘要"><a href="#信息摘要" class="headerlink" title="信息摘要"></a>信息摘要</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154676.png" alt="image-20210318203513688"></p><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154442.png" alt="image-20210318204118305"></p><h3 id="数字信封与PGP"><a href="#数字信封与PGP" class="headerlink" title="数字信封与PGP"></a>数字信封与PGP</h3><h4 id="1-数字信封"><a href="#1-数字信封" class="headerlink" title="1.数字信封"></a>1.数字信封</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154465.png" alt="image-20210318205002055"></p><h4 id="2-PGP"><a href="#2-PGP" class="headerlink" title="2.PGP"></a>2.PGP</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154753.png" alt="image-20210318205018048"></p><h3 id="设置加密系统"><a href="#设置加密系统" class="headerlink" title="设置加密系统"></a>设置加密系统</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154504.png" alt="image-20210318210102213"></p><h3 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h3><h4 id="1-网络各层次安全保障"><a href="#1-网络各层次安全保障" class="headerlink" title="1.网络各层次安全保障"></a>1.网络各层次安全保障</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154177.png" alt="image-20210318210512632"></p><h4 id="2-网络威胁与攻击"><a href="#2-网络威胁与攻击" class="headerlink" title="2.网络威胁与攻击"></a>2.网络威胁与攻击</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154162.png" alt="image-20210318211044069"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154515.png" alt="image-20210318211147834"></p><h4 id="3-防火墙技术"><a href="#3-防火墙技术" class="headerlink" title="3.防火墙技术"></a>3.防火墙技术</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041155666.png" alt="image-20210318211223131"></p><h2 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h2><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p>高级语言类型：解释型语言，编译型语言</p><h4 id="1-编译过程"><a href="#1-编译过程" class="headerlink" title="1.编译过程"></a>1.编译过程</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154410.png" alt="image-20210321154849368"></p><h3 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h3><h4 id="1-文法样式"><a href="#1-文法样式" class="headerlink" title="1.文法样式"></a>1.文法样式</h4><p>一个形式文法是一个有序四元组G=(V,T,S,P)</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154098.png" alt="image-20210321155251742"></p><p>非终结符为大写字母，终结符为小写字母</p><h4 id="2-文法类型"><a href="#2-文法类型" class="headerlink" title="2.文法类型"></a>2.文法类型</h4><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041154708.png" alt="image-20210321155416921"></p><h3 id="语法推导树"><a href="#语法推导树" class="headerlink" title="语法推导树"></a>语法推导树</h3><p>（1）特征</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041155242.png" alt="image-20210321155710879"></p><p>（2）案例    </p><p><strong>题目：</strong></p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041155018.png" alt="image-20210321155732680"></p><p><strong>解题步骤：</strong></p><ul><li><code>&#123;a,b&#125;为终结符，&#123;S,A&#125;为非终结符</code></li><li>由题可写出以下的推导式子：<code>S-&gt;aAS，S-&gt;a，A-&gt;SbA，A-&gt;SS，A-&gt;ba</code></li><li>因为a，b不能推导出任何式子，所以a，b为终结符</li><li>将式子展开成推导树</li></ul><h3 id="有限自动机"><a href="#有限自动机" class="headerlink" title="有限自动机"></a>有限自动机</h3><h4 id="1-原理解析"><a href="#1-原理解析" class="headerlink" title="1.原理解析"></a>1.原理解析</h4><p>有限自动机使用状态转换图表示的</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041155098.png" alt="image-20210321162009480"></p><p>该图中S为起点，f为终点（终点有两个圈）</p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210321162104442.png" alt="image-20210321162104442" style="zoom:200%;"><p>解析态：找一条从起点到终点的路，路上的数值串起来即得到一个解析态</p><h4 id="2-例题"><a href="#2-例题" class="headerlink" title="2.例题"></a>2.例题</h4><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210321164053206.png" alt="image-20210321164053206"></p><p>按选项的路径一个个尝试，若能从A到C则该选项正确</p><h3 id="正规式"><a href="#正规式" class="headerlink" title="正规式"></a>正规式</h3><p>有限自动机除了可以用上面的状态转换图表示，也可以使用正规式来表达</p><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041155753.png" alt="image-20210321162604694"></p><p><strong>解题步骤：</strong></p><ul><li>根据上面的推导式逐个尝试推导（1）中的选项，D选项无法被推导出来</li><li>（2）可以根据（1）中不能被推导的D选项判断，（2）中的选项可以推导出D的都会被排除</li></ul><p><strong>笔记：</strong></p><ul><li>a|b ：可解析出a或b</li><li>（a|b）*：任意个a,b组合都可以表达出来</li></ul><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><h4 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041155344.png" alt="image-20210321164325199"></p><p>类似于树的遍历</p><h4 id="2-案例"><a href="#2-案例" class="headerlink" title="2.案例"></a>2.案例</h4><p><strong>题目：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041155367.png" alt="image-20210321164655382"></p><p><strong>解题步骤：</strong></p><ul><li><p>先由表达式构造树（括号表示先后顺序）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041156651.png" alt="image-20210321164705393"></p></li><li><p>再按要求遍历这颗树</p></li></ul><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>函数调用有两种类型</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041156601.png" alt="image-20210321164852542"></p><h3 id="保护期限"><a href="#保护期限" class="headerlink" title="保护期限"></a>保护期限</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041156649.png" alt="image-20210324171458649"></p><h3 id="知识产权人确定"><a href="#知识产权人确定" class="headerlink" title="知识产权人确定"></a>知识产权人确定</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041156250.png" alt="image-20210324171631453"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041156225.png" alt="image-20210324171752251"></p><h3 id="侵权判断"><a href="#侵权判断" class="headerlink" title="侵权判断"></a>侵权判断</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041156074.png" alt="image-20210324171953843"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041156161.png" alt="image-20210324172046092"></p><h2 id="标准化基础知识"><a href="#标准化基础知识" class="headerlink" title="标准化基础知识"></a>标准化基础知识</h2><h3 id="标准分类"><a href="#标准分类" class="headerlink" title="标准分类"></a>标准分类</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041156169.png" alt="image-20210324172153824"></p><h3 id="标准编号"><a href="#标准编号" class="headerlink" title="标准编号"></a>标准编号</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041156146.png" alt="image-20210324172322316"></p><h2 id="多媒体基础"><a href="#多媒体基础" class="headerlink" title="多媒体基础"></a>多媒体基础</h2><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041156280.png" alt="image-20210324172825384"></p><h3 id="媒体种类"><a href="#媒体种类" class="headerlink" title="媒体种类"></a>媒体种类</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041156354.png" alt="image-20210324174143278"></p><h3 id="多媒体计算"><a href="#多媒体计算" class="headerlink" title="多媒体计算"></a>多媒体计算</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157778.png" alt="image-20210324174211249"></p><h4 id="1-图像容量计算"><a href="#1-图像容量计算" class="headerlink" title="1.图像容量计算"></a>1.图像容量计算</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157089.png" alt="image-20210324174349827"></p><ul><li><p>位数为24位，则为3个字节，存储容量为：<code>1600*1200*3B</code></p></li><li><p>需要化单位为MB，可得一张相片存储的容量</p></li><li><p>再用总容量除以单位容量</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157527.png" alt="image-20210324174826746"></p></li></ul><h4 id="2-音频容量计算"><a href="#2-音频容量计算" class="headerlink" title="2.音频容量计算"></a>2.音频容量计算</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157255.png" alt="image-20210324174938000"></p><ul><li>44.1 * 16 * 2 = 1411.2</li><li>注意单位即可</li></ul><h4 id="3-视频容量计算"><a href="#3-视频容量计算" class="headerlink" title="3.视频容量计算"></a>3.视频容量计算</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157026.png" alt="image-20210324175128277"></p><ul><li>6.4 * 30  * 10 = 1920</li></ul><h3 id="常见多媒体标准"><a href="#常见多媒体标准" class="headerlink" title="常见多媒体标准"></a>常见多媒体标准</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157145.png" alt="image-20210324175312991"></p><h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><h4 id="1-压缩原理"><a href="#1-压缩原理" class="headerlink" title="1.压缩原理"></a>1.压缩原理</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157489.png" alt="image-20210324175859604"></p><h4 id="2-有损压缩与无损压缩"><a href="#2-有损压缩与无损压缩" class="headerlink" title="2.有损压缩与无损压缩"></a>2.有损压缩与无损压缩</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157521.png" alt="image-20210324180217920"></p><h2 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h2><h3 id="软件开发模型"><a href="#软件开发模型" class="headerlink" title="软件开发模型"></a>软件开发模型</h3><h4 id="1-瀑布模型（SDLC）"><a href="#1-瀑布模型（SDLC）" class="headerlink" title="1.瀑布模型（SDLC）"></a>1.瀑布模型（SDLC）</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157337.png" alt="image-20210329081750551"></p><p>适用：需求明确，二次开发</p><p>缺陷：需求阶段不明确</p><h4 id="2-原型演变"><a href="#2-原型演变" class="headerlink" title="2.原型演变"></a>2.原型演变</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157328.png" alt="image-20210329082152578"></p><p>原型针对需求不明确的情况，开发一个简易的展示系统</p><p>3.增量模型与螺旋模型</p><p>（1）增量模型</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157432.png" alt="image-20210329083037136"></p><p>（2）螺旋模型</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157009.png" alt="image-20210329083021339"></p><p>特点：风险分析</p><h4 id="3-V模型-喷泉模型-RAD"><a href="#3-V模型-喷泉模型-RAD" class="headerlink" title="3.V模型 喷泉模型 RAD"></a>3.V模型 喷泉模型 RAD</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157978.png" alt="image-20210329083142428"></p><p><strong>V模型特点</strong>：进行多次测试，需求分析阶段就同步写验收测试和系统测试计划，概要设计阶段同步写集成测试计划，详细设计阶段同步写单元测试计划</p><p><strong>喷泉模型特点：</strong>面向对象模型</p><p><strong>RAD：</strong>快速构建系统</p><h4 id="3-构件组装模型（CBSD）"><a href="#3-构件组装模型（CBSD）" class="headerlink" title="3.构件组装模型（CBSD）"></a>3.构件组装模型（CBSD）</h4><p>模块做成构件，最后组装成系统</p><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210329084052347.png" alt="image-20210329084052347"></p><p>特点：提高代码复用性</p><h4 id="4-敏捷开发方法"><a href="#4-敏捷开发方法" class="headerlink" title="4.敏捷开发方法"></a>4.敏捷开发方法</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157737.png" alt="image-20210329084130260"></p><p>适用场景：适合小项目 </p><h3 id="信息系统开发方法"><a href="#信息系统开发方法" class="headerlink" title="信息系统开发方法"></a>信息系统开发方法</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157674.png" alt="image-20210329084528060"></p><ul><li>结构化方法：开发流程不灵活</li><li>面向对象：复用性强</li></ul><h3 id="需求开发"><a href="#需求开发" class="headerlink" title="需求开发"></a>需求开发</h3><h4 id="1-需求分类和需求获取"><a href="#1-需求分类和需求获取" class="headerlink" title="1.需求分类和需求获取"></a>1.需求分类和需求获取</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157361.png" alt="image-20210329084949330"></p><h3 id="结构化设计"><a href="#结构化设计" class="headerlink" title="结构化设计"></a>结构化设计</h3><h4 id="1-基本原则"><a href="#1-基本原则" class="headerlink" title="1.基本原则"></a>1.基本原则</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157616.png" alt="image-20210329085644093"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157499.png" alt="image-20210329085707972"></p><p>模块独立性的衡量指标：高内聚，低耦合</p><h4 id="2-内聚和耦合"><a href="#2-内聚和耦合" class="headerlink" title="2.内聚和耦合"></a>2.内聚和耦合</h4><p>（1）内聚</p><p>内聚即模块中各个部件的连接紧密程度，内聚程度越高越好</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157225.png" alt="image-20210329090028450"></p><p>（2）耦合</p><p>耦合即模块间的联系的紧密程度，耦合程度越低越好</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157378.png" alt="image-20210329090217178"></p><h4 id="3-系统结构"><a href="#3-系统结构" class="headerlink" title="3.系统结构"></a>3.系统结构</h4><p>变换型系统结构</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157808.png" alt="image-20210329090443055"></p><h3 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h3><h4 id="1-测试原则与类型"><a href="#1-测试原则与类型" class="headerlink" title="1.测试原则与类型"></a>1.测试原则与类型</h4><p>（1）测试原则</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157171.png" alt="image-20210329165202071"></p><p>（2） 测试类型</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157906.png" alt="image-20210329165221282"></p><h4 id="2-测试用例设计"><a href="#2-测试用例设计" class="headerlink" title="2.测试用例设计"></a>2.测试用例设计</h4><p>（1）黑盒测试法（只看输入输出，内部不管）</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041157522.png" alt="image-20210329165642740"></p><ul><li>等价类划分：划分同样类型的逻辑</li><li>边界值分析：边界值测试</li></ul><p>（2）白盒测试</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158012.png" alt="image-20210329165725137"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158643.png" alt="image-20210329165739431"></p><ul><li><p>路径测试:执行所有可能得穿过程序得控制流程路径,所有路径覆盖</p></li><li><p>语句测试:至少执行程序中的所有语句一次</p></li><li><p>条件测试:至少执行程序中的每一分支一次</p></li></ul><h4 id="3-测试阶段"><a href="#3-测试阶段" class="headerlink" title="3.测试阶段"></a>3.测试阶段</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158145.png" alt="image-20210329170209413"></p><p>单元测试（内部单个模块测试）-&gt; 集成测试（模块组装联系起来测试）-&gt; 确认测试（确认需求） -&gt; 系统测试</p><h4 id="4-McCabe复杂度"><a href="#4-McCabe复杂度" class="headerlink" title="4.McCabe复杂度"></a>4.McCabe复杂度</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158809.png" alt="image-20210329170925116"></p><p>  复杂度 = 判断框 + 1</p><p>有向图转成键线图：</p><ul><li>分叉处抽象为节点</li></ul><h3 id="系统运行与维护"><a href="#系统运行与维护" class="headerlink" title="系统运行与维护"></a>系统运行与维护</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158000.png" alt="image-20210329171507631"></p><h3 id="软件过程改进"><a href="#软件过程改进" class="headerlink" title="软件过程改进"></a>软件过程改进</h3><h4 id="1-CMMI"><a href="#1-CMMI" class="headerlink" title="1.CMMI"></a>1.CMMI</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158971.png" alt="image-20210329172027421"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158882.png" alt="image-20210329172034566"></p><h4 id="2-项目管理"><a href="#2-项目管理" class="headerlink" title="2.项目管理"></a>2.项目管理</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158033.png" alt="image-20210329172414687"></p><p>（1）gantt图</p><p><strong>题目:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158529.png" alt="image-20210329172506560"></p><p><strong>解题方法：</strong></p><ul><li><p>gantt图优点：进度时间清晰明了</p></li><li><p>gantt图缺点：不能清晰描述任务间的依赖关系</p></li><li><p>最早开始时间：正向推理，完成最早开始时间后从最后一个节点开始逆推得最晚开始时间</p></li></ul><h4 id="3-风险管理"><a href="#3-风险管理" class="headerlink" title="3.风险管理"></a>3.风险管理</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158035.png" alt="image-20210329173325006"></p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="1-UML基础"><a href="#1-UML基础" class="headerlink" title="1.UML基础"></a>1.UML基础</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158963.png" alt="image-20210401073147043"></p><h3 id="2-面向对象设计原则"><a href="#2-面向对象设计原则" class="headerlink" title="2.面向对象设计原则"></a>2.面向对象设计原则</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158785.png" alt="image-20210401073901860"></p><ul><li><p>单一职责原则：只有一个工作职责</p></li><li><p>开放-封闭原则：尽量不修改原有类，而是创建新的类</p></li><li><p>李氏替换原则：不要重写父类，而是使用子类</p></li><li><p>依赖倒置原则：针对接口，易于扩展和升级</p></li></ul><h3 id="3-设计模式的概念"><a href="#3-设计模式的概念" class="headerlink" title="3.设计模式的概念"></a>3.设计模式的概念</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158659.png" alt="image-20210401074902454"></p><ul><li>架构模式：最高决策，全局看方案（框架）</li><li>设计模型：构建设计</li><li>惯用法：与语言相关</li></ul><h3 id="4-设计模式的分类"><a href="#4-设计模式的分类" class="headerlink" title="4.设计模式的分类"></a>4.设计模式的分类</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158329.png" alt="image-20210401075141629"></p><p>关于设计模式可参考文章：<a href="https://www.runoob.com/design-pattern/abstract-factory-pattern.html">https://www.runoob.com/design-pattern/abstract-factory-pattern.html</a></p><h3 id="5-创建型模式"><a href="#5-创建型模式" class="headerlink" title="5.创建型模式"></a>5.创建型模式</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158281.png" alt="image-20210401075331145"></p><ul><li>抽象工厂：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品</li><li>构建器模式：一些基本部件不会变，而其组合经常变化的时候（去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的”套餐”）</li><li>工厂模式：我们明确地计划不同条件下创建不同实例时（您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现）</li><li>原型模式：利用已有的一个原型对象，快速地生成和原型对象一样的实例（细胞分裂）</li><li>单例模式：当您想控制实例数目，节省系统资源的时候（Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行）</li></ul><h3 id="6-结构型模式"><a href="#6-结构型模式" class="headerlink" title="6.结构型模式"></a>6.结构型模式</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158763.png" alt="image-20210401081127485"></p><ul><li>适配器模式：主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的（美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V）</li><li>桥接模式：把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合（墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的）</li><li>组合模式：树枝和叶子实现统一接口，树枝内部组合该接口（算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数）</li><li>装饰模式：在不想增加很多子类的情况下扩展类（ 1、扩展一个类的功能。 2、动态增加功能，动态撤销）</li><li>外观模式： 客户端不需要知道系统内部的复杂联系，整个系统只需提供一个”接待员”即可</li></ul><h3 id="7-行为模式"><a href="#7-行为模式" class="headerlink" title="7.行为模式"></a>7.行为模式</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041158311.png" alt="image-20210401082208514"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041159386.png" alt="image-20210401082903101"></p><ul><li><p>职责链模式：有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定</p></li><li><p>命令模式：在某些场合，比如要对行为进行”记录、撤销/重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将”行为请求者”与”行为实现者”解耦？将一组行为抽象为对象，可以实现二者之间的松耦合</p></li></ul><h2 id="数据流图（DFD）"><a href="#数据流图（DFD）" class="headerlink" title="数据流图（DFD）"></a>数据流图（DFD）</h2><h3 id="1-数据流图基本概念"><a href="#1-数据流图基本概念" class="headerlink" title="1.数据流图基本概念"></a>1.数据流图基本概念</h3><p>（1）数据流图组成</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041159952.png" alt="image-20210407213739002"></p><p>（2）数据流图分层</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041159858.png" alt="image-20210407214121210"></p><p>结构化开发</p><h3 id="2-数据字典"><a href="#2-数据字典" class="headerlink" title="2.数据字典"></a>2.数据字典</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041159801.png" alt="image-20210407214322138"></p><h3 id="3-数据流图平衡原则"><a href="#3-数据流图平衡原则" class="headerlink" title="3.数据流图平衡原则"></a>3.数据流图平衡原则</h3><p>（1）父图于子图的 平衡</p><p>（2）子图内的平衡</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041159609.png" alt="image-20210407214827079"></p><h3 id="4-数据流图解题技巧"><a href="#4-数据流图解题技巧" class="headerlink" title="4.数据流图解题技巧"></a>4.数据流图解题技巧</h3><p>（1）题目分点解析</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041159680.png" alt="image-20210407215045201"></p><p>（2）利用数据平衡原则检查</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041159507.png" alt="image-20210407215232985"></p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="1-数据库设计流程"><a href="#1-数据库设计流程" class="headerlink" title="1.数据库设计流程"></a>1.数据库设计流程</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041159440.png" alt="image-20210408074600325"></p><h3 id="2-ER模型"><a href="#2-ER模型" class="headerlink" title="2.ER模型"></a>2.ER模型</h3><p>（1）实体间联系类型</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041159777.png" alt="image-20210408074731356"></p><p>（2）ER图与关系模型的转换</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041159578.png" alt="image-20210408074840849"></p><h2 id="UML建模"><a href="#UML建模" class="headerlink" title="UML建模"></a>UML建模</h2><h3 id="1-用例图"><a href="#1-用例图" class="headerlink" title="1.用例图"></a>1.用例图</h3><ul><li>包含关系（extend）</li><li>扩展关系（include）</li><li>泛化关系</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041159282.png" alt="image-20210411075016076"></p><h3 id="2-类图与对象图"><a href="#2-类图与对象图" class="headerlink" title="2.类图与对象图"></a>2.类图与对象图</h3><ul><li><p>填类名</p></li><li><p>填多重度</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041159598.png" alt="image-20210411075231497"></p></li><li><p>填关系</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041200666.png" alt="image-20210411075347236"></p></li></ul><h3 id="3-顺序图"><a href="#3-顺序图" class="headerlink" title="3.顺序图"></a>3.顺序图</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041159652.png" alt="image-20210411075622175"></p><h3 id="4-活动图"><a href="#4-活动图" class="headerlink" title="4.活动图"></a>4.活动图</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041159297.png" alt="image-20210411075717523"></p><h3 id="5-状态图"><a href="#5-状态图" class="headerlink" title="5.状态图"></a>5.状态图</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041200177.png" alt="image-20210411075843370"></p><h3 id="6-通信图"><a href="#6-通信图" class="headerlink" title="6.通信图"></a>6.通信图</h3><p>顺序图另一种表达方式</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041200089.png" alt="image-20210411080106182"></p><h2 id="数据结构及算法运用"><a href="#数据结构及算法运用" class="headerlink" title="数据结构及算法运用"></a>数据结构及算法运用</h2><h3 id="1-分治法"><a href="#1-分治法" class="headerlink" title="1.分治法"></a>1.分治法</h3><p>分治法-&gt;递归技术</p><p>（1）分治法使用要求：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041200389.png" alt="image-20210411081822777"></p><p>分治法的基本运用：二分查找。快速排序</p><h3 id="2-回溯法"><a href="#2-回溯法" class="headerlink" title="2.回溯法"></a>2.回溯法</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041200843.png" alt="image-20210411082526821"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041200522.png" alt="image-20210411082644241"></p><p>回溯法通过不断回溯参数，吧所有可能性都尝试一遍直到</p><h3 id="3-贪心法"><a href="#3-贪心法" class="headerlink" title="3.贪心法"></a>3.贪心法</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041200609.png" alt="image-20210411083313668"></p><p>在有限时间找到满意的解（找不到最优解）</p><h3 id="4-动态规划法"><a href="#4-动态规划法" class="headerlink" title="4.动态规划法"></a>4.动态规划法</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041200769.png" alt="image-20210411083609174"></p><p>动态规划法会把问题拆成多个子问题，然后会有查表步骤</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041216019.png&quot; alt=&quot;image-20210904121613781&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="考试笔记" scheme="https://autovy.github.io/categories/%E8%80%83%E8%AF%95%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="软考笔记" scheme="https://autovy.github.io/tags/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
      <category term="考试相关" scheme="https://autovy.github.io/tags/%E8%80%83%E8%AF%95%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>Java|SSM框架学习</title>
    <link href="https://autovy.github.io/2021/05/10/Java/Java-SSM%E6%A1%86%E6%9E%B6/"/>
    <id>https://autovy.github.io/2021/05/10/Java/Java-SSM%E6%A1%86%E6%9E%B6/</id>
    <published>2021-05-10T06:30:00.000Z</published>
    <updated>2021-09-05T01:32:16.682Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040933389.png" alt="image-20210604151457606"></p><span id="more"></span><h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><h3 id="1-MCV解析"><a href="#1-MCV解析" class="headerlink" title="1.MCV解析"></a>1.MCV解析</h3><h4 id="MCV简介"><a href="#MCV简介" class="headerlink" title="MCV简介"></a>MCV简介</h4><ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范</li><li>最典型的MVC就是JSP（视图） + servlet（控制器） + javabean（模型）的模式</li><li>Model：提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务</li><li>View：负责进行模型的展示，即用户界面</li><li>Controller：接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示</li></ul><h4 id="MCV架构图"><a href="#MCV架构图" class="headerlink" title="MCV架构图"></a>MCV架构图</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934521.png" alt="image-20210605210445145"></p><p><strong>Model1时代：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934842.png" alt="image-20210605210725858"></p><p><strong>Model2时代：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934260.png" alt="image-20210605210745980"></p><h4 id="MVC框架的工作"><a href="#MVC框架的工作" class="headerlink" title="MVC框架的工作"></a>MVC框架的工作</h4><ul><li>将url映射到java类或java类的方法 .</li><li>封装用户提交的数据 .</li><li>处理请求–调用相关的业务处理–封装响应数据 .</li><li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li></ul><h3 id="2-初识Spring-MCV"><a href="#2-初识Spring-MCV" class="headerlink" title="2.初识Spring MCV"></a>2.初识Spring MCV</h3><h4 id="Spring-MCV简介"><a href="#Spring-MCV简介" class="headerlink" title="Spring MCV简介"></a>Spring MCV简介</h4><p>spring mcv特点：</p><ul><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ul><h4 id="Spring-MCV中心控制器"><a href="#Spring-MCV中心控制器" class="headerlink" title="Spring MCV中心控制器"></a>Spring MCV中心控制器</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934228.png" alt="image-20210605211539442"></p><p>Spring MCV  以请求为驱动 , 围绕一个中心Servlet分派请求及提供其他功能，而这个中心就是<strong>DispatcherServlet</strong>(它是继承自HttpServlet 基类)</p><h3 id="3-Spring-MCV处理流程"><a href="#3-Spring-MCV处理流程" class="headerlink" title="3.Spring MCV处理流程"></a>3.Spring MCV处理流程</h3><h4 id="Spring-MCV处理流程"><a href="#Spring-MCV处理流程" class="headerlink" title="Spring MCV处理流程"></a>Spring MCV处理流程</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934444.png" alt="image-20210605212007518"></p><p>更加详细的展示如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934219.png" alt="image-20210606152658001"></p><p>图上的连线表示SpringMVC框架已提供的技术，而需要进行开发的部分有：</p><ul><li>Handler处理器到数据库的部分</li><li>Handler处理器到模型的部分</li><li>视图到模型的部分</li><li>视图解析器到视图的部分</li></ul><h4 id="Spring-MCV处理流程代码实现（配置版）"><a href="#Spring-MCV处理流程代码实现（配置版）" class="headerlink" title="Spring MCV处理流程代码实现（配置版）"></a>Spring MCV处理流程代码实现（配置版）</h4><ul><li>编写配置文件</li><li>注册DispatcherServlet</li><li>添加处理映射器</li><li>添加处理适配器</li><li>添加视图解析器</li><li>编写业务Controller，返回ModelAndView（装数据，封视图）</li><li>将Controllor类注册到bean，形成映射</li><li>视图渲染显示ModellandView存放的数据</li></ul><h4 id="Spring-MCV处理流程代码实现（注解版）"><a href="#Spring-MCV处理流程代码实现（注解版）" class="headerlink" title="Spring MCV处理流程代码实现（注解版）"></a>Spring MCV处理流程代码实现（注解版）</h4><ul><li><p>实现步骤：</p><ul><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>接下来就是去创建对应的控制类 , controller</li><li>最后完善前端视图和controller之间的对应</li><li>测试运行调试.</li></ul></li><li><p>配置相关：使用springMVC必须配置的三大件：处理器映射器、处理器适配器、视图解析器</p></li><li><p>通常，我们只需要手动配置视图解析器，而处理器映射器和处理器适配器只需要开启注解驱动即可，而省去了大段的xml配置</p></li><li><p>解决Maven资源过滤的问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在pom.xml文件引入相关的依赖</p><p>主要有Spring框架核心库、Spring MVC、servlet , JSTL等</p></li></ul><ul><li>配置web.xml<ul><li>注意web.xml版本问题，要最新版！</li><li>注册DispatcherServlet</li><li>关联SpringMVC的配置文件</li><li>启动级别为1</li><li>映射路径为 / 【不要用/*，会404】</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加Spring MVC配置文件<ul><li>让IOC的注解生效</li><li>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …..</li><li>MVC的注解驱动</li><li>配置视图解析器</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让Spring MVC不处理静态资源 过滤掉一些静态资源，如.css  .js  .html .mp3--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">支持mvc注解驱动</span></span><br><span class="line"><span class="comment">    在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">    要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">    必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">    和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">    这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">    而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问</p><ul><li><p>创建Controller</p><p>使用注解编写控制类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span><span class="comment">//多添加一级访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//真实访问地址 : 项目名/HelloController/hello</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span><span class="comment">//请求路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello,SpringMVC，我是成博&quot;</span>);</span><br><span class="line">        <span class="comment">//会被视图解析器处理，web-inf/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp</li></ul></li></ul><ul><li><p>创建视图层</p><p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-Controller的定义"><a href="#4-Controller的定义" class="headerlink" title="4.Controller的定义"></a>4.Controller的定义</h3><h4 id="实现接口Controller定义控制器法"><a href="#实现接口Controller定义控制器法" class="headerlink" title="实现接口Controller定义控制器法"></a>实现接口Controller定义控制器法</h4><p>该方法是较老的方法，而且定义方式比较麻烦，已不再广泛使用</p><h4 id="使用注解-Controller法"><a href="#使用注解-Controller法" class="headerlink" title="使用注解@Controller法"></a>使用注解@Controller法</h4><p>@Controller注解类型用于声明Spring类的实例是一个控制器</p><p>为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-RestFul-风格"><a href="#5-RestFul-风格" class="headerlink" title="5.RestFul 风格"></a>5.RestFul 风格</h3><h4 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h4><ul><li>资源：互联网所有的事物都可以被抽象为资源</li><li>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</li><li>分别对应 添加、 删除、修改、查询</li></ul><p>@PathVariable 注解</p><p>@PathVariable 注解，可以让方法参数的值对应绑定到一个URL模板变量上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//原来的 :  http://localhost: 8080/add?a=1&amp;b=2</span></span><br><span class="line">    <span class="comment">//RestFul :  http://localhost : 8080/add/1/2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//映射访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> p1, <span class="meta">@PathVariable</span> <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">        <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">        <span class="comment">//返回视图位置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指定请求类型"><a href="#指定请求类型" class="headerlink" title="指定请求类型"></a>指定请求类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以使用组合注解指定请求类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@PatchMapping</span></span><br></pre></td></tr></table></figure><h3 id="6-SpringMVC的结果跳转"><a href="#6-SpringMVC的结果跳转" class="headerlink" title="6.SpringMVC的结果跳转"></a>6.SpringMVC的结果跳转</h3><h4 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h4><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><h4 id="ServletAPI"><a href="#ServletAPI" class="headerlink" title="ServletAPI"></a>ServletAPI</h4><p>通过设置ServletAPI , 不需要视图解析器 .</p><ul><li>通过HttpServletResponse进行输出</li><li>通过HttpServletResponse实现重定向</li><li>通过HttpServletResponse实现转发</li></ul><h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><ul><li>通过SpringMVC来实现转发和重定向 - 无需视图解析器</li><li>通过SpringMVC来实现转发和重定向 - 有视图解析器</li></ul><h3 id="7-数据处理"><a href="#7-数据处理" class="headerlink" title="7.数据处理"></a>7.数据处理</h3><h4 id="处理提交的数据"><a href="#处理提交的数据" class="headerlink" title="处理提交的数据"></a>处理提交的数据</h4><ul><li><p>提交的域名称和处理方法的参数名一致</p><p>提交数据 : <code>[http://localhost](http://localhost/):8080/hello?name=test</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>提交的域名称和处理方法的参数名不一致</p><p>提交数据：<code>[http://localhost](http://localhost/):8080/hello?username=test</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提交的是一个对象</p><p>如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null</p><p>提交数据：<code>http://localhost:8080/user?name=test&amp;id=1&amp;age=15</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h4><ul><li>通过ModelAndView：可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转</li><li>通过ModelMap：继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性</li><li>通过Model：只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解</li><li>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了</li></ul><h2 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h2><h3 id="1-SSM功能"><a href="#1-SSM功能" class="headerlink" title="1.SSM功能"></a>1.SSM功能</h3><p>SSM即Spring + Spring MVC + MyBatis</p><ul><li>Spring MVC 负责实现MCV设计模式，MyBatis负责数据持久层，Spring负责管理Spring MVC和MyBatis相关的创建和依赖注入</li><li>Spring MCV处理的是客户端与Java应用的关系，MyBatis处理的是Java应用与数据库的关系</li></ul><h3 id="2-SSM整合配置"><a href="#2-SSM整合配置" class="headerlink" title="2.SSM整合配置"></a>2.SSM整合配置</h3><h4 id="Maven添加所需依赖"><a href="#Maven添加所需依赖" class="headerlink" title="Maven添加所需依赖"></a>Maven添加所需依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring JDBC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring AOP --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MyBatis --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MyBatis整合Spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- C3P0 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- JSTL --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h4><p>当我们启动一个web项目容器时，首先非去读取web.xml内的配置</p><p>容器加载web.xml的过程</p><ul><li>首先读取配置文件中<code>&lt;listener&gt; &lt;/listener&gt;</code>和<code>&lt;context-param&gt; &lt;/context-param&gt;</code>两个节点</li><li>紧接着，容器创建一个ServletContext(application),这个web项目的所有部分都将共享这个上下文</li><li>容器以<code>&lt;context-param&gt;&lt;/context-param&gt;</code>的name作为键，value作为值，将其转化为键值对，存入ServletContext</li><li>容器创建<code>&lt;listener&gt;&lt;/listener&gt;</code>中的类实例，根据配置的class类路径<code>&lt;listener-class&gt;</code>来创建监听，在监听中会有初始化方法</li></ul><p>web.xml中配置SpringMCV，Spring，字符编码过滤器，加载静态资源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 启动Spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring MVC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 字符编码过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 加载静态资源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="spring-xml配置"><a href="#spring-xml配置" class="headerlink" title="spring.xml配置"></a>spring.xml配置</h4><p>spring.xml配置MyBatis和Spring的整合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 整合MyBatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置MyBatis SqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/southwind/repository/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:config.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描自定义的Mapper接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.southwind.repository&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="config-xml-配置"><a href="#config-xml-配置" class="headerlink" title="config.xml 配置"></a>config.xml 配置</h4><p>config.xml 配置一些 MyBatis 辅助信息，比如打印 SQL 等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打印SQL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定一个包名，MyBatis会在包名下搜索需要的JavaBean--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.southwind.entity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="springmvc-xml配置"><a href="#springmvc-xml配置" class="headerlink" title="springmvc.xml配置"></a>springmvc.xml配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描业务代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.southwind&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-SSM实现步骤"><a href="#3-SSM实现步骤" class="headerlink" title="3.SSM实现步骤"></a>3.SSM实现步骤</h3><h4 id="创建实体类（Entity）"><a href="#创建实体类（Entity）" class="headerlink" title="创建实体类（Entity）"></a>创建实体类（Entity）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建数据访问层（Repository）"><a href="#创建数据访问层（Repository）" class="headerlink" title="创建数据访问层（Repository）"></a>创建数据访问层（Repository）</h4><p>实现dao访问</p><ul><li><p>UserRepository访问数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>UserRepository.xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.southwind.repository.UserRepository&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建服务接口（Service）"><a href="#创建服务接口（Service）" class="headerlink" title="创建服务接口（Service）"></a>创建服务接口（Service）</h4><p>服务层，注入dao主要用来进行业务的逻辑处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现服务接口（ServiceImpl）"><a href="#实现服务接口（ServiceImpl）" class="headerlink" title="实现服务接口（ServiceImpl）"></a>实现服务接口（ServiceImpl）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> com.southwind.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现控制器（Controller）"><a href="#实现控制器（Controller）" class="headerlink" title="实现控制器（Controller）"></a>实现控制器（Controller）</h4><p>注入服务，映射url</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;list&quot;</span>,userService.findAll());</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040933389.png&quot; alt=&quot;image-20210604151457606&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://autovy.github.io/categories/Java/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Java" scheme="https://autovy.github.io/tags/Java/"/>
    
      <category term="框架学习" scheme="https://autovy.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="后端" scheme="https://autovy.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="SpringMCV" scheme="https://autovy.github.io/tags/SpringMCV/"/>
    
  </entry>
  
  <entry>
    <title>Java|Spring学习</title>
    <link href="https://autovy.github.io/2021/05/07/Java/Java-Spring%E5%AD%A6%E4%B9%A0/"/>
    <id>https://autovy.github.io/2021/05/07/Java/Java-Spring%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-07T06:30:00.000Z</published>
    <updated>2021-09-04T05:58:05.145Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041340206.png" alt="image-20210904133451706"></p><span id="more"></span><h3 id="1-初识Spring"><a href="#1-初识Spring" class="headerlink" title="1.初识Spring"></a>1.初识Spring</h3><h4 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h4><p>Spring是针对企业级开发的框架，是技术使用更将方便，整合了现有的技术框架</p><ul><li>SSH：Struct2 + Spring + Hibernate</li><li>SSM：SpringMCV + Spring + Mybatis</li></ul><h4 id="Spring优点"><a href="#Spring优点" class="headerlink" title="Spring优点"></a>Spring优点</h4><ul><li>轻量级，非入侵式</li><li>开源的免费框架</li><li>控制反转（IOC），面向切面（AOP）编程</li><li>支持事物处理，对框架整合的支持</li></ul><h4 id="Spring组成"><a href="#Spring组成" class="headerlink" title="Spring组成"></a>Spring组成</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040933389.png" alt="image-20210604151457606"></p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040933978.png" alt="image-20210604151952837"></p><h4 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a><strong>Spring Boot</strong></h4><ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速的开发单个微服务。</li><li>约定大于配置</li></ul><p><strong>Spring Cloud</strong></p><ul><li>SpringCloud是基于SpringBoot实现的</li></ul><h3 id="2-IOC理论推导"><a href="#2-IOC理论推导" class="headerlink" title="2.IOC理论推导"></a>2.IOC理论推导</h3><h4 id="经典Java应用分层"><a href="#经典Java应用分层" class="headerlink" title="经典Java应用分层"></a>经典Java应用分层</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040933172.png" alt="image-20210604153048214"></p><h4 id="控制反转的思想"><a href="#控制反转的思想" class="headerlink" title="控制反转的思想"></a>控制反转的思想</h4><p>程序不在主动创建对象，而是被动的接受对象（控制权从程序转移到用户）。反转了，我们不负责创建对象，我们只被动处理对象</p><p><strong>反转前：</strong>用户只能使用我们准备好的对象，有其他需求我们要额外新增修改</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934924.png" alt="image-20210604154725356"></p><p><strong>反转后：</strong>用户可以任意创建对象，我们只负责去处理这些类</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934307.png" alt="image-20210604154631248"></p><h4 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934274.png" alt="image-20210604155144289"></p><p>IOC就是为了解耦，让各个对象的依赖关系减弱</p><p>控制反转是一种通过描述（xml或注解）并通过第三方去生产或获取特定对象的方式。在Spring中，实现控制反转的loC容器，其实现方法就是依赖注入（DI）</p><h3 id="3-Spring初体验"><a href="#3-Spring初体验" class="headerlink" title="3.Spring初体验"></a>3.Spring初体验</h3><h4 id="xml法"><a href="#xml法" class="headerlink" title="xml法"></a>xml法</h4><ul><li>配置元数据：使用Spring创建对象，在Spring中称为bean </li><li>bean相当于new了一个对象</li><li>获取spring的上下文对象，从xml提取出对象</li><li>IOC变成实现：由主动编程变为被动接收</li><li>所谓IOC就是对象由Spring来创建，管理，装配</li></ul><h4 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC创建对象的方式</h4><ul><li>无参构造（默认方法）</li><li>有参构造：<ul><li>下标赋值</li><li>类型赋值（不建议使用）</li><li>参数名赋值</li></ul></li><li>在配置XML文件加载的时候，容器中管理的对象就已经初始化了，即使在没有getbean这个对象，但是其已经在Spring容器中创建</li></ul><h3 id="4-Spring配置"><a href="#4-Spring配置" class="headerlink" title="4.Spring配置"></a>4.Spring配置</h3><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><p>​    除了对象名，我们也可以起小名来找到这个对象</p><h4 id="Bean的配置"><a href="#Bean的配置" class="headerlink" title="Bean的配置"></a>Bean的配置</h4><ul><li>id：bean的唯一标识符，也就是相当于我们学的对象名 </li><li>class：bean对象所对应的全限定名：包名+类名    </li><li>name：也是别名，而且name可以同时取多个别名</li></ul><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><p>​    用于不同人开发的bean.xml文件合并在一起</p><h4 id="Bean与Spring容器的关系"><a href="#Bean与Spring容器的关系" class="headerlink" title="Bean与Spring容器的关系"></a>Bean与Spring容器的关系</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934089.png" alt="image-20210604163430319"></p><h3 id="5-依赖注入"><a href="#5-依赖注入" class="headerlink" title="5.依赖注入"></a>5.依赖注入</h3><h4 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h4><p>当实体对象有有参构造方法的时候，需要使用构造器注入construct-args</p><h4 id="Set方式注入"><a href="#Set方式注入" class="headerlink" title="Set方式注入"></a>Set方式注入</h4><ul><li><p>依赖：bean对象的创建依赖于容器</p></li><li><p>注入：bean对象中的所有属性，由容器来注入</p></li><li><p>普通型注入：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种：普通值注入，value        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黑心白莲&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Bean注入（注入另一对象实体，其也需要在bean中注册）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种：--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>数组型注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数组        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>List型注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>打篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Map型注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456789987456321&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;359419496419481649&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Set型注入</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Set        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>NULL型注入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--NULL        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Properties型注入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Properties        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>20191029<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>102.0913.524.4585<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;user&quot;</span>&gt;</span>黑心白莲<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="其他注入方式"><a href="#其他注入方式" class="headerlink" title="其他注入方式"></a>其他注入方式</h4><p>可以使用p命名空间和c命名空间进行注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--p命名空间注入，可以直接注入属性的值：property--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;黑心白莲&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--c命名空间注入，通过构造器注入：constructor-args--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;狂神&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;22&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-Bean解析"><a href="#6-Bean解析" class="headerlink" title="6.Bean解析"></a>6.Bean解析</h3><h4 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934289.png" alt="image-20210605114941989"></p><p>Spring默认使用单例模式（singleton）</p><h4 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h4><ul><li>手动装配：每一个属性都要自己去设置</li><li>自动装配是Spring满足bean依赖一种方式</li><li>Spring会在上下文中自动寻找，并自动给bean装配属性（）</li></ul><p><strong>自动装配类型：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934247.png" alt="image-20210605115608244"></p><ul><li>byName:   会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id；</li><li>byType：会自动在容器上下文中查找，和自己对象属性类型相同的bean；</li></ul><h3 id="7-使用注解开发"><a href="#7-使用注解开发" class="headerlink" title="7.使用注解开发"></a>7.使用注解开发</h3><h4 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h4><ul><li>导入约束</li><li>配置注解的支持： <code>&lt;context:annotation-config/&gt;</code></li></ul><h4 id="Autowired注解"><a href="#Autowired注解" class="headerlink" title="@Autowired注解"></a>@Autowired注解</h4><ul><li>可以在属性或者set方法上使用</li><li>使用Autowired方法就可以不用编写set方法（但是需要使用自动装配，且符合命名ByName）</li></ul><p><strong>不使用注解：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>使用注解：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果显式定义了Autowired的required属性为false，说明这个对象可以为null，否则不允许为空</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// set的方法都被省略掉了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Qualifier注解"><a href="#Qualifier注解" class="headerlink" title="@Qualifier注解"></a>@Qualifier注解</h4><ul><li><p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解【@Autowired】完成的时候，我们可以使用@Qualifier(value = “xxx”)去配置@Autowired的使用，指定一个唯一的bean对象注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;cat111&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;dog222&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Resource注解"><a href="#Resource注解" class="headerlink" title="@Resource注解"></a>@Resource注解</h4><p>@Resource和@Autowired的区别：</p><ul><li>都是用来自动装配的，都可以放在属性字段上</li><li>@Autowired通过byType的方式实现，而且必须要求这个对象存</li><li>@Resource默认通过byName的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错</li><li>执行顺序不同：@Autowired通过byType的方式实现。</li></ul><h4 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h4><p><strong>属性注入：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等价于&lt;bean id=&quot;user&quot;class=&quot;com.kuang.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="comment">//@Component 组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于  &lt;property name=&quot;name&quot; value=&quot;白莲&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;白莲&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>衍生的注解：</strong></p><p>@Component有几个衍生的注解，按照mvc三层架构分层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dao 【@Repository】</span><br><span class="line">service 【@Service】</span><br><span class="line">controller 【@Controller】</span><br></pre></td></tr></table></figure><p><strong>自动装配：</strong></p><ul><li>@Autowired：自动装配通过类型，名字。如果Autowired不能唯一自动装配上属性，则需要通过@Qualifier(value = “xxx”)去配置。 </li><li>@Nullable 字段标记了了这个注解，说明这个字段可以为null; </li><li>@Resource：自动装配通过名字，类型</li></ul><h4 id="注解与xml"><a href="#注解与xml" class="headerlink" title="注解与xml"></a>注解与xml</h4><ul><li>xml更加万能，适用于任何场合，维护简单方便</li><li>注解不是自己类使用不了，维护相对复杂</li><li>最佳的实践是：注解只负责完成属性的注入，xml用来管理bean</li></ul><h3 id="8-Java配置Spring"><a href="#8-Java配置Spring" class="headerlink" title="8.Java配置Spring"></a>8.Java配置Spring</h3><p>完全抛弃xml配置，采用JavaConfig来配置Spring</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个也会Spring容器托管，注册到容器中，因为它本来就是一个@Component</span></span><br><span class="line"><span class="comment">// @Configuration代表这是一个配置类，就和我们之前看的beans.xml</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.autovy.pojo&quot;)</span></span><br><span class="line"><span class="meta">@Import(AutovyConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutovyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册一个bean，就相当于我们之前写的一个bean标签</span></span><br><span class="line">    <span class="comment">// 这个方法的名字，就相当于bean标签中id属性</span></span><br><span class="line">    <span class="comment">// 这个方法的返回值，就相当于bean标签中的class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> user(); <span class="comment">// 就是返回要注入到bean的对象！</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="9-代理模式"><a href="#9-代理模式" class="headerlink" title="9.代理模式"></a>9.代理模式</h3><p>真实角色通过他们的替身——代理对象进行交流</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934761.png" alt="image-20210605150430423"></p><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p><strong>角色分析：</strong></p><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作</li><li>客户：访问代理对象的人！</li></ul><p><strong>实现过程：</strong></p><ul><li>代理对象组合目标对象，并帮忙为目标对象实现接口的附加方法</li><li>客户只需要访问代理对象即可</li></ul><p><strong>代理模式好处：</strong></p><ul><li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li><li>公共角色就交给代理角色！实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理！</li><li>一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低</li></ul><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>动态代理的代理类是自动生成的，可以分为：基于接口的动态代理（JDK动态代理），基于类的动态代理（cglib）两种</p><p><strong>动态代理的好处：</strong></p><ul><li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li><li>公共角色就交给代理角色！实现了业务的分工！</li><li>公共业务发生扩展的时候，方便集中管理！</li><li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li><li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可</li></ul><h3 id="10-AOP详解"><a href="#10-AOP详解" class="headerlink" title="10.AOP详解"></a>10.AOP详解</h3><h4 id="AOP实现机制"><a href="#AOP实现机制" class="headerlink" title="AOP实现机制"></a>AOP实现机制</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934449.png" alt="image-20210605153837739"></p><h4 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h4><ul><li>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术</li><li>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934769.png" alt="image-20210605153954045"></p><h4 id="AOP在Spring中"><a href="#AOP在Spring中" class="headerlink" title="AOP在Spring中"></a>AOP在Spring中</h4><p>AOP在不改变原有代码的情况下，增加新的功能</p><p>有三种实现方法：</p><ul><li>Spring的API接口实现</li><li>自定义类来实现AOP</li><li>使用注解实现</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041340206.png&quot; alt=&quot;image-20210904133451706&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://autovy.github.io/categories/Java/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Java" scheme="https://autovy.github.io/tags/Java/"/>
    
      <category term="框架学习" scheme="https://autovy.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Spring" scheme="https://autovy.github.io/tags/Spring/"/>
    
      <category term="后端" scheme="https://autovy.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java|MyBatis学习</title>
    <link href="https://autovy.github.io/2021/05/07/Java/Java-Mybaits%E5%AD%A6%E4%B9%A0/"/>
    <id>https://autovy.github.io/2021/05/07/Java/Java-Mybaits%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-07T06:30:00.000Z</published>
    <updated>2021-09-04T15:50:23.096Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041329080.png" alt="image-20210904132917911"></p><span id="more"></span><h3 id="1-初识MyBatis"><a href="#1-初识MyBatis" class="headerlink" title="1.初识MyBatis"></a>1.初识MyBatis</h3><h4 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h4><ul><li>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射</li><li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作</li><li>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO为数据库中的记录</li></ul><h4 id="如果获取MyBatis"><a href="#如果获取MyBatis" class="headerlink" title="如果获取MyBatis"></a>如果获取MyBatis</h4><ul><li><p>maven添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>github下载源码</p></li><li><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p></li></ul><h4 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h4><ul><li>数据持久化：持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li><li>数据持久化的方法有：数据库（jdbc）,io文件持久化</li><li>持久层即完成持久化工作的代码块</li></ul><h4 id="为什么需要Mybatis"><a href="#为什么需要Mybatis" class="headerlink" title="为什么需要Mybatis"></a>为什么需要Mybatis</h4><ul><li><p>帮助程序将数据存入数据库中</p></li><li><p>方便</p></li><li><p>传统的JDBC代码太复杂，而Mybatis简化，自动化</p></li><li><p>优点：</p><ul><li>简单易学</li><li>灵活</li><li>sql和代码的分离，提高了可维护性,支持对象与数据库字段的关系映射</li><li>提供映射标签</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>通过xml标签，支持编写动态sql</li></ul></li></ul><h3 id="2-MyBatis使用流程"><a href="#2-MyBatis使用流程" class="headerlink" title="2.MyBatis使用流程"></a>2.MyBatis使用流程</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><ul><li><p>新建数据库</p></li><li><p>新建项目</p><ul><li><p>新建一个普通maven项目</p></li><li><p>删除src文件</p></li><li><p>导入相关依赖：mysql驱动，mybatis，junit等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="创建一个模块"><a href="#创建一个模块" class="headerlink" title="创建一个模块"></a>创建一个模块</h4><ul><li>编写mybatis核心配置文件，该配置文件包含对MyBatis系统的核心设置，包含获取数据库连接实例的数据源（DataSource）和决定事务范围和控制方式的事务管理器（TransactionManager）</li></ul><ul><li><p>mybatis配置文件示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--数据库连接的配置信息 驱动 URL 用户名 密码 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 将写好的sql映射文件组成到该处（见代码编写部分） --&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>构建 SqlSessionFactory对象</p><ul><li>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。</li><li>SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得</li><li>而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出    SqlSessionFactory 实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String resource = <span class="string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>获取 SqlSession实例、</p><ul><li><p>从 SqlSessionFactory 中可以获取 SqlSession实例</p></li><li><p>SqlSession 提供了在数据库执行 SQL 命令所需的所有方法</p></li><li><p>我们可以通过SqlSession实例来直接执行已映射的 SQL 语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">  Blog blog = mapper.selectBlog(<span class="number">101</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h4><ul><li><p>实体类</p><p>程序中的实体类对应着数据库中的字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String ame;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = Name;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Dao接口</p><p>Dao接口用于操作数据库对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dao</span></span>&#123;</span><br><span class="line"><span class="function">List&lt;test&gt; <span class="title">getList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>编写sql映射文件</p><ul><li><p>实现类由原来的Daolmpl（Dao接口实现类）转变为一个Mapper配置文件</p></li><li><p>namespace：名称空间 ，绑定一个对应的Dao或Mapper接口</p></li><li><p>id：sql的唯一标识 </p></li><li><p>resultType：返回值类型 </p></li><li><p>#{id}：从传递过来的参数中取出id值     </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.mybatis.example.BlogMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlog&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">select * from Blog where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>每个mapper.xml文件都要在Mybatis核心配置文件中注册</p><p>​       </p><h4 id="执行代码"><a href="#执行代码" class="headerlink" title="执行代码"></a>执行代码</h4><p>Test测试编写：</p><ul><li>获取SqlSession对象</li><li>执行sql（getMapper）</li><li>关闭SqlSession</li></ul><p>可能出现的问题：</p><ul><li>sql映射配置文件没注册</li><li>绑定接口错误</li><li>方法名不对</li><li>返回类型不对</li><li>Maven导出资源问题</li></ul><h3 id="3-CRUD"><a href="#3-CRUD" class="headerlink" title="3.CRUD"></a>3.CRUD</h3><p>在sql映射文件中编写CRUD</p><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ul><li>编写接口（Dao/Mapper）</li><li>编写对应接口的sql语句</li><li>测试</li></ul><h4 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h4><p>namespace中的包名要与Dao/mapper接口的包名一致</p><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><ul><li>id：对应namespace接口文件中的方法名</li><li>resultType：sql语句执行的返回值</li><li>parameterType：参数类型</li></ul><h4 id="insert-update-delete"><a href="#insert-update-delete" class="headerlink" title="insert update delete"></a>insert update delete</h4><p>增删改标签在映射文件中编写sql语句，调用时都需要提交事物</p><h4 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h4><ul><li>sql映射文件的标签和sql语句要对应</li><li>resource绑定mapper需要使用路径</li><li>程序配置文件必须符合规范</li><li>NullPointerException，没有注册到资源</li></ul><h4 id="Map参数类型"><a href="#Map参数类型" class="headerlink" title="Map参数类型"></a>Map参数类型</h4><ul><li>假设实体类或者数据库中的字段过多，我们可以使用Map作为parameterType的值</li><li>Map可以自动填充null</li><li>Map传递参数，直接在sql中取出key（多个参数用Map，或者注解）</li><li>对象传递参数，在sql中取对象的属性（只有一个基本类型参数下使用）</li></ul><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><ul><li>Java代码执行时，传递通配符</li><li>也可以在在sql拼接中使用通配符</li></ul><h3 id="4-配置解析"><a href="#4-配置解析" class="headerlink" title="4.配置解析"></a>4.配置解析</h3><h4 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h4><ul><li><p>mybatis-config.xml</p></li><li><p>MyBaits的配置文件包含了会深深影响MyBatis行为的设置和属性信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure></li></ul><h4 id="环境配置（environments）"><a href="#环境配置（environments）" class="headerlink" title="环境配置（environments）"></a>环境配置（environments）</h4><ul><li>尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境</li><li>MyBatis默认事务管理器时JDBC，连接池POOLED</li></ul><h4 id="属性（properties）"><a href="#属性（properties）" class="headerlink" title="属性（properties）"></a>属性（properties）</h4><ul><li>我们可以通过properties属性来实现引用外部配置文件，可以在其中增加一些属性配置（如果有同一字段，优先录取外部配置文件的）</li><li>这些属性都是可外部配置且动态替换的，既可以在典型的Java属性文件中配置，也可以通过properties的子元素传递</li><li>外部配置文件写入数据库连接相关属性</li></ul><h4 id="类型别名（ypeAliases）"><a href="#类型别名（ypeAliases）" class="headerlink" title="类型别名（ypeAliases）"></a>类型别名（ypeAliases）</h4><ul><li>类型别名可为 Java 类型设置一个缩写名字</li><li>它仅用于 XML 配置，意在降低冗余的全限定类名书写</li><li>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，默认使用 Bean 的首字母小写的非限定类名来作为它的别名</li></ul><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为</p><p>一个配置完整的 settings 元素的示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="映射器"><a href="#映射器" class="headerlink" title="映射器"></a>映射器</h4><p>MapperRegistry：注册绑定我们的Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="生命周期与作用域"><a href="#生命周期与作用域" class="headerlink" title="生命周期与作用域"></a>生命周期与作用域</h4><p>作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题</p><p>SqlSessionFactoryBuilder：</p><ul><li>一旦创建了SqlSessionFactory，就不需要它了</li><li>局部变量</li></ul><p>SqlSessionFactory：</p><ul><li>数据库连接池</li><li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例</li><li>SqlSessionFactory最佳作用域是应用作用域</li><li>最简单的就是使用单例模式或者静态单例模式 （保证全局只有一个SqlSessionFactory）</li></ul><p>SqlSession：</p><ul><li>连接到连接池的一个请求</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</li><li>用完之后需要赶紧关闭</li></ul><h3 id="5-ResultMap结果集映射"><a href="#5-ResultMap结果集映射" class="headerlink" title="5.ResultMap结果集映射"></a>5.ResultMap结果集映射</h3><p>当实体类中属性名和数据库中字段名不一致时会找不到对应字段</p><p>解决方案：</p><ul><li>在sql映射中为字段起别名，达到与实体类中属性名一致的目的</li><li>通过resultMap结果集映射，让数据库中的字段映射到实体类的属性</li></ul><h3 id="6-日志"><a href="#6-日志" class="headerlink" title="6.日志"></a>6.日志</h3><h4 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h4><p>如果一个数据库操作出现了异常，我们需要排错，这时候往往要用到日志。MyBatis可以开启日志工厂，具体使用哪个日志实现，在设置中设定</p><h4 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h4><ul><li><p>log4j简介</p><ul><li>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件……</li><li>可以控制每一条日志的输出格式</li><li>通过一个配置文件进行灵活配置，而不需要修改应用代码</li></ul></li><li><p>log4j使用</p><ul><li>导入log4j依赖</li></ul></li><li><p>写log4j.properties配置文件</p><ul><li>使用log4j类格式化输出</li></ul></li></ul><h3 id="7-分页"><a href="#7-分页" class="headerlink" title="7.分页"></a>7.分页</h3><p>分页可以减少数据处理量</p><h4 id="使用Limit分页"><a href="#使用Limit分页" class="headerlink" title="使用Limit分页"></a>使用Limit分页</h4><h4 id="使用Mybatis实现分页"><a href="#使用Mybatis实现分页" class="headerlink" title="使用Mybatis实现分页"></a>使用Mybatis实现分页</h4><ul><li>接口</li><li>Mapper.xml（sql映射配置文件）</li><li>测试</li></ul><h4 id="RowBounds分页"><a href="#RowBounds分页" class="headerlink" title="RowBounds分页"></a>RowBounds分页</h4><p>不建议在开发中使用</p><ul><li>接口</li><li>mapper.xml</li><li>测试</li></ul><h4 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h4><h3 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8.使用注解开发"></a>8.使用注解开发</h3><h4 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h4><p>面向接口编程：解耦，可拓展，提高复用，分层开发中，上层不用管具体实现</p><p>关于接口的理解：</p><ul><li>接口时定义域实现的分离</li><li>接口可以反映系统设计人员对系统的抽象理解</li></ul><p>三个面向区别：</p><ul><li>面向对象：考虑问题时，以对象为单位，考虑它属性及方法</li><li>面向过程：考虑问题时，以一个事务流程为单位，考虑它的实现</li><li>面向接口：体现对系统整体的架构</li></ul><h4 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h4><p>本质：反射机制实现</p><p>底层：动态代理</p><ul><li>注解在接口实现，取代了sql映射配置文件的功能</li><li>需要在核心配置我文件中绑定接口</li><li>测试</li></ul><h4 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h4><ul><li><p>多个参数时，所有的参数前面必须加上@Param(“id”)的注解</p></li><li><p>工具类创建时实现自动提交事务</p></li><li><p>关于@Param()注解</p><ul><li><p>基本数据类型或String类型的参数需要加上</p></li><li><p>引用类型不需要加</p></li></ul></li><li><p>#{}相较于${}可以更有效防止注解</p></li></ul><h3 id="9-Lombok"><a href="#9-Lombok" class="headerlink" title="9.Lombok"></a>9.Lombok</h3><p> Lombok是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，通过使用对应的注解，可以在编译源码的时候生成对应的方法</p><p>​    </p><h3 id="10-多对一处理"><a href="#10-多对一处理" class="headerlink" title="10.多对一处理"></a>10.多对一处理</h3><p>找到一名学生对应的老师（有多个学生是同一个老师）</p><h4 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h4><p>类似于sql的子查询</p><ul><li>查询所有学生信息</li><li>根据学生的tid寻找对应老师</li></ul><h4 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h4><h3 id="11-一对多处理"><a href="#11-一对多处理" class="headerlink" title="11.一对多处理"></a>11.一对多处理</h3><p>找到一名老师对应的多个学生</p><h4 id="按照结果嵌套查询"><a href="#按照结果嵌套查询" class="headerlink" title="按照结果嵌套查询"></a>按照结果嵌套查询</h4><h4 id="按照查询嵌套查询"><a href="#按照查询嵌套查询" class="headerlink" title="按照查询嵌套查询"></a>按照查询嵌套查询</h4><h3 id="12-动态SQL"><a href="#12-动态SQL" class="headerlink" title="12.动态SQL"></a>12.动态SQL</h3><p>动态sql就是根据不同条件生成不同的sql语句</p><p>所谓动态sql，本质上还是sql语句，只是我们可以在sql层面，去执行一个逻辑代码</p><p>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL格式排列组合即可</p><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>根据条件拼接出不同的sql语句</p><h4 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise )"></a>choose (when, otherwise )</h4><p>类似于switch语句，匹配符合条件的标签拼接成新的sql语句</p><h4 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where, set)"></a>trim (where, set)</h4><ul><li><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除</li><li><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）</li></ul><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）</p><h3 id="13-缓存"><a href="#13-缓存" class="headerlink" title="13.缓存"></a>13.缓存</h3><h4 id="缓存简介"><a href="#缓存简介" class="headerlink" title="缓存简介"></a>缓存简介</h4><ul><li>存在内存中的临时数据</li><li>将用户经常查询的数据放在缓存中，用户去查询数据可以直接在缓存中查询，提高了查询效率，解决了高并发系统的性能问题</li><li>使用缓存可以减少与数据库交互次数，减少系统开销，提高系统效率</li><li>经常查询而且不经常改变的数据使用缓存</li></ul><h4 id="Mybaiis缓存"><a href="#Mybaiis缓存" class="headerlink" title="Mybaiis缓存"></a>Mybaiis缓存</h4><ul><li>MyBatis包含一个非常强大的查询缓存特性，非常方便定制和配置缓存，极大提高查询效率</li><li>MyBatis系统中默认定义两级缓存<ul><li>默认情况下，MyBatis开启了一级缓存（SqlSession本地缓存）</li><li>二级缓存需要手动开启和配置（基于namespace级别的缓存，我们可以通过Cache接口自定义二级缓存）</li></ul></li></ul><h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><ul><li>与数据库同异常会话期间查询到的数据会放到本地缓存中</li><li>以后需要获取相同数据就可以直接在缓存中拿，而不必查询数据库</li></ul><p>缓存失效的情况：</p><ul><li>查询不同的东西</li><li>增删改操作会导致刷新缓存</li><li>手动清理缓存</li></ul><h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><p>二级缓存又叫全局缓存，一个命名空间对应一个二级缓存</p><p>二级缓存工作机制：</p><ul><li>一个会话查询的数据会被放在当前会话的一级缓存中</li><li>如果会话关闭，这个会话对应的一级缓存就被清除了</li><li>但是如果开启了二级缓存，会话关闭后，缓存的数据可以被保存在二级缓存中</li><li>新的会话查询就可以从二级缓存中获取内容</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041329080.png&quot; alt=&quot;image-20210904132917911&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://autovy.github.io/categories/Java/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Java" scheme="https://autovy.github.io/tags/Java/"/>
    
      <category term="框架学习" scheme="https://autovy.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="后端" scheme="https://autovy.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="MyBatis" scheme="https://autovy.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Java|网络爬虫项目</title>
    <link href="https://autovy.github.io/2021/04/26/Java/Java-%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB/"/>
    <id>https://autovy.github.io/2021/04/26/Java/Java-%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB/</id>
    <published>2021-04-26T06:30:00.000Z</published>
    <updated>2021-09-04T02:05:01.685Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040942707.jpeg" alt="logo"></p><span id="more"></span><h3 id="idea基本设置"><a href="#idea基本设置" class="headerlink" title="idea基本设置"></a>idea基本设置</h3><p>File&gt;Setting打开idea基本设置，可以更改字体主题，安装插件等</p><p>建议安装中文翻译插件和Codota插件</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040940118.png" alt="image-20210507095023736"></p><h3 id="idea创建项目"><a href="#idea创建项目" class="headerlink" title="idea创建项目"></a>idea创建项目</h3><h4 id="1-参考文章"><a href="#1-参考文章" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://www.jianshu.com/p/e2c17c3460de">IDEA新建一般Java项目</a></p><p><a href="https://blog.csdn.net/shaxu123/article/details/97097296">语言版本和环境版本不一致导致错误</a>：Error:java: 无效的源发行版</p><h4 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）配置"><a href="#（1）配置" class="headerlink" title="（1）配置"></a>（1）配置</h5><p>新建一般Java项目时，一般选择默认配置进行</p><h5 id="（2）打开项目"><a href="#（2）打开项目" class="headerlink" title="（2）打开项目"></a>（2）打开项目</h5><p>打开的项目文件时，文件结构如下，文件路径多出一层或少一层文件，idea都不能识别出该项目（程序文件都要放到src文件中）：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941220.png" alt="image-20210507092554533"></p><h5 id="（3）配置修改"><a href="#（3）配置修改" class="headerlink" title="（3）配置修改"></a>（3）配置修改</h5><p>项目结构（文件 &gt; 项目结构）中可以修改项目的一些配置（可设置项目，模块的语言级别）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941155.png" alt="image-20210507095156216"></p><h5 id="（4）标记目录"><a href="#（4）标记目录" class="headerlink" title="（4）标记目录"></a>（4）标记目录</h5><p>标记目录可以自定义源根目录等，一般不改动，默认src为源根目录</p><h5 id="（5）添加Maven框架"><a href="#（5）添加Maven框架" class="headerlink" title="（5）添加Maven框架"></a>（5）添加Maven框架</h5><p>在Java一般项目中没有meavn的选项，可以在后期加上Maven框架支持</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941147.png" alt="image-20210507101055813"></p><p>添加了Maven框架后，还需要重新加载Maven项目即可完成框架添加</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941626.png" alt="image-20210507101357206"></p><h3 id="配置meavn"><a href="#配置meavn" class="headerlink" title="配置meavn"></a>配置meavn</h3><h4 id="1-参考文章-1"><a href="#1-参考文章-1" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://zhuanlan.zhihu.com/p/122429605">Meavn配置过程</a></p><p><a href="https://blog.csdn.net/stone_fall/article/details/108140716">依赖添加错误</a></p><p><a href="https://blog.csdn.net/qq_34412985/article/details/104410574">手动添加jar包</a></p><h4 id="2-注意事项-1"><a href="#2-注意事项-1" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）maven配置"><a href="#（1）maven配置" class="headerlink" title="（1）maven配置"></a>（1）maven配置</h5><p>idea有自己自带的maven，如果想自定义到自己下载的maven文件，可以在设置中修改（这样的修改只是针对该项目，新建的项目还是使用默认的maven）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941483.png" alt="image-20210507100212095"></p><ul><li>设置主目录</li><li>用户设置文件指向maven的setting文件</li><li>可以新建一个文件用于存储本地库</li></ul><h5 id="（2）Meavn创建项目"><a href="#（2）Meavn创建项目" class="headerlink" title="（2）Meavn创建项目"></a>（2）Meavn创建项目</h5><p>除了在一般项目创建后再添加Maven框架，我们也可以直接使用Meavn框架创建项目</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941163.png" alt="image-20210507101919573"></p><p>区别于一般的Java项目，使用Meavn框架创建的会在src新建两个文件夹：main（放主程序）和test（放测试程序）</p><h5 id="（3）meavn添加包"><a href="#（3）meavn添加包" class="headerlink" title="（3）meavn添加包"></a>（3）meavn添加包</h5><ul><li>通过pom.xml添加依赖</li></ul><p>在pom.xml文件中添加<code>&lt;dependency&gt;&lt;/dependency&gt;</code>标签，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要注意要是在<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>内添加依赖</p><p>我们可以通过<a href="https://mvnrepository.com/artifact/org.eclipse.ditto/ditto-base-api/2.0.0">Maven Repositor</a>查找对应包的依赖项xml文本</p><p>最后加载Maven包变更完成依赖项的添加</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941753.png" alt="image-20210507103208170"></p><ul><li>手动添加jar包</li></ul><p>meavn找不到相关包时，可以直接下载jar文件到本地包，放在刚刚设置Maven本地库存储文件中，然后使用maven导入</p><h3 id="爬虫配置"><a href="#爬虫配置" class="headerlink" title="爬虫配置"></a>爬虫配置</h3><h4 id="1-参考文章-2"><a href="#1-参考文章-2" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="http://webmagic.io/docs/zh/">WebMagic 文档</a></p><p><a href="https://www.cnblogs.com/justcooooode/p/7913365.html#_label0">出现log4j警告解决方法</a></p><p><a href="https://www.cnblogs.com/justlove/p/7637681.html">出现了SLF4J的报错解决方法</a>：添加依赖即解决</p><p><a href="http://webmagic.io/docs/zh/posts/ch4-basic-page-processor/">文档中爬虫基本使用介绍</a></p><h4 id="2-注意事项-2"><a href="#2-注意事项-2" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）爬虫框架添加"><a href="#（1）爬虫框架添加" class="headerlink" title="（1）爬虫框架添加"></a>（1）爬虫框架添加</h5><p>爬虫框架采用了易于上手的WebMagic框架，在pom.xml文件中添加相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="（2）无法爬取网页"><a href="#（2）无法爬取网页" class="headerlink" title="（2）无法爬取网页"></a>（2）无法爬取网页</h5><p>无法爬取TLS1.2协议站点的问题</p><p>在依赖中把WebMagica改成最新版本（0.7.4以上）即可解决</p><h5 id="（3）SLF4J报错"><a href="#（3）SLF4J报错" class="headerlink" title="（3）SLF4J报错"></a>（3）SLF4J报错</h5><p>出现了SLF4J报错可以添加以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="（4）爬取方法"><a href="#（4）爬取方法" class="headerlink" title="（4）爬取方法"></a>（4）爬取方法</h5><ul><li>实现实现PageProcessor接口，设置爬虫相关配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Site site = Site.me()</span><br><span class="line">        .setCharset(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">        .setRetryTimes(<span class="number">3</span>)</span><br><span class="line">        .setSleepTime(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><ul><li>process编写抽取逻辑，可以定义爬取页面的规则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 爬取title放入父类私有属性中</span></span><br><span class="line">    List title = page.getHtml()</span><br><span class="line">        .css(<span class="string">&quot;li &gt; div &gt; div.details &gt; span.link.h-cite.u-repost-of &gt; a&quot;</span>)</span><br><span class="line">        .regex(<span class="string">&quot;&gt;(.+)&lt;/a&gt;&quot;</span>,<span class="number">1</span>)</span><br><span class="line">        .all();</span><br><span class="line">        </span><br><span class="line">    set_title(title);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Spider类执行爬虫</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Spider.create(obj)</span><br><span class="line">      .addUrl(url)</span><br><span class="line">      <span class="comment">//开启4个线程抓取</span></span><br><span class="line">      .thread(<span class="number">4</span>)</span><br><span class="line">      <span class="comment">//启动爬虫</span></span><br><span class="line">      .run();</span><br></pre></td></tr></table></figure><h5 id="（5）正则匹配问题"><a href="#（5）正则匹配问题" class="headerlink" title="（5）正则匹配问题"></a>（5）正则匹配问题</h5><p>WebMagic链式抽取元素中使用的正则是不区分大小写的</p><h3 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h3><h4 id="1-参考文章-3"><a href="#1-参考文章-3" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://blog.csdn.net/XJ0927/article/details/108229970">IDEA单元测试设置过程</a></p><p><a href="http://www.justdojava.com/2019/07/20/debug-in-idea/">深入学习 Intellij IDEA 调试技巧</a></p><h4 id="2-单元测试"><a href="#2-单元测试" class="headerlink" title="2.单元测试"></a>2.单元测试</h4><h5 id="（1）单元测试理解"><a href="#（1）单元测试理解" class="headerlink" title="（1）单元测试理解"></a>（1）单元测试理解</h5><p>单元测试实质上是在主运行程序之外，为某个方法创建单独的测试程序，而不必只有一个执行入口进入程序</p><h5 id="（2）单元测试特殊情况"><a href="#（2）单元测试特殊情况" class="headerlink" title="（2）单元测试特殊情况"></a>（2）单元测试特殊情况</h5><p>抽象方法在单元测试时不能被调用，因为抽象类不能有实例不能直接调用</p><h5 id="（3）单元测试使用案例"><a href="#（3）单元测试使用案例" class="headerlink" title="（3）单元测试使用案例"></a>（3）单元测试使用案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 爬取工具类测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">spider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Tool().spider(<span class="keyword">new</span> Lobsters() ,<span class="string">&quot;https://lobste.rs/&quot;</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="（4）单元测试生成"><a href="#（4）单元测试生成" class="headerlink" title="（4）单元测试生成"></a>（4）单元测试生成</h5><p>idea可以快捷为类生成一个测试类，并可以勾选生成测试方法</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941641.png" alt="image-20210508081411414"></p><h4 id="3-单步调试"><a href="#3-单步调试" class="headerlink" title="3.单步调试"></a>3.单步调试</h4><h5 id="（1）断点设置"><a href="#（1）断点设置" class="headerlink" title="（1）断点设置"></a>（1）断点设置</h5><p>设置断点可以让程序在调试时从入口开始执行到断点所在代码</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941178.png" alt="image-20210508083551638"></p><p>不设断点调试，程序会执行完全部代码，无法实现单步调试</p><h5 id="（2）调试显示"><a href="#（2）调试显示" class="headerlink" title="（2）调试显示"></a>（2）调试显示</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941715.png" alt="image-20210508084409131"></p><ul><li>重新调试：当单步调试进入加载类等奇怪的地方时，可以重新调试，直到断点出现勾号，说明调试成功</li><li>调试过程中，步过（<strong>Setp Over</strong>）使用频率最高，当碰到方法时，不会进入方法内，而是直接调用方法，然后进入下一行</li><li>步进（ <strong>Step Into</strong>）则会进入方法内</li></ul><h3 id="构造子类"><a href="#构造子类" class="headerlink" title="构造子类"></a>构造子类</h3><h4 id="1-参考文章-4"><a href="#1-参考文章-4" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://blog.csdn.net/HD243608836/article/details/89155433">java中父类与子类有相同属性调谁？取决于左边</a></p><p><a href="https://blog.csdn.net/dxtianlei/article/details/99299051">父类私有属性和私有方法的继承</a></p><p><a href="https://blog.csdn.net/ccpat/article/details/44515335">Java this 关键字用法</a></p><h4 id="2-注意事项-3"><a href="#2-注意事项-3" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）子类属性继承问题"><a href="#（1）子类属性继承问题" class="headerlink" title="（1）子类属性继承问题"></a>（1）子类属性继承问题</h5><ul><li><p>子类是继承了父类的私有属性和私有方法，只是子类没有权限直接访问父类的私有属性和私有方法。但是我们可以通过继承父类get和set方法访问到父类的私有属性</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改私有属性方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set_title</span><span class="params">(List title)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问私有属性方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">show_title</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>父类属性不可被重写,只会被调用,父类方法可以被重写,也可以被调用</p></li><li><p>当子类中存在和父类同名属性,父类属性会隐藏起来,在多态的情况下属性被调用时会激活父类属性子类属性隐藏起来,而方法不会隐藏,一旦被重写,只能使用super来在子类调用</p></li></ul><h5 id="（2）继承中this指向问题"><a href="#（2）继承中this指向问题" class="headerlink" title="（2）继承中this指向问题"></a>（2）继承中this指向问题</h5><ul><li>对于方法的覆盖，new的谁就调谁，这就是多态。</li><li>对于成员变量的覆盖，this在哪个类就指向哪个类的成员变量，没有多态。</li><li>无论子类是否覆盖成员变量，this始终访问父类的成员变量</li><li>静态方法中，无法使用this引用上下文内容（属性，方法）</li></ul><h5 id="（3）抽象方法使用问题"><a href="#（3）抽象方法使用问题" class="headerlink" title="（3）抽象方法使用问题"></a>（3）抽象方法使用问题</h5><ul><li>抽象类是作为一个模板存在的，不能创建抽象类对象，需要用子类实现所有其抽象方法后变为非抽象类才能间接实例化</li><li>抽象方法只有声明没有实现（对于不知道该怎么实现的方法，我们可以声明为抽象方法），强制子类必须重写抽象方法</li></ul><h3 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h3><h4 id="1-参考文章-5"><a href="#1-参考文章-5" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://www.geeksforgeeks.org/md5-hash-in-java/">Java实现md5加密</a></p><p><a href="https://blog.csdn.net/Littleflowers/article/details/113955196">Java内部类实现http请求</a></p><p><a href="https://www.cnblogs.com/liaohuiqiang/p/7627022.html">http请求与多线程</a></p><p><a href="https://blog.csdn.net/foxpeter/article/details/23475293">URL中关于空格的编码</a></p><h4 id="2-注意事项-4"><a href="#2-注意事项-4" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）Http请求实现"><a href="#（1）Http请求实现" class="headerlink" title="（1）Http请求实现"></a>（1）Http请求实现</h5><ul><li><p>get请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">String urlNameString = url + <span class="string">&#x27;?&#x27;</span> + param;</span><br><span class="line">URL realUrl = <span class="keyword">new</span> URL(urlNameString);</span><br><span class="line"><span class="comment">// 打开链接，强转换为httpURLConnection类</span></span><br><span class="line">URLConnection connection = realUrl.openConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置通用请求属性</span></span><br><span class="line">connection.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">connection.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">connection.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>,<span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span>);</span><br><span class="line"><span class="comment">// 建立实际链接</span></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求成功获得输入流</span></span><br><span class="line">BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(connection.getInputStream()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得返回结果</span></span><br><span class="line">String res = in.readLine();</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>post请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">URL realUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line"><span class="comment">// 打开和URL之间的连接</span></span><br><span class="line">URLConnection conn = realUrl.openConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置通用的请求属性</span></span><br><span class="line">conn.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">conn.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">conn.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>,</span><br><span class="line"><span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送POST请求必须设置如下两行</span></span><br><span class="line">conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取URLConnection对象对应的输出流</span></span><br><span class="line">out = <span class="keyword">new</span> PrintWriter(conn.getOutputStream());</span><br><span class="line"><span class="comment">// 发送请求参数</span></span><br><span class="line">out.print(param);</span><br><span class="line"><span class="comment">// flush输出流的缓冲</span></span><br><span class="line">out.flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义BufferedReader输入流来读取URL的响应</span></span><br><span class="line">in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得返回结果 </span></span><br><span class="line">String res = in.readLine();</span><br></pre></td></tr></table></figure></li></ul><ul><li>Java发起http请求后，返回值为String类型</li><li>注意请求api的QPS（每秒请求量），我们可以通过<code>Thread.currentThread().sleep(1000);//毫秒</code> 简单实现延时</li><li>链接编码问题，有时候链接请求失败是因为空格没有编码为%20,而导致请求失败</li></ul><h5 id="（2）Java加密问题"><a href="#（2）Java加密问题" class="headerlink" title="（2）Java加密问题"></a>（2）Java加密问题</h5><p>​    实现md5加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// md5加密工具</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMd5</span><span class="params">(String input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用哈希MD5调用静态getInstance方法</span></span><br><span class="line">        MessageDigest md = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// digest() 方法调用来计算消息摘要</span></span><br><span class="line">        <span class="comment">//  of an input digest() return array of byte</span></span><br><span class="line">        <span class="keyword">byte</span>[] messageDigest = md.digest(input.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字节数组转换为符号表示</span></span><br><span class="line">        BigInteger no = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, messageDigest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将消息摘要转换为十六进制值</span></span><br><span class="line">        String hashtext = no.toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">while</span> (hashtext.length() &lt; <span class="number">32</span>) &#123;</span><br><span class="line">            hashtext = <span class="string">&quot;0&quot;</span> + hashtext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hashtext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于指定错误的消息摘要算法</span></span><br><span class="line">    <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java数据处理"><a href="#Java数据处理" class="headerlink" title="Java数据处理"></a>Java数据处理</h4><h4 id="1-参考文章-6"><a href="#1-参考文章-6" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://blog.csdn.net/chenkaibsw/article/details/78989459">Java数组遍历方法</a></p><p><a href="https://blog.csdn.net/WZH577/article/details/90453762">java遍历List方法</a></p><p><a href="https://www.cnblogs.com/goloving/p/7740100.html">List和Array相互转换 </a></p><h4 id="2-注意事项-5"><a href="#2-注意事项-5" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）字符串与数组转换"><a href="#（1）字符串与数组转换" class="headerlink" title="（1）字符串与数组转换"></a>（1）字符串与数组转换</h5><ul><li><p>字符串转换成数组</p><p>String.split() 方法，Java 中通常用 split() 分割字符串，返回的是一个数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;123abc&quot;</span>;</span><br><span class="line">String[] arr = str.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; <span class="comment">// String数组</span></span><br><span class="line">    System.out.print(arr[i]); <span class="comment">// 输出 1 2 3 a b c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组转换为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = &#123; <span class="string">&quot;123&quot;</span>, <span class="string">&quot;abc&quot;</span> &#125;;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    sb.append(arr[i]); <span class="comment">// String并不拥有append方法，所以借助 StringBuffer</span></span><br><span class="line">&#125;</span><br><span class="line">String sb1 = sb.toString();</span><br><span class="line">System.out.println(sb1); <span class="comment">// 输出123abc</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="（2）数组遍历方法"><a href="#（2）数组遍历方法" class="headerlink" title="（2）数组遍历方法"></a>（2）数组遍历方法</h5><ul><li><p>传统for循环方法</p></li><li><p>for each循环（foreach只能用于普通数组）</p></li><li><p>利用Array类中的toString方法（不能直接打印数组，<code>System.out.println(array)</code>这样打印是的是数组的首地址）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(array))</span><br></pre></td></tr></table></figure></li></ul><h5 id="（3）List遍历方法"><a href="#（3）List遍历方法" class="headerlink" title="（3）List遍历方法"></a>（3）List遍历方法</h5><ul><li>迭代器遍历（hasNext和next方法）</li><li>for each遍历（从List中获得的元素是对象）</li><li>传统for循环遍历（使用size方法获得List长度）</li><li>Lambda表达式</li></ul><h5 id="（3）Java中的正则表达式"><a href="#（3）Java中的正则表达式" class="headerlink" title="（3）Java中的正则表达式"></a>（3）Java中的正则表达式</h5><ul><li>注意该正则方法，一定是先find后group，group()方法通过前一个成功的find()方法调用返回找到的字符串</li></ul><h5 id="（5）List与Array的转换"><a href="#（5）List与Array的转换" class="headerlink" title="（5）List与Array的转换"></a>（5）List与Array的转换</h5><ul><li><p>List to Array</p><p>使用List 提供的toArray的接口对List进行转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定类型转换</span></span><br><span class="line">String[] array=list.toArray(<span class="keyword">new</span> String[list.size()]);</span><br></pre></td></tr></table></figure></li><li><p>Array to List</p><p>使用ArrayList的构造方法进行转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(array));</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040942707.jpeg&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://autovy.github.io/categories/Java/"/>
    
    
      <category term="开发实战" scheme="https://autovy.github.io/tags/%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"/>
    
      <category term="Java" scheme="https://autovy.github.io/tags/Java/"/>
    
      <category term="后端" scheme="https://autovy.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java|知识框架</title>
    <link href="https://autovy.github.io/2021/04/11/Java/Java-%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6/"/>
    <id>https://autovy.github.io/2021/04/11/Java/Java-%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6/</id>
    <published>2021-04-11T06:30:00.000Z</published>
    <updated>2021-09-04T02:05:10.473Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040947723.png" alt="image-20210904094723369"></p><span id="more"></span><h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><h3 id="计算机硬件介绍"><a href="#计算机硬件介绍" class="headerlink" title="计算机硬件介绍"></a>计算机硬件介绍</h3><h4 id="1-CPU"><a href="#1-CPU" class="headerlink" title="1.CPU"></a>1.CPU</h4><p>中央处理器从内存获取指令，然后执行这些指令</p><p>每台计算机都有一个内部时钟，以固定速度发射电子脉冲，时钟速度越快，在给定的时间段内可以执行更多的指令（计量单位为HZ）</p><h4 id="2-计算机发展规律"><a href="#2-计算机发展规律" class="headerlink" title="2.计算机发展规律"></a>2.计算机发展规律</h4><ul><li>摩尔定律</li><li>安迪-比尔定律</li><li>反摩尔定律</li></ul><h4 id="3-存储设备"><a href="#3-存储设备" class="headerlink" title="3.存储设备"></a>3.存储设备</h4><p>内存中的信息在断电后丢失，所有我们要将程序和数据永久保存在存储设备上</p><p>存储设备有下面三种</p><ul><li><p>磁盘驱动器</p></li><li><p>光盘驱动器</p></li><li><p>USB闪存驱动器</p></li></ul><h4 id="4-内存"><a href="#4-内存" class="headerlink" title="4.内存"></a>4.内存</h4><p>计算机最基本的存储单元是字节（byte），每个字节有8个比特（bit）构成</p><p>内存（RAM）用于存储程序及程序所需要的数据</p><p>一个程序和它的数据在被CPU执行前必须移到计算机内存中</p><h4 id="5-通信设备"><a href="#5-通信设备" class="headerlink" title="5.通信设备"></a>5.通信设备</h4><p>电脑可以通过通信设备</p><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>操作系统是运行在计算机上最重要的程序，管理和控制计算机的活动</p><h3 id="万维网"><a href="#万维网" class="headerlink" title="万维网"></a>万维网</h3><p>万维网即world wide web，简称web</p><p>web客户端可以访问浏览web服务器上的页面</p><p>web通过一个全局统一资源标识符（URL）标识</p><p>web通过超文本传输协议（http）传输给用户</p><h2 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h2><h3 id="Java语言应用场景"><a href="#Java语言应用场景" class="headerlink" title="Java语言应用场景"></a>Java语言应用场景</h3><h4 id="1-JavaEE（spring）"><a href="#1-JavaEE（spring）" class="headerlink" title="1.JavaEE（spring）"></a>1.JavaEE（spring）</h4><h4 id="2-大数据（spark）"><a href="#2-大数据（spark）" class="headerlink" title="2.大数据（spark）"></a>2.大数据（spark）</h4><h4 id="3-安卓开发"><a href="#3-安卓开发" class="headerlink" title="3.安卓开发"></a>3.安卓开发</h4><h3 id="Java开发介绍"><a href="#Java开发介绍" class="headerlink" title="Java开发介绍"></a>Java开发介绍</h3><h4 id="1-软件开发介绍"><a href="#1-软件开发介绍" class="headerlink" title="1.软件开发介绍"></a>1.软件开发介绍</h4><p>（1）软件开发</p><p>软件集一系列按照特定顺序组织的计算机数据和指令的集合。有系统软件和应用软件之分</p><p>（2）人机交互方式</p><ul><li>图形化界面：GUI</li><li>命令行方式：CLI</li></ul><h4 id="2-Java技术体系平台"><a href="#2-Java技术体系平台" class="headerlink" title="2.Java技术体系平台"></a>2.Java技术体系平台</h4><ul><li>Java SE：面向桌面级应用的Java平台</li><li>Java EE：面向web应用程序</li><li>Java ME：面向移动终端</li></ul><h4 id="3-Java语言特点"><a href="#3-Java语言特点" class="headerlink" title="3.Java语言特点"></a>3.Java语言特点</h4><ul><li>面向对象：类与对象</li><li>健壮性：提供一个相对安全的内存管理和访问机制</li><li>跨平台性：java语言编写的应用程序可以运行在不同的系统平台上（通过jvm实现）</li></ul><h4 id="4-Java两种核心机制"><a href="#4-Java两种核心机制" class="headerlink" title="4.Java两种核心机制"></a>4.Java两种核心机制</h4><ul><li>Java虚拟机（JVM）：JVM是一个虚拟计算机，具有指令集使用不同的存储区域，负责执行指令，管理数据，内存，寄存器（屏蔽底层运行平台的差别，实现“”一次编译，处处运行“）</li><li>垃圾收集机制：java系统级线性跟踪存储空间的分配情况，并在JVM空闲时，检测并释放可被释放的存储空间</li></ul><h4 id="5-Java环境"><a href="#5-Java环境" class="headerlink" title="5.Java环境"></a>5.Java环境</h4><ul><li>JDK：Java开发工具包，其中包含了JRE，其中包含了编译工具（javac）和打包工具（jar）</li><li>JRE：java运行环境，包括了JVM和java的核心类库</li><li>使用JDK开发java程序，交给JRE运行</li><li>JDK &gt; JRE &gt; JVM</li></ul><h2 id="Java基本语法"><a href="#Java基本语法" class="headerlink" title="Java基本语法"></a>Java基本语法</h2><h3 id="关键字与保留字"><a href="#关键字与保留字" class="headerlink" title="关键字与保留字"></a>关键字与保留字</h3><h4 id="1-关键字"><a href="#1-关键字" class="headerlink" title="1.关键字"></a>1.关键字</h4><p>定义：在java语言中用作专门用途的字符串（单词）</p><p>特点：关键字所有字母为小写</p><p>功能：定影数据类型，定义流程控制，定义访问权限修饰，定义类函数变量修饰符，定义类与类之间关系，定义建立引用判断实例，异常处理，包</p><h4 id="2-保留字"><a href="#2-保留字" class="headerlink" title="2.保留字"></a>2.保留字</h4><p>现有Java版本尚未使用，但后续版本可能作为关键字使用，命名标识符时避免使用这些保留字</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>对变量，方法和类的命名使用的字符序列，称为标识符</p><p>合法标识符规则，命名规范</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量即内存中一个存储区域，该区域的数据可以在同一类型范围内不断变化</p><p>变量时程序最基础的存储单元，包含变量类型，变量名和存储的值</p><p>Java的每个变量必须先声明后使用</p><ul><li></li></ul><h4 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h4><p>（1）基本数据类型</p><ul><li><p>数值型：整数类型（byte,short,int,long），浮点类型（float,double）</p></li><li><p>字符型（char）</p></li><li><p>布尔型（boolean）</p></li></ul><p>（2）引用数据类型</p><ul><li><p>类（class）（字符串变量的声明就是用类来声明）</p></li><li><p>接口（interface）</p></li><li><p>数组（array）</p></li></ul><p>（3）声明位置分类变量</p><ul><li>成员变量：方法体外，类体内声明的变量</li><li>局部变量：方法体内部声明的变量</li></ul><h4 id="2-整型类型"><a href="#2-整型类型" class="headerlink" title="2.整型类型"></a>2.整型类型</h4><p>整型默认使用int型，当遇到不足以表达较大的数，才使用long，声明long类型常量，需要后加”L”</p><h4 id="3-浮点数类型"><a href="#3-浮点数类型" class="headerlink" title="3.浮点数类型"></a>3.浮点数类型</h4><p>浮点数类型常量默认使用double型，声明float型常量，需要后加”F”</p><h4 id="4-基本数据类型转换"><a href="#4-基本数据类型转换" class="headerlink" title="4.基本数据类型转换"></a>4.基本数据类型转换</h4><ul><li>自动转换类型：容量小的类型自动转换为容量大的数据类型</li><li>byte,short,char -&gt; int -&gt; long -&gt; float -&gt; double</li><li>在多种类型数据混合运算时，系统首先自动间=将所有数据转换成容量最大的数据类型，然后进行计算</li><li>强类型转换：自动类型转换的逆过程，可以将容量大的数据类型转换成容量小的数据类型（如将字符串转换为int类）</li></ul><h4 id="5-引用数据类型"><a href="#5-引用数据类型" class="headerlink" title="5.引用数据类型"></a>5.引用数据类型</h4><p>引用数据类型包括：类（如String类）,接口，数组</p><p>​    String类：</p><ul><li>String属于引用数据类型</li><li>声明String类型变量使用一对””</li><li>String可以和8种基本数据类型做运行（字符串连接运算）</li></ul><h4 id="6-变量赋值"><a href="#6-变量赋值" class="headerlink" title="6.变量赋值"></a>6.变量赋值</h4><ul><li>如果变量是基本数据类型，此时赋值的变量是所保存的数据值</li><li>如果变量是引用数据类型，此时赋值的变量所保存的数据的地址值</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h4><p>加减乘除，取余，自增，自减，字符串连接</p><h4 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2.赋值运算符"></a>2.赋值运算符</h4><ul><li>当”=“号两侧数据类型不一致时，可以使用自动类型转换或者使用强制类型转换原则进行处理</li><li>支持连续赋值</li><li>可以使用扩展赋值运算符：+=，-=，*=，/=，%=</li></ul><h4 id="3-比较运算符"><a href="#3-比较运算符" class="headerlink" title="3.比较运算符"></a>3.比较运算符</h4><ul><li><p>比较运算符的结果都是Boolean型</p></li><li><p>Java有个特殊的比较运算符：instanceof，可以检查是否为类的对象</p></li></ul><h4 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h4><ul><li>与或非等等</li><li>逻辑运算符操作的都是boolean类型的变量</li></ul><h4 id="5-位运算符"><a href="#5-位运算符" class="headerlink" title="5.位运算符"></a>5.位运算符</h4><p>类型：</p><ul><li>左移右移</li><li>与运算</li><li>或运算</li><li>取反</li></ul><p>交换两数的方法：</p><ul><li>定义临时变量法</li><li>相加法</li><li>位运算符法</li></ul><h4 id="6-三元运算符"><a href="#6-三元运算符" class="headerlink" title="6.三元运算符"></a>6.三元运算符</h4><ul><li>结构：(条件表达式)? 表达式1 : 表达式2</li><li>返回结果为Boolean类型</li><li>凡是可以使用三元运算符的地方，都可以转换为if-else，但是优先使用三元运算符</li></ul><h3 id="程序流程控制"><a href="#程序流程控制" class="headerlink" title="程序流程控制"></a>程序流程控制</h3><h4 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1.顺序结构"></a>1.顺序结构</h4><p>程序从上到下逐条执行，中间没有任何判断和跳转</p><h4 id="2-分支结构"><a href="#2-分支结构" class="headerlink" title="2.分支结构"></a>2.分支结构</h4><p>（1）根据条件，选择性执行某段代码</p><ul><li>if-elseif-else</li><li>switch-case</li><li>switch-case可以转换为if-elseif-else</li></ul><p>，优先使用switch-case</p><p>（2）switch-case-default:</p><ul><li>根据switch表达式中的值，依次匹配各个case中的常量，一旦匹配成功跳转到相应的case语句中</li><li>一旦执行到break，跳出switch-case结构</li><li>switch的表达式中，只能是如下的6种数据类型之一：byte，short，char，int，String类型</li></ul><h4 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3.循环结构"></a>3.循环结构</h4><p>（1）根据循环条件，重复性执行某段代码</p><ul><li>for循环</li><li>while循环</li><li>do-while循环</li></ul><p>（2）循环语句四个组成部分：</p><ul><li>初始化部分</li><li>循环条件部分</li><li>循环体部分</li><li>迭代部分</li></ul><p>​    执行过程:初始化 -&gt;  循环条件 -&gt; 循环体 -&gt; 迭代 -&gt;  循环-&gt;条件 -&gt; 循环体 -&gt; 迭代 -&gt; …… -&gt;  循环条件</p><p>（3）for循环结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for(初始化; 循环条件; 迭代) &#123;循环体&#125;</span><br></pre></td></tr></table></figure><p>​    不在循环条件内限制次数的结构：for( ; ; )</p><p>（4）while循环结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初始化</span><br><span class="line">while(循环条件)&#123;循环体;迭代&#125;</span><br></pre></td></tr></table></figure><p>​    不在循环条件内限制次数的结构：while(true)</p><p>（5）do-while循环结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初始化</span><br><span class="line">do&#123; 循环体;迭代;&#125;while(循环条件)</span><br></pre></td></tr></table></figure><p>​    do-while的执行过程与for，while不同，会至少执行一次循环体</p><p>​    执行过程: 初始化 -&gt;  循环体 -&gt; 迭代-&gt;  循环条件-&gt;  循环体 -&gt; 迭代-&gt;  ……</p><p>（6）结束循环方式</p><ul><li>循环条件中返回false</li><li>循环体中执行break：结束当前循环</li><li>循环体中执行continue：结束当次循环</li><li>break和coninue在多重循环中，可以通过指定标识结束循环（默认跳出包裹关键字的最近一层循环）</li></ul><h4 id="4-Scanner输入"><a href="#4-Scanner输入" class="headerlink" title="4.Scanner输入"></a>4.Scanner输入</h4><p>从用户输入处获得不同类型的变量，需要用到Scanner类</p><ul><li>导入Scanner的包</li><li>Scanner实例化</li><li>调用Scanner类相关方法来获取指定类型的变量</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="1-数组概述"><a href="#1-数组概述" class="headerlink" title="1.数组概述"></a>1.数组概述</h4><p>（1）数组是多个相同类型数据按照一定顺序排列的集合，并使用一个名字命名，通过编号的方式对数据进行统一管理</p><p>（2）数组相关概念：数组名，元素，索引，数组长度</p><p>（3）数组特点：</p><ul><li>数组本身是引用数据类型，数组中的元素可以是任意数据类型</li><li>创建数据对象会在内存中开辟一整块连续的空间，而数组名中引用的是这块连续空间的首地址</li><li>数组的长度一旦确定，就不能修改</li></ul><h4 id="2-一维数组的使用"><a href="#2-一维数组的使用" class="headerlink" title="2.一维数组的使用"></a>2.一维数组的使用</h4><p>（1）数组的声明与初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">int</span> [] ids</span><br><span class="line"><span class="comment">// 静态初始化</span></span><br><span class="line">ids = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>&#125;</span><br><span class="line"><span class="comment">// 动态初始化：初始化与赋值分离</span></span><br><span class="line">String[] names = <span class="keyword">new</span> String[<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>（2）调用数组指定位置元素</p><p>（3）获取数组长度</p><p>（4）数组遍历</p><p>（5）数组元素默认初始化值</p><p>（6）数组的内存解析</p><p>​    内存结构：</p><ul><li>栈（局部变量）</li><li>堆（对象，数组）</li><li>方法区（常量池，静态域）</li></ul><h4 id="3-多维数据的使用"><a href="#3-多维数据的使用" class="headerlink" title="3.多维数据的使用"></a>3.多维数据的使用</h4><p>Java语言里提供多维数组的语法</p><p>从数组底层运行机制来看，其实没有多维数组</p><p>（1）二维数组的声明与初始化</p><p>（2）调用数组指定位置的元素</p><p>（3）获取数组长度</p><p>（4）遍历二维数组</p><p>（5）数组元素默认初始化</p><p>​    外层数组初始化为地址值</p><p>​    内存元素初始化与一维数组初始化情况相同</p><p>（6）二维数组内存解析</p><h4 id="4-数组算法"><a href="#4-数组算法" class="headerlink" title="4.数组算法"></a>4.数组算法</h4><p>（1）数组元素赋值</p><p>​    二维数组打印杨辉三角</p><p>（2）数组元素计算</p><ul><li>求最值</li><li>求和</li><li>求平均值</li></ul><p>（3）数组复制，反转，查找</p><ul><li>​    java的数组间可以直接赋值，相当于把原数组地址备份了。这两个数组地址值相同，都指向了堆空间唯一的数组实体，这样不能称作数组的复制</li><li>数组的赋值，备份数组应当申请出与原数组相同大小的空间后，一一赋值</li><li>数组反转，使正数n的数与倒数n的数交换</li><li>查找：线性查找，二分查找（必须有序）</li></ul><p>（4）数组排序</p><p>​    排序算法分类：</p><ul><li>内部排序：排序过程都在内存中完成</li><li>外部排序：数据量巨大，必须借助外部存储器完成排序</li></ul><h4 id="5-数组工具类"><a href="#5-数组工具类" class="headerlink" title="5.数组工具类"></a>5.数组工具类</h4><p>Arrays即操作数组的工具类，包含了用来操作数组的各种方法</p><ul><li>判断数组相等</li><li>输出数组</li><li>指定值填充到数组中</li><li>对数组进行排序</li><li>二分查找数组</li></ul><h4 id="6-数组常见异常"><a href="#6-数组常见异常" class="headerlink" title="6.数组常见异常"></a>6.数组常见异常</h4><ul><li>数组角标越界异常</li><li>空指针异常</li></ul><h2 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h2><p>Java面向对象学习的三条主线：</p><ul><li>Java类及类的成员：属性，方法，构造器，代码块，内部类</li><li>面向对象三大特征：封装性，继承性，多态性（抽象性）</li><li>关键字</li></ul><h3 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h3><h4 id="1-面向过程与面向对象"><a href="#1-面向过程与面向对象" class="headerlink" title="1.面向过程与面向对象"></a>1.面向过程与面向对象</h4><p>面向过程：强调功能行为以函数为最小单位，考虑怎么做</p><p>面向对象：将功能封装到对象中，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做</p><p>面向过程中为执行者，面向对象中为指挥者</p><h4 id="2-类与对象"><a href="#2-类与对象" class="headerlink" title="2.类与对象"></a>2.类与对象</h4><p>（1）概念</p><ul><li>类是对一类事物的描述，是抽象的，概念上的定义</li><li>对象是事情存在的该类事物的个体，因而被称为实例(instance)</li></ul><p>（2）类的设计</p><p>​    设计类其实就是设计类的成员</p><p>​    类的基本成员：</p><ul><li>属性（field）：对应类中成语变量</li><li>行为（method）：对应类中的成员方法</li><li>除了上面两个常用的外，还有构造器，代码块，内部类</li></ul><p>（3）对象</p><ul><li>创建类的对象即类的实例化（new）</li><li>调用对象的属性，方法( 对象.属性 对象.方法 )</li><li>一个类的多个对象，每个对象都独立拥有一套类的属性。</li><li>将对象赋值给另一个对象，它们存有相同的对象地址值指向堆空间同一对象实体</li></ul><p>（4）对象内存解析</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944597.png" alt="image-20210418093314518"></p><ul><li>堆：存放对象实例</li><li>栈：指虚拟机栈，用于储存局部变量</li><li>方法区：用于存储已被虚拟机加载的类的信息，常量，静态变量（即编译器编译后的代码等数据）</li></ul><p>（5）成员变量与局部变量</p><ul><li><p>成员变量（属性）定义在类中</p></li><li><p>局部变量是声明在方法内，方法形参，代码块内，构造器形参，构造器内部的变量</p></li><li><p>成员变量（属性）可以在声明时使用权限修饰符指明其权限（封装性）</p></li><li><p>局部变量不可以使用权限修饰符</p></li><li><p>成员变量（属性）根据其类型都有默认初始化值</p></li><li><p>局部变量没有初始化值，所以在调用之前，一定要显式赋值</p></li><li><p>成员变量（属性）加载到堆空间（非static时）</p></li><li><p>局部变量加载到栈空间</p></li></ul><p>（6）对象数组（数组中存储对象的地址）</p><p>（7）匿名对象的使用</p><ul><li>创建的对象，没有显式赋给一个变量名，即为匿名对象</li><li>特征：匿名对象只能使用一次</li><li>使用：可以把一个对象当作一个对象方法的形参，从而达到对象的匿名</li></ul><p>​    </p><h4 id="3-类与方法"><a href="#3-类与方法" class="headerlink" title="3.类与方法"></a>3.类与方法</h4><p>（1）方法：描述类应该有的功能（java内部类中提供了很多方法）</p><p>（2）方法声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 权限修饰符 返回值类型 方法名(形参列表)&#123;方法体&#125;</span></span><br></pre></td></tr></table></figure><p>（3）权限修饰符</p><p>（4）返回值类型：return后返回指定的数据类型</p><p>（5）形参列表：方法可以申请多个形参</p><p>（6）方法的使用中，可以调用当前类的属性和方法，也可以实现递归调用</p><h4 id="4-方法进阶"><a href="#4-方法进阶" class="headerlink" title="4.方法进阶"></a>4.方法进阶</h4><p>（1）方法重载</p><ul><li>重载的概念：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或参数类型不同即可</li><li>重载的特定：与返回值类型无关，只看参数列表</li><li>两同一不同：1.同一个类，相同方法名 2.参数列表个数不同，参数类型不同</li><li>可变个数形参：允许直接定义和多个实参相匹配的形参，使用格式：<code>数据类型... 变量名</code>，形参会以数组的形式传入</li><li>可变个数形参必须声明在末尾，而且只能声明一个 </li></ul><p>（2）方法参数的值的传递机制</p><p>​    形参：方法定义时，声明的小括号内的参数</p><p>​    实参：方法调用时，实际传递给形参的数据</p><p>​    值传递机制：</p><ul><li>参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值（实参和形参都在栈中，都是数据本身）</li><li>参数是引用数据类型，此时实参赋给形参的是变量所保存数据的地址值（实参和形参都在栈中，存储的是数据的地址，数据在堆中）</li></ul><p>（3）递归方法</p><p>递归方法：一个方法体内调用它自身</p><ul><li>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制</li><li>递归一定要向已知方向递归，否则会变成无穷递归，类似于死循环</li></ul><h4 id="5-封装与隐藏"><a href="#5-封装与隐藏" class="headerlink" title="5.封装与隐藏"></a>5.封装与隐藏</h4><p>（1）封装的引出</p><p>程序设计追求：“高内聚，低耦合”：</p><p>高内聚：类的内部数据操作细节自己完成，不允许外部干涉（相同方法高度集中在一个类中）</p><p>低耦合：仅对外暴露少量方法用于使用（类与类之间的依赖关系降低）</p><p>（2）封装设计思想</p><p>​    隐藏该隐藏的，暴露该暴露的</p><ul><li>对于类内某个属性使用private修改符，类外对该属性的操作，只能通过类内设置的方法（隐藏私有属性，暴露公共方法）</li><li>不对外暴露私有方法，单例模式</li></ul><p>（3）访问权限修饰符</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944324.png" alt="image-20210418131340405"></p><p>以上四种权限都可以用来修饰类的内部结构，属性，方法，构造器，内部类</p><p>修饰类只能使用：缺省，public</p><h4 id="6-构造器"><a href="#6-构造器" class="headerlink" title="6.构造器"></a>6.构造器</h4><p>构造器（constructor）又称构造方法</p><p>（1）构造器作用</p><ul><li>创建对象</li><li>初始化对象信息（属性方法）</li></ul><p>（2）构造器说明</p><ul><li>如果没有显示定义的构造器，系统默认提供一个空参构造器。一旦定义了构造器，系统不再提供空参构造器</li><li>定义构造器格式：权限修饰符 类名(形参列表){}，无返回值</li><li>一个类中定义多个构造器，彼此构成重载</li><li>一个类中，至少会有一个构造器</li></ul><h4 id="7-JavaBean"><a href="#7-JavaBean" class="headerlink" title="7.JavaBean"></a>7.JavaBean</h4><p>JavaBean是可重用组件：</p><ul><li><p>类是公共的</p></li><li><p>有个无参的公共构造器</p></li><li><p>有属性，且有对应的get，set方法</p></li></ul><h4 id="8-this"><a href="#8-this" class="headerlink" title="8.this"></a>8.this</h4><p>this表示当前对象，可以调用类的属性，方法，构造器</p><p>（1）this含义</p><ul><li>this在方法内部使用，即这个方法所属对象的引用</li><li>this在构造器内部使用，表示该构造器正在初始化的对象</li></ul><p>（2）this修饰属性和方法</p><ul><li>照类的方法中，可以使用this调用当前对象属性或方法</li><li>可以用this来区分局部变量和属性</li></ul><p>（3）this调用构造器</p><ul><li>在类的构造器中，可以显式使用<code>this(形参列表)</code>的方式，调用本类中指定的其他构造器</li><li>构造器不能调用自己</li></ul><h4 id="9-package与import的使用"><a href="#9-package与import的使用" class="headerlink" title="9.package与import的使用"></a>9.package与import的使用</h4><p>（1）package</p><ul><li>为了更好实现项目中类的管理，提供包的概念</li><li>使用packae声明类或接口所属的包，声明在源文件的首行</li><li>同一个包下，不能命名同名接口和类</li><li>JDK提供了包，其中包含常用的类和接口</li></ul><p>（2）MVC设计模式 </p><ul><li><p>模型层model：主要用于处理数据</p></li><li><p>控制层controller：处理业务逻辑</p></li><li><p>视图层view：显示数据</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944267.png" alt="image-20210418190748964"></p></li></ul><p>（3）import关键字</p><ul><li>在源文件中使用import可以导入指定包下的类，接口</li><li>声明在包声明和类声明之间</li><li>如果类和接口是在java.lang或本包下定义的，则可以省略import结构</li></ul><p>​    </p><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><h4 id="1-继承性概念"><a href="#1-继承性概念" class="headerlink" title="1.继承性概念"></a>1.继承性概念</h4><p>（1）继承性的优点：</p><ul><li>减少代码冗余，提高代码复用性</li><li>便于功能扩展</li><li>是多态性的继承</li></ul><p>（2）继承性格式  class A extends B {}：</p><ul><li><p>A：子类，派生类</p></li><li><p>B：父类，基类</p></li><li><p>子类继承父类后，就可以获得父类中声明的结构，属性，方法</p></li><li><p>子类可以在父类的基础上声明自己的属性或方法，实现功能的拓展</p></li></ul><p>（3）继承规则</p><ul><li>子类继承父类后，仍然获得了父类中私有的属性和方法，但是由于封装性，子类不能直接调用父类的结构</li><li>子类对象“拥有”父类对象的私有属性，但无法直接操作，不属于“继承“</li><li>支持单继承和多继承：一个子类只要一个父类，一个父类可以派生多个子类</li><li>子父类是相对的概念</li><li>如果没有显式声明一个类的父类，则此类继承于java.lang.Object类</li></ul><h4 id="2-方法的重写"><a href="#2-方法的重写" class="headerlink" title="2.方法的重写"></a>2.方法的重写</h4><p>子类根据要求对父类中继承来的方法进行改造，子类方法覆盖父类方法这个过程称为方法的重写</p><p>（1）重写：子类继承父类后，可以对父类中同名同参数的方法，进行覆盖操作</p><p>（2）重载与重写的区别</p><p>（3）重写规则</p><ul><li><p>方法的声明：权限修饰符 返回值类型 方法名(形参列表){方法体}</p></li><li><p>子类重写的方法的方法名和形参列表要与父类被重写的方法相同</p></li><li><p>子类重写的方法的权限修饰符要不小于父类被重写的方法修饰符</p></li><li><p>子类不能重写父类中声明为private权限的方法</p></li><li><p>子类重写的方法返回值要与父类被重写的返回值相同</p></li></ul><h4 id="3-spuer"><a href="#3-spuer" class="headerlink" title="3.spuer"></a>3.spuer</h4><p>与super对应的是this，this代指本对象，super则代指本对象的父类</p><p>super的使用：</p><ul><li>super理解为：父类的</li><li>super可以调用：属性，方法，构造器</li><li>在子类的方法或构造器中，可以通过super调用父类中声明的属性或方法</li><li>super调用构造器，必须在子类构造器首行进行声明</li><li>在类的构造器中，this和super只能二选一（默认情况下调用的是父类中的空参构造器，即super()）</li></ul><h4 id="4-子类对象实例化过程"><a href="#4-子类对象实例化过程" class="headerlink" title="4.子类对象实例化过程"></a>4.子类对象实例化过程</h4><ul><li>创建子类对象，在堆空间，就会加载所有父类中声明的属性</li><li>通过子类构造器构造子类对象时，就会直接或间接调用了其父类的构造器，直至调用到java.lang.Object的空参构造器</li><li>虽然创建子类对象时调用了父类的构造器，但是自始至终就创建了一个对象，即new出来的子类实例</li></ul><h4 id="5-多态性"><a href="#5-多态性" class="headerlink" title="5.多态性"></a>5.多态性</h4><p>对象的多态性：父类的引用指向子类的对象（子类的对象赋给父类引用），可以直接应用到抽象类和接口上。方便传参时，可根据new的对象的不同传入不同的对象</p><p>多态就是同一个接口，使用不同的实例而执行不同操作</p><p>（1）多态的使用</p><ul><li>有了对象多太性以后，我们在编译期，只能调用父类中的声明的方法，但在运行期，我们实际执行了子类重写父类的方法</li><li>编译看左（父类），运行看右（子类）</li><li>多态性使用前提：类的继承关系，方法重写</li><li>多态性主要用于方法，不适用于属性</li></ul><p>（2）虚拟方法的调用</p><ul><li>​    在多态的情况下，子类定义了父类同名同参数的方法，此时父类的方法被称为虚拟方法。</li><li>父类根据赋给它的不同子类对象，动态调用属于子类的该方法</li><li>这样的方法时无法在编译期确定的，只有到方法调用那一刻，解释运行器才会确定所要调用的具体方法（”动态绑定“）</li></ul><h4 id="6-向下转型"><a href="#6-向下转型" class="headerlink" title="6.向下转型"></a>6.向下转型</h4><p>​    在多态中可知，虽然内存加载了子类的方法，但是由于类型是父类，所以编译时无法调用子类的属性和方法，只能调用父类中声明的属性和方法</p><p>为了调用子类特有的属性和方法，我们需要用到强制类型转换符，向下转型</p><p>（1）instanceof操作符</p><ul><li>检验对象是否为某类的对象，返回值为Boolean</li><li>为了避免在向下转型时出现ClassCastException的异常，在向下转型前进行instanceof判断，为true才能进行向下转型  </li></ul><p>（2）向下转型规则</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944489.png" alt="image-20210419073037475"></p><h3 id="Object类的使用"><a href="#Object类的使用" class="headerlink" title="Object类的使用"></a>Object类的使用</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944251.png" alt="image-20210419073502990"></p><h4 id="1-和equals的区别"><a href="#1-和equals的区别" class="headerlink" title="1.==和equals的区别"></a>1.==和equals的区别</h4><p>（1）==运算符</p><ul><li>可以使用在基本数据类型和引用数据类型中</li><li>如果比较的是基本数据类型，比较两个变量保存的数据是否相等（不一定类型相同）</li><li>如果比较的是引用数据类型，比较两个对象的地址值是否相同（两个引用是否指向同一个对象实体）</li></ul><p>（2）equals()方法</p><ul><li>是一个方法而非运算符</li><li>只适用于引用数据类型</li><li>Object类中定义的equals()和==的作用是一样的，即比较比较两个对象的地址值是否相同</li><li>但是String，Date，File等类重写了Object类中的equals()方法，重写以后就是比较两个对象的“实体内容”是否相同了</li></ul><h4 id="2-toString-方法"><a href="#2-toString-方法" class="headerlink" title="2.toString()方法"></a>2.toString()方法</h4><ul><li>当我们输出一个对象的引用时，实际上就是调用当前对象的toString()</li><li>String，Date，File等类重写了Object类中的toString()方法。使得在调用对象的toString时，返回“实体内容”信息</li></ul><h3 id="包装类的使用"><a href="#包装类的使用" class="headerlink" title="包装类的使用"></a>包装类的使用</h3><h4 id="1-包装类介绍"><a href="#1-包装类介绍" class="headerlink" title="1.包装类介绍"></a>1.包装类介绍</h4><p>针对八种基本数据类型有相应的引用类型——包装类（封装类）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944665.png" alt="image-20210419081234938"></p><p>基本数据类型，包装类，String三者的相互转换：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945274.png" alt="image-20210419082428442"></p><h4 id="2-数据类型转换"><a href="#2-数据类型转换" class="headerlink" title="2.数据类型转换"></a>2.数据类型转换</h4><ul><li>基本数据类型 &gt; 包装类：调用包装类的构造器</li><li>包装类 &gt; 基本数据类型：调用包装类的xxxValue()</li><li>基本数据类型，包装类 &gt; String类型：1.使用字符串的连接运算 2.调用String的ValueOf()方法</li><li>String类型 &gt; 基本数据类型，包装类 ：调用包装类的parseXxx(String s)方法</li><li>在JDK5.0后，基本数据类型和包装类已经可以实现自动拆箱与自动装箱</li></ul><h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><p>static让类的实例共享一个属性或方法，无论新建多少个对象都会有这个静态的属性或方法</p><h4 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1.使用方法"></a>1.使用方法</h4><ul><li>static:静态的</li><li>static可以用来修饰：属性，方法，代码块，内部类</li></ul><h4 id="2-修饰属性"><a href="#2-修饰属性" class="headerlink" title="2.修饰属性"></a>2.修饰属性</h4><ul><li><p>实例变量：每个对象都独立拥有一套类中的非静态属性，当修改其中一个对象的非静态属性时，不会导致其他对象相同属性值修改</p></li><li><p>静态变量：多个对象共享同一个静态变量，，当修改其中一个对象的静态属性时，其他对象的静态变量也随之改变</p></li><li><p>静态变量随着类的加载而加载，静态变量的加载要早于对象的创建</p></li><li><p>因为类只会加载一次，所以静态变量在内存中只会存在一份（方法区的静态域中）</p></li><li><p>实例变量与类变量的内存解析</p></li></ul><h4 id="3-修饰方法"><a href="#3-修饰方法" class="headerlink" title="3.修饰方法"></a>3.修饰方法</h4><ul><li>静态方法，只能调用静态的方法或属性；非静态方法既可以调用非静态的方法或属性，也可以调用静态的方法或属性</li><li>静态方法随着类的加载而加载</li></ul><h4 id="4-静态的使用"><a href="#4-静态的使用" class="headerlink" title="4.静态的使用"></a>4.静态的使用</h4><ul><li>确定一个属性用静态：属性可以被多个对象共享，不会随对象不同而不同</li><li>确定一个方法用静态：1.操作静态属性的方法用静态 2.工具类的方法，习惯上声明为静态</li><li>单例设计模式：对某个类只能存在一个对象实例（使用静态让其可以永久驻留内存），减少了系统性能开销</li></ul><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h4 id="1-代码块概念"><a href="#1-代码块概念" class="headerlink" title="1.代码块概念"></a>1.代码块概念</h4><ul><li>代码块的作用：用来初始化类，对象</li><li>代码块只能用static修饰</li></ul><h4 id="2-静态代码块"><a href="#2-静态代码块" class="headerlink" title="2.静态代码块"></a>2.静态代码块</h4><ul><li>内部可以有输出语句</li><li>随着类的加载而执行，而且只执行一次</li><li>作用：初始化类的信息</li><li>一个类可以定义多个静态代码块，而且按声明先后顺序执行</li><li>静态代码块的执行要优先于非静态  </li><li>静态代码块内只能调用静态的属性，静态的方法，不能调用非静态结构</li></ul><h4 id="3-非静态代码块"><a href="#3-非静态代码块" class="headerlink" title="3.非静态代码块"></a>3.非静态代码块</h4><ul><li>内部可以有输出语句 </li><li>随着对象的创建而执行</li><li>每创建一个对象，就执行一次非静态代码块</li><li>作用：可以在创建对象时，对对象属性等进行初始化</li><li>一个类可以定义多个非静态代码块，而且按声明先后顺序执行</li><li>非静态代码块内可以调用静态的属性，静态的方法或非静态的属性，非静态的方法</li></ul><h4 id="2-属性赋值总结"><a href="#2-属性赋值总结" class="headerlink" title="2.属性赋值总结"></a>2.属性赋值总结</h4><ul><li>默认初始化</li><li>显式初始化</li><li>在代码块中赋值</li><li>构造器初始化</li><li>通过<code>对象.属性</code>的方式赋值</li></ul><p>按照由上到下的顺序先后执行</p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><h4 id="1-final概念"><a href="#1-final概念" class="headerlink" title="1.final概念"></a>1.final概念</h4><ul><li><p>final意为最终的，可以禁止对修饰对象进一步的更改修饰</p></li><li><p>final可以用来修饰类，方法，变量</p></li></ul><h4 id="2-final修饰"><a href="#2-final修饰" class="headerlink" title="2.final修饰"></a>2.final修饰</h4><ul><li>被修饰的类不能被其他类所继承</li><li>被修饰的方法不能被重写</li><li>被修饰的变量被称为常量</li><li>被修饰的变量为属性：其可以被赋值的位置有：显式初始化，代码块中初始化，构造器中初始化</li><li>被修饰的变量为局部变量：尤其是修饰形参时，表名此时形参是一个常量。当我们调用此方法时，给常量形参赋一个实参，一旦赋值以后，就只能在方法体内使用此形参，但不能重新赋值</li><li>static final 修饰属性：全局常量</li></ul><h3 id="抽象类与抽象方法"><a href="#抽象类与抽象方法" class="headerlink" title="抽象类与抽象方法"></a>抽象类与抽象方法</h3><p>父类在设计中要求更一般，更通用。但一个父类设计得非常抽象时，以至于它没有任何具体实例，这样得类称为抽象类</p><h4 id="1-abstract的使用"><a href="#1-abstract的使用" class="headerlink" title="1.abstract的使用"></a>1.abstract的使用</h4><ul><li>abstract意为抽象的</li><li>abstract可以修饰的结构：类，方法</li><li>abstract不能修饰私有方法，静态方法，final的方法，final的类</li></ul><h4 id="2-抽象类特点"><a href="#2-抽象类特点" class="headerlink" title="2.抽象类特点"></a>2.抽象类特点</h4><ul><li>abstract修饰的类不能实例化</li><li>抽象类中一定有构造器，便于子类实例化时调用</li><li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关操作</li><li>抽象类的匿名子类</li></ul><h4 id="3-抽象方法特点"><a href="#3-抽象方法特点" class="headerlink" title="3.抽象方法特点"></a>3.抽象方法特点</h4><ul><li>抽象方法只有方法声明，没有方法体</li><li>包含抽象方法的类，一定是一个抽象类</li><li>只有子类重写了父类所有的抽象方法后，此子类才能实例化（否则子类也是个抽象类）</li></ul><h4 id="4-抽象类应用"><a href="#4-抽象类应用" class="headerlink" title="4.抽象类应用"></a>4.抽象类应用</h4><ul><li>模板方法设计模式：抽象类作为多个子类的通用模板，子类在抽象类基础上进行拓展，改造</li><li>模板方法设计可以让固定通用的步骤在父类中写好，然后将易变的部分抽象出来，供不同的子类实现</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="1-接口概述"><a href="#1-接口概述" class="headerlink" title="1.接口概述"></a>1.接口概述</h4><ul><li>有时必须从几个类中派生出一个子类，让子类继承它们所以的属性和方法，但是Java是不支持多重继承的（继承中子类只能有一个父类），这时候就需要用到接口</li><li>有时必须从几个类中抽取一些共同的行为特征。，而它们之间不存在继承关系，这时候也要用到接口</li><li>继承是一个“是不是”的关系，而接口则是“能不能”的关系（体现了如果你是/要……则必须能……）</li><li>接口的本质是契约，标准，规范</li></ul><h4 id="2-接口的使用"><a href="#2-接口的使用" class="headerlink" title="2.接口的使用"></a>2.接口的使用</h4><ul><li>类和接口时并列的两个结构</li><li>接口使用interface来定义</li><li>接口中可以定义全局变量，抽象方法，静态方法，默认方法</li><li>接口中不能定义构造器，这意味着接口不能实例化</li><li>接口中定义的静态方法只能通过接口调用</li><li>通过实现类的对象，可以调用接口中的默认方法（而不是像抽象方法那样要先重写抽象类才能实例化，实现类也可以重写接口的默认方法）</li><li>接口可以通过让类去实现（implements）的方式来使用，如果实现类覆盖了接口所有抽象方法，则实现类可以实例化，如果没有则仍为一个抽象类</li><li>Java可以实现多个接口，弥补了Java单继承性的局限性，格式：<code>class AA extends BB implements CC,DD,EE</code></li><li>接口与接口之间也可以继承，而且是多继承</li></ul><h4 id="3-接口的优点"><a href="#3-接口的优点" class="headerlink" title="3.接口的优点"></a>3.接口的优点</h4><ul><li>接口的具体使用，体现多态性  </li><li>接口实际上可以看作是一种规范，实现其接口的类必须按步骤（规范）实现相关的方法才能运行</li><li>接口的主要用途就是被实现类实现</li></ul><h4 id="4-接口应用"><a href="#4-接口应用" class="headerlink" title="4.接口应用"></a>4.接口应用</h4><p>（1）代理模式：</p><ul><li><p>为其他对象提供一种代理以控制对这个对象的访问</p></li><li><p>安全代理：可以屏蔽真实对象的直接访问</p></li><li><p>远程代理：通过代理类处理远程方法调用</p></li><li><p>延迟加载：先加载轻量级的代理对象，真正需要再加载真实的对象</p></li></ul><p>（2）工厂设计模式</p><ul><li>实现创建者与调用者的分离，即将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的</li><li>简单工厂模式：用来生产同一等级结构中任意产品（对于增加新产品，需要修改已有代码）</li><li>工厂方法模式：用来生成同一等级结构中的固定产品（支持增加任意产品）</li><li>抽象工厂模式：用来生产不同产品族的全部产品（对于增加新的产品，无能为力，支持增加产品族）</li></ul><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>在A类中定义了另一个类B，则A为外部类，B为内部类</p><p>内部类有两种：成员内部类和局部内部类（此类在开发中很少被使用）</p><h4 id="1-成员内部类"><a href="#1-成员内部类" class="headerlink" title="1.成员内部类"></a>1.成员内部类</h4><p>（1）作为外部类的成员</p><ul><li>调用外部类的结构</li><li>可以被static修饰</li><li>可以被4种不同的权限修饰</li></ul><p>（2）作为一个类</p><ul><li>可以在类内定义属性，方法，构造器</li><li>可以被final修饰，表示此类不能被继承</li><li>可以被abstract修饰</li></ul><p>（3）调用</p><ul><li>实例化成员内部类的对象：（通过点运算符：<code>Person.Dog dog = new Person.Dog()</code> ）</li><li>在成员内部类种区分调用外部类的结构（属性方法）：通过this</li></ul><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h3><p>异常：程序执行中发生的不正常情况被称为“异常”（开发过程中的语法错误和逻辑错误不是异常）</p><h4 id="1-异常分类"><a href="#1-异常分类" class="headerlink" title="1.异常分类"></a>1.异常分类</h4><p>（1）Error型：Java虚拟机无法解决的严重问题，一般不编写针对性代码进行处理</p><ul><li>JVM系统内部错误</li><li>资源耗尽</li></ul><p>（2）Exception型：其他因编程原因或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理</p><ul><li>空指针访问</li><li>试图读取不存在的文件</li><li>网络连接中断</li><li>数组角标越界</li></ul><p>Exception分类：编译异常，运行异常</p><h4 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h4><ul><li>遇到错误终止程序运行</li><li>编写程序时，错误检测，错误消息的提示，以及错误的处理</li><li>捕获异常最理想的是在编译期间，但是有的错误只有在运行时才能发生（Exception分类：编译异常，运行异常）</li><li>异常处理中，要在可能出现错误的地方加上检测代码</li><li>过多的if-else封装会导致代码臃肿，可读性差，因此采用异常处理机制</li><li>在开发中运行异常比较常见，所以我们往往针对编译时的异常编写异常捕捉代码</li><li>手动生成一个异常对象，并用throw方法抛出</li></ul><h4 id="3-异常处理"><a href="#3-异常处理" class="headerlink" title="3.异常处理"></a>3.异常处理</h4><p>（1）try-catch-finally</p><ul><li>try{可能出现异常的代码}catch{异常类型 变量名}finally{一定会执行的代码}</li><li>finally是可选的</li><li>try中的代码执行过程中一旦出现异常就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配</li><li>一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常处理，一旦处理完成就跳出当前try-catch结构，有finally则进入finally中</li><li>常用的异常对象处理方式（放在catch中）：1.String getMessage()：打印出异常信息   2.printStackTrace()：打印整个错误对象信息（比较常用）</li><li>在try中声明的变量，再出了try结构后，就不能再被调用</li></ul><p>try-catch相当于将一个编译时可能出现的异常，延迟到运行时出现</p><p>（2）finally解析</p><ul><li>finally声明的是一定会被执行的代码，无论有没有捕捉到异常都会执行</li><li>先数据库连接，输入输出流，网络编程Socket等资源，JVM是不能自动的回收，所以我们需要手动的进行资源的释放。此时的资源释放就要声明到finally中</li></ul><p>（3）throws + 异常处理</p><ul><li>throws + 异常处理写在方法声明处，指明此方法执行时，可能会抛出的异常类型，一旦当方法体执行时，出现异常，仍然会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出</li><li>try-catch-finally是真正的将异常处理掉了，throws的方式只是将异常抛出</li></ul><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h3><h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><p>（1）程序与进程</p><ul><li>程序是为了完成特定任务，用某种语言编写的一组指令的集合，即指一段静态代码，静态对象</li><li>进程是程序的一次执行过程，是一个动态的过程：有自身的产生，存在和消亡的过程</li><li>程序是静态的，进程是动态的。进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</li></ul><p>（2）线程与进程</p><ul><li>进程可以细化为线程，是一个程序内部的一条执行路径</li><li>一个Java应用程序至少有三个线程：main()主线程，gc()垃圾回收线程, 异常处理线程</li><li>线程作为调度和执行的单位，每个线程都拥有独立的运行栈和程序计数器，线程切换的开销小</li><li>一个进程中的多个线程共享相同的内存单元/内存地址空间（从同一堆中分配对象，可以访问相同变量和对象），这使线程间通信更加简洁，高效，但是也带来了安全隐患</li></ul><p>（3）并发与并行</p><ul><li>并行：多个CPU同时执行多个任务</li><li>并发：一个CPU同时执行多个任务</li></ul><h4 id="2-多线程的应用"><a href="#2-多线程的应用" class="headerlink" title="2.多线程的应用"></a>2.多线程的应用</h4><p>（1）多线程的优点</p><ul><li>提高应用程序的响应，对图形化界面更有意义</li><li>提高计算机相同CPU的利用率</li><li>改善程序结构，将长而复杂的进程分为多个线程独立运行，利于理解和修改</li></ul><p>（2）多线程使用场景</p><ul><li>程序需要同时执行多个任务</li><li>程序需要实现一些需要等待的任务（用户输入，文件读写操作，网络操作，搜索）</li><li>需要一些后台运行的程序</li></ul><h4 id="3-线程的创建与使用"><a href="#3-线程的创建与使用" class="headerlink" title="3.线程的创建与使用"></a>3.线程的创建与使用</h4><p>（1）多线程的创建（继承Thread类）</p><ul><li><p>创建一个继承于Tread类的子类</p></li><li><p>重写Thread类的run()：声明此线程执行的操作</p></li><li><p>创建Thread类的子类对象</p></li><li><p>通过此对象调用start()：启动当前线程；调用当前线程的run() </p></li><li><p>不能直接调用run()的方式启动线程</p></li></ul><h4 id="4-线程常用方法"><a href="#4-线程常用方法" class="headerlink" title="4.线程常用方法"></a>4.线程常用方法</h4><ul><li><p>start()：启动线程，调用当前线程的run()</p></li><li><p>run()：线程被调度时执行的操作</p><p>getName()：返回线程名称</p></li><li><p>setName(String name) ：设置线程名称</p></li><li><p>yield()：释放当前CPU的执行权</p></li><li><p>join()：在线程a中调用线程b的jion()，线程a进入阻塞状态直到线程b执行完</p></li><li><p>sleep(long millitime)：让当前线程睡眠，当前线程是阻塞状态</p></li><li><p>isAlive()：判断当前线程是否存活</p></li><li><p>stactic Thread currentThread()：返回当前线程</p></li></ul><h4 id="5-线程优先级设置"><a href="#5-线程优先级设置" class="headerlink" title="5.线程优先级设置"></a>5.线程优先级设置</h4><p>（1）线程的调度</p><ul><li>调度策略：抢占式，高优先级的线程抢占CPU</li><li>调度方法：对同优先级线程组成先进先出队列，使用时间片策略; 对高优先级，使用优先调度的抢占式策略</li></ul><p>（2）线程优先级</p><ul><li>线程优先级等级：MAX_PRIORITY(10)，MIN_PRIORITY(1)，NORM_PRIORITY(5)</li><li>涉及的方法：getPriority()：返回线程优先级；setPriority(int newPriority)：改变线程优先级</li><li>线程创建时继承父线程的优先级</li><li>低优先级只是获得调度的概率低，并非一定是高优先级线程后才被调用</li></ul><h4 id="6-创建多线程方式"><a href="#6-创建多线程方式" class="headerlink" title="6.创建多线程方式"></a>6.创建多线程方式</h4><p>（1）继承Thread方式</p><ul><li>多线程时可用静态变量，让每个线程处理的数据都是在同一个地方，而不是又重新创建一个数据对象</li></ul><p>（2）创建多线程的方式二：实现Runnable接口</p><ul><li>创建一个实现Runnable接口的类（该实现类定义的变量也是线程公用的）</li><li>实现类去实现Runnable中的抽象方法：run()</li><li>创建实现类的对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用start()</li></ul><p>（3）创建多线程的新方法：实现Callable接口</p><ul><li>call()可以有返回值</li><li>call()可以抛出异常，被外面的操作捕获，获得异常的信息</li><li>Callable支持泛型</li></ul><p>（4）创建多线程的新方法：使用线程池</p><ul><li>经常创建销毁，使用量特别大的资源，对性能影响很大</li><li>提前创建多个线程，放入线程池中，使用时直接获取，使用完放回池中，可以避免频繁创建销毁，实现重复利用</li><li>好处：提高了响应速度; 降低资源消耗; 便于线程管理;</li></ul><p>  （5）比较两种创建多线程的方式</p><ul><li>开发中优先现在实现Runnable接口的方式</li><li>原因：1.实现方式没有类的单继承性的局限性  2.实现的方式更适合来处理多个线程有共享数据的情况</li><li>联系：两种方式都需要重写run()，将线程要执行的逻辑声明在run()中</li></ul><h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><h4 id="1-线程的生命周期"><a href="#1-线程的生命周期" class="headerlink" title="1.线程的生命周期"></a>1.线程的生命周期</h4><p>（1）线程状态</p><ul><li>新建：当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</li><li>就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它具备运行的条件，只是没有分配到CPU资源</li><li>运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run()方法定义了线程的操作和功能</li><li>阻塞：线程被人为挂起或执行输入输出操作时，让出CPU并临时中止执行的执行进入阻塞状态</li><li>死亡：线程完成了全部工作或线程被提前强制性中止或出现异常导致结束</li></ul><p>（2）线程状态转换</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945714.png" alt="image-20210423073620432"></p><h4 id="2-线程同步"><a href="#2-线程同步" class="headerlink" title="2.线程同步"></a>2.线程同步</h4><p>（1）多线程存在问题</p><ul><li><p>多个线程执行的不确定性引起执行结构的不稳定</p></li><li><p>多个线程对数据的共享，会造成操作的不完整性，会破坏数据</p></li><li><p>线程的安全问题：（数据重复，数据错误）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945201.png" alt="image-20210423074125257"></p></li><li><p>线程安全问题出现的原因：当某个线程在操作数据时，尚未完成操作，其他线程就参与进来，也操作了车票</p></li></ul><p>（2）线程安全问题的解决</p><ul><li><p>当一个线程在操作共享数据时，其他线程不能参与进来，直到该线程完成操作（即时出现了阻塞也不能改变）</p></li><li><p>通过同步机制解决线程安全问题：1.同步代码块; 2.同步方法；</p></li><li><p>同步代码块：synchroized(同步监视器){需要同步的代码}，操作共享数据的代码，即为需要同步的代码</p></li><li><p>同步监视器就是我们所熟悉的锁（任何一个类的对象都可以充当锁），多个线程必须共用一把锁</p></li><li><p>同步方法：在方法中使用synchroized修饰方法，然后再调用</p></li><li><p>同步方法：1.同步方法仍涉及到同步监视器，只是不需要显式声明; 2.非静态的同步方法监视器是this; 3.静态的同步方法监视器是当前类本身 </p></li><li><p>操作同步代码时实质上是单线程过程，效率低（一个线程操作，其他线程等待）</p></li></ul><h4 id="3-线程死锁问题"><a href="#3-线程死锁问题" class="headerlink" title="3.线程死锁问题"></a>3.线程死锁问题</h4><p>（1）死锁原理</p><ul><li>不同线程分别占用了对方需要的同步资源，都在等待对方放弃自己需要的同步资源，就会形成线程的死锁</li><li>出现死锁后，不会出现异常或错误提示，只是所有线程都处在阻塞状态，无法继续</li></ul><p>（2）解决方法</p><ul><li>专门的算法，原则</li><li>尽量减少同步资源的定义</li><li>尽量避免嵌套同步</li></ul><h4 id="4-Lock-锁"><a href="#4-Lock-锁" class="headerlink" title="4.Lock(锁)"></a>4.Lock(锁)</h4><p>Java提供了更加强大的线程同步机制——通过显式定义同步锁对象来实现同步，其同样可以解决线程安全问题</p><p>（1）Lock与synchroized的异同</p><ul><li>同：两者都可以解决线程问题</li><li>异：synchroized执行同步代码后，自动释放同步监视器; Lock需要手动启动同步（lock()），手动结束同步（unlock()）</li><li>Lock只有代码块锁，synchroized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好，并具有更好的扩展性</li></ul><p>（2）使用顺序</p><p>Lock -&gt; 同步代码块-&gt; 同步方法</p><h4 id="5-线程通信"><a href="#5-线程通信" class="headerlink" title="5.线程通信"></a>5.线程通信</h4><p>（1）常用方法</p><ul><li>wait()：一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器</li><li>notify()：一旦执行此方法，就会唤醒被wait的一个线程，如果有多个线程被wait，就唤醒优先级高的线程</li><li>notifyAll()：一旦执行此方法，就会唤醒所有被wait的线程</li></ul><p>以上三个方法必须用在同步代码块或同步方法中</p><p>（2）sleep()和wait()的异同</p><ul><li>同：一旦执行方法，都可以使得当前得线程进入阻塞状态</li><li>异：1.声明位置不同   2.调用要求不同 3.是否释放同步监视器</li></ul><h2 id="Java常用类"><a href="#Java常用类" class="headerlink" title="Java常用类"></a>Java常用类</h2><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><h4 id="1-String概述"><a href="#1-String概述" class="headerlink" title="1.String概述"></a>1.String概述</h4><ul><li>String类代表字符串</li><li>Stirng是一个final类（ 不可被继承），代表不可变的字符串序列</li><li>字符串是常量，值在创建后不能更改</li><li>String对象的字符内容是存储在一个字符数组value[]中的</li><li>通过字面量的方式（区别于new）给一个字符串赋值，此时字符串声明在字符串常量池中（方法区）</li><li>字符串常量池不会存储相同内容的字符串，故栈中不同的局部变量如果赋相同字面量，实际指向方法区同一位置（地址相同）</li></ul><h4 id="2-String实现接口"><a href="#2-String实现接口" class="headerlink" title="2.String实现接口"></a>2.String实现接口</h4><ul><li>Serializable接口：表示字符串支持序列化</li><li>Comparable接口：表示字符串可以比较大小</li></ul><h4 id="3-不可变性体现"><a href="#3-不可变性体现" class="headerlink" title="3.不可变性体现"></a>3.不可变性体现</h4><ul><li>当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值</li><li>对现有的字符串进行连接操作、修改操作时，也需要重新指定内存区域赋值</li></ul><h4 id="4-String实例化"><a href="#4-String实例化" class="headerlink" title="4.String实例化"></a>4.String实例化</h4><p>（1）String实例化方式：</p><ul><li>通过字面量定义（数据存储在在方法区字符串常量池中，字符串作为常量，各变量共享一个数据空间）：<code>String s1 = &quot;2333&quot;</code></li><li>通过new  + 构造器（字符串数据仍然存储在常量池中，但是字符串的引用值存储在堆中，每创建一个字符串都会在堆中开辟新的空间存储字符串的引用值）：<code>String s3  = new String(&quot;javaEE&quot;)</code></li></ul><p>（2）String s3  = new String(“test”)对象个数</p><ul><li>两个对象：一个是堆空间中的new结构，另一个char[]对应变量池中的数据</li></ul><p>（3）字符串的拼接</p><ul><li><p>常量与常量的拼接结果在常量池，且常量池中不会存在相同内容的变量</p></li><li><p>只要拼接的两个对象中其中一个为变量，结果位于堆中</p></li><li><p>拼接结果调用intern方法，返回值就在常量中</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945850.png" alt="image-20210423113251323"></p></li></ul><h4 id="5-String常用方法"><a href="#5-String常用方法" class="headerlink" title="5.String常用方法"></a>5.String常用方法</h4><ul><li>length()：返回字符串长度</li><li>charAt()：返回某索引处的字符</li><li>isEmpty()：判断是否为空字符串</li><li>toLowerCase()：转换为小写</li><li>toUpperCase()：转换为大写</li><li>trim()：返回字符串副本，忽略空白处</li><li>equals()：比较字符串内容是否相同</li><li>concat()：将指定字符串连接到此字符串结尾</li><li>compareTo：比较两个字符串大小</li><li>substring()：截取出新的字符串</li><li>endsWith：测试字符串是否以指定的后缀结束</li><li>startsWith：测试此字符串是否以指定的前缀开始</li><li>contains：字符串是否包含指定char值序列</li><li>indexOf：返回指定子字符串第一次出现处的索引</li><li>rplace(): 替换掉字符串中指定的子字符串</li><li>replaceAll()：替换掉字符串所匹配正则表达式的子字符串</li><li>matches()：判断字符串是否匹配给定的正则表达式</li><li>split()：根据给定的正则表达式的匹配拆分此字符串</li></ul><h4 id="6-String数据类型转换"><a href="#6-String数据类型转换" class="headerlink" title="6.String数据类型转换"></a>6.String数据类型转换</h4><p>（1）String与基本数据类型，包装类的转换</p><ul><li>String –&gt; 基本数据类型，包装类：调用包装类的静态方法：parseXxx(str)</li><li>基本数据类型，包装类 –&gt; String：调用String重载的valueOf(xxx)</li></ul><p>（2）String与char[]的转换</p><ul><li>String –&gt; char[]：调用String的toCharArray()</li><li>char[] –&gt; String：调用String的构造器</li></ul><h4 id="7-String，StringBuffer，StringBuilder"><a href="#7-String，StringBuffer，StringBuilder" class="headerlink" title="7.String，StringBuffer，StringBuilder"></a>7.String，StringBuffer，StringBuilder</h4><p>（1）比较</p><ul><li>String:不可变的字符序列，底层使用char[]存储</li><li>StringBuffer：可变的字符序列，线程安全，效率低，底层使用char[]存储</li><li>StringBuffer：可变的字符序列，线程不安全，效率高，底层使用char[]存储</li><li>执行效率：StringBuilder &gt; StringBuffer &gt; String，开发中推荐使用StringBuffer</li></ul><p>（2）StringBuffer常用方法</p><ul><li>append()：提供很多append()方法，用于进行字符串拼接</li><li>delete()：删除指定位置的内容</li><li>replace()：替换指定索引位置的内容</li><li>insert()：在指定位置插入xxx</li><li>reverse()：把当前字符序列逆转</li></ul><h3 id="Java比较器"><a href="#Java比较器" class="headerlink" title="Java比较器"></a>Java比较器</h3><p>Java中的对象，正常情况下只能进行比较：==  或 != ，不能使用 &gt; 或 &lt; 的。但是在开发场景中我们需要对多个对象进行排序，就要用到两个接口：Comparable 或  Comparator</p><h4 id="1-Comparable接口"><a href="#1-Comparable接口" class="headerlink" title="1.Comparable接口"></a>1.Comparable接口</h4><p>（1）Comparable接口使用</p><ul><li>像String，包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出比较两个对象大小的方式</li><li>可以重写compareTo(obj)的规则</li></ul><p>（2）自定义类实现Comparable自然排序</p><ul><li>对于自定义类，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法，在其中指明如何排序</li><li>可以重写compareTo(obj)的规则：<ol><li>​    如果当前对象大于obj,返回正整数</li><li>​    如果当前对象小于obj,返回负整数</li><li>​    如果当前对象大于obj,返回零</li></ol></li></ul><h4 id="2-Comparator接口"><a href="#2-Comparator接口" class="headerlink" title="2.Comparator接口"></a>2.Comparator接口</h4><ul><li>重写compare(Object o1，Object o2)方法，比较o1和o2大小<ol><li>​    方法返回正整数，则表示o1大于o2</li><li>​    返回0，表示相等</li><li>​    返回负整数，表示o1小于o2</li></ol></li><li>Comparable接口的实现类的对象在任何位置都可以比较大小</li><li>Comparator接口属于临时性的比较</li></ul><h3 id="其他常用类"><a href="#其他常用类" class="headerlink" title="其他常用类"></a>其他常用类</h3><h4 id="1-时间类"><a href="#1-时间类" class="headerlink" title="1.时间类"></a>1.时间类</h4><h4 id="2-System类"><a href="#2-System类" class="headerlink" title="2.System类"></a>2.System类</h4><h4 id="3-Math类"><a href="#3-Math类" class="headerlink" title="3.Math类"></a>3.Math类</h4><h4 id="4-BigInteger和BigDecimal"><a href="#4-BigInteger和BigDecimal" class="headerlink" title="4.BigInteger和BigDecimal"></a>4.BigInteger和BigDecimal</h4><h2 id="枚举类与注解"><a href="#枚举类与注解" class="headerlink" title="枚举类与注解"></a>枚举类与注解</h2><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><h4 id="1-枚举类的使用"><a href="#1-枚举类的使用" class="headerlink" title="1.枚举类的使用"></a>1.枚举类的使用</h4><ul><li>类的对象只能是有限个，确定的，我们称此类为枚举类</li><li>当需要定义一组常量时，强烈建议使用枚举类</li><li>如果枚举类只有一个对象，则可以作为单例模式实现</li></ul><h4 id="2-枚举类的定义"><a href="#2-枚举类的定义" class="headerlink" title="2.枚举类的定义"></a>2.枚举类的定义</h4><ul><li><p>方式一：jdk5之前，自定义枚举类</p><ol><li>声明对象属性（private final修饰）</li><li>私有化类的构造器</li><li>提供当前多个枚举类的多个对象</li><li>其他诉求：获得枚举类对象的属性，提供toString()</li></ol></li></ul><ul><li><p>方式二：jdk5，可以使用enum关键字定义枚举类</p><ol><li><p>创建当前枚举类的对象，多个对象用“,”隔开，末尾对象”;”结束</p></li><li><p>声明对象属性（private final修饰）</p></li><li><p>提供当前多个枚举类的多个对象</p></li><li><p>其他诉求：获得枚举类对象的属性</p></li></ol></li></ul><h4 id="3-Enum类中常用方法"><a href="#3-Enum类中常用方法" class="headerlink" title="3.Enum类中常用方法"></a>3.Enum类中常用方法</h4><ul><li><p>values：返回枚举类型的对象数组</p></li><li><p>valueOf(String str)：可以把一个字符串转为对应枚举类对象</p></li><li><p>toString()：返回当前枚举类对象常量名称</p></li></ul><h4 id="4-枚举类实现接口"><a href="#4-枚举类实现接口" class="headerlink" title="4.枚举类实现接口"></a>4.枚举类实现接口</h4><ul><li>实现接口，在enum类中实现抽象方法</li><li>让枚举类的对象分别实现接口中的抽象方法</li></ul><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="1-注解说明"><a href="#1-注解说明" class="headerlink" title="1.注解说明"></a>1.注解说明</h4><ul><li>注解是代码里的特殊标记，这些标记可以在编译，类加载，运行时被读取，并执行响应操作。</li><li>利用注解，我们可以在不改变原有逻辑的情况下，在源文件嵌入一些补充信息。框架 = 注解 + 反射 + 设计模式</li></ul><h4 id="2-注解示例"><a href="#2-注解示例" class="headerlink" title="2.注解示例"></a>2.注解示例</h4><ul><li>生成文档的相关注解</li><li>在编译时进行格式检查</li><li>跟踪代码依赖性，实现替代配置文件功能</li><li>spring框架中关于“事务”的管理</li><li>Junit单元测试中也有大量注解的使用</li></ul><h4 id="3-JDK内置基本注解"><a href="#3-JDK内置基本注解" class="headerlink" title="3.JDK内置基本注解"></a>3.JDK内置基本注解</h4><ul><li>@Override：限定重写父类方法，在编译前校验该方法是否是重写父类的</li><li>@Deprecated：用于表示所修饰的元素（已过时）。通常是因为所修饰的结构危险或者存在更好的选择</li><li>@SuppressWarnings：抑制编译器警告</li></ul><h4 id="4-自定义注解"><a href="#4-自定义注解" class="headerlink" title="4.自定义注解"></a>4.自定义注解</h4><ul><li>注解声明为@interface</li><li>内部定义成员，通常用value表示</li><li>可以指定成员的默认值，使用default定义</li><li>如果自定义注解没有成员，表明是一个标识作用</li><li>如果注解有成员，在使用注解时，需要指明成员的类</li><li>自定义注解必须配送注解的信息处理流程（使用反射）才用意义</li><li>自定义注解通过都非指明两个元注解：Retention，Target</li></ul><h4 id="5-基本元注解"><a href="#5-基本元注解" class="headerlink" title="5.基本元注解"></a>5.基本元注解</h4><p>元注解：对现有的注解进行解释说明的注解</p><ul><li>Rentention：指定所修饰的Annotation的生命周期，只有生命为RUNTIME生命周期的注解才能通过反射获取</li><li>Target：用于指定被修饰的Annotation能用于修饰哪些程序元素</li><li>Documented：表示所修饰的注解被javadoc解析时，保留下来</li><li>Inherited：被它修饰的Annotation将具有继承性</li></ul><p>通过反射可以获取注解信息</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合，数组都是对多个数据进行存储操作的结构，简称Java容器（这里的存储主要是指内存层面的存储。不涉及到持久化的存储）</p><p>Java集合就像一种容器，可以动态地把多个对象的引用放入容器中</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945892.png" alt="image-20210424101354876"></p><h3 id="数组简介"><a href="#数组简介" class="headerlink" title="数组简介"></a>数组简介</h3><h4 id="1-数组存储缺点"><a href="#1-数组存储缺点" class="headerlink" title="1.数组存储缺点"></a>1.数组存储缺点</h4><ul><li>一旦初始化以后，其长度就不可修改了</li><li>数组中提供的方法非常有限，对于添加，删除，插入数据等操作，非常不便，效率不高</li><li>获取数据实际元素个数没有现成的属性和方法</li><li>数组存储数据特点：有序，可重复。对于无序，不可重复的需求，不能满足</li></ul><h3 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h3><p>单列数据，定义了存储一组对象的方法集合</p><h4 id="1-Collection接口继承树"><a href="#1-Collection接口继承树" class="headerlink" title="1.Collection接口继承树"></a>1.Collection接口继承树</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945760.png" alt="image-20210424101922654"></p><h4 id="2-Collection接口常用方法"><a href="#2-Collection接口常用方法" class="headerlink" title="2.Collection接口常用方法"></a>2.Collection接口常用方法</h4><ul><li>add(Object e)：将元素e添加到集合coll中</li><li>size()：获得添加的元素个数</li><li>addAll(Collection coll1)：将coll1集合中的元素添加到当前的集合中</li><li>isEmpty()：判断当前集合是否为空</li><li>clear()：清空集合元素</li><li>contains(Object obj)：判断当前集合是否包含obj </li><li>containsAll(Collecion coll1)：判断colls中的所有元素是否都存在于当前集合中</li><li>remove(Object obj)：从当前集合中移除obj元素</li><li>remove(Collecion coll1)：从当前集合中移除coll1中所有元素（移除差集）</li><li>retain(Collecion coll1)：获取当前集合与coll1集合的交集，并返回给当前集合</li><li>equals(Object obj)：要想返回true，需要当前集合和形参集合的元素都相同</li><li>hasCode()：返回当前对象的哈希值</li><li>toArray()：集合—-&gt;数组（数组—&gt;集合：调用Araays类的静态方法asList()）</li></ul><h4 id="3-集合遍历"><a href="#3-集合遍历" class="headerlink" title="3.集合遍历"></a>3.集合遍历</h4><p>（1）迭代器Iterator接口</p><ul><li>Iterator对象称为迭代器（设计模式的一种），主要用于遍历Collection集合的元素</li><li>迭代器模式：提供一种方法访问一个容器对象中各个元素，而又不需要暴露该对象的内部细节（迭代器，为容器而生）</li><li>迭代器Iterator内部方法：hasNext()和next()</li><li>迭代器执行原理：hasNext()判断是否还有下个元素; next()让指针下移</li><li>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都集合在第一个元素之前</li><li>remove()可以在遍历时，删除集合中的元素（区别于Collection接口的remove方法，这个要先调用next() ）</li></ul><p>（2）foreach循环遍历集合元素</p><ul><li>其内部仍然调用了迭代器</li><li>for(集合元素的类型 局部变量:集合对象)</li><li>foreach可以遍历数组和集合</li></ul><h4 id="4-List接口"><a href="#4-List接口" class="headerlink" title="4.List接口"></a>4.List接口</h4><p>存储有序的，可重复的数据（“动态”数组）</p><p>（1）List三个实现类ArrayList，LinkedList，Vector的异同</p><ul><li>同：都实现了List接口，存储数据特点相同：存储有序的，可重复的数据</li><li>异：<ol><li>ArrayList：底层使用Object[] elementData存储；作为List接口主要实现类，线程不安全，效率高；</li><li>LinkList：底层使用双向链表存储；对于频繁的插入，删除操作，使用此类效率比ArrayList高；</li><li>Vector：List接口古老实现类;线程安全，效率低；底层使用Object[] elementData存储</li></ol></li></ul><p>（2）List常用方法</p><ul><li>增：add(Object obj)</li><li>删：remove(int index)</li><li>改：set(int index, Object ele)</li><li>查：get(int inedx)</li><li>插：add(int index, Object ele)</li><li>长度：size()</li><li>遍历方法：<ol><li>Iterator迭代器方法</li><li>增强for循环</li><li>普通循环</li></ol></li></ul><h4 id="5-Set接口"><a href="#5-Set接口" class="headerlink" title="5.Set接口"></a>5.Set接口</h4><p>存储无序的（set的底层也是数组，但是存储的物理顺序是在申请空间的随机位置），不可重复的数据（数学概念的“集合”）</p><p>Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法</p><p>（1）Set接口的实现类</p><ul><li>HashSet：作为Set接口的主要实现类，线程不安全，可以存储null值</li><li>LinkedHashSet：作为HashSet的子类，遍历其内部数据时，可以按照添加顺序遍历</li><li>TreeSet：可以按照添加对象的指定属性进行排序（底层为红黑树）</li></ul><p>（2）Set解析</p><ul><li>无序性：不等同于随机性，存储的数据在底层数组中并发按照数组索引的顺序添加，而是根据数据的哈希值决定的</li><li>不可重复性：相同的元素只能添加一个</li></ul><p>（3）HashSet元素插入过程</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945099.png" alt="image-20210424182729653"></p><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><p>双列数据，保存具有映射关系“key-value”的集合（ y=f(x) ）</p><h4 id="1-Map实现"><a href="#1-Map实现" class="headerlink" title="1.Map实现"></a>1.Map实现</h4><p>有两种实现类：HashMap（主要）和Hashtable（古老）</p><ul><li>HashMap：Map的主要实现类，线程不安全，效率高，可以存储null的key和value（底层为：数组+链表+红黑树）<ol><li>LinkedHashMap：保证在遍历map元素时，可以按照添加的顺序实现遍历（有一对指向前和指向后节点的指针，对频繁的遍历操作，执行效率高于HashMap）</li></ol></li><li>TreeMap：保证按照添加的key-value对进行排序，实现排序遍历（key自然排序或自定义排序，底层为红黑树 ）</li><li>Hashtable：作为古老的实现类，线程安全，效率低，不能存储null的key和value<ol><li>Properties：常用于处理配置文件，key 和 value都是String类型</li></ol></li></ul><h4 id="2-Map接口继承树"><a href="#2-Map接口继承树" class="headerlink" title="2.Map接口继承树"></a>2.Map接口继承树</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945354.png" alt="image-20210424102038816"></p><h4 id="3-Map结构理解"><a href="#3-Map结构理解" class="headerlink" title="3.Map结构理解"></a>3.Map结构理解</h4><ul><li>Map中的key：无序的，不可重复的，使用Set存储所有的key ———–&gt;key所在的类要重写equals()和hashCode()</li><li>Map中的value:无序的，可重复的，使用Collection存储所有的value————&gt; value所在类要重写equals()</li><li>一个键值对：key-value构成一个Entry对象</li><li>Map中的entry：无序的，不可重复的，使用Set存储所有的entry</li></ul><h4 id="4-HashMap底层实现原理"><a href="#4-HashMap底层实现原理" class="headerlink" title="4.HashMap底层实现原理"></a>4.HashMap底层实现原理</h4><p>（1）jdk7</p><ul><li><code>HashMap map = new HashMap()</code>：实例化后，底层创建了长度为16的一维数组Entry[] table</li><li><code>map.put(key1,value1)</code>：首先调用key所在；类的hasCode计算key哈希值，得到在Entry数组的存放位置</li><li>如果此位置上的数据为空，则添加成功</li><li>如果此位置上的数据不为空，比较key和已存在的数据的哈希值<ol><li>如果key的哈希值与已存在的数据哈希值都不相同，则添加成功</li><li>如果与其中一个数据哈希值相同，继续比较其value值：如果返回false，则添加成功，如果返回true，则使用替换相同key的value值</li></ol></li></ul><p>（2）jdk8</p><p>数组+链表+红黑树</p><h4 id="5-Map常用方法"><a href="#5-Map常用方法" class="headerlink" title="5.Map常用方法"></a>5.Map常用方法</h4><p>（1）添加，删除，修改操作</p><ul><li>Object put(Object key, Object value)：将指定的key-value添加到当前map对象中</li><li>void putAll(Map m)：将m中所有的key-value放到当前map中</li><li>Object remove(Object key)：移除指定key-value对，并返回value</li><li>void clear()：清空当前map中所有数据</li></ul><p>（2）元素查询操作</p><ul><li>Object get(Object key)：获取指定key对应的value</li><li>boolean containsKey(Object key)：是否包含指定key</li><li>boolean containsValue(Object Value)：是否包含指定Value</li><li>int size()：返回map中key-value个数</li><li>boolean isEmpty()：判断当前map是否为空</li><li>boolean equals(Object obj)：判断当前map和参数对象obj是否相等</li></ul><p>（3）元视图操作的方法</p><ul><li>Set keySet()：返回所有key构成的Set集合</li><li>Collection values()：返回所有value构成的Collection集合</li><li>Set entrySet()：返回所有key-value对构成的Set集合</li></ul><h4 id="6-TreeMap"><a href="#6-TreeMap" class="headerlink" title="6.TreeMap"></a>6.TreeMap</h4><p>用于需要排列的key-value，可以定制排序</p><h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><p>Collections是一个操作Set，List和Map等集合的工具类</p><h4 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a>1.常用方法</h4><p>（1）排序操作（抽象方法）</p><ul><li>reverse(List)：反转List中元素的顺序</li><li>shuffle(List)：对List集合元素进行随机排序</li><li>sort(List)：根据元素的自然顺序对指定List集合元素按升序排序</li><li>sort(List, Comparator)：根据指定的Comparator产生的顺序对List集合进行排序</li><li>swap(List, int i, int j )：将指定list集合的i和j处元素进行交换</li></ul><p>（2）查找替换</p><ul><li>Object max(Collection)：根据自然顺序返回最大元素</li><li>Object max(Collection, Comparator)：根据Comparator指定顺序，返回最大元素</li><li>Object min(Collection)</li><li>Object min(Collection, Comparator)</li><li>int frequency(Collection, Object)：返回指定集合元素出现次数</li><li>void copy(List dest, List src)：将src中的内容复制到dest中</li><li>boolean replaceAll(List list, Object oldVal, Object newVal)：使用新值替换List对象的所有旧值</li></ul><p>（3）同步控制</p><p>Collections类提供多个synchromizedXxx()方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发范围集合时的线程安全问题</p><p>将线程不安全的集合类型转换为线程安全的类型</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p>（1）数据间的逻辑关系：</p><ul><li>集合</li><li>线性关系（对应Java中的顺序表，链表，栈，队列）</li><li>树形结构（对应java中的二叉树）</li><li>网状结构（对应java中的图）</li></ul><h4 id="2-真实结构"><a href="#2-真实结构" class="headerlink" title="2.真实结构"></a>2.真实结构</h4><ul><li>顺序表（静态数据结构）：Array，ArrayList</li><li>链表（动态数据结构）：LinkedList</li></ul><h4 id="3-抽象结构"><a href="#3-抽象结构" class="headerlink" title="3.抽象结构"></a>3.抽象结构</h4><ul><li>栈</li><li>队列</li><li>树</li><li>图</li></ul><h2 id="泛型与File"><a href="#泛型与File" class="headerlink" title="泛型与File"></a>泛型与File</h2><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="1-泛型概述"><a href="#1-泛型概述" class="headerlink" title="1.泛型概述"></a>1.泛型概述</h4><p>（1）泛型的出现</p><ul><li>泛型相当于标签，来确定一个容器实际存放什么类型的对象</li><li>把元素的类型设计为一个参数，这个类型参数叫做泛型</li></ul><p>（2）泛型说明</p><ul><li>泛型允许在定义类，接口时通过一个标识表示类中某个属性的类型或者某个方法的返回值及参数类型</li><li>List<String>表明List只能存放字符串类型对象</String></li></ul><p>（3）泛型相对Object</p><ul><li>解决元素储存的安全性问题</li><li>解决获取数据元素时，需要类型强制转换的问题</li></ul><h4 id="2-泛型的使用"><a href="#2-泛型的使用" class="headerlink" title="2.泛型的使用"></a>2.泛型的使用</h4><p>（1）在集合中使用泛型</p><ul><li>ArrayList <Integer> list =  new ArrayList <Integer>()</Integer></Integer></li><li>编译时就会进行类型检查，保证数据安全</li><li>避免强转操作</li></ul><p>（2）泛型使用总结</p><ul><li><p>在实例化集合类时，可以指明具体的泛型类型</p></li><li><p>指明完以后，在集合类或接口中函数定义类或接口时，内部结构使用到类的泛型的位置，都指定为实例化时的泛型类型</p></li><li><p>泛型的类型必须是类，不能是基本数据类型，需要用到基本数据类型的位置用包装类代替</p></li></ul><h4 id="3-泛型结构"><a href="#3-泛型结构" class="headerlink" title="3.泛型结构"></a>3.泛型结构</h4><p>（1）泛型类</p><ul><li>类的内部结构就可以使用类的泛型</li><li>如果定义了泛型类，实例化时没有指明类的泛型，默认为Object类型</li><li>如果定义的类带泛型，建议在实例化时指明类的泛型</li><li>子类在继承泛型的父类时指明了泛型类型，则实例子类对象时，不在需要指明泛型</li><li>泛型不同的引用不能互相赋值</li><li>静态方法中不能使用类的泛型</li><li>子类除了指定后保留父类的泛型，也可以增加自己的泛型</li></ul><p>（2）泛型方法</p><ul><li>在该方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系（泛型方法所属的类是不是泛型类都没有关系）</li><li>泛型方法在调用时，指明泛型参数的类型</li><li>泛型方法，可以声明为静态</li></ul><p>（3）通配符</p><h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><p>File类属于IO流的内容，可以新建，删除，重命名文件和目录，但是File列不能访问文件本身，访问文件内容需要输入\输出流</p><h4 id="1-常用方法-1"><a href="#1-常用方法-1" class="headerlink" title="1.常用方法"></a>1.常用方法</h4><p>（1）获取功能</p><p>（2）重命名功能</p><p>（3）判断功能</p><p>（4）创建，删除方法</p><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="IO流原理与分类"><a href="#IO流原理与分类" class="headerlink" title="IO流原理与分类"></a>IO流原理与分类</h3><h4 id="1-IO原理"><a href="#1-IO原理" class="headerlink" title="1.IO原理"></a>1.IO原理</h4><ul><li>I/O技术用于处理设备之间的数据传输，如读写文件，网络通讯</li><li>在 Java中，数据的输入输出以流（stream）的方式进行</li><li>java.io包下提供各种“流”类和接口，以获得不同种类的数据，并通过标准的方法输入或输出数据</li></ul><h4 id="2-流的分类"><a href="#2-流的分类" class="headerlink" title="2.流的分类"></a>2.流的分类</h4><ul><li><p>操作数据单位分类：字节流（InputStream/OutputStream），字符流（Reader/Writer）</p></li><li><p>流向分类：输入流，输出流</p></li><li><p>流的角色分类：节点流，处理流（应用上为缓冲流）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945866.png" alt="image-20210505075809772"></p></li></ul><h3 id="文件流操作"><a href="#文件流操作" class="headerlink" title="文件流操作"></a>文件流操作</h3><h4 id="1-读取文件"><a href="#1-读取文件" class="headerlink" title="1.读取文件"></a>1.读取文件</h4><p>从硬盘文件读入数据到内存</p><ul><li><p>实例化File类对象，指明操作文件</p></li><li><p>提供具体流</p></li><li><p>数据的读入方法与结束判断</p><p>​    1. read()：返回读入的一个字符，如果达到文件末尾，返回-1）</p><p>​    2. read(char[] cbuf )：read()方法的重载，返回每次读入cbuf数组的字符个数，如果达到文件末尾返回-1</p></li><li><p>流的关闭（往往要通过异常处理保证流资源一定可以执行关闭操作）</p></li><li><p>读入的文件一定要存在，否则会报出异常</p></li></ul><h4 id="2-写出文件"><a href="#2-写出文件" class="headerlink" title="2.写出文件"></a>2.写出文件</h4><p>从内存中写出数据到硬盘文件</p><ul><li>提供File类对象，指明写出到的文件<ol><li>如果File对应文件不存在，则自动创建此文件</li><li>如果File对应文件存在，则有覆盖和追加两种形式的操作</li></ol></li><li>提供FileWriter的对象，用于数据写出<ol><li>流的构造器为：FileWriter(file,false) / FileWriter(file)，则对原有文件进行覆盖</li><li>流的构造器为：FileWriter(file, ture),则在源文件上追加内容</li></ol></li><li>写出操作</li><li>流资源关闭</li></ul><h4 id="3-字符流与字节流"><a href="#3-字符流与字节流" class="headerlink" title="3.字符流与字节流"></a>3.字符流与字节流</h4><ul><li>操作数据单位分类：字节流（InputStream/OutputStream），字符流（Reader/Writer）</li><li>字符流不能处理非文本文件，对于文本文件使用字符流处理</li><li>字节流不能处理文本文件，对于非文本文件使用字节流处理</li></ul><h4 id="4-缓冲流"><a href="#4-缓冲流" class="headerlink" title="4.缓冲流"></a>4.缓冲流</h4><ul><li>缓冲流比于节点流，提供了流的读取，写入的速度</li><li>使用缓冲流要比使用节点流，多一步造缓冲流的操作（在节点的基础上制造缓冲流）</li><li>资源关闭上，先关闭外层的流，再关闭内层的流（关闭外层流的同时，内层流可以自动关闭，内层流的关闭程序可以省略）</li><li>缓冲流可以提高文件读入写出速度，因为内部提供了一个缓冲区</li></ul><h4 id="5-随机存取文件流"><a href="#5-随机存取文件流" class="headerlink" title="5.随机存取文件流"></a>5.随机存取文件流</h4><ul><li>RandomAceessFile类实现了DataInput、DataOutput两个接口，该类既可以读也可以写</li><li>RandomAceessFile类支持随机访问的形式，程序可以直接跳到文件任意地方来读写文件</li><li>RandomAceessFile对象包含一个记录指针，用于标识当前读写位置</li></ul><h4 id="6-NIO2中文件读写"><a href="#6-NIO2中文件读写" class="headerlink" title="6.NIO2中文件读写"></a>6.NIO2中文件读写</h4><ul><li>NIO2是对Java原有IO流的升级，可以以更加高效的方式进行文件读写操作</li><li>Java API提供了两套NIO，一套是针对标准输入输出的NIO，另一套是网络编程NIO</li><li>File类访问文件功能比较有限，后来又引入类Path接口对File类进行了升级</li><li>在NIO.2中还提供了Files、Paths工具类</li></ul><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><h4 id="1-转换流概述"><a href="#1-转换流概述" class="headerlink" title="1.转换流概述"></a>1.转换流概述</h4><ul><li>转换流为处理流的一种，提供了在字节流和字符流之间的转换</li><li>Java API提供了两个转换流：<ol><li>InputStreamReader：将InputStream转换为Reader</li><li>OutputStreamWriter：将Writer转换为OutputStream</li></ol></li><li>字节流中的数据都是字符时，转换成字符流操作更高效</li><li>转换流常用来处理文件乱码问题，实现编码和解码的功能</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945369.png" alt="image-20210505100444727"></p><h4 id="2-转换流的使用"><a href="#2-转换流的使用" class="headerlink" title="2.转换流的使用"></a>2.转换流的使用</h4><ul><li>InputStreamReader：将一个字节的输入流转换为字符的输入流</li><li>OutputStreamWriter：将一个字符的输出流转换为字节的输出流</li><li>提供了在字节流和字符流之间的转换，用于解码、编码</li></ul><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><h4 id="1-对象流概述"><a href="#1-对象流概述" class="headerlink" title="1.对象流概述"></a>1.对象流概述</h4><ul><li><p>ObjectinputStream和ObjectOutputSteam</p></li><li><p>用于存储和读取基本数据类型数据或对象的处理流，可以把Java的对象写入数据源中，也能把对象从数据源中还原回来</p></li><li><p>序列化：ObjectinputStream保存基本数据类型或对象的机制</p></li><li><p>反序列化：ObjectOutputSteam读取基本数据类型或对象的机制</p></li><li><p>ObjectinputStream和ObjectOutputSteam不能序列化static和transient修饰的成员变量</p></li></ul><h4 id="2-对象的序列化"><a href="#2-对象的序列化" class="headerlink" title="2.对象的序列化"></a>2.对象的序列化</h4><ul><li>对象序列化机制把内存中的Java对象转换成平台无关的二进制流，从而允许把二进制流保存在磁盘上或通过网络传输</li><li>程序获取二进制流，可以反序列化恢复为Java对象</li><li>序列化的好处在于可以将任何实现了Serializable接口的对象转换为字节数据，保证其保存和传输时可被还原</li></ul><h3 id="其他基本流"><a href="#其他基本流" class="headerlink" title="其他基本流"></a>其他基本流</h3><h4 id="1-标准输入输出流"><a href="#1-标准输入输出流" class="headerlink" title="1.标准输入输出流"></a>1.标准输入输出流</h4><ul><li>System.in：标准的输入流，默认从键盘输入</li><li>System.out：标准的输出流，默认从控制台输出</li><li>可以通过setIn(InputStream is) / setOut(PrintStream ps)方式重新指定输出和输入的默认设备</li></ul><h4 id="2-打印流"><a href="#2-打印流" class="headerlink" title="2.打印流"></a>2.打印流</h4><ul><li>实现将基本数据类型转化成字符串输出</li><li>打印流PrintStream和PrintWriter</li><li>提供了一系列重载的print()和println()方法，用于多种数据类型输出</li></ul><h4 id="3-数据流"><a href="#3-数据流" class="headerlink" title="3.数据流"></a>3.数据流</h4><ul><li><p>方便操作（读取和写出）Java语言的基本类型和 String的数据</p></li><li><p>DataInputStream 和 DataOutputStream分别套接在InputStream和OutputStream子类的流上</p></li></ul><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="基础内容"><a href="#基础内容" class="headerlink" title="基础内容"></a>基础内容</h3><h4 id="1-网络编程定义"><a href="#1-网络编程定义" class="headerlink" title="1.网络编程定义"></a>1.网络编程定义</h4><ul><li>网络编程的目的：直接或间接通过网络协议与其他计算机实现数据交换，进行通讯</li><li>定位主机上特定的应用（IP和端口号）</li><li>可靠高效数据运输（通过网络通信协议TCP/IP）</li></ul><h3 id="TCP网络编程"><a href="#TCP网络编程" class="headerlink" title="TCP网络编程"></a>TCP网络编程</h3><h3 id="UDP网络编程"><a href="#UDP网络编程" class="headerlink" title="UDP网络编程"></a>UDP网络编程</h3><h3 id="URL网络编程"><a href="#URL网络编程" class="headerlink" title="URL网络编程"></a>URL网络编程</h3><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><h3 id="反射机制概述"><a href="#反射机制概述" class="headerlink" title="反射机制概述"></a>反射机制概述</h3><h4 id="1-反射的含义"><a href="#1-反射的含义" class="headerlink" title="1.反射的含义"></a>1.反射的含义</h4><p>（1）含义</p><ul><li>反射是动态语言的关键，反射机制允许程序在执行期间借助Reflection API 取得任何类的内部信息，并能直接操作任意对象的内部属性及方法</li><li>加载完类后，堆内存的方法区中就会产生一个Class类型的对象，通过该对象我们可以看到类的结构信息，则就是反射机制的本质</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945603.png" alt="image-20210505220053207"></p><p>（2）动态语言与静态语言</p><ul><li>动态语言在运行时可以根据条件改变自身结构（PHP，Python）</li><li>静态语言运行时结构不可变（Java，C, C++）</li><li>Java是准动态语言，我们可以利用反射机制，字节码操作获得类似动态语言的特性，让编程更加灵活</li></ul><h4 id="2-反射功能"><a href="#2-反射功能" class="headerlink" title="2.反射功能"></a>2.反射功能</h4><p>通过反射可以调用类的私有结构，反射常常用于对象不确定的情况下（反射的动态性）</p><ul><li>运行时判断任意对象所属类</li><li>运行时构造任意一个类的对象</li><li>运行时判断一个类所具有的成员变量和方法</li><li>运行时获取泛型信息</li><li>运行时任意调用对象的成员变量和方法</li><li>运行时处理注解</li><li>生成动态代理</li></ul><h4 id="3-反射主要API"><a href="#3-反射主要API" class="headerlink" title="3.反射主要API"></a>3.反射主要API</h4><ul><li>java.lang.Class：代表一个类</li><li>java.lang.reflect.Method：代表类的方法</li><li>java.lang.reflect.Field：代表类的成员变量</li><li>java.lang.reflect.Constructor：代表类的构造器</li></ul><h3 id="Class类的理解"><a href="#Class类的理解" class="headerlink" title="Class类的理解"></a>Class类的理解</h3><h4 id="1-类的加载过程"><a href="#1-类的加载过程" class="headerlink" title="1.类的加载过程"></a>1.类的加载过程</h4><ul><li>程序经过javac.exe命令后，会生成一个或多个字节码文件（.class结尾）接着我们使用java.exe命令对某个字节码文件进行解释运行，相当于将某个字节码文件加载到内存中，此过程就被称为类的加载</li><li>加载到内存中的类，我们称为运行时类，此运行时类就作为Class的一个实例（类是Class的对象）</li><li>Class的实例对应着一个运行时类</li></ul><h4 id="2-获得Class实例的方法"><a href="#2-获得Class实例的方法" class="headerlink" title="2.获得Class实例的方法"></a>2.获得Class实例的方法</h4><ul><li><p>调用运行类时的属性：.class</p></li><li><p>通过运行时类的对象，调用getClass</p></li><li><p>调用Class静态方法：forName(String classPath)（常用）</p></li><li><p>使用类的加载器：ClassLoader</p></li></ul><h4 id="3-Class实例对应结构"><a href="#3-Class实例对应结构" class="headerlink" title="3.Class实例对应结构"></a>3.Class实例对应结构</h4><p>有哪些类型有Class对象</p><ul><li>class：外部类，成员，局部内部类，匿名内部类</li><li>interface：接口</li><li>[]：数组</li><li>enum：枚举</li><li>annotation：注解</li><li>primitive type：基本数据类型</li><li>void</li></ul><h3 id="类的加载的理解"><a href="#类的加载的理解" class="headerlink" title="类的加载的理解"></a>类的加载的理解</h3><h4 id="1-类的加载过程-1"><a href="#1-类的加载过程-1" class="headerlink" title="1.类的加载过程"></a>1.类的加载过程</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945557.png" alt="image-20210506074346998"></p><h4 id="2-ClassLoader的理解"><a href="#2-ClassLoader的理解" class="headerlink" title="2.ClassLoader的理解"></a>2.ClassLoader的理解</h4><p>（1）类的加载器流程位置</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945002.png" alt="image-20210506074558379"></p><p>（2）类的加载器的作用</p><ul><li>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后再堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口</li><li>类缓存：一旦某个类被加载到类加载器中，它会维持（缓存）一段时间，不够JVM垃圾回收机制可以回收这些Class对象</li></ul><p>（3）Java定义的类的加载器类型</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945770.png" alt="image-20210506075638645"></p><p>（4）ClassLoader加载配置文件</p><p>​    读取配置文件的方法：</p><ul><li>使用properties集合+IO流读取</li><li>使用ClassLoader读取</li></ul><h3 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h3><p>平常我们一般使用类的构造器（new）创建类的对象，我们也可以通过反射创建对应的运行时类的对象</p><h4 id="1-创建流程"><a href="#1-创建流程" class="headerlink" title="1.创建流程"></a>1.创建流程</h4><ul><li>调用newInstance()方法，创建对应的运行时类的对象</li><li>内部调用了运行时类的空参构造器</li></ul><h4 id="2-创建要求"><a href="#2-创建要求" class="headerlink" title="2.创建要求"></a>2.创建要求</h4><ul><li>运行时类必须提供空参的构造器</li><li>空参过的构造器的访问权限通常设置为public</li><li>便于通过反射，创建运行时类的对象</li><li>便于子类继承此运行类时，默认调用super()时，保证父类有此构造器</li></ul><h3 id="获得运行时类的结构"><a href="#获得运行时类的结构" class="headerlink" title="获得运行时类的结构"></a>获得运行时类的结构</h3><h4 id="1-获得属性结构"><a href="#1-获得属性结构" class="headerlink" title="1.获得属性结构"></a>1.获得属性结构</h4><ul><li>getFields()：获取当前运行时类及其父类中声明public访问权限的属性</li><li>getDeclaredFields()：获取当前运行时类中声明的所有属性（不包含父类中声明的属性）</li></ul><h4 id="2-获取方法结构"><a href="#2-获取方法结构" class="headerlink" title="2.获取方法结构"></a>2.获取方法结构</h4><ul><li>getMethods()：获取当前运行时类及其所有父类中声明为public权限的方法</li><li>getDeclaredMethods()：获取当前运行时类中声明的所有方法（不包含父类中声明的方法）</li></ul><h4 id="3-获取方法的内部结构"><a href="#3-获取方法的内部结构" class="headerlink" title="3.获取方法的内部结构"></a>3.获取方法的内部结构</h4><ul><li>获取方法声明的注解</li><li>权限修饰符</li><li>返回值类型</li><li>方法名</li><li>形参列表</li></ul><h4 id="4-获取构造器结构"><a href="#4-获取构造器结构" class="headerlink" title="4.获取构造器结构"></a>4.获取构造器结构</h4><ul><li>getConstructors()：获取当前运行时类中声明为public的构造器</li><li>getDeclaredConstructors()：获取当前运行时类中声明的所有构造器</li></ul><h4 id="5-其他获取内容"><a href="#5-其他获取内容" class="headerlink" title="5.其他获取内容"></a>5.其他获取内容</h4><ul><li>获得运行时类的父类及父类泛型</li><li>获得运行类的实现的接口，所在包，注解</li></ul><h3 id="调用运行时类的结构"><a href="#调用运行时类的结构" class="headerlink" title="调用运行时类的结构"></a>调用运行时类的结构</h3><h4 id="1-调用指定属性"><a href="#1-调用指定属性" class="headerlink" title="1.调用指定属性"></a>1.调用指定属性</h4><ul><li>创建运行时类的对象</li><li>获得指定的属性（通常用getDeclaredFields()，因为可以获得私有属性）</li><li>保证当前属性是可访问的（setAccessible方法）</li><li>设置当前属性的值（set方法）</li><li>获取当前属性的值（get方法）</li><li>获取当前属性的值</li></ul><h4 id="2-调用指定方法"><a href="#2-调用指定方法" class="headerlink" title="2.调用指定方法"></a>2.调用指定方法</h4><ul><li>创建运行时类的对象</li><li>获取指定的某个方法</li><li>保证当前方法是可访问的（setAccessible方法）</li><li>调用invoke方法执行</li></ul><h4 id="3-调用指定构造器"><a href="#3-调用指定构造器" class="headerlink" title="3.调用指定构造器"></a>3.调用指定构造器</h4><ul><li>获得指定构造器</li><li>保证此构造器可访问</li><li>调用此构造器创建运行时类的对象</li></ul><h3 id="反射应用：动态代理"><a href="#反射应用：动态代理" class="headerlink" title="反射应用：动态代理"></a>反射应用：动态代理</h3><h4 id="1-代理设计模式原理"><a href="#1-代理设计模式原理" class="headerlink" title="1.代理设计模式原理"></a>1.代理设计模式原理</h4><ul><li><p>使用一个代理将对象包装起来，然后用该代理对象取代原始对象，任何对原始对象的调用都要通过代理</p></li><li><p>最好可以通过一个代理类完成全部的代理功能</p></li></ul><h4 id="2-动态代理概述"><a href="#2-动态代理概述" class="headerlink" title="2.动态代理概述"></a>2.动态代理概述</h4><ul><li><p>动态代理是指用户通过代理类来调用其他对象的方法，并且是在程序运行时更加动态创建 目标类的代理对象</p></li><li><p>动态代理使用场合：</p><ol><li>调试</li><li>远程方法调用</li></ol></li><li><p>动态代理相比静态代理的优点：抽象角色中接口声明的所有方法都被转移到调用处理器一个集中的方法中处理（可以更加灵活和统一的处理众多的方法）</p></li></ul><h4 id="3-动态代理与AOP"><a href="#3-动态代理与AOP" class="headerlink" title="3.动态代理与AOP"></a>3.动态代理与AOP</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945546.png" alt="image-20210506141800436"></p><h2 id="Java8的其他特性"><a href="#Java8的其他特性" class="headerlink" title="Java8的其他特性"></a>Java8的其他特性</h2><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>Lambda表达式是一个 ，可以将其理解为一段可以传递的代码，其本质是作为函数式接口的实例</p><h4 id="1-Lambda表达式的使用"><a href="#1-Lambda表达式的使用" class="headerlink" title="1.Lambda表达式的使用"></a>1.Lambda表达式的使用</h4><ul><li>-&gt; :lambda操作符或箭头操作符</li><li>-&gt; 左边：lambda形参列表（即接口中的抽象方法的形参列表）</li><li>-&gt; 右边：lambda体（即重写抽象方法的方法体）</li><li>如果lamba形参列表只有一个参数，其一对()也可以省略</li><li>lambda体应该使用一对{}包裹，如果lambda只有一条执行语句，可以省略{}和return</li></ul><h4 id="2-lambda使用分类"><a href="#2-lambda使用分类" class="headerlink" title="2.lambda使用分类"></a>2.lambda使用分类</h4><ul><li>无参，无返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runnable r1 = ()-&gt; &#123;System.out.println(<span class="string">&quot;Hello,Lambda&quot;</span>);&#125;;</span><br></pre></td></tr></table></figure><ul><li>需要一个参数，无返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = (String str)-&gt;&#123;System.out.println(str);&#125;;</span><br></pre></td></tr></table></figure><ul><li>数据类型可以省略，可由编译器推断得出（类型推断）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = (str)-&gt;&#123;System.out.println(str);&#125;;</span><br></pre></td></tr></table></figure><ul><li>只需要一个参数时，参数的小括号可以省略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = str-&gt;&#123;System.out.println(str);&#125;;</span><br></pre></td></tr></table></figure><ul><li>需要两个或两个以上的参数，多条执行语句，并且可以有返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com = (x,y)-&gt;&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;实现函数式接口方法&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> Integer.compare(x,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当Lambda只有一条语句时，return与大括号可以省略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com = (x,y)-&gt;Integer.compare(x,y);</span><br></pre></td></tr></table></figure><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><h4 id="1-函数式接口含义"><a href="#1-函数式接口含义" class="headerlink" title="1.函数式接口含义"></a>1.函数式接口含义</h4><ul><li><p>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口</p></li><li><p>我们可以通过Lambda表达式创建该接口的对象</p></li><li><p>使用@Functionallnterface注解，可以检测是否为函数式接口</p></li></ul><h4 id="2-Java内置函数式接口"><a href="#2-Java内置函数式接口" class="headerlink" title="2.Java内置函数式接口"></a>2.Java内置函数式接口</h4><ul><li><p>Consumer<T>：消费型接口</T></p></li><li><p>Supplier<T>：供给型接口</T></p></li><li><p>Function&lt;T,R&gt;：函数型接口</p></li><li><p>Predicate<T>：断定型接口</T></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945212.png" alt="image-20210506192031648"></p></li></ul><h3 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h3><h4 id="1-方法引用介绍"><a href="#1-方法引用介绍" class="headerlink" title="1.方法引用介绍"></a>1.方法引用介绍</h4><ul><li>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用</li><li>方法引用就是Lambada表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法</li><li>实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致</li><li>有以下三种主要使用情况<ol><li>对象::实例方法名</li><li>类::静态方法名</li><li>类::实例方法名</li></ol></li></ul><h4 id="2-构造器引用"><a href="#2-构造器引用" class="headerlink" title="2.构造器引用"></a>2.构造器引用</h4><ul><li>与方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致</li><li>抽象方法的返回值类型即构造器所属的类的类型</li></ul><h3 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h3><h4 id="1-Stream概述"><a href="#1-Stream概述" class="headerlink" title="1.Stream概述"></a>1.Stream概述</h4><ul><li>Stream是Java中处理集合的关键抽象概念，它可以对集合进行复杂的查找，过滤，映射数据等操作（类似于SQL之于数据库）</li><li>NoSQL的数据（MongDB,Radis等）需要在Java层面处理，所有需要Stream API</li><li>Stream 与 Collection集合的区别：Collection是一种静态的内存数据结构，其面向内存用于数据存储;Stream有关计算，其面向CPU通过CPU实现计算</li></ul><h4 id="2-Stream须知事项"><a href="#2-Stream须知事项" class="headerlink" title="2.Stream须知事项"></a>2.Stream须知事项</h4><ul><li>Stream自己不会存储元素</li><li>Stream不会改变源对象，相反，它们会返回一个持有结果的新Stream</li><li>Stream操作时延迟执行的，他们会等到需要结果时才执行</li></ul><h4 id="3-Stream操作过程"><a href="#3-Stream操作过程" class="headerlink" title="3.Stream操作过程"></a>3.Stream操作过程</h4><ul><li><p>创建Stream：一个数据源（如：集合，数组）获取一个流</p></li><li><p>中间操作：一个中间操作链，对数据源的数据进行处理</p></li><li><p>终止操作：一旦执行终止操作，就执行中间操作链，并产生结果，后面不会再被使用</p></li></ul><h4 id="4-Stream实例化"><a href="#4-Stream实例化" class="headerlink" title="4.Stream实例化"></a>4.Stream实例化</h4><p>（1）创建Stream</p><ul><li>通过集合创建</li><li>通过数组创建</li><li>通过Stream的of()创建</li><li>创建无限流</li></ul><p>（2）中间操作</p><ul><li>筛选与切片</li><li>映射</li><li>排序</li></ul><p>（3）Stream的终止操作</p><ul><li>匹配与查找</li><li>归约</li><li>收集</li></ul><h3 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h3><h4 id="1-Optional类概述"><a href="#1-Optional类概述" class="headerlink" title="1.Optional类概述"></a>1.Optional类概述</h4><ul><li><p>Optional<T>类是一个容器类，可以保存类型T的值，代表这个值存在（或者仅仅保存null，表示这个值不存在）</T></p></li><li><p>Optional可以更好表达这个概念，并且可以避免空指针异常</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040947723.png&quot; alt=&quot;image-20210904094723369&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://autovy.github.io/categories/Java/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Java" scheme="https://autovy.github.io/tags/Java/"/>
    
      <category term="后端" scheme="https://autovy.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>PHP|Thinkphp学习</title>
    <link href="https://autovy.github.io/2021/03/28/PHP/PHP-thinkphp5/"/>
    <id>https://autovy.github.io/2021/03/28/PHP/PHP-thinkphp5/</id>
    <published>2021-03-28T06:30:00.000Z</published>
    <updated>2021-09-04T07:58:03.905Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041014601.jpeg" alt="img"></p><span id="more"></span><h2 id="URL解析模式"><a href="#URL解析模式" class="headerlink" title="URL解析模式"></a>URL解析模式</h2><h3 id="1-URL解析"><a href="#1-URL解析" class="headerlink" title="1.URL解析"></a>1.URL解析</h3><p>（1）分析</p><p>tp应用入口：<code>https://severName/index.php/模块/控制器/操作/参数/值/</code></p><ul><li><strong>serverName：</strong>在本地为<code>localhost/tp5/public/</code>，部署后映射为域名</li><li><strong>模块：</strong>位于根目录下的application下，默认下有一个index目录，它就是一个模块   </li><li><strong>控制器：</strong>在上面index目录（index模块）下有一个controller控制器目录，其中的Index.php就是一个控制器</li><li><strong>操作：</strong>在控制器的类中的方法就是操作如上面Index.php中的两个方法：<code>index()，hello()</code></li><li><strong>参数 值</strong>：是对应上面操作的，如果操作有参数，则可以通过url传参</li></ul><p>（2）实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件位置：/tp5/appliction/test/controller/Abc.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 命名空间，索引到test模块的控制器文件</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">test</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="comment">// 类要与文件名相同，且首字母要大写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abc</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"><span class="variable">$name</span>=<span class="string">&#x27;world&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>.<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>访问案例：<a href="http://localhost/tp5/public/index.php/test/abc/hello/">http://localhost/tp5/public/index.php/test/abc/hello/</a></p></li><li><p>控制器名的首字母要大写如：Index，Abc。<strong>注意</strong>：如果控制器名初始化时首字母没有大写，之后改过来也无法生效了</p></li><li><p>如果方法的参数为$name，则url操作后面一定要加上<code>/参数/值/</code></p></li><li><p>注意url的最后要有/</p></li></ul><p>（3）关于环境</p><p>修改apache配置文件，开启伪静态，即可将index.php省略</p><h2 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h2><h3 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1.目录结构"></a>1.目录结构</h3><p>tp5默认为多模块结构</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041015470.png" alt="image-20210330203720332"></p><ul><li><p>模块下的类库文件命名空间统一为：app\模块名：<code>namespace app\test\controller\Index</code>;</p></li><li><p>当只有一个模块时，可以绑定这个模块:从而省略<strong>模块名</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件位置：tp5/public/index.php</span></span><br><span class="line">Container::get(<span class="string">&#x27;app&#x27;</span>)-&gt;bind(<span class="string">&#x27;test&#x27;</span>)-&gt;run()-&gt;send();</span><br></pre></td></tr></table></figure><p>访问链接为：<a href="http://localhost/tp5/public/index.php/abc/hello">http://localhost/tp5/public/index.php/abc/hello</a></p></li></ul><ul><li><p>当只有一个模块，一个控制器时，可以绑定模块和控制器，从而省略<strong>模块/控制器</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件位置：tp5/public/index.php</span></span><br><span class="line"></span><br><span class="line">Container::get(<span class="string">&#x27;app&#x27;</span>)-&gt;bind(<span class="string">&#x27;test/abc&#x27;</span>)-&gt;run()-&gt;send();</span><br></pre></td></tr></table></figure><p>访问链接为：<a href="http://localhost/tp5/public/index.php/hello">http://localhost/tp5/public/index.php/hello</a></p></li></ul><h3 id="2-空模块"><a href="#2-空模块" class="headerlink" title="2.空模块"></a>2.空模块</h3><p>通过环境变量设置空模块，将不存在的目录统一指向指定目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件位置：tp5/config/app.php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的空模块名</span></span><br><span class="line"><span class="string">&#x27;empty_module&#x27;</span>           =&gt; <span class="string">&#x27;404&#x27;</span>,</span><br></pre></td></tr></table></figure><p>空模块只有在多模块开启，没有绑定模块情况下生效</p><h3 id="3-环境变量"><a href="#3-环境变量" class="headerlink" title="3.环境变量"></a>3.环境变量</h3><p>tp5提供了一个类库Env来获取环境变量，如：<code>return env(&#39;app_path&#39;)</code></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041015869.png" alt="image-20210330210525103"></p><h2 id="控制器定义"><a href="#控制器定义" class="headerlink" title="控制器定义"></a>控制器定义</h2><h3 id="1-控制器要点"><a href="#1-控制器要点" class="headerlink" title="1.控制器要点"></a>1.控制器要点</h3><ul><li>可以继承控制器基类，方便使用功能，但不是必要的</li><li>如果控制器名有两个大写字母，如：class HelloWorld用<code>public/hello_world</code>这样的方式访问</li><li>如果想改变根命名app，可以在根目录创建.env文件写上键值对，如：<code>app_namespace=application</code></li></ul><h3 id="2-渲染方式"><a href="#2-渲染方式" class="headerlink" title="2.渲染方式"></a>2.渲染方式</h3><p>（1）初始化渲染</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化渲染内容（无论有没有调用都会渲染出来）,必须是继承了Controller</span></span><br><span class="line"><span class="comment">// 初始化中不能返回，只能用echo来输出</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parent</span>::initialize(); <span class="comment">// <span class="doctag">TODO:</span> Change the autogenerated stub</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;https://www.baidu.com/img/flexible/logo/pc/result.png&quot;  /&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）输出数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">arr</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 建立数组</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>=&gt;<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>=&gt;<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>=&gt;<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出数组，不能直接返回数组，需要转换为json格式</span></span><br><span class="line">    <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）输出html模板</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板输出，输出的是该模块文件下视图文件中的html文件</span></span><br><span class="line"><span class="comment">// 控制器名和视图目录下放html文件的对应</span></span><br><span class="line"><span class="comment">// 方法名和html文件名对应</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制器操作"><a href="#控制器操作" class="headerlink" title="控制器操作"></a>控制器操作</h2><h3 id="1-前置操作"><a href="#1-前置操作" class="headerlink" title="1.前置操作"></a>1.前置操作</h3><p>可以灵活控制的页面初始化方法，需要继承至Controller类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">test</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="comment">// 前置操作，即页面初始化，可以灵活控制是否渲染指定的初始化方法</span></span><br><span class="line"><span class="comment">// ---------------------------------------------------</span></span><br><span class="line"><span class="comment">// 需要继承controller类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Before</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置$beforeActionList属性绑定前置方法</span></span><br><span class="line"><span class="comment">//-------------------------------------------</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$beforeActionList</span>=[</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>,                            <span class="comment">// 允许该控制器下所有的方法触发frist前置方法</span></span><br><span class="line">        <span class="string">&#x27;second&#x27;</span> =&gt; [<span class="string">&#x27;except&#x27;</span>=&gt;<span class="string">&#x27;one&#x27;</span>],      <span class="comment">// 除了one这个方法，其他方法都允许触发</span></span><br><span class="line">        <span class="string">&#x27;third&#x27;</span> =&gt; [<span class="string">&#x27;only&#x27;</span> =&gt; <span class="string">&#x27;one, two&#x27;</span>]   <span class="comment">// 仅允许one，two两个方法触发</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对应的前置方法（初始化方法）,这些方法是无法直接访问的</span></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;frist&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;second&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">third</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;third&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建可调用的方法（前置方法作用对象）</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-跳转和重定向"><a href="#2-跳转和重定向" class="headerlink" title="2.跳转和重定向"></a>2.跳转和重定向</h3><p>Controller类提供了两个跳转方法：success(msg,url)和error(msg)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">test</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Url</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转条件设置</span></span><br><span class="line"><span class="comment">// ------------------------------</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$flag</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转触发</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;flag)&#123;</span><br><span class="line">            <span class="comment">// 不指定url，默认返回上一层</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;success(<span class="string">&#x27;访问成功&#x27;</span>, <span class="string">&#x27;../test/before/one&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 自动后退到上一页</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;error(<span class="string">&#x27;访问失败了&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>成功和失败都有一个固定的页面模板：’thinkphp/tpl/dispatch_jump.tpl’；</li><li>在config/app.php配置文件中可修改跳转页面对应的模板</li></ul><h3 id="3-空方法和空控制器"><a href="#3-空方法和空控制器" class="headerlink" title="3.空方法和空控制器"></a>3.空方法和空控制器</h3><p>（1）空方法    </p><p>在控制器中使用_empty方法可以自动拦截不存在的方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空链接（空方法） 拦截</span></span><br><span class="line"><span class="comment">// ------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_empty</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$string</span> = <span class="string">&#x27;此方法不存在:&#x27;</span>.<span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;error(<span class="variable">$string</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>（2）空控制器</p><p>在控制器文件下创建Error.php控制器，则可以处理控制器不存在的异常</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">test</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制器不存在异常处理</span></span><br><span class="line"><span class="comment">// ----------------------------</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;当前控制器不存在&#x27;</span>.<span class="variable">$request</span>-&gt;controller();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库与模型"><a href="#数据库与模型" class="headerlink" title="数据库与模型"></a>数据库与模型</h2><h3 id="1-连接数据库"><a href="#1-连接数据库" class="headerlink" title="1.连接数据库"></a>1.连接数据库</h3><ul><li><p>thinkphp 采用内置抽象层将不同的数据库进行封装处理</p></li><li><p>数据抽象层基于PDO模式，无需针对不同的数据库编写相应的代码</p></li><li><p>数据库的连接是在config的database.php配置文件下修改连接信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据库类型</span></span><br><span class="line"><span class="string">&#x27;type&#x27;</span>            =&gt; <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line"><span class="comment">// 服务器地址</span></span><br><span class="line"><span class="string">&#x27;hostname&#x27;</span>        =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="comment">// 数据库名</span></span><br><span class="line"><span class="string">&#x27;database&#x27;</span>        =&gt; <span class="string">&#x27;tp_data&#x27;</span>,</span><br><span class="line"><span class="comment">// 用户名</span></span><br><span class="line"><span class="string">&#x27;username&#x27;</span>        =&gt; <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="comment">// 密码</span></span><br><span class="line"><span class="string">&#x27;password&#x27;</span>        =&gt; <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line"><span class="comment">// 端口</span></span><br><span class="line"><span class="string">&#x27;hostport&#x27;</span>        =&gt; <span class="string">&#x27;&#x27;</span>,</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-控制器访问"><a href="#2-控制器访问" class="headerlink" title="2.控制器访问"></a>2.控制器访问</h3><p>在控制器中直接调用db类的方法查询数据库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按表名查找数据库，必须加上前缀</span></span><br><span class="line"><span class="comment">// ------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getone</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = Db::table(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  自动加上索引内的前缀</span></span><br><span class="line"><span class="comment">// ----------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">gettwo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-模型访问"><a href="#3-模型访问" class="headerlink" title="3.模型访问"></a>3.模型访问</h3><p>Model就是用来处理和配置数据库的相关信息</p><p>在模块中创建model文件夹，然后创建与表名对应的类（首字母大写）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">data</span>\<span class="title">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模型名类名与数据库的表名保持一致</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">console</span>\<span class="title">command</span>\<span class="title">Make</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好model与数据表的对应后，即可在控制器利用模型访问数据库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用模型访问数据库</span></span><br><span class="line"><span class="comment">// ---------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getmod</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = User::select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><h3 id="1-查询一条数据"><a href="#1-查询一条数据" class="headerlink" title="1.查询一条数据"></a>1.查询一条数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询一条数据</span></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// find()默认查询第一条语句</span></span><br><span class="line">        <span class="variable">$data</span> = Db::table(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;find();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        <span class="comment">// 输出最近执行的sql语句</span></span><br><span class="line">        <span class="keyword">echo</span> Db::getLastSql();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// where返回特定条件数据</span></span><br><span class="line">        <span class="variable">$data2</span> = Db::table(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="number">3</span>)-&gt;find();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data2</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        <span class="comment">// 输出最近执行的sql语句</span></span><br><span class="line">        <span class="keyword">echo</span> Db::getLastSql();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-数据查询异常处理"><a href="#2-数据查询异常处理" class="headerlink" title="2.数据查询异常处理"></a>2.数据查询异常处理</h3><p>主要使用findOrFail()抛出一个错误，catch语句才能捕捉到异常</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据不存在时异常处理</span></span><br><span class="line"><span class="comment">// -----------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"><span class="variable">$id</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 异常捕捉</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="variable">$data</span> = Db::table(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$id</span>)-&gt;findOrFail();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (DataNotFoundException <span class="variable">$e</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;查询不到数据！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-查询多例数据"><a href="#3-查询多例数据" class="headerlink" title="3.查询多例数据"></a>3.查询多例数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询多列数据</span></span><br><span class="line"><span class="comment">// --------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = Db::table(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;select();</span><br><span class="line">    <span class="keyword">return</span> json(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-返回指定数据"><a href="#4-返回指定数据" class="headerlink" title="4.返回指定数据"></a>4.返回指定数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定返回数据查询</span></span><br><span class="line"><span class="comment">// --------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">four</span>(<span class="params"><span class="variable">$id</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// value方法指定返回字段的值</span></span><br><span class="line">        <span class="variable">$data1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$id</span>)-&gt;value(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">        <span class="comment">// 字符串</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$data1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// column方法返回指定列，并指定某字段作为索引</span></span><br><span class="line">        <span class="variable">$data2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;column(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// field返回指定列，还可以继续通过where进一步筛选（ column不行）</span></span><br><span class="line">     <span class="variable">$data1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;field(<span class="string">&#x27;id&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="comment">// 字符串</span></span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$data1</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链式查询"><a href="#链式查询" class="headerlink" title="链式查询"></a>链式查询</h2><h3 id="1-查询规则"><a href="#1-查询规则" class="headerlink" title="1.查询规则"></a>1.查询规则</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询规则</span></span><br><span class="line"><span class="comment">// ----------------------------------------------</span></span><br><span class="line">    <span class="comment">//只要还是数据库对象都可以继续使用链式查询</span></span><br><span class="line">    <span class="comment">// 用find()和select()方法时结果查询，输出不再是对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        print_r(Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="number">3</span>)-&gt;order(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-链式的应用"><a href="#2-链式的应用" class="headerlink" title="2.链式的应用"></a>2.链式的应用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存实例避免资源浪费（链式查询的特点，可以保存对象）</span></span><br><span class="line"><span class="comment">// --------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 保存数据库对象</span></span><br><span class="line">        <span class="variable">$user</span> = Db::name(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过上面一个对象分别进行查询</span></span><br><span class="line">        <span class="comment">// 但是要清除针对这个对象所有的链式查询项，才能下次查询</span></span><br><span class="line">        <span class="variable">$data1</span> = <span class="variable">$user</span>-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="number">3</span>)-&gt;find();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data1</span>).<span class="string">&#x27;:&#x27;</span>.Db::getLastSql();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不清除链式查询项的情况</span></span><br><span class="line">        <span class="variable">$data2</span> = <span class="variable">$user</span>-&gt;select();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data2</span>).<span class="string">&#x27;:&#x27;</span>.Db::getLastSql();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清除链式查询项的情况</span></span><br><span class="line">        <span class="variable">$data3</span> = <span class="variable">$user</span>-&gt;removeOption(<span class="string">&#x27;where&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$data3</span>).<span class="string">&#x27;:&#x27;</span>.Db::getLastSql();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="增删改数据库"><a href="#增删改数据库" class="headerlink" title="增删改数据库"></a>增删改数据库</h2><h3 id="1-单条插入操作"><a href="#1-单条插入操作" class="headerlink" title="1.单条插入操作"></a>1.单条插入操作</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单条插入操作</span></span><br><span class="line"><span class="comment">// ------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入的数据</span></span><br><span class="line">        <span class="variable">$data</span>=[</span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;鲸落&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行数据插入的两种方式</span></span><br><span class="line">        <span class="variable">$insert</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;insert(<span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$insert2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;data(<span class="variable">$data</span>)-&gt;insert();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入成功返回值为插入数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$insert</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-批量插入操作"><a href="#2-批量插入操作" class="headerlink" title="2.批量插入操作"></a>2.批量插入操作</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 批量插入操作</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insertall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span>=[</span><br><span class="line"></span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;autovy&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;233&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$insert</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;insertAll(<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$insert</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-数据修改"><a href="#3-数据修改" class="headerlink" title="3.数据修改"></a>3.数据修改</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据修改</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = [</span><br><span class="line">          <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;李白&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">34</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="number">4</span>)-&gt;update(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-函数处理数据修改"><a href="#4-函数处理数据修改" class="headerlink" title="4.函数处理数据修改"></a>4.函数处理数据修改</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用mysql函数进行数据修改</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = [</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span> =&gt; Db::raw(<span class="string">&#x27;UPPER(username)&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span> =&gt; Db::raw(<span class="string">&#x27;id + 10&#x27;</span>)</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="number">3</span>)-&gt;update(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-删除数据"><a href="#5-删除数据" class="headerlink" title="5.删除数据"></a>5.删除数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认根据id进行删除，也可以用where方法指定字段删除</span></span><br><span class="line">        <span class="comment">// 删除一条</span></span><br><span class="line">        Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;delete(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除多条</span></span><br><span class="line">        Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;delete([<span class="number">1</span>,<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h2><h3 id="1-比较查询"><a href="#1-比较查询" class="headerlink" title="1.比较查询"></a>1.比较查询</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较查询</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 输出id != 10的数据</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;&lt;&gt;&#x27;</span>,<span class="number">10</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-模糊查询"><a href="#2-模糊查询" class="headerlink" title="2.模糊查询"></a>2.模糊查询</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模糊查询（即模糊查询字符串）</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模糊查询，密码（password）以12345开头的数据</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;whereLike(<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;12345%&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-区间查询"><a href="#3-区间查询" class="headerlink" title="3.区间查询"></a>3.区间查询</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 区间查询</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询id为1-10之间的数据</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;whereBetween(<span class="string">&#x27;id&#x27;</span>,[<span class="number">1</span>,<span class="number">10</span>])-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-多条查询"><a href="#4-多条查询" class="headerlink" title="4.多条查询"></a>4.多条查询</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多条查询</span></span><br><span class="line"><span class="comment">// ------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">four</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询id为7,8,10的数据</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;whereIn(<span class="string">&#x27;id&#x27;</span>,[<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>])-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-自定义查询"><a href="#5-自定义查询" class="headerlink" title="5.自定义查询"></a>5.自定义查询</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义查询（可以自己构建sql查询语句）</span></span><br><span class="line"><span class="comment">// ----------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">five</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询id为7,8,10的数据</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;whereExp(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;In(7,8,9)&#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><h3 id="1-数值计算查询"><a href="#1-数值计算查询" class="headerlink" title="1.数值计算查询"></a>1.数值计算查询</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 聚合查询</span></span><br><span class="line"><span class="comment">// -----------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算数值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 数量计算</span></span><br><span class="line">       <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;count();</span><br><span class="line">       <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 最值计算</span></span><br><span class="line">        <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;max(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result2</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 平均值计算</span></span><br><span class="line">        <span class="variable">$result3</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;avg(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result3</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据综合计算</span></span><br><span class="line">        <span class="variable">$result</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;sum(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-闭包查询"><a href="#2-闭包查询" class="headerlink" title="2.闭包查询"></a>2.闭包查询</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子查询</span></span><br><span class="line"><span class="comment">// ----------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fetchSql:不执行sql语句，返回sql语句</span></span><br><span class="line">        <span class="variable">$result1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;fetchSql(<span class="literal">true</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result1</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// buildSql:不执行sql语句，返回sql语句，相比fetchSql不需要写select()</span></span><br><span class="line">        <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;buildSql(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result2</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 利用子查询，闭包查询实现多表查询</span></span><br><span class="line">        <span class="comment">// sql实现：SELECT * FROM tp_user WHERE id in (SELECT id FROM tp_two WHERE gender = &#x27;男&#x27;);</span></span><br><span class="line">        <span class="variable">$result3</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$query</span>-&gt;name(<span class="string">&#x27;two&#x27;</span>)-&gt;field(<span class="string">&#x27;id&#x27;</span>)-&gt;where(<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">        &#125;)-&gt;select();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result3</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="常用链式方法"><a href="#常用链式方法" class="headerlink" title="常用链式方法"></a>常用链式方法</h2><h3 id="1-where-：条件输出"><a href="#1-where-：条件输出" class="headerlink" title="1.where()：条件输出"></a>1.where()：条件输出</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// where()链式方法</span></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关联数组设置多个查询条件</span></span><br><span class="line">        <span class="variable">$result1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where([</span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; <span class="number">123456</span>,</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span> =&gt; [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">        ])-&gt;select();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$result1</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 索引数组查询</span></span><br><span class="line">        <span class="comment">// 组装复杂数据，通过变量传递</span></span><br><span class="line">        <span class="variable">$map</span>[] = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;between&#x27;</span>, [<span class="number">7</span>,<span class="number">10</span>]];</span><br><span class="line">        <span class="variable">$map</span>[] = [<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;=&#x27;</span>, <span class="number">123456</span>];</span><br><span class="line">        <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="variable">$map</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$result2</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符串形式传递查询</span></span><br><span class="line">        <span class="variable">$result3</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id in (7,10) and password=123456 &#x27;</span>)-&gt;select();</span><br><span class="line">        <span class="keyword">echo</span>  json_encode(<span class="variable">$result3</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-field-：指定字段输出"><a href="#2-field-：指定字段输出" class="headerlink" title="2.field() ：指定字段输出"></a>2.field() ：指定字段输出</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// field()链式方法</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------------------</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询指定字段</span></span><br><span class="line">            <span class="variable">$result1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;field(<span class="string">&#x27;id,username&#x27;</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result1</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// field()方法中设置mysql函数</span></span><br><span class="line">            <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;field(<span class="string">&#x27;sum(id)&#x27;</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result2</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 屏蔽掉指定字段</span></span><br><span class="line">            <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;field(<span class="string">&#x27;password&#x27;</span>,<span class="literal">true</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result2</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="3-limit-：限制输出条数"><a href="#3-limit-：限制输出条数" class="headerlink" title="3.limit()：限制输出条数"></a>3.limit()：限制输出条数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// limit()链式方法</span></span><br><span class="line"><span class="comment">// --------------------------------------------------------</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"><span class="variable">$num</span>=<span class="number">3</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 限制输出数据个数</span></span><br><span class="line">            <span class="variable">$result1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;limit(<span class="variable">$num</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result1</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分页模式输出数据，但要严格计算开始位置</span></span><br><span class="line">            <span class="comment">//如：limit(2,5)：从第3条开始显示5条数据</span></span><br><span class="line">            <span class="comment">// 第一页</span></span><br><span class="line">            <span class="variable">$result2</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;limit(<span class="number">0</span>,<span class="variable">$num</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result2</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">            <span class="comment">//第二页</span></span><br><span class="line">            <span class="variable">$result3</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;limit(<span class="variable">$num</span>,<span class="variable">$num</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">echo</span> json_encode(<span class="variable">$result3</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="4-page-：输出分页"><a href="#4-page-：输出分页" class="headerlink" title="4.page()：输出分页"></a>4.page()：输出分页</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// page()链式方法</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------------------------</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">four</span>(<span class="params"><span class="variable">$page</span>=<span class="number">1</span>,<span class="variable">$num</span>=<span class="number">3</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环输出页面</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$page</span>; <span class="variable">$page</span>&lt;<span class="number">5</span>; <span class="variable">$page</span>++)&#123;</span><br><span class="line">                <span class="comment">// page()分页方法，优化了limit()方法，无需进行分页条数计算</span></span><br><span class="line">                <span class="variable">$result1</span> = Db::name(<span class="string">&#x27;user&#x27;</span>)-&gt;page(<span class="variable">$page</span>, <span class="variable">$num</span>)-&gt;select();</span><br><span class="line">                <span class="comment">// 但数据为空，跳出循环</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$result1</span>==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">echo</span> json_encode(<span class="variable">$result1</span>);</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="5-group-：数据分组"><a href="#5-group-：数据分组" class="headerlink" title="5.group()：数据分组"></a>5.group()：数据分组</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// group()链式方法</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">five</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对某字段进行分组然后统计（按性别分组统计id平均数）</span></span><br><span class="line">            <span class="variable">$result</span> = Db::name(<span class="string">&#x27;two&#x27;</span>)-&gt;group(<span class="string">&#x27;gender&#x27;</span>)-&gt;field(<span class="string">&#x27;gender, avg(id)&#x27;</span>)-&gt;select();</span><br><span class="line">            <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-having-：分组条件输出"><a href="#6-having-：分组条件输出" class="headerlink" title="6.having()：分组条件输出"></a>6.having()：分组条件输出</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// having()链式方法</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------------</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">six</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对分组后的数据进行筛选</span></span><br><span class="line">            <span class="variable">$result</span> = Db::name(<span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">                    -&gt;group(<span class="string">&#x27;gender&#x27;</span>)</span><br><span class="line">                    -&gt;field(<span class="string">&#x27;gender, avg(id) as avg&#x27;</span>)</span><br><span class="line">                    -&gt;having(<span class="string">&#x27;avg(id)&lt;10&#x27;</span>)</span><br><span class="line">                    -&gt;select();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h2><h3 id="1-模型设置"><a href="#1-模型设置" class="headerlink" title="1.模型设置"></a>1.模型设置</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果控制器中的类名和model的类名相同，就需要引入,设置别名</span></span><br><span class="line"><span class="comment">// 也可以加入后缀以示区分</span></span><br><span class="line"><span class="keyword">use</span> \<span class="title">app</span>\<span class="title">mod</span>\<span class="title">model</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">UseModel</span>;</span><br></pre></td></tr></table></figure><h3 id="2-模型操作"><a href="#2-模型操作" class="headerlink" title="2.模型操作"></a>2.模型操作</h3><p>（1）构建模型：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模型名会自动对应到数据表</span></span><br><span class="line"><span class="comment">// 模型类与表名的差别：1.去除前缀tp_，2.变成大驼峰式命名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置模型的方式</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改变主键</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$pk</span> = <span class="string">&#x27;username&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置其他表</span></span><br><span class="line">        <span class="comment">// User默认绑定了数据库中tp_user这张表，但是也可以让其指向其他表</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">&#x27;tp_two&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模型初始化，与控制器初始化类似，可以初始化渲染内容</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;hello,world&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）控制器调用模型进行操作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  使用模型基本操作数据库</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$result</span> = UseModel::select();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改主键后删除</span></span><br><span class="line"><span class="comment">// -----------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 但主键为id时，可以生效</span></span><br><span class="line">        UseModel::destroy(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主键改为username后，做删除操作</span></span><br><span class="line">        UseModel::destroy(<span class="string">&#x27;李白&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过数据库类去操作数据库，但是这样无法使用模型的事件功能</p><h2 id="模型添加与删除"><a href="#模型添加与删除" class="headerlink" title="模型添加与删除"></a>模型添加与删除</h2><h3 id="1-插入一条数据"><a href="#1-插入一条数据" class="headerlink" title="1.插入一条数据"></a>1.插入一条数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用模型进行数据添加（一条）</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个模型实例</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入操作，返回布尔值</span></span><br><span class="line">        <span class="variable">$insert</span> = <span class="variable">$user</span>-&gt;save([</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Emiria&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;486&#x27;</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新增后，可输出主键</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$user</span>-&gt;id.<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$insert</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-批量插入数据"><a href="#2-批量插入数据" class="headerlink" title="2.批量插入数据"></a>2.批量插入数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用模型批量插入数据</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insertall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个模型实例</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置数据</span></span><br><span class="line">        <span class="variable">$dataAll</span> =[</span><br><span class="line"></span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Emiria&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;486&#x27;</span></span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Subaru&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;EMT&#x27;</span></span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Eem&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;486&#x27;</span></span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入全部数据，返回插入数据对象</span></span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$user</span>-&gt;saveAll(<span class="variable">$dataAll</span>);</span><br><span class="line">        print_r(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-delete-删除数据"><a href="#3-delete-删除数据" class="headerlink" title="3.delete()删除数据"></a>3.delete()删除数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据删除delete()方法</span></span><br><span class="line"><span class="comment">// -------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定主键值然后删除，返回布尔值</span></span><br><span class="line">        <span class="variable">$user</span> = UseModel::get(<span class="number">41</span>)-&gt;delete();</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$user</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-destroy-删除数据"><a href="#4-destroy-删除数据" class="headerlink" title="4.destroy()删除数据"></a>4.destroy()删除数据</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据删除destroy()方法</span></span><br><span class="line"><span class="comment">// -------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态方法调用destroy()方法，通过主键删除数据</span></span><br><span class="line">        UseModel::destroy(<span class="number">41</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 也可以进行批量删除</span></span><br><span class="line">        UseModel::destroy([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-条件删除"><a href="#5-条件删除" class="headerlink" title="5.条件删除"></a>5.条件删除</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件删除</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过数据库类的条件查询删除</span></span><br><span class="line">        UseModel::where(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="number">10</span>)-&gt;delete();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 闭包方式删除</span></span><br><span class="line">        UseModel::destroy(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>)</span>&#123;</span><br><span class="line">           <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="number">10</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="模型更新与查询"><a href="#模型更新与查询" class="headerlink" title="模型更新与查询"></a>模型更新与查询</h2><h3 id="1-数据修改"><a href="#1-数据修改" class="headerlink" title="1.数据修改"></a>1.数据修改</h3><p>（1）get方法获取然后修改</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get方法获取数据，然后修改</span></span><br><span class="line"><span class="comment">// 字段出错，没有报错 :(</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// get方法获取主键</span></span><br><span class="line">    <span class="variable">$user</span> = UseModel::get(<span class="number">8</span>);</span><br><span class="line">    <span class="variable">$user</span>-&gt;username = <span class="string">&#x27;鲨掉&#x27;</span>;</span><br><span class="line">    <span class="variable">$user</span>-&gt;password = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">    <span class="comment">// 最后通过save()方法保存修改</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$user</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）where()+find()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// where方法结合find()方法获得数据，然后修改</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$user</span> = UseModel::where(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;Eem&#x27;</span>)-&gt;find();</span><br><span class="line">    <span class="variable">$user</span>-&gt;password = <span class="string">&#x27;Subaru!&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$user</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）save批量修改数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接利用save更新数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$user</span>-&gt;save([</span><br><span class="line">        <span class="comment">// 更新的数据</span></span><br><span class="line">        <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;1234&#x27;</span></span><br><span class="line"></span><br><span class="line">    ], [</span><br><span class="line">        <span class="comment">// 定位数据条件</span></span><br><span class="line">        <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用saveAll()方法批量修改数据</span></span><br><span class="line"><span class="comment">// saveAll方法只能通过主键（放在第一位）进行更新</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">four</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line">    <span class="variable">$user</span>-&gt;saveAll([</span><br><span class="line"></span><br><span class="line">        [<span class="string">&#x27;id&#x27;</span>=&gt; <span class="number">7</span>, <span class="string">&#x27;username&#x27;</span>=&gt; <span class="string">&#x27;test1&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;id&#x27;</span>=&gt; <span class="number">8</span>, <span class="string">&#x27;username&#x27;</span>=&gt; <span class="string">&#x27;test2&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;id&#x27;</span>=&gt; <span class="number">9</span>, <span class="string">&#x27;username&#x27;</span>=&gt; <span class="string">&#x27;test3&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）静态方法更新</p><p>​    </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用数据库类库的静态方法进行修改</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = [</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;李白&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">34</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    UseModel::name(<span class="string">&#x27;user&#x27;</span>)-&gt;where(<span class="string">&#x27;id&#x27;</span>,<span class="number">4</span>)-&gt;update(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-数据查询"><a href="#2-数据查询" class="headerlink" title="2.数据查询"></a>2.数据查询</h3><p>模型：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模型名会自动对应到数据表</span></span><br><span class="line"><span class="comment">// 模型类与表名的差别：1.去除前缀tp_，2.变成大驼峰式命名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 从模型内部获取数据（即把在控制器进行的数据库操作移植到模型）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_password</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 返回某个字段</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::where(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="number">10</span>)-&gt;find()-&gt;getAttr(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据查询</span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">five</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get()方法查询</span></span><br><span class="line">        <span class="variable">$user</span> = UseModel::get(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$user</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find()方法查询</span></span><br><span class="line">        <span class="variable">$user</span> = UseModel::where(<span class="string">&#x27;id&#x27;</span>,<span class="number">9</span>)-&gt;find();</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$user</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从模型内部获取数据（即把在控制器进行的数据库操作移植到模型）</span></span><br><span class="line">        <span class="comment">// 控制器直接调用模型类的方法</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$user</span>-&gt;get_password();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态查询</span></span><br><span class="line">        <span class="variable">$user</span> = UseModel::getById(<span class="string">&#x27;40&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$user</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="模型获取器与修改器"><a href="#模型获取器与修改器" class="headerlink" title="模型获取器与修改器"></a>模型获取器与修改器</h2><h3 id="1-获取器"><a href="#1-获取器" class="headerlink" title="1.获取器"></a>1.获取器</h3><p>（1）模型获取器</p><p>在模型中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取器，修改返回字段的值（针对查询操作）</span></span><br><span class="line"><span class="comment">// -----------------------------------</span></span><br><span class="line">    <span class="comment">// 自动获取指定字段的值，get(字段名)Attr</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getStatusAttr</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 过滤器（必须包含该字段所有可能的内容）</span></span><br><span class="line">        <span class="variable">$myGet</span>=[<span class="number">1</span>=&gt;<span class="string">&#x27;正常&#x27;</span>, <span class="number">0</span>=&gt;<span class="string">&#x27;禁用&#x27;</span>, <span class="number">-1</span>=&gt;<span class="string">&#x27;删除&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$myGet</span>[<span class="variable">$value</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在控制器中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 经过模型的获取器，返回数据</span></span><br><span class="line"><span class="comment">// -----------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$user</span> = UseModel::get(<span class="number">41</span>);</span><br><span class="line">        <span class="comment">// 输出原始值</span></span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$user</span>-&gt;getData());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&lt;br/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出经过获取器过滤的值</span></span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="variable">$user</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>（2）动态获取器</p><p>​    </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态获取器，直接在控制端过滤数据</span></span><br><span class="line"><span class="comment">// --------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// withAttr方法：指定字段，然后调用方法</span></span><br><span class="line">        <span class="variable">$result</span> = UseModel::withAttr(<span class="string">&#x27;password&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> md5(<span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line">        &#125;)-&gt;select();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>（3）获取器优先级比较</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取器优先级比较</span></span><br><span class="line"><span class="comment">// -----------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 模型获取器比动态获取器优先级高</span></span><br><span class="line">    <span class="comment">// 对同一字段过滤时，动态获取器返回值会覆盖模型获取器的返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// withAttr方法：指定字段，然后调用方法</span></span><br><span class="line">        <span class="variable">$result</span> = UseModel::withAttr(<span class="string">&#x27;status&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在模型里的正常，禁止等值会被这里的获取器a，b等值覆盖</span></span><br><span class="line">            <span class="variable">$myGet</span>=[<span class="number">1</span>=&gt;<span class="string">&#x27;a&#x27;</span>, <span class="number">0</span>=&gt;<span class="string">&#x27;b&#x27;</span>, <span class="number">-1</span>=&gt;<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$myGet</span>[<span class="variable">$value</span>];</span><br><span class="line"></span><br><span class="line">        &#125;)-&gt;select();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json(<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-修改器"><a href="#2-修改器" class="headerlink" title="2.修改器"></a>2.修改器</h3><p>在模型中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改器，修改插入的值（针对插入操作）</span></span><br><span class="line"><span class="comment">// ------------------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPasswordAttr</span>(<span class="params"><span class="variable">$vaule</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> md5(<span class="variable">$vaule</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在控制器中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 经过修改器，插入数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">four</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个模型实例</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="keyword">new</span> UseModel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入操作，返回布尔值</span></span><br><span class="line">        <span class="variable">$insert</span> = <span class="variable">$user</span>-&gt;save([</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;Emiria&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;qweee&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="模型搜索器和数据集"><a href="#模型搜索器和数据集" class="headerlink" title="模型搜索器和数据集"></a>模型搜索器和数据集</h2><h3 id="1-模型搜索器"><a href="#1-模型搜索器" class="headerlink" title="1.模型搜索器"></a>1.模型搜索器</h3><p>模型搜索器用于封装字段（或搜索标识）的查询表达式</p><h3 id="2-模型数据集"><a href="#2-模型数据集" class="headerlink" title="2.模型数据集"></a>2.模型数据集</h3><p>模型数据集由all()和select()方法返回数据集对象</p><h2 id="模型自动时间戳和只读字段"><a href="#模型自动时间戳和只读字段" class="headerlink" title="模型自动时间戳和只读字段"></a>模型自动时间戳和只读字段</h2><h3 id="1-模型自动时间戳"><a href="#1-模型自动时间戳" class="headerlink" title="1.模型自动时间戳"></a>1.模型自动时间戳</h3><p>系统自动创建和更新时间</p><h3 id="2-模型只读字段"><a href="#2-模型只读字段" class="headerlink" title="2.模型只读字段"></a>2.模型只读字段</h3><p>设置只读字段，该字段无法被修改</p><h2 id="模型类型转换和数据完成"><a href="#模型类型转换和数据完成" class="headerlink" title="模型类型转换和数据完成"></a>模型类型转换和数据完成</h2><h3 id="1-模型类型转换"><a href="#1-模型类型转换" class="headerlink" title="1.模型类型转换"></a>1.模型类型转换</h3><p>通过在模型段设置写入或读取时字段类型进行转换</p><h3 id="2-模型数据完成"><a href="#2-模型数据完成" class="headerlink" title="2.模型数据完成"></a>2.模型数据完成</h3><p>模型中的数据可以通过auto，insert，update三种形式完成，设置自动填入默认值</p><h2 id="模型查询范围和输出"><a href="#模型查询范围和输出" class="headerlink" title="模型查询范围和输出"></a>模型查询范围和输出</h2><h3 id="1-模型查询范围"><a href="#1-模型查询范围" class="headerlink" title="1.模型查询范围"></a>1.模型查询范围</h3><p>在模型段创建一个封装的查询或写入方法，方便控制器端调用（自定义查询）</p><h3 id="2-模型输出方式"><a href="#2-模型输出方式" class="headerlink" title="2.模型输出方式"></a>2.模型输出方式</h3><p>包括：模板输出，数组输出，Json输出</p><h2 id="JSON字段"><a href="#JSON字段" class="headerlink" title="JSON字段"></a>JSON字段</h2><h3 id="1-数据库JSON"><a href="#1-数据库JSON" class="headerlink" title="1.数据库JSON"></a>1.数据库JSON</h3><p>在数据库的字段中，设数据类型为json类型，然后可以通过数组写入</p><h3 id="2-模型JSON"><a href="#2-模型JSON" class="headerlink" title="2.模型JSON"></a>2.模型JSON</h3><p>使用模型的方法新增包含json数据的字段</p><h2 id="软删除"><a href="#软删除" class="headerlink" title="软删除"></a>软删除</h2><p>软删除不是真正删除数据，而是给数据设置一个标记</p><h3 id="1-数据库软删除"><a href="#1-数据库软删除" class="headerlink" title="1.数据库软删除"></a>1.数据库软删除</h3><p>创建一个软删除时间的字段，填入时间标记</p><h3 id="2-模型软删除"><a href="#2-模型软删除" class="headerlink" title="2.模型软删除"></a>2.模型软删除</h3><p>一般推荐使用模型端进行软删除</p><h2 id="模板引擎和视图渲染"><a href="#模板引擎和视图渲染" class="headerlink" title="模板引擎和视图渲染"></a>模板引擎和视图渲染</h2><h3 id="1-模板引擎"><a href="#1-模板引擎" class="headerlink" title="1.模板引擎"></a>1.模板引擎</h3><p>模板引擎渲染视图</p><p>模板引擎分成两种，一种是内置的，一种外置作为插件引入的（我们使用内置即可）</p><h3 id="2-视图渲染"><a href="#2-视图渲染" class="headerlink" title="2.视图渲染"></a>2.视图渲染</h3><p>通过控制器，把模板引擎的模板页面（视图渲染）加载进来</p><h2 id="视图赋值和过滤"><a href="#视图赋值和过滤" class="headerlink" title="视图赋值和过滤"></a>视图赋值和过滤</h2><h3 id="1-视图赋值"><a href="#1-视图赋值" class="headerlink" title="1.视图赋值"></a>1.视图赋值</h3><p>在视图中给模板页面传递值</p><h3 id="2-视图过滤"><a href="#2-视图过滤" class="headerlink" title="2.视图过滤"></a>2.视图过滤</h3><p>对模板输入的变量进行过滤</p><h2 id="模板变量输出"><a href="#模板变量输出" class="headerlink" title="模板变量输出"></a>模板变量输出</h2><h3 id="1-变量输出"><a href="#1-变量输出" class="headerlink" title="1.变量输出"></a>1.变量输出</h3><p>当模板文件位置创建好后，输出控制器为变量赋值，然后通过<code>&#123;$name&#125;</code>这样的方式在模板输出变量值</p><h3 id="2-其他输出"><a href="#2-其他输出" class="headerlink" title="2.其他输出"></a>2.其他输出</h3><h2 id="模板中函数的使用和运算符"><a href="#模板中函数的使用和运算符" class="headerlink" title="模板中函数的使用和运算符"></a>模板中函数的使用和运算符</h2><p>在前端模板页面使用函数和运算符达到灵活地渲染出动态数据</p><h3 id="1-使用函数"><a href="#1-使用函数" class="headerlink" title="1.使用函数"></a>1.使用函数</h3><p>提供一些函数方法对数据进行过滤处理，使用管道符进行调用</p><h3 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2.运算符"></a>2.运算符</h3><p>在模板中可以对数据进行运算处理</p><h2 id="模板的循环标签"><a href="#模板的循环标签" class="headerlink" title="模板的循环标签"></a>模板的循环标签</h2><p>模板循环输出循环块，动态输出数据</p><h3 id="1-foreach循环"><a href="#1-foreach循环" class="headerlink" title="1.foreach循环"></a>1.foreach循环</h3><p>控制器通过模型把数据列表筛选出来，再传递到视图，然后再将其渲染出来</p><h3 id="2-volist循环"><a href="#2-volist循环" class="headerlink" title="2.volist循环"></a>2.volist循环</h3><p>volist也是将查询的到的数据集通过循环的方式进行输出</p><h3 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a>3.for循环</h3><p>for循环可以通过起始和终止值，结合步长实现循环</p><h2 id="模板的比较和定义"><a href="#模板的比较和定义" class="headerlink" title="模板的比较和定义"></a>模板的比较和定义</h2><h3 id="1-比较标签"><a href="#1-比较标签" class="headerlink" title="1.比较标签"></a>1.比较标签</h3><p>{eq}{/eq}标签，比较两个值是否相同，相同即输出包含内容</p><p>还存在其他不同的标签代替不同的关系运算符对变量进行比较</p><h3 id="2-定义标签"><a href="#2-定义标签" class="headerlink" title="2.定义标签"></a>2.定义标签</h3><p>在模板页面定义一个变量，可以使用{assgin}标签，</p><h2 id="模板的条件判断标签"><a href="#模板的条件判断标签" class="headerlink" title="模板的条件判断标签"></a>模板的条件判断标签</h2><h3 id="1-switch标签"><a href="#1-switch标签" class="headerlink" title="1.switch标签"></a>1.switch标签</h3><p>实现多个条件判断</p><h3 id="2-if标签"><a href="#2-if标签" class="headerlink" title="2.if标签"></a>2.if标签</h3><p>基本条件判断语句</p><h3 id="3-范围标签"><a href="#3-范围标签" class="headerlink" title="3.范围标签"></a>3.范围标签</h3><p>{in}和{notin}，判断值是否存在或不存在指定的数据列表中</p><h3 id="4-是否存在标签"><a href="#4-是否存在标签" class="headerlink" title="4.是否存在标签"></a>4.是否存在标签</h3><p>是否存在：{present}和{notpresent}判断变量是否已经定义赋值</p><p>是否为空：{empty}和{notempty}判断变量是否为空值;</p><h2 id="模板的加载包含输出"><a href="#模板的加载包含输出" class="headerlink" title="模板的加载包含输出"></a>模板的加载包含输出</h2><h3 id="1-包含文件"><a href="#1-包含文件" class="headerlink" title="1.包含文件"></a>1.包含文件</h3><p>使用{include}标签加载公用重复的文件，比如头部，尾部和导航部分</p><h3 id="2-输出替换"><a href="#2-输出替换" class="headerlink" title="2.输出替换"></a>2.输出替换</h3><p>在模板中常常需要调用一些静态文件，比如css/js。直接写完整的路径引入，比较冗长，所以需要把这些路径整理打包</p><h3 id="3-文件加载"><a href="#3-文件加载" class="headerlink" title="3.文件加载"></a>3.文件加载</h3><p>传统方式调用css或js文件时，采用link和script标签实现。tp5提供了{load}标签的方法加载css和js文件</p><h2 id="模板的布局和继承"><a href="#模板的布局和继承" class="headerlink" title="模板的布局和继承"></a>模板的布局和继承</h2><h3 id="1-模板布局"><a href="#1-模板布局" class="headerlink" title="1.模板布局"></a>1.模板布局</h3><p>默认不支持模板布局功能，需要在配置文件中开启</p><h3 id="2-模板继承"><a href="#2-模板继承" class="headerlink" title="2.模板继承"></a>2.模板继承</h3><p>模板继承的布局方法更加灵活，把内容和样式分离</p><h2 id="路由介绍和定义"><a href="#路由介绍和定义" class="headerlink" title="路由介绍和定义"></a>路由介绍和定义</h2><h3 id="1-路由简介"><a href="#1-路由简介" class="headerlink" title="1.路由简介"></a>1.路由简介</h3><p>路由的作用是让url地址更将规范优雅（tp的默认url确实有点过分了）</p><p>设置路由对url的检验，验证等一系列操作提供了极大的便利性</p><h3 id="2-路由定义"><a href="#2-路由定义" class="headerlink" title="2.路由定义"></a>2.路由定义</h3><p>为url自定义路由规则，让url访问更加简洁和优雅( •̀ ω •́ )✧</p><p>在route文件下定制自己专属的路由规则</p><h2 id="路由的变量规则和闭包"><a href="#路由的变量规则和闭包" class="headerlink" title="路由的变量规则和闭包"></a>路由的变量规则和闭包</h2><h3 id="1-变量规则"><a href="#1-变量规则" class="headerlink" title="1.变量规则"></a>1.变量规则</h3><p>用户可以通过自定义的路由进行传值，我们通过设置变量规则对输入的值进行过滤出来</p><h3 id="2-闭包支持"><a href="#2-闭包支持" class="headerlink" title="2.闭包支持"></a>2.闭包支持</h3><p>闭包支持可以让用户通过url直接执行语句，不需要通过控制器和方法</p><h2 id="路由的地址和缓存"><a href="#路由的地址和缓存" class="headerlink" title="路由的地址和缓存"></a>路由的地址和缓存</h2><h3 id="1-路由地址"><a href="#1-路由地址" class="headerlink" title="1.路由地址"></a>1.路由地址</h3><p>路由的地址一般为：控制器/方法，如果是多模块则为：模块/控制器/方法</p><h3 id="2-路由缓存"><a href="#2-路由缓存" class="headerlink" title="2.路由缓存"></a>2.路由缓存</h3><p>开启路由缓存可以极高提高性能，需要在部署环境下才有效果</p><h2 id="路由的参数和快捷路由"><a href="#路由的参数和快捷路由" class="headerlink" title="路由的参数和快捷路由"></a>路由的参数和快捷路由</h2><h3 id="1-路由参数"><a href="#1-路由参数" class="headerlink" title="1.路由参数"></a>1.路由参数</h3><p>设置路由时，可以设置第三个数组参数，主要实施匹配检测和行为执行（比如检测文件类型，绑定到模型）</p><h3 id="2-快捷路由"><a href="#2-快捷路由" class="headerlink" title="2.快捷路由"></a>2.快捷路由</h3><p>快捷路由可以快速给控制器注册路由，还可以更加不同的请求类型设置前缀</p><h2 id="路由分组和注解"><a href="#路由分组和注解" class="headerlink" title="路由分组和注解"></a>路由分组和注解</h2><h3 id="1-路由分组"><a href="#1-路由分组" class="headerlink" title="1.路由分组"></a>1.路由分组</h3><p>将相同前缀的路由合并分组，这样可以简化路由定义，提高匹配效率</p><p>使用group方法进行分组路由注册</p><h3 id="2-注解路由"><a href="#2-注解路由" class="headerlink" title="2.注解路由"></a>2.注解路由</h3><p>tp5提供了一个可以在注解中直接创建路由的方式（默认关闭），在控制器写入路由注解可以达到在router.php写路由同样的效果</p><h2 id="路由MISS和跨域请求"><a href="#路由MISS和跨域请求" class="headerlink" title="路由MISS和跨域请求"></a>路由MISS和跨域请求</h2><h3 id="1-MISS路由"><a href="#1-MISS路由" class="headerlink" title="1.MISS路由"></a>1.MISS路由</h3><p>开启强制路由功能，匹配不到相应规则时自动跳转到MISS（控制器中的miss方法）</p><h3 id="2-跨域请求"><a href="#2-跨域请求" class="headerlink" title="2.跨域请求"></a>2.跨域请求</h3><p>但不同域名进行跨域请求时，由于浏览器的安全限制，会被拦截</p><p>在路由中使用allowCrossDomain()方法可以解除跨域的限制（在restful api 这种前后端分离的架构上，这点尤为重要）</p><p>把域名限制添加到头部中可以限制访问的域名</p><h2 id="路由的绑定和别名"><a href="#路由的绑定和别名" class="headerlink" title="路由的绑定和别名"></a>路由的绑定和别名</h2><h3 id="1-路由绑定"><a href="#1-路由绑定" class="headerlink" title="1.路由绑定"></a>1.路由绑定</h3><p> 路由绑定可以简化URL和路由规则的定义，可以绑定到模块/控制器/操作</p><h3 id="2-路由别名"><a href="#2-路由别名" class="headerlink" title="2.路由别名"></a>2.路由别名</h3><p>给控制器起一个别名，可以通过别名自动生成一系列规则</p><h2 id="资源路由"><a href="#资源路由" class="headerlink" title="资源路由"></a>资源路由</h2><p>采用固定的常用方法来实现简化URL功能</p><p>系统提供一个命令，方便开发者快速生成一个资源控制器（自动生成包括显示，增删改查等多个操作方法）</p><h2 id="域名路由"><a href="#域名路由" class="headerlink" title="域名路由"></a>域名路由</h2><h3 id="1-域名路由"><a href="#1-域名路由" class="headerlink" title="1.域名路由"></a>1.域名路由</h3><p>在电脑host文件中，添加域名映射</p><h3 id="2-域名绑定"><a href="#2-域名绑定" class="headerlink" title="2.域名绑定"></a>2.域名绑定</h3><p>在配置文件app.php中可以设置根域名，如果实际域名不符，会解析失败（默认自动获取）</p><h2 id="路由的URL生成"><a href="#路由的URL生成" class="headerlink" title="路由的URL生成"></a>路由的URL生成</h2><p>之前的URL都是我们手动设置的，tp5提供了一套自动生成的方法（控制器的方法中写入）</p><h2 id="请求对象和信息"><a href="#请求对象和信息" class="headerlink" title="请求对象和信息"></a>请求对象和信息</h2><h3 id="1-请求对象的获取"><a href="#1-请求对象的获取" class="headerlink" title="1.请求对象的获取"></a>1.请求对象的获取</h3><p>（1）继承控制器基类时，会自动被注入Request请求对象的功能</p><p>（2）自行注入Request请求对象（依赖注入）</p><p>（3）facade方式：应用于没有进行依赖注入的场合</p><p>（4）使用助手函数request()方法</p><h2 id="请求变量"><a href="#请求变量" class="headerlink" title="请求变量"></a>请求变量</h2><h3 id="1-请求变量"><a href="#1-请求变量" class="headerlink" title="1.请求变量"></a>1.请求变量</h3><p>Request对象支持全局变量的检测，获取和安全过滤（主要作用对象是url）</p><h3 id="2-助手函数"><a href="#2-助手函数" class="headerlink" title="2.助手函数"></a>2.助手函数</h3><p>使用助手函数对Request对象提供的方法进行简化</p><h3 id="请求类型与请求头"><a href="#请求类型与请求头" class="headerlink" title="请求类型与请求头"></a>请求类型与请求头</h3><h3 id="1-请求类型"><a href="#1-请求类型" class="headerlink" title="1.请求类型"></a>1.请求类型</h3><p>我们用method()方法判断Request的请求类型</p><h3 id="2-Http头信息"><a href="#2-Http头信息" class="headerlink" title="2.Http头信息"></a>2.Http头信息</h3><p>使用header()方法输出http头信息，返回是数组类型</p><h2 id="伪静态-参数绑定-请求缓存"><a href="#伪静态-参数绑定-请求缓存" class="headerlink" title="伪静态-参数绑定-请求缓存"></a>伪静态-参数绑定-请求缓存</h2><h3 id="1-伪静态"><a href="#1-伪静态" class="headerlink" title="1.伪静态"></a>1.伪静态</h3><p>伪静态技术是指展示出来的是以html一类的静态页面形式，但其实是用动态脚本来处理的。</p><h3 id="2-参数绑定"><a href="#2-参数绑定" class="headerlink" title="2.参数绑定"></a>2.参数绑定</h3><p>参数绑定功能：即通过url进行数据传参</p><h3 id="3-请求缓存"><a href="#3-请求缓存" class="headerlink" title="3.请求缓存"></a>3.请求缓存</h3><p>请求缓存仅对GET请求有效，并设置有效期</p><h2 id="响应重定向和文件下载"><a href="#响应重定向和文件下载" class="headerlink" title="响应重定向和文件下载"></a>响应重定向和文件下载</h2><h3 id="1-响应操作"><a href="#1-响应操作" class="headerlink" title="1.响应操作"></a>1.响应操作</h3><p>（1）响应输出：return, json, view</p><p>（2）response方法可以设置第二参数：状态码，也可以调code()方法返回状态码</p><p>（3）通过header()设置头文件</p><h3 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2.重定向"></a>2.重定向</h3><p>使用redirect()方法可以实现页面重定向，需要return执行（即页面跳转）</p><h3 id="3-文件下载"><a href="#3-文件下载" class="headerlink" title="3.文件下载"></a>3.文件下载</h3><p>文件和图片下载都可以使用download()方法即可，路径为实际路径</p><h2 id="容器和依赖注入"><a href="#容器和依赖注入" class="headerlink" title="容器和依赖注入"></a>容器和依赖注入</h2><h3 id="1-依赖注入"><a href="#1-依赖注入" class="headerlink" title="1.依赖注入"></a>1.依赖注入</h3><p>依赖注入本质上是指对类的依赖通过构造器完成自动注入</p><p>依赖注入：即允许通过类的方法传递对象，并约束了对象类型,二传递的对象背后的那个类被自动绑定并且实例化了</p><p>由于控制器的参数都来自于URL请求，普通变量通过参数绑定自动获取，对象变量则是通过依赖注入生成</p><h3 id="2-容器"><a href="#2-容器" class="headerlink" title="2.容器"></a>2.容器</h3><p>依赖注入的类统一由容器管理的，大多数情况下是自动绑定和自动实例化</p><p>在容器中可以通过bind()和app()来实现手动的绑定和实例化</p><h2 id="Facade"><a href="#Facade" class="headerlink" title="Facade"></a>Facade</h2><h3 id="1-创建静态调用"><a href="#1-创建静态调用" class="headerlink" title="1.创建静态调用"></a>1.创建静态调用</h3><p>facade即门面设计模式，为容器的类提供了一种静态调用模式（比如之前使用的Request::，Route::，Db::等等）</p><p>在common文件创建容器，在facade文件创建静态调用方法对应common的方法</p><h3 id="2-facade核心类库"><a href="#2-facade核心类库" class="headerlink" title="2.facade核心类库"></a>2.facade核心类库</h3><p>上面仅仅是展示了facade运行的原理，在实际运用中我们使用系统提供的facade核心类库即可</p><h2 id="钩子和行为"><a href="#钩子和行为" class="headerlink" title="钩子和行为"></a>钩子和行为</h2><h3 id="1-概念理解"><a href="#1-概念理解" class="headerlink" title="1.概念理解"></a>1.概念理解</h3><p>行为：当执行到路由时，对路由的设置进行一系列的检测，这种就叫行为</p><p>钩子（事件）：行为执行的位置点，触发点</p><h3 id="2-实例展示"><a href="#2-实例展示" class="headerlink" title="2.实例展示"></a>2.实例展示</h3><p>在behavior文件夹下，存放行为类，行为类中设置一个入口方法run()，只要钩子被触发就会执行</p><p>钩子需要在配置文件中的tags.php设置，把行为注册到其中</p><p>我们也可以在tags.php自定义自己的钩子</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="1-定义中间件"><a href="#1-定义中间件" class="headerlink" title="1.定义中间件"></a>1.定义中间件</h3><p>中间件与钩子类似，主要用于拦截和过滤HTTP请求（如URL重定向，权限验证），并进行相应处理</p><p>通过命令行，在应用目录下生成一个中间件文件</p><p>在配置文件夹下设置中间件配置文件：middleware.php（默认说没有的）</p><h3 id="2-前-后置中间件"><a href="#2-前-后置中间件" class="headerlink" title="2.前/后置中间件"></a>2.前/后置中间件</h3><p>前置中间件就是请求阶段进行拦截验证，比如登录判断，跳转，权限等</p><p>后置中间件就是请求完毕后在进行验证，比如写入日志</p><h3 id="3-路由中间件"><a href="#3-路由中间件" class="headerlink" title="3.路由中间件"></a>3.路由中间件</h3><p>给路由使用的中间件，当检测到路由含指定条件，就触发这个中间件</p><h3 id="4-控制器中间件"><a href="#4-控制器中间件" class="headerlink" title="4.控制器中间件"></a>4.控制器中间件</h3><p>可以在控制器中注册中间件，控制器必须继承Controller基类</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="1-异常处理"><a href="#1-异常处理" class="headerlink" title="1.异常处理"></a>1.异常处理</h3><p>（1）使用Exception手动抛出异常</p><p>（2）try……cacth对异常捕捉并抛出</p><p>（3）用HttpException手动抛出http异常</p><p>（4）系统上线要关闭调试模式，进入部署环境下，可以在配置文件设置http错误页面    </p><h2 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h2><p>日志处理由Log类完成，记录所有程序中运行的错误记录</p><p>系统的报错会自动存入日志中，我们也可以手动添加日志</p><h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><h3 id="1-验证器"><a href="#1-验证器" class="headerlink" title="1.验证器"></a>1.验证器</h3><p>系统提供了一条命令直接生成验证器类</p><p>在类中我们可以设置规则，定义错误信息</p><p>默认情况下，一旦数据验证不符合规则，就会立即停止验证进行返回</p><h3 id="2-验证规则"><a href="#2-验证规则" class="headerlink" title="2.验证规则"></a>2.验证规则</h3><p>验证规则有字符串模式和数组模式两种</p><p>独立验证（手动调用验证类），直接在控制器中设置验证规则而无需通过验证器</p><p>独立验证支持闭包模式，部支持属性方式和多规则方式</p><h3 id="3-验证场景"><a href="#3-验证场景" class="headerlink" title="3.验证场景"></a>3.验证场景</h3><p>有时我们并不希望所有的字段都得到验证，这是可以设置一个$scene属性，用来限定场景验证</p><p>比如做插入操作时验证3个字段，而做修改操作时只验证两个字段</p><h3 id="4-路由验证"><a href="#4-路由验证" class="headerlink" title="4.路由验证"></a>4.路由验证</h3><p>在路由的参数来调用验证类进行验证，和字段验证一样</p><p>在路由中绑定验证器</p><p>也可以在路由中写入独立的验证器</p><h2 id="验证静态调用和令牌"><a href="#验证静态调用和令牌" class="headerlink" title="验证静态调用和令牌"></a>验证静态调用和令牌</h2><h3 id="1-静态调用"><a href="#1-静态调用" class="headerlink" title="1.静态调用"></a>1.静态调用</h3><p>使用facade模式进行调用验证，非常适合单个数据验证</p><h3 id="2-表单令牌"><a href="#2-表单令牌" class="headerlink" title="2.表单令牌"></a>2.表单令牌</h3><p>表单令牌就是在表单中增加一个隐藏字段，随机生成一串字符，确认提交的表单不是伪造</p><p>这种随机产生的字符和服务器的seesion进行对比，通过则是合法表单</p><h2 id="独立验证和内置规则"><a href="#独立验证和内置规则" class="headerlink" title="独立验证和内置规则"></a>独立验证和内置规则</h2><h3 id="1-独立验证"><a href="#1-独立验证" class="headerlink" title="1.独立验证"></a>1.独立验证</h3><p>除了之前提过的独立验证，系统还提供了make方法实现独立验证（tp6废弃）</p><h3 id="2-内置规则"><a href="#2-内置规则" class="headerlink" title="2.内置规则"></a>2.内置规则</h3><p>内置规则说系统准备的常用验证规则，而且严格区分大小写</p><h2 id="数据库与模型-1"><a href="#数据库与模型-1" class="headerlink" title="数据库与模型"></a>数据库与模型</h2><h2 id="Seesion"><a href="#Seesion" class="headerlink" title="Seesion"></a>Seesion</h2><p>session第一次调用时，会按照config/seesion.php进行初始化</p><p>也可以在控制器中设置初始化</p><p>使用::set()和::get()方法设置seesion的存取</p><p>助手函数也有对应的替代方法</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>cookie在配置文件cookie.php中会自行初始化</p><p>::set()创建一个基本cookie</p><h2 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h2><p>数据库操作和模型操作，都使用paginate()方法来实现</p><h2 id="上传功能"><a href="#上传功能" class="headerlink" title="上传功能"></a>上传功能</h2><p>Request::file方法文件接收文件，然后调用move方法将文件移动到指定文件夹</p><p>可以设置验证器，用于验证文件大小类型等</p><p>默认情况下，上传文件是按时间生成命名的</p><h2 id="数据库和模型的事件"><a href="#数据库和模型的事件" class="headerlink" title="数据库和模型的事件"></a>数据库和模型的事件</h2><h3 id="1-数据库事件"><a href="#1-数据库事件" class="headerlink" title="1.数据库事件"></a>1.数据库事件</h3><p>当对数据库进行增删改查时，可以触发一些事件进行额外操作，它们可以部署在构造方法中等待激活执行</p><p>在控制器端，事件一般可以写在构造方法中，统一管理</p><h3 id="2-模型事件"><a href="#2-模型事件" class="headerlink" title="2.模型事件"></a>2.模型事件</h3><p>在模型端，创建init()方法，写入模型事件，可以使用event或快捷方式</p><h2 id="关联模型"><a href="#关联模型" class="headerlink" title="关联模型"></a>关联模型</h2><p>关联模型，就是将表与表之间进行关联和对象化，更高效的操作数据</p><h3 id="1-一对一关联"><a href="#1-一对一关联" class="headerlink" title="1.一对一关联"></a>1.一对一关联</h3><p>（1）hasOne模式</p><p>模型端使用hasone方法创建一对一关联关系，参数1为附表名，参数2为外键，参数3为主键</p><p>hasOmne模型适合主表关联附表</p><p>在关联表中，-&gt;profile属性方式可以修改数据，删除数据，-&gt;profile()方法方式可以新增数据</p><h3 id="2-一对多关联"><a href="#2-一对多关联" class="headerlink" title="2.一对多关联"></a>2.一对多关联</h3><p>hansMany适合主表关联附表，实现一对多查询，可以查多个重复外键的数据</p><p>使用-&gt;profile()方法模式加上where可以进一步筛选数据</p><p>也可以通过has()和haswhere()通过关联附表查询主表</p><h3 id="3-关联预载入"><a href="#3-关联预载入" class="headerlink" title="3.关联预载入"></a>3.关联预载入</h3><p>在关联查询中，当查询次数过大时，我们可以使用关联预载入进行封装，使多次查询变成一次查询</p><p>使用with方式进行关联</p><p>关联预载入减少查询次数提高了性能，但不支持多次调用</p><h3 id="4-关联统计和输出"><a href="#4-关联统计和输出" class="headerlink" title="4.关联统计和输出"></a>4.关联统计和输出</h3><p>关联统计：</p><ul><li>使用withCount()方法可以统计主表关联附表的个数</li><li>使用withMax()等统计主表关于附表的字段统计</li></ul><p>关联输出：</p><p>隐藏，显示，添加主表字段或附属表字段，然后输出</p><h3 id="5-多对多关联查询"><a href="#5-多对多关联查询" class="headerlink" title="5.多对多关联查询"></a>5.多对多关联查询</h3><p>一对一场景：一个用户对应一个档案资料（至少两张表）</p><p>一对多场景：一个用户可以有多条评论（至少两张表）</p><p>多对多场景：一个用户对应多个角色，而一个角色对应多个用户（至少三张表）</p><p>多对多关联使用belongsToMany方法，填入其他两个附表模型信息作为参数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041014601.jpeg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="https://autovy.github.io/categories/php/"/>
    
    
      <category term="框架学习" scheme="https://autovy.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="后端" scheme="https://autovy.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="thinkphp" scheme="https://autovy.github.io/tags/thinkphp/"/>
    
  </entry>
  
  <entry>
    <title>Python|自动化脚本实战手册</title>
    <link href="https://autovy.github.io/2021/03/28/Python/Python-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E6%88%98%E6%89%8B%E5%86%8C/"/>
    <id>https://autovy.github.io/2021/03/28/Python/Python-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E6%88%98%E6%89%8B%E5%86%8C/</id>
    <published>2021-03-27T16:00:00.000Z</published>
    <updated>2021-09-05T08:41:39.674Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040841155.jpg" alt="python"></p><span id="more"></span><h4 id="调用系统终端（cmd）"><a href="#调用系统终端（cmd）" class="headerlink" title="调用系统终端（cmd）"></a>调用系统终端（cmd）</h4><h5 id="1-运用场景"><a href="#1-运用场景" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>有一些工具是使用命令行来执行的，这时可以调用系统终端来实现自动化</p><p>如：</p><p>swftool：<a href="http://www.swftools.org/">http://www.swftools.org/</a>     （swf转换工具）</p><p>ffmpeg：<a href="https://ffmpeg.org/">https://ffmpeg.org/</a>    （视频转码工具）</p><h5 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pdf转swf</span></span><br><span class="line">os.system(<span class="string">&#x27;E:\swftools\pdf2swf.exe -b E:\swftools\pdf\%s.pdf -o E:\swftools\swf\%s.swf&#x27;</span> % (name, name))</span><br></pre></td></tr></table></figure><h5 id="3-语法解释"><a href="#3-语法解释" class="headerlink" title="3.语法解释"></a>3.语法解释</h5><ul><li><p><code>import os</code>引入os模块，该模块主要提供与操作系统相关的功能的便捷式途径</p></li><li><p><code>os.system</code>可以在系统的子shell中执行命令，在windows上即相当于在cmd运行命令行，其返回值为命令退出的状态</p></li><li><p><code>os.system</code>运行命令行时无法实时显示运行过程，只能最终返回运行结果，这是和在cmd运行时的差别</p></li><li><p>使用<code>system</code>函数，会创建一个子进程，但是子进程无法影响父进程中的环境变量。简单来说，就是使用第一个<code>system</code>函数用cd切换目录，第二个<code>system</code>函数的环境变量仍然继承父进程的环境变量。所以第二个子进程的目录位置没有被第一条语句改变</p></li><li><p>关于新进程的生成和跟踪执行结果，往往用<code>subprocess</code>模块代替<code>system</code></p></li><li><p>在<code>system</code>函数执行多条语句的方法，可以使用复合语句，如：<code>os.system(&#39;cd path-to-repo &amp;&amp; svn ci&#39;)</code>，即都在一个子进程中运行命令</p></li><li><p>或者使用<code>os.chdir</code>切换父进程的目录，再执行子进程</p></li></ul><h4 id="文件遍历筛选"><a href="#文件遍历筛选" class="headerlink" title="文件遍历筛选"></a>文件遍历筛选</h4><h5 id="1-运用场景-1"><a href="#1-运用场景-1" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>在自动化批量操作文件时，一定少不了文件遍历，并且可以筛选出需要的文件</p><h5 id="2-实例-1"><a href="#2-实例-1" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入python的标准库os库</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 遍历文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="comment"># 初始化一个空列表存储文件</span></span><br><span class="line">    list_all = []</span><br><span class="line">    <span class="comment"># 搜索一个目录下的所有文件夹和所有文件内的指定类型文件</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&#x27;E:\swftools\%s&#x27;</span> % name):</span><br><span class="line">        <span class="comment"># 获得文件名</span></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            <span class="comment"># 加上文件路径</span></span><br><span class="line">            dir_path = os.path.join(root, name)</span><br><span class="line">            <span class="comment"># 切割出文件名</span></span><br><span class="line">            dir_name = os.path.split(dir_path)[-<span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 筛选文件</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;.pdf&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;.swf&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">                list_all.append(dir_name)</span><br><span class="line">        <span class="keyword">return</span> list_all</span><br></pre></td></tr></table></figure><h5 id="3-语法解释-1"><a href="#3-语法解释-1" class="headerlink" title="3.语法解释"></a>3.语法解释</h5><ul><li><code>os.walk(根目录)</code>可返回3元组 (dirpath, dirnames, filenames)【文件夹相对路径, 文件夹名字, 文件名】</li><li><code>os.path.join</code>拼接路径</li><li><code>os.path.split(path)</code>拆分路径为<code>(head, tail)</code></li></ul><h4 id="服务器操作"><a href="#服务器操作" class="headerlink" title="服务器操作"></a>服务器操作</h4><h5 id="1-运用场景-2"><a href="#1-运用场景-2" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>可以运用在将本地文件上传到服务器或者操作服务器上的文件，还可以调用服务器的终端（可用于在服务器上制作视频流）</p><h5 id="2-实例-2"><a href="#2-实例-2" class="headerlink" title="2.实例"></a>2.实例</h5><p>参考博客：</p><p><a href="https://www.jianshu.com/p/486dd9993125">https://www.jianshu.com/p/486dd9993125</a></p><p><a href="https://juejin.cn/post/6844904078057668615">https://juejin.cn/post/6844904078057668615</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="comment"># 建立ssh连接的同时，建立一个加密的文件传输通道</span></span><br><span class="line"><span class="comment"># 设置连接服务器信息</span></span><br><span class="line">t = paramiko.Transport((<span class="string">&quot;host（主机号）&quot;</span>, 端口（一般为<span class="number">22</span>）))</span><br><span class="line">t.connect(username=<span class="string">&quot;用户名&quot;</span>, password=<span class="string">&quot;密码&quot;</span>)</span><br><span class="line"><span class="comment"># 将sshclient的对象的transport指定为以上的t，即进行ssh连接</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh._transport = t</span><br><span class="line"><span class="comment"># ssh连接后在服务器终端运行命令，此处为复合语句</span></span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">&#x27;cd /../var/www/;pwd;&#x27;</span>)</span><br><span class="line"><span class="comment"># 开启sftp通道，传输文件</span></span><br><span class="line">sftp = ssh.open_sftp()</span><br><span class="line"><span class="comment"># 文件传输</span></span><br><span class="line">sftp.put(localpath=<span class="string">&#x27;本地路径&#x27;</span>, remotepath=<span class="string">&#x27;远程路径’)</span></span><br><span class="line"><span class="string"># 关闭通道</span></span><br><span class="line"><span class="string">sftp.close</span></span><br></pre></td></tr></table></figure><h5 id="3-语法解释-2"><a href="#3-语法解释-2" class="headerlink" title="3. 语法解释"></a>3. 语法解释</h5><ul><li><p>paramiko模块主要用于远程操作服务器，利用该模块，可以方便的进行ssh连接和sftp协议进行sftp文件传输</p></li><li><p><code>pip install paramiko</code>下载安装paramiko模块</p></li><li><p>使用paramiko模块有两种连接方式，一种是通过<code>paramiko.SSHClient()</code>函数，另外一种是通过<code>paramiko.Transport()</code>函数</p></li><li><p><code>exec_command</code>函数调用会返回3个变量，其中stdout为标准输出，在输出内容比较少时，可以通过直接使用read读取出所有的输出</p></li><li><p>sftp用get函数即下载远程文件，put函数即上传本地文件</p></li></ul><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><h5 id="1-运用场景-3"><a href="#1-运用场景-3" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>筛选统计数据库，或者可以利用数据库批量快捷发布网站内容（如基于wordpress的站点）</p><h5 id="2-实例-3"><a href="#2-实例-3" class="headerlink" title="2.实例"></a>2.实例</h5><p>参考文章：<a href="https://www.runoob.com/python3/python3-mysql.html">https://www.runoob.com/python3/python3-mysql.html</a></p><p>（1）引入所需库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> sshtunnel <span class="keyword">import</span> SSHTunnelForwarder</span><br></pre></td></tr></table></figure><p>（2）连接一般数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link</span>():</span></span><br><span class="line">data = pymysql.connect(host=<span class="string">&#x27;数据库主机号&#x27;</span>, port=端口, user=<span class="string">&#x27;用户名&#x27;</span>, passwd=<span class="string">&#x27;密码&#x27;</span>, db=<span class="string">&#x27;数据库名&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>（3）连接需要跳板机的数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link_base</span>():</span></span><br><span class="line">    server = SSHTunnelForwarder(</span><br><span class="line">            (<span class="string">&#x27;跳板机主机号&#x27;</span>, <span class="number">22</span>),  <span class="comment"># B机器的配置</span></span><br><span class="line">            ssh_password=<span class="string">&quot;跳板机密码&quot;</span>,</span><br><span class="line">            ssh_username=<span class="string">&quot;跳板机用户名&quot;</span>,</span><br><span class="line">            remote_bind_address=(<span class="string">&#x27;数据库主机号&#x27;</span>, 数据库端口))</span><br><span class="line"></span><br><span class="line">    server.start()</span><br><span class="line"></span><br><span class="line">    data = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,  <span class="comment"># 此处必须是是127.0.0.1</span></span><br><span class="line">                               port=server.local_bind_port,</span><br><span class="line">                               user=<span class="string">&#x27;数据库用户名&#x27;</span>,</span><br><span class="line">                               passwd=<span class="string">&#x27;数据库密码&#x27;</span>,</span><br><span class="line">                               db=<span class="string">&#x27;数据库名&#x27;</span></span><br><span class="line">                               )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>（4） 利用sql语句操作数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取目标id</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mysql</span>():</span></span><br><span class="line">    <span class="comment"># 获得连接后的数据库</span></span><br><span class="line">    data = link()</span><br><span class="line">    <span class="comment"># 使用 cursor() 方法创建一个游标对象 cursor</span></span><br><span class="line">    cursor = data.cursor()</span><br><span class="line">    <span class="comment"># 用execute执行sql语句操作数据库</span></span><br><span class="line">    sql = <span class="string">&quot;sql语句&quot;</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果为查询操作</span></span><br><span class="line">    <span class="comment"># 获取指针指向的数据</span></span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    <span class="comment"># 输出获取的元组数据</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果为增删改操作</span></span><br><span class="line"><span class="comment"># 提交到数据库执行</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       <span class="comment"># 执行sql语句</span></span><br><span class="line">       cursor.execute(sql)</span><br><span class="line">       <span class="comment"># 提交到数据库执行</span></span><br><span class="line">       db.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">       <span class="comment"># 如果发生错误则回滚</span></span><br><span class="line">       db.rollback()</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">db.close()    </span><br></pre></td></tr></table></figure><h5 id="3-语法解释-3"><a href="#3-语法解释-3" class="headerlink" title="3.语法解释"></a>3.语法解释</h5><ul><li>连接数据库的核心模块为pymysql,可以通过<code>pip install PyMySQL</code>安装</li><li>当需要跳板机连接服务器对象时（可以说数据库服务器也可以是文件服务器），要用到sshtunnel模块，可以通过<code>pip install sshtunnel</code>安装</li><li>数据库由多张关系表构成，往往需要查询多个表才能得到自己需要的批量数据</li><li>通过cursor可以不断指定执行新的sql语句</li><li>sql语句可以善用where筛选语句，应选择查询对象是某个字段，而不是*（全表）</li></ul><h4 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h4><h5 id="1-运用场景-4"><a href="#1-运用场景-4" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>自动化操作往往会涉及到字符串的筛选和修改，这时候就要用到python的字符串操作和正则匹配</p><h5 id="2-实例-4"><a href="#2-实例-4" class="headerlink" title="2.实例"></a>2.实例</h5><p>（1）python字符串处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单筛选出含有指定子字符串的字符串</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;.pdf&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;.swf&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">print(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单字符串切片，利用find找到切点，再用字符串索引取出所需的字符串</span></span><br><span class="line">num = <span class="built_in">str</span>(i).find(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">title = <span class="built_in">str</span>(i)[:num]</span><br></pre></td></tr></table></figure><p>（2）正则表达式处理字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用正则匹配筛选字符串，并修改取代字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="comment"># 正则匹配</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;embed&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> pattern.search(content):</span><br><span class="line">      content = <span class="built_in">str</span>(content).replace(<span class="string">&#x27;.pdf&#x27;</span>, <span class="string">&#x27;.swf&#x27;</span>).replace(<span class="string">&#x27;pdf&#x27;</span>, <span class="string">&#x27;x-shockwave-flash&#x27;</span>).replace(<span class="string">&#x27;height=&quot;100%&quot;&#x27;</span>, <span class="string">&#x27;height=&quot;400&quot;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则匹配的两种方法</span></span><br><span class="line">prog = re.<span class="built_in">compile</span>(pattern)</span><br><span class="line">result = prog.match(string)</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">result = re.match(pattern, string)</span><br></pre></td></tr></table></figure><h5 id="3-语法解释-4"><a href="#3-语法解释-4" class="headerlink" title="3.语法解释"></a>3.语法解释</h5><ul><li>正则表达式往往是用大于看，看是很难看懂的，比较有用的正则工具：<a href="https://regex101.com/">https://regex101.com/</a></li><li>正则查找有match和search两种方式</li><li><code>re.match()</code> 从第一个字符开始找, 如果第一个字符就不匹配就返回None, 不继续匹配. 用于判断字符串开头或整个字符串是否匹配,速度快</li><li><code>re.search()</code> 会整个字符串查找,直到找到一个匹配</li><li><code>re.compile()</code>将正则表达式的样式编译为一个正则对象，如果需要多次使用这个正则表达式的话，使用 <code>re.compile()</code>和保存这个正则对象以便复用，可以让程序更加高效</li></ul><h4 id="Word文档操作"><a href="#Word文档操作" class="headerlink" title="Word文档操作"></a>Word文档操作</h4><h5 id="1-运用场景-5"><a href="#1-运用场景-5" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>在办公中可以批量生成只有日期和名字改动的模板，可以读取一篇word文档生成计算机可以处理的数据</p><h5 id="2-实例-5"><a href="#2-实例-5" class="headerlink" title="2.实例"></a>2.实例</h5><p>（1）引入基本模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 负责新建文档</span></span><br><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="comment"># 对齐</span></span><br><span class="line"><span class="keyword">from</span> docx.enum.text <span class="keyword">import</span> WD_ALIGN_PARAGRAPH</span><br><span class="line"><span class="comment"># 磅数</span></span><br><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> Pt</span><br><span class="line"><span class="comment"># 中文格式</span></span><br><span class="line"><span class="keyword">from</span> docx.oxml.ns <span class="keyword">import</span> qn</span><br></pre></td></tr></table></figure><p>（2）文档基础设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个文档</span></span><br><span class="line">document = Document()</span><br><span class="line"><span class="comment"># 设置文档基础字体,注意该处的styles有个s</span></span><br><span class="line">document.styles[<span class="string">&#x27;Normal&#x27;</span>].font.name = <span class="string">u&#x27;微软雅黑&#x27;</span></span><br><span class="line">document.styles[<span class="string">&#x27;Normal&#x27;</span>].font.size = Pt(<span class="number">14</span>)</span><br><span class="line"><span class="comment"># 设置文档基础中文字体</span></span><br><span class="line">document.styles[<span class="string">&#x27;Normal&#x27;</span>].element.rPr.rFonts.<span class="built_in">set</span>(qn(<span class="string">&#x27;w:eastAsia&#x27;</span>), <span class="string">u&#x27;微软雅黑&#x27;</span>)</span><br></pre></td></tr></table></figure><p>（3）创建纯文字模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_context</span>(<span class="params">context</span>):</span></span><br><span class="line"><span class="comment"># 创建自然段</span></span><br><span class="line">p = document.add_paragraph()</span><br><span class="line"><span class="comment"># 设置该自然段对齐方式</span></span><br><span class="line">p.alignment = WD_ALIGN_PARAGRAPH.LEFT</span><br><span class="line"><span class="comment"># 在该自然段添加文字</span></span><br><span class="line">r = p.add_run(<span class="built_in">str</span>(context))</span><br><span class="line"><span class="comment"># 设置字体格式</span></span><br><span class="line">r.font.size = Pt(<span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 段后距离5磅</span></span><br><span class="line">    p1.space_after = Pt(<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 段前距离5磅</span></span><br><span class="line">    p1.space_after = Pt(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>（4）创建表格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">height = <span class="built_in">len</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="comment"># 文档插入表格</span></span><br><span class="line">table = document.add_table(rows=height, cols=<span class="number">5</span>, style=<span class="string">&#x27;Table Grid&#x27;</span>)</span><br><span class="line"><span class="comment"># 填写字段</span></span><br><span class="line">table.cell(<span class="number">0</span>, <span class="number">0</span>).text = <span class="string">&#x27;序号&#x27;</span></span><br><span class="line">table.cell(<span class="number">0</span>, <span class="number">1</span>).text = <span class="string">&#x27;网址名称&#x27;</span></span><br><span class="line">table.cell(<span class="number">0</span>, <span class="number">2</span>).text = <span class="string">&#x27;网址&#x27;</span></span><br><span class="line">table.cell(<span class="number">0</span>, <span class="number">3</span>).text = <span class="string">&#x27;责任部门&#x27;</span></span><br><span class="line">table.cell(<span class="number">0</span>, <span class="number">4</span>).text = <span class="string">&#x27;负责人姓名&#x27;</span></span><br></pre></td></tr></table></figure><p>（5）存储文档</p><p>注意要标注后缀为docx，否则打不开文件，储存位置为程序根目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.save(<span class="string">&#x27;test.docx&#x27;</span>)</span><br></pre></td></tr></table></figure><p>（6）读取文档</p><p>可用于将记录题目的word文档转换为计算机可以处理的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="comment"># 打开一个文档</span></span><br><span class="line">document = Document(<span class="string">&quot;C语言.docx&quot;</span>)</span><br><span class="line"><span class="comment"># 获取所有段落</span></span><br><span class="line">all_paragraphs = document.paragraphs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建二维数组存储一道题</span></span><br><span class="line">passage = [[]]</span><br><span class="line">sent = []</span><br><span class="line"><span class="comment"># 逐个读取段落,一般不读取run中的，因为会出现文字割裂的问题</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(all_paragraphs)):</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^\d&#x27;</span>)</span><br><span class="line">    matching = pattern.findall(all_paragraphs[i].text)</span><br><span class="line">    <span class="keyword">if</span> matching:</span><br><span class="line">        <span class="comment"># 重置单个题目的列表</span></span><br><span class="line">        passage.append(sent)</span><br><span class="line">        sent = []</span><br><span class="line">        sent.append(all_paragraphs[i].text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sent.append(all_paragraphs[i].text)</span><br></pre></td></tr></table></figure><p>（7）修改文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取word文件</span></span><br><span class="line">document = Document(<span class="string">&quot;资料2.0.docx&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_text</span>(<span class="params">old_text, new_text</span>):</span></span><br><span class="line">    <span class="comment"># 修改纯文本</span></span><br><span class="line">    <span class="comment"># 复制粘贴word文档内容包括格式</span></span><br><span class="line">    all_paragraphs = document.paragraphs</span><br><span class="line">    <span class="keyword">for</span> paragraphs <span class="keyword">in</span> all_paragraphs:</span><br><span class="line">        <span class="keyword">for</span> run <span class="keyword">in</span> paragraphs.runs:</span><br><span class="line">            <span class="comment"># 修改文字</span></span><br><span class="line">            run_text = run.text.replace(old_text, new_text)</span><br><span class="line">            run.text = run_text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改表格</span></span><br><span class="line">    all_tables = document.tables</span><br><span class="line">    <span class="keyword">for</span> table <span class="keyword">in</span> all_tables:</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> table.rows:</span><br><span class="line">           <span class="keyword">for</span> cell <span class="keyword">in</span> row.cells:</span><br><span class="line">                cell_text = cell.text.replace(old_text, new_text)</span><br><span class="line">                cell.text = cell_text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换字符串</span></span><br><span class="line">change_text(<span class="string">&#x27;社团&#x27;</span>, <span class="string">&#x27;协会&#x27;</span>)</span><br><span class="line"><span class="comment"># 可以覆盖保存，但注意要将打开程序关闭</span></span><br><span class="line">document.save(<span class="string">&quot;资料2.0.docx&quot;</span>)</span><br></pre></td></tr></table></figure><p>8.word转pdf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用win32模板的功能</span></span><br><span class="line"><span class="keyword">from</span> win32com.client <span class="keyword">import</span> Dispatch, constants, gencache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定读取docx的路径，保存pdf路径</span></span><br><span class="line">docx_path = <span class="string">&#x27;资料2.0.docx&#x27;</span></span><br><span class="line">pdf_path = <span class="string">&#x27;资料.pdf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指向offic的功能并调用</span></span><br><span class="line">gencache.EnsureModule(<span class="string">&#x27;&#123;00020905-0000-0000-C000-000000000046&#125;&#x27;</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用word服务，开始转换</span></span><br><span class="line">wd = Dispatch(<span class="string">&quot;Word.Application&quot;</span>)</span><br><span class="line">doc = wd.Documents.Open(docx_path, ReadOnly=<span class="number">1</span>)</span><br><span class="line">doc.ExportAsFixedFormat(pdf_path, constants.wdExportFormatPDF, Item=constants.wdExportDocumentWithMarkup,CreateBookmarks=constants.wdExportCreateHeadingBookmarks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出并保存</span></span><br><span class="line">wd.Quit(constants.wdDoNotSaveChanges)</span><br></pre></td></tr></table></figure><h5 id="3-语法解释-5"><a href="#3-语法解释-5" class="headerlink" title="3.语法解释"></a>3.语法解释</h5><ul><li>安装docx模块，<code>pip install python-docx</code></li><li>读取文档时要注意，<code>document.paragraphs</code>返回的数组的每一个元素即一行的内容</li><li>一维数组的增加可以直接使用append不断扩展数组<code>sent.append(&#39;str&#39;)</code></li><li>二维数组的二维增加，可以直接填入数组<code>passage.append(array)</code>，一维增加的前提的二维存在，否则会报错超出范围<code>passage[1].append(&#39;str&#39;)</code></li></ul><h4 id="Excel文档操作"><a href="#Excel文档操作" class="headerlink" title="Excel文档操作"></a>Excel文档操作</h4><h5 id="1-运用场景-6"><a href="#1-运用场景-6" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>办公中经常会用到excel表格来整理统计数据，利用python可以批量读取和写入表格，提高工作效率</p><h5 id="2-实例-6"><a href="#2-实例-6" class="headerlink" title="2.实例"></a>2.实例</h5><p>（1）xlrd库读取execl内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd  <span class="comment"># 引入xlrd库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入工作簿路径</span></span><br><span class="line">xlsx = xlrd.open_workbook(<span class="string">&#x27;E://考勤表.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定读取的工作表，也可以用工作表名字来索引</span></span><br><span class="line"><span class="comment"># table = xlsx.sheet_by_name(&quot;表名&quot;)</span></span><br><span class="line">table = xlsx.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定单元格的坐标值，并打印，注意不要超过单元格所有的内容否则会报错,以下三种形式是一致的</span></span><br><span class="line">print(table.cell_value(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(table.cell(<span class="number">1</span>, <span class="number">2</span>).value)</span><br><span class="line">print(table.row(<span class="number">1</span>)[<span class="number">2</span>].value)</span><br></pre></td></tr></table></figure><p>（2）xlwt库写入execl工作表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入xlwt库</span></span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个工作簿</span></span><br><span class="line">new_workbook = xlwt.Workbook()</span><br><span class="line"><span class="comment"># 新建一个工作表</span></span><br><span class="line">worksheet = new_workbook.add_sheet(<span class="string">&#x27;sheet1&#x27;</span>)</span><br><span class="line"><span class="comment"># 在工作表指定坐标写入值</span></span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="comment"># 保存工作簿</span></span><br><span class="line">new_workbook.save(<span class="string">&#x27;test.xls&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="Pandas分析数据"><a href="#Pandas分析数据" class="headerlink" title="Pandas分析数据"></a>Pandas分析数据</h4><h5 id="1-运用场景-7"><a href="#1-运用场景-7" class="headerlink" title="1.运用场景"></a>1.运用场景</h5><p>Pandas是一个强大的分析结构化数据的工具集；用于数据挖掘和数据分析，同时也提供数据清洗功能。</p><h5 id="2-案例"><a href="#2-案例" class="headerlink" title="2.案例"></a>2.案例</h5><p>参考文档：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></p><p>读取excel数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用pandas打开excel</span></span><br><span class="line">file = pd.ExcelFile(<span class="string">&#x27;test.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># 指定表名，excel的数据以数组的形式返回</span></span><br><span class="line">data = file.parse(<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040841155.jpg&quot; alt=&quot;python&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://autovy.github.io/categories/python/"/>
    
    
      <category term="开发实战" scheme="https://autovy.github.io/tags/%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"/>
    
      <category term="python" scheme="https://autovy.github.io/tags/python/"/>
    
      <category term="脚本学习" scheme="https://autovy.github.io/tags/%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>C语言|数据结构入门指南</title>
    <link href="https://autovy.github.io/2021/03/10/C%20language/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://autovy.github.io/2021/03/10/C%20language/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</id>
    <published>2021-03-10T06:30:00.000Z</published>
    <updated>2021-09-04T02:18:06.755Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040908422.png" alt="image-20210205093243144"></p><span id="more"></span><h3 id="数据结构入门指南（C语言版）"><a href="#数据结构入门指南（C语言版）" class="headerlink" title="数据结构入门指南（C语言版）"></a>数据结构入门指南（C语言版）</h3><p>（图片来源于《计算机是怎么跑起来的》一书和GeeksforGeeks网站）</p><h4 id="初识数据结构"><a href="#初识数据结构" class="headerlink" title="初识数据结构"></a>初识数据结构</h4><h5 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h5><p>数组是数据结构的基础。</p><p>数组在程序中往往是从内存整体中分配出一块连续的空间，数组反映了内存的物理结构</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040908422.png" alt="image-20210205093243144"></p><h5 id="2-数组的应用"><a href="#2-数组的应用" class="headerlink" title="2.数组的应用"></a>2.数组的应用</h5><p>以数组为基础的数据结构，可供各种各样的算法处理大量数据</p><h5 id="3-数据结构概念"><a href="#3-数据结构概念" class="headerlink" title="3.数据结构概念"></a>3.数据结构概念</h5><p>内存的物理结构无法改变，而数据结构可以通过程序在逻辑上改变内存的物理结构，使数据按照自己的相反分布</p><p>典型的数据结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909890.png" alt="image-20210205094134834"></p><h4 id="栈的实现方法（stack）"><a href="#栈的实现方法（stack）" class="headerlink" title="栈的实现方法（stack）"></a>栈的实现方法（stack）</h4><h5 id="1-栈的特点"><a href="#1-栈的特点" class="headerlink" title="1.栈的特点"></a>1.栈的特点</h5><p>栈中数据的使用顺序和堆积顺序是相反的，堆积顺序是从下到上，而使用顺序是从上到上，就好像干草堆一样</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909864.png" alt="image-20210205095057769"></p><p>这种数据存取方式称为LIFO（last in first out，后进先出），即最后存入的数据最先被处理</p><h5 id="2-栈的实现"><a href="#2-栈的实现" class="headerlink" title="2.栈的实现"></a>2.栈的实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 构建数组作为栈的本体 </span></span><br><span class="line"><span class="keyword">char</span> Stack[<span class="number">100</span>];</span><br><span class="line"><span class="comment">// 栈顶指针，始终指向栈数据的最顶端 </span></span><br><span class="line"><span class="keyword">char</span> StackPointer = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈函数，存储数据 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">char</span> Data)</span></span>&#123;</span><br><span class="line"><span class="comment">// 数据存储在栈顶指针指向位置 </span></span><br><span class="line">Stack[StackPointer] = Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新栈顶指针的值 </span></span><br><span class="line">StackPointer++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈函数，读取数据 </span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Pop</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新栈顶指针的值 </span></span><br><span class="line">StackPointer--;</span><br><span class="line"><span class="comment">// 在栈顶指针处取出数据 </span></span><br><span class="line"><span class="keyword">return</span> Stack[StackPointer];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 运行实例 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//存储数据 </span></span><br><span class="line">Push(<span class="number">1</span>);</span><br><span class="line">Push(<span class="number">2</span>);</span><br><span class="line">Push(<span class="number">3</span>);</span><br><span class="line">Push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取数据 </span></span><br><span class="line"><span class="keyword">while</span> (StackPointer !=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> result = Pop();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-原理图"><a href="#3-原理图" class="headerlink" title="3.原理图"></a>3.原理图</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909584.png" alt="image-20210205104130629"></p><p>注意此图的栈底放在上面，最底部才是栈顶</p><h5 id="4-语法解释"><a href="#4-语法解释" class="headerlink" title="4.语法解释"></a>4.语法解释</h5><ul><li>最终实现效果是：存入顺序是1，2，3，4；取出顺序是4，3，2，1</li><li>栈的成分：数组，栈顶指针，入栈函数，出栈函数</li><li>入栈函数将数据压入栈中</li><li>出栈函数将数据从栈中弹出</li><li>存储5个数据，最后栈顶指针指向5的地址（地址4为最后一个数据），所以在出栈函数中，栈顶指针需要减1，才能取得第一个数据</li></ul><h4 id="队列的实现方法（queue）"><a href="#队列的实现方法（queue）" class="headerlink" title="队列的实现方法（queue）"></a>队列的实现方法（queue）</h4><h5 id="1-队列的特点"><a href="#1-队列的特点" class="headerlink" title="1.队列的特点"></a>1.队列的特点</h5><p>队列中最先存入的数据是被最先处理的，这种方式被称为FIFO（first in first out, 先进先出）。就像排队上车一样，先到的人就能先上车</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909768.png" alt="image-20210205154955234"></p><h5 id="2-队列的实现"><a href="#2-队列的实现" class="headerlink" title="2.队列的实现"></a>2.队列的实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建作为队列本质的数组 </span></span><br><span class="line"><span class="keyword">char</span>  Queue[<span class="number">100</span>];</span><br><span class="line"><span class="comment">// 标识数据存储位置的索引 </span></span><br><span class="line"><span class="keyword">char</span> SetIndex = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 标识数据读取位置的索引 </span></span><br><span class="line"><span class="keyword">char</span> GetIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 存储数据函数 </span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">char</span> Data)</span></span>&#123;</span><br><span class="line"> <span class="comment">// 存入数据</span></span><br><span class="line"> Queue [SetIndex] = Data;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 更新存储索引 </span></span><br><span class="line"> SetIndex++;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 到达数组末尾则折回开头 </span></span><br><span class="line"> <span class="keyword">if</span>(SetIndex&gt;=<span class="number">100</span>)&#123;</span><br><span class="line"> SetIndex = <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 读取数据函数 </span></span><br><span class="line"> <span class="function"><span class="keyword">char</span> <span class="title">Get</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">char</span> Data;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 读取数据 </span></span><br><span class="line"> Data = Queue[GetIndex];</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 更新读取索引 </span></span><br><span class="line"> GetIndex++;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//  到达数组末尾则折回开头 </span></span><br><span class="line"> <span class="keyword">if</span>(GetIndex&gt;=<span class="number">100</span>)&#123;</span><br><span class="line"> GetIndex = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回读出数据 </span></span><br><span class="line"><span class="keyword">return</span> Data;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 运行实例 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//存储数据 </span></span><br><span class="line">Set(<span class="number">1</span>);</span><br><span class="line">Set(<span class="number">2</span>);</span><br><span class="line">Set(<span class="number">3</span>);</span><br><span class="line">Set(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取数据 </span></span><br><span class="line"><span class="keyword">while</span> (GetIndex != SetIndex) &#123;</span><br><span class="line"><span class="keyword">char</span> result = Get();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-原理图-1"><a href="#3-原理图-1" class="headerlink" title="3.原理图"></a>3.原理图</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909593.png" alt="image-20210205161354653"></p><h5 id="4-语法解释-1"><a href="#4-语法解释-1" class="headerlink" title="4.语法解释"></a>4.语法解释</h5><ul><li>最终实现效果是：存入顺序是1，2，3，4；取出顺序是1，2，3，4</li><li>栈的成分：数组，数据存储指针，数据读取指针，存储函数，读取函数</li><li>队列的逻辑结构实际上是圆环，数据存满后又会回到开头开始存数据</li><li>数据读取指针和数据存储指针是一样的，走向一样，最终值（指存完数据和读完数据的最后值的值）也要相等</li></ul><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><h5 id="1-组成"><a href="#1-组成" class="headerlink" title="1.组成"></a>1.组成</h5><p>结构体即把若干个数据项汇集到一起并赋予其名字的一个整体</p><p>定义完结构体后，我们可以把结构体当作一个数据类型，可以用它来声明变量</p><p>每一个被汇集到结构体的每一个数据项叫做结构体的成员</p><h5 id="2-运用"><a href="#2-运用" class="headerlink" title="2.运用"></a>2.运用</h5><p>我们需要用到结构体数组来实现链表和二叉树</p><h5 id="3-内存分布"><a href="#3-内存分布" class="headerlink" title="3.内存分布"></a>3.内存分布</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909289.png" alt="image-20210205182952994"></p><h4 id="链表的实现方法（Linked-list）"><a href="#链表的实现方法（Linked-list）" class="headerlink" title="链表的实现方法（Linked list）"></a>链表的实现方法（Linked list）</h4><h5 id="1-链表的特点"><a href="#1-链表的特点" class="headerlink" title="1.链表的特点"></a>1.链表的特点</h5><p>链表容易实现数据的插入和删除，任意改变数据的排列方式。就像人手拉手排成一排，要改变顺序，只需要改变牵手对象即可实现</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909642.png" alt="image-20210205183938605"></p><h5 id="2-链表的实现"><a href="#2-链表的实现" class="headerlink" title="2.链表的实现"></a>2.链表的实现</h5><p>参考文章：<a href="https://www.geeksforgeeks.org/linked-list-set-1-introduction/等系列文章">https://www.geeksforgeeks.org/linked-list-set-1-introduction/等系列文章</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//链表操作函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(struct Node* n)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertAfter</span><span class="params">(struct Node* prev_node, <span class="keyword">int</span> new_data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(struct Node** head_ref, <span class="keyword">int</span> new_data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">append</span> <span class="params">(struct Node**head_ref, <span class="keyword">int</span> new_data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(struct Node**head, <span class="keyword">int</span> key)</span> </span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链表节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="comment">// 存储该节点内容 </span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  存储下一个节点的地址 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序简单创建一个三节点链表</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 声明节点 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">second</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">third</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为三个节点分配空间</span></span><br><span class="line">head = (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node)); </span><br><span class="line">second = (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node)); </span><br><span class="line">third = (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node)); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在节点内存入数据（内容+下个节点的地址）构成链表</span></span><br><span class="line">head -&gt; data = <span class="number">1</span>;</span><br><span class="line">head -&gt; next = second; </span><br><span class="line"></span><br><span class="line">second -&gt; data = <span class="number">2</span>;</span><br><span class="line">second -&gt; next = third;</span><br><span class="line"></span><br><span class="line">third -&gt; data = <span class="number">3</span>;</span><br><span class="line">third -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最末端插入6，则链表为 1-&gt;2-&gt; 3-&gt;6-&gt;NULL</span></span><br><span class="line">append(&amp;head,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在最前端插入7， 则链表为 7-&gt;1-&gt;2-&gt; 3-&gt;6-&gt;NULL</span></span><br><span class="line">push(&amp;head,<span class="number">7</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在指定位置（第三个节点的下个节点后面）插入8， 则链表为 7-&gt;1-&gt;8-&gt;2-&gt;3-&gt;6-&gt;NULL</span></span><br><span class="line">insertAfter(head-&gt;next,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除2</span></span><br><span class="line">deleteNode(&amp;head, <span class="number">2</span>); </span><br><span class="line"> </span><br><span class="line">printList(head); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从指定位置开始遍历链表函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(struct Node* n)</span></span>&#123;</span><br><span class="line"><span class="comment">// 链表的末尾一定指向NULL </span></span><br><span class="line"><span class="keyword">while</span>(n != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n-&gt;data);</span><br><span class="line">n = n-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 链表插入有三种形式：1. 在最前面插入 2.指定位置插入  3. 在最末尾插入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.在最前面插入</span></span><br><span class="line"><span class="comment">// 两个参数分别的含义是： 给定头的引用（指向指针的指针），插入的数据 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(struct Node** head_ref, <span class="keyword">int</span> new_data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// （1）为新节点分配空间 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">new_node</span> =</span> (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line"></span><br><span class="line"><span class="comment">// （2）放入数据</span></span><br><span class="line">new_node-&gt;data = new_data; </span><br><span class="line"></span><br><span class="line"><span class="comment">// （3） 新节点存储原头部的地址</span></span><br><span class="line">new_node-&gt;next = (*head_ref);</span><br><span class="line"></span><br><span class="line"><span class="comment">// (4) 移动头部指向新节点，新节点成为新头部</span></span><br><span class="line">(*head_ref) = new_node; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.在指定节点后面插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertAfter</span><span class="params">(struct Node* prev_node, <span class="keyword">int</span> new_data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// （1）检查给定节点是否为空</span></span><br><span class="line"><span class="keyword">if</span>(prev_node==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// (2)为新节点分配空间 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">new_node</span> =</span> (struct Node*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line"></span><br><span class="line"><span class="comment">// (3)放入数据</span></span><br><span class="line">new_node-&gt;data = new_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (4)新节点存储插入节点存储的下个节点的地址</span></span><br><span class="line">new_node-&gt;next = prev_node-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入节点存储新节点的地址</span></span><br><span class="line">prev_node-&gt;next = new_node; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 3.在最末尾插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">append</span> <span class="params">(struct Node**head_ref, <span class="keyword">int</span> new_data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(1) 为新节点分配空间 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">new_node</span> =</span> (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line"><span class="comment">// 第5步中使用 ,让第五步的找尾部从头部开始 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">last</span> =</span> *head_ref;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) 放入数据</span></span><br><span class="line">new_node-&gt;data = new_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (3)  新节点要放到最后，所以存储地址为NULL</span></span><br><span class="line">new_node-&gt;next = <span class="literal">NULL</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// (4) 如果链表为空，则新节点成为头部</span></span><br><span class="line"><span class="keyword">if</span>(*head_ref == <span class="literal">NULL</span>)&#123;</span><br><span class="line"></span><br><span class="line">*head_ref = new_node;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (5) 链表不为空，一直摸到链表末端</span></span><br><span class="line"><span class="keyword">while</span>(last-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">last = last-&gt;next;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// (6) 原末端节点存储的地址改为新节点</span></span><br><span class="line">last-&gt;next = new_node;</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除给定值所在节点 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(struct Node**head_ref, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 存储头部节点</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">temp</span> =</span> *head_ref, *prev;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 如果头部节点含有给定值，需要删除头部</span></span><br><span class="line"><span class="keyword">if</span>(temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;data == key)&#123;</span><br><span class="line"><span class="comment">// 改变头部</span></span><br><span class="line">*head_ref = temp-&gt;next; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放旧头部</span></span><br><span class="line"><span class="built_in">free</span>(temp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历节点，搜索给定值的位置  </span></span><br><span class="line"><span class="keyword">while</span>(temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;data !=key)&#123;</span><br><span class="line">prev = temp;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果给定值不存在</span></span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到位置后，开始删除操作</span></span><br><span class="line"><span class="comment">// 移动删除节点前一个节点的链接到删除节点的下一个节点</span></span><br><span class="line">prev-&gt;next = temp-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放需要删除的节点</span></span><br><span class="line"><span class="built_in">free</span>(temp); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-原理图-2"><a href="#3-原理图-2" class="headerlink" title="3.原理图"></a>3.原理图</h5><p>（1）链表结构图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909831.png" alt="image-20210208081719442"></p><p>（2）头部插入示意图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909591.png" alt="image-20210208081851924"></p><p>（3）指定位置插入示意图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909857.png" alt="image-20210208081923801"></p><p>（4）末端插入示意图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909257.png" alt="image-20210208082016685"></p><p>（5）删除示意图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909080.png" alt="image-20210208082128253"></p><h5 id="4-语法解释-2"><a href="#4-语法解释-2" class="headerlink" title="4.语法解释"></a>4.语法解释</h5><ul><li><p><code>struct Node* next</code>声明后，next存储地址，*next是地址中的值（自我引用结构体）</p></li><li><p>声明节点中，<code>struct Node* head = NULL</code>，则head内为地址</p></li><li><p>malloc()函数的声明方法为：<code>void *malloc(size_t size)</code>，其作用是分配所需的内存空间，返回值即为指向被分配内存的指针（地址）</p></li><li><p>则有head，second，third存储的是指向该节点的指针（地址），要使指向该节点的指针访问到节点的成员，那就用<code>-&gt;</code>运算符</p></li><li><p><code>struct Node** head_ref</code>相当于指向该结构体的指针的指针，即该指针存放的位置，相当于head（头部指针）取址即&amp;head；* head_ref则为该结构的指针（即head，但是*head_ref这种方式才能动态移动指针）</p></li></ul><h4 id="二叉树的实现方法（Binary-tree）"><a href="#二叉树的实现方法（Binary-tree）" class="headerlink" title="二叉树的实现方法（Binary tree）"></a>二叉树的实现方法（Binary tree）</h4><h5 id="1-二叉树的特点"><a href="#1-二叉树的特点" class="headerlink" title="1.二叉树的特点"></a>1.二叉树的特点</h5><p>  二叉树是基于链表的，用到的还是自我引用的结构体，但是会带有两个连接信息（即指向其他元素的指针）</p><p>  二叉树多用于实现用于搜索数据的算法（如：二分查找法）</p><p>  二叉树结构在搜索数据时，不是沿着一条线搜索，而是循着二叉树的分叉不断向下搜索</p><p>  <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909207.png" alt="image-20210208095901708"></p><h5 id="2-二叉树的实现"><a href="#2-二叉树的实现" class="headerlink" title="2.二叉树的实现"></a>2.二叉树的实现</h5>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">left</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">right</span>;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 声明操作二叉树的函数</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printPostorder</span><span class="params">(struct node* node)</span></span>; </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printInorder</span><span class="params">(struct node* node)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printPreorder</span><span class="params">(struct node* node)</span></span>;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建一个新节点函数</span></span><br><span class="line">  <span class="comment">// 返回值为该节点的地址 </span></span><br><span class="line">  <span class="function">struct node* <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 分配空间给新节点 </span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">node</span> =</span> (struct node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 分配数据给该节点</span></span><br><span class="line">  node-&gt;data = data;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 初始左右分叉的指向</span></span><br><span class="line">  node-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">  node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (node);   </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建二叉树的首节点（root）</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">root</span> =</span> newNode(<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 从首节点出发分叉出两页 </span></span><br><span class="line">  root-&gt;left = newNode(<span class="number">2</span>);</span><br><span class="line">  root-&gt;right = newNode(<span class="number">3</span>); </span><br><span class="line">  </span><br><span class="line">  root-&gt;left-&gt;left = newNode(<span class="number">4</span>);</span><br><span class="line">  root-&gt;left-&gt;right = newNode(<span class="number">5</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;后序顺序打印\n&quot;</span>);</span><br><span class="line">  printPostorder(root); </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>) ;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;中序顺序打印\n&quot;</span>);</span><br><span class="line">  printInorder(root); </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>) ;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;前序顺序打印\n&quot;</span>);</span><br><span class="line">  printPreorder(root); </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3种遍历方法 </span></span><br><span class="line">  <span class="comment">// 1.后序遍历 （左-&gt;右-&gt;根） </span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printPostorder</span><span class="params">(struct node* node)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(node==<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  printPostorder(node-&gt;left);</span><br><span class="line">  printPostorder(node-&gt;right); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 打印出该节点的数据 </span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, node-&gt;data); </span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2.中序遍历（左-&gt;根-&gt;右）</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printInorder</span><span class="params">(struct node* node)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(node==<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  printInorder(node-&gt;left);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, node-&gt;data);</span><br><span class="line">  printInorder(node-&gt;right);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//  3. 前序遍历 (根-&gt;左-&gt;右)</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">printPreorder</span><span class="params">(struct node* node)</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">if</span>(node == <span class="literal">NULL</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, node-&gt;data);</span><br><span class="line">  printPreorder(node-&gt;left);</span><br><span class="line">  printPreorder(node-&gt;right);</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h5 id="3-二叉树原理图"><a href="#3-二叉树原理图" class="headerlink" title="3.二叉树原理图"></a>3.二叉树原理图</h5><p>  （1）遍历方法示意图</p><p>  <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909994.png" alt="image-20210208150838184"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040908422.png&quot; alt=&quot;image-20210205093243144&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="C语言" scheme="https://autovy.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="https://autovy.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="算法" scheme="https://autovy.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://autovy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>汇编|汇编语言学习</title>
    <link href="https://autovy.github.io/2021/03/06/Hardware/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    <id>https://autovy.github.io/2021/03/06/Hardware/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-03-06T06:30:00.000Z</published>
    <updated>2021-09-04T10:16:59.388Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041134246.jpeg" alt="img"></p><span id="more"></span><h2 id="汇编基础知识"><a href="#汇编基础知识" class="headerlink" title="汇编基础知识"></a>汇编基础知识</h2><h3 id="1-CPU对存储器的读写"><a href="#1-CPU对存储器的读写" class="headerlink" title="1.CPU对存储器的读写"></a>1.CPU对存储器的读写</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041130473.png" alt="image-20210307172937120"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041237607.png" alt="image-20210307173115319"></p><h3 id="2-地址总线"><a href="#2-地址总线" class="headerlink" title="2.地址总线"></a>2.地址总线</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041130721.png" alt="image-20210307173818234"></p><h3 id="3-数据总线"><a href="#3-数据总线" class="headerlink" title="3.数据总线"></a>3.数据总线</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131528.png" alt="image-20210307174352688"></p><h3 id="4-PC中各类存储器的逻辑连接"><a href="#4-PC中各类存储器的逻辑连接" class="headerlink" title="4.PC中各类存储器的逻辑连接"></a>4.PC中各类存储器的逻辑连接</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131369.png" alt="image-20210307175417668"></p><h2 id="CPU工作原理"><a href="#CPU工作原理" class="headerlink" title="CPU工作原理"></a>CPU工作原理</h2><h3 id="1-寄存器概述"><a href="#1-寄存器概述" class="headerlink" title="1.寄存器概述"></a>1.寄存器概述</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131138.png" alt="image-20210307190658768"></p><h3 id="2-通用寄存器"><a href="#2-通用寄存器" class="headerlink" title="2.通用寄存器"></a>2.通用寄存器</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131824.png" alt="image-20210307190849268"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131863.png" alt="image-20210307190909058"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131208.png" alt="image-20210307191017012"></p><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210307191351945.png" alt="image-20210307191351945"> </p><h3 id="3-基础汇编指令"><a href="#3-基础汇编指令" class="headerlink" title="3.基础汇编指令"></a>3.基础汇编指令</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131386.png" alt="image-20210307191802493"></p><ul><li>但寄存器超过了4位数（十六进制），只会保留4位的内容</li><li>ax寄存器也可以拆成al，ah两块存储</li></ul><h3 id="4-CPU内部逻辑结构"><a href="#4-CPU内部逻辑结构" class="headerlink" title="4.CPU内部逻辑结构"></a>4.CPU内部逻辑结构</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131210.png" alt="image-20210307193135190"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131248.png" alt="image-20210307193654830"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131898.png" alt="image-20210307193826865"></p><p><strong>地址加法器工作原理：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131672.png" alt="image-20210307194023535"></p><h3 id="5-16位结构的CPU"><a href="#5-16位结构的CPU" class="headerlink" title="5.16位结构的CPU"></a>5.16位结构的CPU</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131032.png" alt="image-20210307193239847"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131408.png" alt="image-20210307195014762"></p><h3 id="6-段寄存器"><a href="#6-段寄存器" class="headerlink" title="6.段寄存器"></a>6.段寄存器</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131639.png" alt="image-20210307195535155"></p><p><strong>CPU工作流程：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131793.png" alt="image-20210307195700302"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131479.png" alt="image-20210307195911736"></p><p><strong>修改CS，IP指令：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131296.png" alt="image-20210307200416031"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131432.png" alt="image-20210307200445852"></p><h3 id="7-代码段"><a href="#7-代码段" class="headerlink" title="7.代码段"></a>7.代码段</h3><p><img src="/2021/03/06/Hardware/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Clinghao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210307200924999.png" alt="image-20210307200924999"></p><h2 id="内存访问"><a href="#内存访问" class="headerlink" title="内存访问"></a>内存访问</h2><h3 id="1-内存中字的存储"><a href="#1-内存中字的存储" class="headerlink" title="1.内存中字的存储"></a>1.内存中字的存储</h3><p>CPU中，用16位寄存器来存储一个字。高8位存放高位字节，低8位存放低位字节</p><p>字单元：存放一个字型数据（16位）的内存单元，由两个地址连续的内存单元组成</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131569.png" alt="image-20210308205927102"></p><p>0号是低地址单元，1号是高地址单元</p><p>（1）0地址单元中存放的字节型数据是多少？    20H</p><p>（2）0地址字单元中存放的字型数据是多少？    4E20H</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131272.png" alt="image-20210308210201087"></p><h3 id="2-DS寄存器与地址"><a href="#2-DS寄存器与地址" class="headerlink" title="2.DS寄存器与地址"></a>2.DS寄存器与地址</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131656.png" alt="image-20210308211025318"></p><p>读取内存单元数据到寄存器中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 以下三条指令将1000H（1000:0）地址中的数据读到al</span><br><span class="line"># 先将目标地址放入通用寄存器 </span><br><span class="line">mov bx, 1000H</span><br><span class="line"># 经过通用寄存器将地址信息传送给ds（8086CPU不支持将数据直接送入段寄存器）</span><br><span class="line">mov ds, bx</span><br><span class="line"># 后面的代码可以自动索引到目标段地址是1000H（ds相当于栈的指针）</span><br><span class="line"># [0]指偏移地址是0，直接读取到1000H的数据（传送8位数据）</span><br><span class="line">mov al,[0]  </span><br><span class="line"></span><br><span class="line"># 下面这样则是将数据从寄存器送入内存单元（传送16位数据）</span><br><span class="line">mov [0],cx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131464.png" alt="image-20210308212241728"></p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="1-mov"><a href="#1-mov" class="headerlink" title="1.mov"></a>1.mov</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131008.png" alt="image-20210309215735409"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 将数据b放入ax寄存器中</span><br><span class="line">mov ax, b</span><br><span class="line"># ax寄存器中的内容放入bx寄存器中</span><br><span class="line">mov bx, ax</span><br><span class="line"># 内存单元里的内容存入ax寄存器中（内存单元的地址是根据ds + 偏移地址得到）</span><br><span class="line">mov ax, [0]</span><br><span class="line"># ax的内容存入内存单元中</span><br><span class="line">mov [0], ax</span><br><span class="line"># ax中存入的地址传入ds中</span><br><span class="line">mov ds ax</span><br></pre></td></tr></table></figure><h3 id="2-add与sub"><a href="#2-add与sub" class="headerlink" title="2.add与sub"></a>2.add与sub</h3><p>add，sub指令同mov一样，都有两个操作对象</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131551.png" alt="image-20210310192221575"></p><p>注意add和sub的对象不能有段寄存器</p><h2 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h2><h3 id="1-数据段概念"><a href="#1-数据段概念" class="headerlink" title="1.数据段概念"></a>1.数据段概念</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131137.png" alt="image-20210310192835140"></p><h3 id="2-读取数据段"><a href="#2-读取数据段" class="headerlink" title="2.读取数据段"></a>2.读取数据段</h3><p>（1）读取数据段中前三个单元中的字节数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov ax, 123BH</span><br><span class="line"># 将123BH送入ds，作为数据段的段地址</span><br><span class="line">mov ds, ax</span><br><span class="line"># al存放累加的结果</span><br><span class="line">mov al, 0</span><br><span class="line"># 利用偏移地址读取数据段的单元</span><br><span class="line">add al, [0]</span><br><span class="line">add al, [1]</span><br><span class="line">add al, [2]</span><br></pre></td></tr></table></figure><p>（2）累加数据段中前三个单元中的字型数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov ax, 123BH</span><br><span class="line"># 将123BH送入ds，作为数据段的段地址</span><br><span class="line">mov ds, ax</span><br><span class="line"># ax存放累加的结果</span><br><span class="line">mov ax, 0</span><br><span class="line"># 利用偏移地址读取数据段的单元</span><br><span class="line">add ax, [0] </span><br><span class="line">add ax, [2]</span><br><span class="line">add ax, [4]</span><br></pre></td></tr></table></figure><p>注意：一个字型数据占两个单元，所以偏移地址是0，2，4</p><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><p><img src="/2021/03/06/Hardware/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Clinghao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210310200637543.png" alt="image-20210310200637543"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131648.png" alt="image-20210310200840950"></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="1-CPU提供的栈机制"><a href="#1-CPU提供的栈机制" class="headerlink" title="1.CPU提供的栈机制"></a>1.CPU提供的栈机制</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131193.png" alt="image-20210310201357424"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131423.png" alt="image-20210310201518098"></p><h3 id="2-push指令执行过程"><a href="#2-push指令执行过程" class="headerlink" title="2.push指令执行过程"></a>2.push指令执行过程</h3><p>先移动指针再放入数据</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131921.png" alt="image-20210310202248384"></p><p>任何时刻ss:sp指向栈顶元素，如果栈的最低部字单元地址位1000:000E，当栈为空时，SP=0100H</p><h3 id="3-pop指令执行过程"><a href="#3-pop指令执行过程" class="headerlink" title="3.pop指令执行过程"></a>3.pop指令执行过程</h3><p>先弹出数据再移动指针 </p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131463.png" alt="image-20210310203836597"></p><h3 id="4-栈顶超界问题"><a href="#4-栈顶超界问题" class="headerlink" title="4.栈顶超界问题"></a>4.栈顶超界问题</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041131473.png" alt="image-20210310205502760"></p><h3 id="5-push和pop指令"><a href="#5-push和pop指令" class="headerlink" title="5.push和pop指令"></a>5.push和pop指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 通用寄存器</span><br><span class="line"># 将寄存器中的数据入栈</span><br><span class="line">push ax</span><br><span class="line"># 用一个寄存器接受出栈的数据</span><br><span class="line">pop bx</span><br><span class="line"></span><br><span class="line"># 段寄存器</span><br><span class="line"># 将一个段寄存器中的数据入栈</span><br><span class="line">push ds</span><br><span class="line"># 用一个段寄存器接受出栈数据</span><br><span class="line">pop es</span><br><span class="line"></span><br><span class="line"># 内存单元（栈操作都是以字为单位，cpu会从ds中取出段地址加上指令中的偏移地址</span><br><span class="line"># 将一个内存单元的字入栈</span><br><span class="line">push [0]</span><br><span class="line"># 用一个内存字单元接收栈的数据</span><br><span class="line">pop [2]</span><br></pre></td></tr></table></figure><h3 id="6-栈的实例"><a href="#6-栈的实例" class="headerlink" title="6.栈的实例"></a>6.栈的实例</h3><p>将10000H~1000FH这段空间当作栈，初始状态为空，将AX，BX，DS的数据入栈</p><p>栈中的空间地址为ss:sp（即ss段地址*10加上sp偏移地址）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 设置栈</span><br><span class="line"># 我们要用ss来定义一个栈，因为ss是段寄存器，所以要使用ax进行中转</span><br><span class="line"># 分析储存空间的地址，sp指向第一个字单元时为000EH，则栈的初始段地址为1000H</span><br><span class="line">mov ax, 1000H</span><br><span class="line">mov ss, ax</span><br><span class="line"># 设置栈顶指针，因为栈为空，所以初始化位置要向下移动一位，sp + 2（向下移动加，向上移动减）</span><br><span class="line">mov sp, 0010H</span><br><span class="line"># 填入数据，sp自动减2</span><br><span class="line">push ax</span><br><span class="line">push bx</span><br><span class="line">push ds</span><br></pre></td></tr></table></figure><p>   <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132991.png" alt="image-20210310221157701"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132336.png" alt="image-20210310221459106"></p><h2 id="栈段"><a href="#栈段" class="headerlink" title="栈段"></a>栈段</h2><p>数据段：ds ，代码段：cs， 栈段：ss（这些仅仅是我们编程时的一种安排）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132272.png" alt="image-20210311092016168"></p><h2 id="汇编程序"><a href="#汇编程序" class="headerlink" title="汇编程序"></a>汇编程序</h2><h3 id="1-指令"><a href="#1-指令" class="headerlink" title="1.指令"></a>1.指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">assume cs:abc</span><br><span class="line"></span><br><span class="line">abc segment</span><br><span class="line">mov ax, 2</span><br><span class="line">add ax, ax</span><br><span class="line">add ax, ax</span><br><span class="line"></span><br><span class="line">mov ax, 4c00H</span><br><span class="line">int 21H</span><br><span class="line"></span><br><span class="line">abc ends</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><p>汇编指令：有对应的机器码的指令，可以被编译成机器指令，最终为CPU所执行</p></li><li><p>伪指令：没有对应的机器码的指令，最终不被CPU所执行，伪指令是由编译器来执行的指令 </p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132241.png" alt="image-20210314085001805"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132432.png" alt="image-20210314085047189"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132063.png" alt="image-20210314085131609"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132321.png" alt="image-20210314085229218"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132720.png" alt="image-20210314085411000"></p></li></ul><h3 id="2-程序"><a href="#2-程序" class="headerlink" title="2.程序"></a>2.程序</h3><p>程序：源代码中最终由计算机执行，处理的指令或数据</p><p>程序经编译连接后变成机器码</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132992.png" alt="image-20210314085547911"></p><h3 id="3-标号"><a href="#3-标号" class="headerlink" title="3.标号"></a>3.标号</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132602.png" alt="image-20210314085832394"></p><h3 id="4-程序返回"><a href="#4-程序返回" class="headerlink" title="4.程序返回"></a>4.程序返回</h3><p>（1）原理</p><p>DOS是一个单任务操作系统</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132824.png" alt="image-20210314090132826"></p><p>（2）实现</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132975.png" alt="image-20210314090243007"></p><p>（3）总结</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132665.png" alt="image-20210314090331563"></p><h3 id="5-汇编程序流程图"><a href="#5-汇编程序流程图" class="headerlink" title="5.汇编程序流程图"></a>5.汇编程序流程图</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132892.png" alt="image-20210314094246362"></p><h3 id="6-程序执行过程的跟踪"><a href="#6-程序执行过程的跟踪" class="headerlink" title="6.程序执行过程的跟踪"></a>6.程序执行过程的跟踪</h3><p>（1）exe文件程序加载过程</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132122.png" alt="image-20210314100412638"></p><p>（2）跟踪方法</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132657.png" alt="image-20210314101510698"></p><p>（3）总结</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132997.png" alt="image-20210314101055085"></p><h2 id="BX-和loop指令"><a href="#BX-和loop指令" class="headerlink" title="[BX]和loop指令"></a>[BX]和loop指令</h2><h3 id="1-bx"><a href="#1-bx" class="headerlink" title="1.[bx]"></a>1.[bx]</h3><p>（1）编译器环境下的偏移地址</p><p>在debug模式下可以用[0]表示偏移地址，编译器是无法读取[0]的，而是把它当作数值，所以我们需要用[bx]来表示偏移地址</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132648.png" alt="image-20210314170113276"></p><p>  在编译器中无法识别<code>mov ax, [0]</code>，但是可以加上段地址从而获得准确地址<code>mov ax, ds:[0]</code></p><p>（2）指令案例</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132137.png" alt="image-20210314170739068"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132490.png" alt="image-20210314170845019"></p><p>（3）案例分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">; 建立段寄存器寻址，保证编译器可以找到存放代码的段：codesg</span><br><span class="line">assume cs:codesg</span><br><span class="line">; 定义codesg段,里面存放代码</span><br><span class="line">codesg segment</span><br><span class="line"></span><br><span class="line">; 定义程序</span><br><span class="line">demo: </span><br><span class="line">; 为ds赋值为2000H</span><br><span class="line">mov ax, 2000H</span><br><span class="line">mov ds, ax</span><br><span class="line">mov bx, 1000H</span><br><span class="line">; 将地址2000:1000处的值赋给ax</span><br><span class="line">mov ax, [bx]</span><br><span class="line">; bx自增1</span><br><span class="line">inc bx</span><br><span class="line">inc bx</span><br><span class="line">; 将ax的值存到2000:1002</span><br><span class="line">mov [bx], ax</span><br><span class="line">inc bx</span><br><span class="line">inc bx</span><br><span class="line">mov [bx], ax</span><br><span class="line">inc bx</span><br><span class="line">; 将ax中的低字节al存入内存单元</span><br><span class="line">mov [bx], al</span><br><span class="line">inc bx</span><br><span class="line">mov [bx], al</span><br><span class="line"></span><br><span class="line">; 程序返回</span><br><span class="line">mov ax, 4C00H</span><br><span class="line">int 21H</span><br><span class="line"></span><br><span class="line">; 结束段</span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">; 结束程序</span><br><span class="line">end demo; </span><br></pre></td></tr></table></figure><h3 id="2-loop指令"><a href="#2-loop指令" class="headerlink" title="2.loop指令"></a>2.loop指令</h3><p>  （1）基础知识</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132608.png" alt="image-20210314190421088"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132987.png" alt="image-20210314211437586"></p><p>（2）实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">mov ax, 2</span><br><span class="line">mov cx, 11</span><br><span class="line"></span><br><span class="line">s: add ax, ax</span><br><span class="line">; 跳到地址s处</span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">mov ax，4C00H</span><br><span class="line">int 21H</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><p>标号</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132783.png" alt="image-20210314191625503"></p></li><li><p>loop s</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132340.png" alt="image-20210314191714300"></p></li></ul><p>（3）循环调试方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">; 汇编语言的源程序中数值不能以字母开头，所以要在前面加个0</span><br><span class="line">mov ax, 0ffffH</span><br><span class="line">mov ds, ax</span><br><span class="line">mov bx, 6</span><br><span class="line">mov ax, [bx]</span><br><span class="line"></span><br><span class="line">mov dx, 0</span><br><span class="line"></span><br><span class="line">mov cx, 3</span><br><span class="line"></span><br><span class="line">s:add dx, ax</span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">mov ax, 4c00H</span><br><span class="line">int 21H</span><br><span class="line">code ends</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;相关命令</span><br><span class="line">-r ;查看寄存器中所存内容</span><br><span class="line">-u 076c:0 ;读取指定地址块的代码（翻译成汇编指令）</span><br><span class="line">-d 076c:0 ;读取指定地址块的16进制数</span><br><span class="line">-t ;执行一条指令，地址为CS:0000</span><br><span class="line">-g 0014 ;执行到某条指令（地址为cs:0014），可以执行到循环结束后的指令</span><br><span class="line">-p ;直接执行完循环</span><br></pre></td></tr></table></figure><h3 id="3-loop和-bx-的联合应用"><a href="#3-loop和-bx-的联合应用" class="headerlink" title="3.loop和[bx]的联合应用"></a>3.loop和[bx]的联合应用</h3><p><strong>要求：</strong></p><p>计算ffff:0 ~ ffff:b 单元中的数据的和，结果存储在dx中</p><p><strong>分析：</strong></p><p>（1）存储大小分析</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132531.png" alt="image-20210317192256653"></p><p>（2）存储位置分析</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132055.png" alt="image-20210317192341116"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132289.png" alt="image-20210317192452107"></p><p>（3）做法总结</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041132474.png" alt="image-20210317192606076"></p><img src="/2021/03/06/Hardware/%E7%A1%AC%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/Users\linghao\AppData\Roaming\Typora\typora-user-images\image-20210317192816740.png" alt="image-20210317192816740" style="zoom:200%;"><p>（4）程序案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">; 设置段地址</span><br><span class="line">mov ax, 0ffffh</span><br><span class="line">mov ds, ax</span><br><span class="line">mov bx, 0</span><br><span class="line"></span><br><span class="line">; 设置最终存放寄存器dx</span><br><span class="line">mov dx, 0</span><br><span class="line">; 循环次数的寄存器cx</span><br><span class="line">mov cx, 12</span><br><span class="line"></span><br><span class="line">; 循环过程中的al（8位寄存器）充当搬运工</span><br><span class="line">s:mov al [bx]</span><br><span class="line">mov ah, 0</span><br><span class="line">add dx, ax</span><br><span class="line">inc bx</span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="多段程序"><a href="#多段程序" class="headerlink" title="多段程序"></a>多段程序</h2><h3 id="1-在代码段中使用数据"><a href="#1-在代码段中使用数据" class="headerlink" title="1.在代码段中使用数据"></a>1.在代码段中使用数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">; dw定义一段连续的数据</span><br><span class="line">dw 0123H, 0456H, 0789H, 0defh, 0fedh, 0cbah, 0987h</span><br><span class="line">; cpu会从start标记出开始存储代码并执行</span><br><span class="line">start:</span><br><span class="line">mov bx, 0</span><br><span class="line">mov ax, 0</span><br><span class="line">mov cx, 8</span><br><span class="line"> s: add ax, cs:[bx]</span><br><span class="line">add bx,2</span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">endstart</span><br></pre></td></tr></table></figure><p> dw定义一段连续的数据</p><p>但是cpu会从start标记出开始存储代码并执行</p><h3 id="2-在代码段中使用栈"><a href="#2-在代码段中使用栈" class="headerlink" title="2.在代码段中使用栈"></a>2.在代码段中使用栈</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">; 利用栈将程序中定义的数据逆序存放</span><br><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">; dw定义一个字单元，在cs:0~cs:15中存放</span><br><span class="line">dw 0123h, 0456H, 0789h,0abch, 0defh, 0fedh, 0cbah, 0987h</span><br><span class="line">; dw定义8个字型数据，把这段空间当作栈来使用</span><br><span class="line">dw 0,0,0,0,0,0,0,0</span><br><span class="line"></span><br><span class="line">start: mov ax, cs</span><br><span class="line">mov ss, ax</span><br><span class="line">; 栈顶ss:sp 指向 cs:32</span><br><span class="line">mov sp, 32</span><br><span class="line">; 初始化偏移地址，设置循环次数</span><br><span class="line">mov bx, 0</span><br><span class="line">mov cx, 8</span><br><span class="line"></span><br><span class="line">; 循环将数据入栈 </span><br><span class="line">s:push cs:[bx]</span><br><span class="line">add bx, 2</span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">mov bx, 0</span><br><span class="line">mov cx, 8</span><br><span class="line"></span><br><span class="line">; 循环将数据出栈，顺序变换</span><br><span class="line">s0:pop cs:[bx]</span><br><span class="line">add bx, 2</span><br><span class="line">loop s0</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="3-将数据，代码，栈放入不同的段"><a href="#3-将数据，代码，栈放入不同的段" class="headerlink" title="3.将数据，代码，栈放入不同的段"></a>3.将数据，代码，栈放入不同的段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">; 分段存储代码，数据，栈</span><br><span class="line">assume cs:code, ds:data, ss:stack</span><br><span class="line"></span><br><span class="line">; 数据段存储</span><br><span class="line">data segment</span><br><span class="line">; dw定义一个字单元，在cs:0~cs:15中存放</span><br><span class="line">dw 0123h, 0456H, 0789h,0abch, 0defh, 0fedh, 0cbah, 0987h</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">; 栈段存储</span><br><span class="line">stack segment</span><br><span class="line">dw 0,0,0,0,0,0,0,0</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; 代码段储存</span><br><span class="line">code segment</span><br><span class="line">; 标记start，cpu就会将code段内容当作指令执行</span><br><span class="line">start: mov ax, stack</span><br><span class="line">; 设置ss指向stack，并设置栈顶ss:sp 指向 stack:16</span><br><span class="line">mov ss, ax</span><br><span class="line">mov sp, 16</span><br><span class="line"></span><br><span class="line">; ds指向data段</span><br><span class="line">mov ax, data</span><br><span class="line">mov ds, ax</span><br><span class="line">; ds：bx 指向data段第一个单元</span><br><span class="line">mov bx, 0</span><br><span class="line">mov cx, 8</span><br><span class="line"></span><br><span class="line">; 循环将数据入栈 </span><br><span class="line">s:push cs:[bx]</span><br><span class="line">add bx, 2</span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">mov bx, 0</span><br><span class="line">mov cx, 8</span><br><span class="line"></span><br><span class="line">; 循环将数据出栈，顺序变换</span><br><span class="line">s0:pop cs:[bx]</span><br><span class="line">add bx, 2</span><br><span class="line">loop s0</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="4-编写，调试多段程序"><a href="#4-编写，调试多段程序" class="headerlink" title="4.编写，调试多段程序"></a>4.编写，调试多段程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">; 分段存储代码，数据，栈</span><br><span class="line">assume cs:code, ds:data, ss:stack</span><br><span class="line"></span><br><span class="line">; 数据段存储</span><br><span class="line">data segment</span><br><span class="line">; dw定义一个字单元，在cs:0~cs:15中存放</span><br><span class="line">dw 0123h, 0456H, 0789h,0abch, 0defh, 0fedh, 0cbah, 0987h</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">; 栈段存储</span><br><span class="line">stack segment</span><br><span class="line">dw 0,0,0,0,0,0,0,0</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">; 将stack链接到ss，确定了栈段的存储空间</span><br><span class="line">start:mov ax, stack</span><br><span class="line">mov ss, ax</span><br><span class="line">; 找到空间后，因为要存16个字节，所以移动栈指针到栈底</span><br><span class="line">mov sp, 16</span><br><span class="line"></span><br><span class="line">; 将data链接到ds，确定了代码段的存储空间</span><br><span class="line">mov ax, data</span><br><span class="line">mov ds, ax</span><br><span class="line"></span><br><span class="line">; 栈操作，将数据段的数据压入栈</span><br><span class="line">push ds:[0]</span><br><span class="line">push ds:[2]</span><br><span class="line"></span><br><span class="line">; 弹出栈</span><br><span class="line">pop ds:[2]</span><br><span class="line">pop ds:[0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><ul><li>无论段中要存放多少数据，程序分配的段的空间都是16的倍数（比如我们要在ds中存储2个字，其实际占有空间仍然为16）</li><li>程序是从上到下为段编排地址，ss，ds，cs只是人为安排的段地址，程序一视同仁地处理</li><li>start可以确定代码段中的指令可以被执行</li></ul><h2 id="更灵活的定位内存地址"><a href="#更灵活的定位内存地址" class="headerlink" title="更灵活的定位内存地址"></a>更灵活的定位内存地址</h2><h3 id="1-and和or指令"><a href="#1-and和or指令" class="headerlink" title="1.and和or指令"></a>1.and和or指令</h3><p>（1）and（与运算，类乘法）应用</p><p>​    使操作对象的相应位设为0</p><p>（2）or（或运算，类加法）应用</p><p>​    使操作对象的相应位设为0</p><h3 id="2-字符数据"><a href="#2-字符数据" class="headerlink" title="2.字符数据"></a>2.字符数据</h3><p>汇编程序中的字符会被编译器转换为相对应的ASCII码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code, ds:data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">; dw定义字型数据（可存16位），db定义字节型数据（可存8位，每个字符对应的ASCII码就是8位的）</span><br><span class="line">db &#39;unIt&#39;</span><br><span class="line">db &#39;foRK&#39;</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start: mov al, &#39;a&#39;</span><br><span class="line">mov bx, &#39;b&#39;</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>相关规律：</p><ul><li>大小写字母的转换：小写字母减20H可以转换为其对应的大写字母</li><li>小写字母的的ASCII大于61H，我们可以通过61H来判断大小写字母</li><li>一个字母，将第5位置置0，它将变为大写字母（and运算）；将第5位置置1，它将变为小写字母（or运算）</li></ul><h3 id="3-大小写转换"><a href="#3-大小写转换" class="headerlink" title="3.大小写转换"></a>3.大小写转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">; 大小写字母转换</span><br><span class="line">assume cs:code, ds:data</span><br><span class="line"></span><br><span class="line">; 存储字符串</span><br><span class="line">data segment</span><br><span class="line"></span><br><span class="line">db &#39;AutoVY&#39;</span><br><span class="line">db &#39;HelloWorld&#39;</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start: mov ax, data</span><br><span class="line">mov ds, ax</span><br><span class="line"></span><br><span class="line">; 将&#39;AutoVY&#39;全部转为大写</span><br><span class="line">; ds:bx, 指向&quot;AutoVY&quot;第一个字母</span><br><span class="line">mov bx, 0</span><br><span class="line">; 因为AutoVY有6个字母，所以要循环6次</span><br><span class="line">mov cx, 6</span><br><span class="line"></span><br><span class="line">; 逐个读取字符</span><br><span class="line">s0: mov al, [bx]</span><br><span class="line">; 将字符与11011111b做与运算，将第5位置0，转换为大写字母</span><br><span class="line">and al, 11011111b</span><br><span class="line">; 将转换后的ASCII码写回原单元</span><br><span class="line">mov [bx], al</span><br><span class="line"></span><br><span class="line">; bx自增1，指向下个字母</span><br><span class="line">inc bx</span><br><span class="line">loop s0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; 将&#39;HelloWorld&#39;全部转为小写</span><br><span class="line">; ds:bx, 指向&quot;HelloWorld&quot;第一个字母</span><br><span class="line">mov bx, 6</span><br><span class="line">; 因为HelloWorld有10个字母，所以要循环10次</span><br><span class="line">mov cx, 10</span><br><span class="line"></span><br><span class="line">; 逐个读取字符</span><br><span class="line">s1: mov al, [bx]</span><br><span class="line">; 将字符与00100000b做或运算，将第5位置1，转换为小写字母</span><br><span class="line">or al, 11011111b</span><br><span class="line">; 将转换后的ASCII码写回原单元</span><br><span class="line">mov [bx], al</span><br><span class="line"></span><br><span class="line">; bx自增1，指向下个字母</span><br><span class="line">inc bx</span><br><span class="line">loop s1</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="4-bx-idata"><a href="#4-bx-idata" class="headerlink" title="4.[bx+idata]"></a>4.[bx+idata]</h3><p>不改变bx，更加方便获得后续地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">; 大小写字母转换</span><br><span class="line">assume cs:code, ds:data</span><br><span class="line"></span><br><span class="line">; 存储字符串</span><br><span class="line">data segment</span><br><span class="line"></span><br><span class="line">db &#39;AutoVY&#39;</span><br><span class="line">db &#39;HelloWorld&#39;</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">; 改进程序，以数组的方式处理数据</span><br><span class="line">start: mov ax, data</span><br><span class="line">mov ds, ax</span><br><span class="line">mov bx, 0</span><br><span class="line"></span><br><span class="line">mov cx, 5</span><br><span class="line">; 定位第一个字符串字符</span><br><span class="line">s:  mov al, [bx]</span><br><span class="line">and al, 11011111b</span><br><span class="line">mov [bx], al</span><br><span class="line"></span><br><span class="line">; 定位第二个字符串的字符</span><br><span class="line">mov al, [6+bx]</span><br><span class="line">or al, 00100000b</span><br><span class="line">mov [6+bx], al</span><br><span class="line"></span><br><span class="line">inc bx</span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="5-SI和DI"><a href="#5-SI和DI" class="headerlink" title="5.SI和DI"></a>5.SI和DI</h3><p>SI和DI与bx的功能相似，起到了补充bx的作用，常常用于复制数据的场景</p><p>我们用ds:si指向要复制的原始数据，用ds:di指向复制的目的空间</p><p><strong>优化前：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">; 利用SI和DI将字符串复制到其后面的数据区</span><br><span class="line">assume cs:code, ds:data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">db &#39;hello,world&#39;</span><br><span class="line">db &#39;...........&#39;</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:  mov ax, data</span><br><span class="line">mov ds, ax</span><br><span class="line">; ds:si指向要复制的原始数据，用ds:di指向复制的目的空间</span><br><span class="line">mov si, 0</span><br><span class="line">mov di, 16</span><br><span class="line">mov cx, 8</span><br><span class="line"></span><br><span class="line">; 复制</span><br><span class="line">s:  mov ax, [si]</span><br><span class="line">; 粘贴</span><br><span class="line">mov [di], ax</span><br><span class="line"></span><br><span class="line">; 移动偏移地址</span><br><span class="line">add si, 2</span><br><span class="line">add di, 2</span><br><span class="line"></span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p><strong>优化后：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">; 利用SI和[bx+idata]将字符串复制到其后面的数据区</span><br><span class="line">assume cs:code, ds:data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">db &#39;hello,world&#39;</span><br><span class="line">db &#39;...........&#39;</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:  mov ax, data</span><br><span class="line">mov ds, ax</span><br><span class="line">; ds:si指向要复制的原始数据</span><br><span class="line">mov si, 0</span><br><span class="line">mov cx, 8</span><br><span class="line"></span><br><span class="line">; 0[si]即[si+0],复制ds:si中的数据</span><br><span class="line">s:  mov ax, 0[si]</span><br><span class="line">; 16[si]即[si+16]，将数据粘贴到ds:(si+16)</span><br><span class="line">mov 16[si], ax</span><br><span class="line"></span><br><span class="line">; 移动偏移地址</span><br><span class="line">add si, 2</span><br><span class="line"></span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="6-bx-si-和-bx-di"><a href="#6-bx-si-和-bx-di" class="headerlink" title="6.[bx+si]和[bx+di]"></a>6.[bx+si]和[bx+di]</h3><p> [bx+si]的偏移地址为<code>(bx)+(si)</code>，也可以写成<code>[bx][si]</code></p><p>[bx+si+idata]的偏移地址为<code>(bx)+(si)+(idata)</code>，也可以写成<code>idata[bx][si]</code></p><h2 id="寻址方式应用"><a href="#寻址方式应用" class="headerlink" title="寻址方式应用"></a>寻址方式应用</h2><h3 id="1-bx-si-应用"><a href="#1-bx-si-应用" class="headerlink" title="1.[bx+si]应用"></a>1.[bx+si]应用</h3><p>双重循环需要共用一个CX，造成在内层的时候覆盖了外层循环的循环计数值</p><p>所以我们应该每次开始内层循环时，将外层循环的cx数值保存起来，在执行外层loop前，再恢复</p><ul><li>当循环内，bx寄存器未被使用，我们可以用bx寄存器临时储存外层循环的cx</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">; 将数据段中每个单词都改写成大写字母</span><br><span class="line">assume cs:code, ds:data</span><br><span class="line"></span><br><span class="line">; 共有四行数据，且每一行占了16个字节</span><br><span class="line">data segment</span><br><span class="line">db &#39;ibm             &#39;</span><br><span class="line">db &#39;dec             &#39;</span><br><span class="line">db &#39;vim             &#39;</span><br><span class="line">db &#39;dos             &#39;</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">; 利用[bx+si]双重循环访问数据（类似于二维数组）</span><br><span class="line">code segment</span><br><span class="line">start:  mov ax, data</span><br><span class="line">mov ds, ax</span><br><span class="line">; bx定位行</span><br><span class="line">mov bx, 0</span><br><span class="line"></span><br><span class="line">mov cx, 4</span><br><span class="line"></span><br><span class="line">; 用dx临时存放外层循环的值</span><br><span class="line">s0: mov dx, cx</span><br><span class="line">; si定位列 </span><br><span class="line">mov si, 0</span><br><span class="line">; 覆盖cx的值</span><br><span class="line">mov cx, 3</span><br><span class="line">s:mov al, [bx+si]</span><br><span class="line">and al, 11011111b</span><br><span class="line">mov al, [bx+si], al</span><br><span class="line"></span><br><span class="line">inc si</span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">add bx, 16</span><br><span class="line">; 在进行外层循环前恢复外层循环的cx值</span><br><span class="line">mov cx, dx</span><br><span class="line">loop s0</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><ul><li>cpu的寄存器数量有限容易撞车,我们也可以将暂存的数据放入内容单元中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">; 将数据段中每个单词都改写成大写字母</span><br><span class="line">assume cs:code, ds:data</span><br><span class="line"></span><br><span class="line">; 共有四行数据，且每一行占了16个字节</span><br><span class="line">data segment</span><br><span class="line">db &#39;ibm             &#39;</span><br><span class="line">db &#39;dec             &#39;</span><br><span class="line">db &#39;vim             &#39;</span><br><span class="line">db &#39;dos             &#39;</span><br><span class="line">; 定义一个字用来保存cx</span><br><span class="line">dw 0</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">; 利用[bx+si]双重循环访问数据（类似于二维数组）</span><br><span class="line">code segment</span><br><span class="line">start:  mov ax, data</span><br><span class="line">mov ds, ax</span><br><span class="line">; bx定位行</span><br><span class="line">mov bx, 0</span><br><span class="line"></span><br><span class="line">mov cx, 4</span><br><span class="line"></span><br><span class="line">; 将外层循环的cx值保存在data:40H的单元中</span><br><span class="line">s0: mov ds:[40H], cx</span><br><span class="line">; si定位列 </span><br><span class="line">mov si, 0</span><br><span class="line">; 覆盖cx的值</span><br><span class="line">mov cx, 3</span><br><span class="line">s:mov al, [bx+si]</span><br><span class="line">and al, 11011111b</span><br><span class="line">mov al, [bx+si], al</span><br><span class="line"></span><br><span class="line">inc si</span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">add bx, 16</span><br><span class="line">; 在进行外层循环前从内存单元中恢复外层循环的cx值</span><br><span class="line">mov cx, dx</span><br><span class="line">loop s0</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><ul><li><p>把暂存的数据单个放入内存单元的时候，我们必须要记住数据放到的单元的位置，这样程序会造成混乱；我们能尝试使用栈来存储这些数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">; 将数据段中每个单词都改写成大写字母</span><br><span class="line">assume cs:code, ds:data, ss:stack</span><br><span class="line"></span><br><span class="line">; 共有四行数据，且每一行占了16个字节</span><br><span class="line">data segment</span><br><span class="line">db &#39;ibm             &#39;</span><br><span class="line">db &#39;dec             &#39;</span><br><span class="line">db &#39;vim             &#39;</span><br><span class="line">db &#39;dos             &#39;</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">; 定义一个段,用来作为栈段，用来储存一些临时数据</span><br><span class="line">stack segment</span><br><span class="line">dw 0,0,0,0,0,0,0,0</span><br><span class="line"></span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; 利用[bx+si]双重循环访问数据（类似于二维数组）</span><br><span class="line">code segment</span><br><span class="line">start:  mov ax, data</span><br><span class="line">mov ds, ax</span><br><span class="line">; bx定位行</span><br><span class="line">mov bx, 0</span><br><span class="line"></span><br><span class="line">mov cx, 4</span><br><span class="line"></span><br><span class="line">; 外层循环的cx值压入栈中</span><br><span class="line">s0: push cx</span><br><span class="line">mov dx, cx</span><br><span class="line">; si定位列</span><br><span class="line">mov si, 0</span><br><span class="line">; 内层循环覆盖cx的值</span><br><span class="line">mov cx, 3</span><br><span class="line">s:mov al, [bx+si]</span><br><span class="line">and al, 11011111b</span><br><span class="line">mov al, [bx+si], al</span><br><span class="line"></span><br><span class="line">inc si</span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">add bx, 16</span><br><span class="line">; 在进行外层循环前通过弹出栈中数据恢复外层循环的cx值</span><br><span class="line">pop cx</span><br><span class="line">loop s0</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="1-寻址寄存器"><a href="#1-寻址寄存器" class="headerlink" title="1.寻址寄存器"></a>1.寻址寄存器</h3><ul><li>在8086CPU中，只有bx，bp，si，di这四个寄存器可以用于内存单元的寻找</li><li>bx，bp，si，di这四个寄存器可以单个出现，或只能以以下四种组合出现：bx和si，bx和di，bp和si，bp和di</li><li>bp寄存器，当指令没有显性给出段地址，段地址默认为ss</li></ul><h3 id="2-数据位置"><a href="#2-数据位置" class="headerlink" title="2.数据位置"></a>2.数据位置</h3><p>（1）数据位置可以在三个位置：cpu内部，内存，端口</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041133833.png" alt="image-20210322162735142"></p><p>（2）数据位置的表达</p><ul><li>立即数（idata）: 如<code>mov ax, 1</code>，执行前在cpu的指令缓存器中</li><li>寄存器：如：<code>mov ax, bx</code>执行，数据在寄存器中</li><li>段地址（SA）和偏移地址（EA）：指令要处理的数据在内存中</li></ul><h3 id="3-寻址方式"><a href="#3-寻址方式" class="headerlink" title="3.寻址方式"></a>3.寻址方式</h3><ul><li>直接寻址：[idata]</li><li>寄存器间接寻址：[bx]</li><li>寄存器相对寻址：<code>[bx].idata（用于结构体）</code>；<code>idata[si]（用于数组）</code>；<code>[bx][idata]（用于二维数组）</code></li><li>基址变址寻址：<code>[bx][si]（用于二维数组）</code></li><li>相对基址变址寻址：<code>idata[bx][si](用于二维数组)</code></li></ul><p>常用方式（对比C语言）：我们可以用<code>[bx+idata+si]</code>的方式来访问结构体，bx对应整个结构体，idata对应结构体中的某一个数据项，用si定位数据项中的每一个元素</p><p>c语言：dec.cp[i] =&gt; 汇编：bx.10h[si]</p><h3 id="4-数据长度"><a href="#4-数据长度" class="headerlink" title="4.数据长度"></a>4.数据长度</h3><ul><li>通过寄存器指明要处理的数据尺寸，例如：<code>mov ax,1</code>,ax申请了16位的长度</li><li>通过操作符<code>x ptr</code>指明内存单元长度，如<code>word ptr</code>，<code>byte ptr</code>，常用于没有寄存器时访问内存单元</li><li>指令默认访问数据大小，如<code>push[1000H]</code>，默认处理字单元</li></ul><h3 id="5-div指令"><a href="#5-div指令" class="headerlink" title="5.div指令"></a>5.div指令</h3><p>（1）基本原则</p><p>​    <img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210322195732483.png" alt="image-20210322195732483"></p><p>除数（当除数为8位时，当除数为16位时）：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041133674.png" alt="image-20210322200100086"></p><p>（2）解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">; (al)&#x3D;(ax)&#x2F;((ds)*16+0)的商</span><br><span class="line">; (ah)&#x3D;(ax)&#x2F;((ds)*16+0)的余数</span><br><span class="line">div byte ptr ds[0]</span><br><span class="line"></span><br><span class="line">; (ax)&#x3D;[(dx)*10000H+(ax)]&#x2F;((es)*16+0)的商</span><br><span class="line">; (dx)&#x3D;[(dx)*10000H+(ax)]&#x2F;((es)*16+0)的余数</span><br><span class="line">div word ptr es:[0]</span><br><span class="line"></span><br><span class="line">; (al)&#x3D;(ax)&#x2F;((ds)*16+(bx)+(si)+8)的商</span><br><span class="line">; (al)&#x3D;(ax)&#x2F;((ds)*16+(bx)+(si)+8)的余数</span><br><span class="line">div byte ptr [bx+si+8]</span><br></pre></td></tr></table></figure><p>（3） 案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">; 计算100001&#x2F;100</span><br><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">; 被除数100001转换为十六进制为186A1H，超过了16位（ax存不下）</span><br><span class="line">; 所以我们用dx存储16位溢出的1</span><br><span class="line">mov dx, 1</span><br><span class="line">; ax储存16位数据</span><br><span class="line">mov ax, 86A1H</span><br><span class="line"></span><br><span class="line">; 除数100，转换成十六进制为64,虽然8位可以存放</span><br><span class="line">; 但是按照被除数为32位，除数为16位的规则，我们只能用一整个bx存储</span><br><span class="line">mov bx,100</span><br><span class="line"></span><br><span class="line">; div指令会自动读取被除数(dx)*10000H+(ax)</span><br><span class="line">; 除以bx</span><br><span class="line">div bx</span><br><span class="line"></span><br><span class="line">; 程序返回</span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="6-伪指令dd"><a href="#6-伪指令dd" class="headerlink" title="6.伪指令dd"></a>6.伪指令dd</h3><p>前面我们用db定义字节型数据（8位），dw定义字型数据（16位）</p><p>我们用dd定义dword（dobule word 双字，32位）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">; div计算data段中第一个数据除以第二个数据的商放在第三个数据的储存单元中</span><br><span class="line">assume cs:code,ds:data</span><br><span class="line"></span><br><span class="line">; 定义数据段</span><br><span class="line">data segment</span><br><span class="line">; 被除数，dword类型（32位），需要用dx和ax存储</span><br><span class="line">dd 100001</span><br><span class="line">; 除数</span><br><span class="line">dw 100</span><br><span class="line">; 商</span><br><span class="line">dw 0</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:mov ax, data</span><br><span class="line">mov ds, ax</span><br><span class="line"></span><br><span class="line">; 将ds:0（即第一个数据的低16位）中的数据存入ax中</span><br><span class="line">mov ax, ds:[0]</span><br><span class="line"></span><br><span class="line">; 将ds:2（即第一个数据的高16位）中的数据存入dx中</span><br><span class="line">mov dx, ds:[2]</span><br><span class="line"></span><br><span class="line">; 用dx:ax中的32位数据除以ds:4（即第二个数据，16位）中的字型数据</span><br><span class="line">div word ptr ds:[4]</span><br><span class="line"></span><br><span class="line">; 将商存储在ds:6中</span><br><span class="line">mov ds:[6],ax</span><br><span class="line"></span><br><span class="line">; 程序返回</span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="7-dup"><a href="#7-dup" class="headerlink" title="7.dup"></a>7.dup</h3><ul><li><p>dup是一个操作符</p></li><li><p>dup会与db，dw，dd等数据定义的伪指令配合使用，用来进行数据的重复</p></li><li><p>使用案例：<code>db 3 dup(0)</code>定义了三个字节，且值都为0,相当于<code>db 0,0,0</code></p></li></ul><h2 id="转移指令原理"><a href="#转移指令原理" class="headerlink" title="转移指令原理"></a>转移指令原理</h2><p>8086CPU的转移指令有以下几类</p><ul><li><p>无条件转移指令（jmp）</p></li><li><p>条件转移指令</p></li><li><p>循环指令（loop）</p></li><li><p>过程（相当于高级语言的函数）</p></li><li><p>中断</p></li></ul><h3 id="1-操作offset"><a href="#1-操作offset" class="headerlink" title="1.操作offset"></a>1.操作offset</h3><p>offset为伪指令，offset取得标号的偏移地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">; 将s的一条指令复制到s0</span><br><span class="line">; ---------------------------</span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">; 复制对象</span><br><span class="line">;-------------------------</span><br><span class="line">s:mov ax, bx</span><br><span class="line">; 获得s指令的偏移地址存在si中</span><br><span class="line">mov si, offset s</span><br><span class="line">; 获得s0指令的偏移地址存在di中</span><br><span class="line">mov di, offset s0</span><br><span class="line"></span><br><span class="line">; 从cs:[si]中复制出指令内容</span><br><span class="line">mov ax, cs:[si]</span><br><span class="line">; 粘贴给cs:[di]</span><br><span class="line">mov cs:[di], ax</span><br><span class="line"></span><br><span class="line">; 粘贴对象</span><br><span class="line">;----------------------</span><br><span class="line">; nop是空指令，一个可占一个字节（因为要复制的指令是两字节的，所以这里要两个nop）</span><br><span class="line">s0: nop</span><br><span class="line">nop</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end s</span><br></pre></td></tr></table></figure><h3 id="2-jmp指令"><a href="#2-jmp指令" class="headerlink" title="2.jmp指令"></a>2.jmp指令</h3><p>jmp可以无条件转移，可以只修改IP，也可以同时修改CS和IP</p><p>jmp指令参数：</p><ul><li>转移目标地址</li><li>转移的距离</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:mov ax, 0</span><br><span class="line">; jmp转移到标记s处</span><br><span class="line">jmp short s</span><br><span class="line">add ax, 1</span><br><span class="line">add ax, ax</span><br><span class="line">        </span><br><span class="line">s:inc ax</span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（1）<strong>jmp short 标号</strong></p><ul><li>功能为（IP）= （IP） +  8位位移</li><li>8位位移= 标号处地址 - jmp指令后第一个字节地址</li><li>short表示位移为8位位移</li><li>8位位移的范围位-128~127</li></ul><p>（2）<strong>jmp near ptr 标号</strong></p><ul><li>(IP) = (IP) + 16</li><li>16位位移= 标号处地址 - jmp指令后第一个字节地址</li><li>段内近转移</li></ul><p>（3）<strong>jmp far ptr 标号</strong></p><ul><li>段间转移，又称远转移</li></ul><p>（4）jmp 16位寄存器</p><p>（5）jmp word ptr 内存单元地址</p><ul><li>读取内存单元存放的偏移地址，并跳转</li><li>段内转移</li></ul><p>（6）jmp dword ptr 内存单元地址</p><ul><li><p>内存单元存放两个字，高地址处的字存放目的段地址，低地址处是转移的目标地址</p></li><li><p>段间转移</p></li></ul><h3 id="3-jcxz指令"><a href="#3-jcxz指令" class="headerlink" title="3.jcxz指令"></a>3.jcxz指令</h3><p>有条件跳转指令，所有有条件跳转指令都是短转移，在对应的机器码中包含转移的位移，而不是目的地址</p><p> （1）jcxz指令操作</p><ul><li>当(cx) = 0 时， （IP）= （IP） +  8位位移</li><li>当（cx）!= 0 时，程序向下执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">; 在内存2000H段查找第一个值为0的字节，找到后将其偏移地址存储在dx中</span><br><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:mov ax, 2000H</span><br><span class="line">mov ds, ax</span><br><span class="line">mov bx,0</span><br><span class="line"></span><br><span class="line">; 循环查找内存</span><br><span class="line">; ----------------------------</span><br><span class="line">; cx存放16位（字），但是要求按8位（字节）处理，所以要分高低位分别存储</span><br><span class="line">s:  mov ch, 0</span><br><span class="line">mov cl, [bx]</span><br><span class="line">; jcxz 放在cx寄存器后，一旦cx&#x3D;0，即跳转到ok段</span><br><span class="line">jcxz ok</span><br><span class="line">; 不符合条件，bx自增找到下一个单元，利用jmp形成循环</span><br><span class="line">inc bx</span><br><span class="line">jmp short s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; 查找到后运行</span><br><span class="line">; ------------------</span><br><span class="line">ok: mov dx, bx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="4-loop指令"><a href="#4-loop指令" class="headerlink" title="4.loop指令"></a>4.loop指令</h3><p>loop指令也是有条件跳转指令</p><p>loop指令操作</p><ul><li>(cx) = (cx) - 1</li><li>当(cx) != 0 ，（IP）= （IP） +  8位位移</li><li>当(cx) = 0 时，程序向下运行</li></ul><h2 id="函数相关指令"><a href="#函数相关指令" class="headerlink" title="函数相关指令"></a>函数相关指令</h2><p>call，ret指令都是转移指令，他们都同时修改IP或同时修改CS和IP</p><h3 id="1-ret和retf"><a href="#1-ret和retf" class="headerlink" title="1.ret和retf"></a>1.ret和retf</h3><p>（1）ret指令</p><p>​    ret指令使用栈中的数据，修改IP内容，实现近转移</p><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">; 申请栈的空间</span><br><span class="line">stack segment</span><br><span class="line"></span><br><span class="line">db 16 dup (0)</span><br><span class="line"></span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">; 定位栈段位置</span><br><span class="line">mov ax, stack</span><br><span class="line">mov ss, ax</span><br><span class="line">; 确定栈顶指针</span><br><span class="line">mov sp, 16</span><br><span class="line">mov ax, 0</span><br><span class="line">; 将ax值放入供ret使用</span><br><span class="line">push ax</span><br><span class="line">; 这一句好像没什么用</span><br><span class="line">mov bx, 0</span><br><span class="line">; 利用栈中的数据，IP修改为0</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>（2）retf指令</p><p>​    retf指令用栈中的数据，修改CS和IP的内容，从而实现远转移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line"></span><br><span class="line">db 16 dup (0)</span><br><span class="line"></span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line">start:</span><br><span class="line">mov ax, stack</span><br><span class="line">mov ss, ax</span><br><span class="line">mov sp,16</span><br><span class="line"></span><br><span class="line">mov ax, 0</span><br><span class="line">; 这里的栈需要cs，和IP两个参数</span><br><span class="line">push cs</span><br><span class="line">push ax</span><br><span class="line"></span><br><span class="line">mov bx, 0</span><br><span class="line">; 利用栈中的值取出cs:ip并跳转</span><br><span class="line">retf</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="2-call指令"><a href="#2-call指令" class="headerlink" title="2.call指令"></a>2.call指令</h3><p>call指令操作</p><ul><li><p>将当前IP或CS和IP压入栈中</p></li><li><p>jmp转移</p></li><li><p>16位位移=“标号”处地址 - call指令后的第一个字节的地址</p></li></ul><h3 id="3-call和ret的配合使用"><a href="#3-call和ret的配合使用" class="headerlink" title="3.call和ret的配合使用"></a>3.call和ret的配合使用</h3><p>类似于函数，call调用子程序，执行完后通过ret返回到主程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">mov ax, 1</span><br><span class="line">; 确定循环次数</span><br><span class="line">mov cx, 3</span><br><span class="line">; 这里的call完成了两个操作</span><br><span class="line">; 将下一个指令的IP压入栈中</span><br><span class="line">; 跳转到s标记处</span><br><span class="line">call s</span><br><span class="line">mov bx, ax</span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21</span><br><span class="line"></span><br><span class="line">; 循环3次相加ax</span><br><span class="line">s:  add ax, ax</span><br><span class="line">loop s</span><br><span class="line">; 循环结束后，从栈中读到IP，然后跳转会mov bx, ax 句 </span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>4.mul指令</p><p>mul相乘的两个数，要么是8位的，要么都是16位</p><ul><li>8位：处理对象放在AL中和8位寄存器或内存字节单元中，结果在AX中</li><li>16位：处理对象放在AX中和16位寄存器或内存字单元中，结果DX（高位），AX（低位）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">; 乘法使用案例，计算100*10000</span><br><span class="line">; 因为乘数中的10000大于了255，所以必须做16位乘法</span><br><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">mov ax, 100</span><br><span class="line">mov bx, 10000</span><br><span class="line">; mul会自动读取ax中的值作为其中一个乘数</span><br><span class="line">mul bx</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="4-批量数据的传递"><a href="#4-批量数据的传递" class="headerlink" title="4.批量数据的传递"></a>4.批量数据的传递</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">; 利用子程序将data段中的字符串转换为大写</span><br><span class="line">assume cs:code</span><br><span class="line">; 利用内存空间传递批量数据作为参数</span><br><span class="line">data segment</span><br><span class="line">db &#39;TestText&#39;</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">mov ax, data</span><br><span class="line">; ds:si指向字符串（批量数据）所在空间的首地址</span><br><span class="line">mov ds, ax</span><br><span class="line">mov si, 0</span><br><span class="line"></span><br><span class="line">; 字符串长度决定循环次数</span><br><span class="line">mov cx, 8</span><br><span class="line">call change</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">change: </span><br><span class="line">and byte ptr [si], 11011111b</span><br><span class="line">inc si</span><br><span class="line">loop change</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>上面这个利用了内存批量传参，使用栈也可以达到同样效果</p><h3 id="5-解决除法溢出问题"><a href="#5-解决除法溢出问题" class="headerlink" title="5.解决除法溢出问题"></a>5.解决除法溢出问题</h3><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20210326155529547.png" alt="image-20210326155529547"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">; 解决除法溢出问题，F4240H&#x2F;0AH</span><br><span class="line">assume cs:code, ss:stack</span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">mov ax, stack</span><br><span class="line">mov ss, ax</span><br><span class="line">mov sp, 10h</span><br><span class="line">; 被除数低16位</span><br><span class="line">mov ax, 4240h</span><br><span class="line">; 被除数高16位</span><br><span class="line">mov dx, 0fh</span><br><span class="line">; 除数</span><br><span class="line">mov cx, 0ah</span><br><span class="line"></span><br><span class="line">call divdw</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">divdw:; 子程序定义开始</span><br><span class="line"></span><br><span class="line">; 低16位入栈保存</span><br><span class="line">push ax</span><br><span class="line"></span><br><span class="line">; 高16位放到ax中进行处理</span><br><span class="line">mov ax, dx</span><br><span class="line"></span><br><span class="line">; dx置零</span><br><span class="line">mov dx, 0</span><br><span class="line"></span><br><span class="line">; H&#x2F;N，用高位除以除数</span><br><span class="line">div cx</span><br><span class="line"></span><br><span class="line">; ax,bx的值为H&#x2F;N的商，这时候dx的值为H&#x2F;N的余数</span><br><span class="line">mov bx, ax</span><br><span class="line"></span><br><span class="line">; 从栈中恢复低16位</span><br><span class="line">pop ax</span><br><span class="line"></span><br><span class="line">; L&#x2F;N，dx默认为被除数的高16位，ax为低16位</span><br><span class="line">div cx</span><br><span class="line"></span><br><span class="line">; 将余数放到cx中</span><br><span class="line">mov cx, dx</span><br><span class="line"></span><br><span class="line">; 将结果高16位放到dx中，结果的低16位在ax中</span><br><span class="line">mov dx, bx</span><br><span class="line"></span><br><span class="line">; 子程序结束</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><h2 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h2><p>flag寄存器按位起作用，每一位都有专门的含义</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041133329.png" alt="image-20210327093649958"></p><p>在debug中查看标志寄存器</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041133817.png" alt="image-20210327095901036"></p><h3 id="1-ZF标志"><a href="#1-ZF标志" class="headerlink" title="1.ZF标志"></a>1.ZF标志</h3><p>ZF为零标志位，记录相关指令执行后的计算结果是否为0</p><ul><li>结果为0，ZF=1</li><li>结果不为0，ZF=0</li></ul><h3 id="2-PF标志"><a href="#2-PF标志" class="headerlink" title="2.PF标志"></a>2.PF标志</h3><p>PF为奇偶标志位，记录指令执行后，结果的二进制位中1的个数</p><ul><li>为偶数，PF=1</li><li>为奇数，PF=0</li></ul><h3 id="3-SF标志"><a href="#3-SF标志" class="headerlink" title="3.SF标志"></a>3.SF标志</h3><p>SF为符号标志位，记录相关指令执行后的的结果</p><ul><li><p>结果为负，SF=1</p></li><li><p>结果为正，SF=0</p></li><li><p>SF标志是CPU对有符号数运算结果的一种记录</p><p>对同一个二进制数据，计算机可以把它当作无符号数据来运算，也可以当作有符号数据来运算</p></li></ul><p>当CPU在执行add等指令时，实际上就包括了了两层含义（当作有符号处理/当作无符号处理）</p><h3 id="4-CF标志"><a href="#4-CF标志" class="headerlink" title="4.CF标志"></a>4.CF标志</h3><p>CF为进位标志位，针对无符号数，记录运算的进位值，也记录借位</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041133267.png" alt="image-20210327095644658"></p><h3 id="5-OF标志"><a href="#5-OF标志" class="headerlink" title="5.OF标志"></a>5.OF标志</h3><p>OF为溢出标志位，针对有符号数</p><ul><li>结果溢出则为1</li><li>结果不溢出则为0</li><li>在进行有符号数的运算时发生了溢出，那么运算的结果是不正确的</li></ul><h3 id="6-adc指令"><a href="#6-adc指令" class="headerlink" title="6.adc指令"></a>6.adc指令</h3><p>abc为带进位加法指令，利用CF位上的进位值</p><p><code>abc ax, bx</code> 实现功能：(ax) = (ax) + (bx) + CF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">; adc和add指令相配合可以对更大的数据进行加法运算</span><br><span class="line">; add ax, bx</span><br><span class="line">add al, bl</span><br><span class="line">abc ah, bh</span><br></pre></td></tr></table></figure><h3 id="7-sbb指令"><a href="#7-sbb指令" class="headerlink" title="7.sbb指令"></a>7.sbb指令</h3><p>sbb为带借位减法指令，利用CF上的借位值</p><p><code>sbb ax, bx</code>实现的功能：(ax) = (ax) - (bx) - CF</p><h3 id="8-cmp指令"><a href="#8-cmp指令" class="headerlink" title="8.cmp指令"></a>8.cmp指令</h3><p>cmp指令为比较指令，对标志寄存器产生影响。<code>cmp ax, ax</code>实现的功能：做(ax)-(ax)运算，运算结果不保存，仅对flag的相关位产生影响</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041133199.png" alt="image-20210327103947535"></p><h3 id="9-检测比较结果的条件转移指令"><a href="#9-检测比较结果的条件转移指令" class="headerlink" title="9.检测比较结果的条件转移指令"></a>9.检测比较结果的条件转移指令</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041133793.png" alt="image-20210327152053172"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041133283.png" alt="image-20210327152141824"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">; 比较条件语句(cmp和je配合使用)</span><br><span class="line">; (ah)&#x3D;(bh)则(ah)&#x3D;(ah)+(ah),否则(ah)&#x3D;(ah)+(bh)</span><br><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">; cmp 比较ah和bh</span><br><span class="line">cmp ah, bh</span><br><span class="line">; je做相等检测（相当于&#x3D;&#x3D;）,如果符合则跳转到s处</span><br><span class="line">je s</span><br><span class="line">; 无跳转正常向下执行</span><br><span class="line">add ah, bh</span><br><span class="line">; 跳转以绕开符合条件执行的语句</span><br><span class="line">jmp short ok</span><br><span class="line">; 条件符合后执行</span><br><span class="line">s:add ah, ah</span><br><span class="line">; 跳回到第一句，反复循环</span><br><span class="line">ok: ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">; 统计data段中数值为8的字节的个数，用ax保存统计结果</span><br><span class="line">assume ds:data, cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line"></span><br><span class="line">db 8,11,8,1,8,5,63,38</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">mov ax, data</span><br><span class="line">mov ds, ax</span><br><span class="line">; ds:bx指向数据段第一个字节</span><br><span class="line">mov bx, 0</span><br><span class="line"></span><br><span class="line">; 初始化累加器</span><br><span class="line">mov ax, 0</span><br><span class="line">; 由多少个数据决定循环次数</span><br><span class="line">mov cx, 8</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">s: ; 和8进行比较</span><br><span class="line">cmp byte ptr [bx], 8</span><br><span class="line">; 不相等直接到下一个循环</span><br><span class="line">jne next</span><br><span class="line">; 相等ax计数</span><br><span class="line">inc ax</span><br><span class="line"></span><br><span class="line">   next:</span><br><span class="line">; 移动地址，并进行下一次的比较</span><br><span class="line">inc bx</span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="10-DF标志和串传送指令"><a href="#10-DF标志和串传送指令" class="headerlink" title="10.DF标志和串传送指令"></a>10.DF标志和串传送指令</h3><p>DF为方向标志位</p><ul><li><p>DF为0，每次操作后si，di递增</p></li><li><p>DF为1，每次操作后si，di递减</p></li></ul><p>（1）movsb</p><p>以字节为单位传送，将ds:si指向的内存单元中的字节送入es:di中，然后根据标志寄存器DF位的值，将si和di递增或递减</p><p>（2）movsw</p><p>以字为单位传送，将ds:si指向的内存单元中的字送入es:di中，然后根据标志寄存器DF位的值，将si和di递增或递减2</p><p>（3）rep movsb</p><p>​    rep根据cx的值，重复执行后面的串传送指令</p><p>（4）DF设置指令</p><p>​    cld指令：将DF置0</p><p>​    std指令：将DF置1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">; 利用串传输指令，将data段中的第一个字符复制到它后面的空间</span><br><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line"></span><br><span class="line">db &#39;Welcome to masm!&#39;</span><br><span class="line">db 16 dup (0)</span><br><span class="line"></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">mov ax, data</span><br><span class="line">mov ds, ax</span><br><span class="line">; 设置ds:si指向data:0，读取位置</span><br><span class="line">mov si, 0</span><br><span class="line">mov es, ax</span><br><span class="line">; 设置es:di指向data:16，存储位置</span><br><span class="line">mov di, 16</span><br><span class="line">; 设置rep循环16次(总共有16个字符，一个字符一字节)</span><br><span class="line">mov cx, 16</span><br><span class="line"></span><br><span class="line">; 设置DF&#x3D;0，正向传送</span><br><span class="line">cld</span><br><span class="line">; 以字节为单位传送，将ds:si指向的内存单元中的字节送入es:di中</span><br><span class="line">; 并且si，di自增1</span><br><span class="line">rep movsb</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="11-pushf和popf"><a href="#11-pushf和popf" class="headerlink" title="11.pushf和popf"></a>11.pushf和popf</h3><p>pushf：将标志寄存器的值压栈</p><p>popf：从栈中弹出数据，送入标志寄存器中</p><h2 id="内中断"><a href="#内中断" class="headerlink" title="内中断"></a>内中断</h2><h3 id="1-中断基础知识"><a href="#1-中断基础知识" class="headerlink" title="1.中断基础知识"></a>1.中断基础知识</h3><p><strong>中断分类：</strong></p><p>外部中断，内部中断，软件中断</p><p><strong>中断向量表：</strong></p><p>存放着256个中断源所对应的中断处理程序的入口</p><p><strong>中断过程：</strong></p><ul><li>获得中断类型码N</li><li>标志寄存器的值入栈（保护标志位）：pushf</li><li>设置标志寄存器的TF和IF位为0 ：TF=0，IF=0</li><li>CS内容入栈：push CS</li><li>IP内容入栈： push IP</li><li>从内存地址为中断类型码<em>4和中断类型码\</em>4+2的两个字单元中读取中断程序入口地址设置IP和CS：(IP)=(N*4)，(CS)=(N*4+2)</li></ul><h3 id="2-中断处理程序"><a href="#2-中断处理程序" class="headerlink" title="2.中断处理程序"></a>2.中断处理程序</h3><p>处理步骤：</p><ul><li>保存用到的寄存器</li><li>处理中断</li><li>恢复用到的寄存器</li><li>用iret指令返回（恢复保存起来的IP，CS和标志位寄存器）</li></ul><p>当发生除法溢出时，默认产生0号中断信息，从而引发中断过程</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041133001.png" alt="image-20210327173957758"></p><p>修改默认的中断，令中断表的0号指向200:0处，中断程序就变为了200:0处存储的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov ax, 0</span><br><span class="line">mov es, ax</span><br><span class="line">mov word ptr es:[0*4], 200h</span><br><span class="line">mov word ptr es:[0*4+2], 0</span><br></pre></td></tr></table></figure><h3 id="3-单步中断"><a href="#3-单步中断" class="headerlink" title="3.单步中断"></a>3.单步中断</h3><p>单步中断的中断类型码为1，则它引发的中断过程如下：</p><ul><li>取得中断类型码1</li><li>标志寄存器入栈，TF，IF设置为0</li><li>CS，IP入栈</li><li>(IP)=(1*4)，(CS)=(1*4+2)</li></ul><p>debug使用T命令时，将TF设置为1，引发单步中断</p><h2 id="int中断"><a href="#int中断" class="headerlink" title="int中断"></a>int中断</h2><p>CPU执行int n 指令，相当于调用一个n号中断的中断过程</p><h3 id="1-基本案例"><a href="#1-基本案例" class="headerlink" title="1.基本案例"></a>1.基本案例</h3><p>（1）安装程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">; 安装中断7ch的中断例程</span><br><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">; 通过串传送，将程序安装（复制）到安全的内存中（0:200）</span><br><span class="line">; -----------------------------</span><br><span class="line">mov ax,cs</span><br><span class="line">mov ds, ax</span><br><span class="line">; 设置ds:si指向源地址</span><br><span class="line">mov si, offset sqs</span><br><span class="line"></span><br><span class="line">mov ax, 0</span><br><span class="line">mov es, ax</span><br><span class="line">; 设置es:di指向目的地址</span><br><span class="line">mov di, 200h</span><br><span class="line">; 计算出传输长度（循环次数）</span><br><span class="line">mov cx, offset sqrend - offset sqr</span><br><span class="line">; 设置传输方向为正</span><br><span class="line">cld</span><br><span class="line">; 传输</span><br><span class="line">rep movsb</span><br><span class="line"></span><br><span class="line">; 设置中断向量表</span><br><span class="line">;-----------------------------------</span><br><span class="line">mov ax, 0</span><br><span class="line">mov es, ax</span><br><span class="line">mov word ptr es:[7ch*4], 200h</span><br><span class="line">mov word ptr es:[7ch*4+2], 0</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; 中断后运行的程序（这里是求a的平方）</span><br><span class="line">sqr:</span><br><span class="line">mul ax</span><br><span class="line">; 用iret指令返回（恢复保存起来的IP，CS和标志位寄存器），保证中断结束后继续执行原来的主程序</span><br><span class="line">iret</span><br><span class="line"></span><br><span class="line">; 设置一个空指令，方便计算上面程序的长度 </span><br><span class="line">sqrend: </span><br><span class="line">nop</span><br><span class="line">        </span><br><span class="line">code ends</span><br><span class="line">end start        </span><br></pre></td></tr></table></figure><p>（2）调用程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">; 调用中断例程,求2*3256^2</span><br><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">mov ax, 3456</span><br><span class="line">; 调用中断7ch的中断例程，计算出ax数据的平方</span><br><span class="line">int 7ch</span><br><span class="line"></span><br><span class="line">; 存放结果，结果乘以2</span><br><span class="line">add ax, ax</span><br><span class="line">adc dx, dx</span><br><span class="line"></span><br><span class="line">mov ax, 4c00h</span><br><span class="line"></span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>CPU可以直接读写3个地方的数据：</p><ul><li><p>CPU内部寄存器</p></li><li><p>内存单元</p></li><li><p>端口</p></li></ul><h3 id="1-端口的读写"><a href="#1-端口的读写" class="headerlink" title="1.端口的读写"></a>1.端口的读写</h3><p>对0-255以内的端口进行读写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">in al, 20h ;从20h端口读入一个字节</span><br><span class="line">out 20h, al;从20h端口写入一个字节</span><br></pre></td></tr></table></figure><p>对255-65535位的端口进行读写，端口号放在dx中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov dx, 3f8h</span><br><span class="line">in ax, dx; 读入一个字</span><br><span class="line">out dx, ax; 写入一个字</span><br></pre></td></tr></table></figure><h3 id="2-shl和shr指令"><a href="#2-shl和shr指令" class="headerlink" title="2.shl和shr指令"></a>2.shl和shr指令</h3><p>（1）shl左移指令</p><ul><li>将一个寄存器或内存单元中的数据向左移位</li><li>将最后移出的一位写入CF中</li><li>最低位用0补充</li><li>如果移动的位数大于1，必须将移动位数放在cl中：<code>shl al, cl</code></li><li>将X逻辑左移一位，相当于执行：X=X*2</li></ul><p>（2）shr右移指令</p><ul><li>将一个寄存器或内存单元中的数据向右移位</li><li>将最后移出的一位写入CF中</li><li>最高位用0补充</li><li>如果移动的位数大于1，必须将移动位数放在cl中：<code>shr al, cl</code></li><li>将X逻辑左移一位，相当于执行：X=X/2</li></ul><h3 id="3-读取RAM芯片数据"><a href="#3-读取RAM芯片数据" class="headerlink" title="3.读取RAM芯片数据"></a>3.读取RAM芯片数据</h3><p>（1）CMOS RAM芯片与端口</p><ul><li><p>70h为地址端口，存放要访问的CMOS RAM单元的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">; 在70h写入要访问单元的地址</span><br><span class="line">mov al, 8</span><br><span class="line">out 70h, al</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>71h为数据端口，存放从选定的CMOS RAM单元中读取的数据，或者写入到其中的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">; 在71h读取指定单元中的数据</span><br><span class="line">in al, 71h</span><br></pre></td></tr></table></figure></li></ul><h2 id="外中断"><a href="#外中断" class="headerlink" title="外中断"></a>外中断</h2><p>CPU通过端口和外部设备进行联系</p><h3 id="1-外中断信息"><a href="#1-外中断信息" class="headerlink" title="1.外中断信息"></a>1.外中断信息</h3><p>（1）外中断源有两类：</p><ul><li>可屏蔽中断</li><li>不可屏蔽中断</li></ul><p>（2）当CPU检测到可屏蔽中断信息时</p><ul><li>如果IF=1，则CPU在执行完当前指令后响应中断，引发中断过程</li><li>如果IF=0，则不响应可屏蔽中断</li></ul><p>（3）设置IF指令</p><ul><li>sti，用于设置IF=1</li><li>cli，用于设置IF=0</li></ul><h3 id="2-键盘处理过程"><a href="#2-键盘处理过程" class="headerlink" title="2.键盘处理过程"></a>2.键盘处理过程</h3><p>（1）键盘触发中断原理</p><ul><li>一般按下一个键时产生的扫描码为通码，松开一个键产生的扫描码为断码（扫描码会送入60H）</li><li>扫描码长度为一个字节，通码第7位为0，断码第7位为1</li><li>断码 = 通码 + 80H</li><li>如果是字符键的扫描码，将该扫描码和其对应的字符码送入键盘缓冲区</li></ul><p>（2）键盘输入的处理过程</p><ul><li>键盘产生扫描码</li><li>扫描码送入60h端口</li><li>一旦侦测到60h端口有动静，引发9号中断</li><li>CPU执行int 9 中断例程处理键盘输入</li></ul><h2 id="直接定值表"><a href="#直接定值表" class="headerlink" title="直接定值表"></a>直接定值表</h2><h3 id="1-描述了单位长度的标号"><a href="#1-描述了单位长度的标号" class="headerlink" title="1.描述了单位长度的标号"></a>1.描述了单位长度的标号</h3><p>（1）地址标号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">; a,b这里代表地址</span><br><span class="line">a: db 1, 2, 3, 4</span><br><span class="line">b: dw 0</span><br><span class="line"></span><br><span class="line">; a，b的使用，获得偏移地址</span><br><span class="line">mov si, offset a</span><br><span class="line">mov bx, offset b</span><br></pre></td></tr></table></figure><p>（2）地址+长度标号（数据标号）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">; a描述了地址code:0，并描述了从这个地址开始，以后的内存单元都是字节单元</span><br><span class="line">a db 1, 2, 3, 4</span><br><span class="line">b dw 0</span><br><span class="line"></span><br><span class="line">; a，b可以代表段中的内存单元</span><br><span class="line">; 相当于mov ax, cs:[4]</span><br><span class="line">mov ax, b</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109041134246.jpeg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="硬件开发" scheme="https://autovy.github.io/categories/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="汇编语言" scheme="https://autovy.github.io/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
      <category term="底层原理" scheme="https://autovy.github.io/tags/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>C语言|算法入门指南</title>
    <link href="https://autovy.github.io/2021/02/03/C%20language/C%E8%AF%AD%E8%A8%80-%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://autovy.github.io/2021/02/03/C%20language/C%E8%AF%AD%E8%A8%80-%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</id>
    <published>2021-02-03T06:30:00.000Z</published>
    <updated>2021-09-04T07:44:53.544Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904904.png" alt="image-20210210110218935"></p><span id="more"></span><h2 id="时间复杂度（Time-complexity）"><a href="#时间复杂度（Time-complexity）" class="headerlink" title="时间复杂度（Time complexity）"></a>时间复杂度（Time complexity）</h2><h3 id="1-一个例子"><a href="#1-一个例子" class="headerlink" title="1.一个例子"></a>1.一个例子</h3><p>情景：在一个有100个学生的教室里，仅有一名学生没过英语四级，我们要找到这名学生</p><ul><li>方法一：问每一个学生是否有过四级，时间复杂度为<strong>O(n)</strong></li><li>方法二：问每一个学生两个问题：1.是否有过四级 2.其他99个人过四级的情况，时间复杂度为<strong>O(n2)</strong></li><li>方法三：将100人分成两组，然后问没过四级的是在第一组还是在第二组，然后将该小组又分成两部分，再次询问，以此类推，直到最后找到没过四级的那个学生，时间复杂度为<strong>O(log n)</strong></li></ul><p>如果只有一个学生知道笔隐藏在哪个学生上，我可能需要进行O（n2）搜索。如果一个学生拿着笔，只有他们自己知道，我会使用O（n）。如果所有学生都知道，我会使用O（log n）搜索，但是只会告诉我是否猜对了。</p><h3 id="2-时间复杂度的含义"><a href="#2-时间复杂度的含义" class="headerlink" title="2.时间复杂度的含义"></a>2.时间复杂度的含义</h3><p>时间复杂度并不等于程序执行时间，我们没有考虑执行代码中每个语句所需的实际时间，而是考虑每个语句执行多少次</p><h3 id="3-时间复杂度图示"><a href="#3-时间复杂度图示" class="headerlink" title="3.时间复杂度图示"></a>3.时间复杂度图示</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040903611.png" alt="image-20210210104634026"></p><h3 id="4-时间复杂度计算方法"><a href="#4-时间复杂度计算方法" class="headerlink" title="4.时间复杂度计算方法"></a>4.时间复杂度计算方法</h3><ul><li>将算法/功能分解为单独的操作</li><li>计算每个操作的复杂度</li><li>将每个操作的复杂度加起来</li><li>删除常量</li><li>找到最高阶项-这就是我们认为算法/函数的复杂度</li></ul><h2 id="经典算法一览"><a href="#经典算法一览" class="headerlink" title="经典算法一览"></a>经典算法一览</h2><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904904.png" alt="image-20210210110218935"></p><h2 id="辗转相除法（Euclidean-algorithm）"><a href="#辗转相除法（Euclidean-algorithm）" class="headerlink" title="辗转相除法（Euclidean algorithm）"></a>辗转相除法（Euclidean algorithm）</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><ul><li>辗转相除法又称为欧几里得算法，常用于求解最大公约数</li><li>算法原理：若a除以b的余数为r , 则有 gcd(a , b) = gcd( b ,r )</li><li>算法思路：大数除于小数得余数，该余数再与小数重复上面步骤，直到最后得小数为0，这时大数即为最大公约数</li></ul><h3 id="2-基本案例"><a href="#2-基本案例" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用递归函数辗转相除返回最大公约数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> gcd(b%a, a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果展示 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">int</span> b = <span class="number">15</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;GCD(%d, %d)=%d\n&quot;</span>, a, b, gcd(a,b));</span><br><span class="line"></span><br><span class="line">a = <span class="number">35</span>; </span><br><span class="line">b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;GCD(%d, %d)=%d\n&quot;</span>, a, b, gcd(a,b));</span><br><span class="line"></span><br><span class="line">a = <span class="number">31</span>; </span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;GCD(%d, %d)=%d\n&quot;</span>, a, b, gcd(a,b));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法解析：</p><ul><li><code>b%a</code>即b除以a后的余数，当b&lt;a时，返回b，所以在以上程序中，我们不需要比较a，b大小，比如gcd(35,10) ,经过<code>b%a</code>会变成gcd(10,35)</li><li>递归是一种特殊的循环，其停止的信号是<code>return</code>语句</li><li>以上程序的时间复杂度是：O(Log min(a, b))  </li></ul><h3 id="3-扩展案例"><a href="#3-扩展案例" class="headerlink" title="3.扩展案例"></a>3.扩展案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// gcd扩展版，不仅可以得到最大公约数，还可以找到整数系数x和y</span></span><br><span class="line"><span class="comment">// ax + by = gcd(a, b) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcdExtended</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line">*x = <span class="number">0</span>;</span><br><span class="line">*y = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// x1,y1存储递归调用的结果</span></span><br><span class="line"><span class="keyword">int</span> x1,y1;</span><br><span class="line"><span class="keyword">int</span> gcd = gcdExtended(b%a, a, &amp;x1, &amp;y1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新x,y值 </span></span><br><span class="line">*x = y1 - (b/a) * x1;</span><br><span class="line">*y = x1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> gcd; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示结果</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g = gcdExtended(a, b, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a*%d + b*%d = %d &quot;</span>, x, y, g);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>语法解析：</p><ul><li>以上程序目的是为了计算：  <code>ax + by = gcd(a, b)</code> 中的x，y</li><li>本程序使用了指针，可以在另一个函数中修改主函数的值，避免变量作用域的问题。在主函数内，可以通过<code>&amp;x,&amp;y</code>将x，y的地址传给其他函数，其他函数定义指针<code>int *x, int *y</code>存储地址，然后再用<code>*x,*y</code>读取地址中存的值即可修改主函数中的变量</li><li><code>int gcd = gcdExtended(b%a, a, &amp;x1, &amp;y1);</code>使程序反复执行其上面的语句，直至a==0,这时可以得到gcd,和x1=0，y1=1的初始值。然后再开始与以上执行方向相反执行其下面的语句。最后<code>return gcd</code>实际上在第二部分的循环中，值不变</li><li>主函数执行时，<code>gcdExtended</code>中的地址是主函数<code>x，y</code>的地址，而递归函数中的地址是<code>x1，y1</code>的地址;<code>x1,y1</code>存储的是上一个循环中的<code>*x，*y</code></li></ul><h2 id="埃拉托斯特尼筛法（sieve-of-Eratosthenes）"><a href="#埃拉托斯特尼筛法（sieve-of-Eratosthenes）" class="headerlink" title="埃拉托斯特尼筛法（sieve of Eratosthenes）"></a>埃拉托斯特尼筛法（sieve of Eratosthenes）</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>埃拉托斯特尼筛法是一种常用的素数筛法，可以筛选一定范围自然数内的质数（Prime numbers），时间复杂度：O(<em>n</em> log log <em>n</em>)</p><p>埃拉托斯特尼筛法演示动画（摘自维基百科）</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif" alt="img"></p><h3 id="2-实现步骤"><a href="#2-实现步骤" class="headerlink" title="2.实现步骤"></a>2.实现步骤</h3><p>该筛法的基本步骤案例，筛选2-50范围内的素数</p><p>（1）创建2-50所有数字的列表</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904338.png" alt="image-20210214200912413"></p><p>（2）标记所有<strong>2的倍数</strong>且<strong>大于或等于其平方（即4）</strong>的数字</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904399.png" alt="image-20210214200920690"></p><p>（3）标记所有<strong>3的倍数</strong>且<strong>大于或等于其平方（即9）</strong>的数字</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904633.png" alt="image-20210214202117142"></p><p>（4）标记所有<strong>5的倍数</strong>且<strong>大于或等于其平方（即25）</strong>的数字</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904951.png" alt="image-20210214202159136"></p><p>（5）标记所有<strong>7的倍数</strong>且<strong>大于或等于其平方（即49）</strong>的数字</p><p>​    查无数字，则跳过这一步</p><p>（6）去掉列表中标记的数字，剩下的未被标记数字即为素数：2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47.</p><h3 id="3-基本案例"><a href="#3-基本案例" class="headerlink" title="3.基本案例"></a>3.基本案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 筛选素数函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">SieveOfEratosthenes</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建标识数组</span></span><br><span class="line"><span class="keyword">bool</span> primes[n+<span class="number">1</span>]; </span><br><span class="line"><span class="comment">// 标识数组默认填入true,用索引当作自然数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i&lt;=n; i++) &#123;</span><br><span class="line"></span><br><span class="line">primes[i] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始标记非质数（即标记p的倍数且大于或等于其平方的数字） </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">2</span>; p*p&lt;=n; p++)&#123;</span><br><span class="line"><span class="keyword">if</span>(primes[p] == <span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=p*p; i&lt;=n; i+=p)&#123;</span><br><span class="line">primes[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印出所有素数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">2</span>; p&lt;=n; p++)&#123;</span><br><span class="line"><span class="keyword">if</span>(primes[p])&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入筛选范围:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">SieveOfEratosthenes(n); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="线性查找（Linear-search）"><a href="#线性查找（Linear-search）" class="headerlink" title="线性查找（Linear search）"></a>线性查找（Linear search）</h2><h3 id="1-基本概念-2"><a href="#1-基本概念-2" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>线性查找时间复杂度为：O(n)</p><p>线性查找的步骤如下：</p><ul><li>从arr []的最左边元素开始，然后将x与arr []的每个元素一一比较</li><li>如果x与元素匹配，则返回索引。</li><li>如果x与任何元素都不匹配，则返回-1。</li></ul><p>线性查找示意图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904177.gif" alt="img"></p><h3 id="2-基本案例-1"><a href="#2-基本案例-1" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线性查找函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逐个遍历查找，n为数组长度 ，x为查找对象 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr[i]==x)&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">// 目标数组 </span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找目标</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测量数组大小</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找过程</span></span><br><span class="line"><span class="keyword">int</span> result = search(arr, n, x);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(result==<span class="number">-1</span>)? <span class="built_in">printf</span>(<span class="string">&quot;目标不存在&quot;</span>):<span class="built_in">printf</span>(<span class="string">&quot;目标所在索引为%d&quot;</span>, result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="二分查找（Binary-Search）"><a href="#二分查找（Binary-Search）" class="headerlink" title="二分查找（Binary Search）"></a>二分查找（Binary Search）</h2><h3 id="1-基本概念-3"><a href="#1-基本概念-3" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>二分查找的对象是从小到大的数组，其时间复杂度可以写作：O(Log n)</p><p>二分查找步骤：</p><ul><li>将x与中间元素比较</li><li>如果x与中间元素匹配，则返回中间索引</li><li>否则如果x大于中间元素则取中间元素后右半边数组重复操作</li><li>否则如果x小于中间元素则取中间元素后左半边数组重复操作</li></ul><p>二分查找示意图：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040905289.gif" alt="“Binary Search”"></p><h3 id="2-基本案例-2"><a href="#2-基本案例-2" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="comment">// 递归法二分查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(r &gt;= l)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求中间元素</span></span><br><span class="line"><span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况1：如果目标与中间元素匹配 </span></span><br><span class="line"><span class="keyword">if</span>(arr[mid] == x)&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况2:如果目标小于中间元素</span></span><br><span class="line"><span class="keyword">if</span>(arr[mid] &gt; x)&#123;</span><br><span class="line"><span class="comment">// 返回以中间-1为右的递归 </span></span><br><span class="line"><span class="keyword">return</span> binarySearch(arr, l, mid<span class="number">-1</span>, x);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况3：如果目标大于中间元素</span></span><br><span class="line"><span class="comment">// 返回以中间+1为左的递归 </span></span><br><span class="line"><span class="keyword">return</span> binarySearch(arr, mid + <span class="number">1</span>, r, x);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查无结果</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">// 目标数组 </span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找目标</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测量数组大小</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找过程,定左右 </span></span><br><span class="line"><span class="keyword">int</span> result =  binarySearch(arr, <span class="number">0</span>, n - <span class="number">1</span>, x);</span><br><span class="line"></span><br><span class="line">(result==<span class="number">-1</span>) ? <span class="built_in">printf</span>(<span class="string">&quot;目标不存在&quot;</span>) : <span class="built_in">printf</span>(<span class="string">&quot;目标所在索引为%d&quot;</span>, result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="哈希表（Hash-table）"><a href="#哈希表（Hash-table）" class="headerlink" title="哈希表（Hash table）"></a>哈希表（Hash table）</h2><h3 id="1-基本概念-4"><a href="#1-基本概念-4" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>哈希表是一种<strong>数据结构</strong>，其以键值对的形式表示数据。每一个键都映射哈希表中的一个值（与关联数组类似）</p><p>在哈希表中，对键进行处理以生成映射到所需元素的新索引。此过程称为hashing。</p><p>哈希表是存储和检索元素的有效方法，所以其也是一种有效的<strong>查找算法</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040905182.png" alt="“hashing”示意图"></p><h3 id="2-实现步骤-1"><a href="#2-实现步骤-1" class="headerlink" title="2.实现步骤"></a>2.实现步骤</h3><p>（1）哈希表初始化</p><p>​    在将元素插入数组前，将数组默认值设为-1（-1表示元素不存    在或特定的索引可以插入）</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040905313.png" alt="image-20210215110519122"></p><p>（2）插入元素</p><p>​    哈希表插入元素的经典算法是：<code>key =  element % size</code> （key即数据插入位置，element即元素，size即数组大小）</p><p>​    如插入数字24</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040905850.png" alt="image-20210215111157606"></p><p>（3）搜索元素</p><p>搜索元素和插入元素使用同一算法获得索引（key），再按索引查找对应元素</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906618.png" alt="image-20210215111443960"></p><p>（4）删除元素</p><p>在哈希表中删除元素并不是指将数组中的元素移除，而是将元素的值初始化为-1</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906635.png" alt="image-20210215111738024"></p><h3 id="3-基本案例-1"><a href="#3-基本案例-1" class="headerlink" title="3.基本案例"></a>3.基本案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> size 7 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建数组作为基本结构</span></span><br><span class="line"><span class="keyword">int</span> arr[size]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表初始化，将所有元素赋值为-1 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">arr[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key = value % size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr[key] == <span class="number">-1</span>)&#123;</span><br><span class="line">arr[key] = value;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d 插入到 arr[%d]\n&quot;</span>, value, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该位置存在冲突&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key = value % size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr[key] == value)&#123;</span><br><span class="line">arr[key] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该值不存在&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span> <span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key = value % size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr[key] == value)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查有此项&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查无此项&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印出所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[%d] = %d\n&quot;</span>, i, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 初始化哈希表 </span></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充哈希表  </span></span><br><span class="line">insert(<span class="number">10</span>);</span><br><span class="line">insert(<span class="number">4</span>);</span><br><span class="line">insert(<span class="number">2</span>);</span><br><span class="line">insert(<span class="number">5</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印哈希表</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">print(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除测试</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">del(<span class="number">5</span>); </span><br><span class="line">print();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询测试</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">search(<span class="number">4</span>); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="4-哈希冲突（collision）"><a href="#4-哈希冲突（collision）" class="headerlink" title="4.哈希冲突（collision）"></a>4.哈希冲突（collision）</h3><p>如果存在插入元素算法得到得索引相同，会出现哈希冲突的情况</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906057.png" alt="image-20210215151206845"></p><p>以下介绍几种避免哈希冲突的方法</p><h3 id="5-线性探测-Linear-Probing"><a href="#5-线性探测-Linear-Probing" class="headerlink" title="5.线性探测(Linear Probing)"></a>5.线性探测(Linear Probing)</h3><p>（1）方法简介：通过<code>key = element % size</code>计算索引，如果该索引为空则直接填入，如果产生了冲突就检查下一个索引即<code>key = (key+1) % size</code>，重复执行该过程直到找到空间</p><p>（2）方法示意图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906001.png" alt="image-20210215153740661"></p><p>空间不足的情况：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906542.png" alt="image-20210215154203024"></p><h3 id="6-单独链表法（separate-chaining）"><a href="#6-单独链表法（separate-chaining）" class="headerlink" title="6.单独链表法（separate chaining）"></a>6.单独链表法（separate chaining）</h3><p>（1）方法简介</p><p>单独链表法又被称为开放式哈希表（Open hashing），它采用数据结构中的链表（linked list）来解决哈希冲突的问题，这样的哈希表永远也不会被填满</p><p>这种方法使哈希表的每个单元指向具有相同索引值的链表</p><p>（2）方法示意图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906224.png" alt="image-20210215160449318"></p><p>（3）使用案例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> size 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链表节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="comment">// 存储该节点内容 </span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  存储下一个节点的地址 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建单独链表（每一个哈希表的索引一条链表）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">chain</span>[<span class="title">size</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表初始化，每一列填入NULL </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">chain[i] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表中插入元素 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="comment">// 创造新节点存储数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">newNode</span> =</span> (struct node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">newNode-&gt;data = value;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算索引（hash key）</span></span><br><span class="line"><span class="keyword">int</span> key = value % size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查单独链表是否为空</span></span><br><span class="line"><span class="comment">// 为空则填入新节点 </span></span><br><span class="line"><span class="keyword">if</span>(chain[key] == <span class="literal">NULL</span>)&#123;</span><br><span class="line">chain[key] = newNode;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 不为空即产生了哈希冲突 </span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 需要在已有的末端节点后添加新节点</span></span><br><span class="line"><span class="comment">// 获得指定索引的链表 </span></span><br><span class="line">struct node *temp = chain[key];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历链表得到末端节点 </span></span><br><span class="line"><span class="keyword">while</span>(temp-&gt;next)&#123;</span><br><span class="line">temp = temp-&gt;next; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 在末尾连接上新节点 </span></span><br><span class="line">temp-&gt;next = newNode; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表中搜索元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key = value % size;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> chain[key];</span><br><span class="line"><span class="comment">// 遍历链表寻找元素 </span></span><br><span class="line"><span class="keyword">while</span>(temp)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;data == value)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表中删除元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key = value % size;</span><br><span class="line"><span class="comment">// 存储头部节点 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> chain[key],*dealloc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(temp != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="comment">// 如果需要删除的元素在头部 </span></span><br><span class="line"><span class="keyword">if</span>(temp-&gt;data == value)&#123;</span><br><span class="line">dealloc = temp;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(dealloc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 遍历链表寻找需要删除的元素 </span></span><br><span class="line"><span class="keyword">while</span>(temp-&gt;next)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;next-&gt;data == value)&#123;</span><br><span class="line">dealloc = temp-&gt;next;</span><br><span class="line">temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(dealloc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印哈希表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> chain[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;chain[%d]--&gt;&quot;</span>,i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印链表</span></span><br><span class="line"><span class="keyword">while</span>(temp)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d--&gt;&quot;</span>, temp-&gt;data);</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="comment">// 初始化哈希表</span></span><br><span class="line">init();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 填充数据</span></span><br><span class="line">    insert(<span class="number">7</span>);</span><br><span class="line">    insert(<span class="number">0</span>);</span><br><span class="line">    insert(<span class="number">3</span>);</span><br><span class="line">    insert(<span class="number">10</span>);</span><br><span class="line">    insert(<span class="number">4</span>);</span><br><span class="line">    insert(<span class="number">5</span>);  </span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> print(); </span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">// 删除测试</span></span><br><span class="line"><span class="keyword">if</span>(del(<span class="number">10</span>))&#123;</span><br><span class="line">print(); </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除项不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><h3 id="1-基本概念-5"><a href="#1-基本概念-5" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>（1）冒泡排序通过重复交换错误顺序的两个数来工作</p><p>（2）冒泡排序步骤：</p><ul><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ul><p>（3）冒泡排序示意图:</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906428.gif" alt="“Bubble Sort gif”的图片搜索结果"></p><h3 id="2-基本案例-3"><a href="#2-基本案例-3" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换数字函数(此处的参数为地址，可以直接修改主函数中的值)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *xp, <span class="keyword">int</span> *yp)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = *xp;</span><br><span class="line">*xp = *yp;</span><br><span class="line">*yp = temp;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒泡函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="comment">// 从头开始的次数 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123; </span><br><span class="line">    <span class="comment">// 移动读取数组相邻两个数 </span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n-i<span class="number">-1</span>; j++)&#123;</span><br><span class="line"><span class="comment">// 符合条件，交换数值 </span></span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">swap(&amp;arr[j], &amp;arr[j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印数组函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAarry</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">64</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">90</span>&#125;; </span><br><span class="line"><span class="comment">// 计算数组大小 </span></span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// 冒泡处理 </span></span><br><span class="line">bubbleSort(arr, n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;排序后的数组：\n&quot;</span>);</span><br><span class="line">printAarry(arr, n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="快速排序（Quick-sort）"><a href="#快速排序（Quick-sort）" class="headerlink" title="快速排序（Quick sort）"></a>快速排序（Quick sort）</h2><p>参考文章：<a href="https://juejin.cn/post/6844904122538278920">https://juejin.cn/post/6844904122538278920</a></p><h3 id="1-基本概念-6"><a href="#1-基本概念-6" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>（1）快速排序是一种分而治之的算法，它会一个元素为枢纽键对数组进行分区，枢纽有以下几种选择，本文以最简单的最后一个元素为枢纽为例</p><ul><li>始终选择第一个元素作为枢轴</li><li>始终选择最后一个元素作为枢轴</li><li>选择一个随机元素作为枢轴。</li><li>选择中位数作为枢轴</li></ul><p>（2）实现步骤</p><ul><li>在给定数组中确定一个元素x作为枢纽</li><li>将x放在排序数组中的正确位置</li><li>将小于x的元素放在x之前</li><li>将大于x的元素放在x之后</li><li>去掉枢纽分成两组后重复以上操作</li></ul><p>以末尾元素为枢纽排序示意图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906440.png" alt="image-20210226194704522"></p><p>​    （3）将小于x的元素放在x之前，将大于x的元素放在x之后这一步是将一个数组分成两个数组，其运用到了分而治之的思想</p><ul><li><p>将一个数组分成两个数组的方法为：<br>先从数组右边找到一个比枢轴元素小的元素，将数组的第一个位置赋值为该元素；</p></li><li><p>再从数组的左边找到一个比枢轴元素大的元素，将从上面取元素的位置赋值为该值；</p></li><li><p>依次进行，直到左右相遇，把枢轴元素赋值到相遇位置。</p><p>示意图如下：</p></li></ul><p><img src="https://user-gold-cdn.xitu.io/2020/4/13/17171276e5f8bb49?imageslim" alt="第一轮排序动态过程"></p><h3 id="2-基本案例-4"><a href="#2-基本案例-4" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><p>基本案例中也运用了分而治之的方法，当操作步骤与上面步骤相异但是效果相同</p><ul><li>选择最后一个元素作为枢纽</li><li>从数组左端开始遍历一个数组，先设最左端元素为待交换元素。当遇到比枢纽值小的元素，就将其与待交换元素值相交换，并把下个元素设为待交换元素</li><li>完成遍历后，最后交换末尾元素与待交换元素，并返回待交换元素的索引</li><li>依据返回的索引将数组分成了两组：左边比枢纽元素小，右边比枢纽元素大</li><li>最后再递归分开处理左边数组和右边数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>*, <span class="keyword">int</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组大小\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arr[n];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;填入数组数据\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line"></span><br><span class="line">    quickSort(arr,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;快速排序后的数组\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &lt; end)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pIndex = partition(arr, start, end);</span><br><span class="line">        quickSort(arr, start, pIndex<span class="number">-1</span>);</span><br><span class="line">        quickSort(arr, pIndex+<span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pIndex = start;</span><br><span class="line">    <span class="keyword">int</span> pivot = arr[end];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = start; i &lt; end; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; pivot)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(&amp;arr[i], &amp;arr[pIndex]);</span><br><span class="line">            pIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(&amp;arr[end], &amp;arr[pIndex]);</span><br><span class="line">    <span class="keyword">return</span> pIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904904.png&quot; alt=&quot;image-20210210110218935&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="C语言" scheme="https://autovy.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="https://autovy.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="算法" scheme="https://autovy.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java|面向对象学习</title>
    <link href="https://autovy.github.io/2021/01/31/Java/Java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://autovy.github.io/2021/01/31/Java/Java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-01-31T06:30:00.000Z</published>
    <updated>2021-09-07T03:16:04.582Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040939004.png" alt="image-20210904093908758"></p><span id="more"></span><h4 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h4><h5 id="1-class和instance"><a href="#1-class和instance" class="headerlink" title="1.class和instance"></a>1.class和instance</h5><p>class即类，instance即实例。</p><p>class是一种对象模版，它定义了如何创建实例，因此，class本身就是一种数据类型；</p><p>而instance是对象实例，instance是根据class创建的实例，可以创建多个instance，每个instance类型相同，但各自属性可能不相同。</p><h5 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个city类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建类的字段即属性</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> lattitude;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> longitude;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">oop1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建实例frist</span></span><br><span class="line">        City frist = <span class="keyword">new</span> City();</span><br><span class="line">        <span class="comment">// 对实例的属性赋值</span></span><br><span class="line">        frist.name = <span class="string">&quot;shanghai&quot;</span>;</span><br><span class="line">        frist.lattitude = <span class="number">11</span>;</span><br><span class="line">        frist.longitude = <span class="number">111</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问实例属性并打印</span></span><br><span class="line">        System.out.println(frist.name);</span><br><span class="line">        System.out.println(frist.lattitude);</span><br><span class="line">        System.out.println(frist.longitude);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-实例讲解"><a href="#3-实例讲解" class="headerlink" title="3. 实例讲解"></a>3. 实例讲解</h5><ul><li>City类中包含了3个字段（field，有些语言叫做属性），通过class我们实现了数据的封装</li><li>public可以用来修饰方法和字段，表示其可以被外部访问</li><li>创建实例用new，用Class名作为实例的数据类型</li><li>访问实例属性时可以用<code>变量.字段</code>的形式，但是如果用private修饰了该属性则会报错</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="1-方法的引入"><a href="#1-方法的引入" class="headerlink" title="1.方法的引入"></a>1.方法的引入</h5><p>上一级中，我们直接把属性用<code>public</code>修饰，把属性暴露给外部可能会破坏封装性。所以我们往往采用<code>private</code>修饰属性，然后通过<strong>方法</strong>来读取属性赋值</p><h5 id="2-参数绑定"><a href="#2-参数绑定" class="headerlink" title="2.参数绑定"></a>2.参数绑定</h5><p>基本类型参数的传递，是调用方值的复制。双方各自的后续修改，互不影响</p><h5 id="3-实例"><a href="#3-实例" class="headerlink" title="3.实例"></a>3.实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">opp2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person Jhon = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">// 调用实例的方法</span></span><br><span class="line">        Jhon.setBirth(<span class="number">2000</span>);</span><br><span class="line">        System.out.println(Jhon.getage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义私有属性，外部不可调用</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> birth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this永远指向当前实例，从而达到赋值的目的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(<span class="keyword">int</span> birth)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 调用类内部私有的方法</span></span><br><span class="line">        <span class="keyword">return</span> calcAge(<span class="number">2020</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法，仅允许类内部调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calcAge</span><span class="params">(<span class="keyword">int</span> currentYear)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentYear - <span class="keyword">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-实例讲解"><a href="#4-实例讲解" class="headerlink" title="4.实例讲解"></a>4.实例讲解</h5><ul><li><code>public int getage()</code>该语句中，<code>public</code>用于修饰方法是否供外部调用，<code>int</code>则是该方法的返回数据类型</li><li>通过<code>this.field</code>就可以访问当前实例的字段，如果命名没有冲突实际上可以省略<code>this</code></li><li><code>this.birth = birth</code>前一个<code>birth</code>指向实例的一个属性，后一个<code>birth</code>则是外部传入的参数，因为命名重复，所以要用this修饰</li></ul><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h5 id="1-构造方法应用"><a href="#1-构造方法应用" class="headerlink" title="1.构造方法应用"></a>1.构造方法应用</h5><p>创建对象实例时，我们可以使用构造方法让内部字段初始化，其相当于类内部一个和类同名的特殊的方法。</p><h5 id="2-默认构造方法"><a href="#2-默认构造方法" class="headerlink" title="2.默认构造方法"></a>2.默认构造方法</h5><p>如果一个类没有定义构造方法，编译器会为我们生成一个默认的构造方法，因而我们可以在<code>new Person()</code>调用</p><p>如果我们自定义了一个构造方法，那么默认的构造方法将不会被创建</p><h5 id="3-实例-1"><a href="#3-实例-1" class="headerlink" title="3.实例"></a>3.实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">opp3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用构造方法</span></span><br><span class="line">        Person2 ming = <span class="keyword">new</span> Person2(<span class="string">&quot;小明&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        System.out.println(ming.getAge());</span><br><span class="line">        System.out.println(ming.getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person2</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><h5 id="1-方法重载介绍"><a href="#1-方法重载介绍" class="headerlink" title="1.方法重载介绍"></a>1.方法重载介绍</h5><p>在一个类中，如果存在一系列的方法功能方法名一样，但是参数不同。这种方法名相同，但各自的参数不同，称为方法重载（Overload）</p><p>方法重载参数不同，但是返回值类型通常相同</p><h5 id="2-实例-1"><a href="#2-实例-1" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">opp4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person4 ming = <span class="keyword">new</span> Person4();</span><br><span class="line">        ming.setName(<span class="string">&quot;xiao&quot;</span>, <span class="string">&quot;ming&quot;</span>);</span><br><span class="line">        System.out.println(ming.getname());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person4</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getname</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setname</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String fname, String lname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = fname + lname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="1-继承的应用"><a href="#1-继承的应用" class="headerlink" title="1.继承的应用"></a>1.继承的应用</h5><p>通过继承子类可以获得父类的所有功能，还可以在父类基础上编写额外的功能。</p><p>类自动获得了父类的所有字段，严禁定义与父类重名的字段</p><p>父类又可以称为超类，基类</p><p>子类又可以称为扩展类</p><h5 id="2-继承树"><a href="#2-继承树" class="headerlink" title="2.继承树"></a>2.继承树</h5><p>除了object外，任何类都会继承于某个类，一个子类只能有一个父类，一个父类允许存在多个子类</p><h5 id="3-protected与private"><a href="#3-protected与private" class="headerlink" title="3.protected与private"></a>3.protected与private</h5><p>如果父类中的属性或方法是<code>private</code>修饰，子类同样也是无法访问到的，这时我们可以使用protected修饰，可以把属性和方法的权限控制在继承树内部</p><h5 id="4-子类的构造方法"><a href="#4-子类的构造方法" class="headerlink" title="4.子类的构造方法"></a>4.子类的构造方法</h5><p>子类是无法继承父类的任何构造方法的，编译器会自动为我们添加<code>super()</code>来调用父类的构造方法，故若是父类存在带参数的构造方法，要手动在子类中调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="number">12</span>, <span class="number">89</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的构造方法Person(String, int)</span></span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="7-向上转型与向下转型"><a href="#7-向上转型与向下转型" class="headerlink" title="7.向上转型与向下转型"></a>7.向上转型与向下转型</h5><p>（1）向上转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果一个引用变量的类型是Student，那么它可以指向一个Student类型的实例</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">// 一个引用类型为Person的变量同样可以指向Student类型的实例</span></span><br><span class="line">Person p = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure><p>这种把一个子类类型安全地变为父类类型的赋值，被称为向上转型（upcasting）</p><p>注意到继承树是<code>Student &gt; Person &gt; Object</code>，所以，可以把<code>Student</code>类型转型为<code>Person</code>，或者更高层次的<code>Object</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student s &#x3D; new Student();</span><br><span class="line">Person p &#x3D; s; </span><br><span class="line">Object o1 &#x3D; p;</span><br><span class="line">Object o2 &#x3D; s;</span><br></pre></td></tr></table></figure><p>（2）向下转型</p><p>如果把一个父类类型强制转型为子类类型，就是向下转型（downcasting）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Student();</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 向下转型成功，因为p1虽然变量类型是Person，实际内容是子类，故能转型成功</span></span><br><span class="line">Student s1 = (Student) p1; </span><br><span class="line"><span class="comment">// 向下转型失败，实际内容是父类，不能由父类转向子类</span></span><br><span class="line">Student s2 = (Student) p2; </span><br></pre></td></tr></table></figure><h5 id="6-实例"><a href="#6-实例" class="headerlink" title="6.实例"></a>6.实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;小红&quot;</span>, <span class="number">20</span>, <span class="number">99</span>);</span><br><span class="line">        <span class="comment">// 定义PrimaryStudent，从Student继承，新增grade字段:</span></span><br><span class="line">        Student ps = <span class="keyword">new</span> PrimaryStudent(<span class="string">&quot;小军&quot;</span>, <span class="number">9</span>, <span class="number">100</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(ps.getScore());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> score; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimaryStudent</span> <span class="keyword">extends</span> <span class="title">Student</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> grade;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">PrimaryStudent</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score, <span class="keyword">int</span> grade)</span></span>&#123;</span><br><span class="line">       <span class="comment">// 调用Student的构造函数 </span></span><br><span class="line">       <span class="keyword">super</span>(name, age, score);</span><br><span class="line">       <span class="keyword">this</span>.grade = grade;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><h5 id="1-覆写"><a href="#1-覆写" class="headerlink" title="1.覆写"></a>1.覆写</h5><p>子类中不能存在与父类重名的属性，但子类可以覆写父类的方法，覆写方法时方法名和返回类型要相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 加上@Override 可以让编译器帮助检查是否正确覆写</span></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String s)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-多态"><a href="#2-多态" class="headerlink" title="2.多态"></a>2.多态</h5><p>Java的实例方法调用是基于运行时的实际类型的动态调用（<code>new Student()</code>），而非变量的声明类型（<code>Person</code>）</p><p>多态是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法</p><p>多态具有一个强大的功能——允许添加更多类型的子类实现功能扩展，却不需要修改基于父类的代码</p><h5 id="3-实例-2"><a href="#3-实例-2" class="headerlink" title="3.实例"></a>3.实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数组存储两部分的税收</span></span><br><span class="line">        Income[] incomes = <span class="keyword">new</span> Income[] &#123;</span><br><span class="line">            <span class="keyword">new</span> Income(<span class="number">3000</span>),</span><br><span class="line">            <span class="keyword">new</span> Salary(<span class="number">7500</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(totalTax(incomes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">totalTax</span><span class="params">(Income... incomes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 此处的循环中income的实际指向可以动态改变（Income/Salary）</span></span><br><span class="line">        <span class="comment">// getTax由于子类的多态实际上调用的方法不同</span></span><br><span class="line">        <span class="keyword">for</span> (Income income: incomes) &#123;</span><br><span class="line">            total = total + income.getTax();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> income;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Income</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.income = income;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> income * <span class="number">0.1</span>; <span class="comment">// 税率10%</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Salary</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(income);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写父类的得税方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (income &lt;= <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (income - <span class="number">5000</span>) * <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-多态补充"><a href="#4-多态补充" class="headerlink" title="4.多态补充"></a>4.多态补充</h5><p>（1）调用父类中被覆写的方法用<code>super</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student extends Person &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的hello()方法:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hello() + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）final修饰可以防止方法被子类覆写如：<code>public final String hello()</code></p><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><h5 id="1-面向抽象编程"><a href="#1-面向抽象编程" class="headerlink" title="1.面向抽象编程"></a>1.面向抽象编程</h5><p>抽象类和其中的抽象方法本身是无法执行的，其强制了子类必须实现其定义的抽象方法，即相当于定义了一个规范</p><p>这种引用高层类型，避免引用子类型的方式，称为面向抽象编程</p><p>有以下优点：</p><ul><li>上层代码只定义规范（例如：<code>abstract class Person</code>）；</li><li>不需要子类就可以实现业务逻辑（正常编译）；</li><li>具体的业务逻辑由不同的子类实现，调用者并不关心</li></ul><h5 id="2-实例-2"><a href="#2-实例-2" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        p.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student.run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><h5 id="1-接口介绍"><a href="#1-接口介绍" class="headerlink" title="1.接口介绍"></a>1.接口介绍</h5><p>接口（interface）中没有字段，接口中定义的所有方法默认为<code>public abstract</code></p><h5 id="2-接口实现"><a href="#2-接口实现" class="headerlink" title="2.接口实现"></a>2.接口实现</h5><p>当用一个具体的class实现一个interface时，需要用到implements关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类实现接口，一个类只能继承一个类，但是可以实现多个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">&quot; run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-接口继承"><a href="#3-接口继承" class="headerlink" title="3.接口继承"></a>3.接口继承</h5><p>接口也可以通过继承扩展</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h4><h5 id="1-静态字段"><a href="#1-静态字段" class="headerlink" title="1.静态字段"></a>1.静态字段</h5><p>class中定义的字段我们称为实例字段，其一般有着独立性，各个实例间互不影响</p><p>但是如果我们用<code>static</code>一个静态修饰一个字段，那么所有的实例都会共享这个字段的空间</p><p>对于静态字段，我们无论修改哪个实例，所有实例的静态字段都会改动</p><p>我们往往采用<code>类名.静态字段</code>访问静态对象，如:<code>Person.number = 99;</code></p><h5 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2.静态方法"></a>2.静态方法</h5><p>静态方法可以通过类名直接调用，不需要一个实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person.setNumber(<span class="number">99</span>);</span><br><span class="line">        System.out.println(Person.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个静态方法，因为静态方法不存在实例，所以无法访问this变量（不能用this）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        number = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-接口的静态字段"><a href="#3-接口的静态字段" class="headerlink" title="3.接口的静态字段"></a>3.接口的静态字段</h5><p>因为接口是一个纯抽象类，所以它不能定义实例字段，但是可以有静态字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 编译器会自动加上public statc final:</span></span><br><span class="line">    <span class="keyword">int</span> MALE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> FEMALE = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><p>位于同一个包的类，可以访问包作用域的字段和方法。不用<code>public</code>、<code>protected</code>、<code>private</code>修饰的字段和方法就是包作用域</p><p>可以用import语句导入其他包的class</p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>可参考：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260466215676512">https://www.liaoxuefeng.com/wiki/1252599548343744/1260466215676512</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040939004.png&quot; alt=&quot;image-20210904093908758&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://autovy.github.io/categories/Java/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Java" scheme="https://autovy.github.io/tags/Java/"/>
    
      <category term="后端" scheme="https://autovy.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="面向对象" scheme="https://autovy.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>开发工具|matlab查询文档</title>
    <link href="https://autovy.github.io/2020/12/20/Tool/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-matlab%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3/"/>
    <id>https://autovy.github.io/2020/12/20/Tool/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-matlab%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3/</id>
    <published>2020-12-20T06:30:00.000Z</published>
    <updated>2021-09-04T02:00:04.708Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040959763.png" alt="image-20210904095937186"></p><span id="more"></span><h4 id="matlab算数运算"><a href="#matlab算数运算" class="headerlink" title="matlab算数运算"></a>matlab算数运算</h4><p>快速查询：<a href="https://ww2.mathworks.cn/help/matlab/arithmetic.html?searchHighlight=算术&s_tid=srchtitle">算术运算 - MATLAB &amp; Simulink - MathWorks 中国</a></p><h5 id="1-基本运算"><a href="#1-基本运算" class="headerlink" title="1.基本运算"></a>1.基本运算</h5><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td>.*</td><td>乘法</td></tr><tr><td>*</td><td>矩阵乘法</td></tr><tr><td>./</td><td>数组右除</td></tr><tr><td>.\</td><td>数组左除</td></tr><tr><td>x = B/A</td><td>对线性方程组 xA = B 求解 x（矩阵适用）</td></tr><tr><td>x=A\B</td><td>对线性方程组 Ax = B 求解 x（矩阵适用）</td></tr><tr><td>b = mod(<a href="https://ww2.mathworks.cn/help/matlab/ref/mod.html#btvg3sl-1-a"><code>a</code></a>,<a href="https://ww2.mathworks.cn/help/matlab/ref/mod.html#btvg3sl-1-m"><code>m</code></a>)</td><td>返回 <code>a</code> 除以 <code>m</code> 后的余数，其中 <code>a</code> 是被除数，<code>m</code> 是除数</td></tr></tbody></table><h5 id="2-基本数数学函数"><a href="#2-基本数数学函数" class="headerlink" title="2.基本数数学函数"></a>2.基本数数学函数</h5><p>快速查询：<a href="https://blog.csdn.net/cc198877/article/details/8106016">Matlab常用数学函数和数学运算符_cc198877的专栏-CSDN博客_matlab数学运算符</a></p><h4 id="matlab数组与矩阵运算"><a href="#matlab数组与矩阵运算" class="headerlink" title="matlab数组与矩阵运算"></a>matlab数组与矩阵运算</h4><p>矩阵运算遵循线性代数的法则。与之不同，数组运算则是执行逐元素运算并支持多维数组</p><p>快速查询：<a href="https://ww2.mathworks.cn/help/matlab/matlab_prog/array-vs-matrix-operations.html?searchHighlight=矩阵运算&s_tid=srchtitle">数组与矩阵运算 - MATLAB &amp; Simulink - MathWorks 中国</a></p><h5 id="1-矩阵加法"><a href="#1-矩阵加法" class="headerlink" title="1.矩阵加法"></a>1.矩阵加法</h5><p>由于矩阵运算和数组运算在加法和减法的运算上相同，因此没有必要使用字符组合 <code>.+</code> 和 <code>.-</code>。</p><h5 id="2-矩阵数乘"><a href="#2-矩阵数乘" class="headerlink" title="2.矩阵数乘"></a>2.矩阵数乘</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040958630.png" alt="image-20201201103241881"></p><h5 id="3-矩阵乘法"><a href="#3-矩阵乘法" class="headerlink" title="3.矩阵乘法"></a>3.矩阵乘法</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040958737.png" alt="image-20201201103558855"></p><h5 id="4-数组运算"><a href="#4-数组运算" class="headerlink" title="4.数组运算"></a>4.数组运算</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040958930.png" alt="image-20201201103711838"></p><h5 id="5-矩阵运算"><a href="#5-矩阵运算" class="headerlink" title="5.矩阵运算"></a>5.矩阵运算</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040958852.png" alt="image-20201201103757776"></p><h4 id="矩阵简单操作"><a href="#矩阵简单操作" class="headerlink" title="矩阵简单操作"></a>矩阵简单操作</h4><p>快速查询：<a href="https://ww2.mathworks.cn/help/matlab/matrices-and-arrays.html?searchHighlight=矩阵&s_tid=srchtitle">矩阵和数组 - MATLAB &amp; Simulink - MathWorks 中国</a></p><p>详细总结：<a href="https://www.cnblogs.com/ran_ran/archive/2010/12/11/1903070.html">matlab矩阵的表示和简单操作 - Hello_Word - 博客园 (cnblogs.com)</a></p><h5 id="1-矩阵创建"><a href="#1-矩阵创建" class="headerlink" title="1.矩阵创建"></a>1.矩阵创建</h5><p>（1）直接输入法</p><p>（2）利用MATLAB函数创建矩阵</p><p>​          常用的如下</p><ul><li>ones()函数：产生全为1的矩阵，ones(n)：产生n<em>n维的全1矩阵，ones(m,n)：产生m</em>n维的全1矩阵；</li><li>zeros()函数：产生全为0的矩阵；</li><li>rand()函数：产生在（0，1）区间均匀分布的随机阵；</li><li>eye()函数：产生单位阵；</li><li>randn()函数：产生均值为0，方差为1的标准正态分布随机矩阵。</li></ul><p>（3）利用运算确定范围</p><p>如：产生一个均匀分布在（-5，5）之间的随即矩阵（10×2）</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span> = <span class="title">my</span><span class="params">()</span></span></span><br><span class="line">    A = <span class="number">-5</span> + <span class="number">10</span> * <span class="built_in">rand</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">    A = roundn(A,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="2-矩阵索引"><a href="#2-矩阵索引" class="headerlink" title="2.矩阵索引"></a>2.矩阵索引</h5><p>（1）索引矩阵中一个元素</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 表示索引A矩阵第i行、第j列的元素</span><br><span class="line">A(<span class="built_in">i</span>,<span class="built_in">j</span>)</span><br></pre></td></tr></table></figure><p>（2）遍历一个矩阵中所有元素</p><p>一般用例：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="built_in">randn</span>(<span class="number">3</span>,<span class="number">4</span>)     <span class="comment">% 创建3行4列随机矩阵</span></span><br><span class="line">[r,c] = <span class="built_in">size</span>(A)    <span class="comment">% 读取行r、列c</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:r        <span class="comment">% 建立for循环嵌套</span></span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>:c</span><br><span class="line">        A(<span class="built_in">i</span>,k)     <span class="comment">% 读取矩阵每个位置数据，先行后列</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>find方法（查找非零元素的索引和值）：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># k = find(X) 返回一个包含数组 X 中每个非零元素的线性索引的向量，用length可以统计个数</span><br><span class="line">X = [<span class="number">18</span> <span class="number">3</span> <span class="number">1</span> <span class="number">11</span>; <span class="number">8</span> <span class="number">10</span> <span class="number">11</span> <span class="number">3</span>; <span class="number">9</span> <span class="number">14</span> <span class="number">6</span> <span class="number">1</span>; <span class="number">4</span> <span class="number">3</span> <span class="number">15</span> <span class="number">21</span>]</span><br><span class="line"># 通过find查找矩阵中的所有符合条件的元素，并把其索引组成数组</span><br><span class="line">[row,col] = <span class="built_in">find</span>(X&gt;<span class="number">0</span> &amp; X&lt;<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>实用案例：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 需要用到两个循环来遍历元素</span><br><span class="line">a = [</span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">-2</span>, <span class="number">8</span>;</span><br><span class="line"><span class="number">3</span>, <span class="number">-4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">-8</span>;</span><br><span class="line"><span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">-1</span>;</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">55</span>, <span class="number">1</span>, <span class="number">-2</span>;</span><br><span class="line">];</span><br><span class="line"># 创建一个空矩阵存储符合条件的元素</span><br><span class="line">b  = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="number">5</span></span><br><span class="line">        <span class="keyword">if</span> a(<span class="built_in">i</span>,<span class="built_in">j</span>) &gt; <span class="number">1</span></span><br><span class="line">        # 矩阵添加元素（子矩阵）的方法</span><br><span class="line">            b = [b a(<span class="built_in">i</span>,<span class="built_in">j</span>)];</span><br><span class="line">        <span class="keyword">end</span>    </span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="built_in">disp</span>(b);</span><br></pre></td></tr></table></figure><h5 id="3-矩阵拆分和组合"><a href="#3-矩阵拆分和组合" class="headerlink" title="3.矩阵拆分和组合"></a>3.矩阵拆分和组合</h5><p>（1）组合（串联）</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将两个行向量串联起来，形成一个更长的行向量</span><br><span class="line">A = <span class="built_in">ones</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">B = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">C = [A B]</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将 A 和 B 排列为一个矩阵的两行</span><br><span class="line">D = [A;B]</span><br></pre></td></tr></table></figure><p>（2）拆分（取出一个子矩阵）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A(:,j) # 表示取A矩阵的第j列全部元素</span><br><span class="line">A(i,:) # 表示A矩阵第i行的全部元素</span><br><span class="line">A(i:i+m,:) # 表示取A矩阵第i~i+m行的全部元素</span><br><span class="line">A(i:i+m,k:k+m) # 表示取A矩阵第i~i+m行内，并在第k~k+m列中的所有元素</span><br></pre></td></tr></table></figure><h5 id="4-矩阵的相关计算"><a href="#4-矩阵的相关计算" class="headerlink" title="4.矩阵的相关计算"></a>4.矩阵的相关计算</h5><p>v为矩阵的特征值，d为特征向量</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0.5</span>; <span class="number">1</span>,<span class="number">1</span>,<span class="number">0.25</span>; <span class="number">0.5</span>,<span class="number">0.25</span>,<span class="number">2</span>;];</span><br><span class="line">[v,d] = eig(a);</span><br><span class="line"><span class="built_in">disp</span>(v);</span><br><span class="line"><span class="built_in">disp</span>(d);</span><br></pre></td></tr></table></figure><h4 id="MATLAB的图形绘制"><a href="#MATLAB的图形绘制" class="headerlink" title="MATLAB的图形绘制"></a>MATLAB的图形绘制</h4><p>快速查询：<a href="https://ww2.mathworks.cn/help/matlab/learn_matlab/basic-plotting-functions.html#responsive_offcanvas">https://ww2.mathworks.cn/help/matlab/learn_matlab/basic-plotting-functions.html#responsive_offcanvas</a></p><h5 id="一-绘制一般曲线（二维线图）"><a href="#一-绘制一般曲线（二维线图）" class="headerlink" title="一.绘制一般曲线（二维线图）"></a>一.绘制一般曲线（二维线图）</h5><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># x定周期，通过加减表示无意义点</span><br><span class="line">x = [<span class="number">0</span>:<span class="number">0.01</span>:<span class="built_in">pi</span>/<span class="number">2</span><span class="number">-0.01</span>, <span class="built_in">pi</span>/<span class="number">2</span>+<span class="number">0.01</span>:<span class="number">0.01</span>:(<span class="number">3</span>*<span class="built_in">pi</span>/<span class="number">2</span>)<span class="number">-0.01</span>, (<span class="number">3</span>*<span class="built_in">pi</span>/<span class="number">2</span>)+<span class="number">0.01</span>:<span class="number">0.01</span>:<span class="number">2</span>*<span class="built_in">pi</span>];</span><br><span class="line"># 定义y的函数（此处分别为正割和余割）</span><br><span class="line">y1 = <span class="built_in">sec</span>(x);</span><br><span class="line">y2 = <span class="built_in">csc</span>(x);</span><br><span class="line"></span><br><span class="line"># subplot 命令用于在同一窗口中显示多个绘图，此处表示的意思是将窗口划分为2*1（即上下两幅图），并选择第一处</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"># 绘制图形，r-表示绘制红色点划线</span><br><span class="line"><span class="built_in">plot</span>(x,y1,<span class="string">&#x27;r-.&#x27;</span>)</span><br><span class="line"># 注意要绘制完图形后，才能加上标注</span><br><span class="line">xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;正割公式&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># 选定第二处绘图</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(x,y2,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;余割公式&#x27;</span>)</span><br><span class="line"># axis设置坐标轴范围，x为0-3，y为0-12</span><br><span class="line">axis([<span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">12</span>]);</span><br></pre></td></tr></table></figure><h5 id="二-绘制极坐标曲线"><a href="#二-绘制极坐标曲线" class="headerlink" title="二.绘制极坐标曲线"></a>二.绘制极坐标曲线</h5><p>快速查询：<a href="https://ww2.mathworks.cn/help/matlab/ref/polarplot.html#d122e940353">https://ww2.mathworks.cn/help/matlab/ref/polarplot.html#d122e940353</a></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># theta参数为极坐标曲线的角度值，此处表示从0-2pi</span><br><span class="line">theta = <span class="number">0</span>:<span class="number">0.01</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line"># input输入数据</span><br><span class="line">a = input(<span class="string">&#x27;a=&#x27;</span>);</span><br><span class="line">b = input(<span class="string">&#x27;b=&#x27;</span>);</span><br><span class="line">n = input(<span class="string">&#x27;n=&#x27;</span>);</span><br><span class="line"># rho参数为半径值，即极坐标曲线的ρ</span><br><span class="line">rho = a*<span class="built_in">sin</span>(b+n*theta);</span><br><span class="line"># 生成曲线图，r设定曲线为红色</span><br><span class="line">polarplot(theta,rho,<span class="string">&#x27;r&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="三-绘制曲面图"><a href="#三-绘制曲面图" class="headerlink" title="三.绘制曲面图"></a>三.绘制曲面图</h5><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># meshgrid(x,y)基于向量 x 和 y 中包含的坐标返回二维网格坐标</span><br><span class="line">[x, y] = <span class="built_in">meshgrid</span>(<span class="number">0</span>: <span class="number">0.1</span>:<span class="number">100</span>);</span><br><span class="line"># 注意在绘图对象函数中，运算一般用点乘，点幂</span><br><span class="line">z = x.^<span class="number">2</span> + y.^<span class="number">2</span> + <span class="built_in">sin</span>(x.*y);</span><br><span class="line"># 绘制等高线</span><br><span class="line">contour(z,<span class="number">2</span>)</span><br><span class="line"># 创建一个三维曲面图</span><br><span class="line">surf(x, y, z)</span><br><span class="line"></span><br><span class="line">[x,y]=<span class="built_in">meshgrid</span>(<span class="number">-4</span>:<span class="number">0.1</span>:<span class="number">4</span>);</span><br><span class="line">z = x.^<span class="number">2</span> + y.^<span class="number">2</span>;</span><br><span class="line"># 创建一个网格图，该网格图为三维曲面</span><br><span class="line">mesh(x, y, z);</span><br><span class="line"># 设置当前颜色图（有一些预设的方案提供）</span><br><span class="line">colormap(hot)</span><br></pre></td></tr></table></figure><h4 id="matlab程序设计"><a href="#matlab程序设计" class="headerlink" title="matlab程序设计"></a>matlab程序设计</h4><h5 id="1-if-else"><a href="#1-if-else" class="headerlink" title="1.if-else"></a>1.if-else</h5><p>编写求解方程根的函数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">a = input(<span class="string">&#x27;a值：&#x27;</span>);</span><br><span class="line">b = input(<span class="string">&#x27;b值：&#x27;</span>);</span><br><span class="line">c = input(<span class="string">&#x27;c值：&#x27;</span>);</span><br><span class="line">t = b^<span class="number">2</span> - <span class="number">4</span>*a*c;</span><br><span class="line"></span><br><span class="line"># 通过条件判断分流</span><br><span class="line"># 每个if要用一个end结束</span><br><span class="line"><span class="keyword">if</span> a==<span class="number">0</span> &amp;&amp; b==<span class="number">0</span></span><br><span class="line">       <span class="built_in">disp</span>(<span class="string">&#x27;为恒不等式&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elseif</span> a==<span class="number">0</span></span><br><span class="line">       x = -c/b;</span><br><span class="line">       <span class="built_in">disp</span>(x)    </span><br><span class="line"><span class="keyword">else</span>        </span><br><span class="line">    <span class="keyword">if</span> t&lt;<span class="number">0</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;该方程无解&#x27;</span>)</span><br><span class="line">    <span class="keyword">elseif</span> t==<span class="number">0</span></span><br><span class="line">        x = -b/<span class="number">2</span>*a;</span><br><span class="line">        fprintf(<span class="string">&#x27;x1=x2=%d&#x27;</span>,x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        x1 = (-b+<span class="built_in">sqrt</span>(t))/<span class="number">2</span>*a;</span><br><span class="line">        x2 = (-b-<span class="built_in">sqrt</span>(t))/<span class="number">2</span>*a;</span><br><span class="line">        fprintf(<span class="string">&#x27;x1=%d\nx2=%d&#x27;</span>,x1,x2);</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line">       </span><br><span class="line"><span class="keyword">end</span> </span><br></pre></td></tr></table></figure><h5 id="2-switch"><a href="#2-switch" class="headerlink" title="2.switch"></a>2.switch</h5><p>输入一个百分制成绩，要求输出成绩等级</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 取整分级</span></span><br><span class="line">sorce = input(<span class="string">&#x27;请输入你的成绩：&#x27;</span>);</span><br><span class="line">level = <span class="built_in">floor</span>(sorce/<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sorce&gt;<span class="number">100</span> || sorce &lt;<span class="number">0</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span>    </span><br><span class="line"></span><br><span class="line"># matlab的switch不用break结束</span><br><span class="line"><span class="keyword">switch</span> level</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;A+&#x27;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;B&#x27;</span>)    </span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;C&#x27;</span>) </span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">    <span class="keyword">otherwise</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span>        </span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a>3.for循环</h5><p>利用for循环语句编写计算n!的函数程序</p><p>累加法时定义初始数为0</p><p>累积法时定义初始数为1</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[res]</span> = <span class="title">work43</span><span class="params">(n)</span></span></span><br><span class="line">    res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> n&lt;<span class="number">0</span></span><br><span class="line">        res=<span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">    <span class="keyword">elseif</span> n == <span class="number">0</span></span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line">        res = res*<span class="built_in">i</span>; </span><br><span class="line">        <span class="keyword">end</span>   </span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="4-构建Fibonacci数组"><a href="#4-构建Fibonacci数组" class="headerlink" title="4.构建Fibonacci数组"></a>4.构建Fibonacci数组</h5><p>matlab的数组可以自动拓宽</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a(<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">a(<span class="number">2</span>) = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> a(k) &lt; <span class="number">10000</span></span><br><span class="line">    a(k+<span class="number">2</span>) = a(k) + a(k+<span class="number">1</span>);</span><br><span class="line">    k = k + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(a(k))</span><br></pre></td></tr></table></figure><h4 id="SIMULINK仿真"><a href="#SIMULINK仿真" class="headerlink" title="SIMULINK仿真"></a>SIMULINK仿真</h4><p>快速入门：<a href="https://ww2.mathworks.cn/help/simulink/getting-started-with-simulink.html">https://ww2.mathworks.cn/help/simulink/getting-started-with-simulink.html</a></p><p>快速查询常用模块：<a href="https://www.cnblogs.com/dingdangsunny/p/12235689.html#_label1_2">https://www.cnblogs.com/dingdangsunny/p/12235689.html#_label1_2</a></p><p>一.simulink表示微分方程</p><p><img src="C:/Users/linghao/AppData/Roaming/Typora/typora-user-images/image-20201214215652329.png" alt="image-20201214215652329"></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040958323.png" alt="image-20201214221002667"></p><ul><li>Step：跃迁信号</li><li>Gain：支持标量、向量或矩阵形式的增益。（可以看作是高级的乘法）</li><li>Add：加法模块（sum模块也很常用）</li><li>Integrator：积分模块</li><li>Scope：示波器</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040959763.png&quot; alt=&quot;image-20210904095937186&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发工具" scheme="https://autovy.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="开发工具" scheme="https://autovy.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="matlab" scheme="https://autovy.github.io/tags/matlab/"/>
    
  </entry>
  
</feed>
