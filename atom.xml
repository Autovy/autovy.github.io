<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Autovy&#39;s blog</title>
  
  <subtitle>Just For Interest</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://autovy.github.io/"/>
  <updated>2021-09-04T01:25:57.195Z</updated>
  <id>https://autovy.github.io/</id>
  
  <author>
    <name>Autovy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开发工具|Docker搭建LNMP</title>
    <link href="https://autovy.github.io/2021/06/06/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Docker%E6%90%AD%E5%BB%BALNMP/"/>
    <id>https://autovy.github.io/2021/06/06/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Docker%E6%90%AD%E5%BB%BALNMP/</id>
    <published>2021-06-06T06:30:00.000Z</published>
    <updated>2021-09-04T01:25:57.195Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040845042.jpeg" alt="git"></p><h2 id="命令行搭建"><a href="#命令行搭建" class="headerlink" title="命令行搭建"></a>命令行搭建</h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><h4 id="1-mysql镜像拉取"><a href="#1-mysql镜像拉取" class="headerlink" title="1.mysql镜像拉取"></a>1.mysql镜像拉取</h4><p>从仓库中拉取对应的mysql镜像，注意如果不标注tag（版本号等），会默认使用lastest（最新版）这个版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docekr pull mysql:5.6</span><br></pre></td></tr></table></figure><h4 id="2-创建mysql容器"><a href="#2-创建mysql容器" class="headerlink" title="2.创建mysql容器"></a>2.创建mysql容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=xy123456 --name xy_mysql mysql:5.6</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-d 让容器在后台运行，如果没有这个条件，会在终端展示mysql加载过程，而且无法进行操作（在另一个终端查看，会发现mysql的容器正在运行中，关闭原来的终端，该容器并不会随之关闭）</li><li>-p 添加主机到容器的端口映射，3306是容器内mysql默认使用的端口号</li><li>-e 设置环境变量，这里是设置mysql的root用户的初始密码，这个必须设置，如果没有设置容器会被自动关停</li><li>–name 容器的名字，容器名必须唯一</li></ul><h4 id="3-进入mysql容器"><a href="#3-进入mysql容器" class="headerlink" title="3.进入mysql容器"></a>3.进入mysql容器</h4><p>容器启动后，我们可以进入运行中的容器查看mysql的相关文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -ti xy_mysql /bin/bash</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-t 在容器里生产一个伪终端</li><li>-i 对容器内的标准输入 (STDIN) 进行交互</li><li>exit命令是离开并关闭容器，但是由于容器还有任务所以不会关停</li></ul><h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><h4 id="1-PHP镜像拉取"><a href="#1-PHP镜像拉取" class="headerlink" title="1.PHP镜像拉取"></a>1.PHP镜像拉取</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull php:7.0-fpm</span><br></pre></td></tr></table></figure><h4 id="2-创建PHP容器"><a href="#2-创建PHP容器" class="headerlink" title="2.创建PHP容器"></a>2.创建PHP容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v /var/nginx/www/html:/var/www/html -p 9000:9000 --link xy_mysql:mysql --name xy_phpfpm php:fpm </span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-p 添加主机到容器的端口映射，设定php使用9000端口</li><li>-v 添加目录映射，即主机上的/var/nginx/www/html和容器中/var/www/html目录是同步的，主机上的路径如果不存在，也会自动生成</li><li>–link 与另外一个容器建立起联系，这样我们就可以在当前容器中去使用另一个容器里的服务</li></ul><h4 id="3-创建文件"><a href="#3-创建文件" class="headerlink" title="3.创建文件"></a>3.创建文件</h4><p>这时我们可以不进入容器内增加文件，而是可以在主机的挂载目录下添加文件</p><p>在/var/nginx/www/html目录下新建index.php文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim index.php</span><br></pre></td></tr></table></figure><p>写入内容作为测试</p><p>因为docker需要在最高权限下运行，所有在主机上创建的目录需要最高权限访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo() <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="安装nignx"><a href="#安装nignx" class="headerlink" title="安装nignx"></a>安装nignx</h3><h4 id="1-nginx镜像拉取"><a href="#1-nginx镜像拉取" class="headerlink" title="1.nginx镜像拉取"></a>1.nginx镜像拉取</h4><p>这里拉取的就是最新版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h4 id="2-创建nginx工具人容器"><a href="#2-创建nginx工具人容器" class="headerlink" title="2.创建nginx工具人容器"></a>2.创建nginx工具人容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 \</span><br><span class="line">--link xy_phpfpm:phpfpm --name xy_nginx nginx</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>创建一个无挂载的容器，方便下一步提取出配置文件（如果挂载了，会导致复制配置文件时，一直与容器同步）</p><h4 id="3-复制配置文件"><a href="#3-复制配置文件" class="headerlink" title="3.复制配置文件"></a>3.复制配置文件</h4><p>容器的挂载只限于目录，如果直接挂载文件，其仍作为目录被处理</p><p>要实现文件同步，我们必须要先从容器中复制出一份配置文件（如果是直接新建一个，挂载时主机上的空白文件会同步到容器中）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp xy_nginx:/etc/nginx/nginx.conf /var/nginx/nginx.conf</span><br><span class="line">docker cp xy_nginx:/etc/nginx/conf.d/default.conf /var/nginx/conf.d/</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>docker cp  原路径:转移路径</li><li>容器的路径用： <code>容器名:容器内文件路径</code>表示</li><li>cp时路径上的目录必须存在（而挂载时，主机会自动创建不存在的目录）</li></ul><h4 id="4-创建nginx挂载容器"><a href="#4-创建nginx挂载容器" class="headerlink" title="4.创建nginx挂载容器"></a>4.创建nginx挂载容器</h4><p>先把充当工具人的nginx容器删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f xy_nginx</span><br></pre></td></tr></table></figure><p>重新创建一个带挂载的nginx容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 \</span><br><span class="line">-v /var/nginx/nginx.conf:/ect/nginx/nginx.conf\</span><br><span class="line">-v /var/nginx/conf.d/default.conf:/ect/nginx/conf.d/default.conf\</span><br><span class="line">-v /var/nginx/www/html:/var/www/html\</span><br><span class="line">--link xy_phpfpm:phpfpm --name xy_nginx nginx</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-p 添加主机到容器的端口映射，nginx默认使用80端口，也是网页范围默认使用的端口</li><li>-v 挂载了三个文件到本地，其中<code>/var/nginx/nginx.conf</code>和<code>/var/nginx/conf.d/default.conf</code>在本地同步了nginx两个重要的配置文件，<code>/var/www/html</code>则同步了nginx网页展示文件</li><li>挂载时应该要保持最后一个文件相同</li></ul><h4 id="5-修改配置文件"><a href="#5-修改配置文件" class="headerlink" title="5.修改配置文件"></a>5.修改配置文件</h4><p>修改nginx的配置文件让其监听php，这里可以直接在主机修改配置文件</p><p>主机：<code>/var/nginx/conf.d/default.conf</code>    容器：<code>/ect/nginx/conf.d/default.conf</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root           /<span class="keyword">var</span>/www/html;</span><br><span class="line">    fastcgi_pass   <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9000</span>;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document</span>_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    <span class="keyword">include</span>        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内容解析：</p><ul><li>root为文件php根目录，所以修改为 <code>/var/www/html</code></li><li>fastcgi_pass 修改为<code>本地ip地址:php端口</code>，注意使用回环地址也是不允许的</li><li>fastcgi_index为默认访问的页面</li><li>fastcgi_param应该改为 $document_root$fastcgi_script_name才能准确找到位置</li></ul><h4 id="6-配置出错处理方法"><a href="#6-配置出错处理方法" class="headerlink" title="6.配置出错处理方法"></a>6.配置出错处理方法</h4><p>当配置文件出错时，容器将无法运行</p><ul><li>先查看日志，查找出错的地方</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs xy_nginx</span><br></pre></td></tr></table></figure><ul><li>由于容器没有启动，我们无法直接进入容器修改，所以需要用docker cp下载出问题的文件，然后再通过cp覆盖问题文件</li><li>如果该出错文件有挂载，在本地修改即可</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040845042.jpeg&quot; alt=&quot;git&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;命令行搭建&quot;&gt;&lt;a href=&quot;#命令行搭建&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="开发工具" scheme="https://autovy.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发工具" scheme="https://autovy.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="docker" scheme="https://autovy.github.io/tags/docker/"/>
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>开发工具|学点docker</title>
    <link href="https://autovy.github.io/2021/05/28/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Docker%E5%AD%A6%E4%B9%A0/"/>
    <id>https://autovy.github.io/2021/05/28/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Docker%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-28T06:30:00.000Z</published>
    <updated>2021-09-04T01:19:29.607Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040845042.jpeg" alt="git"></p><span id="more"></span><h3 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h3><h4 id="Docker应用"><a href="#Docker应用" class="headerlink" title="Docker应用"></a>Docker应用</h4><ul><li>部署环境复杂，非常费时费力</li><li>环境不能跨平台</li><li>docker可以把环境打包成镜像，直接运行即可</li><li>docker通过隔离机制，可以将服务器利用到极致</li></ul><h4 id="Docker的功能"><a href="#Docker的功能" class="headerlink" title="Docker的功能"></a>Docker的功能</h4><ul><li><p>虚拟机技术</p></li><li><p>容器化技术</p></li><li><p>DevOps（开发 + 运维）</p></li><li><p>应用更加快速的交付和部署</p></li><li><p>更便捷的升级和扩缩容</p></li><li><p>更加简单的系统运维</p></li><li><p>更加高效的计算资源利用</p></li></ul><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><h4 id="1-Docker基本组成"><a href="#1-Docker基本组成" class="headerlink" title="1.Docker基本组成"></a>1.Docker基本组成</h4><ul><li><p>仓库：仓库就是存放镜像的地方</p></li><li><p>镜像：docker镜像就像一个模板，通过镜像可以创建多个容器</p></li><li><p>容器：容器可以独立运行一个或者多组应用（启动，停止，删除）</p></li></ul><h4 id="2-run工作流程"><a href="#2-run工作流程" class="headerlink" title="2.run工作流程"></a>2.run工作流程</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846845.png" alt="在这里插入图片描述"></p><h4 id="3-Docker工作原理"><a href="#3-Docker工作原理" class="headerlink" title="3.Docker工作原理"></a>3.Docker工作原理</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846904.png" alt="Docker 工作原理"></p><h4 id="4-Docker与VM的区别"><a href="#4-Docker与VM的区别" class="headerlink" title="4.Docker与VM的区别"></a>4.Docker与VM的区别</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846873.jpeg" alt="containers-vs-virtual-machines.jpg"></p><ul><li>Docker的抽象层比虚拟机少</li><li>docker利用的是宿主机的内核，vm需要的是Guest OS（vm每次都要加载操作系统的内核）</li></ul><h3 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846335.jpeg" alt="img"></p><h4 id="1-帮助命令"><a href="#1-帮助命令" class="headerlink" title="1.帮助命令"></a>1.帮助命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker info</span><br><span class="line">docker --help</span><br></pre></td></tr></table></figure><h4 id="2-镜像命令"><a href="#2-镜像命令" class="headerlink" title="2.镜像命令"></a>2.镜像命令</h4><p>（1）docker images查看本地主机上的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br></pre></td></tr></table></figure><p>解析：</p><ul><li>REPOSITORY :镜像的仓库源</li><li>TAG：镜像的标签</li><li>IMAGE ID：镜像的id</li><li>CREATED：镜像的创建时间    </li><li>SIZE：镜像大小</li></ul><p>可选项：</p><ul><li>-a : 列出所有镜像</li><li>-q：只显示镜像id</li></ul><p>（2）docker search 搜索镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NAME  DESCRIPTION   STARS  OFFICIAL   AUTOMATED</span><br></pre></td></tr></table></figure><p>可选项，可以过滤搜索结果：</p><p>–filter=STARS=3000 ：搜索stars大于3000的镜像</p><p>（3）docker pull 拉取镜像:tag ，默认拉取最新版</p><p>（4）docker rmi 删除镜像名称/id   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除mysql镜像</span></span><br><span class="line">docker rmi -f mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 递归删除所有镜像</span></span><br><span class="line">docker -f $(docker images -aq)</span><br></pre></td></tr></table></figure><h4 id="3-容器命令"><a href="#3-容器命令" class="headerlink" title="3.容器命令"></a>3.容器命令</h4><p>有了镜像我们才能创建容器</p><p>（1）新建镜像并启动：dokcer run [可选参数] image</p><p>容器内相当于一个新的虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure><p>相关参数：</p><ul><li>–name = “Name” ：容器名字，用于区分容器</li><li>-d ：后台方式运行</li><li>-it : 使用交互方式运行，可进入容器查看内容（开启容器终端）</li><li>-p：指定容器端口</li></ul><p>（2）查看容器：docker ps</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps    #查看运行中的容器</span><br></pre></td></tr></table></figure><p>相关参数：</p><ul><li>-a  ：查看所有容器（包括已终止的容器）</li><li>-n = ? :显示最近创建的容器</li><li>-q ： 只显示容器的编号</li></ul><p>（3）退出容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit # 容器停止并退出</span><br><span class="line">ctrl + P + Q # 容器不停止退出(按P,Q这个设计多少有点反人类)</span><br></pre></td></tr></table></figure><p>（4）删除容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id# 删除指定的容器(不能删除运行中的容器，加-f强制删除)</span><br><span class="line">docker rm -f $(docker ps -aq)  # 删除所有容器</span><br></pre></td></tr></table></figure><p>（5）启动和停止容器的操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id # 启动容器</span><br><span class="line">docker restart 容器id # 重启容器</span><br><span class="line">docker stop 容器id # 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id # 强制停止当前容器</span><br></pre></td></tr></table></figure><h4 id="4-操作命令"><a href="#4-操作命令" class="headerlink" title="4.操作命令"></a>4.操作命令</h4><p>（1）后台启动命令</p><p>docker容器使用后台运行时（<code>docker run -d centos</code>），必须要有一个前台进程，如果docker发现自己没有应用了，就会自动停止</p><p>（2）查看日志命令</p><p>查看容器运行的日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 容器</span><br></pre></td></tr></table></figure><p>（3）查看容器进程信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器id</span><br></pre></td></tr></table></figure><p>（4）查看镜像元数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><p>（5）进入当前正在运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令1:进入容器后开启一个新的终端（相当于开启了另一个进程）</span></span><br><span class="line">docker exec -it 容器id bashShell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令2：进入容器正在执行的终端中，不会启动新的进程</span></span><br><span class="line">docker attach 容器id</span><br></pre></td></tr></table></figure><p>（6）从容器中拷贝文件到主机上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 2e18c3e0375a:/home/test.py /home/autovy/桌面</span><br></pre></td></tr></table></figure><p>拷贝是一个手动过程，从封闭的容器中拿到需要留存的数据，而使用数据卷</p><p>则可以实现自动同步</p><h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>推荐文章：<a href="http://linyishui.top/2019101101.html">docker镜像讲解</a></p><h4 id="1-Portainer可视化工具"><a href="#1-Portainer可视化工具" class="headerlink" title="1.Portainer可视化工具"></a>1.Portainer可视化工具</h4><h4 id="2-镜像简介"><a href="#2-镜像简介" class="headerlink" title="2.镜像简介"></a>2.镜像简介</h4><ul><li>镜像就是一种轻量级，可执行的独立软件包，用来打包软件运行环境和基于环境开会的软件（包括代码，运行时，库，环境变量，配置文件）</li><li>镜像来源：<ul><li>从远程仓库下载</li><li>自己制作的镜像DockerFile</li></ul></li></ul><h4 id="3-镜像加载原理"><a href="#3-镜像加载原理" class="headerlink" title="3.镜像加载原理"></a>3.镜像加载原理</h4><p>（1）联合文件系统（UnionFS）</p><p>镜像和容器不同，容器是彼此独立的，而容器是分层叠加的，可以共享相同的底层文件和目录</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846837.webp" alt="img"></p><p>（2）镜像加载原理</p><p>共享底层资源</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846524.png" alt="docker文件系统分层存储原理"></p><h4 id="4-分层理解"><a href="#4-分层理解" class="headerlink" title="4.分层理解"></a>4.分层理解</h4><p>基于Ubuntu Linux 16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。该镜像当前已经包含3个镜像层</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846403.png" alt="基于Ubuntu Linux 16.04创建镜像"></p><p>docker镜像默认只读，当容器启动时，一个新的可写层被加载到镜像顶部</p><p>这一层即为容器层，容器之下称为镜像层</p><h4 id="5-commit镜像"><a href="#5-commit镜像" class="headerlink" title="5.commit镜像"></a>5.commit镜像</h4><p>提交一个新的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的副本</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令和git原理相似</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</span><br></pre></td></tr></table></figure><h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><h4 id="1-数据卷原理"><a href="#1-数据卷原理" class="headerlink" title="1.数据卷原理"></a>1.数据卷原理</h4><p>容器之间有一个数据共享技术，Docker容器中产生的数据，同步到本地（从而实现数据可持久化，数据同步操作，数据存储在本地不会随着容器删除而丢失）</p><p>其本质是将容器内的目录挂载到主机上</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846330.png" alt="数据卷容器实践_heima201907的博客-CSDN博客"></p><h4 id="2-数据卷使用"><a href="#2-数据卷使用" class="headerlink" title="2.数据卷使用"></a>2.数据卷使用</h4><p>（1）使用命令挂载 -v</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录地址:容器目录地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试：将容器的目录挂载到主机目录</span></span><br><span class="line">docker run -it -v /home/test:/home centos /bin/bash</span><br></pre></td></tr></table></figure><ul><li>主机和容器没有对应目录时会自动创建目录</li><li>通过docker inspect 可以查看到挂载信息</li><li>挂载双方是双向同步关系，他们的文件内容无论哪一方更改，都会保持同步</li><li>修改文件时，只需要在本地修改即可，不需要进入容器</li></ul><p>（2）具名挂载和匿名挂载</p><p>除了上文中的指定路径挂载，我们也可以使用具名挂载和匿名挂载</p><p>匿名挂载：<code>-v :容器目录地址</code></p><p>具名挂载：<code>-v 卷名:容器目录地址</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">docker run -d -P --name test1 -v /home/new centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载</span></span><br><span class="line">docker run -d -P --name test1 -v mycentos:/home/new centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有卷(可以看到存在匿名卷)</span></span><br><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><p>所有的docker容器内的卷默认放在本地主机的<code>/var/lib/docker/volumes下</code></p><p>（3）挂载权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以通过 -v 容器路径：ro,rw改变读写权限</span></span><br><span class="line">ro # 只读，只能通过宿主机来操作，容器内部无法进行操作</span><br><span class="line">rw # 可读可写，默认为可读可写</span><br></pre></td></tr></table></figure><h4 id="3-数据卷容器"><a href="#3-数据卷容器" class="headerlink" title="3.数据卷容器"></a>3.数据卷容器</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846812.png" alt="Docker学习过程（5-数据卷）_gengli2017的博客-CSDN博客"></p><p>容器间也可以进行挂载从而实现数据同步，多个子容器的数据可以挂载到一个父容器中，这个父容器就是数据卷容器</p><p>–volumes-from即可以让docker3挂载到docker1上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name docker3 --volumes-from docker1 5ce91af318b3 /bin/bash</span><br></pre></td></tr></table></figure><p>容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止</p><h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><p>参考文章：<a href="https://blog.52itstyle.vip/archives/2839/">DokcerFile命令详解</a></p><h4 id="1-DockerFile简介"><a href="#1-DockerFile简介" class="headerlink" title="1.DockerFile简介"></a>1.DockerFile简介</h4><p>DockerFile是构建docker镜像的构建文件，即命令脚本。通过这个脚本我们可以生成一个镜像。</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846366.png" alt="在这里插入图片描述"></p><h4 id="2-DockerFile构建流程"><a href="#2-DockerFile构建流程" class="headerlink" title="2.DockerFile构建流程"></a>2.DockerFile构建流程</h4><p>（1）DockerFile内容示例</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在构建镜像形成两个数据卷，因为没有指定的挂载卷会自动进行匿名挂载</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----end------&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><p>（2）通过DockerFile文件构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f dockerfile -t test/centos .</span><br></pre></td></tr></table></figure><p>build命令， -f  打开dockerfile文件的路径，-t  test/centos命名容器，.即为生成路径</p><p>（3）用自己的镜像创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it 5ce91af318b3 /bin/bash</span><br></pre></td></tr></table></figure><p>（4）docker push 发布镜像（开源进行）</p><h4 id="3-DockerFile指令详解"><a href="#3-DockerFile指令详解" class="headerlink" title="3.DockerFile指令详解"></a>3.DockerFile指令详解</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040846106.png" alt="img"></p><p>（图中最后一项应为CMD指令此处更正）</p><p>补充项：</p><ul><li><p>CMD：指定这个容器启动时要运行的命令，只有最后一个会生效，可被替代</p></li><li><p>ENTRYPOINT：指定这个容器启动时要运行的命令，可以追加命令</p></li><li><p>COPY：类似于ADD，将我们文件拷贝到镜像中</p></li><li><p>ENV：构建的时候设置环境变量</p></li></ul><h4 id="4-创建自己的DockerFile"><a href="#4-创建自己的DockerFile" class="headerlink" title="4.创建自己的DockerFile"></a>4.创建自己的DockerFile</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> Autovy&lt;autovys@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录为/usr/local</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装相关依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开放端口80</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;-----end------&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><p> 通过<code>docker history mycentos:0.1</code>  命令可以查看构建镜像的过程</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040845042.jpeg&quot; alt=&quot;git&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发工具" scheme="https://autovy.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发工具" scheme="https://autovy.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="docker" scheme="https://autovy.github.io/tags/docker/"/>
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>开发工具|Linux学习手册</title>
    <link href="https://autovy.github.io/2021/05/28/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Linux%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/"/>
    <id>https://autovy.github.io/2021/05/28/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Linux%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/</id>
    <published>2021-05-28T06:30:00.000Z</published>
    <updated>2021-09-04T01:53:16.249Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040952867.png" alt="image-20210904095248687"></p><span id="more"></span><h3 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h3><h4 id="1-Linux发行版"><a href="#1-Linux发行版" class="headerlink" title="1.Linux发行版"></a>1.Linux发行版</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949495.jpeg" alt="img"></p><p>Linux发行版 = Liunx核心 +应用软件</p><h4 id="2-Liunx内核架构"><a href="#2-Liunx内核架构" class="headerlink" title="2.Liunx内核架构"></a>2.Liunx内核架构</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949098.jpeg" alt="img"></p><p>Liunx内核有5个子系统：</p><ul><li>Process Scheduler，进程管理、进程调度。负责管理 CPU 资源，以便让各个进程可以以尽量公平的方式访问 CPU。</li><li>Memory Manager，内存管理。负责管理 Memory（内存）资源，以便让各个进程可以安全的共享机器的内存资源。</li><li>VFS（Virtual File System），虚拟文件系统。Linux 内核将不同功能的外部设备抽象为可以通过统一的文件操作接口（open、close、read、write 等）来访问。这就是 Linux系统“一切皆是文件”的体现</li><li>设备驱动，负责管理第三方设备接入/终端</li><li>Network，网络子系统。负责管理系统的网络设备，并实现多种多样的网络标准</li></ul><h3 id="Linux基本操作"><a href="#Linux基本操作" class="headerlink" title="Linux基本操作"></a>Linux基本操作</h3><h4 id="1-开机关机"><a href="#1-开机关机" class="headerlink" title="1.开机关机"></a>1.开机关机</h4><p>开启会启动许多程序，在windows叫做“服务“（service），在Linux叫做“守护进程”（daemon）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949420.png" alt="Linux开机启动脚本 - 转1"></p><p>同步数据命令：sync（常常用于强制关机前）</p><p>关机命令：shutdown</p><p>重启命令：reboot</p><h4 id="2-基本目录结构"><a href="#2-基本目录结构" class="headerlink" title="2.基本目录结构"></a>2.基本目录结构</h4><p>基本知识：</p><ul><li>Liunx一切皆文件</li><li>根目录/，所有文件都挂载在这个节点下</li><li>ls 查看当前目录下所有文件</li></ul><p>Liunx目录结构：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949471.png" alt="img"></p><p>比较常用的如下：</p><ul><li>/etc ： 该目录可用来存放所有系统管理需要的配置文件和子目录</li><li>/home：用户主目录（在liunx，每个用户都有一个自己的目录）</li><li>/opt : 主机额外安装软件存放的位置</li><li>/root : 系统管理员用户主目录</li><li>/usr：用户的应用程序和文件都放在这个目录，类似于Windows的program files目录</li><li>/tmp ：存放临时文件，用完即丢的文件如安装包</li><li>/var : 存放不断扩充的东西，习惯于放那些经常被修改的目录</li></ul><h3 id="Liunx目录管理"><a href="#Liunx目录管理" class="headerlink" title="Liunx目录管理"></a>Liunx目录管理</h3><h4 id="1-文件管理基本命令"><a href="#1-文件管理基本命令" class="headerlink" title="1.文件管理基本命令"></a>1.文件管理基本命令</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949194.png" alt="img"></p><p>比较常用的如下：</p><ul><li>ls: 列出目录</li><li>cd：切换目录</li><li>pwd：显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp：复制文件或目录</li><li>rm：移除文件或目录</li><li>mv：移动文件与目录，或修改文件与目录的名称</li><li>touch：创建文件</li></ul><h4 id="2-ls命令"><a href="#2-ls命令" class="headerlink" title="2.ls命令"></a>2.ls命令</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949481.png" alt="这里写图片描述"></p><h4 id="3-mkdir命令"><a href="#3-mkdir命令" class="headerlink" title="3.mkdir命令"></a>3.mkdir命令</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949299.png" alt="img"></p><h4 id="4-rm命令"><a href="#4-rm命令" class="headerlink" title="4.rm命令"></a>4.rm命令</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949353.png" alt="img"></p><h3 id="Linux文件管理"><a href="#Linux文件管理" class="headerlink" title="Linux文件管理"></a>Linux文件管理</h3><h4 id="1-文件属性"><a href="#1-文件属性" class="headerlink" title="1.文件属性"></a>1.文件属性</h4><p>文件属性字符串:<br><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949841.png" alt="img"></p><p>文件权限字符串：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949192.png" alt="363003_1227493859FdXT"></p><p>文件类型：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949930.png" alt="linux文件类型和权限- xd_xumaomao - 博客园"></p><p>常用的如下：</p><ul><li><code>-</code>：普通文件</li><li><code>d</code>：目录文件</li><li><code>l</code>：连接文件（相当于Windows的快捷方式）</li></ul><p>文件权限：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949379.png" alt="img"></p><p>在文件属性中每组权限按<code>rwx</code>这样的顺序显示，而<code>-</code>表示没有该权限</p><h4 id="2-chgrp-amp-chown命令"><a href="#2-chgrp-amp-chown命令" class="headerlink" title="2.chgrp&amp;chown命令"></a>2.chgrp&amp;chown命令</h4><p>更改文件属组（文件所属用户组）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">charg -R 属组名 文件名</span><br></pre></td></tr></table></figure><p>更改文件属主（文件所有者）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R 属主名 文件名</span><br></pre></td></tr></table></figure><p>同时修改文件的属组和属主</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R 属主名:属组名 文件名</span><br></pre></td></tr></table></figure><h4 id="3-chmod命令"><a href="#3-chmod命令" class="headerlink" title="3.chmod命令"></a>3.chmod命令</h4><p>chmod可以设置文件访问权限，有两种设置方法：数字（常用）和符号</p><p>Linux文件的基本权限有9个，分别是owner/group/others 三种身份分别的rwx权限（9个权限三个三个为一组）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949807.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用格式</span></span><br><span class="line">chmod 权限数字组 文件名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开放所有权限给所有人</span></span><br><span class="line">chmod 777 root</span><br></pre></td></tr></table></figure><h4 id="4-文件内容查看"><a href="#4-文件内容查看" class="headerlink" title="4.文件内容查看"></a>4.文件内容查看</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949445.png" alt="夺命雷公狗---linux NO:11 linux的文本文件查看命令- 夺命雷公狗- 博客园"></p><ul><li>nl：显示文件中的时候标注行号</li><li>less与more类似，有分页的功能，但是可以往前翻页（空格下翻页，pageDown，pageUp代表翻动页面）</li><li>在less查看模式下：q命令退出，<code>/</code>命令向下查询字符串，<code>?</code>向下查询字符串，<code>n</code>继续搜寻下一个，<code>N</code>向上寻找</li></ul><h3 id="Linux链接"><a href="#Linux链接" class="headerlink" title="Linux链接"></a>Linux链接</h3><h4 id="1-链接类型"><a href="#1-链接类型" class="headerlink" title="1.链接类型"></a>1.链接类型</h4><p>Linux的链接分为两种：  </p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949118.png" alt="linux之软连接硬链接- osc_3uvms8cw的个人空间- OSCHINA - 中文开源技术交流社区"></p><ul><li>软链接：类似与windows下的快捷方式，删除了源文件，快捷方式也访问不了</li><li>硬链接：允许一个文件有多个路径，用户可以通过这种机制建立硬链接到一些重要文件上，防止误删</li></ul><h4 id="2-创建链接"><a href="#2-创建链接" class="headerlink" title="2.创建链接"></a>2.创建链接</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 为f1文件创建一个硬链接f2</span></span><br><span class="line">ln f1 f2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为f1文件创建一个软链接（符号链接）f3</span></span><br><span class="line">ln -s f1 f3</span><br></pre></td></tr></table></figure><h4 id="3-链接相关测试"><a href="#3-链接相关测试" class="headerlink" title="3.链接相关测试"></a>3.链接相关测试</h4><p>文件内容修改：</p><p>原文件的内容，其硬链接的内容，其软连接访问的内容都是保持一致的，修改其中之一其他两项访问的内容也会相应变化</p><p>文件删除：</p><p>删除原文件后，硬链接依旧可以访问，而软链接无法打开（快捷方式失效）</p><h3 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h3><h4 id="1-Vim简介"><a href="#1-Vim简介" class="headerlink" title="1.Vim简介"></a>1.Vim简介</h4><ul><li>Vim是一种文本编辑器，有代码补全，编译及错误跳转等方便编程的功能</li><li>Vim可以通过参加实现IDE一样的功能</li><li>Vim基本使用：查看内容，编辑内容，保存内容</li></ul><h4 id="2-Vim三模式"><a href="#2-Vim三模式" class="headerlink" title="2.Vim三模式"></a>2.Vim三模式</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949256.jpeg" alt="Linux 之Vim 命令使用（详细总结） - 知乎"></p><ul><li>命令模式只能查看文本，可以通过键盘输入切换到输入模式和底部命令行模式</li><li>输入模式可以编辑文件</li><li>末行模式即命令行模式可以执行退出，保存文件等操作</li></ul><h4 id="3-命令模式"><a href="#3-命令模式" class="headerlink" title="3.命令模式"></a>3.命令模式</h4><ul><li><code>数字+空格</code> ：横向移动光标，向右移动n个字</li><li><code>数字+回车</code>：纵向移动光标，向下移动n行</li><li><code>/word</code>：向光标下寻找名为word的字符串</li><li><code>?word</code>：向光标下寻找名为word的字符串</li><li><code>n/N</code>:进行下翻页和下翻页（n表示重复上一个搜寻动作，N则是反向于上一个搜寻动作）</li><li><code>u</code>：重复上一个操作</li></ul><h4 id="4-输入模式"><a href="#4-输入模式" class="headerlink" title="4.输入模式"></a>4.输入模式</h4><p>输入模式常用按键：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949252.svg+xml" alt="[公式]"></p><h4 id="5-命令行模式"><a href="#5-命令行模式" class="headerlink" title="5.命令行模式"></a>5.命令行模式</h4><p>常用命令：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040949551.svg+xml" alt="[公式]"></p><p><code>:ZZ</code>：不存储直接离开（ctrl + z）</p><p><code>:set nu</code>：设置行号，打开文本每一行都显示行号</p><p>注意如果输入的命令不存在会返回127错误，而且会回到vim界面</p><h3 id="Linux账号管理"><a href="#Linux账号管理" class="headerlink" title="Linux账号管理"></a>Linux账号管理</h3><p>账号管理实质是对<code>/etc/passwd</code>文件的更新</p><h4 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="1.添加用户"></a>1.添加用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -选项 用户名</span><br></pre></td></tr></table></figure><p>useradd 相关选项：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950318.png" alt="op"></p><p>常用<code>-m</code>自动为用户在home下创建目录</p><p>可以在/etc/passwd文件夹下查看用户相关的配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><h4 id="2-删除用户"><a href="#2-删除用户" class="headerlink" title="2.删除用户"></a>2.删除用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -选项 用户名</span><br></pre></td></tr></table></figure><p>常用<code>-r</code>选项自动删除用户在home下的用户目录</p><h4 id="3-修改用户"><a href="#3-修改用户" class="headerlink" title="3.修改用户"></a>3.修改用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -选项 修改内容 用户名</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950615.png" alt="选项"></p><h4 id="4-切换用户"><a href="#4-切换用户" class="headerlink" title="4.切换用户"></a>4.切换用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su + 用户名</span><br></pre></td></tr></table></figure><p>切换到root用户：<code>sudo su</code></p><p>修改主机名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname 修改的名称</span><br></pre></td></tr></table></figure><h4 id="5-用户口令管理命令"><a href="#5-用户口令管理命令" class="headerlink" title="5.用户口令管理命令"></a>5.用户口令管理命令</h4><p>创建/修改用户的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950354.png" alt="选项"></p><h3 id="Linux用户组管理"><a href="#Linux用户组管理" class="headerlink" title="Linux用户组管理"></a>Linux用户组管理</h3><p>组的增加，删除和修改实际上就是对<code>/etc/group</code>文件的更新</p><h4 id="1-创建用户组"><a href="#1-创建用户组" class="headerlink" title="1.创建用户组"></a>1.创建用户组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用户组组的id自增1</span></span><br><span class="line">groupadd 组名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定id创建用户组</span></span><br><span class="line">groupadd -g 233 组名</span><br></pre></td></tr></table></figure><h4 id="2-删除用户组"><a href="#2-删除用户组" class="headerlink" title="2.删除用户组"></a>2.删除用户组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除用户组</span></span><br><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure><h4 id="3-修改用户组"><a href="#3-修改用户组" class="headerlink" title="3.修改用户组"></a>3.修改用户组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 基本样式</span></span><br><span class="line">groupmod 选项 修改内容 组名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 案例</span></span><br><span class="line">groupmod -g 666 -n newname 组名</span><br></pre></td></tr></table></figure><h4 id="4-切换用户组"><a href="#4-切换用户组" class="headerlink" title="4.切换用户组"></a>4.切换用户组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录的当前用户切换到root组</span></span><br><span class="line">newgrp root</span><br></pre></td></tr></table></figure><h4 id="5-用户管理相关文件"><a href="#5-用户管理相关文件" class="headerlink" title="5.用户管理相关文件"></a>5.用户管理相关文件</h4><p><code>/etc/passwd</code>文件：</p><p><strong>具体格式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:口令（不可见一般显示为x）:用户标识号:组标识号:注释性描述:主目录:登录Shell</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950861.jpeg" alt="详解Linux中/etc/passwd文件详解Linux中/etc/passwd文件"></p><p>该文件的每一行都代表一个用户，可以查看用户主目录位置，并查看属于哪一个组</p><p><code>/etc/shadow</code>文件：</p><p>用户密码加密后存放在/etc/shadow文件，与passwd文件一一对应</p><p><strong>具体格式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950761.jpeg" alt="img"></p><p><code>/etc/group</code>文件：</p><p><strong>具体格式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">组名:口令:组ID:组内用户列表</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950338.jpeg" alt="img"></p><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h4 id="1-df命令"><a href="#1-df命令" class="headerlink" title="1.df命令"></a>1.df命令</h4><p>列出文件系统整体的磁盘使用量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 普通查看</span></span><br><span class="line">df</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 内存转换为M</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20170212221928958" alt="img"></p><h4 id="2-du命令"><a href="#2-du命令" class="headerlink" title="2.du命令"></a>2.du命令</h4><p>检查磁盘空间使用量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前目录内存占用</span></span><br><span class="line">du </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查根目录每个目录所占用的容量</span></span><br><span class="line">du -sm /*</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950313.png" alt="img"></p><h4 id="3-mount-amp-umount命令"><a href="#3-mount-amp-umount命令" class="headerlink" title="3.mount&amp;umount命令"></a>3.mount&amp;umount命令</h4><p>可类比于U盘的使用</p><p>mount：挂载设备</p><p>umount：卸载设备</p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="1-进程介绍"><a href="#1-进程介绍" class="headerlink" title="1.进程介绍"></a>1.进程介绍</h4><ul><li>在Liunx中，每个程序都是有自己的一个进程，每一个进程都有一个id号</li><li>每一个进程都有一个父进程</li><li>进程有两种存在方式：前台运行（程序），后台运行（服务）</li></ul><h4 id="2-进程与线程"><a href="#2-进程与线程" class="headerlink" title="2.进程与线程"></a>2.进程与线程</h4><ul><li>进程就是应用程序的启动实例，而线程从属于进程，是程序的实际执行者</li><li>一个进程至少包含一个主线程，也可以有更多的子线程</li><li>对操作系统来说，线程是最小的执行单元，进程是最小的资源管理单元</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950452.webp" alt="img"></p><h4 id="3-任务执行方式"><a href="#3-任务执行方式" class="headerlink" title="3.任务执行方式"></a>3.任务执行方式</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950096.png" alt="img"></p><ul><li>串行是指多个任务时，各个任务按顺序执行，完成一个之后才能进行下一个</li><li>并行指的是多个任务可以同时执行，异步是多个任务并行的前提条件</li><li>并发是指两个或多个事件在同一时间间隔内发生，常用于多线程编程中</li></ul><h4 id="4-同步异步阻塞"><a href="#4-同步异步阻塞" class="headerlink" title="4.同步异步阻塞"></a>4.同步异步阻塞</h4><p>同步与异步关注的是<strong>消息通信机制</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950691.png" alt="img"></p><ul><li>由调用方盲目主动问询的方式是同步调用</li><li>由被调用方主动通知调用方任务已完成的方式是异步调用</li><li>同步异步是对系统内核而言（是否主动通知应用层）</li></ul><p>阻塞和非阻塞关注的是<strong>程序在等待调用结果</strong>时的状态：</p><p><img src="https://pic3.zhimg.com/80/v2-6507ab3517814b1b84fbff9a3eb31842_720w.png" alt="img"></p><ul><li>被挂起无法执行其他操作的则是阻塞型</li><li>被立即「抽离」去完成其他「任务」的则是非阻塞型的</li><li>阻塞和非阻塞对应用层而言（应用是否去做其他事情）</li></ul><h4 id="5-ps命令"><a href="#5-ps命令" class="headerlink" title="5.ps命令"></a>5.ps命令</h4><p><code>ps</code>查看当前系统中正在执行的各种进程</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040950813.png" alt="Linux学习之路(三) —— Linux高级系统管理命令"></p><p>常用案例：</p><p>查看mysql的所有进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux|grep mysql</span><br></pre></td></tr></table></figure><ul><li><code>ps -aux</code> ：查看所有进程信息</li><li><code>|</code> ：Linux管道符，过滤上一条命令输出的信息</li><li><code>grep</code> ：查找文件中符合条件的字符串</li></ul><p>查看父进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep mysql</span><br></pre></td></tr></table></figure><p>显示进程树</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -p显示父id，-u显示用户组</span></span><br><span class="line">pstree -pu</span><br></pre></td></tr></table></figure><h4 id="6-kill命令"><a href="#6-kill命令" class="headerlink" title="6.kill命令"></a>6.kill命令</h4><p>强制结束该进程，类似与windows结束任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 进程id</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040952867.png&quot; alt=&quot;image-20210904095248687&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发工具" scheme="https://autovy.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发工具" scheme="https://autovy.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Linux" scheme="https://autovy.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java|SSM框架学习</title>
    <link href="https://autovy.github.io/2021/05/08/Java-ssm%E6%A1%86%E6%9E%B6/"/>
    <id>https://autovy.github.io/2021/05/08/Java-ssm%E6%A1%86%E6%9E%B6/</id>
    <published>2021-05-08T06:30:00.000Z</published>
    <updated>2021-09-04T01:36:36.232Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040933389.png" alt="image-20210604151457606"></p><span id="more"></span><h2 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h2><h3 id="1-SSM功能"><a href="#1-SSM功能" class="headerlink" title="1.SSM功能"></a>1.SSM功能</h3><p>SSM即Spring + Spring MVC + MyBatis</p><ul><li>Spring MVC 负责实现MCV设计模式，MyBatis负责数据持久层，Spring负责管理Spring MVC和MyBatis相关的创建和依赖注入</li><li>Spring MCV处理的是客户端与Java应用的关系，MyBatis处理的是Java应用与数据库的关系</li></ul><h3 id="2-SSM整合配置"><a href="#2-SSM整合配置" class="headerlink" title="2.SSM整合配置"></a>2.SSM整合配置</h3><h4 id="（1）Maven添加所需依赖"><a href="#（1）Maven添加所需依赖" class="headerlink" title="（1）Maven添加所需依赖"></a>（1）Maven添加所需依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring JDBC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring AOP --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MyBatis --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MyBatis整合Spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- C3P0 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- JSTL --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（2）web-xml配置"><a href="#（2）web-xml配置" class="headerlink" title="（2）web.xml配置"></a>（2）web.xml配置</h4><p>当我们启动一个web项目容器时，首先非去读取web.xml内的配置</p><p>容器加载web.xml的过程</p><ul><li>首先读取配置文件中<code>&lt;listener&gt; &lt;/listener&gt;</code>和<code>&lt;context-param&gt; &lt;/context-param&gt;</code>两个节点</li><li>紧接着，容器创建一个ServletContext(application),这个web项目的所有部分都将共享这个上下文</li><li>容器以<code>&lt;context-param&gt;&lt;/context-param&gt;</code>的name作为键，value作为值，将其转化为键值对，存入ServletContext</li><li>容器创建<code>&lt;listener&gt;&lt;/listener&gt;</code>中的类实例，根据配置的class类路径<code>&lt;listener-class&gt;</code>来创建监听，在监听中会有初始化方法</li></ul><p>web.xml中配置SpringMCV，Spring，字符编码过滤器，加载静态资源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 启动Spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring MVC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 字符编码过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 加载静态资源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（3）spring-xml配置"><a href="#（3）spring-xml配置" class="headerlink" title="（3）spring.xml配置"></a>（3）spring.xml配置</h4><p>spring.xml配置MyBatis和Spring的整合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 整合MyBatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置MyBatis SqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/southwind/repository/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:config.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描自定义的Mapper接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.southwind.repository&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（4）config-xml-配置"><a href="#（4）config-xml-配置" class="headerlink" title="（4）config.xml 配置"></a>（4）config.xml 配置</h4><p>config.xml 配置一些 MyBatis 辅助信息，比如打印 SQL 等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 打印SQL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定一个包名，MyBatis会在包名下搜索需要的JavaBean--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.southwind.entity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（5）springmvc-xml配置"><a href="#（5）springmvc-xml配置" class="headerlink" title="（5）springmvc.xml配置"></a>（5）springmvc.xml配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描业务代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.southwind&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-SSM实现步骤"><a href="#3-SSM实现步骤" class="headerlink" title="3.SSM实现步骤"></a>3.SSM实现步骤</h3><h4 id="（1）创建实体类（Entity）"><a href="#（1）创建实体类（Entity）" class="headerlink" title="（1）创建实体类（Entity）"></a>（1）创建实体类（Entity）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）创建数据访问层（Repository）"><a href="#（2）创建数据访问层（Repository）" class="headerlink" title="（2）创建数据访问层（Repository）"></a>（2）创建数据访问层（Repository）</h4><p>实现dao访问</p><ul><li><p>UserRepository访问数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>UserRepository.xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.southwind.repository.UserRepository&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（3）创建服务接口（Service）"><a href="#（3）创建服务接口（Service）" class="headerlink" title="（3）创建服务接口（Service）"></a>（3）创建服务接口（Service）</h4><p>服务层，注入dao主要用来进行业务的逻辑处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（4）实现服务接口（ServiceImpl）"><a href="#（4）实现服务接口（ServiceImpl）" class="headerlink" title="（4）实现服务接口（ServiceImpl）"></a>（4）实现服务接口（ServiceImpl）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.southwind.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> com.southwind.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（4）实现控制器（Controller）"><a href="#（4）实现控制器（Controller）" class="headerlink" title="（4）实现控制器（Controller）"></a>（4）实现控制器（Controller）</h4><p>注入服务，映射url</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;list&quot;</span>,userService.findAll());</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h3 id="1-初识MyBatis"><a href="#1-初识MyBatis" class="headerlink" title="1.初识MyBatis"></a>1.初识MyBatis</h3><h4 id="（1）MyBatis简介"><a href="#（1）MyBatis简介" class="headerlink" title="（1）MyBatis简介"></a>（1）MyBatis简介</h4><ul><li>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射</li><li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作</li><li>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO为数据库中的记录</li></ul><h4 id="（2）如果获取MyBatis"><a href="#（2）如果获取MyBatis" class="headerlink" title="（2）如果获取MyBatis"></a>（2）如果获取MyBatis</h4><ul><li><p>maven添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>github下载源码</p></li><li><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p></li></ul><h4 id="（3）持久层"><a href="#（3）持久层" class="headerlink" title="（3）持久层"></a>（3）持久层</h4><ul><li>数据持久化：持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li><li>数据持久化的方法有：数据库（jdbc）,io文件持久化</li><li>持久层即完成持久化工作的代码块</li></ul><h4 id="（4）为什么需要Mybatis"><a href="#（4）为什么需要Mybatis" class="headerlink" title="（4）为什么需要Mybatis"></a>（4）为什么需要Mybatis</h4><ul><li><p>帮助程序将数据存入数据库中</p></li><li><p>方便</p></li><li><p>传统的JDBC代码太复杂，而Mybatis简化，自动化</p></li><li><p>优点：</p><ul><li>简单易学</li><li>灵活</li><li>sql和代码的分离，提高了可维护性,支持对象与数据库字段的关系映射</li><li>提供映射标签</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>通过xml标签，支持编写动态sql</li></ul></li></ul><h3 id="2-MyBatis使用流程"><a href="#2-MyBatis使用流程" class="headerlink" title="2.MyBatis使用流程"></a>2.MyBatis使用流程</h3><h4 id="（1）环境搭建"><a href="#（1）环境搭建" class="headerlink" title="（1）环境搭建"></a>（1）环境搭建</h4><ul><li><p>新建数据库</p></li><li><p>新建项目</p><ul><li><p>新建一个普通maven项目</p></li><li><p>删除src文件</p></li><li><p>导入相关依赖：mysql驱动，mybatis，junit等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="（2）创建一个模块"><a href="#（2）创建一个模块" class="headerlink" title="（2）创建一个模块"></a>（2）创建一个模块</h4><ul><li>编写mybatis核心配置文件，该配置文件包含对MyBatis系统的核心设置，包含获取数据库连接实例的数据源（DataSource）和决定事务范围和控制方式的事务管理器（TransactionManager）</li></ul><ul><li><p>mybatis配置文件示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--数据库连接的配置信息 驱动 URL 用户名 密码 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 将写好的sql映射文件组成到该处（见代码编写部分） --&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>构建 SqlSessionFactory对象</p><ul><li>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。</li><li>SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得</li><li>而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出    SqlSessionFactory 实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String resource = <span class="string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>获取 SqlSession实例、</p><ul><li><p>从 SqlSessionFactory 中可以获取 SqlSession实例</p></li><li><p>SqlSession 提供了在数据库执行 SQL 命令所需的所有方法</p></li><li><p>我们可以通过SqlSession实例来直接执行已映射的 SQL 语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">  Blog blog = mapper.selectBlog(<span class="number">101</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="（3）代码编写"><a href="#（3）代码编写" class="headerlink" title="（3）代码编写"></a>（3）代码编写</h4><ul><li><p>实体类</p><p>程序中的实体类对应着数据库中的字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String ame;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = Name;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Dao接口</p><p>Dao接口用于操作数据库对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dao</span></span>&#123;</span><br><span class="line"><span class="function">List&lt;test&gt; <span class="title">getList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>编写sql映射文件</p><ul><li>实现类由原来的Daolmpl（Dao接口实现类）转变为一个Mapper配置文件</li><li>namespace：名称空间 ，绑定一个对应的Dao或Mapper接口</li><li>id：sql的唯一标识 </li><li>resultType：返回值类型 </li><li>#{id}：从传递过来的参数中取出id值     <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.mybatis.example.BlogMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlog&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">select * from Blog where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>每个mapper.xml文件都要在Mybatis核心配置文件中注册</p><p>​       </p><h4 id="（4）执行代码"><a href="#（4）执行代码" class="headerlink" title="（4）执行代码"></a>（4）执行代码</h4><p>Test测试编写：</p><ul><li>获取SqlSession对象</li><li>执行sql（getMapper）</li><li>关闭SqlSession</li></ul><p>可能出现的问题：</p><ul><li>sql映射配置文件没注册</li><li>绑定接口错误</li><li>方法名不对</li><li>返回类型不对</li><li>Maven导出资源问题</li></ul><h3 id="3-CRUD"><a href="#3-CRUD" class="headerlink" title="3.CRUD"></a>3.CRUD</h3><p>在sql映射文件中编写CRUD</p><h4 id="（1）实现步骤"><a href="#（1）实现步骤" class="headerlink" title="（1）实现步骤"></a>（1）实现步骤</h4><ul><li>编写接口（Dao/Mapper）</li><li>编写对应接口的sql语句</li><li>测试</li></ul><h4 id="（2）namespace"><a href="#（2）namespace" class="headerlink" title="（2）namespace"></a>（2）namespace</h4><p>namespace中的包名要与Dao/mapper接口的包名一致</p><h4 id="（3）select"><a href="#（3）select" class="headerlink" title="（3）select"></a>（3）select</h4><ul><li>id：对应namespace接口文件中的方法名</li><li>resultType：sql语句执行的返回值</li><li>parameterType：参数类型</li></ul><h4 id="（4）insert-update-delete"><a href="#（4）insert-update-delete" class="headerlink" title="（4）insert update delete"></a>（4）insert update delete</h4><p>增删改标签在映射文件中编写sql语句，调用时都需要提交事物</p><h4 id="（5）错误分析"><a href="#（5）错误分析" class="headerlink" title="（5）错误分析"></a>（5）错误分析</h4><ul><li>sql映射文件的标签和sql语句要对应</li><li>resource绑定mapper需要使用路径</li><li>程序配置文件必须符合规范</li><li>NullPointerException，没有注册到资源</li></ul><h4 id="（6）Map参数类型"><a href="#（6）Map参数类型" class="headerlink" title="（6）Map参数类型"></a>（6）Map参数类型</h4><ul><li>假设实体类或者数据库中的字段过多，我们可以使用Map作为parameterType的值</li><li>Map可以自动填充null</li><li>Map传递参数，直接在sql中取出key（多个参数用Map，或者注解）</li><li>对象传递参数，在sql中取对象的属性（只有一个基本类型参数下使用）</li></ul><h4 id="（7）模糊查询"><a href="#（7）模糊查询" class="headerlink" title="（7）模糊查询"></a>（7）模糊查询</h4><ul><li>Java代码执行时，传递通配符</li><li>也可以在在sql拼接中使用通配符</li></ul><h3 id="4-配置解析"><a href="#4-配置解析" class="headerlink" title="4.配置解析"></a>4.配置解析</h3><h4 id="（1）核心配置文件"><a href="#（1）核心配置文件" class="headerlink" title="（1）核心配置文件"></a>（1）核心配置文件</h4><ul><li><p>mybatis-config.xml</p></li><li><p>MyBaits的配置文件包含了会深深影响MyBatis行为的设置和属性信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure></li></ul><h4 id="（2）环境配置（environments）"><a href="#（2）环境配置（environments）" class="headerlink" title="（2）环境配置（environments）"></a>（2）环境配置（environments）</h4><ul><li>尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境</li><li>MyBatis默认事务管理器时JDBC，连接池POOLED</li></ul><h4 id="（3）属性（properties）"><a href="#（3）属性（properties）" class="headerlink" title="（3）属性（properties）"></a>（3）属性（properties）</h4><ul><li>我们可以通过properties属性来实现引用外部配置文件，可以在其中增加一些属性配置（如果有同一字段，优先录取外部配置文件的）</li><li>这些属性都是可外部配置且动态替换的，既可以在典型的Java属性文件中配置，也可以通过properties的子元素传递</li><li>外部配置文件写入数据库连接相关属性</li></ul><h4 id="（4）类型别名（ypeAliases）"><a href="#（4）类型别名（ypeAliases）" class="headerlink" title="（4）类型别名（ypeAliases）"></a>（4）类型别名（ypeAliases）</h4><ul><li>类型别名可为 Java 类型设置一个缩写名字</li><li>它仅用于 XML 配置，意在降低冗余的全限定类名书写</li><li>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，默认使用 Bean 的首字母小写的非限定类名来作为它的别名</li></ul><h4 id="（5）设置"><a href="#（5）设置" class="headerlink" title="（5）设置"></a>（5）设置</h4><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为</p><p>一个配置完整的 settings 元素的示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（6）映射器"><a href="#（6）映射器" class="headerlink" title="（6）映射器"></a>（6）映射器</h4><p>MapperRegistry：注册绑定我们的Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（7）生命周期与作用域"><a href="#（7）生命周期与作用域" class="headerlink" title="（7）生命周期与作用域"></a>（7）生命周期与作用域</h4><p>作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题</p><p>SqlSessionFactoryBuilder：</p><ul><li>一旦创建了SqlSessionFactory，就不需要它了</li><li>局部变量</li></ul><p>SqlSessionFactory：</p><ul><li>数据库连接池</li><li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例</li><li>SqlSessionFactory最佳作用域是应用作用域</li><li>最简单的就是使用单例模式或者静态单例模式 （保证全局只有一个SqlSessionFactory）</li></ul><p>SqlSession：</p><ul><li>连接到连接池的一个请求</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</li><li>用完之后需要赶紧关闭</li></ul><h3 id="5-ResultMap结果集映射"><a href="#5-ResultMap结果集映射" class="headerlink" title="5.ResultMap结果集映射"></a>5.ResultMap结果集映射</h3><p>当实体类中属性名和数据库中字段名不一致时会找不到对应字段</p><p>解决方案：</p><ul><li>在sql映射中为字段起别名，达到与实体类中属性名一致的目的</li><li>通过resultMap结果集映射，让数据库中的字段映射到实体类的属性</li></ul><h3 id="6-日志"><a href="#6-日志" class="headerlink" title="6.日志"></a>6.日志</h3><h4 id="（1）日志工厂"><a href="#（1）日志工厂" class="headerlink" title="（1）日志工厂"></a>（1）日志工厂</h4><p>如果一个数据库操作出现了异常，我们需要排错，这时候往往要用到日志。MyBatis可以开启日志工厂，具体使用哪个日志实现，在设置中设定</p><h4 id="（2）Log4j"><a href="#（2）Log4j" class="headerlink" title="（2）Log4j"></a>（2）Log4j</h4><ul><li><p>log4j简介</p><ul><li>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件……</li><li>可以控制每一条日志的输出格式</li><li>通过一个配置文件进行灵活配置，而不需要修改应用代码</li></ul></li><li><p>log4j使用</p><ul><li>导入log4j依赖</li></ul></li><li><p>写log4j.properties配置文件</p><ul><li>使用log4j类格式化输出</li></ul></li></ul><h3 id="7-分页"><a href="#7-分页" class="headerlink" title="7.分页"></a>7.分页</h3><p>分页可以减少数据处理量</p><h4 id="（1）使用Limit分页"><a href="#（1）使用Limit分页" class="headerlink" title="（1）使用Limit分页"></a>（1）使用Limit分页</h4><h4 id="（2）使用Mybatis实现分页"><a href="#（2）使用Mybatis实现分页" class="headerlink" title="（2）使用Mybatis实现分页"></a>（2）使用Mybatis实现分页</h4><ul><li>接口</li><li>Mapper.xml（sql映射配置文件）</li><li>测试</li></ul><h4 id="（3）RowBounds分页"><a href="#（3）RowBounds分页" class="headerlink" title="（3）RowBounds分页"></a>（3）RowBounds分页</h4><p>不建议在开发中使用</p><ul><li>接口</li><li>mapper.xml</li><li>测试</li></ul><h4 id="（4）分页插件"><a href="#（4）分页插件" class="headerlink" title="（4）分页插件"></a>（4）分页插件</h4><h3 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8.使用注解开发"></a>8.使用注解开发</h3><h4 id="（1）面向接口编程"><a href="#（1）面向接口编程" class="headerlink" title="（1）面向接口编程"></a>（1）面向接口编程</h4><p>面向接口编程：解耦，可拓展，提高复用，分层开发中，上层不用管具体实现</p><p>关于接口的理解：</p><ul><li>接口时定义域实现的分离</li><li>接口可以反映系统设计人员对系统的抽象理解</li></ul><p>三个面向区别：</p><ul><li>面向对象：考虑问题时，以对象为单位，考虑它属性及方法</li><li>面向过程：考虑问题时，以一个事务流程为单位，考虑它的实现</li><li>面向接口：体现对系统整体的架构</li></ul><h4 id="（2）注解开发"><a href="#（2）注解开发" class="headerlink" title="（2）注解开发"></a>（2）注解开发</h4><p>本质：反射机制实现</p><p>底层：动态代理</p><ul><li>注解在接口实现，取代了sql映射配置文件的功能</li><li>需要在核心配置我文件中绑定接口</li><li>测试</li></ul><h4 id="（3）CRUD"><a href="#（3）CRUD" class="headerlink" title="（3）CRUD"></a>（3）CRUD</h4><ul><li><p>多个参数时，所有的参数前面必须加上@Param(“id”)的注解</p></li><li><p>工具类创建时实现自动提交事务</p></li><li><p>关于@Param()注解</p><ul><li><p>基本数据类型或String类型的参数需要加上</p></li><li><p>引用类型不需要加</p></li></ul></li><li><p>#{}相较于${}可以更有效防止注解</p></li></ul><h3 id="9-Lombok"><a href="#9-Lombok" class="headerlink" title="9.Lombok"></a>9.Lombok</h3><p> Lombok是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，通过使用对应的注解，可以在编译源码的时候生成对应的方法</p><p>​    </p><h3 id="10-多对一处理"><a href="#10-多对一处理" class="headerlink" title="10.多对一处理"></a>10.多对一处理</h3><p>找到一名学生对应的老师（有多个学生是同一个老师）</p><h4 id="（1）按照查询嵌套处理"><a href="#（1）按照查询嵌套处理" class="headerlink" title="（1）按照查询嵌套处理"></a>（1）按照查询嵌套处理</h4><p>类似于sql的子查询</p><ul><li>查询所有学生信息</li><li>根据学生的tid寻找对应老师</li></ul><h4 id="（2）按照结果嵌套处理"><a href="#（2）按照结果嵌套处理" class="headerlink" title="（2）按照结果嵌套处理"></a>（2）按照结果嵌套处理</h4><h3 id="11-一对多处理"><a href="#11-一对多处理" class="headerlink" title="11.一对多处理"></a>11.一对多处理</h3><p>找到一名老师对应的多个学生</p><h4 id="（1）按照结果嵌套查询"><a href="#（1）按照结果嵌套查询" class="headerlink" title="（1）按照结果嵌套查询"></a>（1）按照结果嵌套查询</h4><h4 id="（2）按照查询嵌套查询"><a href="#（2）按照查询嵌套查询" class="headerlink" title="（2）按照查询嵌套查询"></a>（2）按照查询嵌套查询</h4><h3 id="12-动态SQL"><a href="#12-动态SQL" class="headerlink" title="12.动态SQL"></a>12.动态SQL</h3><p>动态sql就是根据不同条件生成不同的sql语句</p><p>所谓动态sql，本质上还是sql语句，只是我们可以在sql层面，去执行一个逻辑代码</p><p>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL格式排列组合即可</p><h4 id="（1）if"><a href="#（1）if" class="headerlink" title="（1）if"></a>（1）if</h4><p>根据条件拼接出不同的sql语句</p><h4 id="（2）choose-when-otherwise"><a href="#（2）choose-when-otherwise" class="headerlink" title="（2）choose (when, otherwise )"></a>（2）choose (when, otherwise )</h4><p>类似于switch语句，匹配符合条件的标签拼接成新的sql语句</p><h4 id="（3）trim-where-set"><a href="#（3）trim-where-set" class="headerlink" title="（3）trim (where, set)"></a>（3）trim (where, set)</h4><ul><li><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除</li><li><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）</li></ul><h4 id="（4）foreach"><a href="#（4）foreach" class="headerlink" title="（4）foreach"></a>（4）foreach</h4><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）</p><h3 id="13-缓存"><a href="#13-缓存" class="headerlink" title="13.缓存"></a>13.缓存</h3><h4 id="（1）缓存简介"><a href="#（1）缓存简介" class="headerlink" title="（1）缓存简介"></a>（1）缓存简介</h4><ul><li>存在内存中的临时数据</li><li>将用户经常查询的数据放在缓存中，用户去查询数据可以直接在缓存中查询，提高了查询效率，解决了高并发系统的性能问题</li><li>使用缓存可以减少与数据库交互次数，减少系统开销，提高系统效率</li><li>经常查询而且不经常改变的数据使用缓存</li></ul><h4 id="（2）Mybaiis缓存"><a href="#（2）Mybaiis缓存" class="headerlink" title="（2）Mybaiis缓存"></a>（2）Mybaiis缓存</h4><ul><li>MyBatis包含一个非常强大的查询缓存特性，非常方便定制和配置缓存，极大提高查询效率</li><li>MyBatis系统中默认定义两级缓存<ul><li>默认情况下，MyBatis开启了一级缓存（SqlSession本地缓存）</li><li>二级缓存需要手动开启和配置（基于namespace级别的缓存，我们可以通过Cache接口自定义二级缓存）</li></ul></li></ul><h4 id="（3）一级缓存"><a href="#（3）一级缓存" class="headerlink" title="（3）一级缓存"></a>（3）一级缓存</h4><ul><li>与数据库同异常会话期间查询到的数据会放到本地缓存中</li><li>以后需要获取相同数据就可以直接在缓存中拿，而不必查询数据库</li></ul><p>缓存失效的情况：</p><ul><li>查询不同的东西</li><li>增删改操作会导致刷新缓存</li><li>手动清理缓存</li></ul><h4 id="（4）二级缓存"><a href="#（4）二级缓存" class="headerlink" title="（4）二级缓存"></a>（4）二级缓存</h4><p>二级缓存又叫全局缓存，一个命名空间对应一个二级缓存</p><p>二级缓存工作机制：</p><ul><li>一个会话查询的数据会被放在当前会话的一级缓存中</li><li>如果会话关闭，这个会话对应的一级缓存就被清除了</li><li>但是如果开启了二级缓存，会话关闭后，缓存的数据可以被保存在二级缓存中</li><li>新的会话查询就可以从二级缓存中获取内容</li></ul><h4 id="（5）自定义缓存（ehcache）"><a href="#（5）自定义缓存（ehcache）" class="headerlink" title="（5）自定义缓存（ehcache）"></a>（5）自定义缓存（ehcache）</h4><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="1-初识Spring"><a href="#1-初识Spring" class="headerlink" title="1.初识Spring"></a>1.初识Spring</h3><h4 id="（1）Spring简介"><a href="#（1）Spring简介" class="headerlink" title="（1）Spring简介"></a>（1）Spring简介</h4><p>Spring是针对企业级开发的框架，是技术使用更将方便，整合了现有的技术框架</p><ul><li>SSH：Struct2 + Spring + Hibernate</li><li>SSM：SpringMCV + Spring + Mybatis</li></ul><h4 id="（2）-Spring优点"><a href="#（2）-Spring优点" class="headerlink" title="（2） Spring优点"></a>（2） Spring优点</h4><ul><li>轻量级，非入侵式</li><li>开源的免费框架</li><li>控制反转（IOC），面向切面（AOP）编程</li><li>支持事物处理，对框架整合的支持</li></ul><h4 id="（3）Spring组成"><a href="#（3）Spring组成" class="headerlink" title="（3）Spring组成"></a>（3）Spring组成</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040933389.png" alt="image-20210604151457606"></p><h4 id="（4）扩展"><a href="#（4）扩展" class="headerlink" title="（4）扩展"></a>（4）扩展</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040933978.png" alt="image-20210604151952837"></p><p><strong>Spring Boot</strong></p><ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速的开发单个微服务。</li><li>约定大于配置</li></ul><p><strong>Spring Cloud</strong></p><ul><li>SpringCloud是基于SpringBoot实现的</li></ul><h3 id="2-IOC理论推导"><a href="#2-IOC理论推导" class="headerlink" title="2.IOC理论推导"></a>2.IOC理论推导</h3><h4 id="（1）经典Java应用分层"><a href="#（1）经典Java应用分层" class="headerlink" title="（1）经典Java应用分层"></a>（1）经典Java应用分层</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040933172.png" alt="image-20210604153048214"></p><h4 id="（2）控制反转的思想"><a href="#（2）控制反转的思想" class="headerlink" title="（2）控制反转的思想"></a>（2）控制反转的思想</h4><p>程序不在主动创建对象，而是被动的接受对象（控制权从程序转移到用户）。反转了，我们不负责创建对象，我们只被动处理对象</p><p><strong>反转前：</strong>用户只能使用我们准备好的对象，有其他需求我们要额外新增修改</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934924.png" alt="image-20210604154725356"></p><p><strong>反转后：</strong>用户可以任意创建对象，我们只负责去处理这些类</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934307.png" alt="image-20210604154631248"></p><h4 id="（3）IOC本质"><a href="#（3）IOC本质" class="headerlink" title="（3）IOC本质"></a>（3）IOC本质</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934274.png" alt="image-20210604155144289"></p><p>IOC就是为了解耦，让各个对象的依赖关系减弱</p><p>控制反转是一种通过描述（xml或注解）并通过第三方去生产或获取特定对象的方式。在Spring中，实现控制反转的loC容器，其实现方法就是依赖注入（DI）</p><h3 id="3-Spring初体验"><a href="#3-Spring初体验" class="headerlink" title="3.Spring初体验"></a>3.Spring初体验</h3><h4 id="（1）xml法"><a href="#（1）xml法" class="headerlink" title="（1）xml法"></a>（1）xml法</h4><ul><li>配置元数据：使用Spring创建对象，在Spring中称为bean </li><li>bean相当于new了一个对象</li><li>获取spring的上下文对象，从xml提取出对象</li><li>IOC变成实现：由主动编程变为被动接收</li><li>所谓IOC就是对象由Spring来创建，管理，装配</li></ul><h4 id="（2）IOC创建对象的方式"><a href="#（2）IOC创建对象的方式" class="headerlink" title="（2）IOC创建对象的方式"></a>（2）IOC创建对象的方式</h4><ul><li>无参构造（默认方法）</li><li>有参构造：<ul><li>下标赋值</li><li>类型赋值（不建议使用）</li><li>参数名赋值</li></ul></li><li>在配置XML文件加载的时候，容器中管理的对象就已经初始化了，即使在没有getbean这个对象，但是其已经在Spring容器中创建</li></ul><h3 id="4-Spring配置"><a href="#4-Spring配置" class="headerlink" title="4.Spring配置"></a>4.Spring配置</h3><h4 id="（1）别名"><a href="#（1）别名" class="headerlink" title="（1）别名"></a>（1）别名</h4><p>​    除了对象名，我们也可以起小名来找到这个对象</p><h4 id="（2）Bean的配置"><a href="#（2）Bean的配置" class="headerlink" title="（2）Bean的配置"></a>（2）Bean的配置</h4><ul><li>id：bean的唯一标识符，也就是相当于我们学的对象名 </li><li>class：bean对象所对应的全限定名：包名+类名    </li><li>name：也是别名，而且name可以同时取多个别名</li></ul><h4 id="（3）import"><a href="#（3）import" class="headerlink" title="（3）import"></a>（3）import</h4><p>​    用于不同人开发的bean.xml文件合并在一起</p><h4 id="（4）Bean与Spring容器的关系"><a href="#（4）Bean与Spring容器的关系" class="headerlink" title="（4）Bean与Spring容器的关系"></a>（4）Bean与Spring容器的关系</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934089.png" alt="image-20210604163430319"></p><h3 id="5-依赖注入"><a href="#5-依赖注入" class="headerlink" title="5.依赖注入"></a>5.依赖注入</h3><h4 id="（1）-构造器注入"><a href="#（1）-构造器注入" class="headerlink" title="（1） 构造器注入"></a>（1） 构造器注入</h4><p>当实体对象有有参构造方法的时候，需要使用构造器注入construct-args</p><h4 id="（2）Set方式注入"><a href="#（2）Set方式注入" class="headerlink" title="（2）Set方式注入"></a>（2）Set方式注入</h4><ul><li><p>依赖：bean对象的创建依赖于容器</p></li><li><p>注入：bean对象中的所有属性，由容器来注入</p></li><li><p>普通型注入：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种：普通值注入，value        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黑心白莲&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Bean注入（注入另一对象实体，其也需要在bean中注册）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种：--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>数组型注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数组        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>List型注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>打篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>敲代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Map型注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456789987456321&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;359419496419481649&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Set型注入</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Set        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>NULL型注入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--NULL        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Properties型注入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Properties        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>20191029<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>102.0913.524.4585<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;user&quot;</span>&gt;</span>黑心白莲<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（3）其他注入方式"><a href="#（3）其他注入方式" class="headerlink" title="（3）其他注入方式"></a>（3）其他注入方式</h4><p>可以使用p命名空间和c命名空间进行注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--p命名空间注入，可以直接注入属性的值：property--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;黑心白莲&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--c命名空间注入，通过构造器注入：constructor-args--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;狂神&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;22&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-Bean解析"><a href="#6-Bean解析" class="headerlink" title="6.Bean解析"></a>6.Bean解析</h3><h4 id="（1）Bean的作用域"><a href="#（1）Bean的作用域" class="headerlink" title="（1）Bean的作用域"></a>（1）Bean的作用域</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934289.png" alt="image-20210605114941989"></p><p>Spring默认使用单例模式（singleton）</p><h4 id="（2）Bean的自动装配"><a href="#（2）Bean的自动装配" class="headerlink" title="（2）Bean的自动装配"></a>（2）Bean的自动装配</h4><ul><li>手动装配：每一个属性都要自己去设置</li><li>自动装配是Spring满足bean依赖一种方式</li><li>Spring会在上下文中自动寻找，并自动给bean装配属性（）</li></ul><p><strong>自动装配类型：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934247.png" alt="image-20210605115608244"></p><ul><li>byName:   会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean id；</li><li>byType：会自动在容器上下文中查找，和自己对象属性类型相同的bean；</li></ul><h3 id="7-使用注解开发"><a href="#7-使用注解开发" class="headerlink" title="7.使用注解开发"></a>7.使用注解开发</h3><h4 id="（1）注解配置"><a href="#（1）注解配置" class="headerlink" title="（1）注解配置"></a>（1）注解配置</h4><ul><li>导入约束</li><li>配置注解的支持： <code>&lt;context:annotation-config/&gt;</code></li></ul><h4 id="（2）-Autowired注解"><a href="#（2）-Autowired注解" class="headerlink" title="（2）@Autowired注解"></a>（2）@Autowired注解</h4><ul><li>可以在属性或者set方法上使用</li><li>使用Autowired方法就可以不用编写set方法（但是需要使用自动装配，且符合命名ByName）</li></ul><p><strong>不使用注解：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>使用注解：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果显式定义了Autowired的required属性为false，说明这个对象可以为null，否则不允许为空</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// set的方法都被省略掉了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）-Qualifier注解"><a href="#（3）-Qualifier注解" class="headerlink" title="（3）@Qualifier注解"></a>（3）@Qualifier注解</h4><ul><li><p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解【@Autowired】完成的时候，我们可以使用@Qualifier(value = “xxx”)去配置@Autowired的使用，指定一个唯一的bean对象注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;cat111&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;dog222&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="（4）-Resource注解"><a href="#（4）-Resource注解" class="headerlink" title="（4）@Resource注解"></a>（4）@Resource注解</h4><p>@Resource和@Autowired的区别：</p><ul><li>都是用来自动装配的，都可以放在属性字段上</li><li>@Autowired通过byType的方式实现，而且必须要求这个对象存</li><li>@Resource默认通过byName的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错</li><li>执行顺序不同：@Autowired通过byType的方式实现。</li></ul><h4 id="（5）使用注解开发"><a href="#（5）使用注解开发" class="headerlink" title="（5）使用注解开发"></a>（5）使用注解开发</h4><p><strong>属性注入：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等价于&lt;bean id=&quot;user&quot;class=&quot;com.kuang.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="comment">//@Component 组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于  &lt;property name=&quot;name&quot; value=&quot;白莲&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;白莲&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>衍生的注解：</strong></p><p>@Component有几个衍生的注解，按照mvc三层架构分层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dao 【@Repository】</span><br><span class="line">service 【@Service】</span><br><span class="line">controller 【@Controller】</span><br></pre></td></tr></table></figure><p><strong>自动装配：</strong></p><ul><li>@Autowired：自动装配通过类型，名字。如果Autowired不能唯一自动装配上属性，则需要通过@Qualifier(value = “xxx”)去配置。 </li><li>@Nullable 字段标记了了这个注解，说明这个字段可以为null; </li><li>@Resource：自动装配通过名字，类型</li></ul><h4 id="（6）注解与xml"><a href="#（6）注解与xml" class="headerlink" title="（6）注解与xml"></a>（6）注解与xml</h4><ul><li>xml更加万能，适用于任何场合，维护简单方便</li><li>注解不是自己类使用不了，维护相对复杂</li><li>最佳的实践是：注解只负责完成属性的注入，xml用来管理bean</li></ul><h3 id="8-Java配置Spring"><a href="#8-Java配置Spring" class="headerlink" title="8.Java配置Spring"></a>8.Java配置Spring</h3><p>完全抛弃xml配置，采用JavaConfig来配置Spring</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个也会Spring容器托管，注册到容器中，因为它本来就是一个@Component</span></span><br><span class="line"><span class="comment">// @Configuration代表这是一个配置类，就和我们之前看的beans.xml</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.autovy.pojo&quot;)</span></span><br><span class="line"><span class="meta">@Import(AutovyConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutovyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册一个bean，就相当于我们之前写的一个bean标签</span></span><br><span class="line">    <span class="comment">// 这个方法的名字，就相当于bean标签中id属性</span></span><br><span class="line">    <span class="comment">// 这个方法的返回值，就相当于bean标签中的class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> user(); <span class="comment">// 就是返回要注入到bean的对象！</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="9-代理模式"><a href="#9-代理模式" class="headerlink" title="9.代理模式"></a>9.代理模式</h3><p>真实角色通过他们的替身——代理对象进行交流</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934761.png" alt="image-20210605150430423"></p><h4 id="（1）静态代理"><a href="#（1）静态代理" class="headerlink" title="（1）静态代理"></a>（1）静态代理</h4><p><strong>角色分析：</strong></p><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作</li><li>客户：访问代理对象的人！</li></ul><p><strong>实现过程：</strong></p><ul><li>代理对象组合目标对象，并帮忙为目标对象实现接口的附加方法</li><li>客户只需要访问代理对象即可</li></ul><p><strong>代理模式好处：</strong></p><ul><li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li><li>公共角色就交给代理角色！实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理！</li><li>一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率会变低</li></ul><h4 id="（2）动态代理"><a href="#（2）动态代理" class="headerlink" title="（2）动态代理"></a>（2）动态代理</h4><p>动态代理的代理类是自动生成的，可以分为：基于接口的动态代理（JDK动态代理），基于类的动态代理（cglib）两种</p><h4 id><a href="#" class="headerlink" title></a></h4><p><strong>动态代理的好处：</strong></p><ul><li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li><li>公共角色就交给代理角色！实现了业务的分工！</li><li>公共业务发生扩展的时候，方便集中管理！</li><li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li><li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可</li></ul><h3 id="10-AOP详解"><a href="#10-AOP详解" class="headerlink" title="10.AOP详解"></a>10.AOP详解</h3><h4 id="（1）AOP实现机制"><a href="#（1）AOP实现机制" class="headerlink" title="（1）AOP实现机制"></a>（1）AOP实现机制</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934449.png" alt="image-20210605153837739"></p><h4 id="（2）AOP简介"><a href="#（2）AOP简介" class="headerlink" title="（2）AOP简介"></a>（2）AOP简介</h4><ul><li>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术</li><li>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934769.png" alt="image-20210605153954045"></p><h4 id="（3）AOP在Spring中"><a href="#（3）AOP在Spring中" class="headerlink" title="（3）AOP在Spring中"></a>（3）AOP在Spring中</h4><p>AOP在不改变原有代码的情况下，增加新的功能</p><p>有三种实现方法：</p><ul><li>Spring的API接口实现</li><li>自定义类来实现AOP</li><li>使用注解实现</li></ul><h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><h3 id="1-MCV解析"><a href="#1-MCV解析" class="headerlink" title="1.MCV解析"></a>1.MCV解析</h3><h4 id="（1）MCV简介"><a href="#（1）MCV简介" class="headerlink" title="（1）MCV简介"></a>（1）MCV简介</h4><ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范</li><li>最典型的MVC就是JSP（视图） + servlet（控制器） + javabean（模型）的模式</li><li>Model：提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务</li><li>View：负责进行模型的展示，即用户界面</li><li>Controller：接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示</li></ul><h4 id="（2）MCV架构图"><a href="#（2）MCV架构图" class="headerlink" title="（2）MCV架构图"></a>（2）MCV架构图</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934521.png" alt="image-20210605210445145"></p><p><strong>Model1时代：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934842.png" alt="image-20210605210725858"></p><p><strong>Model2时代：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934260.png" alt="image-20210605210745980"></p><h4 id="（3）MVC框架的工作"><a href="#（3）MVC框架的工作" class="headerlink" title="（3）MVC框架的工作"></a>（3）MVC框架的工作</h4><ul><li>将url映射到java类或java类的方法 .</li><li>封装用户提交的数据 .</li><li>处理请求–调用相关的业务处理–封装响应数据 .</li><li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li></ul><h3 id="2-初识Spring-MCV"><a href="#2-初识Spring-MCV" class="headerlink" title="2.初识Spring MCV"></a>2.初识Spring MCV</h3><h4 id="（1）Spring-MCV简介"><a href="#（1）Spring-MCV简介" class="headerlink" title="（1）Spring MCV简介"></a>（1）Spring MCV简介</h4><p>spring mcv特点：</p><ul><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ul><h4 id="（2）Spring-MCV中心控制器"><a href="#（2）Spring-MCV中心控制器" class="headerlink" title="（2）Spring MCV中心控制器"></a>（2）Spring MCV中心控制器</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934228.png" alt="image-20210605211539442"></p><p>Spring MCV  以请求为驱动 , 围绕一个中心Servlet分派请求及提供其他功能，而这个中心就是<strong>DispatcherServlet</strong>(它是继承自HttpServlet 基类)</p><h3 id="3-Spring-MCV处理流程"><a href="#3-Spring-MCV处理流程" class="headerlink" title="3.Spring MCV处理流程"></a>3.Spring MCV处理流程</h3><h4 id="（1）Spring-MCV处理流程"><a href="#（1）Spring-MCV处理流程" class="headerlink" title="（1）Spring MCV处理流程"></a>（1）Spring MCV处理流程</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934444.png" alt="image-20210605212007518"></p><p>更加详细的展示如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040934219.png" alt="image-20210606152658001"></p><p>图上的连线表示SpringMVC框架已提供的技术，而需要进行开发的部分有：</p><ul><li>Handler处理器到数据库的部分</li><li>Handler处理器到模型的部分</li><li>视图到模型的部分</li><li>视图解析器到视图的部分</li></ul><h4 id="（2）Spring-MCV处理流程代码实现（配置版）"><a href="#（2）Spring-MCV处理流程代码实现（配置版）" class="headerlink" title="（2）Spring MCV处理流程代码实现（配置版）"></a>（2）Spring MCV处理流程代码实现（配置版）</h4><ul><li>编写配置文件</li><li>注册DispatcherServlet</li><li>添加处理映射器</li><li>添加处理适配器</li><li>添加视图解析器</li><li>编写业务Controller，返回ModelAndView（装数据，封视图）</li><li>将Controllor类注册到bean，形成映射</li><li>视图渲染显示ModellandView存放的数据</li></ul><h4 id="（3）Spring-MCV处理流程代码实现（注解版）"><a href="#（3）Spring-MCV处理流程代码实现（注解版）" class="headerlink" title="（3）Spring MCV处理流程代码实现（注解版）"></a>（3）Spring MCV处理流程代码实现（注解版）</h4><ul><li><p>实现步骤：</p><ul><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>接下来就是去创建对应的控制类 , controller</li><li>最后完善前端视图和controller之间的对应</li><li>测试运行调试.</li></ul></li><li><p>配置相关：使用springMVC必须配置的三大件：处理器映射器、处理器适配器、视图解析器</p></li><li><p>通常，我们只需要手动配置视图解析器，而处理器映射器和处理器适配器只需要开启注解驱动即可，而省去了大段的xml配置</p></li><li><p>解决Maven资源过滤的问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在pom.xml文件引入相关的依赖</p><p>主要有Spring框架核心库、Spring MVC、servlet , JSTL等</p></li></ul><ul><li>配置web.xml<ul><li>注意web.xml版本问题，要最新版！</li><li>注册DispatcherServlet</li><li>关联SpringMVC的配置文件</li><li>启动级别为1</li><li>映射路径为 / 【不要用/*，会404】</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加Spring MVC配置文件<ul><li>让IOC的注解生效</li><li>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …..</li><li>MVC的注解驱动</li><li>配置视图解析器</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让Spring MVC不处理静态资源 过滤掉一些静态资源，如.css  .js  .html .mp3--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">支持mvc注解驱动</span></span><br><span class="line"><span class="comment">    在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">    要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">    必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">    和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">    这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">    而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问</p><ul><li><p>创建Controller</p><p>使用注解编写控制类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span><span class="comment">//多添加一级访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//真实访问地址 : 项目名/HelloController/hello</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span><span class="comment">//请求路径</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello,SpringMVC，我是成博&quot;</span>);</span><br><span class="line">        <span class="comment">//会被视图解析器处理，web-inf/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp</li></ul></li></ul><ul><li><p>创建视图层</p><p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-Controller的定义"><a href="#4-Controller的定义" class="headerlink" title="4.Controller的定义"></a>4.Controller的定义</h3><h4 id="（1）实现接口Controller定义控制器法"><a href="#（1）实现接口Controller定义控制器法" class="headerlink" title="（1）实现接口Controller定义控制器法"></a>（1）实现接口Controller定义控制器法</h4><p>该方法是较老的方法，而且定义方式比较麻烦，已不再广泛使用</p><h4 id="（2）使用注解-Controller法"><a href="#（2）使用注解-Controller法" class="headerlink" title="（2）使用注解@Controller法"></a>（2）使用注解@Controller法</h4><p>@Controller注解类型用于声明Spring类的实例是一个控制器</p><p>为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-RestFul-风格"><a href="#5-RestFul-风格" class="headerlink" title="5.RestFul 风格"></a>5.RestFul 风格</h3><h4 id="（1）功能介绍"><a href="#（1）功能介绍" class="headerlink" title="（1）功能介绍"></a>（1）功能介绍</h4><ul><li>资源：互联网所有的事物都可以被抽象为资源</li><li>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</li><li>分别对应 添加、 删除、修改、查询</li></ul><p>（2）@PathVariable 注解</p><p>@PathVariable 注解，可以让方法参数的值对应绑定到一个URL模板变量上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//原来的 :  http://localhost: 8080/add?a=1&amp;b=2</span></span><br><span class="line">    <span class="comment">//RestFul :  http://localhost : 8080/add/1/2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//映射访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> p1, <span class="meta">@PathVariable</span> <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">        <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">        <span class="comment">//返回视图位置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）指定请求类型"><a href="#（2）指定请求类型" class="headerlink" title="（2）指定请求类型"></a>（2）指定请求类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以使用组合注解指定请求类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@PatchMapping</span></span><br></pre></td></tr></table></figure><h3 id="6-SpringMVC的结果跳转"><a href="#6-SpringMVC的结果跳转" class="headerlink" title="6.SpringMVC的结果跳转"></a>6.SpringMVC的结果跳转</h3><h4 id="（1）ModelAndView"><a href="#（1）ModelAndView" class="headerlink" title="（1）ModelAndView"></a>（1）ModelAndView</h4><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><h4 id="（2）ServletAPI"><a href="#（2）ServletAPI" class="headerlink" title="（2）ServletAPI"></a>（2）ServletAPI</h4><p>通过设置ServletAPI , 不需要视图解析器 .</p><ul><li>通过HttpServletResponse进行输出</li><li>通过HttpServletResponse实现重定向</li><li>通过HttpServletResponse实现转发</li></ul><h4 id="（3）SpringMVC"><a href="#（3）SpringMVC" class="headerlink" title="（3）SpringMVC"></a>（3）SpringMVC</h4><ul><li>通过SpringMVC来实现转发和重定向 - 无需视图解析器</li><li>通过SpringMVC来实现转发和重定向 - 有视图解析器</li></ul><h3 id="7-数据处理"><a href="#7-数据处理" class="headerlink" title="7.数据处理"></a>7.数据处理</h3><h4 id="（1）处理提交的数据"><a href="#（1）处理提交的数据" class="headerlink" title="（1）处理提交的数据"></a>（1）处理提交的数据</h4><ul><li><p>提交的域名称和处理方法的参数名一致</p><p>提交数据 : <code>[http://localhost](http://localhost/):8080/hello?name=test</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>提交的域名称和处理方法的参数名不一致</p><p>提交数据：<code>[http://localhost](http://localhost/):8080/hello?username=test</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提交的是一个对象</p><p>如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null</p><p>提交数据：<code>http://localhost:8080/user?name=test&amp;id=1&amp;age=15</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="（2）数据显示到前端"><a href="#（2）数据显示到前端" class="headerlink" title="（2）数据显示到前端"></a>（2）数据显示到前端</h4><ul><li>通过ModelAndView：可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转</li><li>通过ModelMap：继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性</li><li>通过Model：只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解</li><li>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040933389.png&quot; alt=&quot;image-20210604151457606&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://autovy.github.io/categories/Java/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Java" scheme="https://autovy.github.io/tags/Java/"/>
    
      <category term="框架学习" scheme="https://autovy.github.io/tags/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java|网络爬虫项目</title>
    <link href="https://autovy.github.io/2021/04/26/Java-%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB/"/>
    <id>https://autovy.github.io/2021/04/26/Java-%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB/</id>
    <published>2021-04-26T06:30:00.000Z</published>
    <updated>2021-09-04T01:43:06.946Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040942707.jpeg" alt="logo"></p><span id="more"></span><h3 id="idea基本设置"><a href="#idea基本设置" class="headerlink" title="idea基本设置"></a>idea基本设置</h3><p>File&gt;Setting打开idea基本设置，可以更改字体主题，安装插件等</p><p>建议安装中文翻译插件和Codota插件</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040940118.png" alt="image-20210507095023736"></p><h3 id="idea创建项目"><a href="#idea创建项目" class="headerlink" title="idea创建项目"></a>idea创建项目</h3><h4 id="1-参考文章"><a href="#1-参考文章" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://www.jianshu.com/p/e2c17c3460de">IDEA新建一般Java项目</a></p><p><a href="https://blog.csdn.net/shaxu123/article/details/97097296">语言版本和环境版本不一致导致错误</a>：Error:java: 无效的源发行版</p><h4 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）配置"><a href="#（1）配置" class="headerlink" title="（1）配置"></a>（1）配置</h5><p>新建一般Java项目时，一般选择默认配置进行</p><h5 id="（2）打开项目"><a href="#（2）打开项目" class="headerlink" title="（2）打开项目"></a>（2）打开项目</h5><p>打开的项目文件时，文件结构如下，文件路径多出一层或少一层文件，idea都不能识别出该项目（程序文件都要放到src文件中）：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941220.png" alt="image-20210507092554533"></p><h5 id="（3）配置修改"><a href="#（3）配置修改" class="headerlink" title="（3）配置修改"></a>（3）配置修改</h5><p>项目结构（文件 &gt; 项目结构）中可以修改项目的一些配置（可设置项目，模块的语言级别）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941155.png" alt="image-20210507095156216"></p><h5 id="（4）标记目录"><a href="#（4）标记目录" class="headerlink" title="（4）标记目录"></a>（4）标记目录</h5><p>标记目录可以自定义源根目录等，一般不改动，默认src为源根目录</p><h5 id="（5）添加Maven框架"><a href="#（5）添加Maven框架" class="headerlink" title="（5）添加Maven框架"></a>（5）添加Maven框架</h5><p>在Java一般项目中没有meavn的选项，可以在后期加上Maven框架支持</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941147.png" alt="image-20210507101055813"></p><p>添加了Maven框架后，还需要重新加载Maven项目即可完成框架添加</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941626.png" alt="image-20210507101357206"></p><h3 id="配置meavn"><a href="#配置meavn" class="headerlink" title="配置meavn"></a>配置meavn</h3><h4 id="1-参考文章-1"><a href="#1-参考文章-1" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://zhuanlan.zhihu.com/p/122429605">Meavn配置过程</a></p><p><a href="https://blog.csdn.net/stone_fall/article/details/108140716">依赖添加错误</a></p><p><a href="https://blog.csdn.net/qq_34412985/article/details/104410574">手动添加jar包</a></p><h4 id="2-注意事项-1"><a href="#2-注意事项-1" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）maven配置"><a href="#（1）maven配置" class="headerlink" title="（1）maven配置"></a>（1）maven配置</h5><p>idea有自己自带的maven，如果想自定义到自己下载的maven文件，可以在设置中修改（这样的修改只是针对该项目，新建的项目还是使用默认的maven）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941483.png" alt="image-20210507100212095"></p><ul><li>设置主目录</li><li>用户设置文件指向maven的setting文件</li><li>可以新建一个文件用于存储本地库</li></ul><h5 id="（2）Meavn创建项目"><a href="#（2）Meavn创建项目" class="headerlink" title="（2）Meavn创建项目"></a>（2）Meavn创建项目</h5><p>除了在一般项目创建后再添加Maven框架，我们也可以直接使用Meavn框架创建项目</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941163.png" alt="image-20210507101919573"></p><p>区别于一般的Java项目，使用Meavn框架创建的会在src新建两个文件夹：main（放主程序）和test（放测试程序）</p><h5 id="（3）meavn添加包"><a href="#（3）meavn添加包" class="headerlink" title="（3）meavn添加包"></a>（3）meavn添加包</h5><ul><li>通过pom.xml添加依赖</li></ul><p>在pom.xml文件中添加<code>&lt;dependency&gt;&lt;/dependency&gt;</code>标签，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要注意要是在<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>内添加依赖</p><p>我们可以通过<a href="https://mvnrepository.com/artifact/org.eclipse.ditto/ditto-base-api/2.0.0">Maven Repositor</a>查找对应包的依赖项xml文本</p><p>最后加载Maven包变更完成依赖项的添加</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941753.png" alt="image-20210507103208170"></p><ul><li>手动添加jar包</li></ul><p>meavn找不到相关包时，可以直接下载jar文件到本地包，放在刚刚设置Maven本地库存储文件中，然后使用maven导入</p><h3 id="爬虫配置"><a href="#爬虫配置" class="headerlink" title="爬虫配置"></a>爬虫配置</h3><h4 id="1-参考文章-2"><a href="#1-参考文章-2" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="http://webmagic.io/docs/zh/">WebMagic 文档</a></p><p><a href="https://www.cnblogs.com/justcooooode/p/7913365.html#_label0">出现log4j警告解决方法</a></p><p><a href="https://www.cnblogs.com/justlove/p/7637681.html">出现了SLF4J的报错解决方法</a>：添加依赖即解决</p><p><a href="http://webmagic.io/docs/zh/posts/ch4-basic-page-processor/">文档中爬虫基本使用介绍</a></p><h4 id="2-注意事项-2"><a href="#2-注意事项-2" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）爬虫框架添加"><a href="#（1）爬虫框架添加" class="headerlink" title="（1）爬虫框架添加"></a>（1）爬虫框架添加</h5><p>爬虫框架采用了易于上手的WebMagic框架，在pom.xml文件中添加相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="（2）无法爬取网页"><a href="#（2）无法爬取网页" class="headerlink" title="（2）无法爬取网页"></a>（2）无法爬取网页</h5><p>无法爬取TLS1.2协议站点的问题</p><p>在依赖中把WebMagica改成最新版本（0.7.4以上）即可解决</p><h5 id="（3）SLF4J报错"><a href="#（3）SLF4J报错" class="headerlink" title="（3）SLF4J报错"></a>（3）SLF4J报错</h5><p>出现了SLF4J报错可以添加以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="（4）爬取方法"><a href="#（4）爬取方法" class="headerlink" title="（4）爬取方法"></a>（4）爬取方法</h5><ul><li>实现实现PageProcessor接口，设置爬虫相关配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Site site = Site.me()</span><br><span class="line">        .setCharset(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">        .setRetryTimes(<span class="number">3</span>)</span><br><span class="line">        .setSleepTime(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><ul><li>process编写抽取逻辑，可以定义爬取页面的规则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 爬取title放入父类私有属性中</span></span><br><span class="line">    List title = page.getHtml()</span><br><span class="line">        .css(<span class="string">&quot;li &gt; div &gt; div.details &gt; span.link.h-cite.u-repost-of &gt; a&quot;</span>)</span><br><span class="line">        .regex(<span class="string">&quot;&gt;(.+)&lt;/a&gt;&quot;</span>,<span class="number">1</span>)</span><br><span class="line">        .all();</span><br><span class="line">        </span><br><span class="line">    set_title(title);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Spider类执行爬虫</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Spider.create(obj)</span><br><span class="line">      .addUrl(url)</span><br><span class="line">      <span class="comment">//开启4个线程抓取</span></span><br><span class="line">      .thread(<span class="number">4</span>)</span><br><span class="line">      <span class="comment">//启动爬虫</span></span><br><span class="line">      .run();</span><br></pre></td></tr></table></figure><h5 id="（5）正则匹配问题"><a href="#（5）正则匹配问题" class="headerlink" title="（5）正则匹配问题"></a>（5）正则匹配问题</h5><p>WebMagic链式抽取元素中使用的正则是不区分大小写的</p><h3 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h3><h4 id="1-参考文章-3"><a href="#1-参考文章-3" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://blog.csdn.net/XJ0927/article/details/108229970">IDEA单元测试设置过程</a></p><p><a href="http://www.justdojava.com/2019/07/20/debug-in-idea/">深入学习 Intellij IDEA 调试技巧</a></p><h4 id="2-单元测试"><a href="#2-单元测试" class="headerlink" title="2.单元测试"></a>2.单元测试</h4><h5 id="（1）单元测试理解"><a href="#（1）单元测试理解" class="headerlink" title="（1）单元测试理解"></a>（1）单元测试理解</h5><p>单元测试实质上是在主运行程序之外，为某个方法创建单独的测试程序，而不必只有一个执行入口进入程序</p><h5 id="（2）单元测试特殊情况"><a href="#（2）单元测试特殊情况" class="headerlink" title="（2）单元测试特殊情况"></a>（2）单元测试特殊情况</h5><p>抽象方法在单元测试时不能被调用，因为抽象类不能有实例不能直接调用</p><h5 id="（3）单元测试使用案例"><a href="#（3）单元测试使用案例" class="headerlink" title="（3）单元测试使用案例"></a>（3）单元测试使用案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 爬取工具类测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">spider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Tool().spider(<span class="keyword">new</span> Lobsters() ,<span class="string">&quot;https://lobste.rs/&quot;</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="（4）单元测试生成"><a href="#（4）单元测试生成" class="headerlink" title="（4）单元测试生成"></a>（4）单元测试生成</h5><p>idea可以快捷为类生成一个测试类，并可以勾选生成测试方法</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941641.png" alt="image-20210508081411414"></p><h4 id="3-单步调试"><a href="#3-单步调试" class="headerlink" title="3.单步调试"></a>3.单步调试</h4><h5 id="（1）断点设置"><a href="#（1）断点设置" class="headerlink" title="（1）断点设置"></a>（1）断点设置</h5><p>设置断点可以让程序在调试时从入口开始执行到断点所在代码</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941178.png" alt="image-20210508083551638"></p><p>不设断点调试，程序会执行完全部代码，无法实现单步调试</p><h5 id="（2）调试显示"><a href="#（2）调试显示" class="headerlink" title="（2）调试显示"></a>（2）调试显示</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040941715.png" alt="image-20210508084409131"></p><ul><li>重新调试：当单步调试进入加载类等奇怪的地方时，可以重新调试，直到断点出现勾号，说明调试成功</li><li>调试过程中，步过（<strong>Setp Over</strong>）使用频率最高，当碰到方法时，不会进入方法内，而是直接调用方法，然后进入下一行</li><li>步进（ <strong>Step Into</strong>）则会进入方法内</li></ul><h3 id="构造子类"><a href="#构造子类" class="headerlink" title="构造子类"></a>构造子类</h3><h4 id="1-参考文章-4"><a href="#1-参考文章-4" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://blog.csdn.net/HD243608836/article/details/89155433">java中父类与子类有相同属性调谁？取决于左边</a></p><p><a href="https://blog.csdn.net/dxtianlei/article/details/99299051">父类私有属性和私有方法的继承</a></p><p><a href="https://blog.csdn.net/ccpat/article/details/44515335">Java this 关键字用法</a></p><h4 id="2-注意事项-3"><a href="#2-注意事项-3" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）子类属性继承问题"><a href="#（1）子类属性继承问题" class="headerlink" title="（1）子类属性继承问题"></a>（1）子类属性继承问题</h5><ul><li><p>子类是继承了父类的私有属性和私有方法，只是子类没有权限直接访问父类的私有属性和私有方法。但是我们可以通过继承父类get和set方法访问到父类的私有属性</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改私有属性方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set_title</span><span class="params">(List title)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问私有属性方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">show_title</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>父类属性不可被重写,只会被调用,父类方法可以被重写,也可以被调用</p></li><li><p>当子类中存在和父类同名属性,父类属性会隐藏起来,在多态的情况下属性被调用时会激活父类属性子类属性隐藏起来,而方法不会隐藏,一旦被重写,只能使用super来在子类调用</p></li></ul><h5 id="（2）继承中this指向问题"><a href="#（2）继承中this指向问题" class="headerlink" title="（2）继承中this指向问题"></a>（2）继承中this指向问题</h5><ul><li>对于方法的覆盖，new的谁就调谁，这就是多态。</li><li>对于成员变量的覆盖，this在哪个类就指向哪个类的成员变量，没有多态。</li><li>无论子类是否覆盖成员变量，this始终访问父类的成员变量</li><li>静态方法中，无法使用this引用上下文内容（属性，方法）</li></ul><h5 id="（3）抽象方法使用问题"><a href="#（3）抽象方法使用问题" class="headerlink" title="（3）抽象方法使用问题"></a>（3）抽象方法使用问题</h5><ul><li>抽象类是作为一个模板存在的，不能创建抽象类对象，需要用子类实现所有其抽象方法后变为非抽象类才能间接实例化</li><li>抽象方法只有声明没有实现（对于不知道该怎么实现的方法，我们可以声明为抽象方法），强制子类必须重写抽象方法</li></ul><h3 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h3><h4 id="1-参考文章-5"><a href="#1-参考文章-5" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://www.geeksforgeeks.org/md5-hash-in-java/">Java实现md5加密</a></p><p><a href="https://blog.csdn.net/Littleflowers/article/details/113955196">Java内部类实现http请求</a></p><p><a href="https://www.cnblogs.com/liaohuiqiang/p/7627022.html">http请求与多线程</a></p><p><a href="https://blog.csdn.net/foxpeter/article/details/23475293">URL中关于空格的编码</a></p><h4 id="2-注意事项-4"><a href="#2-注意事项-4" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）Http请求实现"><a href="#（1）Http请求实现" class="headerlink" title="（1）Http请求实现"></a>（1）Http请求实现</h5><ul><li><p>get请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">String urlNameString = url + <span class="string">&#x27;?&#x27;</span> + param;</span><br><span class="line">URL realUrl = <span class="keyword">new</span> URL(urlNameString);</span><br><span class="line"><span class="comment">// 打开链接，强转换为httpURLConnection类</span></span><br><span class="line">URLConnection connection = realUrl.openConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置通用请求属性</span></span><br><span class="line">connection.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">connection.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">connection.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>,<span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span>);</span><br><span class="line"><span class="comment">// 建立实际链接</span></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求成功获得输入流</span></span><br><span class="line">BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(connection.getInputStream()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得返回结果</span></span><br><span class="line">String res = in.readLine();</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>post请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">URL realUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line"><span class="comment">// 打开和URL之间的连接</span></span><br><span class="line">URLConnection conn = realUrl.openConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置通用的请求属性</span></span><br><span class="line">conn.setRequestProperty(<span class="string">&quot;accept&quot;</span>, <span class="string">&quot;*/*&quot;</span>);</span><br><span class="line">conn.setRequestProperty(<span class="string">&quot;connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">conn.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>,</span><br><span class="line"><span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送POST请求必须设置如下两行</span></span><br><span class="line">conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取URLConnection对象对应的输出流</span></span><br><span class="line">out = <span class="keyword">new</span> PrintWriter(conn.getOutputStream());</span><br><span class="line"><span class="comment">// 发送请求参数</span></span><br><span class="line">out.print(param);</span><br><span class="line"><span class="comment">// flush输出流的缓冲</span></span><br><span class="line">out.flush();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义BufferedReader输入流来读取URL的响应</span></span><br><span class="line">in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得返回结果 </span></span><br><span class="line">String res = in.readLine();</span><br></pre></td></tr></table></figure></li></ul><ul><li>Java发起http请求后，返回值为String类型</li><li>注意请求api的QPS（每秒请求量），我们可以通过<code>Thread.currentThread().sleep(1000);//毫秒</code> 简单实现延时</li><li>链接编码问题，有时候链接请求失败是因为空格没有编码为%20,而导致请求失败</li></ul><h5 id="（2）Java加密问题"><a href="#（2）Java加密问题" class="headerlink" title="（2）Java加密问题"></a>（2）Java加密问题</h5><p>​    实现md5加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// md5加密工具</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMd5</span><span class="params">(String input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用哈希MD5调用静态getInstance方法</span></span><br><span class="line">        MessageDigest md = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// digest() 方法调用来计算消息摘要</span></span><br><span class="line">        <span class="comment">//  of an input digest() return array of byte</span></span><br><span class="line">        <span class="keyword">byte</span>[] messageDigest = md.digest(input.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字节数组转换为符号表示</span></span><br><span class="line">        BigInteger no = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, messageDigest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将消息摘要转换为十六进制值</span></span><br><span class="line">        String hashtext = no.toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">while</span> (hashtext.length() &lt; <span class="number">32</span>) &#123;</span><br><span class="line">            hashtext = <span class="string">&quot;0&quot;</span> + hashtext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hashtext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于指定错误的消息摘要算法</span></span><br><span class="line">    <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java数据处理"><a href="#Java数据处理" class="headerlink" title="Java数据处理"></a>Java数据处理</h4><h4 id="1-参考文章-6"><a href="#1-参考文章-6" class="headerlink" title="1.参考文章"></a>1.参考文章</h4><p><a href="https://blog.csdn.net/chenkaibsw/article/details/78989459">Java数组遍历方法</a></p><p><a href="https://blog.csdn.net/WZH577/article/details/90453762">java遍历List方法</a></p><p><a href="https://www.cnblogs.com/goloving/p/7740100.html">List和Array相互转换 </a></p><h4 id="2-注意事项-5"><a href="#2-注意事项-5" class="headerlink" title="2.注意事项"></a>2.注意事项</h4><h5 id="（1）字符串与数组转换"><a href="#（1）字符串与数组转换" class="headerlink" title="（1）字符串与数组转换"></a>（1）字符串与数组转换</h5><ul><li><p>字符串转换成数组</p><p>String.split() 方法，Java 中通常用 split() 分割字符串，返回的是一个数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;123abc&quot;</span>;</span><br><span class="line">String[] arr = str.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; <span class="comment">// String数组</span></span><br><span class="line">    System.out.print(arr[i]); <span class="comment">// 输出 1 2 3 a b c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组转换为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = &#123; <span class="string">&quot;123&quot;</span>, <span class="string">&quot;abc&quot;</span> &#125;;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    sb.append(arr[i]); <span class="comment">// String并不拥有append方法，所以借助 StringBuffer</span></span><br><span class="line">&#125;</span><br><span class="line">String sb1 = sb.toString();</span><br><span class="line">System.out.println(sb1); <span class="comment">// 输出123abc</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="（2）数组遍历方法"><a href="#（2）数组遍历方法" class="headerlink" title="（2）数组遍历方法"></a>（2）数组遍历方法</h5><ul><li><p>传统for循环方法</p></li><li><p>for each循环（foreach只能用于普通数组）</p></li><li><p>利用Array类中的toString方法（不能直接打印数组，<code>System.out.println(array)</code>这样打印是的是数组的首地址）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(array))</span><br></pre></td></tr></table></figure></li></ul><h5 id="（3）List遍历方法"><a href="#（3）List遍历方法" class="headerlink" title="（3）List遍历方法"></a>（3）List遍历方法</h5><ul><li>迭代器遍历（hasNext和next方法）</li><li>for each遍历（从List中获得的元素是对象）</li><li>传统for循环遍历（使用size方法获得List长度）</li><li>Lambda表达式</li></ul><h5 id="（3）Java中的正则表达式"><a href="#（3）Java中的正则表达式" class="headerlink" title="（3）Java中的正则表达式"></a>（3）Java中的正则表达式</h5><ul><li>注意该正则方法，一定是先find后group，group()方法通过前一个成功的find()方法调用返回找到的字符串</li></ul><h5 id="（5）List与Array的转换"><a href="#（5）List与Array的转换" class="headerlink" title="（5）List与Array的转换"></a>（5）List与Array的转换</h5><ul><li><p>List to Array</p><p>使用List 提供的toArray的接口对List进行转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定类型转换</span></span><br><span class="line">String[] array=list.toArray(<span class="keyword">new</span> String[list.size()]);</span><br></pre></td></tr></table></figure></li><li><p>Array to List</p><p>使用ArrayList的构造方法进行转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(array));</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040942707.jpeg&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://autovy.github.io/categories/Java/"/>
    
    
      <category term="开发实战" scheme="https://autovy.github.io/tags/%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"/>
    
      <category term="Java" scheme="https://autovy.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java|知识框架</title>
    <link href="https://autovy.github.io/2021/04/11/Java-%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6/"/>
    <id>https://autovy.github.io/2021/04/11/Java-%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6/</id>
    <published>2021-04-11T06:30:00.000Z</published>
    <updated>2021-09-04T01:47:30.955Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040947723.png" alt="image-20210904094723369"></p><span id="more"></span><h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><h3 id="计算机硬件介绍"><a href="#计算机硬件介绍" class="headerlink" title="计算机硬件介绍"></a>计算机硬件介绍</h3><h4 id="1-CPU"><a href="#1-CPU" class="headerlink" title="1.CPU"></a>1.CPU</h4><p>中央处理器从内存获取指令，然后执行这些指令</p><p>每台计算机都有一个内部时钟，以固定速度发射电子脉冲，时钟速度越快，在给定的时间段内可以执行更多的指令（计量单位为HZ）</p><h4 id="2-计算机发展规律"><a href="#2-计算机发展规律" class="headerlink" title="2.计算机发展规律"></a>2.计算机发展规律</h4><ul><li>摩尔定律</li><li>安迪-比尔定律</li><li>反摩尔定律</li></ul><h4 id="3-存储设备"><a href="#3-存储设备" class="headerlink" title="3.存储设备"></a>3.存储设备</h4><p>内存中的信息在断电后丢失，所有我们要将程序和数据永久保存在存储设备上</p><p>存储设备有下面三种</p><ul><li><p>磁盘驱动器</p></li><li><p>光盘驱动器</p></li><li><p>USB闪存驱动器</p></li></ul><h4 id="4-内存"><a href="#4-内存" class="headerlink" title="4.内存"></a>4.内存</h4><p>计算机最基本的存储单元是字节（byte），每个字节有8个比特（bit）构成</p><p>内存（RAM）用于存储程序及程序所需要的数据</p><p>一个程序和它的数据在被CPU执行前必须移到计算机内存中</p><h4 id="5-通信设备"><a href="#5-通信设备" class="headerlink" title="5.通信设备"></a>5.通信设备</h4><p>电脑可以通过通信设备</p><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>操作系统是运行在计算机上最重要的程序，管理和控制计算机的活动</p><h3 id="万维网"><a href="#万维网" class="headerlink" title="万维网"></a>万维网</h3><p>万维网即world wide web，简称web</p><p>web客户端可以访问浏览web服务器上的页面</p><p>web通过一个全局统一资源标识符（URL）标识</p><p>web通过超文本传输协议（http）传输给用户</p><h2 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h2><h3 id="Java语言应用场景"><a href="#Java语言应用场景" class="headerlink" title="Java语言应用场景"></a>Java语言应用场景</h3><h4 id="1-JavaEE（spring）"><a href="#1-JavaEE（spring）" class="headerlink" title="1.JavaEE（spring）"></a>1.JavaEE（spring）</h4><h4 id="2-大数据（spark）"><a href="#2-大数据（spark）" class="headerlink" title="2.大数据（spark）"></a>2.大数据（spark）</h4><h4 id="3-安卓开发"><a href="#3-安卓开发" class="headerlink" title="3.安卓开发"></a>3.安卓开发</h4><h3 id="Java开发介绍"><a href="#Java开发介绍" class="headerlink" title="Java开发介绍"></a>Java开发介绍</h3><h4 id="1-软件开发介绍"><a href="#1-软件开发介绍" class="headerlink" title="1.软件开发介绍"></a>1.软件开发介绍</h4><p>（1）软件开发</p><p>软件集一系列按照特定顺序组织的计算机数据和指令的集合。有系统软件和应用软件之分</p><p>（2）人机交互方式</p><ul><li>图形化界面：GUI</li><li>命令行方式：CLI</li></ul><h4 id="2-Java技术体系平台"><a href="#2-Java技术体系平台" class="headerlink" title="2.Java技术体系平台"></a>2.Java技术体系平台</h4><ul><li>Java SE：面向桌面级应用的Java平台</li><li>Java EE：面向web应用程序</li><li>Java ME：面向移动终端</li></ul><h4 id="3-Java语言特点"><a href="#3-Java语言特点" class="headerlink" title="3.Java语言特点"></a>3.Java语言特点</h4><ul><li>面向对象：类与对象</li><li>健壮性：提供一个相对安全的内存管理和访问机制</li><li>跨平台性：java语言编写的应用程序可以运行在不同的系统平台上（通过jvm实现）</li></ul><h4 id="4-Java两种核心机制"><a href="#4-Java两种核心机制" class="headerlink" title="4.Java两种核心机制"></a>4.Java两种核心机制</h4><ul><li>Java虚拟机（JVM）：JVM是一个虚拟计算机，具有指令集使用不同的存储区域，负责执行指令，管理数据，内存，寄存器（屏蔽底层运行平台的差别，实现“”一次编译，处处运行“）</li><li>垃圾收集机制：java系统级线性跟踪存储空间的分配情况，并在JVM空闲时，检测并释放可被释放的存储空间</li></ul><h4 id="5-Java环境"><a href="#5-Java环境" class="headerlink" title="5.Java环境"></a>5.Java环境</h4><ul><li>JDK：Java开发工具包，其中包含了JRE，其中包含了编译工具（javac）和打包工具（jar）</li><li>JRE：java运行环境，包括了JVM和java的核心类库</li><li>使用JDK开发java程序，交给JRE运行</li><li>JDK &gt; JRE &gt; JVM</li></ul><h2 id="Java基本语法"><a href="#Java基本语法" class="headerlink" title="Java基本语法"></a>Java基本语法</h2><h3 id="关键字与保留字"><a href="#关键字与保留字" class="headerlink" title="关键字与保留字"></a>关键字与保留字</h3><h4 id="1-关键字"><a href="#1-关键字" class="headerlink" title="1.关键字"></a>1.关键字</h4><p>定义：在java语言中用作专门用途的字符串（单词）</p><p>特点：关键字所有字母为小写</p><p>功能：定影数据类型，定义流程控制，定义访问权限修饰，定义类函数变量修饰符，定义类与类之间关系，定义建立引用判断实例，异常处理，包</p><h4 id="2-保留字"><a href="#2-保留字" class="headerlink" title="2.保留字"></a>2.保留字</h4><p>现有Java版本尚未使用，但后续版本可能作为关键字使用，命名标识符时避免使用这些保留字</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>对变量，方法和类的命名使用的字符序列，称为标识符</p><p>合法标识符规则，命名规范</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量即内存中一个存储区域，该区域的数据可以在同一类型范围内不断变化</p><p>变量时程序最基础的存储单元，包含变量类型，变量名和存储的值</p><p>Java的每个变量必须先声明后使用</p><ul><li></li></ul><h4 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h4><p>（1）基本数据类型</p><ul><li><p>数值型：整数类型（byte,short,int,long），浮点类型（float,double）</p></li><li><p>字符型（char）</p></li><li><p>布尔型（boolean）</p></li></ul><p>（2）引用数据类型</p><ul><li><p>类（class）（字符串变量的声明就是用类来声明）</p></li><li><p>接口（interface）</p></li><li><p>数组（array）</p></li></ul><p>（3）声明位置分类变量</p><ul><li>成员变量：方法体外，类体内声明的变量</li><li>局部变量：方法体内部声明的变量</li></ul><h4 id="2-整型类型"><a href="#2-整型类型" class="headerlink" title="2.整型类型"></a>2.整型类型</h4><p>整型默认使用int型，当遇到不足以表达较大的数，才使用long，声明long类型常量，需要后加”L”</p><h4 id="3-浮点数类型"><a href="#3-浮点数类型" class="headerlink" title="3.浮点数类型"></a>3.浮点数类型</h4><p>浮点数类型常量默认使用double型，声明float型常量，需要后加”F”</p><h4 id="4-基本数据类型转换"><a href="#4-基本数据类型转换" class="headerlink" title="4.基本数据类型转换"></a>4.基本数据类型转换</h4><ul><li>自动转换类型：容量小的类型自动转换为容量大的数据类型</li><li>byte,short,char -&gt; int -&gt; long -&gt; float -&gt; double</li><li>在多种类型数据混合运算时，系统首先自动间=将所有数据转换成容量最大的数据类型，然后进行计算</li><li>强类型转换：自动类型转换的逆过程，可以将容量大的数据类型转换成容量小的数据类型（如将字符串转换为int类）</li></ul><h4 id="5-引用数据类型"><a href="#5-引用数据类型" class="headerlink" title="5.引用数据类型"></a>5.引用数据类型</h4><p>引用数据类型包括：类（如String类）,接口，数组</p><p>​    String类：</p><ul><li>String属于引用数据类型</li><li>声明String类型变量使用一对””</li><li>String可以和8种基本数据类型做运行（字符串连接运算）</li></ul><h4 id="6-变量赋值"><a href="#6-变量赋值" class="headerlink" title="6.变量赋值"></a>6.变量赋值</h4><ul><li>如果变量是基本数据类型，此时赋值的变量是所保存的数据值</li><li>如果变量是引用数据类型，此时赋值的变量所保存的数据的地址值</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h4><p>加减乘除，取余，自增，自减，字符串连接</p><h4 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2.赋值运算符"></a>2.赋值运算符</h4><ul><li>当”=“号两侧数据类型不一致时，可以使用自动类型转换或者使用强制类型转换原则进行处理</li><li>支持连续赋值</li><li>可以使用扩展赋值运算符：+=，-=，*=，/=，%=</li></ul><h4 id="3-比较运算符"><a href="#3-比较运算符" class="headerlink" title="3.比较运算符"></a>3.比较运算符</h4><ul><li><p>比较运算符的结果都是Boolean型</p></li><li><p>Java有个特殊的比较运算符：instanceof，可以检查是否为类的对象</p></li></ul><h4 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h4><ul><li>与或非等等</li><li>逻辑运算符操作的都是boolean类型的变量</li></ul><h4 id="5-位运算符"><a href="#5-位运算符" class="headerlink" title="5.位运算符"></a>5.位运算符</h4><p>类型：</p><ul><li>左移右移</li><li>与运算</li><li>或运算</li><li>取反</li></ul><p>交换两数的方法：</p><ul><li>定义临时变量法</li><li>相加法</li><li>位运算符法</li></ul><h4 id="6-三元运算符"><a href="#6-三元运算符" class="headerlink" title="6.三元运算符"></a>6.三元运算符</h4><ul><li>结构：(条件表达式)? 表达式1 : 表达式2</li><li>返回结果为Boolean类型</li><li>凡是可以使用三元运算符的地方，都可以转换为if-else，但是优先使用三元运算符</li></ul><h3 id="程序流程控制"><a href="#程序流程控制" class="headerlink" title="程序流程控制"></a>程序流程控制</h3><h4 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1.顺序结构"></a>1.顺序结构</h4><p>程序从上到下逐条执行，中间没有任何判断和跳转</p><h4 id="2-分支结构"><a href="#2-分支结构" class="headerlink" title="2.分支结构"></a>2.分支结构</h4><p>（1）根据条件，选择性执行某段代码</p><ul><li>if-elseif-else</li><li>switch-case</li><li>switch-case可以转换为if-elseif-else</li></ul><p>，优先使用switch-case</p><p>（2）switch-case-default:</p><ul><li>根据switch表达式中的值，依次匹配各个case中的常量，一旦匹配成功跳转到相应的case语句中</li><li>一旦执行到break，跳出switch-case结构</li><li>switch的表达式中，只能是如下的6种数据类型之一：byte，short，char，int，String类型</li></ul><h4 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3.循环结构"></a>3.循环结构</h4><p>（1）根据循环条件，重复性执行某段代码</p><ul><li>for循环</li><li>while循环</li><li>do-while循环</li></ul><p>（2）循环语句四个组成部分：</p><ul><li>初始化部分</li><li>循环条件部分</li><li>循环体部分</li><li>迭代部分</li></ul><p>​    执行过程:初始化 -&gt;  循环条件 -&gt; 循环体 -&gt; 迭代 -&gt;  循环-&gt;条件 -&gt; 循环体 -&gt; 迭代 -&gt; …… -&gt;  循环条件</p><p>（3）for循环结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for(初始化; 循环条件; 迭代) &#123;循环体&#125;</span><br></pre></td></tr></table></figure><p>​    不在循环条件内限制次数的结构：for( ; ; )</p><p>（4）while循环结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初始化</span><br><span class="line">while(循环条件)&#123;循环体;迭代&#125;</span><br></pre></td></tr></table></figure><p>​    不在循环条件内限制次数的结构：while(true)</p><p>（5）do-while循环结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初始化</span><br><span class="line">do&#123; 循环体;迭代;&#125;while(循环条件)</span><br></pre></td></tr></table></figure><p>​    do-while的执行过程与for，while不同，会至少执行一次循环体</p><p>​    执行过程: 初始化 -&gt;  循环体 -&gt; 迭代-&gt;  循环条件-&gt;  循环体 -&gt; 迭代-&gt;  ……</p><p>（6）结束循环方式</p><ul><li>循环条件中返回false</li><li>循环体中执行break：结束当前循环</li><li>循环体中执行continue：结束当次循环</li><li>break和coninue在多重循环中，可以通过指定标识结束循环（默认跳出包裹关键字的最近一层循环）</li></ul><h4 id="4-Scanner输入"><a href="#4-Scanner输入" class="headerlink" title="4.Scanner输入"></a>4.Scanner输入</h4><p>从用户输入处获得不同类型的变量，需要用到Scanner类</p><ul><li>导入Scanner的包</li><li>Scanner实例化</li><li>调用Scanner类相关方法来获取指定类型的变量</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="1-数组概述"><a href="#1-数组概述" class="headerlink" title="1.数组概述"></a>1.数组概述</h4><p>（1）数组是多个相同类型数据按照一定顺序排列的集合，并使用一个名字命名，通过编号的方式对数据进行统一管理</p><p>（2）数组相关概念：数组名，元素，索引，数组长度</p><p>（3）数组特点：</p><ul><li>数组本身是引用数据类型，数组中的元素可以是任意数据类型</li><li>创建数据对象会在内存中开辟一整块连续的空间，而数组名中引用的是这块连续空间的首地址</li><li>数组的长度一旦确定，就不能修改</li></ul><h4 id="2-一维数组的使用"><a href="#2-一维数组的使用" class="headerlink" title="2.一维数组的使用"></a>2.一维数组的使用</h4><p>（1）数组的声明与初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">int</span> [] ids</span><br><span class="line"><span class="comment">// 静态初始化</span></span><br><span class="line">ids = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>&#125;</span><br><span class="line"><span class="comment">// 动态初始化：初始化与赋值分离</span></span><br><span class="line">String[] names = <span class="keyword">new</span> String[<span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>（2）调用数组指定位置元素</p><p>（3）获取数组长度</p><p>（4）数组遍历</p><p>（5）数组元素默认初始化值</p><p>（6）数组的内存解析</p><p>​    内存结构：</p><ul><li>栈（局部变量）</li><li>堆（对象，数组）</li><li>方法区（常量池，静态域）</li></ul><h4 id="3-多维数据的使用"><a href="#3-多维数据的使用" class="headerlink" title="3.多维数据的使用"></a>3.多维数据的使用</h4><p>Java语言里提供多维数组的语法</p><p>从数组底层运行机制来看，其实没有多维数组</p><p>（1）二维数组的声明与初始化</p><p>（2）调用数组指定位置的元素</p><p>（3）获取数组长度</p><p>（4）遍历二维数组</p><p>（5）数组元素默认初始化</p><p>​    外层数组初始化为地址值</p><p>​    内存元素初始化与一维数组初始化情况相同</p><p>（6）二维数组内存解析</p><h4 id="4-数组算法"><a href="#4-数组算法" class="headerlink" title="4.数组算法"></a>4.数组算法</h4><p>（1）数组元素赋值</p><p>​    二维数组打印杨辉三角</p><p>（2）数组元素计算</p><ul><li>求最值</li><li>求和</li><li>求平均值</li></ul><p>（3）数组复制，反转，查找</p><ul><li>​    java的数组间可以直接赋值，相当于把原数组地址备份了。这两个数组地址值相同，都指向了堆空间唯一的数组实体，这样不能称作数组的复制</li><li>数组的赋值，备份数组应当申请出与原数组相同大小的空间后，一一赋值</li><li>数组反转，使正数n的数与倒数n的数交换</li><li>查找：线性查找，二分查找（必须有序）</li></ul><p>（4）数组排序</p><p>​    排序算法分类：</p><ul><li>内部排序：排序过程都在内存中完成</li><li>外部排序：数据量巨大，必须借助外部存储器完成排序</li></ul><h4 id="5-数组工具类"><a href="#5-数组工具类" class="headerlink" title="5.数组工具类"></a>5.数组工具类</h4><p>Arrays即操作数组的工具类，包含了用来操作数组的各种方法</p><ul><li>判断数组相等</li><li>输出数组</li><li>指定值填充到数组中</li><li>对数组进行排序</li><li>二分查找数组</li></ul><h4 id="6-数组常见异常"><a href="#6-数组常见异常" class="headerlink" title="6.数组常见异常"></a>6.数组常见异常</h4><ul><li>数组角标越界异常</li><li>空指针异常</li></ul><h2 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h2><p>Java面向对象学习的三条主线：</p><ul><li>Java类及类的成员：属性，方法，构造器，代码块，内部类</li><li>面向对象三大特征：封装性，继承性，多态性（抽象性）</li><li>关键字</li></ul><h3 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h3><h4 id="1-面向过程与面向对象"><a href="#1-面向过程与面向对象" class="headerlink" title="1.面向过程与面向对象"></a>1.面向过程与面向对象</h4><p>面向过程：强调功能行为以函数为最小单位，考虑怎么做</p><p>面向对象：将功能封装到对象中，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做</p><p>面向过程中为执行者，面向对象中为指挥者</p><h4 id="2-类与对象"><a href="#2-类与对象" class="headerlink" title="2.类与对象"></a>2.类与对象</h4><p>（1）概念</p><ul><li>类是对一类事物的描述，是抽象的，概念上的定义</li><li>对象是事情存在的该类事物的个体，因而被称为实例(instance)</li></ul><p>（2）类的设计</p><p>​    设计类其实就是设计类的成员</p><p>​    类的基本成员：</p><ul><li>属性（field）：对应类中成语变量</li><li>行为（method）：对应类中的成员方法</li><li>除了上面两个常用的外，还有构造器，代码块，内部类</li></ul><p>（3）对象</p><ul><li>创建类的对象即类的实例化（new）</li><li>调用对象的属性，方法( 对象.属性 对象.方法 )</li><li>一个类的多个对象，每个对象都独立拥有一套类的属性。</li><li>将对象赋值给另一个对象，它们存有相同的对象地址值指向堆空间同一对象实体</li></ul><p>（4）对象内存解析</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944597.png" alt="image-20210418093314518"></p><ul><li>堆：存放对象实例</li><li>栈：指虚拟机栈，用于储存局部变量</li><li>方法区：用于存储已被虚拟机加载的类的信息，常量，静态变量（即编译器编译后的代码等数据）</li></ul><p>（5）成员变量与局部变量</p><ul><li><p>成员变量（属性）定义在类中</p></li><li><p>局部变量是声明在方法内，方法形参，代码块内，构造器形参，构造器内部的变量</p></li><li><p>成员变量（属性）可以在声明时使用权限修饰符指明其权限（封装性）</p></li><li><p>局部变量不可以使用权限修饰符</p></li><li><p>成员变量（属性）根据其类型都有默认初始化值</p></li><li><p>局部变量没有初始化值，所以在调用之前，一定要显式赋值</p></li><li><p>成员变量（属性）加载到堆空间（非static时）</p></li><li><p>局部变量加载到栈空间</p></li></ul><p>（6）对象数组（数组中存储对象的地址）</p><p>（7）匿名对象的使用</p><ul><li>创建的对象，没有显式赋给一个变量名，即为匿名对象</li><li>特征：匿名对象只能使用一次</li><li>使用：可以把一个对象当作一个对象方法的形参，从而达到对象的匿名</li></ul><p>​    </p><h4 id="3-类与方法"><a href="#3-类与方法" class="headerlink" title="3.类与方法"></a>3.类与方法</h4><p>（1）方法：描述类应该有的功能（java内部类中提供了很多方法）</p><p>（2）方法声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 权限修饰符 返回值类型 方法名(形参列表)&#123;方法体&#125;</span></span><br></pre></td></tr></table></figure><p>（3）权限修饰符</p><p>（4）返回值类型：return后返回指定的数据类型</p><p>（5）形参列表：方法可以申请多个形参</p><p>（6）方法的使用中，可以调用当前类的属性和方法，也可以实现递归调用</p><h4 id="4-方法进阶"><a href="#4-方法进阶" class="headerlink" title="4.方法进阶"></a>4.方法进阶</h4><p>（1）方法重载</p><ul><li>重载的概念：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或参数类型不同即可</li><li>重载的特定：与返回值类型无关，只看参数列表</li><li>两同一不同：1.同一个类，相同方法名 2.参数列表个数不同，参数类型不同</li><li>可变个数形参：允许直接定义和多个实参相匹配的形参，使用格式：<code>数据类型... 变量名</code>，形参会以数组的形式传入</li><li>可变个数形参必须声明在末尾，而且只能声明一个 </li></ul><p>（2）方法参数的值的传递机制</p><p>​    形参：方法定义时，声明的小括号内的参数</p><p>​    实参：方法调用时，实际传递给形参的数据</p><p>​    值传递机制：</p><ul><li>参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值（实参和形参都在栈中，都是数据本身）</li><li>参数是引用数据类型，此时实参赋给形参的是变量所保存数据的地址值（实参和形参都在栈中，存储的是数据的地址，数据在堆中）</li></ul><p>（3）递归方法</p><p>递归方法：一个方法体内调用它自身</p><ul><li>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制</li><li>递归一定要向已知方向递归，否则会变成无穷递归，类似于死循环</li></ul><h4 id="5-封装与隐藏"><a href="#5-封装与隐藏" class="headerlink" title="5.封装与隐藏"></a>5.封装与隐藏</h4><p>（1）封装的引出</p><p>程序设计追求：“高内聚，低耦合”：</p><p>高内聚：类的内部数据操作细节自己完成，不允许外部干涉（相同方法高度集中在一个类中）</p><p>低耦合：仅对外暴露少量方法用于使用（类与类之间的依赖关系降低）</p><p>（2）封装设计思想</p><p>​    隐藏该隐藏的，暴露该暴露的</p><ul><li>对于类内某个属性使用private修改符，类外对该属性的操作，只能通过类内设置的方法（隐藏私有属性，暴露公共方法）</li><li>不对外暴露私有方法，单例模式</li></ul><p>（3）访问权限修饰符</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944324.png" alt="image-20210418131340405"></p><p>以上四种权限都可以用来修饰类的内部结构，属性，方法，构造器，内部类</p><p>修饰类只能使用：缺省，public</p><h4 id="6-构造器"><a href="#6-构造器" class="headerlink" title="6.构造器"></a>6.构造器</h4><p>构造器（constructor）又称构造方法</p><p>（1）构造器作用</p><ul><li>创建对象</li><li>初始化对象信息（属性方法）</li></ul><p>（2）构造器说明</p><ul><li>如果没有显示定义的构造器，系统默认提供一个空参构造器。一旦定义了构造器，系统不再提供空参构造器</li><li>定义构造器格式：权限修饰符 类名(形参列表){}，无返回值</li><li>一个类中定义多个构造器，彼此构成重载</li><li>一个类中，至少会有一个构造器</li></ul><h4 id="7-JavaBean"><a href="#7-JavaBean" class="headerlink" title="7.JavaBean"></a>7.JavaBean</h4><p>JavaBean是可重用组件：</p><ul><li><p>类是公共的</p></li><li><p>有个无参的公共构造器</p></li><li><p>有属性，且有对应的get，set方法</p></li></ul><h4 id="8-this"><a href="#8-this" class="headerlink" title="8.this"></a>8.this</h4><p>this表示当前对象，可以调用类的属性，方法，构造器</p><p>（1）this含义</p><ul><li>this在方法内部使用，即这个方法所属对象的引用</li><li>this在构造器内部使用，表示该构造器正在初始化的对象</li></ul><p>（2）this修饰属性和方法</p><ul><li>照类的方法中，可以使用this调用当前对象属性或方法</li><li>可以用this来区分局部变量和属性</li></ul><p>（3）this调用构造器</p><ul><li>在类的构造器中，可以显式使用<code>this(形参列表)</code>的方式，调用本类中指定的其他构造器</li><li>构造器不能调用自己</li></ul><h4 id="9-package与import的使用"><a href="#9-package与import的使用" class="headerlink" title="9.package与import的使用"></a>9.package与import的使用</h4><p>（1）package</p><ul><li>为了更好实现项目中类的管理，提供包的概念</li><li>使用packae声明类或接口所属的包，声明在源文件的首行</li><li>同一个包下，不能命名同名接口和类</li><li>JDK提供了包，其中包含常用的类和接口</li></ul><p>（2）MVC设计模式 </p><ul><li><p>模型层model：主要用于处理数据</p></li><li><p>控制层controller：处理业务逻辑</p></li><li><p>视图层view：显示数据</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944267.png" alt="image-20210418190748964"></p></li></ul><p>（3）import关键字</p><ul><li>在源文件中使用import可以导入指定包下的类，接口</li><li>声明在包声明和类声明之间</li><li>如果类和接口是在java.lang或本包下定义的，则可以省略import结构</li></ul><p>​    </p><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><h4 id="1-继承性概念"><a href="#1-继承性概念" class="headerlink" title="1.继承性概念"></a>1.继承性概念</h4><p>（1）继承性的优点：</p><ul><li>减少代码冗余，提高代码复用性</li><li>便于功能扩展</li><li>是多态性的继承</li></ul><p>（2）继承性格式  class A extends B {}：</p><ul><li><p>A：子类，派生类</p></li><li><p>B：父类，基类</p></li><li><p>子类继承父类后，就可以获得父类中声明的结构，属性，方法</p></li><li><p>子类可以在父类的基础上声明自己的属性或方法，实现功能的拓展</p></li></ul><p>（3）继承规则</p><ul><li>子类继承父类后，仍然获得了父类中私有的属性和方法，但是由于封装性，子类不能直接调用父类的结构</li><li>子类对象“拥有”父类对象的私有属性，但无法直接操作，不属于“继承“</li><li>支持单继承和多继承：一个子类只要一个父类，一个父类可以派生多个子类</li><li>子父类是相对的概念</li><li>如果没有显式声明一个类的父类，则此类继承于java.lang.Object类</li></ul><h4 id="2-方法的重写"><a href="#2-方法的重写" class="headerlink" title="2.方法的重写"></a>2.方法的重写</h4><p>子类根据要求对父类中继承来的方法进行改造，子类方法覆盖父类方法这个过程称为方法的重写</p><p>（1）重写：子类继承父类后，可以对父类中同名同参数的方法，进行覆盖操作</p><p>（2）重载与重写的区别</p><p>（3）重写规则</p><ul><li><p>方法的声明：权限修饰符 返回值类型 方法名(形参列表){方法体}</p></li><li><p>子类重写的方法的方法名和形参列表要与父类被重写的方法相同</p></li><li><p>子类重写的方法的权限修饰符要不小于父类被重写的方法修饰符</p></li><li><p>子类不能重写父类中声明为private权限的方法</p></li><li><p>子类重写的方法返回值要与父类被重写的返回值相同</p></li></ul><h4 id="3-spuer"><a href="#3-spuer" class="headerlink" title="3.spuer"></a>3.spuer</h4><p>与super对应的是this，this代指本对象，super则代指本对象的父类</p><p>super的使用：</p><ul><li>super理解为：父类的</li><li>super可以调用：属性，方法，构造器</li><li>在子类的方法或构造器中，可以通过super调用父类中声明的属性或方法</li><li>super调用构造器，必须在子类构造器首行进行声明</li><li>在类的构造器中，this和super只能二选一（默认情况下调用的是父类中的空参构造器，即super()）</li></ul><h4 id="4-子类对象实例化过程"><a href="#4-子类对象实例化过程" class="headerlink" title="4.子类对象实例化过程"></a>4.子类对象实例化过程</h4><ul><li>创建子类对象，在堆空间，就会加载所有父类中声明的属性</li><li>通过子类构造器构造子类对象时，就会直接或间接调用了其父类的构造器，直至调用到java.lang.Object的空参构造器</li><li>虽然创建子类对象时调用了父类的构造器，但是自始至终就创建了一个对象，即new出来的子类实例</li></ul><h4 id="5-多态性"><a href="#5-多态性" class="headerlink" title="5.多态性"></a>5.多态性</h4><p>对象的多态性：父类的引用指向子类的对象（子类的对象赋给父类引用），可以直接应用到抽象类和接口上。方便传参时，可根据new的对象的不同传入不同的对象</p><p>多态就是同一个接口，使用不同的实例而执行不同操作</p><p>（1）多态的使用</p><ul><li>有了对象多太性以后，我们在编译期，只能调用父类中的声明的方法，但在运行期，我们实际执行了子类重写父类的方法</li><li>编译看左（父类），运行看右（子类）</li><li>多态性使用前提：类的继承关系，方法重写</li><li>多态性主要用于方法，不适用于属性</li></ul><p>（2）虚拟方法的调用</p><ul><li>​    在多态的情况下，子类定义了父类同名同参数的方法，此时父类的方法被称为虚拟方法。</li><li>父类根据赋给它的不同子类对象，动态调用属于子类的该方法</li><li>这样的方法时无法在编译期确定的，只有到方法调用那一刻，解释运行器才会确定所要调用的具体方法（”动态绑定“）</li></ul><h4 id="6-向下转型"><a href="#6-向下转型" class="headerlink" title="6.向下转型"></a>6.向下转型</h4><p>​    在多态中可知，虽然内存加载了子类的方法，但是由于类型是父类，所以编译时无法调用子类的属性和方法，只能调用父类中声明的属性和方法</p><p>为了调用子类特有的属性和方法，我们需要用到强制类型转换符，向下转型</p><p>（1）instanceof操作符</p><ul><li>检验对象是否为某类的对象，返回值为Boolean</li><li>为了避免在向下转型时出现ClassCastException的异常，在向下转型前进行instanceof判断，为true才能进行向下转型  </li></ul><p>（2）向下转型规则</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944489.png" alt="image-20210419073037475"></p><h3 id="Object类的使用"><a href="#Object类的使用" class="headerlink" title="Object类的使用"></a>Object类的使用</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944251.png" alt="image-20210419073502990"></p><h4 id="1-和equals的区别"><a href="#1-和equals的区别" class="headerlink" title="1.==和equals的区别"></a>1.==和equals的区别</h4><p>（1）==运算符</p><ul><li>可以使用在基本数据类型和引用数据类型中</li><li>如果比较的是基本数据类型，比较两个变量保存的数据是否相等（不一定类型相同）</li><li>如果比较的是引用数据类型，比较两个对象的地址值是否相同（两个引用是否指向同一个对象实体）</li></ul><p>（2）equals()方法</p><ul><li>是一个方法而非运算符</li><li>只适用于引用数据类型</li><li>Object类中定义的equals()和==的作用是一样的，即比较比较两个对象的地址值是否相同</li><li>但是String，Date，File等类重写了Object类中的equals()方法，重写以后就是比较两个对象的“实体内容”是否相同了</li></ul><h4 id="2-toString-方法"><a href="#2-toString-方法" class="headerlink" title="2.toString()方法"></a>2.toString()方法</h4><ul><li>当我们输出一个对象的引用时，实际上就是调用当前对象的toString()</li><li>String，Date，File等类重写了Object类中的toString()方法。使得在调用对象的toString时，返回“实体内容”信息</li></ul><h3 id="包装类的使用"><a href="#包装类的使用" class="headerlink" title="包装类的使用"></a>包装类的使用</h3><h4 id="1-包装类介绍"><a href="#1-包装类介绍" class="headerlink" title="1.包装类介绍"></a>1.包装类介绍</h4><p>针对八种基本数据类型有相应的引用类型——包装类（封装类）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040944665.png" alt="image-20210419081234938"></p><p>基本数据类型，包装类，String三者的相互转换：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945274.png" alt="image-20210419082428442"></p><h4 id="2-数据类型转换"><a href="#2-数据类型转换" class="headerlink" title="2.数据类型转换"></a>2.数据类型转换</h4><ul><li>基本数据类型 &gt; 包装类：调用包装类的构造器</li><li>包装类 &gt; 基本数据类型：调用包装类的xxxValue()</li><li>基本数据类型，包装类 &gt; String类型：1.使用字符串的连接运算 2.调用String的ValueOf()方法</li><li>String类型 &gt; 基本数据类型，包装类 ：调用包装类的parseXxx(String s)方法</li><li>在JDK5.0后，基本数据类型和包装类已经可以实现自动拆箱与自动装箱</li></ul><h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><p>static让类的实例共享一个属性或方法，无论新建多少个对象都会有这个静态的属性或方法</p><h4 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1.使用方法"></a>1.使用方法</h4><ul><li>static:静态的</li><li>static可以用来修饰：属性，方法，代码块，内部类</li></ul><h4 id="2-修饰属性"><a href="#2-修饰属性" class="headerlink" title="2.修饰属性"></a>2.修饰属性</h4><ul><li><p>实例变量：每个对象都独立拥有一套类中的非静态属性，当修改其中一个对象的非静态属性时，不会导致其他对象相同属性值修改</p></li><li><p>静态变量：多个对象共享同一个静态变量，，当修改其中一个对象的静态属性时，其他对象的静态变量也随之改变</p></li><li><p>静态变量随着类的加载而加载，静态变量的加载要早于对象的创建</p></li><li><p>因为类只会加载一次，所以静态变量在内存中只会存在一份（方法区的静态域中）</p></li><li><p>实例变量与类变量的内存解析</p></li></ul><h4 id="3-修饰方法"><a href="#3-修饰方法" class="headerlink" title="3.修饰方法"></a>3.修饰方法</h4><ul><li>静态方法，只能调用静态的方法或属性；非静态方法既可以调用非静态的方法或属性，也可以调用静态的方法或属性</li><li>静态方法随着类的加载而加载</li></ul><h4 id="4-静态的使用"><a href="#4-静态的使用" class="headerlink" title="4.静态的使用"></a>4.静态的使用</h4><ul><li>确定一个属性用静态：属性可以被多个对象共享，不会随对象不同而不同</li><li>确定一个方法用静态：1.操作静态属性的方法用静态 2.工具类的方法，习惯上声明为静态</li><li>单例设计模式：对某个类只能存在一个对象实例（使用静态让其可以永久驻留内存），减少了系统性能开销</li></ul><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h4 id="1-代码块概念"><a href="#1-代码块概念" class="headerlink" title="1.代码块概念"></a>1.代码块概念</h4><ul><li>代码块的作用：用来初始化类，对象</li><li>代码块只能用static修饰</li></ul><h4 id="2-静态代码块"><a href="#2-静态代码块" class="headerlink" title="2.静态代码块"></a>2.静态代码块</h4><ul><li>内部可以有输出语句</li><li>随着类的加载而执行，而且只执行一次</li><li>作用：初始化类的信息</li><li>一个类可以定义多个静态代码块，而且按声明先后顺序执行</li><li>静态代码块的执行要优先于非静态  </li><li>静态代码块内只能调用静态的属性，静态的方法，不能调用非静态结构</li></ul><h4 id="3-非静态代码块"><a href="#3-非静态代码块" class="headerlink" title="3.非静态代码块"></a>3.非静态代码块</h4><ul><li>内部可以有输出语句 </li><li>随着对象的创建而执行</li><li>每创建一个对象，就执行一次非静态代码块</li><li>作用：可以在创建对象时，对对象属性等进行初始化</li><li>一个类可以定义多个非静态代码块，而且按声明先后顺序执行</li><li>非静态代码块内可以调用静态的属性，静态的方法或非静态的属性，非静态的方法</li></ul><h4 id="2-属性赋值总结"><a href="#2-属性赋值总结" class="headerlink" title="2.属性赋值总结"></a>2.属性赋值总结</h4><ul><li>默认初始化</li><li>显式初始化</li><li>在代码块中赋值</li><li>构造器初始化</li><li>通过<code>对象.属性</code>的方式赋值</li></ul><p>按照由上到下的顺序先后执行</p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><h4 id="1-final概念"><a href="#1-final概念" class="headerlink" title="1.final概念"></a>1.final概念</h4><ul><li><p>final意为最终的，可以禁止对修饰对象进一步的更改修饰</p></li><li><p>final可以用来修饰类，方法，变量</p></li></ul><h4 id="2-final修饰"><a href="#2-final修饰" class="headerlink" title="2.final修饰"></a>2.final修饰</h4><ul><li>被修饰的类不能被其他类所继承</li><li>被修饰的方法不能被重写</li><li>被修饰的变量被称为常量</li><li>被修饰的变量为属性：其可以被赋值的位置有：显式初始化，代码块中初始化，构造器中初始化</li><li>被修饰的变量为局部变量：尤其是修饰形参时，表名此时形参是一个常量。当我们调用此方法时，给常量形参赋一个实参，一旦赋值以后，就只能在方法体内使用此形参，但不能重新赋值</li><li>static final 修饰属性：全局常量</li></ul><h3 id="抽象类与抽象方法"><a href="#抽象类与抽象方法" class="headerlink" title="抽象类与抽象方法"></a>抽象类与抽象方法</h3><p>父类在设计中要求更一般，更通用。但一个父类设计得非常抽象时，以至于它没有任何具体实例，这样得类称为抽象类</p><h4 id="1-abstract的使用"><a href="#1-abstract的使用" class="headerlink" title="1.abstract的使用"></a>1.abstract的使用</h4><ul><li>abstract意为抽象的</li><li>abstract可以修饰的结构：类，方法</li><li>abstract不能修饰私有方法，静态方法，final的方法，final的类</li></ul><h4 id="2-抽象类特点"><a href="#2-抽象类特点" class="headerlink" title="2.抽象类特点"></a>2.抽象类特点</h4><ul><li>abstract修饰的类不能实例化</li><li>抽象类中一定有构造器，便于子类实例化时调用</li><li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关操作</li><li>抽象类的匿名子类</li></ul><h4 id="3-抽象方法特点"><a href="#3-抽象方法特点" class="headerlink" title="3.抽象方法特点"></a>3.抽象方法特点</h4><ul><li>抽象方法只有方法声明，没有方法体</li><li>包含抽象方法的类，一定是一个抽象类</li><li>只有子类重写了父类所有的抽象方法后，此子类才能实例化（否则子类也是个抽象类）</li></ul><h4 id="4-抽象类应用"><a href="#4-抽象类应用" class="headerlink" title="4.抽象类应用"></a>4.抽象类应用</h4><ul><li>模板方法设计模式：抽象类作为多个子类的通用模板，子类在抽象类基础上进行拓展，改造</li><li>模板方法设计可以让固定通用的步骤在父类中写好，然后将易变的部分抽象出来，供不同的子类实现</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="1-接口概述"><a href="#1-接口概述" class="headerlink" title="1.接口概述"></a>1.接口概述</h4><ul><li>有时必须从几个类中派生出一个子类，让子类继承它们所以的属性和方法，但是Java是不支持多重继承的（继承中子类只能有一个父类），这时候就需要用到接口</li><li>有时必须从几个类中抽取一些共同的行为特征。，而它们之间不存在继承关系，这时候也要用到接口</li><li>继承是一个“是不是”的关系，而接口则是“能不能”的关系（体现了如果你是/要……则必须能……）</li><li>接口的本质是契约，标准，规范</li></ul><h4 id="2-接口的使用"><a href="#2-接口的使用" class="headerlink" title="2.接口的使用"></a>2.接口的使用</h4><ul><li>类和接口时并列的两个结构</li><li>接口使用interface来定义</li><li>接口中可以定义全局变量，抽象方法，静态方法，默认方法</li><li>接口中不能定义构造器，这意味着接口不能实例化</li><li>接口中定义的静态方法只能通过接口调用</li><li>通过实现类的对象，可以调用接口中的默认方法（而不是像抽象方法那样要先重写抽象类才能实例化，实现类也可以重写接口的默认方法）</li><li>接口可以通过让类去实现（implements）的方式来使用，如果实现类覆盖了接口所有抽象方法，则实现类可以实例化，如果没有则仍为一个抽象类</li><li>Java可以实现多个接口，弥补了Java单继承性的局限性，格式：<code>class AA extends BB implements CC,DD,EE</code></li><li>接口与接口之间也可以继承，而且是多继承</li></ul><h4 id="3-接口的优点"><a href="#3-接口的优点" class="headerlink" title="3.接口的优点"></a>3.接口的优点</h4><ul><li>接口的具体使用，体现多态性  </li><li>接口实际上可以看作是一种规范，实现其接口的类必须按步骤（规范）实现相关的方法才能运行</li><li>接口的主要用途就是被实现类实现</li></ul><h4 id="4-接口应用"><a href="#4-接口应用" class="headerlink" title="4.接口应用"></a>4.接口应用</h4><p>（1）代理模式：</p><ul><li><p>为其他对象提供一种代理以控制对这个对象的访问</p></li><li><p>安全代理：可以屏蔽真实对象的直接访问</p></li><li><p>远程代理：通过代理类处理远程方法调用</p></li><li><p>延迟加载：先加载轻量级的代理对象，真正需要再加载真实的对象</p></li></ul><p>（2）工厂设计模式</p><ul><li>实现创建者与调用者的分离，即将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的</li><li>简单工厂模式：用来生产同一等级结构中任意产品（对于增加新产品，需要修改已有代码）</li><li>工厂方法模式：用来生成同一等级结构中的固定产品（支持增加任意产品）</li><li>抽象工厂模式：用来生产不同产品族的全部产品（对于增加新的产品，无能为力，支持增加产品族）</li></ul><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>在A类中定义了另一个类B，则A为外部类，B为内部类</p><p>内部类有两种：成员内部类和局部内部类（此类在开发中很少被使用）</p><h4 id="1-成员内部类"><a href="#1-成员内部类" class="headerlink" title="1.成员内部类"></a>1.成员内部类</h4><p>（1）作为外部类的成员</p><ul><li>调用外部类的结构</li><li>可以被static修饰</li><li>可以被4种不同的权限修饰</li></ul><p>（2）作为一个类</p><ul><li>可以在类内定义属性，方法，构造器</li><li>可以被final修饰，表示此类不能被继承</li><li>可以被abstract修饰</li></ul><p>（3）调用</p><ul><li>实例化成员内部类的对象：（通过点运算符：<code>Person.Dog dog = new Person.Dog()</code> ）</li><li>在成员内部类种区分调用外部类的结构（属性方法）：通过this</li></ul><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h3><p>异常：程序执行中发生的不正常情况被称为“异常”（开发过程中的语法错误和逻辑错误不是异常）</p><h4 id="1-异常分类"><a href="#1-异常分类" class="headerlink" title="1.异常分类"></a>1.异常分类</h4><p>（1）Error型：Java虚拟机无法解决的严重问题，一般不编写针对性代码进行处理</p><ul><li>JVM系统内部错误</li><li>资源耗尽</li></ul><p>（2）Exception型：其他因编程原因或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理</p><ul><li>空指针访问</li><li>试图读取不存在的文件</li><li>网络连接中断</li><li>数组角标越界</li></ul><p>Exception分类：编译异常，运行异常</p><h4 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h4><ul><li>遇到错误终止程序运行</li><li>编写程序时，错误检测，错误消息的提示，以及错误的处理</li><li>捕获异常最理想的是在编译期间，但是有的错误只有在运行时才能发生（Exception分类：编译异常，运行异常）</li><li>异常处理中，要在可能出现错误的地方加上检测代码</li><li>过多的if-else封装会导致代码臃肿，可读性差，因此采用异常处理机制</li><li>在开发中运行异常比较常见，所以我们往往针对编译时的异常编写异常捕捉代码</li><li>手动生成一个异常对象，并用throw方法抛出</li></ul><h4 id="3-异常处理"><a href="#3-异常处理" class="headerlink" title="3.异常处理"></a>3.异常处理</h4><p>（1）try-catch-finally</p><ul><li>try{可能出现异常的代码}catch{异常类型 变量名}finally{一定会执行的代码}</li><li>finally是可选的</li><li>try中的代码执行过程中一旦出现异常就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配</li><li>一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常处理，一旦处理完成就跳出当前try-catch结构，有finally则进入finally中</li><li>常用的异常对象处理方式（放在catch中）：1.String getMessage()：打印出异常信息   2.printStackTrace()：打印整个错误对象信息（比较常用）</li><li>在try中声明的变量，再出了try结构后，就不能再被调用</li></ul><p>try-catch相当于将一个编译时可能出现的异常，延迟到运行时出现</p><p>（2）finally解析</p><ul><li>finally声明的是一定会被执行的代码，无论有没有捕捉到异常都会执行</li><li>先数据库连接，输入输出流，网络编程Socket等资源，JVM是不能自动的回收，所以我们需要手动的进行资源的释放。此时的资源释放就要声明到finally中</li></ul><p>（3）throws + 异常处理</p><ul><li>throws + 异常处理写在方法声明处，指明此方法执行时，可能会抛出的异常类型，一旦当方法体执行时，出现异常，仍然会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出</li><li>try-catch-finally是真正的将异常处理掉了，throws的方式只是将异常抛出</li></ul><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h3><h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><p>（1）程序与进程</p><ul><li>程序是为了完成特定任务，用某种语言编写的一组指令的集合，即指一段静态代码，静态对象</li><li>进程是程序的一次执行过程，是一个动态的过程：有自身的产生，存在和消亡的过程</li><li>程序是静态的，进程是动态的。进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</li></ul><p>（2）线程与进程</p><ul><li>进程可以细化为线程，是一个程序内部的一条执行路径</li><li>一个Java应用程序至少有三个线程：main()主线程，gc()垃圾回收线程, 异常处理线程</li><li>线程作为调度和执行的单位，每个线程都拥有独立的运行栈和程序计数器，线程切换的开销小</li><li>一个进程中的多个线程共享相同的内存单元/内存地址空间（从同一堆中分配对象，可以访问相同变量和对象），这使线程间通信更加简洁，高效，但是也带来了安全隐患</li></ul><p>（3）并发与并行</p><ul><li>并行：多个CPU同时执行多个任务</li><li>并发：一个CPU同时执行多个任务</li></ul><h4 id="2-多线程的应用"><a href="#2-多线程的应用" class="headerlink" title="2.多线程的应用"></a>2.多线程的应用</h4><p>（1）多线程的优点</p><ul><li>提高应用程序的响应，对图形化界面更有意义</li><li>提高计算机相同CPU的利用率</li><li>改善程序结构，将长而复杂的进程分为多个线程独立运行，利于理解和修改</li></ul><p>（2）多线程使用场景</p><ul><li>程序需要同时执行多个任务</li><li>程序需要实现一些需要等待的任务（用户输入，文件读写操作，网络操作，搜索）</li><li>需要一些后台运行的程序</li></ul><h4 id="3-线程的创建与使用"><a href="#3-线程的创建与使用" class="headerlink" title="3.线程的创建与使用"></a>3.线程的创建与使用</h4><p>（1）多线程的创建（继承Thread类）</p><ul><li><p>创建一个继承于Tread类的子类</p></li><li><p>重写Thread类的run()：声明此线程执行的操作</p></li><li><p>创建Thread类的子类对象</p></li><li><p>通过此对象调用start()：启动当前线程；调用当前线程的run() </p></li><li><p>不能直接调用run()的方式启动线程</p></li></ul><h4 id="4-线程常用方法"><a href="#4-线程常用方法" class="headerlink" title="4.线程常用方法"></a>4.线程常用方法</h4><ul><li><p>start()：启动线程，调用当前线程的run()</p></li><li><p>run()：线程被调度时执行的操作</p><p>getName()：返回线程名称</p></li><li><p>setName(String name) ：设置线程名称</p></li><li><p>yield()：释放当前CPU的执行权</p></li><li><p>join()：在线程a中调用线程b的jion()，线程a进入阻塞状态直到线程b执行完</p></li><li><p>sleep(long millitime)：让当前线程睡眠，当前线程是阻塞状态</p></li><li><p>isAlive()：判断当前线程是否存活</p></li><li><p>stactic Thread currentThread()：返回当前线程</p></li></ul><h4 id="5-线程优先级设置"><a href="#5-线程优先级设置" class="headerlink" title="5.线程优先级设置"></a>5.线程优先级设置</h4><p>（1）线程的调度</p><ul><li>调度策略：抢占式，高优先级的线程抢占CPU</li><li>调度方法：对同优先级线程组成先进先出队列，使用时间片策略; 对高优先级，使用优先调度的抢占式策略</li></ul><p>（2）线程优先级</p><ul><li>线程优先级等级：MAX_PRIORITY(10)，MIN_PRIORITY(1)，NORM_PRIORITY(5)</li><li>涉及的方法：getPriority()：返回线程优先级；setPriority(int newPriority)：改变线程优先级</li><li>线程创建时继承父线程的优先级</li><li>低优先级只是获得调度的概率低，并非一定是高优先级线程后才被调用</li></ul><h4 id="6-创建多线程方式"><a href="#6-创建多线程方式" class="headerlink" title="6.创建多线程方式"></a>6.创建多线程方式</h4><p>（1）继承Thread方式</p><ul><li>多线程时可用静态变量，让每个线程处理的数据都是在同一个地方，而不是又重新创建一个数据对象</li></ul><p>（2）创建多线程的方式二：实现Runnable接口</p><ul><li>创建一个实现Runnable接口的类（该实现类定义的变量也是线程公用的）</li><li>实现类去实现Runnable中的抽象方法：run()</li><li>创建实现类的对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用start()</li></ul><p>（3）创建多线程的新方法：实现Callable接口</p><ul><li>call()可以有返回值</li><li>call()可以抛出异常，被外面的操作捕获，获得异常的信息</li><li>Callable支持泛型</li></ul><p>（4）创建多线程的新方法：使用线程池</p><ul><li>经常创建销毁，使用量特别大的资源，对性能影响很大</li><li>提前创建多个线程，放入线程池中，使用时直接获取，使用完放回池中，可以避免频繁创建销毁，实现重复利用</li><li>好处：提高了响应速度; 降低资源消耗; 便于线程管理;</li></ul><p>  （5）比较两种创建多线程的方式</p><ul><li>开发中优先现在实现Runnable接口的方式</li><li>原因：1.实现方式没有类的单继承性的局限性  2.实现的方式更适合来处理多个线程有共享数据的情况</li><li>联系：两种方式都需要重写run()，将线程要执行的逻辑声明在run()中</li></ul><h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><h4 id="1-线程的生命周期"><a href="#1-线程的生命周期" class="headerlink" title="1.线程的生命周期"></a>1.线程的生命周期</h4><p>（1）线程状态</p><ul><li>新建：当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</li><li>就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它具备运行的条件，只是没有分配到CPU资源</li><li>运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run()方法定义了线程的操作和功能</li><li>阻塞：线程被人为挂起或执行输入输出操作时，让出CPU并临时中止执行的执行进入阻塞状态</li><li>死亡：线程完成了全部工作或线程被提前强制性中止或出现异常导致结束</li></ul><p>（2）线程状态转换</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945714.png" alt="image-20210423073620432"></p><h4 id="2-线程同步"><a href="#2-线程同步" class="headerlink" title="2.线程同步"></a>2.线程同步</h4><p>（1）多线程存在问题</p><ul><li><p>多个线程执行的不确定性引起执行结构的不稳定</p></li><li><p>多个线程对数据的共享，会造成操作的不完整性，会破坏数据</p></li><li><p>线程的安全问题：（数据重复，数据错误）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945201.png" alt="image-20210423074125257"></p></li><li><p>线程安全问题出现的原因：当某个线程在操作数据时，尚未完成操作，其他线程就参与进来，也操作了车票</p></li></ul><p>（2）线程安全问题的解决</p><ul><li><p>当一个线程在操作共享数据时，其他线程不能参与进来，直到该线程完成操作（即时出现了阻塞也不能改变）</p></li><li><p>通过同步机制解决线程安全问题：1.同步代码块; 2.同步方法；</p></li><li><p>同步代码块：synchroized(同步监视器){需要同步的代码}，操作共享数据的代码，即为需要同步的代码</p></li><li><p>同步监视器就是我们所熟悉的锁（任何一个类的对象都可以充当锁），多个线程必须共用一把锁</p></li><li><p>同步方法：在方法中使用synchroized修饰方法，然后再调用</p></li><li><p>同步方法：1.同步方法仍涉及到同步监视器，只是不需要显式声明; 2.非静态的同步方法监视器是this; 3.静态的同步方法监视器是当前类本身 </p></li><li><p>操作同步代码时实质上是单线程过程，效率低（一个线程操作，其他线程等待）</p></li></ul><h4 id="3-线程死锁问题"><a href="#3-线程死锁问题" class="headerlink" title="3.线程死锁问题"></a>3.线程死锁问题</h4><p>（1）死锁原理</p><ul><li>不同线程分别占用了对方需要的同步资源，都在等待对方放弃自己需要的同步资源，就会形成线程的死锁</li><li>出现死锁后，不会出现异常或错误提示，只是所有线程都处在阻塞状态，无法继续</li></ul><p>（2）解决方法</p><ul><li>专门的算法，原则</li><li>尽量减少同步资源的定义</li><li>尽量避免嵌套同步</li></ul><h4 id="4-Lock-锁"><a href="#4-Lock-锁" class="headerlink" title="4.Lock(锁)"></a>4.Lock(锁)</h4><p>Java提供了更加强大的线程同步机制——通过显式定义同步锁对象来实现同步，其同样可以解决线程安全问题</p><p>（1）Lock与synchroized的异同</p><ul><li>同：两者都可以解决线程问题</li><li>异：synchroized执行同步代码后，自动释放同步监视器; Lock需要手动启动同步（lock()），手动结束同步（unlock()）</li><li>Lock只有代码块锁，synchroized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好，并具有更好的扩展性</li></ul><p>（2）使用顺序</p><p>Lock -&gt; 同步代码块-&gt; 同步方法</p><h4 id="5-线程通信"><a href="#5-线程通信" class="headerlink" title="5.线程通信"></a>5.线程通信</h4><p>（1）常用方法</p><ul><li>wait()：一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器</li><li>notify()：一旦执行此方法，就会唤醒被wait的一个线程，如果有多个线程被wait，就唤醒优先级高的线程</li><li>notifyAll()：一旦执行此方法，就会唤醒所有被wait的线程</li></ul><p>以上三个方法必须用在同步代码块或同步方法中</p><p>（2）sleep()和wait()的异同</p><ul><li>同：一旦执行方法，都可以使得当前得线程进入阻塞状态</li><li>异：1.声明位置不同   2.调用要求不同 3.是否释放同步监视器</li></ul><h2 id="Java常用类"><a href="#Java常用类" class="headerlink" title="Java常用类"></a>Java常用类</h2><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><h4 id="1-String概述"><a href="#1-String概述" class="headerlink" title="1.String概述"></a>1.String概述</h4><ul><li>String类代表字符串</li><li>Stirng是一个final类（ 不可被继承），代表不可变的字符串序列</li><li>字符串是常量，值在创建后不能更改</li><li>String对象的字符内容是存储在一个字符数组value[]中的</li><li>通过字面量的方式（区别于new）给一个字符串赋值，此时字符串声明在字符串常量池中（方法区）</li><li>字符串常量池不会存储相同内容的字符串，故栈中不同的局部变量如果赋相同字面量，实际指向方法区同一位置（地址相同）</li></ul><h4 id="2-String实现接口"><a href="#2-String实现接口" class="headerlink" title="2.String实现接口"></a>2.String实现接口</h4><ul><li>Serializable接口：表示字符串支持序列化</li><li>Comparable接口：表示字符串可以比较大小</li></ul><h4 id="3-不可变性体现"><a href="#3-不可变性体现" class="headerlink" title="3.不可变性体现"></a>3.不可变性体现</h4><ul><li>当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值</li><li>对现有的字符串进行连接操作、修改操作时，也需要重新指定内存区域赋值</li></ul><h4 id="4-String实例化"><a href="#4-String实例化" class="headerlink" title="4.String实例化"></a>4.String实例化</h4><p>（1）String实例化方式：</p><ul><li>通过字面量定义（数据存储在在方法区字符串常量池中，字符串作为常量，各变量共享一个数据空间）：<code>String s1 = &quot;2333&quot;</code></li><li>通过new  + 构造器（字符串数据仍然存储在常量池中，但是字符串的引用值存储在堆中，每创建一个字符串都会在堆中开辟新的空间存储字符串的引用值）：<code>String s3  = new String(&quot;javaEE&quot;)</code></li></ul><p>（2）String s3  = new String(“test”)对象个数</p><ul><li>两个对象：一个是堆空间中的new结构，另一个char[]对应变量池中的数据</li></ul><p>（3）字符串的拼接</p><ul><li><p>常量与常量的拼接结果在常量池，且常量池中不会存在相同内容的变量</p></li><li><p>只要拼接的两个对象中其中一个为变量，结果位于堆中</p></li><li><p>拼接结果调用intern方法，返回值就在常量中</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945850.png" alt="image-20210423113251323"></p></li></ul><h4 id="5-String常用方法"><a href="#5-String常用方法" class="headerlink" title="5.String常用方法"></a>5.String常用方法</h4><ul><li>length()：返回字符串长度</li><li>charAt()：返回某索引处的字符</li><li>isEmpty()：判断是否为空字符串</li><li>toLowerCase()：转换为小写</li><li>toUpperCase()：转换为大写</li><li>trim()：返回字符串副本，忽略空白处</li><li>equals()：比较字符串内容是否相同</li><li>concat()：将指定字符串连接到此字符串结尾</li><li>compareTo：比较两个字符串大小</li><li>substring()：截取出新的字符串</li><li>endsWith：测试字符串是否以指定的后缀结束</li><li>startsWith：测试此字符串是否以指定的前缀开始</li><li>contains：字符串是否包含指定char值序列</li><li>indexOf：返回指定子字符串第一次出现处的索引</li><li>rplace(): 替换掉字符串中指定的子字符串</li><li>replaceAll()：替换掉字符串所匹配正则表达式的子字符串</li><li>matches()：判断字符串是否匹配给定的正则表达式</li><li>split()：根据给定的正则表达式的匹配拆分此字符串</li></ul><h4 id="6-String数据类型转换"><a href="#6-String数据类型转换" class="headerlink" title="6.String数据类型转换"></a>6.String数据类型转换</h4><p>（1）String与基本数据类型，包装类的转换</p><ul><li>String –&gt; 基本数据类型，包装类：调用包装类的静态方法：parseXxx(str)</li><li>基本数据类型，包装类 –&gt; String：调用String重载的valueOf(xxx)</li></ul><p>（2）String与char[]的转换</p><ul><li>String –&gt; char[]：调用String的toCharArray()</li><li>char[] –&gt; String：调用String的构造器</li></ul><h4 id="7-String，StringBuffer，StringBuilder"><a href="#7-String，StringBuffer，StringBuilder" class="headerlink" title="7.String，StringBuffer，StringBuilder"></a>7.String，StringBuffer，StringBuilder</h4><p>（1）比较</p><ul><li>String:不可变的字符序列，底层使用char[]存储</li><li>StringBuffer：可变的字符序列，线程安全，效率低，底层使用char[]存储</li><li>StringBuffer：可变的字符序列，线程不安全，效率高，底层使用char[]存储</li><li>执行效率：StringBuilder &gt; StringBuffer &gt; String，开发中推荐使用StringBuffer</li></ul><p>（2）StringBuffer常用方法</p><ul><li>append()：提供很多append()方法，用于进行字符串拼接</li><li>delete()：删除指定位置的内容</li><li>replace()：替换指定索引位置的内容</li><li>insert()：在指定位置插入xxx</li><li>reverse()：把当前字符序列逆转</li></ul><h3 id="Java比较器"><a href="#Java比较器" class="headerlink" title="Java比较器"></a>Java比较器</h3><p>Java中的对象，正常情况下只能进行比较：==  或 != ，不能使用 &gt; 或 &lt; 的。但是在开发场景中我们需要对多个对象进行排序，就要用到两个接口：Comparable 或  Comparator</p><h4 id="1-Comparable接口"><a href="#1-Comparable接口" class="headerlink" title="1.Comparable接口"></a>1.Comparable接口</h4><p>（1）Comparable接口使用</p><ul><li>像String，包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出比较两个对象大小的方式</li><li>可以重写compareTo(obj)的规则</li></ul><p>（2）自定义类实现Comparable自然排序</p><ul><li>对于自定义类，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法，在其中指明如何排序</li><li>可以重写compareTo(obj)的规则：<ol><li>​    如果当前对象大于obj,返回正整数</li><li>​    如果当前对象小于obj,返回负整数</li><li>​    如果当前对象大于obj,返回零</li></ol></li></ul><h4 id="2-Comparator接口"><a href="#2-Comparator接口" class="headerlink" title="2.Comparator接口"></a>2.Comparator接口</h4><ul><li>重写compare(Object o1，Object o2)方法，比较o1和o2大小<ol><li>​    方法返回正整数，则表示o1大于o2</li><li>​    返回0，表示相等</li><li>​    返回负整数，表示o1小于o2</li></ol></li><li>Comparable接口的实现类的对象在任何位置都可以比较大小</li><li>Comparator接口属于临时性的比较</li></ul><h3 id="其他常用类"><a href="#其他常用类" class="headerlink" title="其他常用类"></a>其他常用类</h3><h4 id="1-时间类"><a href="#1-时间类" class="headerlink" title="1.时间类"></a>1.时间类</h4><h4 id="2-System类"><a href="#2-System类" class="headerlink" title="2.System类"></a>2.System类</h4><h4 id="3-Math类"><a href="#3-Math类" class="headerlink" title="3.Math类"></a>3.Math类</h4><h4 id="4-BigInteger和BigDecimal"><a href="#4-BigInteger和BigDecimal" class="headerlink" title="4.BigInteger和BigDecimal"></a>4.BigInteger和BigDecimal</h4><h2 id="枚举类与注解"><a href="#枚举类与注解" class="headerlink" title="枚举类与注解"></a>枚举类与注解</h2><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><h4 id="1-枚举类的使用"><a href="#1-枚举类的使用" class="headerlink" title="1.枚举类的使用"></a>1.枚举类的使用</h4><ul><li>类的对象只能是有限个，确定的，我们称此类为枚举类</li><li>当需要定义一组常量时，强烈建议使用枚举类</li><li>如果枚举类只有一个对象，则可以作为单例模式实现</li></ul><h4 id="2-枚举类的定义"><a href="#2-枚举类的定义" class="headerlink" title="2.枚举类的定义"></a>2.枚举类的定义</h4><ul><li><p>方式一：jdk5之前，自定义枚举类</p><ol><li>声明对象属性（private final修饰）</li><li>私有化类的构造器</li><li>提供当前多个枚举类的多个对象</li><li>其他诉求：获得枚举类对象的属性，提供toString()</li></ol></li></ul><ul><li><p>方式二：jdk5，可以使用enum关键字定义枚举类</p><ol><li><p>创建当前枚举类的对象，多个对象用“,”隔开，末尾对象”;”结束</p></li><li><p>声明对象属性（private final修饰）</p></li><li><p>提供当前多个枚举类的多个对象</p></li><li><p>其他诉求：获得枚举类对象的属性</p></li></ol></li></ul><h4 id="3-Enum类中常用方法"><a href="#3-Enum类中常用方法" class="headerlink" title="3.Enum类中常用方法"></a>3.Enum类中常用方法</h4><ul><li><p>values：返回枚举类型的对象数组</p></li><li><p>valueOf(String str)：可以把一个字符串转为对应枚举类对象</p></li><li><p>toString()：返回当前枚举类对象常量名称</p></li></ul><h4 id="4-枚举类实现接口"><a href="#4-枚举类实现接口" class="headerlink" title="4.枚举类实现接口"></a>4.枚举类实现接口</h4><ul><li>实现接口，在enum类中实现抽象方法</li><li>让枚举类的对象分别实现接口中的抽象方法</li></ul><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="1-注解说明"><a href="#1-注解说明" class="headerlink" title="1.注解说明"></a>1.注解说明</h4><ul><li>注解是代码里的特殊标记，这些标记可以在编译，类加载，运行时被读取，并执行响应操作。</li><li>利用注解，我们可以在不改变原有逻辑的情况下，在源文件嵌入一些补充信息。框架 = 注解 + 反射 + 设计模式</li></ul><h4 id="2-注解示例"><a href="#2-注解示例" class="headerlink" title="2.注解示例"></a>2.注解示例</h4><ul><li>生成文档的相关注解</li><li>在编译时进行格式检查</li><li>跟踪代码依赖性，实现替代配置文件功能</li><li>spring框架中关于“事务”的管理</li><li>Junit单元测试中也有大量注解的使用</li></ul><h4 id="3-JDK内置基本注解"><a href="#3-JDK内置基本注解" class="headerlink" title="3.JDK内置基本注解"></a>3.JDK内置基本注解</h4><ul><li>@Override：限定重写父类方法，在编译前校验该方法是否是重写父类的</li><li>@Deprecated：用于表示所修饰的元素（已过时）。通常是因为所修饰的结构危险或者存在更好的选择</li><li>@SuppressWarnings：抑制编译器警告</li></ul><h4 id="4-自定义注解"><a href="#4-自定义注解" class="headerlink" title="4.自定义注解"></a>4.自定义注解</h4><ul><li>注解声明为@interface</li><li>内部定义成员，通常用value表示</li><li>可以指定成员的默认值，使用default定义</li><li>如果自定义注解没有成员，表明是一个标识作用</li><li>如果注解有成员，在使用注解时，需要指明成员的类</li><li>自定义注解必须配送注解的信息处理流程（使用反射）才用意义</li><li>自定义注解通过都非指明两个元注解：Retention，Target</li></ul><h4 id="5-基本元注解"><a href="#5-基本元注解" class="headerlink" title="5.基本元注解"></a>5.基本元注解</h4><p>元注解：对现有的注解进行解释说明的注解</p><ul><li>Rentention：指定所修饰的Annotation的生命周期，只有生命为RUNTIME生命周期的注解才能通过反射获取</li><li>Target：用于指定被修饰的Annotation能用于修饰哪些程序元素</li><li>Documented：表示所修饰的注解被javadoc解析时，保留下来</li><li>Inherited：被它修饰的Annotation将具有继承性</li></ul><p>通过反射可以获取注解信息</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合，数组都是对多个数据进行存储操作的结构，简称Java容器（这里的存储主要是指内存层面的存储。不涉及到持久化的存储）</p><p>Java集合就像一种容器，可以动态地把多个对象的引用放入容器中</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945892.png" alt="image-20210424101354876"></p><h3 id="数组简介"><a href="#数组简介" class="headerlink" title="数组简介"></a>数组简介</h3><h4 id="1-数组存储缺点"><a href="#1-数组存储缺点" class="headerlink" title="1.数组存储缺点"></a>1.数组存储缺点</h4><ul><li>一旦初始化以后，其长度就不可修改了</li><li>数组中提供的方法非常有限，对于添加，删除，插入数据等操作，非常不便，效率不高</li><li>获取数据实际元素个数没有现成的属性和方法</li><li>数组存储数据特点：有序，可重复。对于无序，不可重复的需求，不能满足</li></ul><h3 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h3><p>单列数据，定义了存储一组对象的方法集合</p><h4 id="1-Collection接口继承树"><a href="#1-Collection接口继承树" class="headerlink" title="1.Collection接口继承树"></a>1.Collection接口继承树</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945760.png" alt="image-20210424101922654"></p><h4 id="2-Collection接口常用方法"><a href="#2-Collection接口常用方法" class="headerlink" title="2.Collection接口常用方法"></a>2.Collection接口常用方法</h4><ul><li>add(Object e)：将元素e添加到集合coll中</li><li>size()：获得添加的元素个数</li><li>addAll(Collection coll1)：将coll1集合中的元素添加到当前的集合中</li><li>isEmpty()：判断当前集合是否为空</li><li>clear()：清空集合元素</li><li>contains(Object obj)：判断当前集合是否包含obj </li><li>containsAll(Collecion coll1)：判断colls中的所有元素是否都存在于当前集合中</li><li>remove(Object obj)：从当前集合中移除obj元素</li><li>remove(Collecion coll1)：从当前集合中移除coll1中所有元素（移除差集）</li><li>retain(Collecion coll1)：获取当前集合与coll1集合的交集，并返回给当前集合</li><li>equals(Object obj)：要想返回true，需要当前集合和形参集合的元素都相同</li><li>hasCode()：返回当前对象的哈希值</li><li>toArray()：集合—-&gt;数组（数组—&gt;集合：调用Araays类的静态方法asList()）</li></ul><h4 id="3-集合遍历"><a href="#3-集合遍历" class="headerlink" title="3.集合遍历"></a>3.集合遍历</h4><p>（1）迭代器Iterator接口</p><ul><li>Iterator对象称为迭代器（设计模式的一种），主要用于遍历Collection集合的元素</li><li>迭代器模式：提供一种方法访问一个容器对象中各个元素，而又不需要暴露该对象的内部细节（迭代器，为容器而生）</li><li>迭代器Iterator内部方法：hasNext()和next()</li><li>迭代器执行原理：hasNext()判断是否还有下个元素; next()让指针下移</li><li>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都集合在第一个元素之前</li><li>remove()可以在遍历时，删除集合中的元素（区别于Collection接口的remove方法，这个要先调用next() ）</li></ul><p>（2）foreach循环遍历集合元素</p><ul><li>其内部仍然调用了迭代器</li><li>for(集合元素的类型 局部变量:集合对象)</li><li>foreach可以遍历数组和集合</li></ul><h4 id="4-List接口"><a href="#4-List接口" class="headerlink" title="4.List接口"></a>4.List接口</h4><p>存储有序的，可重复的数据（“动态”数组）</p><p>（1）List三个实现类ArrayList，LinkedList，Vector的异同</p><ul><li>同：都实现了List接口，存储数据特点相同：存储有序的，可重复的数据</li><li>异：<ol><li>ArrayList：底层使用Object[] elementData存储；作为List接口主要实现类，线程不安全，效率高；</li><li>LinkList：底层使用双向链表存储；对于频繁的插入，删除操作，使用此类效率比ArrayList高；</li><li>Vector：List接口古老实现类;线程安全，效率低；底层使用Object[] elementData存储</li></ol></li></ul><p>（2）List常用方法</p><ul><li>增：add(Object obj)</li><li>删：remove(int index)</li><li>改：set(int index, Object ele)</li><li>查：get(int inedx)</li><li>插：add(int index, Object ele)</li><li>长度：size()</li><li>遍历方法：<ol><li>Iterator迭代器方法</li><li>增强for循环</li><li>普通循环</li></ol></li></ul><h4 id="5-Set接口"><a href="#5-Set接口" class="headerlink" title="5.Set接口"></a>5.Set接口</h4><p>存储无序的（set的底层也是数组，但是存储的物理顺序是在申请空间的随机位置），不可重复的数据（数学概念的“集合”）</p><p>Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法</p><p>（1）Set接口的实现类</p><ul><li>HashSet：作为Set接口的主要实现类，线程不安全，可以存储null值</li><li>LinkedHashSet：作为HashSet的子类，遍历其内部数据时，可以按照添加顺序遍历</li><li>TreeSet：可以按照添加对象的指定属性进行排序（底层为红黑树）</li></ul><p>（2）Set解析</p><ul><li>无序性：不等同于随机性，存储的数据在底层数组中并发按照数组索引的顺序添加，而是根据数据的哈希值决定的</li><li>不可重复性：相同的元素只能添加一个</li></ul><p>（3）HashSet元素插入过程</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945099.png" alt="image-20210424182729653"></p><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><p>双列数据，保存具有映射关系“key-value”的集合（ y=f(x) ）</p><h4 id="1-Map实现"><a href="#1-Map实现" class="headerlink" title="1.Map实现"></a>1.Map实现</h4><p>有两种实现类：HashMap（主要）和Hashtable（古老）</p><ul><li>HashMap：Map的主要实现类，线程不安全，效率高，可以存储null的key和value（底层为：数组+链表+红黑树）<ol><li>LinkedHashMap：保证在遍历map元素时，可以按照添加的顺序实现遍历（有一对指向前和指向后节点的指针，对频繁的遍历操作，执行效率高于HashMap）</li></ol></li><li>TreeMap：保证按照添加的key-value对进行排序，实现排序遍历（key自然排序或自定义排序，底层为红黑树 ）</li><li>Hashtable：作为古老的实现类，线程安全，效率低，不能存储null的key和value<ol><li>Properties：常用于处理配置文件，key 和 value都是String类型</li></ol></li></ul><h4 id="2-Map接口继承树"><a href="#2-Map接口继承树" class="headerlink" title="2.Map接口继承树"></a>2.Map接口继承树</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945354.png" alt="image-20210424102038816"></p><h4 id="3-Map结构理解"><a href="#3-Map结构理解" class="headerlink" title="3.Map结构理解"></a>3.Map结构理解</h4><ul><li>Map中的key：无序的，不可重复的，使用Set存储所有的key ———–&gt;key所在的类要重写equals()和hashCode()</li><li>Map中的value:无序的，可重复的，使用Collection存储所有的value————&gt; value所在类要重写equals()</li><li>一个键值对：key-value构成一个Entry对象</li><li>Map中的entry：无序的，不可重复的，使用Set存储所有的entry</li></ul><h4 id="4-HashMap底层实现原理"><a href="#4-HashMap底层实现原理" class="headerlink" title="4.HashMap底层实现原理"></a>4.HashMap底层实现原理</h4><p>（1）jdk7</p><ul><li><code>HashMap map = new HashMap()</code>：实例化后，底层创建了长度为16的一维数组Entry[] table</li><li><code>map.put(key1,value1)</code>：首先调用key所在；类的hasCode计算key哈希值，得到在Entry数组的存放位置</li><li>如果此位置上的数据为空，则添加成功</li><li>如果此位置上的数据不为空，比较key和已存在的数据的哈希值<ol><li>如果key的哈希值与已存在的数据哈希值都不相同，则添加成功</li><li>如果与其中一个数据哈希值相同，继续比较其value值：如果返回false，则添加成功，如果返回true，则使用替换相同key的value值</li></ol></li></ul><p>（2）jdk8</p><p>数组+链表+红黑树</p><h4 id="5-Map常用方法"><a href="#5-Map常用方法" class="headerlink" title="5.Map常用方法"></a>5.Map常用方法</h4><p>（1）添加，删除，修改操作</p><ul><li>Object put(Object key, Object value)：将指定的key-value添加到当前map对象中</li><li>void putAll(Map m)：将m中所有的key-value放到当前map中</li><li>Object remove(Object key)：移除指定key-value对，并返回value</li><li>void clear()：清空当前map中所有数据</li></ul><p>（2）元素查询操作</p><ul><li>Object get(Object key)：获取指定key对应的value</li><li>boolean containsKey(Object key)：是否包含指定key</li><li>boolean containsValue(Object Value)：是否包含指定Value</li><li>int size()：返回map中key-value个数</li><li>boolean isEmpty()：判断当前map是否为空</li><li>boolean equals(Object obj)：判断当前map和参数对象obj是否相等</li></ul><p>（3）元视图操作的方法</p><ul><li>Set keySet()：返回所有key构成的Set集合</li><li>Collection values()：返回所有value构成的Collection集合</li><li>Set entrySet()：返回所有key-value对构成的Set集合</li></ul><h4 id="6-TreeMap"><a href="#6-TreeMap" class="headerlink" title="6.TreeMap"></a>6.TreeMap</h4><p>用于需要排列的key-value，可以定制排序</p><h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><p>Collections是一个操作Set，List和Map等集合的工具类</p><h4 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a>1.常用方法</h4><p>（1）排序操作（抽象方法）</p><ul><li>reverse(List)：反转List中元素的顺序</li><li>shuffle(List)：对List集合元素进行随机排序</li><li>sort(List)：根据元素的自然顺序对指定List集合元素按升序排序</li><li>sort(List, Comparator)：根据指定的Comparator产生的顺序对List集合进行排序</li><li>swap(List, int i, int j )：将指定list集合的i和j处元素进行交换</li></ul><p>（2）查找替换</p><ul><li>Object max(Collection)：根据自然顺序返回最大元素</li><li>Object max(Collection, Comparator)：根据Comparator指定顺序，返回最大元素</li><li>Object min(Collection)</li><li>Object min(Collection, Comparator)</li><li>int frequency(Collection, Object)：返回指定集合元素出现次数</li><li>void copy(List dest, List src)：将src中的内容复制到dest中</li><li>boolean replaceAll(List list, Object oldVal, Object newVal)：使用新值替换List对象的所有旧值</li></ul><p>（3）同步控制</p><p>Collections类提供多个synchromizedXxx()方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发范围集合时的线程安全问题</p><p>将线程不安全的集合类型转换为线程安全的类型</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p>（1）数据间的逻辑关系：</p><ul><li>集合</li><li>线性关系（对应Java中的顺序表，链表，栈，队列）</li><li>树形结构（对应java中的二叉树）</li><li>网状结构（对应java中的图）</li></ul><h4 id="2-真实结构"><a href="#2-真实结构" class="headerlink" title="2.真实结构"></a>2.真实结构</h4><ul><li>顺序表（静态数据结构）：Array，ArrayList</li><li>链表（动态数据结构）：LinkedList</li></ul><h4 id="3-抽象结构"><a href="#3-抽象结构" class="headerlink" title="3.抽象结构"></a>3.抽象结构</h4><ul><li>栈</li><li>队列</li><li>树</li><li>图</li></ul><h2 id="泛型与File"><a href="#泛型与File" class="headerlink" title="泛型与File"></a>泛型与File</h2><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="1-泛型概述"><a href="#1-泛型概述" class="headerlink" title="1.泛型概述"></a>1.泛型概述</h4><p>（1）泛型的出现</p><ul><li>泛型相当于标签，来确定一个容器实际存放什么类型的对象</li><li>把元素的类型设计为一个参数，这个类型参数叫做泛型</li></ul><p>（2）泛型说明</p><ul><li>泛型允许在定义类，接口时通过一个标识表示类中某个属性的类型或者某个方法的返回值及参数类型</li><li>List<String>表明List只能存放字符串类型对象</String></li></ul><p>（3）泛型相对Object</p><ul><li>解决元素储存的安全性问题</li><li>解决获取数据元素时，需要类型强制转换的问题</li></ul><h4 id="2-泛型的使用"><a href="#2-泛型的使用" class="headerlink" title="2.泛型的使用"></a>2.泛型的使用</h4><p>（1）在集合中使用泛型</p><ul><li>ArrayList <Integer> list =  new ArrayList <Integer>()</Integer></Integer></li><li>编译时就会进行类型检查，保证数据安全</li><li>避免强转操作</li></ul><p>（2）泛型使用总结</p><ul><li><p>在实例化集合类时，可以指明具体的泛型类型</p></li><li><p>指明完以后，在集合类或接口中函数定义类或接口时，内部结构使用到类的泛型的位置，都指定为实例化时的泛型类型</p></li><li><p>泛型的类型必须是类，不能是基本数据类型，需要用到基本数据类型的位置用包装类代替</p></li></ul><h4 id="3-泛型结构"><a href="#3-泛型结构" class="headerlink" title="3.泛型结构"></a>3.泛型结构</h4><p>（1）泛型类</p><ul><li>类的内部结构就可以使用类的泛型</li><li>如果定义了泛型类，实例化时没有指明类的泛型，默认为Object类型</li><li>如果定义的类带泛型，建议在实例化时指明类的泛型</li><li>子类在继承泛型的父类时指明了泛型类型，则实例子类对象时，不在需要指明泛型</li><li>泛型不同的引用不能互相赋值</li><li>静态方法中不能使用类的泛型</li><li>子类除了指定后保留父类的泛型，也可以增加自己的泛型</li></ul><p>（2）泛型方法</p><ul><li>在该方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系（泛型方法所属的类是不是泛型类都没有关系）</li><li>泛型方法在调用时，指明泛型参数的类型</li><li>泛型方法，可以声明为静态</li></ul><p>（3）通配符</p><h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><p>File类属于IO流的内容，可以新建，删除，重命名文件和目录，但是File列不能访问文件本身，访问文件内容需要输入\输出流</p><h4 id="1-常用方法-1"><a href="#1-常用方法-1" class="headerlink" title="1.常用方法"></a>1.常用方法</h4><p>（1）获取功能</p><p>（2）重命名功能</p><p>（3）判断功能</p><p>（4）创建，删除方法</p><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="IO流原理与分类"><a href="#IO流原理与分类" class="headerlink" title="IO流原理与分类"></a>IO流原理与分类</h3><h4 id="1-IO原理"><a href="#1-IO原理" class="headerlink" title="1.IO原理"></a>1.IO原理</h4><ul><li>I/O技术用于处理设备之间的数据传输，如读写文件，网络通讯</li><li>在 Java中，数据的输入输出以流（stream）的方式进行</li><li>java.io包下提供各种“流”类和接口，以获得不同种类的数据，并通过标准的方法输入或输出数据</li></ul><h4 id="2-流的分类"><a href="#2-流的分类" class="headerlink" title="2.流的分类"></a>2.流的分类</h4><ul><li><p>操作数据单位分类：字节流（InputStream/OutputStream），字符流（Reader/Writer）</p></li><li><p>流向分类：输入流，输出流</p></li><li><p>流的角色分类：节点流，处理流（应用上为缓冲流）</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945866.png" alt="image-20210505075809772"></p></li></ul><h3 id="文件流操作"><a href="#文件流操作" class="headerlink" title="文件流操作"></a>文件流操作</h3><h4 id="1-读取文件"><a href="#1-读取文件" class="headerlink" title="1.读取文件"></a>1.读取文件</h4><p>从硬盘文件读入数据到内存</p><ul><li><p>实例化File类对象，指明操作文件</p></li><li><p>提供具体流</p></li><li><p>数据的读入方法与结束判断</p><p>​    1. read()：返回读入的一个字符，如果达到文件末尾，返回-1）</p><p>​    2. read(char[] cbuf )：read()方法的重载，返回每次读入cbuf数组的字符个数，如果达到文件末尾返回-1</p></li><li><p>流的关闭（往往要通过异常处理保证流资源一定可以执行关闭操作）</p></li><li><p>读入的文件一定要存在，否则会报出异常</p></li></ul><h4 id="2-写出文件"><a href="#2-写出文件" class="headerlink" title="2.写出文件"></a>2.写出文件</h4><p>从内存中写出数据到硬盘文件</p><ul><li>提供File类对象，指明写出到的文件<ol><li>如果File对应文件不存在，则自动创建此文件</li><li>如果File对应文件存在，则有覆盖和追加两种形式的操作</li></ol></li><li>提供FileWriter的对象，用于数据写出<ol><li>流的构造器为：FileWriter(file,false) / FileWriter(file)，则对原有文件进行覆盖</li><li>流的构造器为：FileWriter(file, ture),则在源文件上追加内容</li></ol></li><li>写出操作</li><li>流资源关闭</li></ul><h4 id="3-字符流与字节流"><a href="#3-字符流与字节流" class="headerlink" title="3.字符流与字节流"></a>3.字符流与字节流</h4><ul><li>操作数据单位分类：字节流（InputStream/OutputStream），字符流（Reader/Writer）</li><li>字符流不能处理非文本文件，对于文本文件使用字符流处理</li><li>字节流不能处理文本文件，对于非文本文件使用字节流处理</li></ul><h4 id="4-缓冲流"><a href="#4-缓冲流" class="headerlink" title="4.缓冲流"></a>4.缓冲流</h4><ul><li>缓冲流比于节点流，提供了流的读取，写入的速度</li><li>使用缓冲流要比使用节点流，多一步造缓冲流的操作（在节点的基础上制造缓冲流）</li><li>资源关闭上，先关闭外层的流，再关闭内层的流（关闭外层流的同时，内层流可以自动关闭，内层流的关闭程序可以省略）</li><li>缓冲流可以提高文件读入写出速度，因为内部提供了一个缓冲区</li></ul><h4 id="5-随机存取文件流"><a href="#5-随机存取文件流" class="headerlink" title="5.随机存取文件流"></a>5.随机存取文件流</h4><ul><li>RandomAceessFile类实现了DataInput、DataOutput两个接口，该类既可以读也可以写</li><li>RandomAceessFile类支持随机访问的形式，程序可以直接跳到文件任意地方来读写文件</li><li>RandomAceessFile对象包含一个记录指针，用于标识当前读写位置</li></ul><h4 id="6-NIO2中文件读写"><a href="#6-NIO2中文件读写" class="headerlink" title="6.NIO2中文件读写"></a>6.NIO2中文件读写</h4><ul><li>NIO2是对Java原有IO流的升级，可以以更加高效的方式进行文件读写操作</li><li>Java API提供了两套NIO，一套是针对标准输入输出的NIO，另一套是网络编程NIO</li><li>File类访问文件功能比较有限，后来又引入类Path接口对File类进行了升级</li><li>在NIO.2中还提供了Files、Paths工具类</li></ul><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><h4 id="1-转换流概述"><a href="#1-转换流概述" class="headerlink" title="1.转换流概述"></a>1.转换流概述</h4><ul><li>转换流为处理流的一种，提供了在字节流和字符流之间的转换</li><li>Java API提供了两个转换流：<ol><li>InputStreamReader：将InputStream转换为Reader</li><li>OutputStreamWriter：将Writer转换为OutputStream</li></ol></li><li>字节流中的数据都是字符时，转换成字符流操作更高效</li><li>转换流常用来处理文件乱码问题，实现编码和解码的功能</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945369.png" alt="image-20210505100444727"></p><h4 id="2-转换流的使用"><a href="#2-转换流的使用" class="headerlink" title="2.转换流的使用"></a>2.转换流的使用</h4><ul><li>InputStreamReader：将一个字节的输入流转换为字符的输入流</li><li>OutputStreamWriter：将一个字符的输出流转换为字节的输出流</li><li>提供了在字节流和字符流之间的转换，用于解码、编码</li></ul><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><h4 id="1-对象流概述"><a href="#1-对象流概述" class="headerlink" title="1.对象流概述"></a>1.对象流概述</h4><ul><li><p>ObjectinputStream和ObjectOutputSteam</p></li><li><p>用于存储和读取基本数据类型数据或对象的处理流，可以把Java的对象写入数据源中，也能把对象从数据源中还原回来</p></li><li><p>序列化：ObjectinputStream保存基本数据类型或对象的机制</p></li><li><p>反序列化：ObjectOutputSteam读取基本数据类型或对象的机制</p></li><li><p>ObjectinputStream和ObjectOutputSteam不能序列化static和transient修饰的成员变量</p></li></ul><h4 id="2-对象的序列化"><a href="#2-对象的序列化" class="headerlink" title="2.对象的序列化"></a>2.对象的序列化</h4><ul><li>对象序列化机制把内存中的Java对象转换成平台无关的二进制流，从而允许把二进制流保存在磁盘上或通过网络传输</li><li>程序获取二进制流，可以反序列化恢复为Java对象</li><li>序列化的好处在于可以将任何实现了Serializable接口的对象转换为字节数据，保证其保存和传输时可被还原</li></ul><h3 id="其他基本流"><a href="#其他基本流" class="headerlink" title="其他基本流"></a>其他基本流</h3><h4 id="1-标准输入输出流"><a href="#1-标准输入输出流" class="headerlink" title="1.标准输入输出流"></a>1.标准输入输出流</h4><ul><li>System.in：标准的输入流，默认从键盘输入</li><li>System.out：标准的输出流，默认从控制台输出</li><li>可以通过setIn(InputStream is) / setOut(PrintStream ps)方式重新指定输出和输入的默认设备</li></ul><h4 id="2-打印流"><a href="#2-打印流" class="headerlink" title="2.打印流"></a>2.打印流</h4><ul><li>实现将基本数据类型转化成字符串输出</li><li>打印流PrintStream和PrintWriter</li><li>提供了一系列重载的print()和println()方法，用于多种数据类型输出</li></ul><h4 id="3-数据流"><a href="#3-数据流" class="headerlink" title="3.数据流"></a>3.数据流</h4><ul><li><p>方便操作（读取和写出）Java语言的基本类型和 String的数据</p></li><li><p>DataInputStream 和 DataOutputStream分别套接在InputStream和OutputStream子类的流上</p></li></ul><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="基础内容"><a href="#基础内容" class="headerlink" title="基础内容"></a>基础内容</h3><h4 id="1-网络编程定义"><a href="#1-网络编程定义" class="headerlink" title="1.网络编程定义"></a>1.网络编程定义</h4><ul><li>网络编程的目的：直接或间接通过网络协议与其他计算机实现数据交换，进行通讯</li><li>定位主机上特定的应用（IP和端口号）</li><li>可靠高效数据运输（通过网络通信协议TCP/IP）</li></ul><h3 id="TCP网络编程"><a href="#TCP网络编程" class="headerlink" title="TCP网络编程"></a>TCP网络编程</h3><h3 id="UDP网络编程"><a href="#UDP网络编程" class="headerlink" title="UDP网络编程"></a>UDP网络编程</h3><h3 id="URL网络编程"><a href="#URL网络编程" class="headerlink" title="URL网络编程"></a>URL网络编程</h3><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><h3 id="反射机制概述"><a href="#反射机制概述" class="headerlink" title="反射机制概述"></a>反射机制概述</h3><h4 id="1-反射的含义"><a href="#1-反射的含义" class="headerlink" title="1.反射的含义"></a>1.反射的含义</h4><p>（1）含义</p><ul><li>反射是动态语言的关键，反射机制允许程序在执行期间借助Reflection API 取得任何类的内部信息，并能直接操作任意对象的内部属性及方法</li><li>加载完类后，堆内存的方法区中就会产生一个Class类型的对象，通过该对象我们可以看到类的结构信息，则就是反射机制的本质</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945603.png" alt="image-20210505220053207"></p><p>（2）动态语言与静态语言</p><ul><li>动态语言在运行时可以根据条件改变自身结构（PHP，Python）</li><li>静态语言运行时结构不可变（Java，C, C++）</li><li>Java是准动态语言，我们可以利用反射机制，字节码操作获得类似动态语言的特性，让编程更加灵活</li></ul><h4 id="2-反射功能"><a href="#2-反射功能" class="headerlink" title="2.反射功能"></a>2.反射功能</h4><p>通过反射可以调用类的私有结构，反射常常用于对象不确定的情况下（反射的动态性）</p><ul><li>运行时判断任意对象所属类</li><li>运行时构造任意一个类的对象</li><li>运行时判断一个类所具有的成员变量和方法</li><li>运行时获取泛型信息</li><li>运行时任意调用对象的成员变量和方法</li><li>运行时处理注解</li><li>生成动态代理</li></ul><h4 id="3-反射主要API"><a href="#3-反射主要API" class="headerlink" title="3.反射主要API"></a>3.反射主要API</h4><ul><li>java.lang.Class：代表一个类</li><li>java.lang.reflect.Method：代表类的方法</li><li>java.lang.reflect.Field：代表类的成员变量</li><li>java.lang.reflect.Constructor：代表类的构造器</li></ul><h3 id="Class类的理解"><a href="#Class类的理解" class="headerlink" title="Class类的理解"></a>Class类的理解</h3><h4 id="1-类的加载过程"><a href="#1-类的加载过程" class="headerlink" title="1.类的加载过程"></a>1.类的加载过程</h4><ul><li>程序经过javac.exe命令后，会生成一个或多个字节码文件（.class结尾）接着我们使用java.exe命令对某个字节码文件进行解释运行，相当于将某个字节码文件加载到内存中，此过程就被称为类的加载</li><li>加载到内存中的类，我们称为运行时类，此运行时类就作为Class的一个实例（类是Class的对象）</li><li>Class的实例对应着一个运行时类</li></ul><h4 id="2-获得Class实例的方法"><a href="#2-获得Class实例的方法" class="headerlink" title="2.获得Class实例的方法"></a>2.获得Class实例的方法</h4><ul><li><p>调用运行类时的属性：.class</p></li><li><p>通过运行时类的对象，调用getClass</p></li><li><p>调用Class静态方法：forName(String classPath)（常用）</p></li><li><p>使用类的加载器：ClassLoader</p></li></ul><h4 id="3-Class实例对应结构"><a href="#3-Class实例对应结构" class="headerlink" title="3.Class实例对应结构"></a>3.Class实例对应结构</h4><p>有哪些类型有Class对象</p><ul><li>class：外部类，成员，局部内部类，匿名内部类</li><li>interface：接口</li><li>[]：数组</li><li>enum：枚举</li><li>annotation：注解</li><li>primitive type：基本数据类型</li><li>void</li></ul><h3 id="类的加载的理解"><a href="#类的加载的理解" class="headerlink" title="类的加载的理解"></a>类的加载的理解</h3><h4 id="1-类的加载过程-1"><a href="#1-类的加载过程-1" class="headerlink" title="1.类的加载过程"></a>1.类的加载过程</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945557.png" alt="image-20210506074346998"></p><h4 id="2-ClassLoader的理解"><a href="#2-ClassLoader的理解" class="headerlink" title="2.ClassLoader的理解"></a>2.ClassLoader的理解</h4><p>（1）类的加载器流程位置</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945002.png" alt="image-20210506074558379"></p><p>（2）类的加载器的作用</p><ul><li>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后再堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口</li><li>类缓存：一旦某个类被加载到类加载器中，它会维持（缓存）一段时间，不够JVM垃圾回收机制可以回收这些Class对象</li></ul><p>（3）Java定义的类的加载器类型</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945770.png" alt="image-20210506075638645"></p><p>（4）ClassLoader加载配置文件</p><p>​    读取配置文件的方法：</p><ul><li>使用properties集合+IO流读取</li><li>使用ClassLoader读取</li></ul><h3 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h3><p>平常我们一般使用类的构造器（new）创建类的对象，我们也可以通过反射创建对应的运行时类的对象</p><h4 id="1-创建流程"><a href="#1-创建流程" class="headerlink" title="1.创建流程"></a>1.创建流程</h4><ul><li>调用newInstance()方法，创建对应的运行时类的对象</li><li>内部调用了运行时类的空参构造器</li></ul><h4 id="2-创建要求"><a href="#2-创建要求" class="headerlink" title="2.创建要求"></a>2.创建要求</h4><ul><li>运行时类必须提供空参的构造器</li><li>空参过的构造器的访问权限通常设置为public</li><li>便于通过反射，创建运行时类的对象</li><li>便于子类继承此运行类时，默认调用super()时，保证父类有此构造器</li></ul><h3 id="获得运行时类的结构"><a href="#获得运行时类的结构" class="headerlink" title="获得运行时类的结构"></a>获得运行时类的结构</h3><h4 id="1-获得属性结构"><a href="#1-获得属性结构" class="headerlink" title="1.获得属性结构"></a>1.获得属性结构</h4><ul><li>getFields()：获取当前运行时类及其父类中声明public访问权限的属性</li><li>getDeclaredFields()：获取当前运行时类中声明的所有属性（不包含父类中声明的属性）</li></ul><h4 id="2-获取方法结构"><a href="#2-获取方法结构" class="headerlink" title="2.获取方法结构"></a>2.获取方法结构</h4><ul><li>getMethods()：获取当前运行时类及其所有父类中声明为public权限的方法</li><li>getDeclaredMethods()：获取当前运行时类中声明的所有方法（不包含父类中声明的方法）</li></ul><h4 id="3-获取方法的内部结构"><a href="#3-获取方法的内部结构" class="headerlink" title="3.获取方法的内部结构"></a>3.获取方法的内部结构</h4><ul><li>获取方法声明的注解</li><li>权限修饰符</li><li>返回值类型</li><li>方法名</li><li>形参列表</li></ul><h4 id="4-获取构造器结构"><a href="#4-获取构造器结构" class="headerlink" title="4.获取构造器结构"></a>4.获取构造器结构</h4><ul><li>getConstructors()：获取当前运行时类中声明为public的构造器</li><li>getDeclaredConstructors()：获取当前运行时类中声明的所有构造器</li></ul><h4 id="5-其他获取内容"><a href="#5-其他获取内容" class="headerlink" title="5.其他获取内容"></a>5.其他获取内容</h4><ul><li>获得运行时类的父类及父类泛型</li><li>获得运行类的实现的接口，所在包，注解</li></ul><h3 id="调用运行时类的结构"><a href="#调用运行时类的结构" class="headerlink" title="调用运行时类的结构"></a>调用运行时类的结构</h3><h4 id="1-调用指定属性"><a href="#1-调用指定属性" class="headerlink" title="1.调用指定属性"></a>1.调用指定属性</h4><ul><li>创建运行时类的对象</li><li>获得指定的属性（通常用getDeclaredFields()，因为可以获得私有属性）</li><li>保证当前属性是可访问的（setAccessible方法）</li><li>设置当前属性的值（set方法）</li><li>获取当前属性的值（get方法）</li><li>获取当前属性的值</li></ul><h4 id="2-调用指定方法"><a href="#2-调用指定方法" class="headerlink" title="2.调用指定方法"></a>2.调用指定方法</h4><ul><li>创建运行时类的对象</li><li>获取指定的某个方法</li><li>保证当前方法是可访问的（setAccessible方法）</li><li>调用invoke方法执行</li></ul><h4 id="3-调用指定构造器"><a href="#3-调用指定构造器" class="headerlink" title="3.调用指定构造器"></a>3.调用指定构造器</h4><ul><li>获得指定构造器</li><li>保证此构造器可访问</li><li>调用此构造器创建运行时类的对象</li></ul><h3 id="反射应用：动态代理"><a href="#反射应用：动态代理" class="headerlink" title="反射应用：动态代理"></a>反射应用：动态代理</h3><h4 id="1-代理设计模式原理"><a href="#1-代理设计模式原理" class="headerlink" title="1.代理设计模式原理"></a>1.代理设计模式原理</h4><ul><li><p>使用一个代理将对象包装起来，然后用该代理对象取代原始对象，任何对原始对象的调用都要通过代理</p></li><li><p>最好可以通过一个代理类完成全部的代理功能</p></li></ul><h4 id="2-动态代理概述"><a href="#2-动态代理概述" class="headerlink" title="2.动态代理概述"></a>2.动态代理概述</h4><ul><li><p>动态代理是指用户通过代理类来调用其他对象的方法，并且是在程序运行时更加动态创建 目标类的代理对象</p></li><li><p>动态代理使用场合：</p><ol><li>调试</li><li>远程方法调用</li></ol></li><li><p>动态代理相比静态代理的优点：抽象角色中接口声明的所有方法都被转移到调用处理器一个集中的方法中处理（可以更加灵活和统一的处理众多的方法）</p></li></ul><h4 id="3-动态代理与AOP"><a href="#3-动态代理与AOP" class="headerlink" title="3.动态代理与AOP"></a>3.动态代理与AOP</h4><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945546.png" alt="image-20210506141800436"></p><h2 id="Java8的其他特性"><a href="#Java8的其他特性" class="headerlink" title="Java8的其他特性"></a>Java8的其他特性</h2><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>Lambda表达式是一个 ，可以将其理解为一段可以传递的代码，其本质是作为函数式接口的实例</p><h4 id="1-Lambda表达式的使用"><a href="#1-Lambda表达式的使用" class="headerlink" title="1.Lambda表达式的使用"></a>1.Lambda表达式的使用</h4><ul><li>-&gt; :lambda操作符或箭头操作符</li><li>-&gt; 左边：lambda形参列表（即接口中的抽象方法的形参列表）</li><li>-&gt; 右边：lambda体（即重写抽象方法的方法体）</li><li>如果lamba形参列表只有一个参数，其一对()也可以省略</li><li>lambda体应该使用一对{}包裹，如果lambda只有一条执行语句，可以省略{}和return</li></ul><h4 id="2-lambda使用分类"><a href="#2-lambda使用分类" class="headerlink" title="2.lambda使用分类"></a>2.lambda使用分类</h4><ul><li>无参，无返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runnable r1 = ()-&gt; &#123;System.out.println(<span class="string">&quot;Hello,Lambda&quot;</span>);&#125;;</span><br></pre></td></tr></table></figure><ul><li>需要一个参数，无返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = (String str)-&gt;&#123;System.out.println(str);&#125;;</span><br></pre></td></tr></table></figure><ul><li>数据类型可以省略，可由编译器推断得出（类型推断）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = (str)-&gt;&#123;System.out.println(str);&#125;;</span><br></pre></td></tr></table></figure><ul><li>只需要一个参数时，参数的小括号可以省略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = str-&gt;&#123;System.out.println(str);&#125;;</span><br></pre></td></tr></table></figure><ul><li>需要两个或两个以上的参数，多条执行语句，并且可以有返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com = (x,y)-&gt;&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;实现函数式接口方法&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> Integer.compare(x,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当Lambda只有一条语句时，return与大括号可以省略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com = (x,y)-&gt;Integer.compare(x,y);</span><br></pre></td></tr></table></figure><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><h4 id="1-函数式接口含义"><a href="#1-函数式接口含义" class="headerlink" title="1.函数式接口含义"></a>1.函数式接口含义</h4><ul><li><p>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口</p></li><li><p>我们可以通过Lambda表达式创建该接口的对象</p></li><li><p>使用@Functionallnterface注解，可以检测是否为函数式接口</p></li></ul><h4 id="2-Java内置函数式接口"><a href="#2-Java内置函数式接口" class="headerlink" title="2.Java内置函数式接口"></a>2.Java内置函数式接口</h4><ul><li><p>Consumer<T>：消费型接口</T></p></li><li><p>Supplier<T>：供给型接口</T></p></li><li><p>Function&lt;T,R&gt;：函数型接口</p></li><li><p>Predicate<T>：断定型接口</T></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040945212.png" alt="image-20210506192031648"></p></li></ul><h3 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h3><h4 id="1-方法引用介绍"><a href="#1-方法引用介绍" class="headerlink" title="1.方法引用介绍"></a>1.方法引用介绍</h4><ul><li>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用</li><li>方法引用就是Lambada表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法</li><li>实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致</li><li>有以下三种主要使用情况<ol><li>对象::实例方法名</li><li>类::静态方法名</li><li>类::实例方法名</li></ol></li></ul><h4 id="2-构造器引用"><a href="#2-构造器引用" class="headerlink" title="2.构造器引用"></a>2.构造器引用</h4><ul><li>与方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致</li><li>抽象方法的返回值类型即构造器所属的类的类型</li></ul><h3 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h3><h4 id="1-Stream概述"><a href="#1-Stream概述" class="headerlink" title="1.Stream概述"></a>1.Stream概述</h4><ul><li>Stream是Java中处理集合的关键抽象概念，它可以对集合进行复杂的查找，过滤，映射数据等操作（类似于SQL之于数据库）</li><li>NoSQL的数据（MongDB,Radis等）需要在Java层面处理，所有需要Stream API</li><li>Stream 与 Collection集合的区别：Collection是一种静态的内存数据结构，其面向内存用于数据存储;Stream有关计算，其面向CPU通过CPU实现计算</li></ul><h4 id="2-Stream须知事项"><a href="#2-Stream须知事项" class="headerlink" title="2.Stream须知事项"></a>2.Stream须知事项</h4><ul><li>Stream自己不会存储元素</li><li>Stream不会改变源对象，相反，它们会返回一个持有结果的新Stream</li><li>Stream操作时延迟执行的，他们会等到需要结果时才执行</li></ul><h4 id="3-Stream操作过程"><a href="#3-Stream操作过程" class="headerlink" title="3.Stream操作过程"></a>3.Stream操作过程</h4><ul><li><p>创建Stream：一个数据源（如：集合，数组）获取一个流</p></li><li><p>中间操作：一个中间操作链，对数据源的数据进行处理</p></li><li><p>终止操作：一旦执行终止操作，就执行中间操作链，并产生结果，后面不会再被使用</p></li></ul><h4 id="4-Stream实例化"><a href="#4-Stream实例化" class="headerlink" title="4.Stream实例化"></a>4.Stream实例化</h4><p>（1）创建Stream</p><ul><li>通过集合创建</li><li>通过数组创建</li><li>通过Stream的of()创建</li><li>创建无限流</li></ul><p>（2）中间操作</p><ul><li>筛选与切片</li><li>映射</li><li>排序</li></ul><p>（3）Stream的终止操作</p><ul><li>匹配与查找</li><li>归约</li><li>收集</li></ul><h3 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h3><h4 id="1-Optional类概述"><a href="#1-Optional类概述" class="headerlink" title="1.Optional类概述"></a>1.Optional类概述</h4><ul><li><p>Optional<T>类是一个容器类，可以保存类型T的值，代表这个值存在（或者仅仅保存null，表示这个值不存在）</T></p></li><li><p>Optional可以更好表达这个概念，并且可以避免空指针异常</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040947723.png&quot; alt=&quot;image-20210904094723369&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://autovy.github.io/categories/Java/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Java" scheme="https://autovy.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C语言|算法入门指南</title>
    <link href="https://autovy.github.io/2021/02/03/C%E8%AF%AD%E8%A8%80-%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://autovy.github.io/2021/02/03/C%E8%AF%AD%E8%A8%80-%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</id>
    <published>2021-02-03T06:30:00.000Z</published>
    <updated>2021-09-04T01:20:04.235Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904904.png" alt="image-20210210110218935"></p><span id="more"></span><h2 id="时间复杂度（Time-complexity）"><a href="#时间复杂度（Time-complexity）" class="headerlink" title="时间复杂度（Time complexity）"></a>时间复杂度（Time complexity）</h2><h3 id="1-一个例子"><a href="#1-一个例子" class="headerlink" title="1.一个例子"></a>1.一个例子</h3><p>情景：在一个有100个学生的教室里，仅有一名学生没过英语四级，我们要找到这名学生</p><ul><li>方法一：问每一个学生是否有过四级，时间复杂度为<strong>O(n)</strong></li><li>方法二：问每一个学生两个问题：1.是否有过四级 2.其他99个人过四级的情况，时间复杂度为<strong>O(n2)</strong></li><li>方法三：将100人分成两组，然后问没过四级的是在第一组还是在第二组，然后将该小组又分成两部分，再次询问，以此类推，直到最后找到没过四级的那个学生，时间复杂度为<strong>O(log n)</strong></li></ul><p>如果只有一个学生知道笔隐藏在哪个学生上，我可能需要进行O（n2）搜索。如果一个学生拿着笔，只有他们自己知道，我会使用O（n）。如果所有学生都知道，我会使用O（log n）搜索，但是只会告诉我是否猜对了。</p><h3 id="2-时间复杂度的含义"><a href="#2-时间复杂度的含义" class="headerlink" title="2.时间复杂度的含义"></a>2.时间复杂度的含义</h3><p>时间复杂度并不等于程序执行时间，我们没有考虑执行代码中每个语句所需的实际时间，而是考虑每个语句执行多少次</p><h3 id="3-时间复杂度图示"><a href="#3-时间复杂度图示" class="headerlink" title="3.时间复杂度图示"></a>3.时间复杂度图示</h3><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040903611.png" alt="image-20210210104634026"></p><h3 id="4-时间复杂度计算方法"><a href="#4-时间复杂度计算方法" class="headerlink" title="4.时间复杂度计算方法"></a>4.时间复杂度计算方法</h3><ul><li>将算法/功能分解为单独的操作</li><li>计算每个操作的复杂度</li><li>将每个操作的复杂度加起来</li><li>删除常量</li><li>找到最高阶项-这就是我们认为算法/函数的复杂度</li></ul><h2 id="经典算法一览"><a href="#经典算法一览" class="headerlink" title="经典算法一览"></a>经典算法一览</h2><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904904.png" alt="image-20210210110218935"></p><h2 id="辗转相除法（Euclidean-algorithm）"><a href="#辗转相除法（Euclidean-algorithm）" class="headerlink" title="辗转相除法（Euclidean algorithm）"></a>辗转相除法（Euclidean algorithm）</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><ul><li>辗转相除法又称为欧几里得算法，常用于求解最大公约数</li><li>算法原理：若a除以b的余数为r , 则有 gcd(a , b) = gcd( b ,r )</li><li>算法思路：大数除于小数得余数，该余数再与小数重复上面步骤，直到最后得小数为0，这时大数即为最大公约数</li></ul><h3 id="2-基本案例"><a href="#2-基本案例" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用递归函数辗转相除返回最大公约数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> gcd(b%a, a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果展示 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">int</span> b = <span class="number">15</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;GCD(%d, %d)=%d\n&quot;</span>, a, b, gcd(a,b));</span><br><span class="line"></span><br><span class="line">a = <span class="number">35</span>; </span><br><span class="line">b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;GCD(%d, %d)=%d\n&quot;</span>, a, b, gcd(a,b));</span><br><span class="line"></span><br><span class="line">a = <span class="number">31</span>; </span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;GCD(%d, %d)=%d\n&quot;</span>, a, b, gcd(a,b));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法解析：</p><ul><li><code>b%a</code>即b除以a后的余数，当b&lt;a时，返回b，所以在以上程序中，我们不需要比较a，b大小，比如gcd(35,10) ,经过<code>b%a</code>会变成gcd(10,35)</li><li>递归是一种特殊的循环，其停止的信号是<code>return</code>语句</li><li>以上程序的时间复杂度是：O(Log min(a, b))  </li></ul><h3 id="3-扩展案例"><a href="#3-扩展案例" class="headerlink" title="3.扩展案例"></a>3.扩展案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// gcd扩展版，不仅可以得到最大公约数，还可以找到整数系数x和y</span></span><br><span class="line"><span class="comment">// ax + by = gcd(a, b) </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcdExtended</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line">*x = <span class="number">0</span>;</span><br><span class="line">*y = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// x1,y1存储递归调用的结果</span></span><br><span class="line"><span class="keyword">int</span> x1,y1;</span><br><span class="line"><span class="keyword">int</span> gcd = gcdExtended(b%a, a, &amp;x1, &amp;y1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新x,y值 </span></span><br><span class="line">*x = y1 - (b/a) * x1;</span><br><span class="line">*y = x1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> gcd; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示结果</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g = gcdExtended(a, b, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a*%d + b*%d = %d &quot;</span>, x, y, g);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>语法解析：</p><ul><li>以上程序目的是为了计算：  <code>ax + by = gcd(a, b)</code> 中的x，y</li><li>本程序使用了指针，可以在另一个函数中修改主函数的值，避免变量作用域的问题。在主函数内，可以通过<code>&amp;x,&amp;y</code>将x，y的地址传给其他函数，其他函数定义指针<code>int *x, int *y</code>存储地址，然后再用<code>*x,*y</code>读取地址中存的值即可修改主函数中的变量</li><li><code>int gcd = gcdExtended(b%a, a, &amp;x1, &amp;y1);</code>使程序反复执行其上面的语句，直至a==0,这时可以得到gcd,和x1=0，y1=1的初始值。然后再开始与以上执行方向相反执行其下面的语句。最后<code>return gcd</code>实际上在第二部分的循环中，值不变</li><li>主函数执行时，<code>gcdExtended</code>中的地址是主函数<code>x，y</code>的地址，而递归函数中的地址是<code>x1，y1</code>的地址;<code>x1,y1</code>存储的是上一个循环中的<code>*x，*y</code></li></ul><h2 id="埃拉托斯特尼筛法（sieve-of-Eratosthenes）"><a href="#埃拉托斯特尼筛法（sieve-of-Eratosthenes）" class="headerlink" title="埃拉托斯特尼筛法（sieve of Eratosthenes）"></a>埃拉托斯特尼筛法（sieve of Eratosthenes）</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>埃拉托斯特尼筛法是一种常用的素数筛法，可以筛选一定范围自然数内的质数（Prime numbers），时间复杂度：O(<em>n</em> log log <em>n</em>)</p><p>埃拉托斯特尼筛法演示动画（摘自维基百科）</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif" alt="img"></p><h3 id="2-实现步骤"><a href="#2-实现步骤" class="headerlink" title="2.实现步骤"></a>2.实现步骤</h3><p>该筛法的基本步骤案例，筛选2-50范围内的素数</p><p>（1）创建2-50所有数字的列表</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904338.png" alt="image-20210214200912413"></p><p>（2）标记所有<strong>2的倍数</strong>且<strong>大于或等于其平方（即4）</strong>的数字</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904399.png" alt="image-20210214200920690"></p><p>（3）标记所有<strong>3的倍数</strong>且<strong>大于或等于其平方（即9）</strong>的数字</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904633.png" alt="image-20210214202117142"></p><p>（4）标记所有<strong>5的倍数</strong>且<strong>大于或等于其平方（即25）</strong>的数字</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904951.png" alt="image-20210214202159136"></p><p>（5）标记所有<strong>7的倍数</strong>且<strong>大于或等于其平方（即49）</strong>的数字</p><p>​    查无数字，则跳过这一步</p><p>（6）去掉列表中标记的数字，剩下的未被标记数字即为素数：2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47.</p><h3 id="3-基本案例"><a href="#3-基本案例" class="headerlink" title="3.基本案例"></a>3.基本案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 筛选素数函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">SieveOfEratosthenes</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建标识数组</span></span><br><span class="line"><span class="keyword">bool</span> primes[n+<span class="number">1</span>]; </span><br><span class="line"><span class="comment">// 标识数组默认填入true,用索引当作自然数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i&lt;=n; i++) &#123;</span><br><span class="line"></span><br><span class="line">primes[i] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始标记非质数（即标记p的倍数且大于或等于其平方的数字） </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">2</span>; p*p&lt;=n; p++)&#123;</span><br><span class="line"><span class="keyword">if</span>(primes[p] == <span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=p*p; i&lt;=n; i+=p)&#123;</span><br><span class="line">primes[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印出所有素数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">2</span>; p&lt;=n; p++)&#123;</span><br><span class="line"><span class="keyword">if</span>(primes[p])&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入筛选范围:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">SieveOfEratosthenes(n); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="线性查找（Linear-search）"><a href="#线性查找（Linear-search）" class="headerlink" title="线性查找（Linear search）"></a>线性查找（Linear search）</h2><h3 id="1-基本概念-2"><a href="#1-基本概念-2" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>线性查找时间复杂度为：O(n)</p><p>线性查找的步骤如下：</p><ul><li>从arr []的最左边元素开始，然后将x与arr []的每个元素一一比较</li><li>如果x与元素匹配，则返回索引。</li><li>如果x与任何元素都不匹配，则返回-1。</li></ul><p>线性查找示意图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904177.gif" alt="img"></p><h3 id="2-基本案例-1"><a href="#2-基本案例-1" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线性查找函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逐个遍历查找，n为数组长度 ，x为查找对象 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr[i]==x)&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">// 目标数组 </span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找目标</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测量数组大小</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找过程</span></span><br><span class="line"><span class="keyword">int</span> result = search(arr, n, x);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(result==<span class="number">-1</span>)? <span class="built_in">printf</span>(<span class="string">&quot;目标不存在&quot;</span>):<span class="built_in">printf</span>(<span class="string">&quot;目标所在索引为%d&quot;</span>, result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="二分查找（Binary-Search）"><a href="#二分查找（Binary-Search）" class="headerlink" title="二分查找（Binary Search）"></a>二分查找（Binary Search）</h2><h3 id="1-基本概念-3"><a href="#1-基本概念-3" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>二分查找的对象是从小到大的数组，其时间复杂度可以写作：O(Log n)</p><p>二分查找步骤：</p><ul><li>将x与中间元素比较</li><li>如果x与中间元素匹配，则返回中间索引</li><li>否则如果x大于中间元素则取中间元素后右半边数组重复操作</li><li>否则如果x小于中间元素则取中间元素后左半边数组重复操作</li></ul><p>二分查找示意图：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040905289.gif" alt="“Binary Search”"></p><h3 id="2-基本案例-2"><a href="#2-基本案例-2" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="comment">// 递归法二分查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(r &gt;= l)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求中间元素</span></span><br><span class="line"><span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况1：如果目标与中间元素匹配 </span></span><br><span class="line"><span class="keyword">if</span>(arr[mid] == x)&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况2:如果目标小于中间元素</span></span><br><span class="line"><span class="keyword">if</span>(arr[mid] &gt; x)&#123;</span><br><span class="line"><span class="comment">// 返回以中间-1为右的递归 </span></span><br><span class="line"><span class="keyword">return</span> binarySearch(arr, l, mid<span class="number">-1</span>, x);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况3：如果目标大于中间元素</span></span><br><span class="line"><span class="comment">// 返回以中间+1为左的递归 </span></span><br><span class="line"><span class="keyword">return</span> binarySearch(arr, mid + <span class="number">1</span>, r, x);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查无结果</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">// 目标数组 </span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">40</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找目标</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测量数组大小</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找过程,定左右 </span></span><br><span class="line"><span class="keyword">int</span> result =  binarySearch(arr, <span class="number">0</span>, n - <span class="number">1</span>, x);</span><br><span class="line"></span><br><span class="line">(result==<span class="number">-1</span>) ? <span class="built_in">printf</span>(<span class="string">&quot;目标不存在&quot;</span>) : <span class="built_in">printf</span>(<span class="string">&quot;目标所在索引为%d&quot;</span>, result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="哈希表（Hash-table）"><a href="#哈希表（Hash-table）" class="headerlink" title="哈希表（Hash table）"></a>哈希表（Hash table）</h2><h3 id="1-基本概念-4"><a href="#1-基本概念-4" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>哈希表是一种<strong>数据结构</strong>，其以键值对的形式表示数据。每一个键都映射哈希表中的一个值（与关联数组类似）</p><p>在哈希表中，对键进行处理以生成映射到所需元素的新索引。此过程称为hashing。</p><p>哈希表是存储和检索元素的有效方法，所以其也是一种有效的<strong>查找算法</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040905182.png" alt="“hashing”示意图"></p><h3 id="2-实现步骤-1"><a href="#2-实现步骤-1" class="headerlink" title="2.实现步骤"></a>2.实现步骤</h3><p>（1）哈希表初始化</p><p>​    在将元素插入数组前，将数组默认值设为-1（-1表示元素不存    在或特定的索引可以插入）</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040905313.png" alt="image-20210215110519122"></p><p>（2）插入元素</p><p>​    哈希表插入元素的经典算法是：<code>key =  element % size</code> （key即数据插入位置，element即元素，size即数组大小）</p><p>​    如插入数字24</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040905850.png" alt="image-20210215111157606"></p><p>（3）搜索元素</p><p>搜索元素和插入元素使用同一算法获得索引（key），再按索引查找对应元素</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906618.png" alt="image-20210215111443960"></p><p>（4）删除元素</p><p>在哈希表中删除元素并不是指将数组中的元素移除，而是将元素的值初始化为-1</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906635.png" alt="image-20210215111738024"></p><h3 id="3-基本案例-1"><a href="#3-基本案例-1" class="headerlink" title="3.基本案例"></a>3.基本案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> size 7 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建数组作为基本结构</span></span><br><span class="line"><span class="keyword">int</span> arr[size]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表初始化，将所有元素赋值为-1 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">arr[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key = value % size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr[key] == <span class="number">-1</span>)&#123;</span><br><span class="line">arr[key] = value;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d 插入到 arr[%d]\n&quot;</span>, value, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该位置存在冲突&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key = value % size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr[key] == value)&#123;</span><br><span class="line">arr[key] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该值不存在&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span> <span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key = value % size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arr[key] == value)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查有此项&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查无此项&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印出所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[%d] = %d\n&quot;</span>, i, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 初始化哈希表 </span></span><br><span class="line">init();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充哈希表  </span></span><br><span class="line">insert(<span class="number">10</span>);</span><br><span class="line">insert(<span class="number">4</span>);</span><br><span class="line">insert(<span class="number">2</span>);</span><br><span class="line">insert(<span class="number">5</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印哈希表</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">print(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除测试</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">del(<span class="number">5</span>); </span><br><span class="line">print();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询测试</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">search(<span class="number">4</span>); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="4-哈希冲突（collision）"><a href="#4-哈希冲突（collision）" class="headerlink" title="4.哈希冲突（collision）"></a>4.哈希冲突（collision）</h3><p>如果存在插入元素算法得到得索引相同，会出现哈希冲突的情况</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906057.png" alt="image-20210215151206845"></p><p>以下介绍几种避免哈希冲突的方法</p><h3 id="5-线性探测-Linear-Probing"><a href="#5-线性探测-Linear-Probing" class="headerlink" title="5.线性探测(Linear Probing)"></a>5.线性探测(Linear Probing)</h3><p>（1）方法简介：通过<code>key = element % size</code>计算索引，如果该索引为空则直接填入，如果产生了冲突就检查下一个索引即<code>key = (key+1) % size</code>，重复执行该过程直到找到空间</p><p>（2）方法示意图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906001.png" alt="image-20210215153740661"></p><p>空间不足的情况：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906542.png" alt="image-20210215154203024"></p><h3 id="6-单独链表法（separate-chaining）"><a href="#6-单独链表法（separate-chaining）" class="headerlink" title="6.单独链表法（separate chaining）"></a>6.单独链表法（separate chaining）</h3><p>（1）方法简介</p><p>单独链表法又被称为开放式哈希表（Open hashing），它采用数据结构中的链表（linked list）来解决哈希冲突的问题，这样的哈希表永远也不会被填满</p><p>这种方法使哈希表的每个单元指向具有相同索引值的链表</p><p>（2）方法示意图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906224.png" alt="image-20210215160449318"></p><p>（3）使用案例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> size 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链表节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="comment">// 存储该节点内容 </span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  存储下一个节点的地址 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建单独链表（每一个哈希表的索引一条链表）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">chain</span>[<span class="title">size</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表初始化，每一列填入NULL </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">chain[i] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表中插入元素 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="comment">// 创造新节点存储数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">newNode</span> =</span> (struct node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">newNode-&gt;data = value;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算索引（hash key）</span></span><br><span class="line"><span class="keyword">int</span> key = value % size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查单独链表是否为空</span></span><br><span class="line"><span class="comment">// 为空则填入新节点 </span></span><br><span class="line"><span class="keyword">if</span>(chain[key] == <span class="literal">NULL</span>)&#123;</span><br><span class="line">chain[key] = newNode;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 不为空即产生了哈希冲突 </span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 需要在已有的末端节点后添加新节点</span></span><br><span class="line"><span class="comment">// 获得指定索引的链表 </span></span><br><span class="line">struct node *temp = chain[key];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历链表得到末端节点 </span></span><br><span class="line"><span class="keyword">while</span>(temp-&gt;next)&#123;</span><br><span class="line">temp = temp-&gt;next; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 在末尾连接上新节点 </span></span><br><span class="line">temp-&gt;next = newNode; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表中搜索元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key = value % size;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> chain[key];</span><br><span class="line"><span class="comment">// 遍历链表寻找元素 </span></span><br><span class="line"><span class="keyword">while</span>(temp)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;data == value)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希表中删除元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> key = value % size;</span><br><span class="line"><span class="comment">// 存储头部节点 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> chain[key],*dealloc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(temp != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="comment">// 如果需要删除的元素在头部 </span></span><br><span class="line"><span class="keyword">if</span>(temp-&gt;data == value)&#123;</span><br><span class="line">dealloc = temp;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(dealloc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 遍历链表寻找需要删除的元素 </span></span><br><span class="line"><span class="keyword">while</span>(temp-&gt;next)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;next-&gt;data == value)&#123;</span><br><span class="line">dealloc = temp-&gt;next;</span><br><span class="line">temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(dealloc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印哈希表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">temp</span> =</span> chain[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;chain[%d]--&gt;&quot;</span>,i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印链表</span></span><br><span class="line"><span class="keyword">while</span>(temp)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d--&gt;&quot;</span>, temp-&gt;data);</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="comment">// 初始化哈希表</span></span><br><span class="line">init();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 填充数据</span></span><br><span class="line">    insert(<span class="number">7</span>);</span><br><span class="line">    insert(<span class="number">0</span>);</span><br><span class="line">    insert(<span class="number">3</span>);</span><br><span class="line">    insert(<span class="number">10</span>);</span><br><span class="line">    insert(<span class="number">4</span>);</span><br><span class="line">    insert(<span class="number">5</span>);  </span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> print(); </span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">// 删除测试</span></span><br><span class="line"><span class="keyword">if</span>(del(<span class="number">10</span>))&#123;</span><br><span class="line">print(); </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除项不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><h3 id="1-基本概念-5"><a href="#1-基本概念-5" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>（1）冒泡排序通过重复交换错误顺序的两个数来工作</p><p>（2）冒泡排序步骤：</p><ul><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ul><p>（3）冒泡排序示意图:</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906428.gif" alt="“Bubble Sort gif”的图片搜索结果"></p><h3 id="2-基本案例-3"><a href="#2-基本案例-3" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换数字函数(此处的参数为地址，可以直接修改主函数中的值)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *xp, <span class="keyword">int</span> *yp)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = *xp;</span><br><span class="line">*xp = *yp;</span><br><span class="line">*yp = temp;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒泡函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="comment">// 从头开始的次数 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123; </span><br><span class="line">    <span class="comment">// 移动读取数组相邻两个数 </span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n-i<span class="number">-1</span>; j++)&#123;</span><br><span class="line"><span class="comment">// 符合条件，交换数值 </span></span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">swap(&amp;arr[j], &amp;arr[j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印数组函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAarry</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行实例</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">64</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">90</span>&#125;; </span><br><span class="line"><span class="comment">// 计算数组大小 </span></span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// 冒泡处理 </span></span><br><span class="line">bubbleSort(arr, n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;排序后的数组：\n&quot;</span>);</span><br><span class="line">printAarry(arr, n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="快速排序（Quick-sort）"><a href="#快速排序（Quick-sort）" class="headerlink" title="快速排序（Quick sort）"></a>快速排序（Quick sort）</h2><p>参考文章：<a href="https://juejin.cn/post/6844904122538278920">https://juejin.cn/post/6844904122538278920</a></p><h3 id="1-基本概念-6"><a href="#1-基本概念-6" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>（1）快速排序是一种分而治之的算法，它会一个元素为枢纽键对数组进行分区，枢纽有以下几种选择，本文以最简单的最后一个元素为枢纽为例</p><ul><li>始终选择第一个元素作为枢轴</li><li>始终选择最后一个元素作为枢轴</li><li>选择一个随机元素作为枢轴。</li><li>选择中位数作为枢轴</li></ul><p>（2）实现步骤</p><ul><li>在给定数组中确定一个元素x作为枢纽</li><li>将x放在排序数组中的正确位置</li><li>将小于x的元素放在x之前</li><li>将大于x的元素放在x之后</li><li>去掉枢纽分成两组后重复以上操作</li></ul><p>以末尾元素为枢纽排序示意图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040906440.png" alt="image-20210226194704522"></p><p>​    （3）将小于x的元素放在x之前，将大于x的元素放在x之后这一步是将一个数组分成两个数组，其运用到了分而治之的思想</p><ul><li><p>将一个数组分成两个数组的方法为：<br>先从数组右边找到一个比枢轴元素小的元素，将数组的第一个位置赋值为该元素；</p></li><li><p>再从数组的左边找到一个比枢轴元素大的元素，将从上面取元素的位置赋值为该值；</p></li><li><p>依次进行，直到左右相遇，把枢轴元素赋值到相遇位置。</p><p>示意图如下：</p></li></ul><p><img src="https://user-gold-cdn.xitu.io/2020/4/13/17171276e5f8bb49?imageslim" alt="第一轮排序动态过程"></p><h3 id="2-基本案例-4"><a href="#2-基本案例-4" class="headerlink" title="2.基本案例"></a>2.基本案例</h3><p>基本案例中也运用了分而治之的方法，当操作步骤与上面步骤相异但是效果相同</p><ul><li>选择最后一个元素作为枢纽</li><li>从数组左端开始遍历一个数组，先设最左端元素为待交换元素。当遇到比枢纽值小的元素，就将其与待交换元素值相交换，并把下个元素设为待交换元素</li><li>完成遍历后，最后交换末尾元素与待交换元素，并返回待交换元素的索引</li><li>依据返回的索引将数组分成了两组：左边比枢纽元素小，右边比枢纽元素大</li><li>最后再递归分开处理左边数组和右边数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[], <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>*, <span class="keyword">int</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组大小\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arr[n];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;填入数组数据\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line"></span><br><span class="line">    quickSort(arr,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;快速排序后的数组\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &lt; end)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pIndex = partition(arr, start, end);</span><br><span class="line">        quickSort(arr, start, pIndex<span class="number">-1</span>);</span><br><span class="line">        quickSort(arr, pIndex+<span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pIndex = start;</span><br><span class="line">    <span class="keyword">int</span> pivot = arr[end];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = start; i &lt; end; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; pivot)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(&amp;arr[i], &amp;arr[pIndex]);</span><br><span class="line">            pIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(&amp;arr[end], &amp;arr[pIndex]);</span><br><span class="line">    <span class="keyword">return</span> pIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040904904.png&quot; alt=&quot;image-20210210110218935&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="C语言" scheme="https://autovy.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="https://autovy.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="算法" scheme="https://autovy.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java|面向对象学习</title>
    <link href="https://autovy.github.io/2021/01/31/Java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://autovy.github.io/2021/01/31/Java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-01-31T06:30:00.000Z</published>
    <updated>2021-09-04T01:39:24.435Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040939004.png" alt="image-20210904093908758"></p><span id="more"></span><h4 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h4><h5 id="1-class和instance"><a href="#1-class和instance" class="headerlink" title="1.class和instance"></a>1.class和instance</h5><p>class即类，instance即实例。</p><p>class是一种对象模版，它定义了如何创建实例，因此，class本身就是一种数据类型；</p><p>而instance是对象实例，instance是根据class创建的实例，可以创建多个instance，每个instance类型相同，但各自属性可能不相同。</p><h5 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个city类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建类的字段即属性</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> lattitude;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> longitude;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">oop1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建实例frist</span></span><br><span class="line">        City frist = <span class="keyword">new</span> City();</span><br><span class="line">        <span class="comment">// 对实例的属性赋值</span></span><br><span class="line">        frist.name = <span class="string">&quot;shanghai&quot;</span>;</span><br><span class="line">        frist.lattitude = <span class="number">11</span>;</span><br><span class="line">        frist.longitude = <span class="number">111</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问实例属性并打印</span></span><br><span class="line">        System.out.println(frist.name);</span><br><span class="line">        System.out.println(frist.lattitude);</span><br><span class="line">        System.out.println(frist.longitude);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-实例讲解"><a href="#3-实例讲解" class="headerlink" title="3. 实例讲解"></a>3. 实例讲解</h5><ul><li>City类中包含了3个字段（field，有些语言叫做属性），通过class我们实现了数据的封装</li><li>public可以用来修饰方法和字段，表示其可以被外部访问</li><li>创建实例用new，用Class名作为实例的数据类型</li><li>访问实例属性时可以用<code>变量.字段</code>的形式，但是如果用private修饰了该属性则会报错</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="1-方法的引入"><a href="#1-方法的引入" class="headerlink" title="1.方法的引入"></a>1.方法的引入</h5><p>上一级中，我们直接把属性用<code>public</code>修饰，把属性暴露给外部可能会破坏封装性。所以我们往往采用<code>private</code>修饰属性，然后通过<strong>方法</strong>来读取属性赋值</p><h5 id="2-参数绑定"><a href="#2-参数绑定" class="headerlink" title="2.参数绑定"></a>2.参数绑定</h5><p>基本类型参数的传递，是调用方值的复制。双方各自的后续修改，互不影响</p><h5 id="3-实例"><a href="#3-实例" class="headerlink" title="3.实例"></a>3.实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">opp2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person Jhon = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">// 调用实例的方法</span></span><br><span class="line">        Jhon.setBirth(<span class="number">2000</span>);</span><br><span class="line">        System.out.println(Jhon.getage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义私有属性，外部不可调用</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> birth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this永远指向当前实例，从而达到赋值的目的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(<span class="keyword">int</span> birth)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 调用类内部私有的方法</span></span><br><span class="line">        <span class="keyword">return</span> calcAge(<span class="number">2020</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法，仅允许类内部调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calcAge</span><span class="params">(<span class="keyword">int</span> currentYear)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentYear - <span class="keyword">this</span>.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-实例讲解"><a href="#4-实例讲解" class="headerlink" title="4.实例讲解"></a>4.实例讲解</h5><ul><li><code>public int getage()</code>该语句中，<code>public</code>用于修饰方法是否供外部调用，<code>int</code>则是该方法的返回数据类型</li><li>通过<code>this.field</code>就可以访问当前实例的字段，如果命名没有冲突实际上可以省略<code>this</code></li><li><code>this.birth = birth</code>前一个<code>birth</code>指向实例的一个属性，后一个<code>birth</code>则是外部传入的参数，因为命名重复，所以要用this修饰</li></ul><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h5 id="1-构造方法应用"><a href="#1-构造方法应用" class="headerlink" title="1.构造方法应用"></a>1.构造方法应用</h5><p>创建对象实例时，我们可以使用构造方法让内部字段初始化，其相当于类内部一个和类同名的特殊的方法。</p><h5 id="2-默认构造方法"><a href="#2-默认构造方法" class="headerlink" title="2.默认构造方法"></a>2.默认构造方法</h5><p>如果一个类没有定义构造方法，编译器会为我们生成一个默认的构造方法，因而我们可以在<code>new Person()</code>调用</p><p>如果我们自定义了一个构造方法，那么默认的构造方法将不会被创建</p><h5 id="3-实例-1"><a href="#3-实例-1" class="headerlink" title="3.实例"></a>3.实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">opp3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用构造方法</span></span><br><span class="line">        Person2 ming = <span class="keyword">new</span> Person2(<span class="string">&quot;小明&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        System.out.println(ming.getAge());</span><br><span class="line">        System.out.println(ming.getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person2</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><h5 id="1-方法重载介绍"><a href="#1-方法重载介绍" class="headerlink" title="1.方法重载介绍"></a>1.方法重载介绍</h5><p>在一个类中，如果存在一系列的方法功能方法名一样，但是参数不同。这种方法名相同，但各自的参数不同，称为方法重载（Overload）</p><p>方法重载参数不同，但是返回值类型通常相同</p><h5 id="2-实例-1"><a href="#2-实例-1" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">opp4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person4 ming = <span class="keyword">new</span> Person4();</span><br><span class="line">        ming.setName(<span class="string">&quot;xiao&quot;</span>, <span class="string">&quot;ming&quot;</span>);</span><br><span class="line">        System.out.println(ming.getname());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person4</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getname</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setname</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String fname, String lname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = fname + lname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="1-继承的应用"><a href="#1-继承的应用" class="headerlink" title="1.继承的应用"></a>1.继承的应用</h5><p>通过继承子类可以获得父类的所有功能，还可以在父类基础上编写额外的功能。</p><p>类自动获得了父类的所有字段，严禁定义与父类重名的字段</p><p>父类又可以称为超类，基类</p><p>子类又可以称为扩展类</p><h5 id="2-继承树"><a href="#2-继承树" class="headerlink" title="2.继承树"></a>2.继承树</h5><p>除了object外，任何类都会继承于某个类，一个子类只能有一个父类，一个父类允许存在多个子类</p><h5 id="3-protected与private"><a href="#3-protected与private" class="headerlink" title="3.protected与private"></a>3.protected与private</h5><p>如果父类中的属性或方法是<code>private</code>修饰，子类同样也是无法访问到的，这时我们可以使用protected修饰，可以把属性和方法的权限控制在继承树内部</p><h5 id="4-子类的构造方法"><a href="#4-子类的构造方法" class="headerlink" title="4.子类的构造方法"></a>4.子类的构造方法</h5><p>子类是无法继承父类的任何构造方法的，编译器会自动为我们添加<code>super()</code>来调用父类的构造方法，故若是父类存在带参数的构造方法，要手动在子类中调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="number">12</span>, <span class="number">89</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的构造方法Person(String, int)</span></span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="7-向上转型与向下转型"><a href="#7-向上转型与向下转型" class="headerlink" title="7.向上转型与向下转型"></a>7.向上转型与向下转型</h5><p>（1）向上转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果一个引用变量的类型是Student，那么它可以指向一个Student类型的实例</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">// 一个引用类型为Person的变量同样可以指向Student类型的实例</span></span><br><span class="line">Person p = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure><p>这种把一个子类类型安全地变为父类类型的赋值，被称为向上转型（upcasting）</p><p>注意到继承树是<code>Student &gt; Person &gt; Object</code>，所以，可以把<code>Student</code>类型转型为<code>Person</code>，或者更高层次的<code>Object</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student s &#x3D; new Student();</span><br><span class="line">Person p &#x3D; s; </span><br><span class="line">Object o1 &#x3D; p;</span><br><span class="line">Object o2 &#x3D; s;</span><br></pre></td></tr></table></figure><p>（2）向下转型</p><p>如果把一个父类类型强制转型为子类类型，就是向下转型（downcasting）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Student();</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 向下转型成功，因为p1虽然变量类型是Person，实际内容是子类，故能转型成功</span></span><br><span class="line">Student s1 = (Student) p1; </span><br><span class="line"><span class="comment">// 向下转型失败，实际内容是父类，不能由父类转向子类</span></span><br><span class="line">Student s2 = (Student) p2; </span><br></pre></td></tr></table></figure><h5 id="6-实例"><a href="#6-实例" class="headerlink" title="6.实例"></a>6.实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">&quot;小明&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;小红&quot;</span>, <span class="number">20</span>, <span class="number">99</span>);</span><br><span class="line">        <span class="comment">// 定义PrimaryStudent，从Student继承，新增grade字段:</span></span><br><span class="line">        Student ps = <span class="keyword">new</span> PrimaryStudent(<span class="string">&quot;小军&quot;</span>, <span class="number">9</span>, <span class="number">100</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(ps.getScore());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> score; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimaryStudent</span> <span class="keyword">extends</span> <span class="title">Student</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> grade;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">PrimaryStudent</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score, <span class="keyword">int</span> grade)</span></span>&#123;</span><br><span class="line">       <span class="comment">// 调用Student的构造函数 </span></span><br><span class="line">       <span class="keyword">super</span>(name, age, score);</span><br><span class="line">       <span class="keyword">this</span>.grade = grade;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><h5 id="1-覆写"><a href="#1-覆写" class="headerlink" title="1.覆写"></a>1.覆写</h5><p>子类中不能存在与父类重名的属性，但子类可以覆写父类的方法，覆写方法时方法名和返回类型要相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 加上@Override 可以让编译器帮助检查是否正确覆写</span></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String s)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-多态"><a href="#2-多态" class="headerlink" title="2.多态"></a>2.多态</h5><p>Java的实例方法调用是基于运行时的实际类型的动态调用（<code>new Student()</code>），而非变量的声明类型（<code>Person</code>）</p><p>多态是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法</p><p>多态具有一个强大的功能——允许添加更多类型的子类实现功能扩展，却不需要修改基于父类的代码</p><h5 id="3-实例-2"><a href="#3-实例-2" class="headerlink" title="3.实例"></a>3.实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数组存储两部分的税收</span></span><br><span class="line">        Income[] incomes = <span class="keyword">new</span> Income[] &#123;</span><br><span class="line">            <span class="keyword">new</span> Income(<span class="number">3000</span>),</span><br><span class="line">            <span class="keyword">new</span> Salary(<span class="number">7500</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(totalTax(incomes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">totalTax</span><span class="params">(Income... incomes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 此处的循环中income的实际指向可以动态改变（Income/Salary）</span></span><br><span class="line">        <span class="comment">// getTax由于子类的多态实际上调用的方法不同</span></span><br><span class="line">        <span class="keyword">for</span> (Income income: incomes) &#123;</span><br><span class="line">            total = total + income.getTax();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> income;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Income</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.income = income;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> income * <span class="number">0.1</span>; <span class="comment">// 税率10%</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Salary</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(income);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写父类的得税方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (income &lt;= <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (income - <span class="number">5000</span>) * <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-多态补充"><a href="#4-多态补充" class="headerlink" title="4.多态补充"></a>4.多态补充</h5><p>（1）调用父类中被覆写的方法用<code>super</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student extends Person &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的hello()方法:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hello() + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）final修饰可以防止方法被子类覆写如：<code>public final String hello()</code></p><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><h5 id="1-面向抽象编程"><a href="#1-面向抽象编程" class="headerlink" title="1.面向抽象编程"></a>1.面向抽象编程</h5><p>抽象类和其中的抽象方法本身是无法执行的，其强制了子类必须实现其定义的抽象方法，即相当于定义了一个规范</p><p>这种引用高层类型，避免引用子类型的方式，称为面向抽象编程</p><p>有以下优点：</p><ul><li>上层代码只定义规范（例如：<code>abstract class Person</code>）；</li><li>不需要子类就可以实现业务逻辑（正常编译）；</li><li>具体的业务逻辑由不同的子类实现，调用者并不关心</li></ul><h5 id="2-实例-2"><a href="#2-实例-2" class="headerlink" title="2.实例"></a>2.实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        p.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student.run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><h5 id="1-接口介绍"><a href="#1-接口介绍" class="headerlink" title="1.接口介绍"></a>1.接口介绍</h5><p>接口（interface）中没有字段，接口中定义的所有方法默认为<code>public abstract</code></p><h5 id="2-接口实现"><a href="#2-接口实现" class="headerlink" title="2.接口实现"></a>2.接口实现</h5><p>当用一个具体的class实现一个interface时，需要用到implements关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类实现接口，一个类只能继承一个类，但是可以实现多个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">&quot; run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-接口继承"><a href="#3-接口继承" class="headerlink" title="3.接口继承"></a>3.接口继承</h5><p>接口也可以通过继承扩展</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h4><h5 id="1-静态字段"><a href="#1-静态字段" class="headerlink" title="1.静态字段"></a>1.静态字段</h5><p>class中定义的字段我们称为实例字段，其一般有着独立性，各个实例间互不影响</p><p>但是如果我们用<code>static</code>一个静态修饰一个字段，那么所有的实例都会共享这个字段的空间</p><p>对于静态字段，我们无论修改哪个实例，所有实例的静态字段都会改动</p><p>我们往往采用<code>类名.静态字段</code>访问静态对象，如:<code>Person.number = 99;</code></p><h5 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2.静态方法"></a>2.静态方法</h5><p>静态方法可以通过类名直接调用，不需要一个实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person.setNumber(<span class="number">99</span>);</span><br><span class="line">        System.out.println(Person.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个静态方法，因为静态方法不存在实例，所以无法访问this变量（不能用this）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        number = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-接口的静态字段"><a href="#3-接口的静态字段" class="headerlink" title="3.接口的静态字段"></a>3.接口的静态字段</h5><p>因为接口是一个纯抽象类，所以它不能定义实例字段，但是可以有静态字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 编译器会自动加上public statc final:</span></span><br><span class="line">    <span class="keyword">int</span> MALE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> FEMALE = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><p>位于同一个包的类，可以访问包作用域的字段和方法。不用<code>public</code>、<code>protected</code>、<code>private</code>修饰的字段和方法就是包作用域</p><p>可以用import语句导入其他包的class</p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>可参考：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260466215676512">https://www.liaoxuefeng.com/wiki/1252599548343744/1260466215676512</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040939004.png&quot; alt=&quot;image-20210904093908758&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://autovy.github.io/categories/Java/"/>
    
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Java" scheme="https://autovy.github.io/tags/Java/"/>
    
      <category term="面向对象" scheme="https://autovy.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>C语言|最简管理系统</title>
    <link href="https://autovy.github.io/2020/06/15/C%E8%AF%AD%E8%A8%80-%E6%9C%80%E7%AE%80%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://autovy.github.io/2020/06/15/C%E8%AF%AD%E8%A8%80-%E6%9C%80%E7%AE%80%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-06-15T06:30:00.000Z</published>
    <updated>2021-09-04T01:19:18.773Z</updated>
    
    <content type="html"><![CDATA[<p>C语言结课作业：编写一个小型工资管理系统，用来管理职工的个人基本信息及工资薪酬等数据。在技术要求方面仅仅是要求了使用结构体数据类型，但基于我们的学习进度，考察的应该是用数组来储存。</p><span id="more"></span><h3 id="作业要求"><a href="#作业要求" class="headerlink" title="作业要求"></a>作业要求</h3><ol><li><p>每个职工的数据应包括：<strong>工号、姓名、性别、部门、基本工资、绩效工资、奖金、应发工资</strong>（应发工资=基本工资+绩效工资+奖金）。职工数据要求采用结构体数据类型。</p></li><li><p><strong>菜单显示：</strong>显示系统的一级功能菜单（数据输入、数据修改、数据处理、数据输出、退出）。</p></li><li><p><strong>数据输入</strong>：至少输入10个职工的各项数据（应发工资由系统自动计算，不需要输入）。<strong>录入的第一条记录用自已的真实姓名，部门为自己的真实班级。</strong>并将有自己真实姓名、班级的输出结果截屏保存到大作业总结报告中。</p></li><li><p><strong>数据修改</strong>：输入工号,修改指定工号的各项数据。输出修改完成后的全部职工数据。</p></li><li><p><strong>数据处理</strong>：处理方式包括：排序、查询。可提供子菜单让用户选择。其中：</p><p>1)<strong>排序</strong>：按工号排序，显示所有职工的全部数据。</p><p>2)<strong>查询</strong>：按工号查询，显示指定工号的全部数据。</p></li><li><p><strong>数据输出</strong>：输出全部职工的各项数据。</p></li><li><p><strong>退出</strong>：退出整个工资管理系统。</p></li></ol><h3 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h3><h5 id="1-数据存储"><a href="#1-数据存储" class="headerlink" title="1.数据存储"></a>1.数据存储</h5><p>我使用的是结构体数组来自建一个数据库，放在全局环境下，将数据库设为一个全局变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自建数据库</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">staff</span> &#123;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>  id;</span><br><span class="line"> <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"> <span class="keyword">char</span> sex[<span class="number">20</span>];</span><br><span class="line"> <span class="keyword">char</span> belong[<span class="number">20</span>];</span><br><span class="line"> <span class="keyword">int</span>  basic_pay;</span><br><span class="line"><span class="keyword">int</span>  add_pay;</span><br><span class="line"><span class="keyword">int</span>  reward_pay;</span><br><span class="line"><span class="keyword">int</span>  all_pay;</span><br><span class="line"></span><br><span class="line"> &#125;data[<span class="number">999</span>] = &#123;</span><br><span class="line"> </span><br><span class="line">&#123;<span class="number">44</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;技术部&quot;</span>, <span class="number">5000</span>, <span class="number">1000</span>, <span class="number">200</span>, <span class="number">6200</span> &#125;,</span><br><span class="line"></span><br><span class="line">&#123;<span class="number">14</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;运维部&quot;</span>, <span class="number">4000</span>, <span class="number">1000</span>, <span class="number">200</span>, <span class="number">5200</span> &#125;,</span><br><span class="line"></span><br><span class="line">&#123;<span class="number">56</span>, <span class="string">&quot;小红&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="string">&quot;网安部&quot;</span>, <span class="number">3000</span>, <span class="number">1000</span>, <span class="number">200</span>, <span class="number">4200</span> &#125;,</span><br><span class="line"> </span><br><span class="line"> &#125;; </span><br></pre></td></tr></table></figure><p>另外还需要定义一个全局的数据库长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int lenth &#x3D; 3;</span><br></pre></td></tr></table></figure><p>之所以直接定义为一个常量，而不是用sizeof这种方式来计算数组长度，因为我发现结构体数组用这种方式来计算数组长度会是一个大坑！所以还不如手动添加常量</p><h5 id="2-函数功能结构"><a href="#2-函数功能结构" class="headerlink" title="2.函数功能结构"></a>2.函数功能结构</h5><p>（1）函数声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;函数声明</span><br><span class="line">int create();    &#x2F;&#x2F;增</span><br><span class="line">int del();  &#x2F;&#x2F;删</span><br><span class="line">int edit();    &#x2F;&#x2F;改</span><br><span class="line"></span><br><span class="line">int process();     &#x2F;&#x2F;处理 </span><br><span class="line">int req();     &#x2F;&#x2F;查</span><br><span class="line">int line();     &#x2F;&#x2F;排 </span><br><span class="line"></span><br><span class="line">int showall(); &#x2F;&#x2F;查询全部</span><br></pre></td></tr></table></figure><p>（2）函数定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//菜单系统 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;****************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;主菜单：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.输入员工信息\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.删除员工信息\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3.修改员工信息\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4.处理员工信息\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;5.显示所有员工信息\n&quot;</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;6.退出\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;****************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---请输入菜单项：---\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;order); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(order==<span class="number">6</span>)&#123;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(order)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: create();<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: del();<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: edit();<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: process();<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: showall(); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:    <span class="built_in">printf</span>(<span class="string">&quot;\n404 NOT FOUND!&quot;</span>); getchar(); getchar(); system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//增添信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除信息 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">edit</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//员工信息排序输出 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">line</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询员工信息 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">req</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询全部数据 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">showall</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>函数结构如下</p><p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20200615101249209.png" alt="image-20200615101249209"> </p><p>这些函数都会对全局中的数据库进行操作。</p><h3 id="菜单系统"><a href="#菜单系统" class="headerlink" title="菜单系统"></a>菜单系统</h3><p>main函数这里，就构建整体的函数调用框架，即本管理系统的菜单系统</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//菜单系统 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">int</span> order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;****************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;主菜单：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.输入员工信息\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.删除员工信息\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3.修改员工信息\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4.处理员工信息\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;5.显示所有员工信息\n&quot;</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;6.退出\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;****************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---请输入菜单项：---\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;order); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(order==<span class="number">6</span>)&#123;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(order)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: create();<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: del();<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: edit();<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: process();<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: showall(); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:    <span class="built_in">printf</span>(<span class="string">&quot;\n404 NOT FOUND!&quot;</span>); getchar(); getchar(); system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单系统常用switch语句来调用各个函数，另外为了整个管理系统的输出整洁一点，我还用了</p><p>“stdlib.h”库中的清屏函数system(“cls”)</p><h3 id="增添员工信息"><a href="#增添员工信息" class="headerlink" title="增添员工信息"></a>增添员工信息</h3><p> 增添员工信息的基本设计思路：将新的信息填入到下一个数组空的位置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">i = lenth;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新增员工工号：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i].id); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新增员工姓名：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[i].name); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新增员工性别：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[i].sex); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新增员工所属部门：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[i].belong);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新增员工基本工资：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i].basic_pay); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新增员工绩效工资：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i].add_pay); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;新增员工奖金：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[i].reward_pay); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">data[i].all_pay = data[i].basic_pay + data[i].add_pay + data[i].reward_pay;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;创建成功！\n&quot;</span>);</span><br><span class="line">lenth++;</span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p> 用在全局定义的lenth（突然发现自己记错了长度的英语单词2333）来确定新数据的填写地址，创建成功后要注意用<code>lenth++</code>，拓展数据的长度。</p><h3 id="删除员工信息"><a href="#删除员工信息" class="headerlink" title="删除员工信息"></a>删除员工信息</h3><p>删除员工信息的基本设计思路是：通过遍历所有的数据查询到指定的员工工号，然后将后面的数据依次向上填补被“删除”的空白</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除信息 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = lenth;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n请输入删除员工工号：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i+<span class="number">1</span>; j++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num==data[j].id)&#123;</span><br><span class="line"><span class="keyword">for</span>( ;j&lt;=i-j; j++)&#123;</span><br><span class="line"></span><br><span class="line">data[j] = data[j+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lenth--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n删除成功!\n&quot;</span>); </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(j==i+<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n查无此人!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在遍历中用到了两个if语句，if(num==data[j].id)来寻找符合条件的员工号，而<code>if(j==i+1)</code>则是遍历所有的数据后未找到匹配条件。</p><p>说是删除实践上只是删除的数组元素的地位（下标）和财产（数据）被下一个数组元素给继承了，而下一个的数据元素的下标和数据又被下下个数据元素继承，以此类推。这里同样要注意用<code>lenth--</code>缩短数据长度。</p><h3 id="修改员工信息"><a href="#修改员工信息" class="headerlink" title="修改员工信息"></a>修改员工信息</h3><p>修改员工信息的思路和删除员工信息的思路相差无几：都需要查询定位对应的员工信息，不同的是定位后，这个还要修改员工的信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">edit</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = lenth;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n请输入需要修改的员工工号：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i+<span class="number">1</span>; j++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num==data[j].id)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改姓名：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[j].name); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改性别：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[j].sex); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改所属部门：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;data[j].belong);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改基本工资：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[j].basic_pay); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改绩效工资：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[j].add_pay); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改奖金：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data[j].reward_pay); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">data[j].all_pay = data[j].basic_pay + data[j].add_pay + data[j].reward_pay;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改成功！\n&quot;</span>);</span><br><span class="line">showall(); </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(j==i+<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n查无此人!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所谓修改，无非是重新赋值罢了。</p><h3 id="处理信息"><a href="#处理信息" class="headerlink" title="处理信息"></a>处理信息</h3><p>处理信息分成了排序信息和查询信息两部分，所有采用菜单系统同样的方式来设计</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> order;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.员工信息排序     2.员工信息查询\n&quot;</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请选择处理方式:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;order); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(order)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: line(); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: req();  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="1-信息排序"><a href="#1-信息排序" class="headerlink" title="1.信息排序"></a>1.信息排序</h5><p>说实话这个函数的设计是该项目唯一卡到我的地方，因为我一直把它理解成了“排序处理”，但我了解实际上的需求应该是“排序输出”，那问题就简单很多了，我的设计思路如下</p><p>将每个数组元素的地址看作是它们的住址，而员工工号信息就是它们的门牌号，把它们的门牌号记录下来，然后排列大小顺序，按顺序去拜访它们，期间它们的住处时是没有发生改变的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//员工信息排序输出 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">line</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> id_data[<span class="number">100</span>];</span><br><span class="line">i = lenth;</span><br><span class="line"><span class="keyword">char</span>* str[<span class="number">8</span>] = &#123;<span class="string">&quot;工号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;部门&quot;</span>, <span class="string">&quot;基本工资&quot;</span>, <span class="string">&quot;绩效工资&quot;</span>, <span class="string">&quot;奖金&quot;</span>, <span class="string">&quot;应发工资&quot;</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;i; j++)&#123;</span><br><span class="line"></span><br><span class="line">id_data[j] = data[j].id;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">qsort(id_data, i, <span class="keyword">sizeof</span>(id_data[<span class="number">0</span>]) , cmp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n排序成功！\n\n&quot;</span>) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据表的字段输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">8</span>; n++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-12s&quot;</span> , str[n]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据排序输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n1 = <span class="number">0</span>; n1&lt;i; n1++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n2 = <span class="number">0</span>; n2&lt;i; n2++ )&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(id_data[n1] == data[n2].id)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %-10d&quot;</span>,    data[n2].id); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %-10s&quot;</span>,    data[n2].name); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;   %-10s&quot;</span>,  data[n2].sex); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>,     data[n2].belong); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;    %-10d&quot;</span>, data[n2].basic_pay); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[n2].add_pay); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[n2].reward_pay); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[n2].all_pay ); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"> getchar();</span><br><span class="line"> getchar();</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 依据代码，我的思路对应关系如下</p><ul><li>住址 ==&gt; 数组元素下标，即<code>data</code>数组的下标</li><li>门牌号 ==&gt;  <code>data[j].id</code></li><li>记录门牌号 ==&gt; 用了另一个数组：<code>id_data[j]</code> 来储存</li><li>排列门牌号大小 ==&gt; 将<code>id_data[j]</code> 存储的门牌号排序，这里使用了C语言内置的排序函数：qsort()</li><li>依次拜访 ==&gt; 两层循环，外层循环：<code>for(int n1 = 0; n1&lt;i; n1++)</code>循环名单上排列好的门牌号，内层循环：<code>for(int n2 = 0; n2&lt;i; n2++ )</code>，一个个去找符合名单上第一位的门牌号，然后输出</li></ul><p>另外注意，作为一个大学生的作业，使用内置的qsort()排序函数应该是非法的（狗头），应该使用冒泡排序或选择排序！</p><p>好，我摊牌啦，我就是想偷一下懒……</p><h5 id="2-查询员工信息"><a href="#2-查询员工信息" class="headerlink" title="2.查询员工信息"></a>2.查询员工信息</h5><p>查询的思路和删除信息，修改信息相似，没什么特别的地方</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询员工信息 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">req</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = lenth;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span>* str[<span class="number">8</span>] = &#123;<span class="string">&quot;工号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;部门&quot;</span>, <span class="string">&quot;基本工资&quot;</span>, <span class="string">&quot;绩效工资&quot;</span>, <span class="string">&quot;奖金&quot;</span>, <span class="string">&quot;应发工资&quot;</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n请输入需要查询员工工号：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">8</span>; n++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-12s&quot;</span> , str[n]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i+<span class="number">1</span>; j++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num==data[j].id)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %-10d&quot;</span>,    data[j].id); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %-10s&quot;</span>,    data[j].name); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;   %-10s&quot;</span>,  data[j].sex); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>,     data[j].belong); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;    %-10d&quot;</span>, data[j].basic_pay); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].add_pay); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].reward_pay); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].all_pay ); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n查询成功！\n\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(j==i+<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; 无\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n查无此人!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里输出数据表的表头，用了数组来存储字符串，要注意加<em>号：    `char</em> str[8]`</p><h3 id="查询全部数据"><a href="#查询全部数据" class="headerlink" title="查询全部数据"></a>查询全部数据</h3><p>无脑遍历输出即可，就是输出格式上要有调整，一般可以用<code>printf(&quot;%-9d&quot;)</code>占9个空格，左对齐的方式来调整输出格式，输出那里我也是为了美观才一个个去加空格调整格式，就不要吐槽我代码格式不整洁了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询全部数据 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">showall</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span>* str[<span class="number">8</span>] = &#123;<span class="string">&quot;工号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;性别&quot;</span>, <span class="string">&quot;部门&quot;</span>, <span class="string">&quot;基本工资&quot;</span>, <span class="string">&quot;绩效工资&quot;</span>, <span class="string">&quot;奖金&quot;</span>, <span class="string">&quot;应发工资&quot;</span>&#125;; </span><br><span class="line">i = lenth - <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">data[i].all_pay = data[i].basic_pay + data[i].add_pay + data[i].reward_pay;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查询成功！\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">8</span>; n++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-12s&quot;</span> , str[n]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i; j++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %-10d&quot;</span>,    data[j].id); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %-10s&quot;</span>,    data[j].name); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;   %-10s&quot;</span>,  data[j].sex); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>,     data[j].belong); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;    %-10d&quot;</span>, data[j].basic_pay); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].add_pay); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].reward_pay); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  %-10d&quot;</span>,   data[j].all_pay ); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> getchar();</span><br><span class="line"> getchar();</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整体来说，这个结课作业并不难，只用用课堂上的知识完全是可以完成了（我一个下午不到就写好）。</p><p>但事实上无论用哪门语言，增删改查的实现永远是入门重要的第一课，本项目和之前的python学生管理系统，都仅仅是在内部实现的数据增删改查，一旦退出程序，缓存就被清除了，无法保留。所以我们还应考虑——如何把这样的操作在文本中实现，如何连接mysql数据库实现同样增删改查的操作。</p><p>所以呀，流水的编程语言，铁打的管理系统，入门从管理系统开始！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言结课作业：编写一个小型工资管理系统，用来管理职工的个人基本信息及工资薪酬等数据。在技术要求方面仅仅是要求了使用结构体数据类型，但基于我们的学习进度，考察的应该是用数组来储存。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C语言" scheme="https://autovy.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="https://autovy.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="开发实战" scheme="https://autovy.github.io/tags/%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"/>
    
      <category term="管理系统" scheme="https://autovy.github.io/tags/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Python|基于python开发学生管理系统</title>
    <link href="https://autovy.github.io/2020/05/28/Python-%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://autovy.github.io/2020/05/28/Python-%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-05-28T06:30:00.000Z</published>
    <updated>2021-09-04T01:21:42.713Z</updated>
    
    <content type="html"><![CDATA[<img src="https://developer-tech.com/wp-content/uploads/sites/3/2020/12/python-right-business-programming-language-software-development-enterprise-2048x1318.jpg" height="300" alt="git" align="center"><span id="more"></span><h3 id="模拟数据库"><a href="#模拟数据库" class="headerlink" title="模拟数据库"></a>模拟数据库</h3><p>用列表为主体储存全部学生信息，方便读取。用字典这种数据类型放置一个学生信息。方便对列表操作时整块操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">data = [   <span class="comment">#列表</span></span><br><span class="line">   <span class="comment">#字典</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>:<span class="string">&quot;佛山&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Mary&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;女&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>: <span class="string">&quot;广州&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;,  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Jhon&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>: <span class="string">&quot;厦门&quot;</span>,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="操作框架"><a href="#操作框架" class="headerlink" title="操作框架"></a>操作框架</h3><p>写代码优先规划好主框架，然后再补充功能函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(</span><br><span class="line">            <span class="string">&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            欢迎使用【学生管理系统】</span></span><br><span class="line"><span class="string">            0.退出系统</span></span><br><span class="line"><span class="string">            1.显示所有学生信息</span></span><br><span class="line"><span class="string">            2.新建学生信息</span></span><br><span class="line"><span class="string">            3.查询学生信息</span></span><br><span class="line"><span class="string">            4.修改学生信息</span></span><br><span class="line"><span class="string">            5.删除学生信息                            </span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">          )</span><br><span class="line"></span><br><span class="line">    op = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的操作：&quot;</span>)) <span class="comment">#转化输入的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> op==<span class="number">1</span> :</span><br><span class="line">        print(<span class="string">&quot;显示所有学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">2</span> :</span><br><span class="line">        print(<span class="string">&quot;新建学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">3</span> :</span><br><span class="line">        print(<span class="string">&quot;查询学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">4</span> :</span><br><span class="line">        print(<span class="string">&quot;修改学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">5</span> :</span><br><span class="line">        print(<span class="string">&quot;删除学生信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op==<span class="number">0</span> :</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment">#退出循环</span></span><br></pre></td></tr></table></figure><h3 id="显示信息"><a href="#显示信息" class="headerlink" title="显示信息"></a>显示信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showall</span>() :</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas :</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;学生信息：&quot;</span>, data)</span><br></pre></td></tr></table></figure><p>1.Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串，相当于用data逐个存储列表datas的信息</p><p>2.值得注意的是，python的函数必须写在调用函数之前（毕竟没有声明嘛）</p><h3 id="新增学生"><a href="#新增学生" class="headerlink" title="新增学生"></a>新增学生</h3><p>用字典存储学生信息，用赋值的方法修改（添加）信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">creat</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;新增学生名字：&quot;</span>)</span><br><span class="line">    sex = <span class="built_in">input</span>(<span class="string">&quot;新增学生性别：&quot;</span>)</span><br><span class="line">    adress = <span class="built_in">input</span>(<span class="string">&quot;新增学生地址：&quot;</span>) <span class="comment">#变量储存</span></span><br><span class="line">    student = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: sex,</span><br><span class="line">        <span class="string">&quot;adress&quot;</span>: adress</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    datas.append(student) <span class="comment">#新增列表的项</span></span><br></pre></td></tr></table></figure><h3 id="查询学生"><a href="#查询学生" class="headerlink" title="查询学生"></a>查询学生</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">req</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;查询学生姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  datas:</span><br><span class="line">        <span class="keyword">if</span>  data[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            print(data)</span><br></pre></td></tr></table></figure><p>列表+字典的信息储存形式用循环遍历字典内容，data就是字典名</p><h3 id="修改学生信息"><a href="#修改学生信息" class="headerlink" title="修改学生信息"></a>修改学生信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;修改学生的姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  datas:</span><br><span class="line">        <span class="keyword">if</span>  data[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            print(<span class="string">&quot;修改前学生信息：&quot;</span>,data)</span><br><span class="line">            data[<span class="string">&quot;name&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;修改的名字：&quot;</span>)</span><br><span class="line">            data[<span class="string">&quot;sex&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;修改性别：&quot;</span>)</span><br><span class="line">            data[<span class="string">&quot;adress&quot;</span>] = <span class="built_in">input</span>(<span class="string">&quot;修改地址：&quot;</span>)</span><br><span class="line">            print(<span class="string">&quot;修改后学生信息：&quot;</span>,data)</span><br></pre></td></tr></table></figure><p>循环遍历字典内容，赋值修改信息</p><h3 id="删除学生信息"><a href="#删除学生信息" class="headerlink" title="删除学生信息"></a>删除学生信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>() :</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;删除学生的姓名：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span>  datas:</span><br><span class="line">        <span class="keyword">if</span>  data[<span class="string">&quot;name&quot;</span>] == name:</span><br><span class="line">            datas.remove(data)</span><br></pre></td></tr></table></figure><p>data中相当于存储了整个字典，把他一整个删去即可</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://developer-tech.com/wp-content/uploads/sites/3/2020/12/python-right-business-programming-language-software-development-enterprise-2048x1318.jpg&quot; height=&quot;300&quot; alt=&quot;git&quot; align=&quot;center&quot;&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://autovy.github.io/categories/python/"/>
    
    
      <category term="开发实战" scheme="https://autovy.github.io/tags/%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"/>
    
      <category term="python" scheme="https://autovy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C语言|数据结构入门指南</title>
    <link href="https://autovy.github.io/2020/03/10/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://autovy.github.io/2020/03/10/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</id>
    <published>2020-03-10T06:30:00.000Z</published>
    <updated>2021-09-04T01:19:54.691Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040908422.png" alt="image-20210205093243144"></p><span id="more"></span><h3 id="数据结构入门指南（C语言版）"><a href="#数据结构入门指南（C语言版）" class="headerlink" title="数据结构入门指南（C语言版）"></a>数据结构入门指南（C语言版）</h3><p>（图片来源于《计算机是怎么跑起来的》一书和GeeksforGeeks网站）</p><h4 id="初识数据结构"><a href="#初识数据结构" class="headerlink" title="初识数据结构"></a>初识数据结构</h4><h5 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h5><p>数组是数据结构的基础。</p><p>数组在程序中往往是从内存整体中分配出一块连续的空间，数组反映了内存的物理结构</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040908422.png" alt="image-20210205093243144"></p><h5 id="2-数组的应用"><a href="#2-数组的应用" class="headerlink" title="2.数组的应用"></a>2.数组的应用</h5><p>以数组为基础的数据结构，可供各种各样的算法处理大量数据</p><h5 id="3-数据结构概念"><a href="#3-数据结构概念" class="headerlink" title="3.数据结构概念"></a>3.数据结构概念</h5><p>内存的物理结构无法改变，而数据结构可以通过程序在逻辑上改变内存的物理结构，使数据按照自己的相反分布</p><p>典型的数据结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909890.png" alt="image-20210205094134834"></p><h4 id="栈的实现方法（stack）"><a href="#栈的实现方法（stack）" class="headerlink" title="栈的实现方法（stack）"></a>栈的实现方法（stack）</h4><h5 id="1-栈的特点"><a href="#1-栈的特点" class="headerlink" title="1.栈的特点"></a>1.栈的特点</h5><p>栈中数据的使用顺序和堆积顺序是相反的，堆积顺序是从下到上，而使用顺序是从上到上，就好像干草堆一样</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909864.png" alt="image-20210205095057769"></p><p>这种数据存取方式称为LIFO（last in first out，后进先出），即最后存入的数据最先被处理</p><h5 id="2-栈的实现"><a href="#2-栈的实现" class="headerlink" title="2.栈的实现"></a>2.栈的实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 构建数组作为栈的本体 </span></span><br><span class="line"><span class="keyword">char</span> Stack[<span class="number">100</span>];</span><br><span class="line"><span class="comment">// 栈顶指针，始终指向栈数据的最顶端 </span></span><br><span class="line"><span class="keyword">char</span> StackPointer = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈函数，存储数据 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">char</span> Data)</span></span>&#123;</span><br><span class="line"><span class="comment">// 数据存储在栈顶指针指向位置 </span></span><br><span class="line">Stack[StackPointer] = Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新栈顶指针的值 </span></span><br><span class="line">StackPointer++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈函数，读取数据 </span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Pop</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新栈顶指针的值 </span></span><br><span class="line">StackPointer--;</span><br><span class="line"><span class="comment">// 在栈顶指针处取出数据 </span></span><br><span class="line"><span class="keyword">return</span> Stack[StackPointer];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 运行实例 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//存储数据 </span></span><br><span class="line">Push(<span class="number">1</span>);</span><br><span class="line">Push(<span class="number">2</span>);</span><br><span class="line">Push(<span class="number">3</span>);</span><br><span class="line">Push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取数据 </span></span><br><span class="line"><span class="keyword">while</span> (StackPointer !=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> result = Pop();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-原理图"><a href="#3-原理图" class="headerlink" title="3.原理图"></a>3.原理图</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909584.png" alt="image-20210205104130629"></p><p>注意此图的栈底放在上面，最底部才是栈顶</p><h5 id="4-语法解释"><a href="#4-语法解释" class="headerlink" title="4.语法解释"></a>4.语法解释</h5><ul><li>最终实现效果是：存入顺序是1，2，3，4；取出顺序是4，3，2，1</li><li>栈的成分：数组，栈顶指针，入栈函数，出栈函数</li><li>入栈函数将数据压入栈中</li><li>出栈函数将数据从栈中弹出</li><li>存储5个数据，最后栈顶指针指向5的地址（地址4为最后一个数据），所以在出栈函数中，栈顶指针需要减1，才能取得第一个数据</li></ul><h4 id="队列的实现方法（queue）"><a href="#队列的实现方法（queue）" class="headerlink" title="队列的实现方法（queue）"></a>队列的实现方法（queue）</h4><h5 id="1-队列的特点"><a href="#1-队列的特点" class="headerlink" title="1.队列的特点"></a>1.队列的特点</h5><p>队列中最先存入的数据是被最先处理的，这种方式被称为FIFO（first in first out, 先进先出）。就像排队上车一样，先到的人就能先上车</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909768.png" alt="image-20210205154955234"></p><h5 id="2-队列的实现"><a href="#2-队列的实现" class="headerlink" title="2.队列的实现"></a>2.队列的实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建作为队列本质的数组 </span></span><br><span class="line"><span class="keyword">char</span>  Queue[<span class="number">100</span>];</span><br><span class="line"><span class="comment">// 标识数据存储位置的索引 </span></span><br><span class="line"><span class="keyword">char</span> SetIndex = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 标识数据读取位置的索引 </span></span><br><span class="line"><span class="keyword">char</span> GetIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 存储数据函数 </span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">char</span> Data)</span></span>&#123;</span><br><span class="line"> <span class="comment">// 存入数据</span></span><br><span class="line"> Queue [SetIndex] = Data;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 更新存储索引 </span></span><br><span class="line"> SetIndex++;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 到达数组末尾则折回开头 </span></span><br><span class="line"> <span class="keyword">if</span>(SetIndex&gt;=<span class="number">100</span>)&#123;</span><br><span class="line"> SetIndex = <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 读取数据函数 </span></span><br><span class="line"> <span class="function"><span class="keyword">char</span> <span class="title">Get</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">char</span> Data;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 读取数据 </span></span><br><span class="line"> Data = Queue[GetIndex];</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 更新读取索引 </span></span><br><span class="line"> GetIndex++;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//  到达数组末尾则折回开头 </span></span><br><span class="line"> <span class="keyword">if</span>(GetIndex&gt;=<span class="number">100</span>)&#123;</span><br><span class="line"> GetIndex = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回读出数据 </span></span><br><span class="line"><span class="keyword">return</span> Data;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 运行实例 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//存储数据 </span></span><br><span class="line">Set(<span class="number">1</span>);</span><br><span class="line">Set(<span class="number">2</span>);</span><br><span class="line">Set(<span class="number">3</span>);</span><br><span class="line">Set(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取数据 </span></span><br><span class="line"><span class="keyword">while</span> (GetIndex != SetIndex) &#123;</span><br><span class="line"><span class="keyword">char</span> result = Get();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-原理图-1"><a href="#3-原理图-1" class="headerlink" title="3.原理图"></a>3.原理图</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909593.png" alt="image-20210205161354653"></p><h5 id="4-语法解释-1"><a href="#4-语法解释-1" class="headerlink" title="4.语法解释"></a>4.语法解释</h5><ul><li>最终实现效果是：存入顺序是1，2，3，4；取出顺序是1，2，3，4</li><li>栈的成分：数组，数据存储指针，数据读取指针，存储函数，读取函数</li><li>队列的逻辑结构实际上是圆环，数据存满后又会回到开头开始存数据</li><li>数据读取指针和数据存储指针是一样的，走向一样，最终值（指存完数据和读完数据的最后值的值）也要相等</li></ul><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><h5 id="1-组成"><a href="#1-组成" class="headerlink" title="1.组成"></a>1.组成</h5><p>结构体即把若干个数据项汇集到一起并赋予其名字的一个整体</p><p>定义完结构体后，我们可以把结构体当作一个数据类型，可以用它来声明变量</p><p>每一个被汇集到结构体的每一个数据项叫做结构体的成员</p><h5 id="2-运用"><a href="#2-运用" class="headerlink" title="2.运用"></a>2.运用</h5><p>我们需要用到结构体数组来实现链表和二叉树</p><h5 id="3-内存分布"><a href="#3-内存分布" class="headerlink" title="3.内存分布"></a>3.内存分布</h5><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909289.png" alt="image-20210205182952994"></p><h4 id="链表的实现方法（Linked-list）"><a href="#链表的实现方法（Linked-list）" class="headerlink" title="链表的实现方法（Linked list）"></a>链表的实现方法（Linked list）</h4><h5 id="1-链表的特点"><a href="#1-链表的特点" class="headerlink" title="1.链表的特点"></a>1.链表的特点</h5><p>链表容易实现数据的插入和删除，任意改变数据的排列方式。就像人手拉手排成一排，要改变顺序，只需要改变牵手对象即可实现</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909642.png" alt="image-20210205183938605"></p><h5 id="2-链表的实现"><a href="#2-链表的实现" class="headerlink" title="2.链表的实现"></a>2.链表的实现</h5><p>参考文章：<a href="https://www.geeksforgeeks.org/linked-list-set-1-introduction/等系列文章">https://www.geeksforgeeks.org/linked-list-set-1-introduction/等系列文章</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//链表操作函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(struct Node* n)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertAfter</span><span class="params">(struct Node* prev_node, <span class="keyword">int</span> new_data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(struct Node** head_ref, <span class="keyword">int</span> new_data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">append</span> <span class="params">(struct Node**head_ref, <span class="keyword">int</span> new_data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(struct Node**head, <span class="keyword">int</span> key)</span> </span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链表节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="comment">// 存储该节点内容 </span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  存储下一个节点的地址 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序简单创建一个三节点链表</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 声明节点 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">second</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">third</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为三个节点分配空间</span></span><br><span class="line">head = (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node)); </span><br><span class="line">second = (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node)); </span><br><span class="line">third = (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node)); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在节点内存入数据（内容+下个节点的地址）构成链表</span></span><br><span class="line">head -&gt; data = <span class="number">1</span>;</span><br><span class="line">head -&gt; next = second; </span><br><span class="line"></span><br><span class="line">second -&gt; data = <span class="number">2</span>;</span><br><span class="line">second -&gt; next = third;</span><br><span class="line"></span><br><span class="line">third -&gt; data = <span class="number">3</span>;</span><br><span class="line">third -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最末端插入6，则链表为 1-&gt;2-&gt; 3-&gt;6-&gt;NULL</span></span><br><span class="line">append(&amp;head,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在最前端插入7， 则链表为 7-&gt;1-&gt;2-&gt; 3-&gt;6-&gt;NULL</span></span><br><span class="line">push(&amp;head,<span class="number">7</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在指定位置（第三个节点的下个节点后面）插入8， 则链表为 7-&gt;1-&gt;8-&gt;2-&gt;3-&gt;6-&gt;NULL</span></span><br><span class="line">insertAfter(head-&gt;next,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除2</span></span><br><span class="line">deleteNode(&amp;head, <span class="number">2</span>); </span><br><span class="line"> </span><br><span class="line">printList(head); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从指定位置开始遍历链表函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(struct Node* n)</span></span>&#123;</span><br><span class="line"><span class="comment">// 链表的末尾一定指向NULL </span></span><br><span class="line"><span class="keyword">while</span>(n != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n-&gt;data);</span><br><span class="line">n = n-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 链表插入有三种形式：1. 在最前面插入 2.指定位置插入  3. 在最末尾插入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.在最前面插入</span></span><br><span class="line"><span class="comment">// 两个参数分别的含义是： 给定头的引用（指向指针的指针），插入的数据 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(struct Node** head_ref, <span class="keyword">int</span> new_data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// （1）为新节点分配空间 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">new_node</span> =</span> (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line"></span><br><span class="line"><span class="comment">// （2）放入数据</span></span><br><span class="line">new_node-&gt;data = new_data; </span><br><span class="line"></span><br><span class="line"><span class="comment">// （3） 新节点存储原头部的地址</span></span><br><span class="line">new_node-&gt;next = (*head_ref);</span><br><span class="line"></span><br><span class="line"><span class="comment">// (4) 移动头部指向新节点，新节点成为新头部</span></span><br><span class="line">(*head_ref) = new_node; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.在指定节点后面插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertAfter</span><span class="params">(struct Node* prev_node, <span class="keyword">int</span> new_data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// （1）检查给定节点是否为空</span></span><br><span class="line"><span class="keyword">if</span>(prev_node==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// (2)为新节点分配空间 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">new_node</span> =</span> (struct Node*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line"></span><br><span class="line"><span class="comment">// (3)放入数据</span></span><br><span class="line">new_node-&gt;data = new_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (4)新节点存储插入节点存储的下个节点的地址</span></span><br><span class="line">new_node-&gt;next = prev_node-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入节点存储新节点的地址</span></span><br><span class="line">prev_node-&gt;next = new_node; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 3.在最末尾插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">append</span> <span class="params">(struct Node**head_ref, <span class="keyword">int</span> new_data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(1) 为新节点分配空间 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">new_node</span> =</span> (struct Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line"><span class="comment">// 第5步中使用 ,让第五步的找尾部从头部开始 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">last</span> =</span> *head_ref;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) 放入数据</span></span><br><span class="line">new_node-&gt;data = new_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (3)  新节点要放到最后，所以存储地址为NULL</span></span><br><span class="line">new_node-&gt;next = <span class="literal">NULL</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// (4) 如果链表为空，则新节点成为头部</span></span><br><span class="line"><span class="keyword">if</span>(*head_ref == <span class="literal">NULL</span>)&#123;</span><br><span class="line"></span><br><span class="line">*head_ref = new_node;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (5) 链表不为空，一直摸到链表末端</span></span><br><span class="line"><span class="keyword">while</span>(last-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">last = last-&gt;next;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// (6) 原末端节点存储的地址改为新节点</span></span><br><span class="line">last-&gt;next = new_node;</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除给定值所在节点 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(struct Node**head_ref, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 存储头部节点</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">temp</span> =</span> *head_ref, *prev;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 如果头部节点含有给定值，需要删除头部</span></span><br><span class="line"><span class="keyword">if</span>(temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;data == key)&#123;</span><br><span class="line"><span class="comment">// 改变头部</span></span><br><span class="line">*head_ref = temp-&gt;next; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放旧头部</span></span><br><span class="line"><span class="built_in">free</span>(temp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历节点，搜索给定值的位置  </span></span><br><span class="line"><span class="keyword">while</span>(temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;data !=key)&#123;</span><br><span class="line">prev = temp;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果给定值不存在</span></span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到位置后，开始删除操作</span></span><br><span class="line"><span class="comment">// 移动删除节点前一个节点的链接到删除节点的下一个节点</span></span><br><span class="line">prev-&gt;next = temp-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放需要删除的节点</span></span><br><span class="line"><span class="built_in">free</span>(temp); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-原理图-2"><a href="#3-原理图-2" class="headerlink" title="3.原理图"></a>3.原理图</h5><p>（1）链表结构图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909831.png" alt="image-20210208081719442"></p><p>（2）头部插入示意图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909591.png" alt="image-20210208081851924"></p><p>（3）指定位置插入示意图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909857.png" alt="image-20210208081923801"></p><p>（4）末端插入示意图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909257.png" alt="image-20210208082016685"></p><p>（5）删除示意图</p><p><img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909080.png" alt="image-20210208082128253"></p><h5 id="4-语法解释-2"><a href="#4-语法解释-2" class="headerlink" title="4.语法解释"></a>4.语法解释</h5><ul><li><p><code>struct Node* next</code>声明后，next存储地址，*next是地址中的值（自我引用结构体）</p></li><li><p>声明节点中，<code>struct Node* head = NULL</code>，则head内为地址</p></li><li><p>malloc()函数的声明方法为：<code>void *malloc(size_t size)</code>，其作用是分配所需的内存空间，返回值即为指向被分配内存的指针（地址）</p></li><li><p>则有head，second，third存储的是指向该节点的指针（地址），要使指向该节点的指针访问到节点的成员，那就用<code>-&gt;</code>运算符</p></li><li><p><code>struct Node** head_ref</code>相当于指向该结构体的指针的指针，即该指针存放的位置，相当于head（头部指针）取址即&amp;head；* head_ref则为该结构的指针（即head，但是*head_ref这种方式才能动态移动指针）</p></li></ul><h4 id="二叉树的实现方法（Binary-tree）"><a href="#二叉树的实现方法（Binary-tree）" class="headerlink" title="二叉树的实现方法（Binary tree）"></a>二叉树的实现方法（Binary tree）</h4><h5 id="1-二叉树的特点"><a href="#1-二叉树的特点" class="headerlink" title="1.二叉树的特点"></a>1.二叉树的特点</h5><p>  二叉树是基于链表的，用到的还是自我引用的结构体，但是会带有两个连接信息（即指向其他元素的指针）</p><p>  二叉树多用于实现用于搜索数据的算法（如：二分查找法）</p><p>  二叉树结构在搜索数据时，不是沿着一条线搜索，而是循着二叉树的分叉不断向下搜索</p><p>  <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909207.png" alt="image-20210208095901708"></p><h5 id="2-二叉树的实现"><a href="#2-二叉树的实现" class="headerlink" title="2.二叉树的实现"></a>2.二叉树的实现</h5>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">left</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">right</span>;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 声明操作二叉树的函数</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printPostorder</span><span class="params">(struct node* node)</span></span>; </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printInorder</span><span class="params">(struct node* node)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printPreorder</span><span class="params">(struct node* node)</span></span>;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建一个新节点函数</span></span><br><span class="line">  <span class="comment">// 返回值为该节点的地址 </span></span><br><span class="line">  <span class="function">struct node* <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 分配空间给新节点 </span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">node</span> =</span> (struct node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 分配数据给该节点</span></span><br><span class="line">  node-&gt;data = data;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 初始左右分叉的指向</span></span><br><span class="line">  node-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">  node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (node);   </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建二叉树的首节点（root）</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">root</span> =</span> newNode(<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 从首节点出发分叉出两页 </span></span><br><span class="line">  root-&gt;left = newNode(<span class="number">2</span>);</span><br><span class="line">  root-&gt;right = newNode(<span class="number">3</span>); </span><br><span class="line">  </span><br><span class="line">  root-&gt;left-&gt;left = newNode(<span class="number">4</span>);</span><br><span class="line">  root-&gt;left-&gt;right = newNode(<span class="number">5</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;后序顺序打印\n&quot;</span>);</span><br><span class="line">  printPostorder(root); </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>) ;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;中序顺序打印\n&quot;</span>);</span><br><span class="line">  printInorder(root); </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>) ;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;前序顺序打印\n&quot;</span>);</span><br><span class="line">  printPreorder(root); </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3种遍历方法 </span></span><br><span class="line">  <span class="comment">// 1.后序遍历 （左-&gt;右-&gt;根） </span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printPostorder</span><span class="params">(struct node* node)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(node==<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  printPostorder(node-&gt;left);</span><br><span class="line">  printPostorder(node-&gt;right); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 打印出该节点的数据 </span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, node-&gt;data); </span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2.中序遍历（左-&gt;根-&gt;右）</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printInorder</span><span class="params">(struct node* node)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(node==<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  printInorder(node-&gt;left);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, node-&gt;data);</span><br><span class="line">  printInorder(node-&gt;right);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//  3. 前序遍历 (根-&gt;左-&gt;右)</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">printPreorder</span><span class="params">(struct node* node)</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">if</span>(node == <span class="literal">NULL</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, node-&gt;data);</span><br><span class="line">  printPreorder(node-&gt;left);</span><br><span class="line">  printPreorder(node-&gt;right);</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h5 id="3-二叉树原理图"><a href="#3-二叉树原理图" class="headerlink" title="3.二叉树原理图"></a>3.二叉树原理图</h5><p>  （1）遍历方法示意图</p><p>  <img src="https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040909994.png" alt="image-20210208150838184"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Autovy/Image/img/202109040908422.png&quot; alt=&quot;image-20210205093243144&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="C语言" scheme="https://autovy.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="https://autovy.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="入门教程" scheme="https://autovy.github.io/tags/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="算法" scheme="https://autovy.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://autovy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
